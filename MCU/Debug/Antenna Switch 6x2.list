
Antenna Switch 6x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  080032a0  080032a0  000132a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034e8  080034e8  00020440  2**0
                  CONTENTS
  4 .ARM          00000000  080034e8  080034e8  00020440  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034e8  080034e8  00020440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e8  080034e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000440  20000000  080034f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000440  08003930  00020440  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000950  08003930  00020950  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e6a  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e0a  00000000  00000000  000372d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00006699  00000000  00000000  0003a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a80  00000000  00000000  00040778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ad8  00000000  00000000  000411f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000f3f8  00000000  00000000  00041cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000bdf6  00000000  00000000  000510c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004507f  00000000  00000000  0005cebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a1f3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001de4  00000000  00000000  000a1fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000440 	.word	0x20000440
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003288 	.word	0x08003288

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000444 	.word	0x20000444
 8000104:	08003288 	.word	0x08003288

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fc70 	bl	8000b2c <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 f860 	bl	8000318 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 f820 	bl	80002a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
{
 8000268:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	2110      	movs	r1, #16
 8000270:	430b      	orrs	r3, r1
 8000272:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f002 fdd5 	bl	8002e28 <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000834 	.word	0x20000834

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	20000834 	.word	0x20000834

080002a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a6:	2800      	cmp	r0, #0
 80002a8:	db11      	blt.n	80002ce <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	0884      	lsrs	r4, r0, #2
 80002ac:	4d13      	ldr	r5, [pc, #76]	; (80002fc <HAL_NVIC_SetPriority+0x58>)
 80002ae:	34c0      	adds	r4, #192	; 0xc0
 80002b0:	00a4      	lsls	r4, r4, #2
 80002b2:	5962      	ldr	r2, [r4, r5]
 80002b4:	2303      	movs	r3, #3
 80002b6:	4018      	ands	r0, r3
 80002b8:	00c0      	lsls	r0, r0, #3
 80002ba:	33fc      	adds	r3, #252	; 0xfc
 80002bc:	001e      	movs	r6, r3
 80002be:	4086      	lsls	r6, r0
 80002c0:	43b2      	bics	r2, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	0189      	lsls	r1, r1, #6
 80002c4:	400b      	ands	r3, r1
 80002c6:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4313      	orrs	r3, r2
 80002ca:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002cc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ce:	b2c0      	uxtb	r0, r0
 80002d0:	220f      	movs	r2, #15
 80002d2:	4002      	ands	r2, r0
 80002d4:	3a08      	subs	r2, #8
 80002d6:	0892      	lsrs	r2, r2, #2
 80002d8:	3206      	adds	r2, #6
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_NVIC_SetPriority+0x5c>)
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	685d      	ldr	r5, [r3, #4]
 80002e2:	2403      	movs	r4, #3
 80002e4:	4020      	ands	r0, r4
 80002e6:	00c0      	lsls	r0, r0, #3
 80002e8:	22ff      	movs	r2, #255	; 0xff
 80002ea:	0014      	movs	r4, r2
 80002ec:	4084      	lsls	r4, r0
 80002ee:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	0189      	lsls	r1, r1, #6
 80002f2:	400a      	ands	r2, r1
 80002f4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f6:	432a      	orrs	r2, r5
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	e7e7      	b.n	80002cc <HAL_NVIC_SetPriority+0x28>
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x10>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_SYSTICK_Config+0x2c>)
 800031c:	4298      	cmp	r0, r3
 800031e:	d80f      	bhi.n	8000340 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a09      	ldr	r2, [pc, #36]	; (8000348 <HAL_SYSTICK_Config+0x30>)
 8000322:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_SYSTICK_Config+0x34>)
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	021b      	lsls	r3, r3, #8
 800032a:	0a1b      	lsrs	r3, r3, #8
 800032c:	21c0      	movs	r1, #192	; 0xc0
 800032e:	0609      	lsls	r1, r1, #24
 8000330:	430b      	orrs	r3, r1
 8000332:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	2300      	movs	r3, #0
 8000336:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	3307      	adds	r3, #7
 800033a:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000340:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000342:	e7fc      	b.n	800033e <HAL_SYSTICK_Config+0x26>
 8000344:	00ffffff 	.word	0x00ffffff
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	46c6      	mov	lr, r8
 8000354:	b500      	push	{lr}
 8000356:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 8000358:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035a:	e038      	b.n	80003ce <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800035c:	2603      	movs	r6, #3
 800035e:	e000      	b.n	8000362 <HAL_GPIO_Init+0x12>
 8000360:	2600      	movs	r6, #0
 8000362:	40ae      	lsls	r6, r5
 8000364:	0035      	movs	r5, r6
 8000366:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000368:	3402      	adds	r4, #2
 800036a:	00a4      	lsls	r4, r4, #2
 800036c:	4e55      	ldr	r6, [pc, #340]	; (80004c4 <HAL_GPIO_Init+0x174>)
 800036e:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000370:	4c55      	ldr	r4, [pc, #340]	; (80004c8 <HAL_GPIO_Init+0x178>)
 8000372:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000374:	4642      	mov	r2, r8
 8000376:	43d4      	mvns	r4, r2
 8000378:	002e      	movs	r6, r5
 800037a:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800037c:	684a      	ldr	r2, [r1, #4]
 800037e:	03d2      	lsls	r2, r2, #15
 8000380:	d502      	bpl.n	8000388 <HAL_GPIO_Init+0x38>
        {
          SET_BIT(temp, iocurrent); 
 8000382:	4642      	mov	r2, r8
 8000384:	4315      	orrs	r5, r2
 8000386:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8000388:	4d4f      	ldr	r5, [pc, #316]	; (80004c8 <HAL_GPIO_Init+0x178>)
 800038a:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 800038c:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 800038e:	002e      	movs	r6, r5
 8000390:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000392:	684a      	ldr	r2, [r1, #4]
 8000394:	0392      	lsls	r2, r2, #14
 8000396:	d502      	bpl.n	800039e <HAL_GPIO_Init+0x4e>
        { 
          SET_BIT(temp, iocurrent); 
 8000398:	4642      	mov	r2, r8
 800039a:	4315      	orrs	r5, r2
 800039c:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 800039e:	4d4a      	ldr	r5, [pc, #296]	; (80004c8 <HAL_GPIO_Init+0x178>)
 80003a0:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80003a2:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003a4:	002e      	movs	r6, r5
 80003a6:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003a8:	684a      	ldr	r2, [r1, #4]
 80003aa:	02d2      	lsls	r2, r2, #11
 80003ac:	d502      	bpl.n	80003b4 <HAL_GPIO_Init+0x64>
        {
          SET_BIT(temp, iocurrent); 
 80003ae:	4642      	mov	r2, r8
 80003b0:	4315      	orrs	r5, r2
 80003b2:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80003b4:	4d44      	ldr	r5, [pc, #272]	; (80004c8 <HAL_GPIO_Init+0x178>)
 80003b6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80003b8:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80003ba:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003bc:	684a      	ldr	r2, [r1, #4]
 80003be:	0292      	lsls	r2, r2, #10
 80003c0:	d502      	bpl.n	80003c8 <HAL_GPIO_Init+0x78>
        {
          SET_BIT(temp, iocurrent); 
 80003c2:	4642      	mov	r2, r8
 80003c4:	432a      	orrs	r2, r5
 80003c6:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80003c8:	4a3f      	ldr	r2, [pc, #252]	; (80004c8 <HAL_GPIO_Init+0x178>)
 80003ca:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80003cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003ce:	680a      	ldr	r2, [r1, #0]
 80003d0:	0014      	movs	r4, r2
 80003d2:	40dc      	lsrs	r4, r3
 80003d4:	d071      	beq.n	80004ba <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003d6:	2501      	movs	r5, #1
 80003d8:	409d      	lsls	r5, r3
 80003da:	402a      	ands	r2, r5
 80003dc:	4690      	mov	r8, r2
    if(iocurrent)
 80003de:	d0f5      	beq.n	80003cc <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003e0:	684c      	ldr	r4, [r1, #4]
 80003e2:	2c02      	cmp	r4, #2
 80003e4:	d001      	beq.n	80003ea <HAL_GPIO_Init+0x9a>
 80003e6:	2c12      	cmp	r4, #18
 80003e8:	d10e      	bne.n	8000408 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3];
 80003ea:	08dc      	lsrs	r4, r3, #3
 80003ec:	3408      	adds	r4, #8
 80003ee:	00a4      	lsls	r4, r4, #2
 80003f0:	5827      	ldr	r7, [r4, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003f2:	2607      	movs	r6, #7
 80003f4:	401e      	ands	r6, r3
 80003f6:	00b6      	lsls	r6, r6, #2
 80003f8:	220f      	movs	r2, #15
 80003fa:	40b2      	lsls	r2, r6
 80003fc:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80003fe:	690a      	ldr	r2, [r1, #16]
 8000400:	40b2      	lsls	r2, r6
 8000402:	0016      	movs	r6, r2
 8000404:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000406:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8000408:	6802      	ldr	r2, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800040a:	005f      	lsls	r7, r3, #1
 800040c:	2403      	movs	r4, #3
 800040e:	0026      	movs	r6, r4
 8000410:	40be      	lsls	r6, r7
 8000412:	43f6      	mvns	r6, r6
 8000414:	4032      	ands	r2, r6
 8000416:	4694      	mov	ip, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000418:	684a      	ldr	r2, [r1, #4]
 800041a:	4014      	ands	r4, r2
 800041c:	40bc      	lsls	r4, r7
 800041e:	4662      	mov	r2, ip
 8000420:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8000422:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000424:	684c      	ldr	r4, [r1, #4]
 8000426:	1e62      	subs	r2, r4, #1
 8000428:	2a01      	cmp	r2, #1
 800042a:	d903      	bls.n	8000434 <HAL_GPIO_Init+0xe4>
 800042c:	2c11      	cmp	r4, #17
 800042e:	d001      	beq.n	8000434 <HAL_GPIO_Init+0xe4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000430:	2c12      	cmp	r4, #18
 8000432:	d110      	bne.n	8000456 <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR; 
 8000434:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000436:	4034      	ands	r4, r6
 8000438:	46a4      	mov	ip, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800043a:	68cc      	ldr	r4, [r1, #12]
 800043c:	40bc      	lsls	r4, r7
 800043e:	4662      	mov	r2, ip
 8000440:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8000442:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000444:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000446:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000448:	684a      	ldr	r2, [r1, #4]
 800044a:	0912      	lsrs	r2, r2, #4
 800044c:	2501      	movs	r5, #1
 800044e:	4015      	ands	r5, r2
 8000450:	409d      	lsls	r5, r3
 8000452:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 8000454:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000456:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000458:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800045a:	688c      	ldr	r4, [r1, #8]
 800045c:	40bc      	lsls	r4, r7
 800045e:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000460:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000462:	684a      	ldr	r2, [r1, #4]
 8000464:	00d2      	lsls	r2, r2, #3
 8000466:	d5b1      	bpl.n	80003cc <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000468:	4d18      	ldr	r5, [pc, #96]	; (80004cc <HAL_GPIO_Init+0x17c>)
 800046a:	69ae      	ldr	r6, [r5, #24]
 800046c:	2401      	movs	r4, #1
 800046e:	4326      	orrs	r6, r4
 8000470:	61ae      	str	r6, [r5, #24]
 8000472:	69ad      	ldr	r5, [r5, #24]
 8000474:	402c      	ands	r4, r5
 8000476:	9401      	str	r4, [sp, #4]
 8000478:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800047a:	089c      	lsrs	r4, r3, #2
 800047c:	1ca5      	adds	r5, r4, #2
 800047e:	00ad      	lsls	r5, r5, #2
 8000480:	4e10      	ldr	r6, [pc, #64]	; (80004c4 <HAL_GPIO_Init+0x174>)
 8000482:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000484:	2503      	movs	r5, #3
 8000486:	401d      	ands	r5, r3
 8000488:	00ad      	lsls	r5, r5, #2
 800048a:	260f      	movs	r6, #15
 800048c:	40ae      	lsls	r6, r5
 800048e:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000490:	2690      	movs	r6, #144	; 0x90
 8000492:	05f6      	lsls	r6, r6, #23
 8000494:	42b0      	cmp	r0, r6
 8000496:	d100      	bne.n	800049a <HAL_GPIO_Init+0x14a>
 8000498:	e762      	b.n	8000360 <HAL_GPIO_Init+0x10>
 800049a:	4e0d      	ldr	r6, [pc, #52]	; (80004d0 <HAL_GPIO_Init+0x180>)
 800049c:	42b0      	cmp	r0, r6
 800049e:	d008      	beq.n	80004b2 <HAL_GPIO_Init+0x162>
 80004a0:	4e0c      	ldr	r6, [pc, #48]	; (80004d4 <HAL_GPIO_Init+0x184>)
 80004a2:	42b0      	cmp	r0, r6
 80004a4:	d007      	beq.n	80004b6 <HAL_GPIO_Init+0x166>
 80004a6:	4e0c      	ldr	r6, [pc, #48]	; (80004d8 <HAL_GPIO_Init+0x188>)
 80004a8:	42b0      	cmp	r0, r6
 80004aa:	d100      	bne.n	80004ae <HAL_GPIO_Init+0x15e>
 80004ac:	e756      	b.n	800035c <HAL_GPIO_Init+0xc>
 80004ae:	2605      	movs	r6, #5
 80004b0:	e757      	b.n	8000362 <HAL_GPIO_Init+0x12>
 80004b2:	2601      	movs	r6, #1
 80004b4:	e755      	b.n	8000362 <HAL_GPIO_Init+0x12>
 80004b6:	2602      	movs	r6, #2
 80004b8:	e753      	b.n	8000362 <HAL_GPIO_Init+0x12>
  } 
}
 80004ba:	b002      	add	sp, #8
 80004bc:	bc04      	pop	{r2}
 80004be:	4690      	mov	r8, r2
 80004c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40010000 	.word	0x40010000
 80004c8:	40010400 	.word	0x40010400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400
 80004d4:	48000800 	.word	0x48000800
 80004d8:	48000c00 	.word	0x48000c00

080004dc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80004dc:	6903      	ldr	r3, [r0, #16]
 80004de:	420b      	tst	r3, r1
 80004e0:	d101      	bne.n	80004e6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80004e2:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 80004e4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80004e6:	2001      	movs	r0, #1
 80004e8:	e7fc      	b.n	80004e4 <HAL_GPIO_ReadPin+0x8>

080004ea <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004ea:	2a00      	cmp	r2, #0
 80004ec:	d101      	bne.n	80004f2 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004ee:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80004f0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004f2:	6181      	str	r1, [r0, #24]
 80004f4:	e7fc      	b.n	80004f0 <HAL_GPIO_WritePin+0x6>

080004f6 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80004f6:	4770      	bx	lr

080004f8 <HAL_GPIO_EXTI_IRQHandler>:
{
 80004f8:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4218      	tst	r0, r3
 8000500:	d100      	bne.n	8000504 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8000502:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000504:	4b02      	ldr	r3, [pc, #8]	; (8000510 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000506:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000508:	f7ff fff5 	bl	80004f6 <HAL_GPIO_EXTI_Callback>
}
 800050c:	e7f9      	b.n	8000502 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	40010400 	.word	0x40010400

08000514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000514:	b570      	push	{r4, r5, r6, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800051a:	6803      	ldr	r3, [r0, #0]
 800051c:	07db      	lsls	r3, r3, #31
 800051e:	d526      	bpl.n	800056e <HAL_RCC_OscConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000520:	4bae      	ldr	r3, [pc, #696]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000522:	685a      	ldr	r2, [r3, #4]
 8000524:	230c      	movs	r3, #12
 8000526:	4013      	ands	r3, r2
 8000528:	2b04      	cmp	r3, #4
 800052a:	d018      	beq.n	800055e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800052c:	4bab      	ldr	r3, [pc, #684]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	230c      	movs	r3, #12
 8000532:	4013      	ands	r3, r2
 8000534:	2b08      	cmp	r3, #8
 8000536:	d00e      	beq.n	8000556 <HAL_RCC_OscConfig+0x42>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000538:	6863      	ldr	r3, [r4, #4]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d03c      	beq.n	80005b8 <HAL_RCC_OscConfig+0xa4>
 800053e:	2b00      	cmp	r3, #0
 8000540:	d151      	bne.n	80005e6 <HAL_RCC_OscConfig+0xd2>
 8000542:	4ba6      	ldr	r3, [pc, #664]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	49a6      	ldr	r1, [pc, #664]	; (80007e0 <HAL_RCC_OscConfig+0x2cc>)
 8000548:	400a      	ands	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	49a5      	ldr	r1, [pc, #660]	; (80007e4 <HAL_RCC_OscConfig+0x2d0>)
 8000550:	400a      	ands	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e036      	b.n	80005c4 <HAL_RCC_OscConfig+0xb0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000556:	4ba1      	ldr	r3, [pc, #644]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	03db      	lsls	r3, r3, #15
 800055c:	d5ec      	bpl.n	8000538 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800055e:	4b9f      	ldr	r3, [pc, #636]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	039b      	lsls	r3, r3, #14
 8000564:	d503      	bpl.n	800056e <HAL_RCC_OscConfig+0x5a>
 8000566:	6863      	ldr	r3, [r4, #4]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <HAL_RCC_OscConfig+0x5a>
 800056c:	e1ec      	b.n	8000948 <HAL_RCC_OscConfig+0x434>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	079b      	lsls	r3, r3, #30
 8000572:	d573      	bpl.n	800065c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000574:	4b99      	ldr	r3, [pc, #612]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	220c      	movs	r2, #12
 800057a:	421a      	tst	r2, r3
 800057c:	d05d      	beq.n	800063a <HAL_RCC_OscConfig+0x126>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800057e:	4b97      	ldr	r3, [pc, #604]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000580:	685a      	ldr	r2, [r3, #4]
 8000582:	230c      	movs	r3, #12
 8000584:	4013      	ands	r3, r2
 8000586:	2b08      	cmp	r3, #8
 8000588:	d053      	beq.n	8000632 <HAL_RCC_OscConfig+0x11e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800058a:	68e3      	ldr	r3, [r4, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d100      	bne.n	8000592 <HAL_RCC_OscConfig+0x7e>
 8000590:	e086      	b.n	80006a0 <HAL_RCC_OscConfig+0x18c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000592:	4a92      	ldr	r2, [pc, #584]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000594:	6813      	ldr	r3, [r2, #0]
 8000596:	2101      	movs	r1, #1
 8000598:	430b      	orrs	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800059c:	f7ff fe7c 	bl	8000298 <HAL_GetTick>
 80005a0:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005a2:	4b8e      	ldr	r3, [pc, #568]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	079b      	lsls	r3, r3, #30
 80005a8:	d471      	bmi.n	800068e <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005aa:	f7ff fe75 	bl	8000298 <HAL_GetTick>
 80005ae:	1b40      	subs	r0, r0, r5
 80005b0:	2802      	cmp	r0, #2
 80005b2:	d9f6      	bls.n	80005a2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_TIMEOUT;
 80005b4:	2003      	movs	r0, #3
 80005b6:	e1ca      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b8:	4a88      	ldr	r2, [pc, #544]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80005ba:	6811      	ldr	r1, [r2, #0]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	025b      	lsls	r3, r3, #9
 80005c0:	430b      	orrs	r3, r1
 80005c2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005c4:	6863      	ldr	r3, [r4, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d025      	beq.n	8000616 <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 80005ca:	f7ff fe65 	bl	8000298 <HAL_GetTick>
 80005ce:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005d0:	4b82      	ldr	r3, [pc, #520]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	039b      	lsls	r3, r3, #14
 80005d6:	d4ca      	bmi.n	800056e <HAL_RCC_OscConfig+0x5a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d8:	f7ff fe5e 	bl	8000298 <HAL_GetTick>
 80005dc:	1b40      	subs	r0, r0, r5
 80005de:	2864      	cmp	r0, #100	; 0x64
 80005e0:	d9f6      	bls.n	80005d0 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 80005e2:	2003      	movs	r0, #3
 80005e4:	e1b3      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d009      	beq.n	80005fe <HAL_RCC_OscConfig+0xea>
 80005ea:	4b7c      	ldr	r3, [pc, #496]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	497c      	ldr	r1, [pc, #496]	; (80007e0 <HAL_RCC_OscConfig+0x2cc>)
 80005f0:	400a      	ands	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	497b      	ldr	r1, [pc, #492]	; (80007e4 <HAL_RCC_OscConfig+0x2d0>)
 80005f8:	400a      	ands	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e7e2      	b.n	80005c4 <HAL_RCC_OscConfig+0xb0>
 80005fe:	4b77      	ldr	r3, [pc, #476]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000600:	6819      	ldr	r1, [r3, #0]
 8000602:	2280      	movs	r2, #128	; 0x80
 8000604:	02d2      	lsls	r2, r2, #11
 8000606:	430a      	orrs	r2, r1
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	430a      	orrs	r2, r1
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	e7d6      	b.n	80005c4 <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 8000616:	f7ff fe3f 	bl	8000298 <HAL_GetTick>
 800061a:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800061c:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	039b      	lsls	r3, r3, #14
 8000622:	d5a4      	bpl.n	800056e <HAL_RCC_OscConfig+0x5a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000624:	f7ff fe38 	bl	8000298 <HAL_GetTick>
 8000628:	1b40      	subs	r0, r0, r5
 800062a:	2864      	cmp	r0, #100	; 0x64
 800062c:	d9f6      	bls.n	800061c <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 800062e:	2003      	movs	r0, #3
 8000630:	e18d      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000632:	4b6a      	ldr	r3, [pc, #424]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	03db      	lsls	r3, r3, #15
 8000638:	d4a7      	bmi.n	800058a <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800063a:	4b68      	ldr	r3, [pc, #416]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	079b      	lsls	r3, r3, #30
 8000640:	d504      	bpl.n	800064c <HAL_RCC_OscConfig+0x138>
 8000642:	68e3      	ldr	r3, [r4, #12]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d001      	beq.n	800064c <HAL_RCC_OscConfig+0x138>
        return HAL_ERROR;
 8000648:	2001      	movs	r0, #1
 800064a:	e180      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800064c:	4963      	ldr	r1, [pc, #396]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800064e:	680b      	ldr	r3, [r1, #0]
 8000650:	22f8      	movs	r2, #248	; 0xf8
 8000652:	4393      	bics	r3, r2
 8000654:	6922      	ldr	r2, [r4, #16]
 8000656:	00d2      	lsls	r2, r2, #3
 8000658:	4313      	orrs	r3, r2
 800065a:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800065c:	6823      	ldr	r3, [r4, #0]
 800065e:	071b      	lsls	r3, r3, #28
 8000660:	d544      	bpl.n	80006ec <HAL_RCC_OscConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000662:	69e3      	ldr	r3, [r4, #28]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d02e      	beq.n	80006c6 <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000668:	4a5c      	ldr	r2, [pc, #368]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800066a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800066c:	2101      	movs	r1, #1
 800066e:	430b      	orrs	r3, r1
 8000670:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000672:	f7ff fe11 	bl	8000298 <HAL_GetTick>
 8000676:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000678:	4b58      	ldr	r3, [pc, #352]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800067a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067c:	079b      	lsls	r3, r3, #30
 800067e:	d435      	bmi.n	80006ec <HAL_RCC_OscConfig+0x1d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000680:	f7ff fe0a 	bl	8000298 <HAL_GetTick>
 8000684:	1b40      	subs	r0, r0, r5
 8000686:	2802      	cmp	r0, #2
 8000688:	d9f6      	bls.n	8000678 <HAL_RCC_OscConfig+0x164>
        {
          return HAL_TIMEOUT;
 800068a:	2003      	movs	r0, #3
 800068c:	e15f      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800068e:	4953      	ldr	r1, [pc, #332]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000690:	680b      	ldr	r3, [r1, #0]
 8000692:	22f8      	movs	r2, #248	; 0xf8
 8000694:	4393      	bics	r3, r2
 8000696:	6922      	ldr	r2, [r4, #16]
 8000698:	00d2      	lsls	r2, r2, #3
 800069a:	4313      	orrs	r3, r2
 800069c:	600b      	str	r3, [r1, #0]
 800069e:	e7dd      	b.n	800065c <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 80006a0:	4a4e      	ldr	r2, [pc, #312]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80006a2:	6813      	ldr	r3, [r2, #0]
 80006a4:	2101      	movs	r1, #1
 80006a6:	438b      	bics	r3, r1
 80006a8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80006aa:	f7ff fdf5 	bl	8000298 <HAL_GetTick>
 80006ae:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006b0:	4b4a      	ldr	r3, [pc, #296]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	079b      	lsls	r3, r3, #30
 80006b6:	d5d1      	bpl.n	800065c <HAL_RCC_OscConfig+0x148>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b8:	f7ff fdee 	bl	8000298 <HAL_GetTick>
 80006bc:	1b40      	subs	r0, r0, r5
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9f6      	bls.n	80006b0 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 80006c2:	2003      	movs	r0, #3
 80006c4:	e143      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006c6:	4a45      	ldr	r2, [pc, #276]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80006c8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80006ca:	2101      	movs	r1, #1
 80006cc:	438b      	bics	r3, r1
 80006ce:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006d0:	f7ff fde2 	bl	8000298 <HAL_GetTick>
 80006d4:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006da:	079b      	lsls	r3, r3, #30
 80006dc:	d506      	bpl.n	80006ec <HAL_RCC_OscConfig+0x1d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006de:	f7ff fddb 	bl	8000298 <HAL_GetTick>
 80006e2:	1b40      	subs	r0, r0, r5
 80006e4:	2802      	cmp	r0, #2
 80006e6:	d9f6      	bls.n	80006d6 <HAL_RCC_OscConfig+0x1c2>
        {
          return HAL_TIMEOUT;
 80006e8:	2003      	movs	r0, #3
 80006ea:	e130      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	075b      	lsls	r3, r3, #29
 80006f0:	d400      	bmi.n	80006f4 <HAL_RCC_OscConfig+0x1e0>
 80006f2:	e07f      	b.n	80007f4 <HAL_RCC_OscConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80006f6:	69db      	ldr	r3, [r3, #28]
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	d41d      	bmi.n	8000738 <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80006fc:	4a37      	ldr	r2, [pc, #220]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80006fe:	69d1      	ldr	r1, [r2, #28]
 8000700:	2080      	movs	r0, #128	; 0x80
 8000702:	0540      	lsls	r0, r0, #21
 8000704:	4301      	orrs	r1, r0
 8000706:	61d1      	str	r1, [r2, #28]
 8000708:	69d3      	ldr	r3, [r2, #28]
 800070a:	4003      	ands	r3, r0
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000710:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000712:	4b35      	ldr	r3, [pc, #212]	; (80007e8 <HAL_RCC_OscConfig+0x2d4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	d510      	bpl.n	800073c <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800071a:	68a3      	ldr	r3, [r4, #8]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d021      	beq.n	8000764 <HAL_RCC_OscConfig+0x250>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d136      	bne.n	8000792 <HAL_RCC_OscConfig+0x27e>
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000726:	6a1a      	ldr	r2, [r3, #32]
 8000728:	2101      	movs	r1, #1
 800072a:	438a      	bics	r2, r1
 800072c:	621a      	str	r2, [r3, #32]
 800072e:	6a1a      	ldr	r2, [r3, #32]
 8000730:	3103      	adds	r1, #3
 8000732:	438a      	bics	r2, r1
 8000734:	621a      	str	r2, [r3, #32]
 8000736:	e01a      	b.n	800076e <HAL_RCC_OscConfig+0x25a>
    FlagStatus       pwrclkchanged = RESET;
 8000738:	2500      	movs	r5, #0
 800073a:	e7ea      	b.n	8000712 <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800073c:	4a2a      	ldr	r2, [pc, #168]	; (80007e8 <HAL_RCC_OscConfig+0x2d4>)
 800073e:	6811      	ldr	r1, [r2, #0]
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	430b      	orrs	r3, r1
 8000746:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000748:	f7ff fda6 	bl	8000298 <HAL_GetTick>
 800074c:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800074e:	4b26      	ldr	r3, [pc, #152]	; (80007e8 <HAL_RCC_OscConfig+0x2d4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	d4e1      	bmi.n	800071a <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000756:	f7ff fd9f 	bl	8000298 <HAL_GetTick>
 800075a:	1b80      	subs	r0, r0, r6
 800075c:	2864      	cmp	r0, #100	; 0x64
 800075e:	d9f6      	bls.n	800074e <HAL_RCC_OscConfig+0x23a>
          return HAL_TIMEOUT;
 8000760:	2003      	movs	r0, #3
 8000762:	e0f4      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000766:	6a13      	ldr	r3, [r2, #32]
 8000768:	2101      	movs	r1, #1
 800076a:	430b      	orrs	r3, r1
 800076c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800076e:	68a3      	ldr	r3, [r4, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d024      	beq.n	80007be <HAL_RCC_OscConfig+0x2aa>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000774:	f7ff fd90 	bl	8000298 <HAL_GetTick>
 8000778:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	079b      	lsls	r3, r3, #30
 8000780:	d436      	bmi.n	80007f0 <HAL_RCC_OscConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000782:	f7ff fd89 	bl	8000298 <HAL_GetTick>
 8000786:	1b80      	subs	r0, r0, r6
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <HAL_RCC_OscConfig+0x2d8>)
 800078a:	4298      	cmp	r0, r3
 800078c:	d9f5      	bls.n	800077a <HAL_RCC_OscConfig+0x266>
        {
          return HAL_TIMEOUT;
 800078e:	2003      	movs	r0, #3
 8000790:	e0dd      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000792:	2b05      	cmp	r3, #5
 8000794:	d009      	beq.n	80007aa <HAL_RCC_OscConfig+0x296>
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 8000798:	6a1a      	ldr	r2, [r3, #32]
 800079a:	2101      	movs	r1, #1
 800079c:	438a      	bics	r2, r1
 800079e:	621a      	str	r2, [r3, #32]
 80007a0:	6a1a      	ldr	r2, [r3, #32]
 80007a2:	3103      	adds	r1, #3
 80007a4:	438a      	bics	r2, r1
 80007a6:	621a      	str	r2, [r3, #32]
 80007a8:	e7e1      	b.n	800076e <HAL_RCC_OscConfig+0x25a>
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80007ac:	6a1a      	ldr	r2, [r3, #32]
 80007ae:	2104      	movs	r1, #4
 80007b0:	430a      	orrs	r2, r1
 80007b2:	621a      	str	r2, [r3, #32]
 80007b4:	6a1a      	ldr	r2, [r3, #32]
 80007b6:	3903      	subs	r1, #3
 80007b8:	430a      	orrs	r2, r1
 80007ba:	621a      	str	r2, [r3, #32]
 80007bc:	e7d7      	b.n	800076e <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007be:	f7ff fd6b 	bl	8000298 <HAL_GetTick>
 80007c2:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <HAL_RCC_OscConfig+0x2c8>)
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	079b      	lsls	r3, r3, #30
 80007ca:	d511      	bpl.n	80007f0 <HAL_RCC_OscConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007cc:	f7ff fd64 	bl	8000298 <HAL_GetTick>
 80007d0:	1b80      	subs	r0, r0, r6
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_RCC_OscConfig+0x2d8>)
 80007d4:	4298      	cmp	r0, r3
 80007d6:	d9f5      	bls.n	80007c4 <HAL_RCC_OscConfig+0x2b0>
        {
          return HAL_TIMEOUT;
 80007d8:	2003      	movs	r0, #3
 80007da:	e0b8      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
 80007dc:	40021000 	.word	0x40021000
 80007e0:	fffeffff 	.word	0xfffeffff
 80007e4:	fffbffff 	.word	0xfffbffff
 80007e8:	40007000 	.word	0x40007000
 80007ec:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80007f0:	2d01      	cmp	r5, #1
 80007f2:	d033      	beq.n	800085c <HAL_RCC_OscConfig+0x348>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	06db      	lsls	r3, r3, #27
 80007f8:	d510      	bpl.n	800081c <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80007fa:	6963      	ldr	r3, [r4, #20]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d033      	beq.n	8000868 <HAL_RCC_OscConfig+0x354>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000800:	3305      	adds	r3, #5
 8000802:	d151      	bne.n	80008a8 <HAL_RCC_OscConfig+0x394>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000804:	4a54      	ldr	r2, [pc, #336]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 8000806:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000808:	2104      	movs	r1, #4
 800080a:	438b      	bics	r3, r1
 800080c:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800080e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000810:	31f4      	adds	r1, #244	; 0xf4
 8000812:	438b      	bics	r3, r1
 8000814:	69a1      	ldr	r1, [r4, #24]
 8000816:	00c9      	lsls	r1, r1, #3
 8000818:	430b      	orrs	r3, r1
 800081a:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d100      	bne.n	8000824 <HAL_RCC_OscConfig+0x310>
 8000822:	e093      	b.n	800094c <HAL_RCC_OscConfig+0x438>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000824:	4a4c      	ldr	r2, [pc, #304]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 8000826:	6851      	ldr	r1, [r2, #4]
 8000828:	220c      	movs	r2, #12
 800082a:	400a      	ands	r2, r1
 800082c:	2a08      	cmp	r2, #8
 800082e:	d100      	bne.n	8000832 <HAL_RCC_OscConfig+0x31e>
 8000830:	e08f      	b.n	8000952 <HAL_RCC_OscConfig+0x43e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000832:	2b02      	cmp	r3, #2
 8000834:	d04f      	beq.n	80008d6 <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000836:	4a48      	ldr	r2, [pc, #288]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 8000838:	6813      	ldr	r3, [r2, #0]
 800083a:	4948      	ldr	r1, [pc, #288]	; (800095c <HAL_RCC_OscConfig+0x448>)
 800083c:	400b      	ands	r3, r1
 800083e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000840:	f7ff fd2a 	bl	8000298 <HAL_GetTick>
 8000844:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	d57a      	bpl.n	8000944 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800084e:	f7ff fd23 	bl	8000298 <HAL_GetTick>
 8000852:	1b00      	subs	r0, r0, r4
 8000854:	2802      	cmp	r0, #2
 8000856:	d9f6      	bls.n	8000846 <HAL_RCC_OscConfig+0x332>
          {
            return HAL_TIMEOUT;
 8000858:	2003      	movs	r0, #3
 800085a:	e078      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800085c:	4a3e      	ldr	r2, [pc, #248]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 800085e:	69d3      	ldr	r3, [r2, #28]
 8000860:	493f      	ldr	r1, [pc, #252]	; (8000960 <HAL_RCC_OscConfig+0x44c>)
 8000862:	400b      	ands	r3, r1
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	e7c5      	b.n	80007f4 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000868:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 800086a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800086c:	2104      	movs	r1, #4
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000874:	3903      	subs	r1, #3
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800087a:	f7ff fd0d 	bl	8000298 <HAL_GetTick>
 800087e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 8000882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000884:	079b      	lsls	r3, r3, #30
 8000886:	d406      	bmi.n	8000896 <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000888:	f7ff fd06 	bl	8000298 <HAL_GetTick>
 800088c:	1b40      	subs	r0, r0, r5
 800088e:	2802      	cmp	r0, #2
 8000890:	d9f6      	bls.n	8000880 <HAL_RCC_OscConfig+0x36c>
          return HAL_TIMEOUT;
 8000892:	2003      	movs	r0, #3
 8000894:	e05b      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000896:	4930      	ldr	r1, [pc, #192]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 8000898:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800089a:	22f8      	movs	r2, #248	; 0xf8
 800089c:	4393      	bics	r3, r2
 800089e:	69a2      	ldr	r2, [r4, #24]
 80008a0:	00d2      	lsls	r2, r2, #3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	634b      	str	r3, [r1, #52]	; 0x34
 80008a6:	e7b9      	b.n	800081c <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008a8:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 80008aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ac:	2104      	movs	r1, #4
 80008ae:	430a      	orrs	r2, r1
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80008b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b4:	3903      	subs	r1, #3
 80008b6:	438a      	bics	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008ba:	f7ff fced 	bl	8000298 <HAL_GetTick>
 80008be:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 80008c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c4:	079b      	lsls	r3, r3, #30
 80008c6:	d5a9      	bpl.n	800081c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008c8:	f7ff fce6 	bl	8000298 <HAL_GetTick>
 80008cc:	1b40      	subs	r0, r0, r5
 80008ce:	2802      	cmp	r0, #2
 80008d0:	d9f6      	bls.n	80008c0 <HAL_RCC_OscConfig+0x3ac>
          return HAL_TIMEOUT;
 80008d2:	2003      	movs	r0, #3
 80008d4:	e03b      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 80008d6:	4a20      	ldr	r2, [pc, #128]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 80008d8:	6813      	ldr	r3, [r2, #0]
 80008da:	4920      	ldr	r1, [pc, #128]	; (800095c <HAL_RCC_OscConfig+0x448>)
 80008dc:	400b      	ands	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008e0:	f7ff fcda 	bl	8000298 <HAL_GetTick>
 80008e4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	019b      	lsls	r3, r3, #6
 80008ec:	d506      	bpl.n	80008fc <HAL_RCC_OscConfig+0x3e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ee:	f7ff fcd3 	bl	8000298 <HAL_GetTick>
 80008f2:	1b40      	subs	r0, r0, r5
 80008f4:	2802      	cmp	r0, #2
 80008f6:	d9f6      	bls.n	80008e6 <HAL_RCC_OscConfig+0x3d2>
            return HAL_TIMEOUT;
 80008f8:	2003      	movs	r0, #3
 80008fa:	e028      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 80008fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000900:	210f      	movs	r1, #15
 8000902:	438a      	bics	r2, r1
 8000904:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000906:	430a      	orrs	r2, r1
 8000908:	62da      	str	r2, [r3, #44]	; 0x2c
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	4915      	ldr	r1, [pc, #84]	; (8000964 <HAL_RCC_OscConfig+0x450>)
 800090e:	400a      	ands	r2, r1
 8000910:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000914:	4301      	orrs	r1, r0
 8000916:	430a      	orrs	r2, r1
 8000918:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0452      	lsls	r2, r2, #17
 8000920:	430a      	orrs	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000924:	f7ff fcb8 	bl	8000298 <HAL_GetTick>
 8000928:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_RCC_OscConfig+0x444>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	019b      	lsls	r3, r3, #6
 8000930:	d406      	bmi.n	8000940 <HAL_RCC_OscConfig+0x42c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000932:	f7ff fcb1 	bl	8000298 <HAL_GetTick>
 8000936:	1b00      	subs	r0, r0, r4
 8000938:	2802      	cmp	r0, #2
 800093a:	d9f6      	bls.n	800092a <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 800093c:	2003      	movs	r0, #3
 800093e:	e006      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000940:	2000      	movs	r0, #0
 8000942:	e004      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
 8000944:	2000      	movs	r0, #0
 8000946:	e002      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
        return HAL_ERROR;
 8000948:	2001      	movs	r0, #1
 800094a:	e000      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 800094c:	2000      	movs	r0, #0
}
 800094e:	b002      	add	sp, #8
 8000950:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
 8000954:	e7fb      	b.n	800094e <HAL_RCC_OscConfig+0x43a>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40021000 	.word	0x40021000
 800095c:	feffffff 	.word	0xfeffffff
 8000960:	efffffff 	.word	0xefffffff
 8000964:	ffc2ffff 	.word	0xffc2ffff

08000968 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000968:	b530      	push	{r4, r5, lr}
 800096a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800096c:	aa04      	add	r2, sp, #16
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_RCC_GetSysClockFreq+0x64>)
 8000970:	0018      	movs	r0, r3
 8000972:	c832      	ldmia	r0!, {r1, r4, r5}
 8000974:	c232      	stmia	r2!, {r1, r4, r5}
 8000976:	0011      	movs	r1, r2
 8000978:	6802      	ldr	r2, [r0, #0]
 800097a:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800097c:	466a      	mov	r2, sp
 800097e:	3310      	adds	r3, #16
 8000980:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000982:	c213      	stmia	r2!, {r0, r1, r4}
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x68>)
 800098a:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800098c:	230c      	movs	r3, #12
 800098e:	4013      	ands	r3, r2
 8000990:	2b08      	cmp	r3, #8
 8000992:	d119      	bne.n	80009c8 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000994:	0c91      	lsrs	r1, r2, #18
 8000996:	3307      	adds	r3, #7
 8000998:	4019      	ands	r1, r3
 800099a:	a804      	add	r0, sp, #16
 800099c:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800099e:	490c      	ldr	r1, [pc, #48]	; (80009d0 <HAL_RCC_GetSysClockFreq+0x68>)
 80009a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80009a2:	400b      	ands	r3, r1
 80009a4:	4669      	mov	r1, sp
 80009a6:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80009a8:	03d3      	lsls	r3, r2, #15
 80009aa:	d408      	bmi.n	80009be <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80009ac:	0163      	lsls	r3, r4, #5
 80009ae:	1b1b      	subs	r3, r3, r4
 80009b0:	0198      	lsls	r0, r3, #6
 80009b2:	1ac0      	subs	r0, r0, r3
 80009b4:	00c0      	lsls	r0, r0, #3
 80009b6:	1904      	adds	r4, r0, r4
 80009b8:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009ba:	b009      	add	sp, #36	; 0x24
 80009bc:	bd30      	pop	{r4, r5, pc}
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80009c0:	f7ff fbb4 	bl	800012c <__udivsi3>
 80009c4:	4360      	muls	r0, r4
 80009c6:	e7f8      	b.n	80009ba <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80009ca:	e7f6      	b.n	80009ba <HAL_RCC_GetSysClockFreq+0x52>
 80009cc:	080032a0 	.word	0x080032a0
 80009d0:	40021000 	.word	0x40021000
 80009d4:	007a1200 	.word	0x007a1200

080009d8 <HAL_RCC_ClockConfig>:
{
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	0005      	movs	r5, r0
 80009dc:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009de:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <HAL_RCC_ClockConfig+0x13c>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	2301      	movs	r3, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d20b      	bcs.n	8000a02 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009ea:	494a      	ldr	r1, [pc, #296]	; (8000b14 <HAL_RCC_ClockConfig+0x13c>)
 80009ec:	680b      	ldr	r3, [r1, #0]
 80009ee:	2201      	movs	r2, #1
 80009f0:	4393      	bics	r3, r2
 80009f2:	4323      	orrs	r3, r4
 80009f4:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009f6:	680b      	ldr	r3, [r1, #0]
 80009f8:	401a      	ands	r2, r3
 80009fa:	42a2      	cmp	r2, r4
 80009fc:	d001      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 80009fe:	2001      	movs	r0, #1
}
 8000a00:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a02:	682b      	ldr	r3, [r5, #0]
 8000a04:	079b      	lsls	r3, r3, #30
 8000a06:	d506      	bpl.n	8000a16 <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a08:	4a43      	ldr	r2, [pc, #268]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a0a:	6853      	ldr	r3, [r2, #4]
 8000a0c:	21f0      	movs	r1, #240	; 0xf0
 8000a0e:	438b      	bics	r3, r1
 8000a10:	68a9      	ldr	r1, [r5, #8]
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a16:	682b      	ldr	r3, [r5, #0]
 8000a18:	07db      	lsls	r3, r3, #31
 8000a1a:	d54b      	bpl.n	8000ab4 <HAL_RCC_ClockConfig+0xdc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a1c:	686b      	ldr	r3, [r5, #4]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d020      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d024      	beq.n	8000a70 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a26:	4a3c      	ldr	r2, [pc, #240]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a28:	6812      	ldr	r2, [r2, #0]
 8000a2a:	0792      	lsls	r2, r2, #30
 8000a2c:	d56f      	bpl.n	8000b0e <HAL_RCC_ClockConfig+0x136>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a2e:	493a      	ldr	r1, [pc, #232]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a30:	684a      	ldr	r2, [r1, #4]
 8000a32:	2003      	movs	r0, #3
 8000a34:	4382      	bics	r2, r0
 8000a36:	4313      	orrs	r3, r2
 8000a38:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a3a:	f7ff fc2d 	bl	8000298 <HAL_GetTick>
 8000a3e:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a40:	686b      	ldr	r3, [r5, #4]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d01a      	beq.n	8000a7c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d026      	beq.n	8000a98 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a4a:	4b33      	ldr	r3, [pc, #204]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	220c      	movs	r2, #12
 8000a50:	421a      	tst	r2, r3
 8000a52:	d02f      	beq.n	8000ab4 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a54:	f7ff fc20 	bl	8000298 <HAL_GetTick>
 8000a58:	1b80      	subs	r0, r0, r6
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <HAL_RCC_ClockConfig+0x144>)
 8000a5c:	4298      	cmp	r0, r3
 8000a5e:	d9f4      	bls.n	8000a4a <HAL_RCC_ClockConfig+0x72>
          return HAL_TIMEOUT;
 8000a60:	2003      	movs	r0, #3
 8000a62:	e7cd      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a64:	4a2c      	ldr	r2, [pc, #176]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a66:	6812      	ldr	r2, [r2, #0]
 8000a68:	0392      	lsls	r2, r2, #14
 8000a6a:	d4e0      	bmi.n	8000a2e <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	e7c7      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a70:	4a29      	ldr	r2, [pc, #164]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	0192      	lsls	r2, r2, #6
 8000a76:	d4da      	bmi.n	8000a2e <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8000a78:	2001      	movs	r0, #1
 8000a7a:	e7c1      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a7c:	4b26      	ldr	r3, [pc, #152]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	230c      	movs	r3, #12
 8000a82:	4013      	ands	r3, r2
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d015      	beq.n	8000ab4 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a88:	f7ff fc06 	bl	8000298 <HAL_GetTick>
 8000a8c:	1b80      	subs	r0, r0, r6
 8000a8e:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <HAL_RCC_ClockConfig+0x144>)
 8000a90:	4298      	cmp	r0, r3
 8000a92:	d9f3      	bls.n	8000a7c <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8000a94:	2003      	movs	r0, #3
 8000a96:	e7b3      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a98:	4b1f      	ldr	r3, [pc, #124]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d007      	beq.n	8000ab4 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa4:	f7ff fbf8 	bl	8000298 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <HAL_RCC_ClockConfig+0x144>)
 8000aac:	4298      	cmp	r0, r3
 8000aae:	d9f3      	bls.n	8000a98 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	e7a5      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <HAL_RCC_ClockConfig+0x13c>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	4013      	ands	r3, r2
 8000abc:	42a3      	cmp	r3, r4
 8000abe:	d90b      	bls.n	8000ad8 <HAL_RCC_ClockConfig+0x100>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac0:	4914      	ldr	r1, [pc, #80]	; (8000b14 <HAL_RCC_ClockConfig+0x13c>)
 8000ac2:	680b      	ldr	r3, [r1, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4393      	bics	r3, r2
 8000ac8:	4323      	orrs	r3, r4
 8000aca:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000acc:	680b      	ldr	r3, [r1, #0]
 8000ace:	401a      	ands	r2, r3
 8000ad0:	42a2      	cmp	r2, r4
 8000ad2:	d001      	beq.n	8000ad8 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	e793      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ad8:	682b      	ldr	r3, [r5, #0]
 8000ada:	075b      	lsls	r3, r3, #29
 8000adc:	d506      	bpl.n	8000aec <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000ae0:	6853      	ldr	r3, [r2, #4]
 8000ae2:	490f      	ldr	r1, [pc, #60]	; (8000b20 <HAL_RCC_ClockConfig+0x148>)
 8000ae4:	400b      	ands	r3, r1
 8000ae6:	68e9      	ldr	r1, [r5, #12]
 8000ae8:	430b      	orrs	r3, r1
 8000aea:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000aec:	f7ff ff3c 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_RCC_ClockConfig+0x140>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	0912      	lsrs	r2, r2, #4
 8000af6:	230f      	movs	r3, #15
 8000af8:	4013      	ands	r3, r2
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_RCC_ClockConfig+0x14c>)
 8000afc:	5cd3      	ldrb	r3, [r2, r3]
 8000afe:	40d8      	lsrs	r0, r3
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_RCC_ClockConfig+0x150>)
 8000b02:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b04:	2000      	movs	r0, #0
 8000b06:	f7ff fb9d 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	e778      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
        return HAL_ERROR;
 8000b0e:	2001      	movs	r0, #1
 8000b10:	e776      	b.n	8000a00 <HAL_RCC_ClockConfig+0x28>
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	40022000 	.word	0x40022000
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	00001388 	.word	0x00001388
 8000b20:	fffff8ff 	.word	0xfffff8ff
 8000b24:	080034d0 	.word	0x080034d0
 8000b28:	2000043c 	.word	0x2000043c

08000b2c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b2c:	4b01      	ldr	r3, [pc, #4]	; (8000b34 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b2e:	6818      	ldr	r0, [r3, #0]
}
 8000b30:	4770      	bx	lr
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	2000043c 	.word	0x2000043c

08000b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000b38:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000b3a:	f7ff fff7 	bl	8000b2c <HAL_RCC_GetHCLKFreq>
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b40:	685a      	ldr	r2, [r3, #4]
 8000b42:	0a12      	lsrs	r2, r2, #8
 8000b44:	2307      	movs	r3, #7
 8000b46:	4013      	ands	r3, r2
 8000b48:	4a02      	ldr	r2, [pc, #8]	; (8000b54 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	40d8      	lsrs	r0, r3
}    
 8000b4e:	bd10      	pop	{r4, pc}
 8000b50:	40021000 	.word	0x40021000
 8000b54:	080034e0 	.word	0x080034e0

08000b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000b5e:	6803      	ldr	r3, [r0, #0]
 8000b60:	03db      	lsls	r3, r3, #15
 8000b62:	d535      	bpl.n	8000bd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b64:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	d448      	bmi.n	8000bfe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000b6c:	4a3a      	ldr	r2, [pc, #232]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000b6e:	69d1      	ldr	r1, [r2, #28]
 8000b70:	2080      	movs	r0, #128	; 0x80
 8000b72:	0540      	lsls	r0, r0, #21
 8000b74:	4301      	orrs	r1, r0
 8000b76:	61d1      	str	r1, [r2, #28]
 8000b78:	69d3      	ldr	r3, [r2, #28]
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	9301      	str	r3, [sp, #4]
 8000b7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b80:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	05db      	lsls	r3, r3, #23
 8000b88:	d53b      	bpl.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000b8a:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	22c0      	movs	r2, #192	; 0xc0
 8000b90:	0092      	lsls	r2, r2, #2
 8000b92:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000b94:	d013      	beq.n	8000bbe <HAL_RCCEx_PeriphCLKConfig+0x66>
 8000b96:	6861      	ldr	r1, [r4, #4]
 8000b98:	400a      	ands	r2, r1
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d00f      	beq.n	8000bbe <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000ba0:	6a18      	ldr	r0, [r3, #32]
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000ba4:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ba6:	6a1e      	ldr	r6, [r3, #32]
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	0249      	lsls	r1, r1, #9
 8000bac:	4331      	orrs	r1, r6
 8000bae:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000bb0:	6a19      	ldr	r1, [r3, #32]
 8000bb2:	4e2c      	ldr	r6, [pc, #176]	; (8000c64 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000bb4:	4031      	ands	r1, r6
 8000bb6:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000bb8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000bba:	07c3      	lsls	r3, r0, #31
 8000bbc:	d435      	bmi.n	8000c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000bbe:	4a26      	ldr	r2, [pc, #152]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000bc0:	6a13      	ldr	r3, [r2, #32]
 8000bc2:	4927      	ldr	r1, [pc, #156]	; (8000c60 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	6861      	ldr	r1, [r4, #4]
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000bcc:	2d01      	cmp	r5, #1
 8000bce:	d03b      	beq.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	07db      	lsls	r3, r3, #31
 8000bd4:	d506      	bpl.n	8000be4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000bd6:	4a20      	ldr	r2, [pc, #128]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000bd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bda:	2103      	movs	r1, #3
 8000bdc:	438b      	bics	r3, r1
 8000bde:	68a1      	ldr	r1, [r4, #8]
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000be4:	6823      	ldr	r3, [r4, #0]
 8000be6:	069b      	lsls	r3, r3, #26
 8000be8:	d533      	bpl.n	8000c52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000bec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000bee:	2110      	movs	r1, #16
 8000bf0:	438b      	bics	r3, r1
 8000bf2:	68e1      	ldr	r1, [r4, #12]
 8000bf4:	430b      	orrs	r3, r1
 8000bf6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000bf8:	2000      	movs	r0, #0
}
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8000bfe:	2500      	movs	r5, #0
 8000c00:	e7bf      	b.n	8000b82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c04:	6811      	ldr	r1, [r2, #0]
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fb43 	bl	8000298 <HAL_GetTick>
 8000c12:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	05db      	lsls	r3, r3, #23
 8000c1a:	d4b6      	bmi.n	8000b8a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c1c:	f7ff fb3c 	bl	8000298 <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2864      	cmp	r0, #100	; 0x64
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8000c26:	2003      	movs	r0, #3
 8000c28:	e7e7      	b.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fb35 	bl	8000298 <HAL_GetTick>
 8000c2e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	079b      	lsls	r3, r3, #30
 8000c36:	d4c2      	bmi.n	8000bbe <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c38:	f7ff fb2e 	bl	8000298 <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000c40:	4298      	cmp	r0, r3
 8000c42:	d9f5      	bls.n	8000c30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
 8000c46:	e7d8      	b.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c48:	69d3      	ldr	r3, [r2, #28]
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000c4c:	400b      	ands	r3, r1
 8000c4e:	61d3      	str	r3, [r2, #28]
 8000c50:	e7be      	b.n	8000bd0 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8000c52:	2000      	movs	r0, #0
 8000c54:	e7d1      	b.n	8000bfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	fffffcff 	.word	0xfffffcff
 8000c64:	fffeffff 	.word	0xfffeffff
 8000c68:	00001388 	.word	0x00001388
 8000c6c:	efffffff 	.word	0xefffffff

08000c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c72:	0006      	movs	r6, r0
 8000c74:	000c      	movs	r4, r1
 8000c76:	0017      	movs	r7, r2
 8000c78:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000c7a:	e03e      	b.n	8000cfa <SPI_WaitFlagStateUntilTimeout+0x8a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d005      	beq.n	8000c8c <SPI_WaitFlagStateUntilTimeout+0x1c>
 8000c80:	f7ff fb0a 	bl	8000298 <HAL_GetTick>
 8000c84:	9b06      	ldr	r3, [sp, #24]
 8000c86:	1ac0      	subs	r0, r0, r3
 8000c88:	42a8      	cmp	r0, r5
 8000c8a:	d336      	bcc.n	8000cfa <SPI_WaitFlagStateUntilTimeout+0x8a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000c8c:	6832      	ldr	r2, [r6, #0]
 8000c8e:	6853      	ldr	r3, [r2, #4]
 8000c90:	21e0      	movs	r1, #224	; 0xe0
 8000c92:	438b      	bics	r3, r1
 8000c94:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c96:	2382      	movs	r3, #130	; 0x82
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	6872      	ldr	r2, [r6, #4]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d00c      	beq.n	8000cba <SPI_WaitFlagStateUntilTimeout+0x4a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	019b      	lsls	r3, r3, #6
 8000ca4:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d016      	beq.n	8000cd8 <SPI_WaitFlagStateUntilTimeout+0x68>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000caa:	235d      	movs	r3, #93	; 0x5d
 8000cac:	2201      	movs	r2, #1
 8000cae:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	e027      	b.n	8000d0a <SPI_WaitFlagStateUntilTimeout+0x9a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cba:	68b3      	ldr	r3, [r6, #8]
 8000cbc:	2280      	movs	r2, #128	; 0x80
 8000cbe:	0212      	lsls	r2, r2, #8
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d003      	beq.n	8000ccc <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	00d2      	lsls	r2, r2, #3
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d1e9      	bne.n	8000ca0 <SPI_WaitFlagStateUntilTimeout+0x30>
          __HAL_SPI_DISABLE(hspi);
 8000ccc:	6832      	ldr	r2, [r6, #0]
 8000cce:	6813      	ldr	r3, [r2, #0]
 8000cd0:	2140      	movs	r1, #64	; 0x40
 8000cd2:	438b      	bics	r3, r1
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e7e3      	b.n	8000ca0 <SPI_WaitFlagStateUntilTimeout+0x30>
          SPI_RESET_CRC(hspi);
 8000cd8:	6832      	ldr	r2, [r6, #0]
 8000cda:	6813      	ldr	r3, [r2, #0]
 8000cdc:	490b      	ldr	r1, [pc, #44]	; (8000d0c <SPI_WaitFlagStateUntilTimeout+0x9c>)
 8000cde:	400b      	ands	r3, r1
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	6832      	ldr	r2, [r6, #0]
 8000ce4:	6811      	ldr	r1, [r2, #0]
 8000ce6:	2380      	movs	r3, #128	; 0x80
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	430b      	orrs	r3, r1
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e7dc      	b.n	8000caa <SPI_WaitFlagStateUntilTimeout+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	42bb      	cmp	r3, r7
 8000cf4:	d008      	beq.n	8000d08 <SPI_WaitFlagStateUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8000cf6:	1c6b      	adds	r3, r5, #1
 8000cf8:	d1c0      	bne.n	8000c7c <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000cfa:	6833      	ldr	r3, [r6, #0]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	4023      	ands	r3, r4
 8000d00:	42a3      	cmp	r3, r4
 8000d02:	d0f5      	beq.n	8000cf0 <SPI_WaitFlagStateUntilTimeout+0x80>
 8000d04:	2300      	movs	r3, #0
 8000d06:	e7f4      	b.n	8000cf2 <SPI_WaitFlagStateUntilTimeout+0x82>
      }
    }
  }

  return HAL_OK;
 8000d08:	2000      	movs	r0, #0
}
 8000d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d0c:	ffffdfff 	.word	0xffffdfff

08000d10 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	b083      	sub	sp, #12
 8000d14:	0007      	movs	r7, r0
 8000d16:	000c      	movs	r4, r1
 8000d18:	0015      	movs	r5, r2
 8000d1a:	001e      	movs	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8000d1c:	e001      	b.n	8000d22 <SPI_WaitFifoStateUntilTimeout+0x12>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8000d1e:	1c73      	adds	r3, r6, #1
 8000d20:	d110      	bne.n	8000d44 <SPI_WaitFifoStateUntilTimeout+0x34>
  while ((hspi->Instance->SR & Fifo) != State)
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	6893      	ldr	r3, [r2, #8]
 8000d26:	4023      	ands	r3, r4
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	d045      	beq.n	8000db8 <SPI_WaitFifoStateUntilTimeout+0xa8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000d2c:	23c0      	movs	r3, #192	; 0xc0
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	429c      	cmp	r4, r3
 8000d32:	d1f4      	bne.n	8000d1e <SPI_WaitFifoStateUntilTimeout+0xe>
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	d1f2      	bne.n	8000d1e <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000d38:	7b13      	ldrb	r3, [r2, #12]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	466a      	mov	r2, sp
 8000d3e:	71d3      	strb	r3, [r2, #7]
      UNUSED(tmpreg);
 8000d40:	79d3      	ldrb	r3, [r2, #7]
 8000d42:	e7ec      	b.n	8000d1e <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d005      	beq.n	8000d54 <SPI_WaitFifoStateUntilTimeout+0x44>
 8000d48:	f7ff faa6 	bl	8000298 <HAL_GetTick>
 8000d4c:	9b08      	ldr	r3, [sp, #32]
 8000d4e:	1ac0      	subs	r0, r0, r3
 8000d50:	42b0      	cmp	r0, r6
 8000d52:	d3e6      	bcc.n	8000d22 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000d54:	683a      	ldr	r2, [r7, #0]
 8000d56:	6853      	ldr	r3, [r2, #4]
 8000d58:	21e0      	movs	r1, #224	; 0xe0
 8000d5a:	438b      	bics	r3, r1
 8000d5c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d5e:	2382      	movs	r3, #130	; 0x82
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d00c      	beq.n	8000d82 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	019b      	lsls	r3, r3, #6
 8000d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d016      	beq.n	8000da0 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000d72:	235d      	movs	r3, #93	; 0x5d
 8000d74:	2201      	movs	r2, #1
 8000d76:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8000d7e:	2003      	movs	r0, #3
 8000d80:	e01b      	b.n	8000dba <SPI_WaitFifoStateUntilTimeout+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	0212      	lsls	r2, r2, #8
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d003      	beq.n	8000d94 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d1e9      	bne.n	8000d68 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8000d94:	683a      	ldr	r2, [r7, #0]
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	2140      	movs	r1, #64	; 0x40
 8000d9a:	438b      	bics	r3, r1
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e7e3      	b.n	8000d68 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	6813      	ldr	r3, [r2, #0]
 8000da4:	4906      	ldr	r1, [pc, #24]	; (8000dc0 <SPI_WaitFifoStateUntilTimeout+0xb0>)
 8000da6:	400b      	ands	r3, r1
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	6811      	ldr	r1, [r2, #0]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	019b      	lsls	r3, r3, #6
 8000db2:	430b      	orrs	r3, r1
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e7dc      	b.n	8000d72 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 8000db8:	2000      	movs	r0, #0
}
 8000dba:	b003      	add	sp, #12
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	ffffdfff 	.word	0xffffdfff

08000dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	0004      	movs	r4, r0
 8000dca:	000d      	movs	r5, r1
 8000dcc:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000dce:	21c0      	movs	r1, #192	; 0xc0
 8000dd0:	9200      	str	r2, [sp, #0]
 8000dd2:	002b      	movs	r3, r5
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	0149      	lsls	r1, r1, #5
 8000dd8:	f7ff ff9a 	bl	8000d10 <SPI_WaitFifoStateUntilTimeout>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d118      	bne.n	8000e12 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000de0:	9600      	str	r6, [sp, #0]
 8000de2:	002b      	movs	r3, r5
 8000de4:	2200      	movs	r2, #0
 8000de6:	2180      	movs	r1, #128	; 0x80
 8000de8:	0020      	movs	r0, r4
 8000dea:	f7ff ff41 	bl	8000c70 <SPI_WaitFlagStateUntilTimeout>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d116      	bne.n	8000e20 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000df2:	21c0      	movs	r1, #192	; 0xc0
 8000df4:	9600      	str	r6, [sp, #0]
 8000df6:	002b      	movs	r3, r5
 8000df8:	2200      	movs	r2, #0
 8000dfa:	00c9      	lsls	r1, r1, #3
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	f7ff ff87 	bl	8000d10 <SPI_WaitFifoStateUntilTimeout>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d00a      	beq.n	8000e1c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000e08:	2220      	movs	r2, #32
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8000e0e:	2003      	movs	r0, #3
 8000e10:	e004      	b.n	8000e1c <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e12:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000e14:	2220      	movs	r2, #32
 8000e16:	4313      	orrs	r3, r2
 8000e18:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8000e1a:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e20:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000e22:	2220      	movs	r2, #32
 8000e24:	4313      	orrs	r3, r2
 8000e26:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8000e28:	2003      	movs	r0, #3
 8000e2a:	e7f7      	b.n	8000e1c <SPI_EndRxTxTransaction+0x58>

08000e2c <SPI_EndRxTransaction>:
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	0004      	movs	r4, r0
 8000e32:	000d      	movs	r5, r1
 8000e34:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e36:	2382      	movs	r3, #130	; 0x82
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	6842      	ldr	r2, [r0, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d00f      	beq.n	8000e60 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e40:	9600      	str	r6, [sp, #0]
 8000e42:	002b      	movs	r3, r5
 8000e44:	2200      	movs	r2, #0
 8000e46:	2180      	movs	r1, #128	; 0x80
 8000e48:	0020      	movs	r0, r4
 8000e4a:	f7ff ff11 	bl	8000c70 <SPI_WaitFlagStateUntilTimeout>
 8000e4e:	2800      	cmp	r0, #0
 8000e50:	d115      	bne.n	8000e7e <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e52:	2382      	movs	r3, #130	; 0x82
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	6862      	ldr	r2, [r4, #4]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d016      	beq.n	8000e8a <SPI_EndRxTransaction+0x5e>
}
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e60:	6883      	ldr	r3, [r0, #8]
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0212      	lsls	r2, r2, #8
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d003      	beq.n	8000e72 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	00d2      	lsls	r2, r2, #3
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d1e6      	bne.n	8000e40 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8000e72:	6822      	ldr	r2, [r4, #0]
 8000e74:	6813      	ldr	r3, [r2, #0]
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	438b      	bics	r3, r1
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e7e0      	b.n	8000e40 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000e80:	2220      	movs	r2, #32
 8000e82:	4313      	orrs	r3, r2
 8000e84:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8000e86:	2003      	movs	r0, #3
 8000e88:	e7e8      	b.n	8000e5c <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e8a:	68a3      	ldr	r3, [r4, #8]
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	0212      	lsls	r2, r2, #8
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d003      	beq.n	8000e9c <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	00d2      	lsls	r2, r2, #3
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d1df      	bne.n	8000e5c <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8000e9c:	21c0      	movs	r1, #192	; 0xc0
 8000e9e:	9600      	str	r6, [sp, #0]
 8000ea0:	002b      	movs	r3, r5
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	00c9      	lsls	r1, r1, #3
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f7ff ff32 	bl	8000d10 <SPI_WaitFifoStateUntilTimeout>
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d0d5      	beq.n	8000e5c <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000eb0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8000eb8:	2003      	movs	r0, #3
 8000eba:	e7cf      	b.n	8000e5c <SPI_EndRxTransaction+0x30>

08000ebc <HAL_SPI_Init>:
{
 8000ebc:	b510      	push	{r4, lr}
 8000ebe:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8000ec0:	d05e      	beq.n	8000f80 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ec6:	335d      	adds	r3, #93	; 0x5d
 8000ec8:	5cc3      	ldrb	r3, [r0, r3]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d04c      	beq.n	8000f68 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ece:	235d      	movs	r3, #93	; 0x5d
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	2140      	movs	r1, #64	; 0x40
 8000eda:	438b      	bics	r3, r1
 8000edc:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000ede:	68e3      	ldr	r3, [r4, #12]
 8000ee0:	22e0      	movs	r2, #224	; 0xe0
 8000ee2:	00d2      	lsls	r2, r2, #3
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d945      	bls.n	8000f74 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8000ee8:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8000eea:	21f0      	movs	r1, #240	; 0xf0
 8000eec:	0109      	lsls	r1, r1, #4
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d005      	beq.n	8000efe <HAL_SPI_Init+0x42>
 8000ef2:	21e0      	movs	r1, #224	; 0xe0
 8000ef4:	00c9      	lsls	r1, r1, #3
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d001      	beq.n	8000efe <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efa:	2100      	movs	r1, #0
 8000efc:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8000efe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f00:	2900      	cmp	r1, #0
 8000f02:	d105      	bne.n	8000f10 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000f04:	21e0      	movs	r1, #224	; 0xe0
 8000f06:	00c9      	lsls	r1, r1, #3
 8000f08:	428b      	cmp	r3, r1
 8000f0a:	d936      	bls.n	8000f7a <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	68a1      	ldr	r1, [r4, #8]
 8000f14:	430b      	orrs	r3, r1
 8000f16:	6921      	ldr	r1, [r4, #16]
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6961      	ldr	r1, [r4, #20]
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	2180      	movs	r1, #128	; 0x80
 8000f20:	0089      	lsls	r1, r1, #2
 8000f22:	69a0      	ldr	r0, [r4, #24]
 8000f24:	4001      	ands	r1, r0
 8000f26:	430b      	orrs	r3, r1
 8000f28:	69e1      	ldr	r1, [r4, #28]
 8000f2a:	430b      	orrs	r3, r1
 8000f2c:	6a21      	ldr	r1, [r4, #32]
 8000f2e:	430b      	orrs	r3, r1
 8000f30:	6821      	ldr	r1, [r4, #0]
 8000f32:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f34:	4303      	orrs	r3, r0
 8000f36:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000f38:	8b61      	ldrh	r1, [r4, #26]
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000f40:	430b      	orrs	r3, r1
 8000f42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000f44:	430b      	orrs	r3, r1
 8000f46:	68e1      	ldr	r1, [r4, #12]
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6821      	ldr	r1, [r4, #0]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f50:	6822      	ldr	r2, [r4, #0]
 8000f52:	69d3      	ldr	r3, [r2, #28]
 8000f54:	490b      	ldr	r1, [pc, #44]	; (8000f84 <HAL_SPI_Init+0xc8>)
 8000f56:	400b      	ands	r3, r1
 8000f58:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8000f5e:	335d      	adds	r3, #93	; 0x5d
 8000f60:	2201      	movs	r2, #1
 8000f62:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8000f64:	2000      	movs	r0, #0
}
 8000f66:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8000f68:	335c      	adds	r3, #92	; 0x5c
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8000f6e:	f001 ff73 	bl	8002e58 <HAL_SPI_MspInit>
 8000f72:	e7ac      	b.n	8000ece <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8000f74:	2280      	movs	r2, #128	; 0x80
 8000f76:	0152      	lsls	r2, r2, #5
 8000f78:	e7b7      	b.n	8000eea <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	6323      	str	r3, [r4, #48]	; 0x30
 8000f7e:	e7c7      	b.n	8000f10 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
 8000f82:	e7f0      	b.n	8000f66 <HAL_SPI_Init+0xaa>
 8000f84:	fffff7ff 	.word	0xfffff7ff

08000f88 <HAL_SPI_Transmit>:
{
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	0004      	movs	r4, r0
 8000f8e:	000d      	movs	r5, r1
 8000f90:	0016      	movs	r6, r2
 8000f92:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8000f94:	235c      	movs	r3, #92	; 0x5c
 8000f96:	5cc3      	ldrb	r3, [r0, r3]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d100      	bne.n	8000f9e <HAL_SPI_Transmit+0x16>
 8000f9c:	e0d4      	b.n	8001148 <HAL_SPI_Transmit+0x1c0>
 8000f9e:	235c      	movs	r3, #92	; 0x5c
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8000fa4:	f7ff f978 	bl	8000298 <HAL_GetTick>
 8000fa8:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8000faa:	235d      	movs	r3, #93	; 0x5d
 8000fac:	5ce3      	ldrb	r3, [r4, r3]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d008      	beq.n	8000fc4 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8000fb2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000fb4:	235d      	movs	r3, #93	; 0x5d
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	54e2      	strb	r2, [r4, r3]
}
 8000fc0:	b005      	add	sp, #20
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8000fc4:	2d00      	cmp	r5, #0
 8000fc6:	d100      	bne.n	8000fca <HAL_SPI_Transmit+0x42>
 8000fc8:	e0b4      	b.n	8001134 <HAL_SPI_Transmit+0x1ac>
 8000fca:	2e00      	cmp	r6, #0
 8000fcc:	d100      	bne.n	8000fd0 <HAL_SPI_Transmit+0x48>
 8000fce:	e0b3      	b.n	8001138 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000fd0:	335c      	adds	r3, #92	; 0x5c
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000fda:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8000fdc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000fde:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000fe0:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8000fe2:	3241      	adds	r2, #65	; 0x41
 8000fe4:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 8000fe6:	3202      	adds	r2, #2
 8000fe8:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8000fea:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000fec:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	021b      	lsls	r3, r3, #8
 8000ff2:	68a2      	ldr	r2, [r4, #8]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d01c      	beq.n	8001032 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ff8:	6823      	ldr	r3, [r4, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	0652      	lsls	r2, r2, #25
 8000ffe:	d403      	bmi.n	8001008 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2140      	movs	r1, #64	; 0x40
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001008:	23e0      	movs	r3, #224	; 0xe0
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	68e2      	ldr	r2, [r4, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	d933      	bls.n	800107a <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001012:	6863      	ldr	r3, [r4, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_SPI_Transmit+0x98>
 8001018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800101a:	b29b      	uxth	r3, r3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d114      	bne.n	800104a <HAL_SPI_Transmit+0xc2>
      hspi->Instance->DR = *((uint16_t *)pData);
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	882a      	ldrh	r2, [r5, #0]
 8001024:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001026:	3502      	adds	r5, #2
      hspi->TxXferCount--;
 8001028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800102a:	3b01      	subs	r3, #1
 800102c:	b29b      	uxth	r3, r3
 800102e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001030:	e00b      	b.n	800104a <HAL_SPI_Transmit+0xc2>
    SPI_1LINE_TX(hspi);
 8001032:	6822      	ldr	r2, [r4, #0]
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	01db      	lsls	r3, r3, #7
 800103a:	430b      	orrs	r3, r1
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e7db      	b.n	8000ff8 <HAL_SPI_Transmit+0x70>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001040:	2f00      	cmp	r7, #0
 8001042:	d100      	bne.n	8001046 <HAL_SPI_Transmit+0xbe>
 8001044:	e07a      	b.n	800113c <HAL_SPI_Transmit+0x1b4>
 8001046:	1c7b      	adds	r3, r7, #1
 8001048:	d10f      	bne.n	800106a <HAL_SPI_Transmit+0xe2>
    while (hspi->TxXferCount > 0U)
 800104a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800104c:	b29b      	uxth	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d058      	beq.n	8001104 <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	0792      	lsls	r2, r2, #30
 8001058:	d5f2      	bpl.n	8001040 <HAL_SPI_Transmit+0xb8>
        hspi->Instance->DR = *((uint16_t *)pData);
 800105a:	882a      	ldrh	r2, [r5, #0]
 800105c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800105e:	3502      	adds	r5, #2
        hspi->TxXferCount--;
 8001060:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001062:	3b01      	subs	r3, #1
 8001064:	b29b      	uxth	r3, r3
 8001066:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001068:	e7ef      	b.n	800104a <HAL_SPI_Transmit+0xc2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800106a:	f7ff f915 	bl	8000298 <HAL_GetTick>
 800106e:	9b01      	ldr	r3, [sp, #4]
 8001070:	1ac0      	subs	r0, r0, r3
 8001072:	42b8      	cmp	r0, r7
 8001074:	d3e9      	bcc.n	800104a <HAL_SPI_Transmit+0xc2>
          errorcode = HAL_TIMEOUT;
 8001076:	2003      	movs	r0, #3
 8001078:	e79c      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_SPI_Transmit+0x100>
 8001080:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001082:	b29b      	uxth	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d121      	bne.n	80010cc <HAL_SPI_Transmit+0x144>
      if (hspi->TxXferCount > 1U)
 8001088:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800108a:	b29b      	uxth	r3, r3
 800108c:	2b01      	cmp	r3, #1
 800108e:	d908      	bls.n	80010a2 <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001090:	6823      	ldr	r3, [r4, #0]
 8001092:	882a      	ldrh	r2, [r5, #0]
 8001094:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001096:	3502      	adds	r5, #2
        hspi->TxXferCount -= 2U;
 8001098:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800109a:	3b02      	subs	r3, #2
 800109c:	b29b      	uxth	r3, r3
 800109e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80010a0:	e014      	b.n	80010cc <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80010a2:	782b      	ldrb	r3, [r5, #0]
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80010a8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80010b0:	3501      	adds	r5, #1
 80010b2:	e00b      	b.n	80010cc <HAL_SPI_Transmit+0x144>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80010b4:	782a      	ldrb	r2, [r5, #0]
 80010b6:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80010b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ba:	3b01      	subs	r3, #1
 80010bc:	b29b      	uxth	r3, r3
 80010be:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80010c0:	3501      	adds	r5, #1
 80010c2:	e003      	b.n	80010cc <HAL_SPI_Transmit+0x144>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80010c4:	2f00      	cmp	r7, #0
 80010c6:	d03b      	beq.n	8001140 <HAL_SPI_Transmit+0x1b8>
 80010c8:	1c7b      	adds	r3, r7, #1
 80010ca:	d113      	bne.n	80010f4 <HAL_SPI_Transmit+0x16c>
    while (hspi->TxXferCount > 0U)
 80010cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d017      	beq.n	8001104 <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	0792      	lsls	r2, r2, #30
 80010da:	d5f3      	bpl.n	80010c4 <HAL_SPI_Transmit+0x13c>
        if (hspi->TxXferCount > 1U)
 80010dc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80010de:	b292      	uxth	r2, r2
 80010e0:	2a01      	cmp	r2, #1
 80010e2:	d9e7      	bls.n	80010b4 <HAL_SPI_Transmit+0x12c>
          hspi->Instance->DR = *((uint16_t *)pData);
 80010e4:	882a      	ldrh	r2, [r5, #0]
 80010e6:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80010e8:	3502      	adds	r5, #2
          hspi->TxXferCount -= 2U;
 80010ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ec:	3b02      	subs	r3, #2
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80010f2:	e7eb      	b.n	80010cc <HAL_SPI_Transmit+0x144>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80010f4:	f7ff f8d0 	bl	8000298 <HAL_GetTick>
 80010f8:	9b01      	ldr	r3, [sp, #4]
 80010fa:	1ac0      	subs	r0, r0, r3
 80010fc:	42b8      	cmp	r0, r7
 80010fe:	d3e5      	bcc.n	80010cc <HAL_SPI_Transmit+0x144>
          errorcode = HAL_TIMEOUT;
 8001100:	2003      	movs	r0, #3
 8001102:	e757      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001104:	9a01      	ldr	r2, [sp, #4]
 8001106:	0039      	movs	r1, r7
 8001108:	0020      	movs	r0, r4
 800110a:	f7ff fe5b 	bl	8000dc4 <SPI_EndRxTxTransaction>
 800110e:	2800      	cmp	r0, #0
 8001110:	d001      	beq.n	8001116 <HAL_SPI_Transmit+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001112:	2320      	movs	r3, #32
 8001114:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001116:	68a3      	ldr	r3, [r4, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	6823      	ldr	r3, [r4, #0]
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	9203      	str	r2, [sp, #12]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	9303      	str	r3, [sp, #12]
 8001128:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800112a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800112c:	2b00      	cmp	r3, #0
 800112e:	d109      	bne.n	8001144 <HAL_SPI_Transmit+0x1bc>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001130:	2000      	movs	r0, #0
 8001132:	e73f      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001134:	2001      	movs	r0, #1
 8001136:	e73d      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
 8001138:	2001      	movs	r0, #1
 800113a:	e73b      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 800113c:	2003      	movs	r0, #3
 800113e:	e739      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001140:	2003      	movs	r0, #3
 8001142:	e737      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001144:	2001      	movs	r0, #1
 8001146:	e735      	b.n	8000fb4 <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 8001148:	2002      	movs	r0, #2
 800114a:	e739      	b.n	8000fc0 <HAL_SPI_Transmit+0x38>

0800114c <HAL_SPI_TransmitReceive>:
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	0004      	movs	r4, r0
 8001152:	000e      	movs	r6, r1
 8001154:	0017      	movs	r7, r2
 8001156:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001158:	235c      	movs	r3, #92	; 0x5c
 800115a:	5cc3      	ldrb	r3, [r0, r3]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d100      	bne.n	8001162 <HAL_SPI_TransmitReceive+0x16>
 8001160:	e142      	b.n	80013e8 <HAL_SPI_TransmitReceive+0x29c>
 8001162:	235c      	movs	r3, #92	; 0x5c
 8001164:	2201      	movs	r2, #1
 8001166:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001168:	f7ff f896 	bl	8000298 <HAL_GetTick>
 800116c:	9001      	str	r0, [sp, #4]
  tmp  = hspi->State;
 800116e:	235d      	movs	r3, #93	; 0x5d
 8001170:	5ce3      	ldrb	r3, [r4, r3]
 8001172:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 8001174:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001176:	2b01      	cmp	r3, #1
 8001178:	d014      	beq.n	80011a4 <HAL_SPI_TransmitReceive+0x58>
 800117a:	2182      	movs	r1, #130	; 0x82
 800117c:	0049      	lsls	r1, r1, #1
 800117e:	428a      	cmp	r2, r1
 8001180:	d008      	beq.n	8001194 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8001182:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001184:	235d      	movs	r3, #93	; 0x5d
 8001186:	2201      	movs	r2, #1
 8001188:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800118a:	3b01      	subs	r3, #1
 800118c:	2200      	movs	r2, #0
 800118e:	54e2      	strb	r2, [r4, r3]
}
 8001190:	b003      	add	sp, #12
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001194:	68a2      	ldr	r2, [r4, #8]
 8001196:	2a00      	cmp	r2, #0
 8001198:	d000      	beq.n	800119c <HAL_SPI_TransmitReceive+0x50>
 800119a:	e11b      	b.n	80013d4 <HAL_SPI_TransmitReceive+0x288>
 800119c:	2b04      	cmp	r3, #4
 800119e:	d001      	beq.n	80011a4 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 80011a0:	2002      	movs	r0, #2
 80011a2:	e7ef      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80011a4:	2e00      	cmp	r6, #0
 80011a6:	d100      	bne.n	80011aa <HAL_SPI_TransmitReceive+0x5e>
 80011a8:	e116      	b.n	80013d8 <HAL_SPI_TransmitReceive+0x28c>
 80011aa:	2f00      	cmp	r7, #0
 80011ac:	d100      	bne.n	80011b0 <HAL_SPI_TransmitReceive+0x64>
 80011ae:	e115      	b.n	80013dc <HAL_SPI_TransmitReceive+0x290>
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d100      	bne.n	80011b6 <HAL_SPI_TransmitReceive+0x6a>
 80011b4:	e114      	b.n	80013e0 <HAL_SPI_TransmitReceive+0x294>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80011b6:	235d      	movs	r3, #93	; 0x5d
 80011b8:	5ce3      	ldrb	r3, [r4, r3]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d002      	beq.n	80011c4 <HAL_SPI_TransmitReceive+0x78>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80011be:	235d      	movs	r3, #93	; 0x5d
 80011c0:	2205      	movs	r2, #5
 80011c2:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80011c8:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80011ca:	2246      	movs	r2, #70	; 0x46
 80011cc:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 80011ce:	3a02      	subs	r2, #2
 80011d0:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80011d2:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80011d4:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80011d6:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80011d8:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80011da:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80011dc:	23e0      	movs	r3, #224	; 0xe0
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	68e2      	ldr	r2, [r4, #12]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d804      	bhi.n	80011f0 <HAL_SPI_TransmitReceive+0xa4>
 80011e6:	2346      	movs	r3, #70	; 0x46
 80011e8:	5ae3      	ldrh	r3, [r4, r3]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d922      	bls.n	8001236 <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80011f0:	6822      	ldr	r2, [r4, #0]
 80011f2:	6853      	ldr	r3, [r2, #4]
 80011f4:	497d      	ldr	r1, [pc, #500]	; (80013ec <HAL_SPI_TransmitReceive+0x2a0>)
 80011f6:	400b      	ands	r3, r1
 80011f8:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	0652      	lsls	r2, r2, #25
 8001200:	d403      	bmi.n	800120a <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800120a:	23e0      	movs	r3, #224	; 0xe0
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	68e2      	ldr	r2, [r4, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d952      	bls.n	80012ba <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001214:	6863      	ldr	r3, [r4, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_SPI_TransmitReceive+0xd6>
 800121a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800121c:	b29b      	uxth	r3, r3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d107      	bne.n	8001232 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	8832      	ldrh	r2, [r6, #0]
 8001226:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001228:	3602      	adds	r6, #2
      hspi->TxXferCount--;
 800122a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800122c:	3b01      	subs	r3, #1
 800122e:	b29b      	uxth	r3, r3
 8001230:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001232:	2501      	movs	r5, #1
 8001234:	e01b      	b.n	800126e <HAL_SPI_TransmitReceive+0x122>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001236:	6822      	ldr	r2, [r4, #0]
 8001238:	6851      	ldr	r1, [r2, #4]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	015b      	lsls	r3, r3, #5
 800123e:	430b      	orrs	r3, r1
 8001240:	6053      	str	r3, [r2, #4]
 8001242:	e7da      	b.n	80011fa <HAL_SPI_TransmitReceive+0xae>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001244:	2346      	movs	r3, #70	; 0x46
 8001246:	5ae3      	ldrh	r3, [r4, r3]
 8001248:	b29b      	uxth	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d00c      	beq.n	8001268 <HAL_SPI_TransmitReceive+0x11c>
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	07d2      	lsls	r2, r2, #31
 8001254:	d508      	bpl.n	8001268 <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	803b      	strh	r3, [r7, #0]
        pRxData += sizeof(uint16_t);
 800125a:	3702      	adds	r7, #2
        hspi->RxXferCount--;
 800125c:	2246      	movs	r2, #70	; 0x46
 800125e:	5aa3      	ldrh	r3, [r4, r2]
 8001260:	3b01      	subs	r3, #1
 8001262:	b29b      	uxth	r3, r3
 8001264:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 8001266:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001268:	9b08      	ldr	r3, [sp, #32]
 800126a:	3301      	adds	r3, #1
 800126c:	d11c      	bne.n	80012a8 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800126e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001270:	b29b      	uxth	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <HAL_SPI_TransmitReceive+0x136>
 8001276:	3346      	adds	r3, #70	; 0x46
 8001278:	5ae3      	ldrh	r3, [r4, r3]
 800127a:	b29b      	uxth	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	d100      	bne.n	8001282 <HAL_SPI_TransmitReceive+0x136>
 8001280:	e09a      	b.n	80013b8 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001282:	2d00      	cmp	r5, #0
 8001284:	d0de      	beq.n	8001244 <HAL_SPI_TransmitReceive+0xf8>
 8001286:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001288:	b29b      	uxth	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0da      	beq.n	8001244 <HAL_SPI_TransmitReceive+0xf8>
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	0792      	lsls	r2, r2, #30
 8001294:	d5d6      	bpl.n	8001244 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001296:	8832      	ldrh	r2, [r6, #0]
 8001298:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800129a:	3602      	adds	r6, #2
        hspi->TxXferCount--;
 800129c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80012a4:	2500      	movs	r5, #0
 80012a6:	e7cd      	b.n	8001244 <HAL_SPI_TransmitReceive+0xf8>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80012a8:	f7fe fff6 	bl	8000298 <HAL_GetTick>
 80012ac:	9b01      	ldr	r3, [sp, #4]
 80012ae:	1ac0      	subs	r0, r0, r3
 80012b0:	9b08      	ldr	r3, [sp, #32]
 80012b2:	4298      	cmp	r0, r3
 80012b4:	d3db      	bcc.n	800126e <HAL_SPI_TransmitReceive+0x122>
        errorcode = HAL_TIMEOUT;
 80012b6:	2003      	movs	r0, #3
 80012b8:	e764      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80012ba:	6863      	ldr	r3, [r4, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_SPI_TransmitReceive+0x17c>
 80012c0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d10b      	bne.n	80012e0 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 80012c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d909      	bls.n	80012e4 <HAL_SPI_TransmitReceive+0x198>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80012d0:	6823      	ldr	r3, [r4, #0]
 80012d2:	8832      	ldrh	r2, [r6, #0]
 80012d4:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80012d6:	3602      	adds	r6, #2
        hspi->TxXferCount -= 2U;
 80012d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012da:	3b02      	subs	r3, #2
 80012dc:	b29b      	uxth	r3, r3
 80012de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80012e0:	2501      	movs	r5, #1
 80012e2:	e02e      	b.n	8001342 <HAL_SPI_TransmitReceive+0x1f6>
 80012e4:	7833      	ldrb	r3, [r6, #0]
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80012ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012ec:	3b01      	subs	r3, #1
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80012f2:	3601      	adds	r6, #1
 80012f4:	e7f4      	b.n	80012e0 <HAL_SPI_TransmitReceive+0x194>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80012f6:	7832      	ldrb	r2, [r6, #0]
 80012f8:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80012fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001302:	3601      	adds	r6, #1
        txallowed = 0U;
 8001304:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001306:	2346      	movs	r3, #70	; 0x46
 8001308:	5ae3      	ldrh	r3, [r4, r3]
 800130a:	b29b      	uxth	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d015      	beq.n	800133c <HAL_SPI_TransmitReceive+0x1f0>
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	07d2      	lsls	r2, r2, #31
 8001316:	d511      	bpl.n	800133c <HAL_SPI_TransmitReceive+0x1f0>
        if (hspi->RxXferCount > 1U)
 8001318:	2246      	movs	r2, #70	; 0x46
 800131a:	5aa2      	ldrh	r2, [r4, r2]
 800131c:	b292      	uxth	r2, r2
 800131e:	2a01      	cmp	r2, #1
 8001320:	d937      	bls.n	8001392 <HAL_SPI_TransmitReceive+0x246>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	803b      	strh	r3, [r7, #0]
          pRxData += sizeof(uint16_t);
 8001326:	3702      	adds	r7, #2
          hspi->RxXferCount -= 2U;
 8001328:	2246      	movs	r2, #70	; 0x46
 800132a:	5aa3      	ldrh	r3, [r4, r2]
 800132c:	3b02      	subs	r3, #2
 800132e:	b29b      	uxth	r3, r3
 8001330:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 8001332:	5aa3      	ldrh	r3, [r4, r2]
 8001334:	b29b      	uxth	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d923      	bls.n	8001382 <HAL_SPI_TransmitReceive+0x236>
        txallowed = 1U;
 800133a:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800133c:	9b08      	ldr	r3, [sp, #32]
 800133e:	3301      	adds	r3, #1
 8001340:	d131      	bne.n	80013a6 <HAL_SPI_TransmitReceive+0x25a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001342:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001344:	b29b      	uxth	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d104      	bne.n	8001354 <HAL_SPI_TransmitReceive+0x208>
 800134a:	3346      	adds	r3, #70	; 0x46
 800134c:	5ae3      	ldrh	r3, [r4, r3]
 800134e:	b29b      	uxth	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d031      	beq.n	80013b8 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001354:	2d00      	cmp	r5, #0
 8001356:	d0d6      	beq.n	8001306 <HAL_SPI_TransmitReceive+0x1ba>
 8001358:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800135a:	b29b      	uxth	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0d2      	beq.n	8001306 <HAL_SPI_TransmitReceive+0x1ba>
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	0792      	lsls	r2, r2, #30
 8001366:	d5ce      	bpl.n	8001306 <HAL_SPI_TransmitReceive+0x1ba>
        if (hspi->TxXferCount > 1U)
 8001368:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800136a:	b292      	uxth	r2, r2
 800136c:	2a01      	cmp	r2, #1
 800136e:	d9c2      	bls.n	80012f6 <HAL_SPI_TransmitReceive+0x1aa>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001370:	8832      	ldrh	r2, [r6, #0]
 8001372:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001374:	3602      	adds	r6, #2
          hspi->TxXferCount -= 2U;
 8001376:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001378:	3b02      	subs	r3, #2
 800137a:	b29b      	uxth	r3, r3
 800137c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800137e:	2500      	movs	r5, #0
 8001380:	e7c1      	b.n	8001306 <HAL_SPI_TransmitReceive+0x1ba>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001382:	6822      	ldr	r2, [r4, #0]
 8001384:	6851      	ldr	r1, [r2, #4]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	430b      	orrs	r3, r1
 800138c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800138e:	2501      	movs	r5, #1
 8001390:	e7d4      	b.n	800133c <HAL_SPI_TransmitReceive+0x1f0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001392:	7b1b      	ldrb	r3, [r3, #12]
 8001394:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 8001396:	2246      	movs	r2, #70	; 0x46
 8001398:	5aa3      	ldrh	r3, [r4, r2]
 800139a:	3b01      	subs	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	52a3      	strh	r3, [r4, r2]
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80013a0:	3701      	adds	r7, #1
        txallowed = 1U;
 80013a2:	2501      	movs	r5, #1
 80013a4:	e7ca      	b.n	800133c <HAL_SPI_TransmitReceive+0x1f0>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80013a6:	f7fe ff77 	bl	8000298 <HAL_GetTick>
 80013aa:	9b01      	ldr	r3, [sp, #4]
 80013ac:	1ac0      	subs	r0, r0, r3
 80013ae:	9b08      	ldr	r3, [sp, #32]
 80013b0:	4298      	cmp	r0, r3
 80013b2:	d3c6      	bcc.n	8001342 <HAL_SPI_TransmitReceive+0x1f6>
        errorcode = HAL_TIMEOUT;
 80013b4:	2003      	movs	r0, #3
 80013b6:	e6e5      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80013b8:	9a01      	ldr	r2, [sp, #4]
 80013ba:	9908      	ldr	r1, [sp, #32]
 80013bc:	0020      	movs	r0, r4
 80013be:	f7ff fd01 	bl	8000dc4 <SPI_EndRxTxTransaction>
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d001      	beq.n	80013ca <HAL_SPI_TransmitReceive+0x27e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013c6:	2320      	movs	r3, #32
 80013c8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d109      	bne.n	80013e4 <HAL_SPI_TransmitReceive+0x298>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80013d0:	2000      	movs	r0, #0
 80013d2:	e6d7      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 80013d4:	2002      	movs	r0, #2
 80013d6:	e6d5      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
 80013da:	e6d3      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
 80013dc:	2001      	movs	r0, #1
 80013de:	e6d1      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
 80013e0:	2001      	movs	r0, #1
 80013e2:	e6cf      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e6cd      	b.n	8001184 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80013e8:	2002      	movs	r0, #2
 80013ea:	e6d1      	b.n	8001190 <HAL_SPI_TransmitReceive+0x44>
 80013ec:	ffffefff 	.word	0xffffefff

080013f0 <HAL_SPI_Receive>:
{
 80013f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	0004      	movs	r4, r0
 80013f6:	000d      	movs	r5, r1
 80013f8:	0016      	movs	r6, r2
 80013fa:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80013fc:	2382      	movs	r3, #130	; 0x82
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	6842      	ldr	r2, [r0, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d017      	beq.n	8001436 <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 8001406:	235c      	movs	r3, #92	; 0x5c
 8001408:	5ce3      	ldrb	r3, [r4, r3]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d100      	bne.n	8001410 <HAL_SPI_Receive+0x20>
 800140e:	e0b1      	b.n	8001574 <HAL_SPI_Receive+0x184>
 8001410:	235c      	movs	r3, #92	; 0x5c
 8001412:	2201      	movs	r2, #1
 8001414:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8001416:	f7fe ff3f 	bl	8000298 <HAL_GetTick>
 800141a:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 800141c:	235d      	movs	r3, #93	; 0x5d
 800141e:	5ce3      	ldrb	r3, [r4, r3]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d014      	beq.n	800144e <HAL_SPI_Receive+0x5e>
    errorcode = HAL_BUSY;
 8001424:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001426:	235d      	movs	r3, #93	; 0x5d
 8001428:	2201      	movs	r2, #1
 800142a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800142c:	3b01      	subs	r3, #1
 800142e:	2200      	movs	r2, #0
 8001430:	54e2      	strb	r2, [r4, r3]
}
 8001432:	b005      	add	sp, #20
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001436:	6883      	ldr	r3, [r0, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1e4      	bne.n	8001406 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800143c:	335d      	adds	r3, #93	; 0x5d
 800143e:	2204      	movs	r2, #4
 8001440:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001442:	9700      	str	r7, [sp, #0]
 8001444:	0033      	movs	r3, r6
 8001446:	000a      	movs	r2, r1
 8001448:	f7ff fe80 	bl	800114c <HAL_SPI_TransmitReceive>
 800144c:	e7f1      	b.n	8001432 <HAL_SPI_Receive+0x42>
  if ((pData == NULL) || (Size == 0U))
 800144e:	2d00      	cmp	r5, #0
 8001450:	d100      	bne.n	8001454 <HAL_SPI_Receive+0x64>
 8001452:	e085      	b.n	8001560 <HAL_SPI_Receive+0x170>
 8001454:	2e00      	cmp	r6, #0
 8001456:	d100      	bne.n	800145a <HAL_SPI_Receive+0x6a>
 8001458:	e084      	b.n	8001564 <HAL_SPI_Receive+0x174>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800145a:	335c      	adds	r3, #92	; 0x5c
 800145c:	2204      	movs	r2, #4
 800145e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001464:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001466:	3240      	adds	r2, #64	; 0x40
 8001468:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 800146a:	3202      	adds	r2, #2
 800146c:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800146e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001470:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001472:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001474:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001476:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001478:	23e0      	movs	r3, #224	; 0xe0
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	68e2      	ldr	r2, [r4, #12]
 800147e:	429a      	cmp	r2, r3
 8001480:	d917      	bls.n	80014b2 <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	6853      	ldr	r3, [r2, #4]
 8001486:	493c      	ldr	r1, [pc, #240]	; (8001578 <HAL_SPI_Receive+0x188>)
 8001488:	400b      	ands	r3, r1
 800148a:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	68a2      	ldr	r2, [r4, #8]
 8001492:	429a      	cmp	r2, r3
 8001494:	d014      	beq.n	80014c0 <HAL_SPI_Receive+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	0652      	lsls	r2, r2, #25
 800149c:	d403      	bmi.n	80014a6 <HAL_SPI_Receive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2140      	movs	r1, #64	; 0x40
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80014a6:	23e0      	movs	r3, #224	; 0xe0
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	68e2      	ldr	r2, [r4, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d911      	bls.n	80014d4 <HAL_SPI_Receive+0xe4>
 80014b0:	e02e      	b.n	8001510 <HAL_SPI_Receive+0x120>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	6851      	ldr	r1, [r2, #4]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	015b      	lsls	r3, r3, #5
 80014ba:	430b      	orrs	r3, r1
 80014bc:	6053      	str	r3, [r2, #4]
 80014be:	e7e5      	b.n	800148c <HAL_SPI_Receive+0x9c>
    SPI_1LINE_RX(hspi);
 80014c0:	6822      	ldr	r2, [r4, #0]
 80014c2:	6813      	ldr	r3, [r2, #0]
 80014c4:	492d      	ldr	r1, [pc, #180]	; (800157c <HAL_SPI_Receive+0x18c>)
 80014c6:	400b      	ands	r3, r1
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e7e4      	b.n	8001496 <HAL_SPI_Receive+0xa6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80014cc:	2f00      	cmp	r7, #0
 80014ce:	d04b      	beq.n	8001568 <HAL_SPI_Receive+0x178>
 80014d0:	1c7b      	adds	r3, r7, #1
 80014d2:	d111      	bne.n	80014f8 <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 80014d4:	2346      	movs	r3, #70	; 0x46
 80014d6:	5ae3      	ldrh	r3, [r4, r3]
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d032      	beq.n	8001544 <HAL_SPI_Receive+0x154>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	07d2      	lsls	r2, r2, #31
 80014e4:	d5f2      	bpl.n	80014cc <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80014e6:	7b1b      	ldrb	r3, [r3, #12]
 80014e8:	702b      	strb	r3, [r5, #0]
        pData += sizeof(uint8_t);
 80014ea:	3501      	adds	r5, #1
        hspi->RxXferCount--;
 80014ec:	2246      	movs	r2, #70	; 0x46
 80014ee:	5aa3      	ldrh	r3, [r4, r2]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	52a3      	strh	r3, [r4, r2]
 80014f6:	e7ed      	b.n	80014d4 <HAL_SPI_Receive+0xe4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80014f8:	f7fe fece 	bl	8000298 <HAL_GetTick>
 80014fc:	9b03      	ldr	r3, [sp, #12]
 80014fe:	1ac0      	subs	r0, r0, r3
 8001500:	42b8      	cmp	r0, r7
 8001502:	d3e7      	bcc.n	80014d4 <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3
 8001506:	e78e      	b.n	8001426 <HAL_SPI_Receive+0x36>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001508:	2f00      	cmp	r7, #0
 800150a:	d02f      	beq.n	800156c <HAL_SPI_Receive+0x17c>
 800150c:	1c7b      	adds	r3, r7, #1
 800150e:	d111      	bne.n	8001534 <HAL_SPI_Receive+0x144>
    while (hspi->RxXferCount > 0U)
 8001510:	2346      	movs	r3, #70	; 0x46
 8001512:	5ae3      	ldrh	r3, [r4, r3]
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d014      	beq.n	8001544 <HAL_SPI_Receive+0x154>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800151a:	6823      	ldr	r3, [r4, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	07d2      	lsls	r2, r2, #31
 8001520:	d5f2      	bpl.n	8001508 <HAL_SPI_Receive+0x118>
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	802b      	strh	r3, [r5, #0]
        pData += sizeof(uint16_t);
 8001526:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 8001528:	2246      	movs	r2, #70	; 0x46
 800152a:	5aa3      	ldrh	r3, [r4, r2]
 800152c:	3b01      	subs	r3, #1
 800152e:	b29b      	uxth	r3, r3
 8001530:	52a3      	strh	r3, [r4, r2]
 8001532:	e7ed      	b.n	8001510 <HAL_SPI_Receive+0x120>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001534:	f7fe feb0 	bl	8000298 <HAL_GetTick>
 8001538:	9b03      	ldr	r3, [sp, #12]
 800153a:	1ac0      	subs	r0, r0, r3
 800153c:	42b8      	cmp	r0, r7
 800153e:	d3e7      	bcc.n	8001510 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 8001540:	2003      	movs	r0, #3
 8001542:	e770      	b.n	8001426 <HAL_SPI_Receive+0x36>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001544:	9a03      	ldr	r2, [sp, #12]
 8001546:	0039      	movs	r1, r7
 8001548:	0020      	movs	r0, r4
 800154a:	f7ff fc6f 	bl	8000e2c <SPI_EndRxTransaction>
 800154e:	2800      	cmp	r0, #0
 8001550:	d001      	beq.n	8001556 <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001552:	2320      	movs	r3, #32
 8001554:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001556:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001558:	2b00      	cmp	r3, #0
 800155a:	d109      	bne.n	8001570 <HAL_SPI_Receive+0x180>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800155c:	2000      	movs	r0, #0
 800155e:	e762      	b.n	8001426 <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8001560:	2001      	movs	r0, #1
 8001562:	e760      	b.n	8001426 <HAL_SPI_Receive+0x36>
 8001564:	2001      	movs	r0, #1
 8001566:	e75e      	b.n	8001426 <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 8001568:	2003      	movs	r0, #3
 800156a:	e75c      	b.n	8001426 <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 800156c:	2003      	movs	r0, #3
 800156e:	e75a      	b.n	8001426 <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8001570:	2001      	movs	r0, #1
 8001572:	e758      	b.n	8001426 <HAL_SPI_Receive+0x36>
  __HAL_LOCK(hspi);
 8001574:	2002      	movs	r0, #2
 8001576:	e75c      	b.n	8001432 <HAL_SPI_Receive+0x42>
 8001578:	ffffefff 	.word	0xffffefff
 800157c:	ffffbfff 	.word	0xffffbfff

08001580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001580:	b510      	push	{r4, lr}
 8001582:	0004      	movs	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001584:	6883      	ldr	r3, [r0, #8]
 8001586:	6902      	ldr	r2, [r0, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	6942      	ldr	r2, [r0, #20]
 800158c:	4313      	orrs	r3, r2
 800158e:	69c2      	ldr	r2, [r0, #28]
 8001590:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001592:	6801      	ldr	r1, [r0, #0]
 8001594:	680a      	ldr	r2, [r1, #0]
 8001596:	485c      	ldr	r0, [pc, #368]	; (8001708 <UART_SetConfig+0x188>)
 8001598:	4002      	ands	r2, r0
 800159a:	4313      	orrs	r3, r2
 800159c:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6853      	ldr	r3, [r2, #4]
 80015a2:	495a      	ldr	r1, [pc, #360]	; (800170c <UART_SetConfig+0x18c>)
 80015a4:	400b      	ands	r3, r1
 80015a6:	68e1      	ldr	r1, [r4, #12]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015ac:	69a2      	ldr	r2, [r4, #24]
 80015ae:	6a23      	ldr	r3, [r4, #32]
 80015b0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015b2:	6821      	ldr	r1, [r4, #0]
 80015b4:	688b      	ldr	r3, [r1, #8]
 80015b6:	4856      	ldr	r0, [pc, #344]	; (8001710 <UART_SetConfig+0x190>)
 80015b8:	4003      	ands	r3, r0
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015be:	4b55      	ldr	r3, [pc, #340]	; (8001714 <UART_SetConfig+0x194>)
 80015c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c2:	2303      	movs	r3, #3
 80015c4:	4013      	ands	r3, r2
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d026      	beq.n	8001618 <UART_SetConfig+0x98>
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d005      	beq.n	80015da <UART_SetConfig+0x5a>
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d024      	beq.n	800161c <UART_SetConfig+0x9c>
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d024      	beq.n	8001620 <UART_SetConfig+0xa0>
 80015d6:	2310      	movs	r3, #16
 80015d8:	e000      	b.n	80015dc <UART_SetConfig+0x5c>
 80015da:	2300      	movs	r3, #0
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	0212      	lsls	r2, r2, #8
 80015e0:	69e1      	ldr	r1, [r4, #28]
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d01e      	beq.n	8001624 <UART_SetConfig+0xa4>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d100      	bne.n	80015ec <UART_SetConfig+0x6c>
 80015ea:	e06f      	b.n	80016cc <UART_SetConfig+0x14c>
 80015ec:	d95e      	bls.n	80016ac <UART_SetConfig+0x12c>
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d100      	bne.n	80015f4 <UART_SetConfig+0x74>
 80015f2:	e079      	b.n	80016e8 <UART_SetConfig+0x168>
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d000      	beq.n	80015fa <UART_SetConfig+0x7a>
 80015f8:	e084      	b.n	8001704 <UART_SetConfig+0x184>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	0858      	lsrs	r0, r3, #1
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	469c      	mov	ip, r3
 8001604:	4460      	add	r0, ip
 8001606:	6861      	ldr	r1, [r4, #4]
 8001608:	f7fe fd90 	bl	800012c <__udivsi3>
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	0400      	lsls	r0, r0, #16
 8001610:	0c00      	lsrs	r0, r0, #16
 8001612:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001614:	2000      	movs	r0, #0
        break;
 8001616:	e02e      	b.n	8001676 <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001618:	2304      	movs	r3, #4
 800161a:	e7df      	b.n	80015dc <UART_SetConfig+0x5c>
 800161c:	2308      	movs	r3, #8
 800161e:	e7dd      	b.n	80015dc <UART_SetConfig+0x5c>
 8001620:	2302      	movs	r3, #2
 8001622:	e7db      	b.n	80015dc <UART_SetConfig+0x5c>
    switch (clocksource)
 8001624:	2b02      	cmp	r3, #2
 8001626:	d027      	beq.n	8001678 <UART_SetConfig+0xf8>
 8001628:	d90f      	bls.n	800164a <UART_SetConfig+0xca>
 800162a:	2b04      	cmp	r3, #4
 800162c:	d02f      	beq.n	800168e <UART_SetConfig+0x10e>
 800162e:	2b08      	cmp	r3, #8
 8001630:	d139      	bne.n	80016a6 <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001632:	6863      	ldr	r3, [r4, #4]
 8001634:	0858      	lsrs	r0, r3, #1
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	469c      	mov	ip, r3
 800163c:	4460      	add	r0, ip
 800163e:	6861      	ldr	r1, [r4, #4]
 8001640:	f7fe fd74 	bl	800012c <__udivsi3>
 8001644:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001646:	2000      	movs	r0, #0
        break;
 8001648:	e00c      	b.n	8001664 <UART_SetConfig+0xe4>
    switch (clocksource)
 800164a:	2b00      	cmp	r3, #0
 800164c:	d12b      	bne.n	80016a6 <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800164e:	f7ff fa73 	bl	8000b38 <HAL_RCC_GetPCLK1Freq>
 8001652:	0040      	lsls	r0, r0, #1
 8001654:	6863      	ldr	r3, [r4, #4]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	18c0      	adds	r0, r0, r3
 800165a:	6861      	ldr	r1, [r4, #4]
 800165c:	f7fe fd66 	bl	800012c <__udivsi3>
 8001660:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001662:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001664:	220f      	movs	r2, #15
 8001666:	0019      	movs	r1, r3
 8001668:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800166a:	105b      	asrs	r3, r3, #1
 800166c:	3a08      	subs	r2, #8
 800166e:	4013      	ands	r3, r2
 8001670:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 8001672:	6822      	ldr	r2, [r4, #0]
 8001674:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 8001676:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001678:	6863      	ldr	r3, [r4, #4]
 800167a:	0858      	lsrs	r0, r3, #1
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <UART_SetConfig+0x198>)
 800167e:	469c      	mov	ip, r3
 8001680:	4460      	add	r0, ip
 8001682:	6861      	ldr	r1, [r4, #4]
 8001684:	f7fe fd52 	bl	800012c <__udivsi3>
 8001688:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800168a:	2000      	movs	r0, #0
        break;
 800168c:	e7ea      	b.n	8001664 <UART_SetConfig+0xe4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800168e:	f7ff f96b 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 8001692:	0040      	lsls	r0, r0, #1
 8001694:	6863      	ldr	r3, [r4, #4]
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	18c0      	adds	r0, r0, r3
 800169a:	6861      	ldr	r1, [r4, #4]
 800169c:	f7fe fd46 	bl	800012c <__udivsi3>
 80016a0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80016a2:	2000      	movs	r0, #0
        break;
 80016a4:	e7de      	b.n	8001664 <UART_SetConfig+0xe4>
        ret = HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e7db      	b.n	8001664 <UART_SetConfig+0xe4>
    switch (clocksource)
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d129      	bne.n	8001704 <UART_SetConfig+0x184>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016b0:	f7ff fa42 	bl	8000b38 <HAL_RCC_GetPCLK1Freq>
 80016b4:	6863      	ldr	r3, [r4, #4]
 80016b6:	085b      	lsrs	r3, r3, #1
 80016b8:	18c0      	adds	r0, r0, r3
 80016ba:	6861      	ldr	r1, [r4, #4]
 80016bc:	f7fe fd36 	bl	800012c <__udivsi3>
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	0400      	lsls	r0, r0, #16
 80016c4:	0c00      	lsrs	r0, r0, #16
 80016c6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80016c8:	2000      	movs	r0, #0
        break;
 80016ca:	e7d4      	b.n	8001676 <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016cc:	6863      	ldr	r3, [r4, #4]
 80016ce:	0858      	lsrs	r0, r3, #1
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <UART_SetConfig+0x19c>)
 80016d2:	469c      	mov	ip, r3
 80016d4:	4460      	add	r0, ip
 80016d6:	6861      	ldr	r1, [r4, #4]
 80016d8:	f7fe fd28 	bl	800012c <__udivsi3>
 80016dc:	6823      	ldr	r3, [r4, #0]
 80016de:	0400      	lsls	r0, r0, #16
 80016e0:	0c00      	lsrs	r0, r0, #16
 80016e2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80016e4:	2000      	movs	r0, #0
        break;
 80016e6:	e7c6      	b.n	8001676 <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016e8:	f7ff f93e 	bl	8000968 <HAL_RCC_GetSysClockFreq>
 80016ec:	6863      	ldr	r3, [r4, #4]
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	18c0      	adds	r0, r0, r3
 80016f2:	6861      	ldr	r1, [r4, #4]
 80016f4:	f7fe fd1a 	bl	800012c <__udivsi3>
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	0400      	lsls	r0, r0, #16
 80016fc:	0c00      	lsrs	r0, r0, #16
 80016fe:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001700:	2000      	movs	r0, #0
        break;
 8001702:	e7b8      	b.n	8001676 <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8001704:	2001      	movs	r0, #1
 8001706:	e7b6      	b.n	8001676 <UART_SetConfig+0xf6>
 8001708:	ffff69f3 	.word	0xffff69f3
 800170c:	ffffcfff 	.word	0xffffcfff
 8001710:	fffff4ff 	.word	0xfffff4ff
 8001714:	40021000 	.word	0x40021000
 8001718:	00f42400 	.word	0x00f42400
 800171c:	007a1200 	.word	0x007a1200

08001720 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001720:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001722:	07db      	lsls	r3, r3, #31
 8001724:	d506      	bpl.n	8001734 <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001726:	6802      	ldr	r2, [r0, #0]
 8001728:	6853      	ldr	r3, [r2, #4]
 800172a:	492c      	ldr	r1, [pc, #176]	; (80017dc <UART_AdvFeatureConfig+0xbc>)
 800172c:	400b      	ands	r3, r1
 800172e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001730:	430b      	orrs	r3, r1
 8001732:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001734:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001736:	079b      	lsls	r3, r3, #30
 8001738:	d506      	bpl.n	8001748 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	6853      	ldr	r3, [r2, #4]
 800173e:	4928      	ldr	r1, [pc, #160]	; (80017e0 <UART_AdvFeatureConfig+0xc0>)
 8001740:	400b      	ands	r3, r1
 8001742:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001744:	430b      	orrs	r3, r1
 8001746:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001748:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800174a:	075b      	lsls	r3, r3, #29
 800174c:	d506      	bpl.n	800175c <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800174e:	6802      	ldr	r2, [r0, #0]
 8001750:	6853      	ldr	r3, [r2, #4]
 8001752:	4924      	ldr	r1, [pc, #144]	; (80017e4 <UART_AdvFeatureConfig+0xc4>)
 8001754:	400b      	ands	r3, r1
 8001756:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001758:	430b      	orrs	r3, r1
 800175a:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800175c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800175e:	071b      	lsls	r3, r3, #28
 8001760:	d506      	bpl.n	8001770 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001762:	6802      	ldr	r2, [r0, #0]
 8001764:	6853      	ldr	r3, [r2, #4]
 8001766:	4920      	ldr	r1, [pc, #128]	; (80017e8 <UART_AdvFeatureConfig+0xc8>)
 8001768:	400b      	ands	r3, r1
 800176a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800176c:	430b      	orrs	r3, r1
 800176e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001770:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001772:	06db      	lsls	r3, r3, #27
 8001774:	d506      	bpl.n	8001784 <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001776:	6802      	ldr	r2, [r0, #0]
 8001778:	6893      	ldr	r3, [r2, #8]
 800177a:	491c      	ldr	r1, [pc, #112]	; (80017ec <UART_AdvFeatureConfig+0xcc>)
 800177c:	400b      	ands	r3, r1
 800177e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001780:	430b      	orrs	r3, r1
 8001782:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001784:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001786:	069b      	lsls	r3, r3, #26
 8001788:	d506      	bpl.n	8001798 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800178a:	6802      	ldr	r2, [r0, #0]
 800178c:	6893      	ldr	r3, [r2, #8]
 800178e:	4918      	ldr	r1, [pc, #96]	; (80017f0 <UART_AdvFeatureConfig+0xd0>)
 8001790:	400b      	ands	r3, r1
 8001792:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001794:	430b      	orrs	r3, r1
 8001796:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001798:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800179a:	065b      	lsls	r3, r3, #25
 800179c:	d50b      	bpl.n	80017b6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800179e:	6802      	ldr	r2, [r0, #0]
 80017a0:	6853      	ldr	r3, [r2, #4]
 80017a2:	4914      	ldr	r1, [pc, #80]	; (80017f4 <UART_AdvFeatureConfig+0xd4>)
 80017a4:	400b      	ands	r3, r1
 80017a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80017a8:	430b      	orrs	r3, r1
 80017aa:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	035b      	lsls	r3, r3, #13
 80017b0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d00a      	beq.n	80017cc <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	d506      	bpl.n	80017ca <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017bc:	6802      	ldr	r2, [r0, #0]
 80017be:	6853      	ldr	r3, [r2, #4]
 80017c0:	490d      	ldr	r1, [pc, #52]	; (80017f8 <UART_AdvFeatureConfig+0xd8>)
 80017c2:	400b      	ands	r3, r1
 80017c4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017c6:	430b      	orrs	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]
  }
}
 80017ca:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017cc:	6802      	ldr	r2, [r0, #0]
 80017ce:	6853      	ldr	r3, [r2, #4]
 80017d0:	490a      	ldr	r1, [pc, #40]	; (80017fc <UART_AdvFeatureConfig+0xdc>)
 80017d2:	400b      	ands	r3, r1
 80017d4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80017d6:	430b      	orrs	r3, r1
 80017d8:	6053      	str	r3, [r2, #4]
 80017da:	e7ec      	b.n	80017b6 <UART_AdvFeatureConfig+0x96>
 80017dc:	fffdffff 	.word	0xfffdffff
 80017e0:	fffeffff 	.word	0xfffeffff
 80017e4:	fffbffff 	.word	0xfffbffff
 80017e8:	ffff7fff 	.word	0xffff7fff
 80017ec:	ffffefff 	.word	0xffffefff
 80017f0:	ffffdfff 	.word	0xffffdfff
 80017f4:	ffefffff 	.word	0xffefffff
 80017f8:	fff7ffff 	.word	0xfff7ffff
 80017fc:	ff9fffff 	.word	0xff9fffff

08001800 <UART_CheckIdleState>:
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001800:	2300      	movs	r3, #0
 8001802:	66c3      	str	r3, [r0, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001804:	2220      	movs	r2, #32
 8001806:	2169      	movs	r1, #105	; 0x69
 8001808:	5442      	strb	r2, [r0, r1]
  huart->RxState = HAL_UART_STATE_READY;
 800180a:	3101      	adds	r1, #1
 800180c:	5442      	strb	r2, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800180e:	3248      	adds	r2, #72	; 0x48
 8001810:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
}
 8001812:	2000      	movs	r0, #0
 8001814:	4770      	bx	lr
	...

08001818 <HAL_UART_Init>:
{
 8001818:	b510      	push	{r4, lr}
 800181a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800181c:	d030      	beq.n	8001880 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 800181e:	2369      	movs	r3, #105	; 0x69
 8001820:	5cc3      	ldrb	r3, [r0, r3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d022      	beq.n	800186c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8001826:	2369      	movs	r3, #105	; 0x69
 8001828:	2224      	movs	r2, #36	; 0x24
 800182a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	6813      	ldr	r3, [r2, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	438b      	bics	r3, r1
 8001834:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001836:	0020      	movs	r0, r4
 8001838:	f7ff fea2 	bl	8001580 <UART_SetConfig>
 800183c:	2801      	cmp	r0, #1
 800183e:	d014      	beq.n	800186a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	6853      	ldr	r3, [r2, #4]
 800184a:	490e      	ldr	r1, [pc, #56]	; (8001884 <HAL_UART_Init+0x6c>)
 800184c:	400b      	ands	r3, r1
 800184e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	6893      	ldr	r3, [r2, #8]
 8001854:	2108      	movs	r1, #8
 8001856:	438b      	bics	r3, r1
 8001858:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	3907      	subs	r1, #7
 8001860:	430b      	orrs	r3, r1
 8001862:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001864:	0020      	movs	r0, r4
 8001866:	f7ff ffcb 	bl	8001800 <UART_CheckIdleState>
}
 800186a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800186c:	3368      	adds	r3, #104	; 0x68
 800186e:	2200      	movs	r2, #0
 8001870:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001872:	f001 fb25 	bl	8002ec0 <HAL_UART_MspInit>
 8001876:	e7d6      	b.n	8001826 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8001878:	0020      	movs	r0, r4
 800187a:	f7ff ff51 	bl	8001720 <UART_AdvFeatureConfig>
 800187e:	e7e2      	b.n	8001846 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8001880:	2001      	movs	r0, #1
 8001882:	e7f2      	b.n	800186a <HAL_UART_Init+0x52>
 8001884:	fffff7ff 	.word	0xfffff7ff

08001888 <CH395TCPServerStart>:

#include <CH395.h>
#include <CH395CMD.h>
#include "Delay.h"
BOOL CH395TCPServerStart(uint32_t ip, uint16_t port)
{
 8001888:	b530      	push	{r4, r5, lr}
 800188a:	b083      	sub	sp, #12
 800188c:	9001      	str	r0, [sp, #4]
 800188e:	000d      	movs	r5, r1
	uint8_t i;
	// Initialize Stack
	CH395CMDInitCH395();
 8001890:	f000 f894 	bl	80019bc <CH395CMDInitCH395>
	// Check PHY
	i=0;
 8001894:	2400      	movs	r4, #0
	do
	{
		Delay_ms(100);
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <CH395TCPServerStart+0x80>)
 8001898:	f000 fab0 	bl	8001dfc <Delay_us>
		uint8_t phy = CH395CMDGetPHYStatus();
 800189c:	f000 f858 	bl	8001950 <CH395CMDGetPHYStatus>
		if(phy != (uint8_t)1) break; // PHY connected
 80018a0:	2801      	cmp	r0, #1
 80018a2:	d103      	bne.n	80018ac <CH395TCPServerStart+0x24>
		++i;
 80018a4:	3401      	adds	r4, #1
 80018a6:	b2e4      	uxtb	r4, r4
	}while(i<5);
 80018a8:	2c04      	cmp	r4, #4
 80018aa:	d9f4      	bls.n	8001896 <CH395TCPServerStart+0xe>
	if(i >= 5) return FALSE;
 80018ac:	2c04      	cmp	r4, #4
 80018ae:	d902      	bls.n	80018b6 <CH395TCPServerStart+0x2e>
 80018b0:	2000      	movs	r0, #0
	}

	CH395OpenSocket(0); // open socket 0
	CH395TCPListen(0); // start lisening
	return TRUE;
}
 80018b2:	b003      	add	sp, #12
 80018b4:	bd30      	pop	{r4, r5, pc}
	Delay_ms(200);
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <CH395TCPServerStart+0x84>)
 80018b8:	f000 faa0 	bl	8001dfc <Delay_us>
	if(CH395DHCPEnable(TRUE) != 0)
 80018bc:	2001      	movs	r0, #1
 80018be:	f000 fa19 	bl	8001cf4 <CH395DHCPEnable>
 80018c2:	2800      	cmp	r0, #0
 80018c4:	d104      	bne.n	80018d0 <CH395TCPServerStart+0x48>
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER);
 80018c6:	2002      	movs	r0, #2
 80018c8:	f000 fa45 	bl	8001d56 <CH395SetStartPara>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 80018cc:	2400      	movs	r4, #0
 80018ce:	e010      	b.n	80018f2 <CH395TCPServerStart+0x6a>
		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
 80018d0:	a801      	add	r0, sp, #4
 80018d2:	f000 f891 	bl	80019f8 <CH395CMDSetIPAddr>
		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
 80018d6:	a801      	add	r0, sp, #4
 80018d8:	f000 f8a8 	bl	8001a2c <CH395CMDSetGWIPAddr>
 80018dc:	e7f3      	b.n	80018c6 <CH395TCPServerStart+0x3e>
		CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET 0 to be TCP server
 80018de:	2103      	movs	r1, #3
 80018e0:	0020      	movs	r0, r4
 80018e2:	f000 f8bd 	bl	8001a60 <CH395SetSocketProtType>
		CH395SetSocketSourPort(i, port);
 80018e6:	0029      	movs	r1, r5
 80018e8:	0020      	movs	r0, r4
 80018ea:	f000 f8cf 	bl	8001a8c <CH395SetSocketSourPort>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 80018ee:	3401      	adds	r4, #1
 80018f0:	b2e4      	uxtb	r4, r4
 80018f2:	2c03      	cmp	r4, #3
 80018f4:	d9f3      	bls.n	80018de <CH395TCPServerStart+0x56>
	CH395OpenSocket(0); // open socket 0
 80018f6:	2000      	movs	r0, #0
 80018f8:	f000 f9a0 	bl	8001c3c <CH395OpenSocket>
	CH395TCPListen(0); // start lisening
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 f9bf 	bl	8001c80 <CH395TCPListen>
	return TRUE;
 8001902:	2001      	movs	r0, #1
 8001904:	e7d5      	b.n	80018b2 <CH395TCPServerStart+0x2a>
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	000186a0 	.word	0x000186a0
 800190c:	00030d40 	.word	0x00030d40

08001910 <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 8001910:	b510      	push	{r4, lr}
    xWriteCH395Cmd(CMD00_RESET_ALL);
 8001912:	2005      	movs	r0, #5
 8001914:	f000 fa34 	bl	8001d80 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <CH395CMDReset+0x18>)
 800191a:	8899      	ldrh	r1, [r3, #4]
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	2201      	movs	r2, #1
 8001920:	f7fe fde3 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001924:	bd10      	pop	{r4, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20000000 	.word	0x20000000

0800192c <CH395CMDGetVer>:
* Input          : None
* Output         : None
* Return         : 1字节芯片及固件版本号
*******************************************************************************/
uint8_t CH395CMDGetVer(void)
{
 800192c:	b510      	push	{r4, lr}
    uint8_t i;
    xWriteCH395Cmd(CMD01_GET_IC_VER);
 800192e:	2001      	movs	r0, #1
 8001930:	f000 fa26 	bl	8001d80 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001934:	f000 fa52 	bl	8001ddc <xReadCH395Data>
 8001938:	0004      	movs	r4, r0
    xEndCH395Cmd();
 800193a:	4b04      	ldr	r3, [pc, #16]	; (800194c <CH395CMDGetVer+0x20>)
 800193c:	8899      	ldrh	r1, [r3, #4]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	f7fe fdd2 	bl	80004ea <HAL_GPIO_WritePin>
    return i;
}
 8001946:	0020      	movs	r0, r4
 8001948:	bd10      	pop	{r4, pc}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	20000000 	.word	0x20000000

08001950 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 8001950:	b510      	push	{r4, lr}
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 8001952:	2026      	movs	r0, #38	; 0x26
 8001954:	f000 fa14 	bl	8001d80 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001958:	f000 fa40 	bl	8001ddc <xReadCH395Data>
 800195c:	0004      	movs	r4, r0
    xEndCH395Cmd();
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <CH395CMDGetPHYStatus+0x20>)
 8001960:	8899      	ldrh	r1, [r3, #4]
 8001962:	6818      	ldr	r0, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	f7fe fdc0 	bl	80004ea <HAL_GPIO_WritePin>
    return i;
}
 800196a:	0020      	movs	r0, r4
 800196c:	bd10      	pop	{r4, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	20000000 	.word	0x20000000

08001974 <CH395CMDGetGlobIntStatus>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint8_t CH395CMDGetGlobIntStatus(void)
{
 8001974:	b510      	push	{r4, lr}
    uint8_t init_status;

    xWriteCH395Cmd(CMD01_GET_GLOB_INT_STATUS);
 8001976:	2029      	movs	r0, #41	; 0x29
 8001978:	f000 fa02 	bl	8001d80 <xWriteCH395Cmd>
    init_status = xReadCH395Data();
 800197c:	f000 fa2e 	bl	8001ddc <xReadCH395Data>
 8001980:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <CH395CMDGetGlobIntStatus+0x20>)
 8001984:	8899      	ldrh	r1, [r3, #4]
 8001986:	6818      	ldr	r0, [r3, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	f7fe fdae 	bl	80004ea <HAL_GPIO_WritePin>
    return  init_status;
}
 800198e:	0020      	movs	r0, r4
 8001990:	bd10      	pop	{r4, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	20000000 	.word	0x20000000

08001998 <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 8001998:	b510      	push	{r4, lr}
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 800199a:	202c      	movs	r0, #44	; 0x2c
 800199c:	f000 f9f0 	bl	8001d80 <xWriteCH395Cmd>
    i = xReadCH395Data();
 80019a0:	f000 fa1c 	bl	8001ddc <xReadCH395Data>
 80019a4:	0004      	movs	r4, r0
    xEndCH395Cmd();
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <CH395GetCmdStatus+0x20>)
 80019a8:	8899      	ldrh	r1, [r3, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f7fe fd9c 	bl	80004ea <HAL_GPIO_WritePin>
    return i;
}
 80019b2:	0020      	movs	r0, r4
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	20000000 	.word	0x20000000

080019bc <CH395CMDInitCH395>:
{
 80019bc:	b510      	push	{r4, lr}
    xWriteCH395Cmd(CMD0W_INIT_CH395);
 80019be:	2027      	movs	r0, #39	; 0x27
 80019c0:	f000 f9de 	bl	8001d80 <xWriteCH395Cmd>
    xEndCH395Cmd();
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <CH395CMDInitCH395+0x34>)
 80019c6:	8899      	ldrh	r1, [r3, #4]
 80019c8:	6818      	ldr	r0, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f7fe fd8d 	bl	80004ea <HAL_GPIO_WritePin>
    uint8_t i = 0;
 80019d0:	2400      	movs	r4, #0
 80019d2:	e000      	b.n	80019d6 <CH395CMDInitCH395+0x1a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 80019d4:	001c      	movs	r4, r3
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <CH395CMDInitCH395+0x38>)
 80019d8:	f000 fa10 	bl	8001dfc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80019dc:	f7ff ffdc 	bl	8001998 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80019e0:	2810      	cmp	r0, #16
 80019e2:	d104      	bne.n	80019ee <CH395CMDInitCH395+0x32>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 80019e4:	1c63      	adds	r3, r4, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2cc8      	cmp	r4, #200	; 0xc8
 80019ea:	d9f3      	bls.n	80019d4 <CH395CMDInitCH395+0x18>
 80019ec:	30ea      	adds	r0, #234	; 0xea
}
 80019ee:	bd10      	pop	{r4, pc}
 80019f0:	20000000 	.word	0x20000000
 80019f4:	00002710 	.word	0x00002710

080019f8 <CH395CMDSetIPAddr>:
* Input          : ipaddr 指IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetIPAddr(uint8_t *ipaddr)
{
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	0005      	movs	r5, r0
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_IP_ADDR);
 80019fc:	2022      	movs	r0, #34	; 0x22
 80019fe:	f000 f9bf 	bl	8001d80 <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*ipaddr++);
 8001a02:	2400      	movs	r4, #0
 8001a04:	e006      	b.n	8001a14 <CH395CMDSetIPAddr+0x1c>
 8001a06:	1c6e      	adds	r6, r5, #1
 8001a08:	7828      	ldrb	r0, [r5, #0]
 8001a0a:	f000 f9d9 	bl	8001dc0 <xWriteCH395Data>
 8001a0e:	3401      	adds	r4, #1
 8001a10:	b2e4      	uxtb	r4, r4
 8001a12:	0035      	movs	r5, r6
 8001a14:	2c03      	cmp	r4, #3
 8001a16:	d9f6      	bls.n	8001a06 <CH395CMDSetIPAddr+0xe>
    xEndCH395Cmd();
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <CH395CMDSetIPAddr+0x30>)
 8001a1a:	8899      	ldrh	r1, [r3, #4]
 8001a1c:	6818      	ldr	r0, [r3, #0]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f7fe fd63 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000000 	.word	0x20000000

08001a2c <CH395CMDSetGWIPAddr>:
* Input          : ipaddr 指向网关IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetGWIPAddr(uint8_t *gwipaddr)
{
 8001a2c:	b570      	push	{r4, r5, r6, lr}
 8001a2e:	0005      	movs	r5, r0
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_GWIP_ADDR);
 8001a30:	2023      	movs	r0, #35	; 0x23
 8001a32:	f000 f9a5 	bl	8001d80 <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*gwipaddr++);
 8001a36:	2400      	movs	r4, #0
 8001a38:	e006      	b.n	8001a48 <CH395CMDSetGWIPAddr+0x1c>
 8001a3a:	1c6e      	adds	r6, r5, #1
 8001a3c:	7828      	ldrb	r0, [r5, #0]
 8001a3e:	f000 f9bf 	bl	8001dc0 <xWriteCH395Data>
 8001a42:	3401      	adds	r4, #1
 8001a44:	b2e4      	uxtb	r4, r4
 8001a46:	0035      	movs	r5, r6
 8001a48:	2c03      	cmp	r4, #3
 8001a4a:	d9f6      	bls.n	8001a3a <CH395CMDSetGWIPAddr+0xe>
    xEndCH395Cmd();
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <CH395CMDSetGWIPAddr+0x30>)
 8001a4e:	8899      	ldrh	r1, [r3, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f7fe fd49 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001a58:	bd70      	pop	{r4, r5, r6, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000000 	.word	0x20000000

08001a60 <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 8001a60:	b570      	push	{r4, r5, r6, lr}
 8001a62:	0005      	movs	r5, r0
 8001a64:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 8001a66:	2034      	movs	r0, #52	; 0x34
 8001a68:	f000 f98a 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001a6c:	0028      	movs	r0, r5
 8001a6e:	f000 f9a7 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data(prottype);
 8001a72:	0020      	movs	r0, r4
 8001a74:	f000 f9a4 	bl	8001dc0 <xWriteCH395Data>
    xEndCH395Cmd();
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <CH395SetSocketProtType+0x28>)
 8001a7a:	8899      	ldrh	r1, [r3, #4]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f7fe fd33 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001a84:	bd70      	pop	{r4, r5, r6, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000000 	.word	0x20000000

08001a8c <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 8001a8c:	b570      	push	{r4, r5, r6, lr}
 8001a8e:	0005      	movs	r5, r0
 8001a90:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 8001a92:	2033      	movs	r0, #51	; 0x33
 8001a94:	f000 f974 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001a98:	0028      	movs	r0, r5
 8001a9a:	f000 f991 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 8001a9e:	b2e0      	uxtb	r0, r4
 8001aa0:	f000 f98e 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 8001aa4:	0a20      	lsrs	r0, r4, #8
 8001aa6:	f000 f98b 	bl	8001dc0 <xWriteCH395Data>
    xEndCH395Cmd();
 8001aaa:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <CH395SetSocketSourPort+0x2c>)
 8001aac:	8899      	ldrh	r1, [r3, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f7fe fd1a 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001ab6:	bd70      	pop	{r4, r5, r6, pc}
 8001ab8:	20000000 	.word	0x20000000

08001abc <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,uint8_t *databuf,uint16_t len)
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	0004      	movs	r4, r0
 8001ac0:	000d      	movs	r5, r1
 8001ac2:	0016      	movs	r6, r2
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 8001ac4:	e004      	b.n	8001ad0 <CH395SendData+0x14>
    {
    	Delay_ms(10);
 8001ac6:	4818      	ldr	r0, [pc, #96]	; (8001b28 <CH395SendData+0x6c>)
 8001ac8:	f000 f998 	bl	8001dfc <Delay_us>
    	i = CH395CMDGetVer();
 8001acc:	f7ff ff2e 	bl	800192c <CH395CMDGetVer>
    while(!(ch395.TX_available & (1<<sockindex)))
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <CH395SendData+0x70>)
 8001ad2:	789b      	ldrb	r3, [r3, #2]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4123      	asrs	r3, r4
 8001ad8:	07db      	lsls	r3, r3, #31
 8001ada:	d5f4      	bpl.n	8001ac6 <CH395SendData+0xa>
    	DEBUG_LOG("%d", i);
    }
    ch395.TX_available &= ~(1<<sockindex);
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <CH395SendData+0x70>)
 8001ade:	7883      	ldrb	r3, [r0, #2]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	40a1      	lsls	r1, r4
 8001ae4:	438b      	bics	r3, r1
 8001ae6:	7083      	strb	r3, [r0, #2]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8001ae8:	2039      	movs	r0, #57	; 0x39
 8001aea:	f000 f949 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8001aee:	0020      	movs	r0, r4
 8001af0:	f000 f966 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8001af4:	b2f0      	uxtb	r0, r6
 8001af6:	f000 f963 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8001afa:	0a30      	lsrs	r0, r6, #8
 8001afc:	f000 f960 	bl	8001dc0 <xWriteCH395Data>
    Delay_us(2);
 8001b00:	2002      	movs	r0, #2
 8001b02:	f000 f97b 	bl	8001dfc <Delay_us>
    for(i = 0; i < len; i++)
 8001b06:	2400      	movs	r4, #0
 8001b08:	e005      	b.n	8001b16 <CH395SendData+0x5a>
    {
        xWriteCH395Data(*databuf);
 8001b0a:	7828      	ldrb	r0, [r5, #0]
 8001b0c:	f000 f958 	bl	8001dc0 <xWriteCH395Data>
        databuf++;
 8001b10:	3501      	adds	r5, #1
    for(i = 0; i < len; i++)
 8001b12:	3401      	adds	r4, #1
 8001b14:	b2a4      	uxth	r4, r4
 8001b16:	42b4      	cmp	r4, r6
 8001b18:	d3f7      	bcc.n	8001b0a <CH395SendData+0x4e>
    }
    xEndCH395Cmd();
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <CH395SendData+0x74>)
 8001b1c:	8899      	ldrh	r1, [r3, #4]
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f7fe fce2 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001b26:	bd70      	pop	{r4, r5, r6, pc}
 8001b28:	00002710 	.word	0x00002710
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000000 	.word	0x20000000

08001b34 <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	0005      	movs	r5, r0
 8001b38:	000c      	movs	r4, r1
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8001b3a:	2039      	movs	r0, #57	; 0x39
 8001b3c:	f000 f920 	bl	8001d80 <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 8001b40:	0028      	movs	r0, r5
 8001b42:	f000 f93d 	bl	8001dc0 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 8001b46:	b2e0      	uxtb	r0, r4
 8001b48:	f000 f93a 	bl	8001dc0 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 8001b4c:	0a20      	lsrs	r0, r4, #8
 8001b4e:	f000 f937 	bl	8001dc0 <xWriteCH395Data>
	Delay_us(2);
 8001b52:	2002      	movs	r0, #2
 8001b54:	f000 f952 	bl	8001dfc <Delay_us>
}
 8001b58:	bd70      	pop	{r4, r5, r6, pc}

08001b5a <CH395ContinueSendingData>:

void CH395ContinueSendingData(uint8_t *databuf, uint16_t len)
{
 8001b5a:	b570      	push	{r4, r5, r6, lr}
 8001b5c:	0005      	movs	r5, r0
 8001b5e:	000e      	movs	r6, r1
	uint16_t i;
	for(i=0; i<len; ++i)
 8001b60:	2400      	movs	r4, #0
 8001b62:	e005      	b.n	8001b70 <CH395ContinueSendingData+0x16>
	{
		xWriteCH395Data(*databuf);
 8001b64:	7828      	ldrb	r0, [r5, #0]
 8001b66:	f000 f92b 	bl	8001dc0 <xWriteCH395Data>
		databuf++;
 8001b6a:	3501      	adds	r5, #1
	for(i=0; i<len; ++i)
 8001b6c:	3401      	adds	r4, #1
 8001b6e:	b2a4      	uxth	r4, r4
 8001b70:	42b4      	cmp	r4, r6
 8001b72:	d3f7      	bcc.n	8001b64 <CH395ContinueSendingData+0xa>
	}
}
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b78 <CH395Complete>:
void CH395Complete()
{
 8001b78:	b510      	push	{r4, lr}
	xEndCH395Cmd();
 8001b7a:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <CH395Complete+0x10>)
 8001b7c:	8899      	ldrh	r1, [r3, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f7fe fcb2 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001b86:	bd10      	pop	{r4, pc}
 8001b88:	20000000 	.word	0x20000000

08001b8c <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 8001b8c:	b570      	push	{r4, r5, r6, lr}
 8001b8e:	0004      	movs	r4, r0
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 8001b90:	203b      	movs	r0, #59	; 0x3b
 8001b92:	f000 f8f5 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8001b96:	0020      	movs	r0, r4
 8001b98:	f000 f912 	bl	8001dc0 <xWriteCH395Data>
    i = xReadCH395Data();
 8001b9c:	f000 f91e 	bl	8001ddc <xReadCH395Data>
 8001ba0:	b285      	uxth	r5, r0
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 8001ba2:	f000 f91b 	bl	8001ddc <xReadCH395Data>
 8001ba6:	b280      	uxth	r0, r0
 8001ba8:	0200      	lsls	r0, r0, #8
 8001baa:	b284      	uxth	r4, r0
 8001bac:	1964      	adds	r4, r4, r5
 8001bae:	b2a4      	uxth	r4, r4
    xEndCH395Cmd();
 8001bb0:	4b03      	ldr	r3, [pc, #12]	; (8001bc0 <CH395GetRecvLength+0x34>)
 8001bb2:	8899      	ldrh	r1, [r3, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f7fe fc97 	bl	80004ea <HAL_GPIO_WritePin>
    return i;
}
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	bd70      	pop	{r4, r5, r6, pc}
 8001bc0:	20000000 	.word	0x20000000

08001bc4 <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 8001bc4:	b510      	push	{r4, lr}
 8001bc6:	0004      	movs	r4, r0
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 8001bc8:	202e      	movs	r0, #46	; 0x2e
 8001bca:	f000 f8d9 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8001bce:	0020      	movs	r0, r4
 8001bd0:	f000 f8f6 	bl	8001dc0 <xWriteCH395Data>
    xEndCH395Cmd();
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <CH395ClearRecvBuf+0x20>)
 8001bd6:	8899      	ldrh	r1, [r3, #4]
 8001bd8:	6818      	ldr	r0, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f7fe fc85 	bl	80004ea <HAL_GPIO_WritePin>
}
 8001be0:	bd10      	pop	{r4, pc}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	20000000 	.word	0x20000000

08001be8 <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	0004      	movs	r4, r0
 8001bec:	000e      	movs	r6, r1
 8001bee:	0015      	movs	r5, r2
    uint16_t i;
    if(!len)return;
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d100      	bne.n	8001bf6 <CH395GetRecvData+0xe>
    {
       *pbuf = xReadCH395Data();
       pbuf++;
    }   
    xEndCH395Cmd();
}
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 8001bf6:	203c      	movs	r0, #60	; 0x3c
 8001bf8:	f000 f8c2 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f000 f8df 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8001c02:	b2f0      	uxtb	r0, r6
 8001c04:	f000 f8dc 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8001c08:	0a30      	lsrs	r0, r6, #8
 8001c0a:	f000 f8d9 	bl	8001dc0 <xWriteCH395Data>
    Delay_us(1);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f000 f8f4 	bl	8001dfc <Delay_us>
    for(i = 0; i < len; i++)
 8001c14:	2400      	movs	r4, #0
 8001c16:	e005      	b.n	8001c24 <CH395GetRecvData+0x3c>
       *pbuf = xReadCH395Data();
 8001c18:	f000 f8e0 	bl	8001ddc <xReadCH395Data>
 8001c1c:	7028      	strb	r0, [r5, #0]
       pbuf++;
 8001c1e:	3501      	adds	r5, #1
    for(i = 0; i < len; i++)
 8001c20:	3401      	adds	r4, #1
 8001c22:	b2a4      	uxth	r4, r4
 8001c24:	42b4      	cmp	r4, r6
 8001c26:	d3f7      	bcc.n	8001c18 <CH395GetRecvData+0x30>
    xEndCH395Cmd();
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <CH395GetRecvData+0x50>)
 8001c2a:	8899      	ldrh	r1, [r3, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f7fe fc5b 	bl	80004ea <HAL_GPIO_WritePin>
 8001c34:	e7de      	b.n	8001bf4 <CH395GetRecvData+0xc>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000000 	.word	0x20000000

08001c3c <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 8001c3c:	b510      	push	{r4, lr}
 8001c3e:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s = 0;
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 8001c40:	2035      	movs	r0, #53	; 0x35
 8001c42:	f000 f89d 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001c46:	0020      	movs	r0, r4
 8001c48:	f000 f8ba 	bl	8001dc0 <xWriteCH395Data>
    xEndCH395Cmd();
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <CH395OpenSocket+0x3c>)
 8001c4e:	8899      	ldrh	r1, [r3, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f7fe fc49 	bl	80004ea <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001c58:	2400      	movs	r4, #0
 8001c5a:	e000      	b.n	8001c5e <CH395OpenSocket+0x22>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001c5c:	001c      	movs	r4, r3
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <CH395OpenSocket+0x40>)
 8001c60:	f000 f8cc 	bl	8001dfc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001c64:	f7ff fe98 	bl	8001998 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001c68:	2810      	cmp	r0, #16
 8001c6a:	d104      	bne.n	8001c76 <CH395OpenSocket+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001c6c:	1c63      	adds	r3, r4, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2cc8      	cmp	r4, #200	; 0xc8
 8001c72:	d9f3      	bls.n	8001c5c <CH395OpenSocket+0x20>
 8001c74:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	00001388 	.word	0x00001388

08001c80 <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 8001c80:	b510      	push	{r4, lr}
 8001c82:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s = 0;
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 8001c84:	2036      	movs	r0, #54	; 0x36
 8001c86:	f000 f87b 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001c8a:	0020      	movs	r0, r4
 8001c8c:	f000 f898 	bl	8001dc0 <xWriteCH395Data>
    xEndCH395Cmd();
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <CH395TCPListen+0x3c>)
 8001c92:	8899      	ldrh	r1, [r3, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f7fe fc27 	bl	80004ea <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	e000      	b.n	8001ca2 <CH395TCPListen+0x22>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001ca0:	001c      	movs	r4, r3
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <CH395TCPListen+0x40>)
 8001ca4:	f000 f8aa 	bl	8001dfc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001ca8:	f7ff fe76 	bl	8001998 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001cac:	2810      	cmp	r0, #16
 8001cae:	d104      	bne.n	8001cba <CH395TCPListen+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001cb0:	1c63      	adds	r3, r4, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2cc8      	cmp	r4, #200	; 0xc8
 8001cb6:	d9f3      	bls.n	8001ca0 <CH395TCPListen+0x20>
 8001cb8:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8001cba:	bd10      	pop	{r4, pc}
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	00001388 	.word	0x00001388

08001cc4 <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 8001cc4:	b510      	push	{r4, lr}
 8001cc6:	0004      	movs	r4, r0
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 8001cc8:	2030      	movs	r0, #48	; 0x30
 8001cca:	f000 f859 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001cce:	0020      	movs	r0, r4
 8001cd0:	f000 f876 	bl	8001dc0 <xWriteCH395Data>
    Delay_us(2);
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f000 f891 	bl	8001dfc <Delay_us>
    intstatus = xReadCH395Data();
 8001cda:	f000 f87f 	bl	8001ddc <xReadCH395Data>
 8001cde:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <CH395GetSocketInt+0x2c>)
 8001ce2:	8899      	ldrh	r1, [r3, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f7fe fbff 	bl	80004ea <HAL_GPIO_WritePin>
    return intstatus;
}
 8001cec:	0020      	movs	r0, r4
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 8001cf4:	b510      	push	{r4, lr}
 8001cf6:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 8001cf8:	2041      	movs	r0, #65	; 0x41
 8001cfa:	f000 f841 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 8001cfe:	0020      	movs	r0, r4
 8001d00:	f000 f85e 	bl	8001dc0 <xWriteCH395Data>
    xEndCH395Cmd();
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <CH395DHCPEnable+0x3c>)
 8001d06:	8899      	ldrh	r1, [r3, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f7fe fbed 	bl	80004ea <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001d10:	2400      	movs	r4, #0
 8001d12:	e000      	b.n	8001d16 <CH395DHCPEnable+0x22>
    while(1)
    {
        Delay_ms(20);
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001d14:	001c      	movs	r4, r3
        Delay_ms(20);
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <CH395DHCPEnable+0x40>)
 8001d18:	f000 f870 	bl	8001dfc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001d1c:	f7ff fe3c 	bl	8001998 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001d20:	2810      	cmp	r0, #16
 8001d22:	d104      	bne.n	8001d2e <CH395DHCPEnable+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001d24:	1c63      	adds	r3, r4, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2cc8      	cmp	r4, #200	; 0xc8
 8001d2a:	d9f3      	bls.n	8001d14 <CH395DHCPEnable+0x20>
 8001d2c:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8001d2e:	bd10      	pop	{r4, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	00004e20 	.word	0x00004e20

08001d38 <CH395ReadGPIOAddr>:
* Input          : regadd   寄存器地址
* Output         : None
* Return         : 寄存器的值
*******************************************************************************/
uint8_t CH395ReadGPIOAddr(uint8_t regadd)
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	0004      	movs	r4, r0
    uint8_t i;
    xWriteCH395Cmd(CMD10_READ_GPIO_REG);
 8001d3c:	20ec      	movs	r0, #236	; 0xec
 8001d3e:	f000 f81f 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data(regadd);
 8001d42:	0020      	movs	r0, r4
 8001d44:	f000 f83c 	bl	8001dc0 <xWriteCH395Data>
    Delay_ms(1);
 8001d48:	20fa      	movs	r0, #250	; 0xfa
 8001d4a:	0080      	lsls	r0, r0, #2
 8001d4c:	f000 f856 	bl	8001dfc <Delay_us>
    i = xReadCH395Data();
 8001d50:	f000 f844 	bl	8001ddc <xReadCH395Data>
    return i;
}
 8001d54:	bd10      	pop	{r4, pc}

08001d56 <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 8001d56:	b510      	push	{r4, lr}
 8001d58:	0004      	movs	r4, r0
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 8001d5a:	2055      	movs	r0, #85	; 0x55
 8001d5c:	f000 f810 	bl	8001d80 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 8001d60:	b2e0      	uxtb	r0, r4
 8001d62:	f000 f82d 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 8001d66:	b2a0      	uxth	r0, r4
 8001d68:	0a00      	lsrs	r0, r0, #8
 8001d6a:	f000 f829 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 8001d6e:	0c20      	lsrs	r0, r4, #16
 8001d70:	b2c0      	uxtb	r0, r0
 8001d72:	f000 f825 	bl	8001dc0 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 8001d76:	0e20      	lsrs	r0, r4, #24
 8001d78:	f000 f822 	bl	8001dc0 <xWriteCH395Data>
}
 8001d7c:	bd10      	pop	{r4, pc}
	...

08001d80 <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 8001d80:	b530      	push	{r4, r5, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	466b      	mov	r3, sp
 8001d86:	1ddd      	adds	r5, r3, #7
 8001d88:	71d8      	strb	r0, [r3, #7]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 8001d8a:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <xWriteCH395Cmd+0x38>)
 8001d8c:	88a1      	ldrh	r1, [r4, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	6820      	ldr	r0, [r4, #0]
 8001d92:	f7fe fbaa 	bl	80004ea <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 8001d96:	88a1      	ldrh	r1, [r4, #4]
 8001d98:	6820      	ldr	r0, [r4, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f7fe fba5 	bl	80004ea <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 8001da0:	2364      	movs	r3, #100	; 0x64
 8001da2:	2201      	movs	r2, #1
 8001da4:	0029      	movs	r1, r5
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <xWriteCH395Cmd+0x3c>)
 8001da8:	f7ff f8ee 	bl	8000f88 <HAL_SPI_Transmit>
    Delay_us(2);
 8001dac:	2002      	movs	r0, #2
 8001dae:	f000 f825 	bl	8001dfc <Delay_us>
}
 8001db2:	b003      	add	sp, #12
 8001db4:	bd30      	pop	{r4, r5, pc}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	200008ec 	.word	0x200008ec

08001dc0 <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 8001dc0:	b500      	push	{lr}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	466b      	mov	r3, sp
 8001dc6:	1dd9      	adds	r1, r3, #7
 8001dc8:	7008      	strb	r0, [r1, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	2201      	movs	r2, #1
 8001dce:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <xWriteCH395Data+0x18>)
 8001dd0:	f7ff f8da 	bl	8000f88 <HAL_SPI_Transmit>
}
 8001dd4:	b003      	add	sp, #12
 8001dd6:	bd00      	pop	{pc}
 8001dd8:	200008ec 	.word	0x200008ec

08001ddc <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	b082      	sub	sp, #8
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 8001de0:	466b      	mov	r3, sp
 8001de2:	1ddc      	adds	r4, r3, #7
 8001de4:	2364      	movs	r3, #100	; 0x64
 8001de6:	2201      	movs	r2, #1
 8001de8:	0021      	movs	r1, r4
 8001dea:	4803      	ldr	r0, [pc, #12]	; (8001df8 <xReadCH395Data+0x1c>)
 8001dec:	f7ff fb00 	bl	80013f0 <HAL_SPI_Receive>
    return i;
 8001df0:	7820      	ldrb	r0, [r4, #0]
}
 8001df2:	b002      	add	sp, #8
 8001df4:	bd10      	pop	{r4, pc}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	200008ec 	.word	0x200008ec

08001dfc <Delay_us>:

#include "Delay.h"

void Delay_us(unsigned int n) {
	uint32_t temp;
	SysTick->LOAD = 8 * n; // SYSCLK Frequency MHz * us
 8001dfc:	00c0      	lsls	r0, r0, #3
 8001dfe:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <Delay_us+0x24>)
 8001e00:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0X00; //清空计数器
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0X01; //使能，减到零是无动作，采用外部时钟源
 8001e06:	3201      	adds	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL; //读取当前倒计数值
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <Delay_us+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
	} while ((temp & 0x01) && (!(temp & (1 << 16)))); //等待时间到达
 8001e0e:	4a05      	ldr	r2, [pc, #20]	; (8001e24 <Delay_us+0x28>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d0f9      	beq.n	8001e0a <Delay_us+0xe>
	SysTick->CTRL = 0x00; //关闭计数器
 8001e16:	4b02      	ldr	r3, [pc, #8]	; (8001e20 <Delay_us+0x24>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0X00; //清空计数器
 8001e1c:	609a      	str	r2, [r3, #8]
}
 8001e1e:	4770      	bx	lr
 8001e20:	e000e010 	.word	0xe000e010
 8001e24:	00010001 	.word	0x00010001

08001e28 <FS_begin>:
#include "FS.h"
FS_typedef FS;

BOOL FS_begin(FS_typedef* pFS, uint32_t* addr_base)
{
	if((uint32_t)addr_base < MAX_ADDR && ((pFS->n_files = *(uint32_t*)(addr_base)) != 0xffffffff))
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <FS_begin+0x1c>)
 8001e2a:	4299      	cmp	r1, r3
 8001e2c:	d806      	bhi.n	8001e3c <FS_begin+0x14>
 8001e2e:	680b      	ldr	r3, [r1, #0]
 8001e30:	6043      	str	r3, [r0, #4]
 8001e32:	3301      	adds	r3, #1
 8001e34:	d004      	beq.n	8001e40 <FS_begin+0x18>
	{
		pFS->addr_base = addr_base;
 8001e36:	6001      	str	r1, [r0, #0]
		return TRUE;
 8001e38:	2001      	movs	r0, #1
 8001e3a:	e000      	b.n	8001e3e <FS_begin+0x16>
	}
	else
	{
		return FALSE;
 8001e3c:	2000      	movs	r0, #0
	}
}
 8001e3e:	4770      	bx	lr
		return FALSE;
 8001e40:	2000      	movs	r0, #0
 8001e42:	e7fc      	b.n	8001e3e <FS_begin+0x16>
 8001e44:	08007ffe 	.word	0x08007ffe

08001e48 <FS_open>:

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	46ce      	mov	lr, r9
 8001e4c:	4647      	mov	r7, r8
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b083      	sub	sp, #12
 8001e52:	0007      	movs	r7, r0
 8001e54:	9201      	str	r2, [sp, #4]
	int i = pFS->n_files;
 8001e56:	684e      	ldr	r6, [r1, #4]
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 8001e58:	680d      	ldr	r5, [r1, #0]
	uint32_t offset = (uint32_t)pFS->addr_base;
 8001e5a:	46a9      	mov	r9, r5

	FSfile_typedef file;
	file.size = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6083      	str	r3, [r0, #8]
	file.p_content = NULL;
 8001e60:	6043      	str	r3, [r0, #4]
	file.path = NULL;
 8001e62:	6003      	str	r3, [r0, #0]
	do{
		addr ++;
 8001e64:	3504      	adds	r5, #4
		i--;
 8001e66:	3e01      	subs	r6, #1
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	444b      	add	r3, r9
 8001e6c:	001c      	movs	r4, r3
 8001e6e:	2308      	movs	r3, #8
 8001e70:	4698      	mov	r8, r3
 8001e72:	44a0      	add	r8, r4
		if(strcmp(path, _path) == 0) // path matched
 8001e74:	4641      	mov	r1, r8
 8001e76:	9801      	ldr	r0, [sp, #4]
 8001e78:	f7fe f946 	bl	8000108 <strcmp>
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d002      	beq.n	8001e86 <FS_open+0x3e>
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
			file.size = *(uint32_t*)(*addr + offset);
			break;
		}
	}while(i > 0);
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	dcef      	bgt.n	8001e64 <FS_open+0x1c>
 8001e84:	e006      	b.n	8001e94 <FS_open+0x4c>
			file.path = _path;
 8001e86:	4643      	mov	r3, r8
 8001e88:	603b      	str	r3, [r7, #0]
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 8001e8a:	6863      	ldr	r3, [r4, #4]
 8001e8c:	444b      	add	r3, r9
 8001e8e:	607b      	str	r3, [r7, #4]
			file.size = *(uint32_t*)(*addr + offset);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	60bb      	str	r3, [r7, #8]
	return file;
}
 8001e94:	0038      	movs	r0, r7
 8001e96:	b003      	add	sp, #12
 8001e98:	bc0c      	pop	{r2, r3}
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea0 <FS_exists>:
	}
	return -1;
}

BOOL FS_exists(FS_typedef* pFS, const char* path)
{
 8001ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	0007      	movs	r7, r0
 8001ea6:	9101      	str	r1, [sp, #4]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 8001ea8:	6804      	ldr	r4, [r0, #0]
	uint32_t offset = (uint32_t)pFS->addr_base;
 8001eaa:	0025      	movs	r5, r4
	for(i=0; i<pFS->n_files; ++i)
 8001eac:	2600      	movs	r6, #0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	42b3      	cmp	r3, r6
 8001eb2:	d90a      	bls.n	8001eca <FS_exists+0x2a>
	{
		addr++;
 8001eb4:	3404      	adds	r4, #4
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	1959      	adds	r1, r3, r5
 8001eba:	3108      	adds	r1, #8
		if(strcmp(path, _path) == 0)
 8001ebc:	9801      	ldr	r0, [sp, #4]
 8001ebe:	f7fe f923 	bl	8000108 <strcmp>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d004      	beq.n	8001ed0 <FS_exists+0x30>
	for(i=0; i<pFS->n_files; ++i)
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7f1      	b.n	8001eae <FS_exists+0xe>
		{
			return TRUE;
		}
	}
	return FALSE;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	b003      	add	sp, #12
 8001ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return TRUE;
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	e7fb      	b.n	8001ecc <FS_exists+0x2c>

08001ed4 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	0005      	movs	r5, r0
	strcat(pS->URI, "index.html");
 8001ed8:	1d44      	adds	r4, r0, #5
 8001eda:	0020      	movs	r0, r4
 8001edc:	f7fe f91e 	bl	800011c <strlen>
 8001ee0:	1820      	adds	r0, r4, r0
 8001ee2:	220b      	movs	r2, #11
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <onHome+0x20>)
 8001ee6:	f001 f8b5 	bl	8003054 <memcpy>
	HTTPonNotFound(pS);
 8001eea:	0028      	movs	r0, r5
 8001eec:	f000 fbee 	bl	80026cc <HTTPonNotFound>
}
 8001ef0:	bd70      	pop	{r4, r5, r6, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	080032cc 	.word	0x080032cc

08001ef8 <onSwitch>:
/* URI: /switch
 * METHOD: GET
 * Args: A=[0-6]&B=[0-6]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	0004      	movs	r4, r0
	const char *A = getHTTPArg(pS, "A");
 8001efc:	4914      	ldr	r1, [pc, #80]	; (8001f50 <onSwitch+0x58>)
 8001efe:	f000 f9f9 	bl	80022f4 <getHTTPArg>
 8001f02:	0005      	movs	r5, r0
	const char *B = getHTTPArg(pS, "B");
 8001f04:	4913      	ldr	r1, [pc, #76]	; (8001f54 <onSwitch+0x5c>)
 8001f06:	0020      	movs	r0, r4
 8001f08:	f000 f9f4 	bl	80022f4 <getHTTPArg>
 8001f0c:	0006      	movs	r6, r0
	if(A && B)
 8001f0e:	2d00      	cmp	r5, #0
 8001f10:	d00c      	beq.n	8001f2c <onSwitch+0x34>
 8001f12:	2800      	cmp	r0, #0
 8001f14:	d00a      	beq.n	8001f2c <onSwitch+0x34>
	{
		//  TODO: remove stdlib
		uint8_t nA = atou8(A);
 8001f16:	0028      	movs	r0, r5
 8001f18:	f000 fa11 	bl	800233e <atou8>
 8001f1c:	0005      	movs	r5, r0
		uint8_t nB = atou8(B);
 8001f1e:	0030      	movs	r0, r6
 8001f20:	f000 fa0d 	bl	800233e <atou8>
		if(nA <= NUM_ANTENNA && nB<=NUM_ANTENNA)
 8001f24:	2d06      	cmp	r5, #6
 8001f26:	d801      	bhi.n	8001f2c <onSwitch+0x34>
 8001f28:	2806      	cmp	r0, #6
 8001f2a:	d906      	bls.n	8001f3a <onSwitch+0x42>
			switch_Antenna(nA, nB);
			HTTPSendStr(pS, 200, "OK\r\n");
			return;
		}
	}
	HTTPSendStr(pS, 300, "Invalid\r\n");
 8001f2c:	2196      	movs	r1, #150	; 0x96
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <onSwitch+0x60>)
 8001f30:	0049      	lsls	r1, r1, #1
 8001f32:	0020      	movs	r0, r4
 8001f34:	f000 fb22 	bl	800257c <HTTPSendStr>
}
 8001f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch_Antenna(nA, nB);
 8001f3a:	0001      	movs	r1, r0
 8001f3c:	0028      	movs	r0, r5
 8001f3e:	f000 feff 	bl	8002d40 <switch_Antenna>
			HTTPSendStr(pS, 200, "OK\r\n");
 8001f42:	4a06      	ldr	r2, [pc, #24]	; (8001f5c <onSwitch+0x64>)
 8001f44:	21c8      	movs	r1, #200	; 0xc8
 8001f46:	0020      	movs	r0, r4
 8001f48:	f000 fb18 	bl	800257c <HTTPSendStr>
			return;
 8001f4c:	e7f4      	b.n	8001f38 <onSwitch+0x40>
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	080032ec 	.word	0x080032ec
 8001f54:	080032f0 	.word	0x080032f0
 8001f58:	080032fc 	.word	0x080032fc
 8001f5c:	080032f4 	.word	0x080032f4

08001f60 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8001f60:	b510      	push	{r4, lr}
	HTTPSendStr(pS, 200, "Status\r\n");
 8001f62:	4a02      	ldr	r2, [pc, #8]	; (8001f6c <onStatus+0xc>)
 8001f64:	21c8      	movs	r1, #200	; 0xc8
 8001f66:	f000 fb09 	bl	800257c <HTTPSendStr>
}
 8001f6a:	bd10      	pop	{r4, pc}
 8001f6c:	080032e0 	.word	0x080032e0

08001f70 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 8001f70:	b510      	push	{r4, lr}
	HTTPSendStr(pS, 200, "Reset\r\n");
 8001f72:	4a02      	ldr	r2, [pc, #8]	; (8001f7c <onReset+0xc>)
 8001f74:	21c8      	movs	r1, #200	; 0xc8
 8001f76:	f000 fb01 	bl	800257c <HTTPSendStr>
//	DEBUG_LOG("Restart\n");
}
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	080032d8 	.word	0x080032d8

08001f80 <onGetAlloc>:
{
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	0005      	movs	r5, r0
	uint8_t d = get_Antenna();
 8001f84:	f000 ff2c 	bl	8002de0 <get_Antenna>
 8001f88:	0004      	movs	r4, r0
	strcpy(p, "A=");
 8001f8a:	4e0f      	ldr	r6, [pc, #60]	; (8001fc8 <onGetAlloc+0x48>)
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <onGetAlloc+0x4c>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	8033      	strh	r3, [r6, #0]
	*p = (uint8_t)(d & 0xf) + '0'; // "A=%d"
 8001f92:	230f      	movs	r3, #15
 8001f94:	4003      	ands	r3, r0
 8001f96:	3330      	adds	r3, #48	; 0x30
 8001f98:	70b3      	strb	r3, [r6, #2]
	strcpy(p, "&B="); // "A=%d&B="
 8001f9a:	1cf0      	adds	r0, r6, #3
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <onGetAlloc+0x50>)
 8001fa0:	f001 f858 	bl	8003054 <memcpy>
	*p = (uint8_t)(d >> 4) + '0'; // "A=%d&B=%d"
 8001fa4:	0924      	lsrs	r4, r4, #4
 8001fa6:	b2e4      	uxtb	r4, r4
 8001fa8:	3430      	adds	r4, #48	; 0x30
 8001faa:	71b4      	strb	r4, [r6, #6]
	strcpy(p, "\r\n");
 8001fac:	1df0      	adds	r0, r6, #7
 8001fae:	2203      	movs	r2, #3
 8001fb0:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <onGetAlloc+0x54>)
 8001fb2:	f001 f84f 	bl	8003054 <memcpy>
	*p = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	7273      	strb	r3, [r6, #9]
	HTTPSendStr(pS, 200, s_tmp);
 8001fba:	0032      	movs	r2, r6
 8001fbc:	21c8      	movs	r1, #200	; 0xc8
 8001fbe:	0028      	movs	r0, r5
 8001fc0:	f000 fadc 	bl	800257c <HTTPSendStr>
}
 8001fc4:	bd70      	pop	{r4, r5, r6, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	2000045c 	.word	0x2000045c
 8001fcc:	080032c0 	.word	0x080032c0
 8001fd0:	080032c4 	.word	0x080032c4
 8001fd4:	080032c8 	.word	0x080032c8

08001fd8 <resetHTTPParseState>:
	.ready = FALSE}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
	pS->state = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	7003      	strb	r3, [r0, #0]
	pS->argc = 0;
 8001fdc:	2245      	movs	r2, #69	; 0x45
 8001fde:	5483      	strb	r3, [r0, r2]
	pS->connection = CLOSED;
 8001fe0:	7103      	strb	r3, [r0, #4]
	pS->method = HTTP_GET;
 8001fe2:	70c3      	strb	r3, [r0, #3]
	pS->ready = FALSE;
 8001fe4:	32df      	adds	r2, #223	; 0xdf
 8001fe6:	5483      	strb	r3, [r0, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 8001fe8:	3a8c      	subs	r2, #140	; 0x8c
 8001fea:	5483      	strb	r3, [r0, r2]
	pS->len_response_content_remain = 0;
 8001fec:	3284      	adds	r2, #132	; 0x84
 8001fee:	5283      	strh	r3, [r0, r2]
}
 8001ff0:	4770      	bx	lr
	...

08001ff4 <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	0004      	movs	r4, r0
	if(strlen(filename) > 3)
 8001ff8:	f7fe f890 	bl	800011c <strlen>
 8001ffc:	0005      	movs	r5, r0
 8001ffe:	2803      	cmp	r0, #3
 8002000:	d936      	bls.n	8002070 <HTTPGetContentType+0x7c>
	{
		if(ENDSWITH(filename, ".html"))
 8002002:	1f47      	subs	r7, r0, #5
 8002004:	19e7      	adds	r7, r4, r7
 8002006:	4923      	ldr	r1, [pc, #140]	; (8002094 <HTTPGetContentType+0xa0>)
 8002008:	0038      	movs	r0, r7
 800200a:	f7fe f87d 	bl	8000108 <strcmp>
 800200e:	2800      	cmp	r0, #0
 8002010:	d030      	beq.n	8002074 <HTTPGetContentType+0x80>
			return HTTP_CONTENT_TYPE_HTML;
		else if(ENDSWITH(filename, ".htm"))
 8002012:	1f2e      	subs	r6, r5, #4
 8002014:	19a6      	adds	r6, r4, r6
 8002016:	4920      	ldr	r1, [pc, #128]	; (8002098 <HTTPGetContentType+0xa4>)
 8002018:	0030      	movs	r0, r6
 800201a:	f7fe f875 	bl	8000108 <strcmp>
 800201e:	2800      	cmp	r0, #0
 8002020:	d02a      	beq.n	8002078 <HTTPGetContentType+0x84>
			return HTTP_CONTENT_TYPE_HTML;
		else if(ENDSWITH(filename, ".css"))
 8002022:	491e      	ldr	r1, [pc, #120]	; (800209c <HTTPGetContentType+0xa8>)
 8002024:	0030      	movs	r0, r6
 8002026:	f7fe f86f 	bl	8000108 <strcmp>
 800202a:	2800      	cmp	r0, #0
 800202c:	d026      	beq.n	800207c <HTTPGetContentType+0x88>
			return HTTP_CONTENT_TYPE_CSS;
		else if(ENDSWITH(filename, ".js"))
 800202e:	1ee8      	subs	r0, r5, #3
 8002030:	1820      	adds	r0, r4, r0
 8002032:	491b      	ldr	r1, [pc, #108]	; (80020a0 <HTTPGetContentType+0xac>)
 8002034:	f7fe f868 	bl	8000108 <strcmp>
 8002038:	2800      	cmp	r0, #0
 800203a:	d021      	beq.n	8002080 <HTTPGetContentType+0x8c>
			return HTTP_CONTENT_TYPE_JS;
		else if(ENDSWITH(filename, ".png"))
 800203c:	4919      	ldr	r1, [pc, #100]	; (80020a4 <HTTPGetContentType+0xb0>)
 800203e:	0030      	movs	r0, r6
 8002040:	f7fe f862 	bl	8000108 <strcmp>
 8002044:	2800      	cmp	r0, #0
 8002046:	d01d      	beq.n	8002084 <HTTPGetContentType+0x90>
			return HTTP_CONTENT_TYPE_PNG;
		else if(ENDSWITH(filename, ".jpg"))
 8002048:	4917      	ldr	r1, [pc, #92]	; (80020a8 <HTTPGetContentType+0xb4>)
 800204a:	0030      	movs	r0, r6
 800204c:	f7fe f85c 	bl	8000108 <strcmp>
 8002050:	2800      	cmp	r0, #0
 8002052:	d019      	beq.n	8002088 <HTTPGetContentType+0x94>
			return HTTP_CONTENT_TYPE_JPEG;
		else if(ENDSWITH(filename, ".jpeg"))
 8002054:	4915      	ldr	r1, [pc, #84]	; (80020ac <HTTPGetContentType+0xb8>)
 8002056:	0038      	movs	r0, r7
 8002058:	f7fe f856 	bl	8000108 <strcmp>
 800205c:	2800      	cmp	r0, #0
 800205e:	d015      	beq.n	800208c <HTTPGetContentType+0x98>
			return HTTP_CONTENT_TYPE_JPEG;
		else if(ENDSWITH(filename, ".gif"))
 8002060:	4913      	ldr	r1, [pc, #76]	; (80020b0 <HTTPGetContentType+0xbc>)
 8002062:	0030      	movs	r0, r6
 8002064:	f7fe f850 	bl	8000108 <strcmp>
 8002068:	2800      	cmp	r0, #0
 800206a:	d011      	beq.n	8002090 <HTTPGetContentType+0x9c>
			return HTTP_CONTENT_TYPE_GIF;
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 800206c:	4811      	ldr	r0, [pc, #68]	; (80020b4 <HTTPGetContentType+0xc0>)
 800206e:	e000      	b.n	8002072 <HTTPGetContentType+0x7e>
 8002070:	4810      	ldr	r0, [pc, #64]	; (80020b4 <HTTPGetContentType+0xc0>)
}
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return HTTP_CONTENT_TYPE_HTML;
 8002074:	4810      	ldr	r0, [pc, #64]	; (80020b8 <HTTPGetContentType+0xc4>)
 8002076:	e7fc      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_HTML;
 8002078:	480f      	ldr	r0, [pc, #60]	; (80020b8 <HTTPGetContentType+0xc4>)
 800207a:	e7fa      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <HTTPGetContentType+0xc8>)
 800207e:	e7f8      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JS;
 8002080:	480f      	ldr	r0, [pc, #60]	; (80020c0 <HTTPGetContentType+0xcc>)
 8002082:	e7f6      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_PNG;
 8002084:	480f      	ldr	r0, [pc, #60]	; (80020c4 <HTTPGetContentType+0xd0>)
 8002086:	e7f4      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JPEG;
 8002088:	480f      	ldr	r0, [pc, #60]	; (80020c8 <HTTPGetContentType+0xd4>)
 800208a:	e7f2      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JPEG;
 800208c:	480e      	ldr	r0, [pc, #56]	; (80020c8 <HTTPGetContentType+0xd4>)
 800208e:	e7f0      	b.n	8002072 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_GIF;
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <HTTPGetContentType+0xd8>)
 8002092:	e7ee      	b.n	8002072 <HTTPGetContentType+0x7e>
 8002094:	0800332c 	.word	0x0800332c
 8002098:	08003334 	.word	0x08003334
 800209c:	0800333c 	.word	0x0800333c
 80020a0:	08003344 	.word	0x08003344
 80020a4:	08003348 	.word	0x08003348
 80020a8:	08003350 	.word	0x08003350
 80020ac:	08003358 	.word	0x08003358
 80020b0:	08003360 	.word	0x08003360
 80020b4:	08003438 	.word	0x08003438
 80020b8:	08003408 	.word	0x08003408
 80020bc:	080033f0 	.word	0x080033f0
 80020c0:	08003420 	.word	0x08003420
 80020c4:	08003444 	.word	0x08003444
 80020c8:	08003414 	.word	0x08003414
 80020cc:	080033fc 	.word	0x080033fc

080020d0 <strsepstr>:
	}
}
#endif

char* strsepstr(char** stringp, const char* delim)
{
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	0006      	movs	r6, r0
 80020d4:	000d      	movs	r5, r1
	int len_delim = strlen(delim);
 80020d6:	0008      	movs	r0, r1
 80020d8:	f7fe f820 	bl	800011c <strlen>
 80020dc:	0007      	movs	r7, r0
	char* loc_head = *stringp;
 80020de:	6834      	ldr	r4, [r6, #0]
	if(loc_head != NULL)
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d007      	beq.n	80020f4 <strsepstr+0x24>
	{
		char* loc_delim = strstr(loc_head, delim);
 80020e4:	0029      	movs	r1, r5
 80020e6:	0020      	movs	r0, r4
 80020e8:	f001 f843 	bl	8003172 <strstr>
 80020ec:	1e05      	subs	r5, r0, #0
		if(loc_delim != NULL)
 80020ee:	d103      	bne.n	80020f8 <strsepstr+0x28>
			memset(loc_delim, 0, len_delim);
			*stringp = loc_delim + len_delim;
		}
		else
		{
			*stringp = NULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	6033      	str	r3, [r6, #0]
		}
	}
	return loc_head;
}
 80020f4:	0020      	movs	r0, r4
 80020f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memset(loc_delim, 0, len_delim);
 80020f8:	003a      	movs	r2, r7
 80020fa:	2100      	movs	r1, #0
 80020fc:	f000 ffb3 	bl	8003066 <memset>
			*stringp = loc_delim + len_delim;
 8002100:	19ed      	adds	r5, r5, r7
 8002102:	6035      	str	r5, [r6, #0]
 8002104:	e7f6      	b.n	80020f4 <strsepstr+0x24>
	...

08002108 <parse_http>:

BOOL parse_http(HTTPRequestParseState *pS, char* buffer)
{
 8002108:	b530      	push	{r4, r5, lr}
 800210a:	b085      	sub	sp, #20
 800210c:	0005      	movs	r5, r0
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 800210e:	7803      	ldrb	r3, [r0, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d04f      	beq.n	80021b4 <parse_http+0xac>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <parse_http+0x20>
 8002118:	2b03      	cmp	r3, #3
 800211a:	d100      	bne.n	800211e <parse_http+0x16>
 800211c:	e0a8      	b.n	8002270 <parse_http+0x168>
 800211e:	2b04      	cmp	r3, #4
 8002120:	d100      	bne.n	8002124 <parse_http+0x1c>
 8002122:	e0ab      	b.n	800227c <parse_http+0x174>
		}
		pS->state++;
	case 4: // finished
		pS->ready = TRUE;
	}
	return TRUE;
 8002124:	2001      	movs	r0, #1
 8002126:	e0ae      	b.n	8002286 <parse_http+0x17e>
		line_tok_saveptr = buffer;
 8002128:	9103      	str	r1, [sp, #12]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800212a:	4968      	ldr	r1, [pc, #416]	; (80022cc <parse_http+0x1c4>)
 800212c:	a803      	add	r0, sp, #12
 800212e:	f7ff ffcf 	bl	80020d0 <strsepstr>
 8002132:	1e04      	subs	r4, r0, #0
		if(line)
 8002134:	d100      	bne.n	8002138 <parse_http+0x30>
 8002136:	e0c2      	b.n	80022be <parse_http+0x1b6>
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	00d2      	lsls	r2, r2, #3
 800213c:	4964      	ldr	r1, [pc, #400]	; (80022d0 <parse_http+0x1c8>)
 800213e:	f000 fff9 	bl	8003134 <strnstr>
 8002142:	2800      	cmp	r0, #0
 8002144:	d100      	bne.n	8002148 <parse_http+0x40>
 8002146:	e0ba      	b.n	80022be <parse_http+0x1b6>
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 8002148:	aa02      	add	r2, sp, #8
 800214a:	4962      	ldr	r1, [pc, #392]	; (80022d4 <parse_http+0x1cc>)
 800214c:	0020      	movs	r0, r4
 800214e:	f001 f856 	bl	80031fe <strtok_r>
 8002152:	1e04      	subs	r4, r0, #0
			if(tok)
 8002154:	d100      	bne.n	8002158 <parse_http+0x50>
 8002156:	e0b2      	b.n	80022be <parse_http+0x1b6>
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 8002158:	495f      	ldr	r1, [pc, #380]	; (80022d8 <parse_http+0x1d0>)
 800215a:	f7fd ffd5 	bl	8000108 <strcmp>
 800215e:	2800      	cmp	r0, #0
 8002160:	d12d      	bne.n	80021be <parse_http+0xb6>
					pS->method = HTTP_GET;
 8002162:	2300      	movs	r3, #0
 8002164:	70eb      	strb	r3, [r5, #3]
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8002166:	aa02      	add	r2, sp, #8
 8002168:	495a      	ldr	r1, [pc, #360]	; (80022d4 <parse_http+0x1cc>)
 800216a:	2000      	movs	r0, #0
 800216c:	f001 f847 	bl	80031fe <strtok_r>
			if(tok)
 8002170:	2800      	cmp	r0, #0
 8002172:	d100      	bne.n	8002176 <parse_http+0x6e>
 8002174:	e0a3      	b.n	80022be <parse_http+0x1b6>
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 8002176:	1d6c      	adds	r4, r5, #5
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	0001      	movs	r1, r0
 800217c:	0020      	movs	r0, r4
 800217e:	f000 ffc5 	bl	800310c <strncpy>
			char* s_args = strchr(pS->URI, '?');
 8002182:	213f      	movs	r1, #63	; 0x3f
 8002184:	0020      	movs	r0, r4
 8002186:	f000 ff84 	bl	8003092 <strchr>
			if(pS->method == HTTP_GET && s_args != NULL)
 800218a:	78eb      	ldrb	r3, [r5, #3]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <parse_http+0x96>
 8002190:	2800      	cmp	r0, #0
 8002192:	d004      	beq.n	800219e <parse_http+0x96>
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 8002194:	7003      	strb	r3, [r0, #0]
				s_args++; // move to the char next to ?
 8002196:	1c44      	adds	r4, r0, #1
				if(*s_args)
 8002198:	7843      	ldrb	r3, [r0, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d11b      	bne.n	80021d6 <parse_http+0xce>
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 800219e:	aa02      	add	r2, sp, #8
 80021a0:	494c      	ldr	r1, [pc, #304]	; (80022d4 <parse_http+0x1cc>)
 80021a2:	2000      	movs	r0, #0
 80021a4:	f001 f82b 	bl	80031fe <strtok_r>
			if(tok)
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d100      	bne.n	80021ae <parse_http+0xa6>
 80021ac:	e087      	b.n	80022be <parse_http+0x1b6>
			pS->state ++;
 80021ae:	782b      	ldrb	r3, [r5, #0]
 80021b0:	3301      	adds	r3, #1
 80021b2:	702b      	strb	r3, [r5, #0]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80021b4:	4945      	ldr	r1, [pc, #276]	; (80022cc <parse_http+0x1c4>)
 80021b6:	a803      	add	r0, sp, #12
 80021b8:	f7ff ff8a 	bl	80020d0 <strsepstr>
		while(line)
 80021bc:	e031      	b.n	8002222 <parse_http+0x11a>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 80021be:	4947      	ldr	r1, [pc, #284]	; (80022dc <parse_http+0x1d4>)
 80021c0:	0020      	movs	r0, r4
 80021c2:	f7fd ffa1 	bl	8000108 <strcmp>
 80021c6:	2800      	cmp	r0, #0
 80021c8:	d102      	bne.n	80021d0 <parse_http+0xc8>
					pS->method = HTTP_POST;
 80021ca:	2301      	movs	r3, #1
 80021cc:	70eb      	strb	r3, [r5, #3]
 80021ce:	e7ca      	b.n	8002166 <parse_http+0x5e>
					pS->method = HTTP_GET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	70eb      	strb	r3, [r5, #3]
 80021d4:	e7c7      	b.n	8002166 <parse_http+0x5e>
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 80021d6:	aa01      	add	r2, sp, #4
 80021d8:	4941      	ldr	r1, [pc, #260]	; (80022e0 <parse_http+0x1d8>)
 80021da:	0020      	movs	r0, r4
 80021dc:	f001 f80f 	bl	80031fe <strtok_r>
					while(tok_arg)
 80021e0:	e00b      	b.n	80021fa <parse_http+0xf2>
						pS->argv[pS->argc++] = tok_arg;
 80021e2:	2245      	movs	r2, #69	; 0x45
 80021e4:	5cab      	ldrb	r3, [r5, r2]
 80021e6:	1c59      	adds	r1, r3, #1
 80021e8:	54a9      	strb	r1, [r5, r2]
 80021ea:	3312      	adds	r3, #18
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	5158      	str	r0, [r3, r5]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 80021f0:	aa01      	add	r2, sp, #4
 80021f2:	493b      	ldr	r1, [pc, #236]	; (80022e0 <parse_http+0x1d8>)
 80021f4:	2000      	movs	r0, #0
 80021f6:	f001 f802 	bl	80031fe <strtok_r>
					while(tok_arg)
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d1f1      	bne.n	80021e2 <parse_http+0xda>
 80021fe:	e7ce      	b.n	800219e <parse_http+0x96>
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8002200:	aa02      	add	r2, sp, #8
 8002202:	4938      	ldr	r1, [pc, #224]	; (80022e4 <parse_http+0x1dc>)
 8002204:	f000 fffb 	bl	80031fe <strtok_r>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8002208:	2800      	cmp	r0, #0
 800220a:	d058      	beq.n	80022be <parse_http+0x1b6>
					if(strstr(tok, "Keep") != NULL)
 800220c:	4936      	ldr	r1, [pc, #216]	; (80022e8 <parse_http+0x1e0>)
 800220e:	f000 ffb0 	bl	8003172 <strstr>
 8002212:	2800      	cmp	r0, #0
 8002214:	d001      	beq.n	800221a <parse_http+0x112>
						pS->connection = KEEP_ALIVE;
 8002216:	2301      	movs	r3, #1
 8002218:	712b      	strb	r3, [r5, #4]
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800221a:	492c      	ldr	r1, [pc, #176]	; (80022cc <parse_http+0x1c4>)
 800221c:	a803      	add	r0, sp, #12
 800221e:	f7ff ff57 	bl	80020d0 <strsepstr>
		while(line)
 8002222:	2800      	cmp	r0, #0
 8002224:	d021      	beq.n	800226a <parse_http+0x162>
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8002226:	aa02      	add	r2, sp, #8
 8002228:	492e      	ldr	r1, [pc, #184]	; (80022e4 <parse_http+0x1dc>)
 800222a:	f000 ffe8 	bl	80031fe <strtok_r>
 800222e:	1e04      	subs	r4, r0, #0
			if(tok == NULL || *tok == 0)
 8002230:	d01b      	beq.n	800226a <parse_http+0x162>
 8002232:	7803      	ldrb	r3, [r0, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d018      	beq.n	800226a <parse_http+0x162>
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 8002238:	492c      	ldr	r1, [pc, #176]	; (80022ec <parse_http+0x1e4>)
 800223a:	f7fd ff65 	bl	8000108 <strcmp>
 800223e:	2800      	cmp	r0, #0
 8002240:	d0de      	beq.n	8002200 <parse_http+0xf8>
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 8002242:	492b      	ldr	r1, [pc, #172]	; (80022f0 <parse_http+0x1e8>)
 8002244:	0020      	movs	r0, r4
 8002246:	f7fd ff5f 	bl	8000108 <strcmp>
 800224a:	2800      	cmp	r0, #0
 800224c:	d1e5      	bne.n	800221a <parse_http+0x112>
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 800224e:	aa02      	add	r2, sp, #8
 8002250:	4924      	ldr	r1, [pc, #144]	; (80022e4 <parse_http+0x1dc>)
 8002252:	f000 ffd4 	bl	80031fe <strtok_r>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8002256:	2800      	cmp	r0, #0
 8002258:	d031      	beq.n	80022be <parse_http+0x1b6>
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 800225a:	002b      	movs	r3, r5
 800225c:	3358      	adds	r3, #88	; 0x58
 800225e:	2240      	movs	r2, #64	; 0x40
 8002260:	0001      	movs	r1, r0
 8002262:	0018      	movs	r0, r3
 8002264:	f000 ff52 	bl	800310c <strncpy>
 8002268:	e7d7      	b.n	800221a <parse_http+0x112>
		pS->state++;
 800226a:	782b      	ldrb	r3, [r5, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	702b      	strb	r3, [r5, #0]
		if(pS->method == HTTP_POST)
 8002270:	78eb      	ldrb	r3, [r5, #3]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d009      	beq.n	800228a <parse_http+0x182>
		pS->state++;
 8002276:	782b      	ldrb	r3, [r5, #0]
 8002278:	3301      	adds	r3, #1
 800227a:	702b      	strb	r3, [r5, #0]
		pS->ready = TRUE;
 800227c:	2392      	movs	r3, #146	; 0x92
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	2201      	movs	r2, #1
 8002282:	54ea      	strb	r2, [r5, r3]
	return TRUE;
 8002284:	2001      	movs	r0, #1
	HTTP_PARSE_ERROR:
		pS->state = 0;
		pS->ready = FALSE;
		return FALSE;
}
 8002286:	b005      	add	sp, #20
 8002288:	bd30      	pop	{r4, r5, pc}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800228a:	4910      	ldr	r1, [pc, #64]	; (80022cc <parse_http+0x1c4>)
 800228c:	a803      	add	r0, sp, #12
 800228e:	f7ff ff1f 	bl	80020d0 <strsepstr>
			if(line)
 8002292:	2800      	cmp	r0, #0
 8002294:	d0ef      	beq.n	8002276 <parse_http+0x16e>
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 8002296:	aa01      	add	r2, sp, #4
 8002298:	4911      	ldr	r1, [pc, #68]	; (80022e0 <parse_http+0x1d8>)
 800229a:	f000 ffb0 	bl	80031fe <strtok_r>
				while(tok_arg)
 800229e:	e00b      	b.n	80022b8 <parse_http+0x1b0>
					pS->argv[pS->argc++] = tok_arg;
 80022a0:	2245      	movs	r2, #69	; 0x45
 80022a2:	5cab      	ldrb	r3, [r5, r2]
 80022a4:	1c59      	adds	r1, r3, #1
 80022a6:	54a9      	strb	r1, [r5, r2]
 80022a8:	3312      	adds	r3, #18
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	5158      	str	r0, [r3, r5]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 80022ae:	aa01      	add	r2, sp, #4
 80022b0:	490b      	ldr	r1, [pc, #44]	; (80022e0 <parse_http+0x1d8>)
 80022b2:	2000      	movs	r0, #0
 80022b4:	f000 ffa3 	bl	80031fe <strtok_r>
				while(tok_arg)
 80022b8:	2800      	cmp	r0, #0
 80022ba:	d1f1      	bne.n	80022a0 <parse_http+0x198>
 80022bc:	e7db      	b.n	8002276 <parse_http+0x16e>
		pS->state = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	702b      	strb	r3, [r5, #0]
		pS->ready = FALSE;
 80022c2:	2292      	movs	r2, #146	; 0x92
 80022c4:	0052      	lsls	r2, r2, #1
 80022c6:	54ab      	strb	r3, [r5, r2]
		return FALSE;
 80022c8:	2000      	movs	r0, #0
 80022ca:	e7dc      	b.n	8002286 <parse_http+0x17e>
 80022cc:	08003474 	.word	0x08003474
 80022d0:	08003484 	.word	0x08003484
 80022d4:	08003450 	.word	0x08003450
 80022d8:	08003468 	.word	0x08003468
 80022dc:	0800346c 	.word	0x0800346c
 80022e0:	0800348c 	.word	0x0800348c
 80022e4:	080033ec 	.word	0x080033ec
 80022e8:	08003490 	.word	0x08003490
 80022ec:	08003454 	.word	0x08003454
 80022f0:	08003460 	.word	0x08003460

080022f4 <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(pS->argc == 0)
 80022f6:	2345      	movs	r3, #69	; 0x45
 80022f8:	5cc7      	ldrb	r7, [r0, r3]
 80022fa:	2f00      	cmp	r7, #0
 80022fc:	d01d      	beq.n	800233a <getHTTPArg+0x46>
		return NULL;
	int i;
	const char* cur_s; 
	const char* cur_name = name;
	for(i=0; i<pS->argc; ++i)
 80022fe:	2600      	movs	r6, #0
 8002300:	e005      	b.n	800230e <getHTTPArg+0x1a>
				break;
			}
			cur_name++;
			cur_s++;
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	2a00      	cmp	r2, #0
 8002306:	d101      	bne.n	800230c <getHTTPArg+0x18>
 8002308:	2b3d      	cmp	r3, #61	; 0x3d
 800230a:	d012      	beq.n	8002332 <getHTTPArg+0x3e>
	for(i=0; i<pS->argc; ++i)
 800230c:	3601      	adds	r6, #1
 800230e:	42b7      	cmp	r7, r6
 8002310:	dd11      	ble.n	8002336 <getHTTPArg+0x42>
		cur_s = pS->argv[i];
 8002312:	0033      	movs	r3, r6
 8002314:	3312      	adds	r3, #18
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	581c      	ldr	r4, [r3, r0]
		while(*cur_s && *cur_name)
 800231a:	000a      	movs	r2, r1
 800231c:	7823      	ldrb	r3, [r4, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ef      	beq.n	8002302 <getHTTPArg+0xe>
 8002322:	7815      	ldrb	r5, [r2, #0]
 8002324:	2d00      	cmp	r5, #0
 8002326:	d0ec      	beq.n	8002302 <getHTTPArg+0xe>
			if(*cur_s != *cur_name)
 8002328:	42ab      	cmp	r3, r5
 800232a:	d1ea      	bne.n	8002302 <getHTTPArg+0xe>
			cur_name++;
 800232c:	3201      	adds	r2, #1
			cur_s++;
 800232e:	3401      	adds	r4, #1
 8002330:	e7f4      	b.n	800231c <getHTTPArg+0x28>
		{
			return cur_s+1;
 8002332:	1c60      	adds	r0, r4, #1
 8002334:	e000      	b.n	8002338 <getHTTPArg+0x44>
		}
		cur_name = name;
	}
	return NULL;
 8002336:	2000      	movs	r0, #0
}
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
 800233a:	2000      	movs	r0, #0
 800233c:	e7fc      	b.n	8002338 <getHTTPArg+0x44>

0800233e <atou8>:
uint8_t atou8(const char* s)
{
 800233e:	b510      	push	{r4, lr}
 8002340:	0004      	movs	r4, r0
	uint8_t i;
	uint8_t sum = 0;
 8002342:	2000      	movs	r0, #0
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8002344:	2200      	movs	r2, #0
 8002346:	e00a      	b.n	800235e <atou8+0x20>
	{
		sum *= 10;
 8002348:	0081      	lsls	r1, r0, #2
 800234a:	1840      	adds	r0, r0, r1
 800234c:	0041      	lsls	r1, r0, #1
 800234e:	b2c9      	uxtb	r1, r1
		sum += *s - '0';
 8002350:	185b      	adds	r3, r3, r1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	3b30      	subs	r3, #48	; 0x30
 8002356:	b2d8      	uxtb	r0, r3
		s++;
 8002358:	3401      	adds	r4, #1
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 800235a:	3201      	adds	r2, #1
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	2a02      	cmp	r2, #2
 8002360:	d802      	bhi.n	8002368 <atou8+0x2a>
 8002362:	7823      	ldrb	r3, [r4, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1ef      	bne.n	8002348 <atou8+0xa>
	}
	return sum;
}
 8002368:	bd10      	pop	{r4, pc}

0800236a <u16toa>:
uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 800236a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236c:	0004      	movs	r4, r0
 800236e:	000d      	movs	r5, r1
	uint8_t i = 0, j;
 8002370:	2700      	movs	r7, #0
	while(d)
 8002372:	e00e      	b.n	8002392 <u16toa+0x28>
	{
		buf[i++] = (d % 10) + '0';
 8002374:	1c7e      	adds	r6, r7, #1
 8002376:	b2f6      	uxtb	r6, r6
 8002378:	19ef      	adds	r7, r5, r7
 800237a:	210a      	movs	r1, #10
 800237c:	0020      	movs	r0, r4
 800237e:	f7fd ff5b 	bl	8000238 <__aeabi_uidivmod>
 8002382:	3130      	adds	r1, #48	; 0x30
 8002384:	7039      	strb	r1, [r7, #0]
		d /= 10;
 8002386:	210a      	movs	r1, #10
 8002388:	0020      	movs	r0, r4
 800238a:	f7fd fecf 	bl	800012c <__udivsi3>
 800238e:	b284      	uxth	r4, r0
		buf[i++] = (d % 10) + '0';
 8002390:	0037      	movs	r7, r6
	while(d)
 8002392:	2c00      	cmp	r4, #0
 8002394:	d1ee      	bne.n	8002374 <u16toa+0xa>
	}
	buf[i] = 0;
 8002396:	19eb      	adds	r3, r5, r7
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 800239c:	2300      	movs	r3, #0
 800239e:	e009      	b.n	80023b4 <u16toa+0x4a>
	{
		char tmp;
		tmp = buf[j];
 80023a0:	18e9      	adds	r1, r5, r3
 80023a2:	780c      	ldrb	r4, [r1, #0]
		buf[j] = buf[i-j-1];
 80023a4:	1afa      	subs	r2, r7, r3
 80023a6:	3a01      	subs	r2, #1
 80023a8:	18aa      	adds	r2, r5, r2
 80023aa:	7816      	ldrb	r6, [r2, #0]
 80023ac:	700e      	strb	r6, [r1, #0]
		buf[i-j-1] = tmp; // swap
 80023ae:	7014      	strb	r4, [r2, #0]
	for(j = 0; j < i/2; ++j)
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	087a      	lsrs	r2, r7, #1
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d8f2      	bhi.n	80023a0 <u16toa+0x36>
	}
	return i;
}
 80023ba:	0038      	movs	r0, r7
 80023bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023c0 <HTTPSendFile>:
{
 80023c0:	b082      	sub	sp, #8
 80023c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c4:	46ce      	mov	lr, r9
 80023c6:	b500      	push	{lr}
 80023c8:	b08a      	sub	sp, #40	; 0x28
 80023ca:	0006      	movs	r6, r0
 80023cc:	000c      	movs	r4, r1
 80023ce:	0015      	movs	r5, r2
 80023d0:	9210      	str	r2, [sp, #64]	; 0x40
 80023d2:	9311      	str	r3, [sp, #68]	; 0x44
	unsigned char* buf = pS->response_header;
 80023d4:	0007      	movs	r7, r0
 80023d6:	379c      	adds	r7, #156	; 0x9c
	if(ENDSWITH(file.path, ".gz"))
 80023d8:	0010      	movs	r0, r2
 80023da:	f7fd fe9f 	bl	800011c <strlen>
 80023de:	3803      	subs	r0, #3
 80023e0:	1828      	adds	r0, r5, r0
 80023e2:	495c      	ldr	r1, [pc, #368]	; (8002554 <HTTPSendFile+0x194>)
 80023e4:	f7fd fe90 	bl	8000108 <strcmp>
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d100      	bne.n	80023ee <HTTPSendFile+0x2e>
 80023ec:	e08c      	b.n	8002508 <HTTPSendFile+0x148>
		content_type = HTTPGetContentType(file.path);
 80023ee:	0028      	movs	r0, r5
 80023f0:	f7ff fe00 	bl	8001ff4 <HTTPGetContentType>
 80023f4:	9001      	str	r0, [sp, #4]
	BOOL is_gzip = FALSE;
 80023f6:	2500      	movs	r5, #0
	*buf = 0; // clear buffer
 80023f8:	239c      	movs	r3, #156	; 0x9c
 80023fa:	2200      	movs	r2, #0
 80023fc:	54f2      	strb	r2, [r6, r3]
	strcat(buf, HTTP_STR_VERSION);
 80023fe:	0038      	movs	r0, r7
 8002400:	f7fd fe8c 	bl	800011c <strlen>
 8002404:	1838      	adds	r0, r7, r0
 8002406:	2209      	movs	r2, #9
 8002408:	4953      	ldr	r1, [pc, #332]	; (8002558 <HTTPSendFile+0x198>)
 800240a:	f000 fe23 	bl	8003054 <memcpy>
	*buf = ' '; // HTTP/1.1_
 800240e:	23a4      	movs	r3, #164	; 0xa4
 8002410:	2220      	movs	r2, #32
 8002412:	54f2      	strb	r2, [r6, r3]
	buf += u16toa(code, buf);
 8002414:	b2a0      	uxth	r0, r4
 8002416:	0034      	movs	r4, r6
 8002418:	34a5      	adds	r4, #165	; 0xa5
 800241a:	0021      	movs	r1, r4
 800241c:	f7ff ffa5 	bl	800236a <u16toa>
 8002420:	1824      	adds	r4, r4, r0
	strcat(buf, " OK\r\n");
 8002422:	0020      	movs	r0, r4
 8002424:	f7fd fe7a 	bl	800011c <strlen>
 8002428:	1820      	adds	r0, r4, r0
 800242a:	2206      	movs	r2, #6
 800242c:	494b      	ldr	r1, [pc, #300]	; (800255c <HTTPSendFile+0x19c>)
 800242e:	f000 fe11 	bl	8003054 <memcpy>
	buf += 5;	// 200 OK\r\n
 8002432:	1d63      	adds	r3, r4, #5
 8002434:	4699      	mov	r9, r3
	strcat(buf, "Connection: ");
 8002436:	0018      	movs	r0, r3
 8002438:	f7fd fe70 	bl	800011c <strlen>
 800243c:	4448      	add	r0, r9
 800243e:	220d      	movs	r2, #13
 8002440:	4947      	ldr	r1, [pc, #284]	; (8002560 <HTTPSendFile+0x1a0>)
 8002442:	f000 fe07 	bl	8003054 <memcpy>
	buf += 12;
 8002446:	2311      	movs	r3, #17
 8002448:	4699      	mov	r9, r3
 800244a:	44a1      	add	r9, r4
	if(pS->connection == KEEP_ALIVE)
 800244c:	7933      	ldrb	r3, [r6, #4]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d06b      	beq.n	800252a <HTTPSendFile+0x16a>
		strcat(buf, "Closed\r\n");
 8002452:	4648      	mov	r0, r9
 8002454:	f7fd fe62 	bl	800011c <strlen>
 8002458:	4448      	add	r0, r9
 800245a:	2209      	movs	r2, #9
 800245c:	4941      	ldr	r1, [pc, #260]	; (8002564 <HTTPSendFile+0x1a4>)
 800245e:	f000 fdf9 	bl	8003054 <memcpy>
		buf += 8;
 8002462:	3419      	adds	r4, #25
	if(is_gzip)
 8002464:	2d00      	cmp	r5, #0
 8002466:	d16a      	bne.n	800253e <HTTPSendFile+0x17e>
	strcat(buf, "Content-Type: ");
 8002468:	0020      	movs	r0, r4
 800246a:	f7fd fe57 	bl	800011c <strlen>
 800246e:	1820      	adds	r0, r4, r0
 8002470:	220f      	movs	r2, #15
 8002472:	493d      	ldr	r1, [pc, #244]	; (8002568 <HTTPSendFile+0x1a8>)
 8002474:	f000 fdee 	bl	8003054 <memcpy>
	buf += 14;
 8002478:	340e      	adds	r4, #14
	strcat(buf, content_type);
 800247a:	9d01      	ldr	r5, [sp, #4]
 800247c:	0029      	movs	r1, r5
 800247e:	0020      	movs	r0, r4
 8002480:	f000 fdf9 	bl	8003076 <strcat>
	buf += strlen(content_type);
 8002484:	0028      	movs	r0, r5
 8002486:	f7fd fe49 	bl	800011c <strlen>
 800248a:	1824      	adds	r4, r4, r0
	strcat(buf, "\r\n");
 800248c:	0020      	movs	r0, r4
 800248e:	f7fd fe45 	bl	800011c <strlen>
 8002492:	1820      	adds	r0, r4, r0
 8002494:	2203      	movs	r2, #3
 8002496:	4935      	ldr	r1, [pc, #212]	; (800256c <HTTPSendFile+0x1ac>)
 8002498:	f000 fddc 	bl	8003054 <memcpy>
	buf += 2;
 800249c:	1ca5      	adds	r5, r4, #2
	strcat(buf, "Content-Length: ");
 800249e:	0028      	movs	r0, r5
 80024a0:	f7fd fe3c 	bl	800011c <strlen>
 80024a4:	1828      	adds	r0, r5, r0
 80024a6:	2211      	movs	r2, #17
 80024a8:	4931      	ldr	r1, [pc, #196]	; (8002570 <HTTPSendFile+0x1b0>)
 80024aa:	f000 fdd3 	bl	8003054 <memcpy>
	buf += 16;
 80024ae:	3412      	adds	r4, #18
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 80024b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80024b2:	b29d      	uxth	r5, r3
 80024b4:	0021      	movs	r1, r4
 80024b6:	0028      	movs	r0, r5
 80024b8:	f7ff ff57 	bl	800236a <u16toa>
 80024bc:	1824      	adds	r4, r4, r0
	strcat(buf, HTTP_LINE_DELIM);
 80024be:	0020      	movs	r0, r4
 80024c0:	f7fd fe2c 	bl	800011c <strlen>
 80024c4:	1820      	adds	r0, r4, r0
 80024c6:	2203      	movs	r2, #3
 80024c8:	4928      	ldr	r1, [pc, #160]	; (800256c <HTTPSendFile+0x1ac>)
 80024ca:	f000 fdc3 	bl	8003054 <memcpy>
	buf += 2;
 80024ce:	3402      	adds	r4, #2
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 80024d0:	0020      	movs	r0, r4
 80024d2:	f7fd fe23 	bl	800011c <strlen>
 80024d6:	1820      	adds	r0, r4, r0
 80024d8:	2203      	movs	r2, #3
 80024da:	4924      	ldr	r1, [pc, #144]	; (800256c <HTTPSendFile+0x1ac>)
 80024dc:	f000 fdba 	bl	8003054 <memcpy>
	pS->len_response_header = strlen(pS->response_header);
 80024e0:	0038      	movs	r0, r7
 80024e2:	f7fd fe1b 	bl	800011c <strlen>
 80024e6:	239a      	movs	r3, #154	; 0x9a
 80024e8:	52f0      	strh	r0, [r6, r3]
	pS->len_response_content_remain = (uint16_t)file.size;
 80024ea:	3382      	adds	r3, #130	; 0x82
 80024ec:	52f5      	strh	r5, [r6, r3]
	pS->response_content = file.p_content;
 80024ee:	3304      	adds	r3, #4
 80024f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80024f2:	50f2      	str	r2, [r6, r3]
	pS->response_stage = RESPONSE_PREPARED;
 80024f4:	3b88      	subs	r3, #136	; 0x88
 80024f6:	2201      	movs	r2, #1
 80024f8:	54f2      	strb	r2, [r6, r3]
}
 80024fa:	b00a      	add	sp, #40	; 0x28
 80024fc:	bc04      	pop	{r2}
 80024fe:	4691      	mov	r9, r2
 8002500:	bcf0      	pop	{r4, r5, r6, r7}
 8002502:	bc08      	pop	{r3}
 8002504:	b002      	add	sp, #8
 8002506:	4718      	bx	r3
		strcpy(s_tmp, file.path);
 8002508:	0029      	movs	r1, r5
 800250a:	a802      	add	r0, sp, #8
 800250c:	f000 fdcf 	bl	80030ae <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 8002510:	a802      	add	r0, sp, #8
 8002512:	f7fd fe03 	bl	800011c <strlen>
 8002516:	3803      	subs	r0, #3
 8002518:	2300      	movs	r3, #0
 800251a:	aa02      	add	r2, sp, #8
 800251c:	5413      	strb	r3, [r2, r0]
		content_type = HTTPGetContentType(s_tmp);
 800251e:	0010      	movs	r0, r2
 8002520:	f7ff fd68 	bl	8001ff4 <HTTPGetContentType>
 8002524:	9001      	str	r0, [sp, #4]
		is_gzip = TRUE;
 8002526:	2501      	movs	r5, #1
 8002528:	e766      	b.n	80023f8 <HTTPSendFile+0x38>
		strcat(buf, "Keep-Alive\r\n");
 800252a:	4648      	mov	r0, r9
 800252c:	f7fd fdf6 	bl	800011c <strlen>
 8002530:	4448      	add	r0, r9
 8002532:	220d      	movs	r2, #13
 8002534:	490f      	ldr	r1, [pc, #60]	; (8002574 <HTTPSendFile+0x1b4>)
 8002536:	f000 fd8d 	bl	8003054 <memcpy>
		buf += 12;
 800253a:	341d      	adds	r4, #29
 800253c:	e792      	b.n	8002464 <HTTPSendFile+0xa4>
		strcat(buf, "Content-Encoding: gzip\r\n");
 800253e:	0020      	movs	r0, r4
 8002540:	f7fd fdec 	bl	800011c <strlen>
 8002544:	1820      	adds	r0, r4, r0
 8002546:	2219      	movs	r2, #25
 8002548:	490b      	ldr	r1, [pc, #44]	; (8002578 <HTTPSendFile+0x1b8>)
 800254a:	f000 fd83 	bl	8003054 <memcpy>
		buf += 24;
 800254e:	3418      	adds	r4, #24
 8002550:	e78a      	b.n	8002468 <HTTPSendFile+0xa8>
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	08003368 	.word	0x08003368
 8002558:	080033e0 	.word	0x080033e0
 800255c:	0800336c 	.word	0x0800336c
 8002560:	08003374 	.word	0x08003374
 8002564:	08003394 	.word	0x08003394
 8002568:	080033bc 	.word	0x080033bc
 800256c:	080032c8 	.word	0x080032c8
 8002570:	080033cc 	.word	0x080033cc
 8002574:	08003384 	.word	0x08003384
 8002578:	080033a0 	.word	0x080033a0

0800257c <HTTPSendStr>:
{
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	b083      	sub	sp, #12
 8002580:	0007      	movs	r7, r0
 8002582:	000e      	movs	r6, r1
 8002584:	9201      	str	r2, [sp, #4]
	unsigned char* buf = pS->response_header;
 8002586:	0005      	movs	r5, r0
 8002588:	359c      	adds	r5, #156	; 0x9c
	*buf = 0; // clear buffer
 800258a:	239c      	movs	r3, #156	; 0x9c
 800258c:	2200      	movs	r2, #0
 800258e:	54c2      	strb	r2, [r0, r3]
	strcat(buf, HTTP_STR_VERSION);
 8002590:	0028      	movs	r0, r5
 8002592:	f7fd fdc3 	bl	800011c <strlen>
 8002596:	1828      	adds	r0, r5, r0
 8002598:	2209      	movs	r2, #9
 800259a:	4944      	ldr	r1, [pc, #272]	; (80026ac <HTTPSendStr+0x130>)
 800259c:	f000 fd5a 	bl	8003054 <memcpy>
	*buf = ' '; // HTTP/1.1_
 80025a0:	23a4      	movs	r3, #164	; 0xa4
 80025a2:	2220      	movs	r2, #32
 80025a4:	54fa      	strb	r2, [r7, r3]
	buf++;
 80025a6:	003c      	movs	r4, r7
 80025a8:	34a5      	adds	r4, #165	; 0xa5
	buf += u16toa(code, buf);
 80025aa:	b2b0      	uxth	r0, r6
 80025ac:	0021      	movs	r1, r4
 80025ae:	f7ff fedc 	bl	800236a <u16toa>
 80025b2:	1824      	adds	r4, r4, r0
	strcat(buf, " OK\r\n");
 80025b4:	0020      	movs	r0, r4
 80025b6:	f7fd fdb1 	bl	800011c <strlen>
 80025ba:	1820      	adds	r0, r4, r0
 80025bc:	2206      	movs	r2, #6
 80025be:	493c      	ldr	r1, [pc, #240]	; (80026b0 <HTTPSendStr+0x134>)
 80025c0:	f000 fd48 	bl	8003054 <memcpy>
	buf += 5;	// 200 OK\r\n
 80025c4:	1d66      	adds	r6, r4, #5
	strcat(buf, "Connection: ");
 80025c6:	0030      	movs	r0, r6
 80025c8:	f7fd fda8 	bl	800011c <strlen>
 80025cc:	1830      	adds	r0, r6, r0
 80025ce:	220d      	movs	r2, #13
 80025d0:	4938      	ldr	r1, [pc, #224]	; (80026b4 <HTTPSendStr+0x138>)
 80025d2:	f000 fd3f 	bl	8003054 <memcpy>
	buf += 12;
 80025d6:	360c      	adds	r6, #12
	if(pS->connection == KEEP_ALIVE)
 80025d8:	793b      	ldrb	r3, [r7, #4]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d05b      	beq.n	8002696 <HTTPSendStr+0x11a>
		strcat(buf, "Closed\r\n");
 80025de:	0030      	movs	r0, r6
 80025e0:	f7fd fd9c 	bl	800011c <strlen>
 80025e4:	1830      	adds	r0, r6, r0
 80025e6:	2209      	movs	r2, #9
 80025e8:	4933      	ldr	r1, [pc, #204]	; (80026b8 <HTTPSendStr+0x13c>)
 80025ea:	f000 fd33 	bl	8003054 <memcpy>
		buf += 8;
 80025ee:	3419      	adds	r4, #25
	const char* content_type = HTTPGetContentType(pS->URI);
 80025f0:	1d78      	adds	r0, r7, #5
 80025f2:	f7ff fcff 	bl	8001ff4 <HTTPGetContentType>
 80025f6:	0006      	movs	r6, r0
	strcat(buf, "Content-Type: ");
 80025f8:	0020      	movs	r0, r4
 80025fa:	f7fd fd8f 	bl	800011c <strlen>
 80025fe:	1820      	adds	r0, r4, r0
 8002600:	220f      	movs	r2, #15
 8002602:	492e      	ldr	r1, [pc, #184]	; (80026bc <HTTPSendStr+0x140>)
 8002604:	f000 fd26 	bl	8003054 <memcpy>
	buf += 14;
 8002608:	340e      	adds	r4, #14
	strcat(buf, content_type);
 800260a:	0031      	movs	r1, r6
 800260c:	0020      	movs	r0, r4
 800260e:	f000 fd32 	bl	8003076 <strcat>
	buf += strlen(content_type);
 8002612:	0030      	movs	r0, r6
 8002614:	f7fd fd82 	bl	800011c <strlen>
 8002618:	1824      	adds	r4, r4, r0
	strcat(buf, "\r\n");
 800261a:	0020      	movs	r0, r4
 800261c:	f7fd fd7e 	bl	800011c <strlen>
 8002620:	1820      	adds	r0, r4, r0
 8002622:	2203      	movs	r2, #3
 8002624:	4926      	ldr	r1, [pc, #152]	; (80026c0 <HTTPSendStr+0x144>)
 8002626:	f000 fd15 	bl	8003054 <memcpy>
	buf += 2;
 800262a:	1ca6      	adds	r6, r4, #2
	strcat(buf, "Content-Length: ");
 800262c:	0030      	movs	r0, r6
 800262e:	f7fd fd75 	bl	800011c <strlen>
 8002632:	1830      	adds	r0, r6, r0
 8002634:	2211      	movs	r2, #17
 8002636:	4923      	ldr	r1, [pc, #140]	; (80026c4 <HTTPSendStr+0x148>)
 8002638:	f000 fd0c 	bl	8003054 <memcpy>
	buf += 16;
 800263c:	3412      	adds	r4, #18
	uint16_t len_content = strlen(content);
 800263e:	9e01      	ldr	r6, [sp, #4]
 8002640:	0030      	movs	r0, r6
 8002642:	f7fd fd6b 	bl	800011c <strlen>
 8002646:	b280      	uxth	r0, r0
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8002648:	0021      	movs	r1, r4
 800264a:	f7ff fe8e 	bl	800236a <u16toa>
 800264e:	1824      	adds	r4, r4, r0
	strcat(buf, HTTP_LINE_DELIM);
 8002650:	0020      	movs	r0, r4
 8002652:	f7fd fd63 	bl	800011c <strlen>
 8002656:	1820      	adds	r0, r4, r0
 8002658:	2203      	movs	r2, #3
 800265a:	4919      	ldr	r1, [pc, #100]	; (80026c0 <HTTPSendStr+0x144>)
 800265c:	f000 fcfa 	bl	8003054 <memcpy>
	buf += 2;
 8002660:	3402      	adds	r4, #2
	strcat(buf, HTTP_LINE_DELIM);
 8002662:	0020      	movs	r0, r4
 8002664:	f7fd fd5a 	bl	800011c <strlen>
 8002668:	1820      	adds	r0, r4, r0
 800266a:	2203      	movs	r2, #3
 800266c:	4914      	ldr	r1, [pc, #80]	; (80026c0 <HTTPSendStr+0x144>)
 800266e:	f000 fcf1 	bl	8003054 <memcpy>
	pS->len_response_header = strlen(pS->response_header);
 8002672:	0028      	movs	r0, r5
 8002674:	f7fd fd52 	bl	800011c <strlen>
 8002678:	239a      	movs	r3, #154	; 0x9a
 800267a:	52f8      	strh	r0, [r7, r3]
	pS->len_response_content_remain = strlen(content);
 800267c:	0030      	movs	r0, r6
 800267e:	f7fd fd4d 	bl	800011c <strlen>
 8002682:	238e      	movs	r3, #142	; 0x8e
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	52f8      	strh	r0, [r7, r3]
	pS->response_content = content;
 8002688:	3304      	adds	r3, #4
 800268a:	50fe      	str	r6, [r7, r3]
	pS->response_stage = RESPONSE_PREPARED;
 800268c:	3b88      	subs	r3, #136	; 0x88
 800268e:	2201      	movs	r2, #1
 8002690:	54fa      	strb	r2, [r7, r3]
}
 8002692:	b003      	add	sp, #12
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(buf, "Keep-Alive\r\n");
 8002696:	0030      	movs	r0, r6
 8002698:	f7fd fd40 	bl	800011c <strlen>
 800269c:	1830      	adds	r0, r6, r0
 800269e:	220d      	movs	r2, #13
 80026a0:	4909      	ldr	r1, [pc, #36]	; (80026c8 <HTTPSendStr+0x14c>)
 80026a2:	f000 fcd7 	bl	8003054 <memcpy>
		buf += 12;
 80026a6:	341d      	adds	r4, #29
 80026a8:	e7a2      	b.n	80025f0 <HTTPSendStr+0x74>
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	080033e0 	.word	0x080033e0
 80026b0:	0800336c 	.word	0x0800336c
 80026b4:	08003374 	.word	0x08003374
 80026b8:	08003394 	.word	0x08003394
 80026bc:	080033bc 	.word	0x080033bc
 80026c0:	080032c8 	.word	0x080032c8
 80026c4:	080033cc 	.word	0x080033cc
 80026c8:	08003384 	.word	0x08003384

080026cc <HTTPonNotFound>:
{
 80026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ce:	b09f      	sub	sp, #124	; 0x7c
 80026d0:	0006      	movs	r6, r0
	if(FS_exists(&FS, pS->URI))
 80026d2:	1d45      	adds	r5, r0, #5
 80026d4:	0029      	movs	r1, r5
 80026d6:	4830      	ldr	r0, [pc, #192]	; (8002798 <HTTPonNotFound+0xcc>)
 80026d8:	f7ff fbe2 	bl	8001ea0 <FS_exists>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d016      	beq.n	800270e <HTTPonNotFound+0x42>
		FSfile_typedef file = FS_open(&FS, pS->URI);
 80026e0:	002a      	movs	r2, r5
 80026e2:	492d      	ldr	r1, [pc, #180]	; (8002798 <HTTPonNotFound+0xcc>)
 80026e4:	a804      	add	r0, sp, #16
 80026e6:	f7ff fbaf 	bl	8001e48 <FS_open>
		if(file.path)
 80026ea:	9b04      	ldr	r3, [sp, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d022      	beq.n	8002736 <HTTPonNotFound+0x6a>
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 80026f0:	002a      	movs	r2, r5
 80026f2:	4929      	ldr	r1, [pc, #164]	; (8002798 <HTTPonNotFound+0xcc>)
 80026f4:	a818      	add	r0, sp, #96	; 0x60
 80026f6:	f7ff fba7 	bl	8001e48 <FS_open>
 80026fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80026fc:	9303      	str	r3, [sp, #12]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002702:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002704:	21c8      	movs	r1, #200	; 0xc8
 8002706:	0030      	movs	r0, r6
 8002708:	f7ff fe5a 	bl	80023c0 <HTTPSendFile>
 800270c:	e02b      	b.n	8002766 <HTTPonNotFound+0x9a>
		strcpy(s_tmp, pS->URI);
 800270e:	0029      	movs	r1, r5
 8002710:	a807      	add	r0, sp, #28
 8002712:	f000 fccc 	bl	80030ae <strcpy>
		strcat(s_tmp, ".gz");
 8002716:	a807      	add	r0, sp, #28
 8002718:	f7fd fd00 	bl	800011c <strlen>
 800271c:	ab07      	add	r3, sp, #28
 800271e:	469c      	mov	ip, r3
 8002720:	4460      	add	r0, ip
 8002722:	2204      	movs	r2, #4
 8002724:	491d      	ldr	r1, [pc, #116]	; (800279c <HTTPonNotFound+0xd0>)
 8002726:	f000 fc95 	bl	8003054 <memcpy>
		if(FS_exists(&FS, s_tmp))
 800272a:	a907      	add	r1, sp, #28
 800272c:	481a      	ldr	r0, [pc, #104]	; (8002798 <HTTPonNotFound+0xcc>)
 800272e:	f7ff fbb7 	bl	8001ea0 <FS_exists>
 8002732:	2800      	cmp	r0, #0
 8002734:	d119      	bne.n	800276a <HTTPonNotFound+0x9e>
	strcpy(s_notfound, "Not Found: ");
 8002736:	4c1a      	ldr	r4, [pc, #104]	; (80027a0 <HTTPonNotFound+0xd4>)
 8002738:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <HTTPonNotFound+0xd8>)
 800273a:	0022      	movs	r2, r4
 800273c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800273e:	c283      	stmia	r2!, {r0, r1, r7}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	0029      	movs	r1, r5
 8002744:	0020      	movs	r0, r4
 8002746:	f000 fcba 	bl	80030be <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 800274a:	0020      	movs	r0, r4
 800274c:	f7fd fce6 	bl	800011c <strlen>
 8002750:	1820      	adds	r0, r4, r0
 8002752:	2203      	movs	r2, #3
 8002754:	4914      	ldr	r1, [pc, #80]	; (80027a8 <HTTPonNotFound+0xdc>)
 8002756:	f000 fc7d 	bl	8003054 <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 800275a:	21ca      	movs	r1, #202	; 0xca
 800275c:	0022      	movs	r2, r4
 800275e:	0049      	lsls	r1, r1, #1
 8002760:	0030      	movs	r0, r6
 8002762:	f7ff ff0b 	bl	800257c <HTTPSendStr>
}
 8002766:	b01f      	add	sp, #124	; 0x7c
 8002768:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FSfile_typedef file = FS_open(&FS, s_tmp);
 800276a:	aa07      	add	r2, sp, #28
 800276c:	490a      	ldr	r1, [pc, #40]	; (8002798 <HTTPonNotFound+0xcc>)
 800276e:	a804      	add	r0, sp, #16
 8002770:	f7ff fb6a 	bl	8001e48 <FS_open>
			if(file.path)
 8002774:	9b04      	ldr	r3, [sp, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0dd      	beq.n	8002736 <HTTPonNotFound+0x6a>
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 800277a:	aa07      	add	r2, sp, #28
 800277c:	4906      	ldr	r1, [pc, #24]	; (8002798 <HTTPonNotFound+0xcc>)
 800277e:	a81b      	add	r0, sp, #108	; 0x6c
 8002780:	f7ff fb62 	bl	8001e48 <FS_open>
 8002784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002786:	9303      	str	r3, [sp, #12]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800278c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800278e:	21c8      	movs	r1, #200	; 0xc8
 8002790:	0030      	movs	r0, r6
 8002792:	f7ff fe15 	bl	80023c0 <HTTPSendFile>
 8002796:	e7e6      	b.n	8002766 <HTTPonNotFound+0x9a>
 8002798:	20000838 	.word	0x20000838
 800279c:	08003368 	.word	0x08003368
 80027a0:	200007e0 	.word	0x200007e0
 80027a4:	08003478 	.word	0x08003478
 80027a8:	080032c8 	.word	0x080032c8

080027ac <HTTPHandle>:
{
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	46c6      	mov	lr, r8
 80027b0:	b500      	push	{lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	0005      	movs	r5, r0
	for(i=1; i <= NUM_SOCKETS; ++i)
 80027b6:	2401      	movs	r4, #1
 80027b8:	e00e      	b.n	80027d8 <HTTPHandle+0x2c>
						(HTTPResponders[j].func)(pS); // call HTTPResponder service function
 80027ba:	9b01      	ldr	r3, [sp, #4]
 80027bc:	00da      	lsls	r2, r3, #3
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HTTPHandle+0x108>)
 80027c0:	189b      	adds	r3, r3, r2
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0030      	movs	r0, r6
 80027c6:	4798      	blx	r3
				if(j == NUM_HTTP_RESPONDERS) // Resource not found
 80027c8:	2f05      	cmp	r7, #5
 80027ca:	d033      	beq.n	8002834 <HTTPHandle+0x88>
				if(pS->response_stage == RESPONSE_PREPARED)
 80027cc:	2398      	movs	r3, #152	; 0x98
 80027ce:	5cf3      	ldrb	r3, [r6, r3]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d033      	beq.n	800283c <HTTPHandle+0x90>
	for(i=1; i <= NUM_SOCKETS; ++i)
 80027d4:	3401      	adds	r4, #1
 80027d6:	b2e4      	uxtb	r4, r4
 80027d8:	2c03      	cmp	r4, #3
 80027da:	d867      	bhi.n	80028ac <HTTPHandle+0x100>
		HTTPRequestParseState *pS= parseStates + i - 1;
 80027dc:	00e3      	lsls	r3, r4, #3
 80027de:	191b      	adds	r3, r3, r4
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	191b      	adds	r3, r3, r4
 80027e4:	00de      	lsls	r6, r3, #3
 80027e6:	3e29      	subs	r6, #41	; 0x29
 80027e8:	3eff      	subs	r6, #255	; 0xff
 80027ea:	4833      	ldr	r0, [pc, #204]	; (80028b8 <HTTPHandle+0x10c>)
 80027ec:	1836      	adds	r6, r6, r0
		if(((pch395->RX_received) & (1<<i)) && pS->ready) // socket recv buffer non-empty, bit_i is 1
 80027ee:	786b      	ldrb	r3, [r5, #1]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4123      	asrs	r3, r4
 80027f4:	07db      	lsls	r3, r3, #31
 80027f6:	d5ed      	bpl.n	80027d4 <HTTPHandle+0x28>
 80027f8:	2392      	movs	r3, #146	; 0x92
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	5cf3      	ldrb	r3, [r6, r3]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0e8      	beq.n	80027d4 <HTTPHandle+0x28>
			pch395->RX_received &= ~(1 << i); // clear availibility symbol
 8002802:	786b      	ldrb	r3, [r5, #1]
 8002804:	2101      	movs	r1, #1
 8002806:	40a1      	lsls	r1, r4
 8002808:	438b      	bics	r3, r1
 800280a:	706b      	strb	r3, [r5, #1]
			pS->ready = FALSE;
 800280c:	2392      	movs	r3, #146	; 0x92
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2200      	movs	r2, #0
 8002812:	54f2      	strb	r2, [r6, r3]
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8002814:	2700      	movs	r7, #0
 8002816:	2f04      	cmp	r7, #4
 8002818:	d8d6      	bhi.n	80027c8 <HTTPHandle+0x1c>
					if(strncmp(pS->URI, HTTPResponders[j].uri, MAX_LEN_URI) == 0) // matches
 800281a:	1d70      	adds	r0, r6, #5
 800281c:	9701      	str	r7, [sp, #4]
 800281e:	00fb      	lsls	r3, r7, #3
 8002820:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <HTTPHandle+0x108>)
 8002822:	5899      	ldr	r1, [r3, r2]
 8002824:	2240      	movs	r2, #64	; 0x40
 8002826:	f000 fc60 	bl	80030ea <strncmp>
 800282a:	2800      	cmp	r0, #0
 800282c:	d0c5      	beq.n	80027ba <HTTPHandle+0xe>
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 800282e:	3701      	adds	r7, #1
 8002830:	b2ff      	uxtb	r7, r7
 8002832:	e7f0      	b.n	8002816 <HTTPHandle+0x6a>
					HTTPonNotFound(pS);
 8002834:	0030      	movs	r0, r6
 8002836:	f7ff ff49 	bl	80026cc <HTTPonNotFound>
 800283a:	e7c7      	b.n	80027cc <HTTPHandle+0x20>
					uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 800283c:	3399      	adds	r3, #153	; 0x99
 800283e:	5af1      	ldrh	r1, [r6, r3]
 8002840:	23af      	movs	r3, #175	; 0xaf
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	1a5b      	subs	r3, r3, r1
 8002846:	b29b      	uxth	r3, r3
					uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 8002848:	228e      	movs	r2, #142	; 0x8e
 800284a:	0052      	lsls	r2, r2, #1
 800284c:	5ab2      	ldrh	r2, [r6, r2]
 800284e:	1c17      	adds	r7, r2, #0
 8002850:	429a      	cmp	r2, r3
 8002852:	d900      	bls.n	8002856 <HTTPHandle+0xaa>
 8002854:	1c1f      	adds	r7, r3, #0
 8002856:	b2bf      	uxth	r7, r7
					CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8002858:	19c9      	adds	r1, r1, r7
 800285a:	b289      	uxth	r1, r1
 800285c:	0020      	movs	r0, r4
 800285e:	f7ff f969 	bl	8001b34 <CH395StartSendingData>
					CH395ContinueSendingData(pS->response_header, pS->len_response_header);
 8002862:	0030      	movs	r0, r6
 8002864:	309c      	adds	r0, #156	; 0x9c
 8002866:	239a      	movs	r3, #154	; 0x9a
 8002868:	5af1      	ldrh	r1, [r6, r3]
 800286a:	f7ff f976 	bl	8001b5a <CH395ContinueSendingData>
					CH395ContinueSendingData(pS->response_content, len_content_this_time);
 800286e:	2390      	movs	r3, #144	; 0x90
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4698      	mov	r8, r3
 8002874:	0039      	movs	r1, r7
 8002876:	58f0      	ldr	r0, [r6, r3]
 8002878:	f7ff f96f 	bl	8001b5a <CH395ContinueSendingData>
					CH395Complete();
 800287c:	f7ff f97c 	bl	8001b78 <CH395Complete>
					pS->len_response_content_remain -= len_content_this_time;
 8002880:	228e      	movs	r2, #142	; 0x8e
 8002882:	0052      	lsls	r2, r2, #1
 8002884:	5ab3      	ldrh	r3, [r6, r2]
 8002886:	1bdb      	subs	r3, r3, r7
 8002888:	b29b      	uxth	r3, r3
 800288a:	52b3      	strh	r3, [r6, r2]
					pS->response_content += len_content_this_time;
 800288c:	4642      	mov	r2, r8
 800288e:	58b2      	ldr	r2, [r6, r2]
 8002890:	4694      	mov	ip, r2
 8002892:	4467      	add	r7, ip
 8002894:	4642      	mov	r2, r8
 8002896:	50b7      	str	r7, [r6, r2]
					if(pS->len_response_content_remain == 0) // all content completely sent this time
 8002898:	2b00      	cmp	r3, #0
 800289a:	d103      	bne.n	80028a4 <HTTPHandle+0xf8>
						pS->response_stage = RESPONSE_NOT_PREPARED;
 800289c:	3398      	adds	r3, #152	; 0x98
 800289e:	2200      	movs	r2, #0
 80028a0:	54f2      	strb	r2, [r6, r3]
 80028a2:	e797      	b.n	80027d4 <HTTPHandle+0x28>
						pS->response_stage = RESPONSE_CONTENT_REMAIN;
 80028a4:	2398      	movs	r3, #152	; 0x98
 80028a6:	2202      	movs	r2, #2
 80028a8:	54f2      	strb	r2, [r6, r3]
 80028aa:	e793      	b.n	80027d4 <HTTPHandle+0x28>
}
 80028ac:	b002      	add	sp, #8
 80028ae:	bc04      	pop	{r2}
 80028b0:	4690      	mov	r8, r2
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b4:	2000040c 	.word	0x2000040c
 80028b8:	20000468 	.word	0x20000468

080028bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	2214      	movs	r2, #20
 80028c2:	2100      	movs	r1, #0
 80028c4:	a803      	add	r0, sp, #12
 80028c6:	f000 fbce 	bl	8003066 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <MX_GPIO_Init+0xbc>)
 80028cc:	6959      	ldr	r1, [r3, #20]
 80028ce:	2080      	movs	r0, #128	; 0x80
 80028d0:	03c0      	lsls	r0, r0, #15
 80028d2:	4301      	orrs	r1, r0
 80028d4:	6159      	str	r1, [r3, #20]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	4002      	ands	r2, r0
 80028da:	9200      	str	r2, [sp, #0]
 80028dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028de:	6959      	ldr	r1, [r3, #20]
 80028e0:	2080      	movs	r0, #128	; 0x80
 80028e2:	0280      	lsls	r0, r0, #10
 80028e4:	4301      	orrs	r1, r0
 80028e6:	6159      	str	r1, [r3, #20]
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	4002      	ands	r2, r0
 80028ec:	9201      	str	r2, [sp, #4]
 80028ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	02c9      	lsls	r1, r1, #11
 80028f6:	430a      	orrs	r2, r1
 80028f8:	615a      	str	r2, [r3, #20]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	400b      	ands	r3, r1
 80028fe:	9302      	str	r3, [sp, #8]
 8002900:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002902:	2200      	movs	r2, #0
 8002904:	2103      	movs	r1, #3
 8002906:	481d      	ldr	r0, [pc, #116]	; (800297c <MX_GPIO_Init+0xc0>)
 8002908:	f7fd fdef 	bl	80004ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800290c:	4d1c      	ldr	r5, [pc, #112]	; (8002980 <MX_GPIO_Init+0xc4>)
 800290e:	2200      	movs	r2, #0
 8002910:	0029      	movs	r1, r5
 8002912:	2090      	movs	r0, #144	; 0x90
 8002914:	05c0      	lsls	r0, r0, #23
 8002916:	f7fd fde8 	bl	80004ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCS_GPIO_Port, SCS_Pin, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	2110      	movs	r1, #16
 800291e:	2090      	movs	r0, #144	; 0x90
 8002920:	05c0      	lsls	r0, r0, #23
 8002922:	f7fd fde2 	bl	80004ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002926:	2303      	movs	r3, #3
 8002928:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2401      	movs	r4, #1
 800292c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800292e:	2602      	movs	r6, #2
 8002930:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2700      	movs	r7, #0
 8002934:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002936:	a903      	add	r1, sp, #12
 8002938:	4810      	ldr	r0, [pc, #64]	; (800297c <MX_GPIO_Init+0xc0>)
 800293a:	f7fd fd09 	bl	8000350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 800293e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002940:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002942:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002946:	a903      	add	r1, sp, #12
 8002948:	2090      	movs	r0, #144	; 0x90
 800294a:	05c0      	lsls	r0, r0, #23
 800294c:	f7fd fd00 	bl	8000350 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCS_Pin */
  GPIO_InitStruct.Pin = SCS_Pin;
 8002950:	2310      	movs	r3, #16
 8002952:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002954:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002956:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(SCS_GPIO_Port, &GPIO_InitStruct);
 800295a:	a903      	add	r1, sp, #12
 800295c:	2090      	movs	r0, #144	; 0x90
 800295e:	05c0      	lsls	r0, r0, #23
 8002960:	f7fd fcf6 	bl	8000350 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8002964:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <MX_GPIO_Init+0xc8>)
 8002968:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 800296c:	a903      	add	r1, sp, #12
 800296e:	4806      	ldr	r0, [pc, #24]	; (8002988 <MX_GPIO_Init+0xcc>)
 8002970:	f7fd fcee 	bl	8000350 <HAL_GPIO_Init>

}
 8002974:	b009      	add	sp, #36	; 0x24
 8002976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	48001400 	.word	0x48001400
 8002980:	00000603 	.word	0x00000603
 8002984:	10210000 	.word	0x10210000
 8002988:	48000400 	.word	0x48000400

0800298c <MX_SPI1_Init>:
{
 800298c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 800298e:	480f      	ldr	r0, [pc, #60]	; (80029cc <MX_SPI1_Init+0x40>)
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <MX_SPI1_Init+0x44>)
 8002992:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002994:	2382      	movs	r3, #130	; 0x82
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800299a:	2300      	movs	r3, #0
 800299c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800299e:	22e0      	movs	r2, #224	; 0xe0
 80029a0:	00d2      	lsls	r2, r2, #3
 80029a2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80029a4:	2202      	movs	r2, #2
 80029a6:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80029a8:	3a01      	subs	r2, #1
 80029aa:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029b2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029b4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029b6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029b8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029ba:	3afa      	subs	r2, #250	; 0xfa
 80029bc:	3aff      	subs	r2, #255	; 0xff
 80029be:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029c0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029c2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029c4:	f7fe fa7a 	bl	8000ebc <HAL_SPI_Init>
}
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	200008ec 	.word	0x200008ec
 80029d0:	40013000 	.word	0x40013000

080029d4 <MX_USART1_UART_Init>:
{
 80029d4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80029d6:	4809      	ldr	r0, [pc, #36]	; (80029fc <MX_USART1_UART_Init+0x28>)
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_USART1_UART_Init+0x2c>)
 80029da:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80029dc:	2396      	movs	r3, #150	; 0x96
 80029de:	019b      	lsls	r3, r3, #6
 80029e0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029e2:	2300      	movs	r3, #0
 80029e4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029e6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029e8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029ea:	220c      	movs	r2, #12
 80029ec:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029f0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029f2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029f6:	f7fe ff0f 	bl	8001818 <HAL_UART_Init>
}
 80029fa:	bd10      	pop	{r4, pc}
 80029fc:	2000087c 	.word	0x2000087c
 8002a00:	40013800 	.word	0x40013800

08002a04 <MX_NVIC_Init>:
{
 8002a04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2005      	movs	r0, #5
 8002a0c:	f7fd fc4a 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002a10:	2005      	movs	r0, #5
 8002a12:	f7fd fc77 	bl	8000304 <HAL_NVIC_EnableIRQ>
}
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <SystemClock_Config>:
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1c:	222c      	movs	r2, #44	; 0x2c
 8002a1e:	2100      	movs	r1, #0
 8002a20:	a809      	add	r0, sp, #36	; 0x24
 8002a22:	f000 fb20 	bl	8003066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a26:	2210      	movs	r2, #16
 8002a28:	2100      	movs	r1, #0
 8002a2a:	a804      	add	r0, sp, #16
 8002a2c:	f000 fb1b 	bl	8003066 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a30:	2210      	movs	r2, #16
 8002a32:	2100      	movs	r1, #0
 8002a34:	4668      	mov	r0, sp
 8002a36:	f000 fb16 	bl	8003066 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a3e:	2401      	movs	r4, #1
 8002a40:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a42:	330e      	adds	r3, #14
 8002a44:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a46:	a808      	add	r0, sp, #32
 8002a48:	f7fd fd64 	bl	8000514 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a4c:	2307      	movs	r3, #7
 8002a4e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a50:	2300      	movs	r3, #0
 8002a52:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a54:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a56:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a58:	2100      	movs	r1, #0
 8002a5a:	a804      	add	r0, sp, #16
 8002a5c:	f7fd ffbc 	bl	80009d8 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a60:	9400      	str	r4, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002a62:	2303      	movs	r3, #3
 8002a64:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a66:	4668      	mov	r0, sp
 8002a68:	f7fe f876 	bl	8000b58 <HAL_RCCEx_PeriphCLKConfig>
}
 8002a6c:	b014      	add	sp, #80	; 0x50
 8002a6e:	bd10      	pop	{r4, pc}

08002a70 <main>:
{
 8002a70:	b530      	push	{r4, r5, lr}
 8002a72:	b085      	sub	sp, #20
	Selector[0].PIN_BCD0 = BCD1_0;
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <main+0xbc>)
 8002a76:	492e      	ldr	r1, [pc, #184]	; (8002b30 <main+0xc0>)
 8002a78:	001a      	movs	r2, r3
 8002a7a:	c911      	ldmia	r1!, {r0, r4}
 8002a7c:	c211      	stmia	r2!, {r0, r4}
	Selector[0].PIN_BCD1 = BCD1_1;
 8002a7e:	482d      	ldr	r0, [pc, #180]	; (8002b34 <main+0xc4>)
 8002a80:	c812      	ldmia	r0!, {r1, r4}
 8002a82:	c212      	stmia	r2!, {r1, r4}
 8002a84:	0011      	movs	r1, r2
	Selector[0].PIN_BCD2 = BCD1_2;
 8002a86:	4a2c      	ldr	r2, [pc, #176]	; (8002b38 <main+0xc8>)
 8002a88:	ca11      	ldmia	r2!, {r0, r4}
 8002a8a:	c111      	stmia	r1!, {r0, r4}
	Selector[0].sel = 0;
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCD0 = BCD2_0;
 8002a90:	492a      	ldr	r1, [pc, #168]	; (8002b3c <main+0xcc>)
 8002a92:	001a      	movs	r2, r3
 8002a94:	321c      	adds	r2, #28
 8002a96:	c911      	ldmia	r1!, {r0, r4}
 8002a98:	c211      	stmia	r2!, {r0, r4}
	Selector[1].PIN_BCD1 = BCD2_1;
 8002a9a:	4929      	ldr	r1, [pc, #164]	; (8002b40 <main+0xd0>)
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	3224      	adds	r2, #36	; 0x24
 8002aa0:	c911      	ldmia	r1!, {r0, r4}
 8002aa2:	c211      	stmia	r2!, {r0, r4}
	Selector[1].PIN_BCD2 = BCD2_2;
 8002aa4:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <main+0xd4>)
 8002aa6:	332c      	adds	r3, #44	; 0x2c
 8002aa8:	ca03      	ldmia	r2!, {r0, r1}
 8002aaa:	c303      	stmia	r3!, {r0, r1}
  HAL_Init();
 8002aac:	f7fd fbdc 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 8002ab0:	f7ff ffb2 	bl	8002a18 <SystemClock_Config>
  MX_GPIO_Init();
 8002ab4:	f7ff ff02 	bl	80028bc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ab8:	f7ff ff68 	bl	800298c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002abc:	f7ff ff8a 	bl	80029d4 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 8002ac0:	f7ff ffa0 	bl	8002a04 <MX_NVIC_Init>
  FS_begin(&FS, (uint32_t*)FS_BASE_ADDR);
 8002ac4:	4c20      	ldr	r4, [pc, #128]	; (8002b48 <main+0xd8>)
 8002ac6:	4921      	ldr	r1, [pc, #132]	; (8002b4c <main+0xdc>)
 8002ac8:	0020      	movs	r0, r4
 8002aca:	f7ff f9ad 	bl	8001e28 <FS_begin>
  FSfile_typedef file = FS_open(&FS, "/a.txt");
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <main+0xe0>)
 8002ad0:	0021      	movs	r1, r4
 8002ad2:	a801      	add	r0, sp, #4
 8002ad4:	f7ff f9b8 	bl	8001e48 <FS_open>
	Delay_ms(300); // wait for CH395 being ready from power on`	q1was
 8002ad8:	481e      	ldr	r0, [pc, #120]	; (8002b54 <main+0xe4>)
 8002ada:	f7ff f98f 	bl	8001dfc <Delay_us>
	CH395CMDReset();
 8002ade:	f7fe ff17 	bl	8001910 <CH395CMDReset>
	Delay_ms(200);
 8002ae2:	481d      	ldr	r0, [pc, #116]	; (8002b58 <main+0xe8>)
 8002ae4:	f7ff f98a 	bl	8001dfc <Delay_us>
	flag_CH395_ready = FALSE;
 8002ae8:	4d1c      	ldr	r5, [pc, #112]	; (8002b5c <main+0xec>)
 8002aea:	2400      	movs	r4, #0
 8002aec:	702c      	strb	r4, [r5, #0]
  flag_CH395_ready = CH395TCPServerStart(*(uint32_t*)IP, port);
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <main+0xf0>)
 8002af0:	8819      	ldrh	r1, [r3, #0]
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <main+0xf4>)
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	f7fe fec7 	bl	8001888 <CH395TCPServerStart>
 8002afa:	7028      	strb	r0, [r5, #0]
  flag_PHY_change = FALSE;
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <main+0xf8>)
 8002afe:	701c      	strb	r4, [r3, #0]
  flag_IP_conflict = FALSE;
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <main+0xfc>)
 8002b02:	701c      	strb	r4, [r3, #0]
	  if(flag_PHY_change || flag_IP_conflict) goto RESET_CH395;
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <main+0xf8>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e5      	bne.n	8002ad8 <main+0x68>
 8002b0c:	4b17      	ldr	r3, [pc, #92]	; (8002b6c <main+0xfc>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e1      	bne.n	8002ad8 <main+0x68>
	  if(flag_CH395_ready && ch395.RX_received)
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <main+0xec>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f3      	beq.n	8002b04 <main+0x94>
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <main+0x100>)
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ef      	beq.n	8002b04 <main+0x94>
		  HTTPHandle(&ch395);
 8002b24:	4812      	ldr	r0, [pc, #72]	; (8002b70 <main+0x100>)
 8002b26:	f7ff fe41 	bl	80027ac <HTTPHandle>
 8002b2a:	e7eb      	b.n	8002b04 <main+0x94>
 8002b2c:	20000844 	.word	0x20000844
 8002b30:	08003498 	.word	0x08003498
 8002b34:	080034a0 	.word	0x080034a0
 8002b38:	080034a8 	.word	0x080034a8
 8002b3c:	080034b0 	.word	0x080034b0
 8002b40:	080034b8 	.word	0x080034b8
 8002b44:	080034c0 	.word	0x080034c0
 8002b48:	20000838 	.word	0x20000838
 8002b4c:	08004000 	.word	0x08004000
 8002b50:	080034c8 	.word	0x080034c8
 8002b54:	000493e0 	.word	0x000493e0
 8002b58:	00030d40 	.word	0x00030d40
 8002b5c:	20000830 	.word	0x20000830
 8002b60:	20000438 	.word	0x20000438
 8002b64:	20000434 	.word	0x20000434
 8002b68:	20000841 	.word	0x20000841
 8002b6c:	20000840 	.word	0x20000840
 8002b70:	20000008 	.word	0x20000008

08002b74 <interrupt_CH395>:

/* USER CODE BEGIN 4 */

void interrupt_CH395()
{
 8002b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b76:	46ce      	mov	lr, r9
 8002b78:	4647      	mov	r7, r8
 8002b7a:	b580      	push	{r7, lr}
	uint8_t glob_int_status, sock_int_status, i;
	BEGIN_INT_CH395:
	// read global int status
	glob_int_status = CH395CMDGetGlobIntStatus();
 8002b7c:	f7fe fefa 	bl	8001974 <CH395CMDGetGlobIntStatus>
//	}
//	if(glob_int_status & GINT_STAT_IP_CONFLI)
//	{
//		flag_IP_conflict = TRUE;
//	}
	if(glob_int_status & GINT_STAT_PHY_CHANGE)
 8002b80:	0743      	lsls	r3, r0, #29
 8002b82:	d502      	bpl.n	8002b8a <interrupt_CH395+0x16>
	{
		flag_PHY_change = TRUE;
 8002b84:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <interrupt_CH395+0x1b4>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
	}
	glob_int_status >>= 4; // get socket interrupt status
 8002b8a:	0900      	lsrs	r0, r0, #4
 8002b8c:	b2c5      	uxtb	r5, r0
	if(!glob_int_status) goto END_INT_CH395;
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	d100      	bne.n	8002b94 <interrupt_CH395+0x20>
 8002b92:	e0c5      	b.n	8002d20 <interrupt_CH395+0x1ac>
	// handle SOCKET interrupts
	for(i=1; i<=NUM_SOCKETS; ++i)
 8002b94:	2401      	movs	r4, #1
 8002b96:	e037      	b.n	8002c08 <interrupt_CH395+0x94>
			{
				ch395.TX_available |= (1 << i);
				HTTPRequestParseState* pS = parseStates +i -1;
				if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
				{
					uint16_t len = pS->len_response_content_remain;
 8002b98:	331b      	adds	r3, #27
 8002b9a:	33ff      	adds	r3, #255	; 0xff
 8002b9c:	5af3      	ldrh	r3, [r6, r3]
 8002b9e:	4698      	mov	r8, r3
					CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 8002ba0:	2390      	movs	r3, #144	; 0x90
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	58f1      	ldr	r1, [r6, r3]
 8002ba6:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <interrupt_CH395+0x1b8>)
 8002ba8:	4598      	cmp	r8, r3
 8002baa:	d901      	bls.n	8002bb0 <interrupt_CH395+0x3c>
 8002bac:	3301      	adds	r3, #1
 8002bae:	4698      	mov	r8, r3
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	0020      	movs	r0, r4
 8002bb4:	f7fe ff82 	bl	8001abc <CH395SendData>
					// sent
					pS->len_response_content_remain -= len;
 8002bb8:	228e      	movs	r2, #142	; 0x8e
 8002bba:	0052      	lsls	r2, r2, #1
 8002bbc:	5ab3      	ldrh	r3, [r6, r2]
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	1a5b      	subs	r3, r3, r1
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	52b3      	strh	r3, [r6, r2]
					pS->response_content += len; // move the cursor
 8002bc6:	2190      	movs	r1, #144	; 0x90
 8002bc8:	0049      	lsls	r1, r1, #1
 8002bca:	5872      	ldr	r2, [r6, r1]
 8002bcc:	4442      	add	r2, r8
 8002bce:	5072      	str	r2, [r6, r1]
					if(pS->len_response_content_remain == 0)
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d070      	beq.n	8002cb6 <interrupt_CH395+0x142>
				}
			}
//			if(sock_int_status & SINT_STAT_SEND_OK)
//			{
//			}
			if(sock_int_status & SINT_STAT_RECV)
 8002bd4:	077b      	lsls	r3, r7, #29
 8002bd6:	d476      	bmi.n	8002cc6 <interrupt_CH395+0x152>
				{
					ch395.RX_received |= (1 << i);
				}
				CH395ClearRecvBuf(i);
			}
			if(sock_int_status & SINT_STAT_CONNECT)
 8002bd8:	073b      	lsls	r3, r7, #28
 8002bda:	d506      	bpl.n	8002bea <interrupt_CH395+0x76>
			{
				ch395.socket_connected |= (1 << i);
 8002bdc:	4954      	ldr	r1, [pc, #336]	; (8002d30 <interrupt_CH395+0x1bc>)
 8002bde:	780b      	ldrb	r3, [r1, #0]
 8002be0:	2201      	movs	r2, #1
 8002be2:	40a2      	lsls	r2, r4
 8002be4:	4313      	orrs	r3, r2
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	700b      	strb	r3, [r1, #0]
			}
			if(sock_int_status & SINT_STAT_DISCONNECT)
 8002bea:	06fb      	lsls	r3, r7, #27
 8002bec:	d50a      	bpl.n	8002c04 <interrupt_CH395+0x90>
			{
				ch395.socket_connected &= ~(1<<i);
 8002bee:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <interrupt_CH395+0x1bc>)
 8002bf0:	7811      	ldrb	r1, [r2, #0]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	40a3      	lsls	r3, r4
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	4019      	ands	r1, r3
 8002bfc:	7011      	strb	r1, [r2, #0]
				ch395.RX_received &= ~(1<<i);
 8002bfe:	7851      	ldrb	r1, [r2, #1]
 8002c00:	400b      	ands	r3, r1
 8002c02:	7053      	strb	r3, [r2, #1]
	for(i=1; i<=NUM_SOCKETS; ++i)
 8002c04:	3401      	adds	r4, #1
 8002c06:	b2e4      	uxtb	r4, r4
 8002c08:	2c03      	cmp	r4, #3
 8002c0a:	d900      	bls.n	8002c0e <interrupt_CH395+0x9a>
 8002c0c:	e088      	b.n	8002d20 <interrupt_CH395+0x1ac>
		glob_int_status >>= 1;
 8002c0e:	086d      	lsrs	r5, r5, #1
		if(glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 8002c10:	07eb      	lsls	r3, r5, #31
 8002c12:	d5f7      	bpl.n	8002c04 <interrupt_CH395+0x90>
			sock_int_status = CH395GetSocketInt(i);
 8002c14:	0020      	movs	r0, r4
 8002c16:	f7ff f855 	bl	8001cc4 <CH395GetSocketInt>
 8002c1a:	0007      	movs	r7, r0
			if(sock_int_status & SINT_STAT_SENBUF_FREE) // Send buffer free
 8002c1c:	07c3      	lsls	r3, r0, #31
 8002c1e:	d5d9      	bpl.n	8002bd4 <interrupt_CH395+0x60>
				ch395.TX_available |= (1 << i);
 8002c20:	4943      	ldr	r1, [pc, #268]	; (8002d30 <interrupt_CH395+0x1bc>)
 8002c22:	788b      	ldrb	r3, [r1, #2]
 8002c24:	2201      	movs	r2, #1
 8002c26:	40a2      	lsls	r2, r4
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	708b      	strb	r3, [r1, #2]
				HTTPRequestParseState* pS = parseStates +i -1;
 8002c2e:	00e3      	lsls	r3, r4, #3
 8002c30:	191b      	adds	r3, r3, r4
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	191b      	adds	r3, r3, r4
 8002c36:	00de      	lsls	r6, r3, #3
 8002c38:	3e29      	subs	r6, #41	; 0x29
 8002c3a:	3eff      	subs	r6, #255	; 0xff
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	; (8002d34 <interrupt_CH395+0x1c0>)
 8002c3e:	18f6      	adds	r6, r6, r3
				if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
 8002c40:	2398      	movs	r3, #152	; 0x98
 8002c42:	5cf3      	ldrb	r3, [r6, r3]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d0a7      	beq.n	8002b98 <interrupt_CH395+0x24>
				else if(pS->response_stage == RESPONSE_PREPARED)
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d1c3      	bne.n	8002bd4 <interrupt_CH395+0x60>
					uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 8002c4c:	3399      	adds	r3, #153	; 0x99
 8002c4e:	5af1      	ldrh	r1, [r6, r3]
 8002c50:	23af      	movs	r3, #175	; 0xaf
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	1a5b      	subs	r3, r3, r1
 8002c56:	b29b      	uxth	r3, r3
					uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 8002c58:	228e      	movs	r2, #142	; 0x8e
 8002c5a:	0052      	lsls	r2, r2, #1
 8002c5c:	5ab2      	ldrh	r2, [r6, r2]
 8002c5e:	1c10      	adds	r0, r2, #0
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d900      	bls.n	8002c66 <interrupt_CH395+0xf2>
 8002c64:	1c18      	adds	r0, r3, #0
 8002c66:	b283      	uxth	r3, r0
 8002c68:	4698      	mov	r8, r3
					CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8002c6a:	4441      	add	r1, r8
 8002c6c:	b289      	uxth	r1, r1
 8002c6e:	0020      	movs	r0, r4
 8002c70:	f7fe ff60 	bl	8001b34 <CH395StartSendingData>
					CH395ContinueSendingData(pS->response_header, pS->len_response_header);
 8002c74:	0030      	movs	r0, r6
 8002c76:	309c      	adds	r0, #156	; 0x9c
 8002c78:	239a      	movs	r3, #154	; 0x9a
 8002c7a:	5af1      	ldrh	r1, [r6, r3]
 8002c7c:	f7fe ff6d 	bl	8001b5a <CH395ContinueSendingData>
					CH395ContinueSendingData(pS->response_content, len_content_this_time);
 8002c80:	2390      	movs	r3, #144	; 0x90
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4699      	mov	r9, r3
 8002c86:	4641      	mov	r1, r8
 8002c88:	58f0      	ldr	r0, [r6, r3]
 8002c8a:	f7fe ff66 	bl	8001b5a <CH395ContinueSendingData>
					CH395Complete();
 8002c8e:	f7fe ff73 	bl	8001b78 <CH395Complete>
					pS->len_response_content_remain -= len_content_this_time;
 8002c92:	228e      	movs	r2, #142	; 0x8e
 8002c94:	0052      	lsls	r2, r2, #1
 8002c96:	5ab3      	ldrh	r3, [r6, r2]
 8002c98:	4641      	mov	r1, r8
 8002c9a:	1a5b      	subs	r3, r3, r1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	52b3      	strh	r3, [r6, r2]
					pS->response_content += len_content_this_time;
 8002ca0:	464a      	mov	r2, r9
 8002ca2:	58b2      	ldr	r2, [r6, r2]
 8002ca4:	4442      	add	r2, r8
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	5072      	str	r2, [r6, r1]
					if(pS->len_response_content_remain == 0) // all content completely sent this time
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d107      	bne.n	8002cbe <interrupt_CH395+0x14a>
						pS->response_stage = RESPONSE_NOT_PREPARED;
 8002cae:	3398      	adds	r3, #152	; 0x98
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	54f2      	strb	r2, [r6, r3]
 8002cb4:	e78e      	b.n	8002bd4 <interrupt_CH395+0x60>
						resetHTTPParseState(pS);
 8002cb6:	0030      	movs	r0, r6
 8002cb8:	f7ff f98e 	bl	8001fd8 <resetHTTPParseState>
 8002cbc:	e78a      	b.n	8002bd4 <interrupt_CH395+0x60>
						pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8002cbe:	2398      	movs	r3, #152	; 0x98
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	54f2      	strb	r2, [r6, r3]
 8002cc4:	e786      	b.n	8002bd4 <interrupt_CH395+0x60>
				HTTPRequestParseState* pS = parseStates + i - 1;
 8002cc6:	00e3      	lsls	r3, r4, #3
 8002cc8:	191b      	adds	r3, r3, r4
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	191b      	adds	r3, r3, r4
 8002cce:	00de      	lsls	r6, r3, #3
 8002cd0:	3e29      	subs	r6, #41	; 0x29
 8002cd2:	3eff      	subs	r6, #255	; 0xff
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <interrupt_CH395+0x1c0>)
 8002cd6:	18f6      	adds	r6, r6, r3
				uint16_t len = CH395GetRecvLength(i);
 8002cd8:	0020      	movs	r0, r4
 8002cda:	f7fe ff57 	bl	8001b8c <CH395GetRecvLength>
				CH395GetRecvData(i, (len < CH395_SIZE_BUFFER)?(len):(CH395_SIZE_BUFFER-1), ch395.buffer);
 8002cde:	1c01      	adds	r1, r0, #0
 8002ce0:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <interrupt_CH395+0x1c4>)
 8002ce2:	4298      	cmp	r0, r3
 8002ce4:	d900      	bls.n	8002ce8 <interrupt_CH395+0x174>
 8002ce6:	1c19      	adds	r1, r3, #0
 8002ce8:	b289      	uxth	r1, r1
 8002cea:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <interrupt_CH395+0x1c8>)
 8002cec:	0020      	movs	r0, r4
 8002cee:	f7fe ff7b 	bl	8001be8 <CH395GetRecvData>
				resetHTTPParseState(pS);
 8002cf2:	0030      	movs	r0, r6
 8002cf4:	f7ff f970 	bl	8001fd8 <resetHTTPParseState>
				pS->sock_index = i;
 8002cf8:	2326      	movs	r3, #38	; 0x26
 8002cfa:	33ff      	adds	r3, #255	; 0xff
 8002cfc:	54f4      	strb	r4, [r6, r3]
				if(parse_http(pS, ch395.buffer))
 8002cfe:	490f      	ldr	r1, [pc, #60]	; (8002d3c <interrupt_CH395+0x1c8>)
 8002d00:	0030      	movs	r0, r6
 8002d02:	f7ff fa01 	bl	8002108 <parse_http>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d006      	beq.n	8002d18 <interrupt_CH395+0x1a4>
					ch395.RX_received |= (1 << i);
 8002d0a:	4909      	ldr	r1, [pc, #36]	; (8002d30 <interrupt_CH395+0x1bc>)
 8002d0c:	784b      	ldrb	r3, [r1, #1]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	40a2      	lsls	r2, r4
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	704b      	strb	r3, [r1, #1]
				CH395ClearRecvBuf(i);
 8002d18:	0020      	movs	r0, r4
 8002d1a:	f7fe ff53 	bl	8001bc4 <CH395ClearRecvBuf>
 8002d1e:	e75b      	b.n	8002bd8 <interrupt_CH395+0x64>
		}
	}
	END_INT_CH395:
	return;
//	if(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET) goto BEGIN_INT_CH395;
}
 8002d20:	bc0c      	pop	{r2, r3}
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d28:	20000841 	.word	0x20000841
 8002d2c:	00000577 	.word	0x00000577
 8002d30:	20000008 	.word	0x20000008
 8002d34:	20000468 	.word	0x20000468
 8002d38:	000003ff 	.word	0x000003ff
 8002d3c:	2000000b 	.word	0x2000000b

08002d40 <switch_Antenna>:

void switch_Antenna(uint8_t A, uint8_t B)
{
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	46ce      	mov	lr, r9
 8002d44:	4647      	mov	r7, r8
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	0004      	movs	r4, r0
	uint8_t i;
	Selector[0].sel = A;
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <switch_Antenna+0x9c>)
 8002d4e:	7618      	strb	r0, [r3, #24]
	Selector[1].sel = B;
 8002d50:	2234      	movs	r2, #52	; 0x34
 8002d52:	5499      	strb	r1, [r3, r2]
	if(A==B && A>0) return;
 8002d54:	4288      	cmp	r0, r1
 8002d56:	d001      	beq.n	8002d5c <switch_Antenna+0x1c>
 8002d58:	2400      	movs	r4, #0
 8002d5a:	e038      	b.n	8002dce <switch_Antenna+0x8e>
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	d036      	beq.n	8002dce <switch_Antenna+0x8e>
 8002d60:	e037      	b.n	8002dd2 <switch_Antenna+0x92>
	for(i=0; i<N_SELECTORS; ++i)
	{
		PIN_typedef pin0 = Selector[i].PIN_BCD0;
 8002d62:	46e9      	mov	r9, sp
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <switch_Antenna+0x9c>)
 8002d66:	469c      	mov	ip, r3
 8002d68:	00e2      	lsls	r2, r4, #3
 8002d6a:	1b15      	subs	r5, r2, r4
 8002d6c:	00ab      	lsls	r3, r5, #2
 8002d6e:	4463      	add	r3, ip
 8002d70:	464d      	mov	r5, r9
 8002d72:	cbc0      	ldmia	r3!, {r6, r7}
 8002d74:	c5c0      	stmia	r5!, {r6, r7}
		PIN_typedef pin1 = Selector[i].PIN_BCD1;
 8002d76:	1b16      	subs	r6, r2, r4
 8002d78:	00b3      	lsls	r3, r6, #2
 8002d7a:	4463      	add	r3, ip
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	001e      	movs	r6, r3
 8002d80:	3608      	adds	r6, #8
 8002d82:	002f      	movs	r7, r5
 8002d84:	ce0a      	ldmia	r6!, {r1, r3}
 8002d86:	c70a      	stmia	r7!, {r1, r3}
		PIN_typedef pin2 = Selector[i].PIN_BCD2;
 8002d88:	ae04      	add	r6, sp, #16
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	0037      	movs	r7, r6
 8002d90:	cb03      	ldmia	r3!, {r0, r1}
 8002d92:	c703      	stmia	r7!, {r0, r1}
		uint8_t val = Selector[i].sel;
 8002d94:	1b12      	subs	r2, r2, r4
 8002d96:	0093      	lsls	r3, r2, #2
 8002d98:	4463      	add	r3, ip
 8002d9a:	7e1f      	ldrb	r7, [r3, #24]
		HAL_GPIO_WritePin(pin0.group, pin0.pin, val & 1);
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4698      	mov	r8, r3
 8002da0:	001a      	movs	r2, r3
 8002da2:	403a      	ands	r2, r7
 8002da4:	464b      	mov	r3, r9
 8002da6:	8899      	ldrh	r1, [r3, #4]
 8002da8:	9800      	ldr	r0, [sp, #0]
 8002daa:	f7fd fb9e 	bl	80004ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin1.group, pin1.pin, (val >> 1) & 1);
 8002dae:	087a      	lsrs	r2, r7, #1
 8002db0:	4643      	mov	r3, r8
 8002db2:	401a      	ands	r2, r3
 8002db4:	88a9      	ldrh	r1, [r5, #4]
 8002db6:	9802      	ldr	r0, [sp, #8]
 8002db8:	f7fd fb97 	bl	80004ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin2.group, pin2.pin, (val >> 2) & 2);
 8002dbc:	08bf      	lsrs	r7, r7, #2
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	403a      	ands	r2, r7
 8002dc2:	88b1      	ldrh	r1, [r6, #4]
 8002dc4:	9804      	ldr	r0, [sp, #16]
 8002dc6:	f7fd fb90 	bl	80004ea <HAL_GPIO_WritePin>
	for(i=0; i<N_SELECTORS; ++i)
 8002dca:	3401      	adds	r4, #1
 8002dcc:	b2e4      	uxtb	r4, r4
 8002dce:	2c01      	cmp	r4, #1
 8002dd0:	d9c7      	bls.n	8002d62 <switch_Antenna+0x22>
	}
}
 8002dd2:	b007      	add	sp, #28
 8002dd4:	bc0c      	pop	{r2, r3}
 8002dd6:	4690      	mov	r8, r2
 8002dd8:	4699      	mov	r9, r3
 8002dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ddc:	20000844 	.word	0x20000844

08002de0 <get_Antenna>:

uint8_t get_Antenna() //0-3:SEL1 4-7:SEL2
{
 8002de0:	b510      	push	{r4, lr}
	uint8_t d = CH395ReadGPIOAddr(GPIO_IN_REG); // read CH395 GPIO
 8002de2:	2081      	movs	r0, #129	; 0x81
 8002de4:	f7fe ffa8 	bl	8001d38 <CH395ReadGPIOAddr>
	uint8_t res = 0;
	res |= (d >> BCDM1_0) & 1;// bit 0: BCDM1_0
 8002de8:	0882      	lsrs	r2, r0, #2
 8002dea:	2301      	movs	r3, #1
 8002dec:	4013      	ands	r3, r2
	res |= ((d >> BCDM1_1) & 1) << 1;// bit 1: BCDM1_1
 8002dee:	0842      	lsrs	r2, r0, #1
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	0052      	lsls	r2, r2, #1
 8002df4:	2102      	movs	r1, #2
 8002df6:	400a      	ands	r2, r1
 8002df8:	4313      	orrs	r3, r2
	res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
 8002dfa:	0081      	lsls	r1, r0, #2
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	400a      	ands	r2, r1
 8002e00:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
 8002e02:	0902      	lsrs	r2, r0, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	2110      	movs	r1, #16
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
 8002e0e:	0982      	lsrs	r2, r0, #6
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	0152      	lsls	r2, r2, #5
 8002e14:	3110      	adds	r1, #16
 8002e16:	400a      	ands	r2, r1
 8002e18:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_2) & 1) << 6;// bit 1: BCDM1_1
 8002e1a:	0940      	lsrs	r0, r0, #5
 8002e1c:	b2c0      	uxtb	r0, r0
 8002e1e:	0180      	lsls	r0, r0, #6
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	4010      	ands	r0, r2
 8002e24:	4318      	orrs	r0, r3
	return res;
}
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e28:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_MspInit+0x2c>)
 8002e2c:	6999      	ldr	r1, [r3, #24]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4311      	orrs	r1, r2
 8002e32:	6199      	str	r1, [r3, #24]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	400a      	ands	r2, r1
 8002e38:	9200      	str	r2, [sp, #0]
 8002e3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	2180      	movs	r1, #128	; 0x80
 8002e40:	0549      	lsls	r1, r1, #21
 8002e42:	430a      	orrs	r2, r1
 8002e44:	61da      	str	r2, [r3, #28]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	400b      	ands	r3, r1
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4e:	b002      	add	sp, #8
 8002e50:	4770      	bx	lr
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	40021000 	.word	0x40021000

08002e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5e:	2214      	movs	r2, #20
 8002e60:	2100      	movs	r1, #0
 8002e62:	a803      	add	r0, sp, #12
 8002e64:	f000 f8ff 	bl	8003066 <memset>
  if(hspi->Instance==SPI1)
 8002e68:	6822      	ldr	r2, [r4, #0]
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <HAL_SPI_MspInit+0x60>)
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e70:	b008      	add	sp, #32
 8002e72:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <HAL_SPI_MspInit+0x64>)
 8002e76:	6999      	ldr	r1, [r3, #24]
 8002e78:	2080      	movs	r0, #128	; 0x80
 8002e7a:	0140      	lsls	r0, r0, #5
 8002e7c:	4301      	orrs	r1, r0
 8002e7e:	6199      	str	r1, [r3, #24]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	4002      	ands	r2, r0
 8002e84:	9201      	str	r2, [sp, #4]
 8002e86:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	0289      	lsls	r1, r1, #10
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	615a      	str	r2, [r3, #20]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	400b      	ands	r3, r1
 8002e96:	9302      	str	r3, [sp, #8]
 8002e98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002e9a:	23e0      	movs	r3, #224	; 0xe0
 8002e9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	3bde      	subs	r3, #222	; 0xde
 8002ea0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eaa:	2090      	movs	r0, #144	; 0x90
 8002eac:	a903      	add	r1, sp, #12
 8002eae:	05c0      	lsls	r0, r0, #23
 8002eb0:	f7fd fa4e 	bl	8000350 <HAL_GPIO_Init>
}
 8002eb4:	e7dc      	b.n	8002e70 <HAL_SPI_MspInit+0x18>
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	40013000 	.word	0x40013000
 8002ebc:	40021000 	.word	0x40021000

08002ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec6:	2214      	movs	r2, #20
 8002ec8:	2100      	movs	r1, #0
 8002eca:	a803      	add	r0, sp, #12
 8002ecc:	f000 f8cb 	bl	8003066 <memset>
  if(huart->Instance==USART1)
 8002ed0:	6822      	ldr	r2, [r4, #0]
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <HAL_UART_MspInit+0x60>)
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d001      	beq.n	8002edc <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ed8:	b008      	add	sp, #32
 8002eda:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002edc:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_UART_MspInit+0x64>)
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	2080      	movs	r0, #128	; 0x80
 8002ee2:	01c0      	lsls	r0, r0, #7
 8002ee4:	4301      	orrs	r1, r0
 8002ee6:	6199      	str	r1, [r3, #24]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	4002      	ands	r2, r0
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	0289      	lsls	r1, r1, #10
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	400b      	ands	r3, r1
 8002efe:	9302      	str	r3, [sp, #8]
 8002f00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f02:	230c      	movs	r3, #12
 8002f04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	3b0a      	subs	r3, #10
 8002f08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002f0e:	3b02      	subs	r3, #2
 8002f10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	2090      	movs	r0, #144	; 0x90
 8002f14:	a903      	add	r1, sp, #12
 8002f16:	05c0      	lsls	r0, r0, #23
 8002f18:	f7fd fa1a 	bl	8000350 <HAL_GPIO_Init>
}
 8002f1c:	e7dc      	b.n	8002ed8 <HAL_UART_MspInit+0x18>
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	40013800 	.word	0x40013800
 8002f24:	40021000 	.word	0x40021000

08002f28 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f28:	4770      	bx	lr

08002f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2a:	e7fe      	b.n	8002f2a <HardFault_Handler>

08002f2c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002f2c:	4770      	bx	lr

08002f2e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f2e:	4770      	bx	lr

08002f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f30:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f32:	f7fd f9a9 	bl	8000288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f36:	bd10      	pop	{r4, pc}

08002f38 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002f38:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 8002f3a:	e001      	b.n	8002f40 <EXTI0_1_IRQHandler+0x8>
	{
		interrupt_CH395();
 8002f3c:	f7ff fe1a 	bl	8002b74 <interrupt_CH395>
	while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 8002f40:	2102      	movs	r1, #2
 8002f42:	4804      	ldr	r0, [pc, #16]	; (8002f54 <EXTI0_1_IRQHandler+0x1c>)
 8002f44:	f7fd faca 	bl	80004dc <HAL_GPIO_ReadPin>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d0f7      	beq.n	8002f3c <EXTI0_1_IRQHandler+0x4>
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f7fd fad3 	bl	80004f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002f52:	bd10      	pop	{r4, pc}
 8002f54:	48000400 	.word	0x48000400

08002f58 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <SystemInit+0x48>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	480f      	ldr	r0, [pc, #60]	; (8002fa4 <SystemInit+0x4c>)
 8002f66:	4002      	ands	r2, r0
 8002f68:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	480e      	ldr	r0, [pc, #56]	; (8002fa8 <SystemInit+0x50>)
 8002f6e:	4002      	ands	r2, r0
 8002f70:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <SystemInit+0x54>)
 8002f76:	4002      	ands	r2, r0
 8002f78:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002f7a:	685a      	ldr	r2, [r3, #4]
 8002f7c:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <SystemInit+0x58>)
 8002f7e:	4002      	ands	r2, r0
 8002f80:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f84:	200f      	movs	r0, #15
 8002f86:	4382      	bics	r2, r0
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f8c:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <SystemInit+0x5c>)
 8002f8e:	4002      	ands	r2, r0
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f94:	438a      	bics	r2, r1
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002f98:	2200      	movs	r2, #0
 8002f9a:	609a      	str	r2, [r3, #8]

}
 8002f9c:	4770      	bx	lr
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	08ffb80c 	.word	0x08ffb80c
 8002fa8:	fef6ffff 	.word	0xfef6ffff
 8002fac:	fffbffff 	.word	0xfffbffff
 8002fb0:	ffc0ffff 	.word	0xffc0ffff
 8002fb4:	fffffeec 	.word	0xfffffeec

08002fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fb8:	480d      	ldr	r0, [pc, #52]	; (8002ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fbc:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fbe:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <LoopForever+0xe>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fc4:	e002      	b.n	8002fcc <LoopCopyDataInit>

08002fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fca:	3304      	adds	r3, #4

08002fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fd0:	d3f9      	bcc.n	8002fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fd2:	4a0b      	ldr	r2, [pc, #44]	; (8003000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002fd4:	4c0b      	ldr	r4, [pc, #44]	; (8003004 <LoopForever+0x16>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd8:	e001      	b.n	8002fde <LoopFillZerobss>

08002fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fdc:	3204      	adds	r2, #4

08002fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fe0:	d3fb      	bcc.n	8002fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002fe2:	f7ff ffb9 	bl	8002f58 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002fe6:	f000 f811 	bl	800300c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fea:	f7ff fd41 	bl	8002a70 <main>

08002fee <LoopForever>:

LoopForever:
    b LoopForever
 8002fee:	e7fe      	b.n	8002fee <LoopForever>
  ldr   r0, =_estack
 8002ff0:	20000fff 	.word	0x20000fff
  ldr r0, =_sdata
 8002ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff8:	20000440 	.word	0x20000440
  ldr r2, =_sidata
 8002ffc:	080034f0 	.word	0x080034f0
  ldr r2, =_sbss
 8003000:	20000440 	.word	0x20000440
  ldr r4, =_ebss
 8003004:	20000950 	.word	0x20000950

08003008 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003008:	e7fe      	b.n	8003008 <ADC1_IRQHandler>
	...

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	2600      	movs	r6, #0
 8003010:	4d0c      	ldr	r5, [pc, #48]	; (8003044 <__libc_init_array+0x38>)
 8003012:	4c0d      	ldr	r4, [pc, #52]	; (8003048 <__libc_init_array+0x3c>)
 8003014:	1b64      	subs	r4, r4, r5
 8003016:	10a4      	asrs	r4, r4, #2
 8003018:	42a6      	cmp	r6, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	2600      	movs	r6, #0
 800301e:	f000 f933 	bl	8003288 <_init>
 8003022:	4d0a      	ldr	r5, [pc, #40]	; (800304c <__libc_init_array+0x40>)
 8003024:	4c0a      	ldr	r4, [pc, #40]	; (8003050 <__libc_init_array+0x44>)
 8003026:	1b64      	subs	r4, r4, r5
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	42a6      	cmp	r6, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	00b3      	lsls	r3, r6, #2
 8003032:	58eb      	ldr	r3, [r5, r3]
 8003034:	4798      	blx	r3
 8003036:	3601      	adds	r6, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	00b3      	lsls	r3, r6, #2
 800303c:	58eb      	ldr	r3, [r5, r3]
 800303e:	4798      	blx	r3
 8003040:	3601      	adds	r6, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	080034e8 	.word	0x080034e8
 8003048:	080034e8 	.word	0x080034e8
 800304c:	080034e8 	.word	0x080034e8
 8003050:	080034ec 	.word	0x080034ec

08003054 <memcpy>:
 8003054:	2300      	movs	r3, #0
 8003056:	b510      	push	{r4, lr}
 8003058:	429a      	cmp	r2, r3
 800305a:	d100      	bne.n	800305e <memcpy+0xa>
 800305c:	bd10      	pop	{r4, pc}
 800305e:	5ccc      	ldrb	r4, [r1, r3]
 8003060:	54c4      	strb	r4, [r0, r3]
 8003062:	3301      	adds	r3, #1
 8003064:	e7f8      	b.n	8003058 <memcpy+0x4>

08003066 <memset>:
 8003066:	0003      	movs	r3, r0
 8003068:	1812      	adds	r2, r2, r0
 800306a:	4293      	cmp	r3, r2
 800306c:	d100      	bne.n	8003070 <memset+0xa>
 800306e:	4770      	bx	lr
 8003070:	7019      	strb	r1, [r3, #0]
 8003072:	3301      	adds	r3, #1
 8003074:	e7f9      	b.n	800306a <memset+0x4>

08003076 <strcat>:
 8003076:	0002      	movs	r2, r0
 8003078:	b510      	push	{r4, lr}
 800307a:	7813      	ldrb	r3, [r2, #0]
 800307c:	1c54      	adds	r4, r2, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <strcat+0x18>
 8003082:	5ccc      	ldrb	r4, [r1, r3]
 8003084:	54d4      	strb	r4, [r2, r3]
 8003086:	3301      	adds	r3, #1
 8003088:	2c00      	cmp	r4, #0
 800308a:	d1fa      	bne.n	8003082 <strcat+0xc>
 800308c:	bd10      	pop	{r4, pc}
 800308e:	0022      	movs	r2, r4
 8003090:	e7f3      	b.n	800307a <strcat+0x4>

08003092 <strchr>:
 8003092:	b2c9      	uxtb	r1, r1
 8003094:	7803      	ldrb	r3, [r0, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <strchr+0x12>
 800309a:	428b      	cmp	r3, r1
 800309c:	d100      	bne.n	80030a0 <strchr+0xe>
 800309e:	4770      	bx	lr
 80030a0:	3001      	adds	r0, #1
 80030a2:	e7f7      	b.n	8003094 <strchr+0x2>
 80030a4:	424b      	negs	r3, r1
 80030a6:	4159      	adcs	r1, r3
 80030a8:	4249      	negs	r1, r1
 80030aa:	4008      	ands	r0, r1
 80030ac:	e7f7      	b.n	800309e <strchr+0xc>

080030ae <strcpy>:
 80030ae:	0003      	movs	r3, r0
 80030b0:	780a      	ldrb	r2, [r1, #0]
 80030b2:	3101      	adds	r1, #1
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d1f9      	bne.n	80030b0 <strcpy+0x2>
 80030bc:	4770      	bx	lr

080030be <strncat>:
 80030be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c0:	0004      	movs	r4, r0
 80030c2:	7823      	ldrb	r3, [r4, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d108      	bne.n	80030da <strncat+0x1c>
 80030c8:	001f      	movs	r7, r3
 80030ca:	1e56      	subs	r6, r2, #1
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d003      	beq.n	80030d8 <strncat+0x1a>
 80030d0:	5ccd      	ldrb	r5, [r1, r3]
 80030d2:	54e5      	strb	r5, [r4, r3]
 80030d4:	2d00      	cmp	r5, #0
 80030d6:	d102      	bne.n	80030de <strncat+0x20>
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030da:	3401      	adds	r4, #1
 80030dc:	e7f1      	b.n	80030c2 <strncat+0x4>
 80030de:	429e      	cmp	r6, r3
 80030e0:	d101      	bne.n	80030e6 <strncat+0x28>
 80030e2:	19a5      	adds	r5, r4, r6
 80030e4:	706f      	strb	r7, [r5, #1]
 80030e6:	3301      	adds	r3, #1
 80030e8:	e7f0      	b.n	80030cc <strncat+0xe>

080030ea <strncmp>:
 80030ea:	2300      	movs	r3, #0
 80030ec:	b530      	push	{r4, r5, lr}
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d00a      	beq.n	8003108 <strncmp+0x1e>
 80030f2:	3a01      	subs	r2, #1
 80030f4:	5cc4      	ldrb	r4, [r0, r3]
 80030f6:	5ccd      	ldrb	r5, [r1, r3]
 80030f8:	42ac      	cmp	r4, r5
 80030fa:	d104      	bne.n	8003106 <strncmp+0x1c>
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d002      	beq.n	8003106 <strncmp+0x1c>
 8003100:	3301      	adds	r3, #1
 8003102:	2c00      	cmp	r4, #0
 8003104:	d1f6      	bne.n	80030f4 <strncmp+0xa>
 8003106:	1b63      	subs	r3, r4, r5
 8003108:	0018      	movs	r0, r3
 800310a:	bd30      	pop	{r4, r5, pc}

0800310c <strncpy>:
 800310c:	b530      	push	{r4, r5, lr}
 800310e:	0005      	movs	r5, r0
 8003110:	2a00      	cmp	r2, #0
 8003112:	d100      	bne.n	8003116 <strncpy+0xa>
 8003114:	bd30      	pop	{r4, r5, pc}
 8003116:	780c      	ldrb	r4, [r1, #0]
 8003118:	3a01      	subs	r2, #1
 800311a:	1c6b      	adds	r3, r5, #1
 800311c:	702c      	strb	r4, [r5, #0]
 800311e:	3101      	adds	r1, #1
 8003120:	2c00      	cmp	r4, #0
 8003122:	d105      	bne.n	8003130 <strncpy+0x24>
 8003124:	189a      	adds	r2, r3, r2
 8003126:	429a      	cmp	r2, r3
 8003128:	d0f4      	beq.n	8003114 <strncpy+0x8>
 800312a:	701c      	strb	r4, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	e7fa      	b.n	8003126 <strncpy+0x1a>
 8003130:	001d      	movs	r5, r3
 8003132:	e7ed      	b.n	8003110 <strncpy+0x4>

08003134 <strnstr>:
 8003134:	b570      	push	{r4, r5, r6, lr}
 8003136:	000e      	movs	r6, r1
 8003138:	0005      	movs	r5, r0
 800313a:	0011      	movs	r1, r2
 800313c:	0030      	movs	r0, r6
 800313e:	0014      	movs	r4, r2
 8003140:	f000 f887 	bl	8003252 <strnlen>
 8003144:	0003      	movs	r3, r0
 8003146:	4284      	cmp	r4, r0
 8003148:	d802      	bhi.n	8003150 <strnstr+0x1c>
 800314a:	5c32      	ldrb	r2, [r6, r0]
 800314c:	2a00      	cmp	r2, #0
 800314e:	d10d      	bne.n	800316c <strnstr+0x38>
 8003150:	0021      	movs	r1, r4
 8003152:	0032      	movs	r2, r6
 8003154:	0028      	movs	r0, r5
 8003156:	f000 f862 	bl	800321e <memmem>
 800315a:	1e04      	subs	r4, r0, #0
 800315c:	d006      	beq.n	800316c <strnstr+0x38>
 800315e:	1b42      	subs	r2, r0, r5
 8003160:	2100      	movs	r1, #0
 8003162:	0028      	movs	r0, r5
 8003164:	f000 f850 	bl	8003208 <memchr>
 8003168:	2800      	cmp	r0, #0
 800316a:	d000      	beq.n	800316e <strnstr+0x3a>
 800316c:	2400      	movs	r4, #0
 800316e:	0020      	movs	r0, r4
 8003170:	bd70      	pop	{r4, r5, r6, pc}

08003172 <strstr>:
 8003172:	b510      	push	{r4, lr}
 8003174:	7803      	ldrb	r3, [r0, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <strstr+0x28>
 800317a:	780b      	ldrb	r3, [r1, #0]
 800317c:	425a      	negs	r2, r3
 800317e:	4153      	adcs	r3, r2
 8003180:	425b      	negs	r3, r3
 8003182:	4018      	ands	r0, r3
 8003184:	bd10      	pop	{r4, pc}
 8003186:	2300      	movs	r3, #0
 8003188:	5cca      	ldrb	r2, [r1, r3]
 800318a:	2a00      	cmp	r2, #0
 800318c:	d0fa      	beq.n	8003184 <strstr+0x12>
 800318e:	5cc4      	ldrb	r4, [r0, r3]
 8003190:	4294      	cmp	r4, r2
 8003192:	d101      	bne.n	8003198 <strstr+0x26>
 8003194:	3301      	adds	r3, #1
 8003196:	e7f7      	b.n	8003188 <strstr+0x16>
 8003198:	3001      	adds	r0, #1
 800319a:	7803      	ldrb	r3, [r0, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1f2      	bne.n	8003186 <strstr+0x14>
 80031a0:	0018      	movs	r0, r3
 80031a2:	e7ef      	b.n	8003184 <strstr+0x12>

080031a4 <__strtok_r>:
 80031a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a6:	2800      	cmp	r0, #0
 80031a8:	d104      	bne.n	80031b4 <__strtok_r+0x10>
 80031aa:	6810      	ldr	r0, [r2, #0]
 80031ac:	2800      	cmp	r0, #0
 80031ae:	d101      	bne.n	80031b4 <__strtok_r+0x10>
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b2:	0020      	movs	r0, r4
 80031b4:	000e      	movs	r6, r1
 80031b6:	7805      	ldrb	r5, [r0, #0]
 80031b8:	1c44      	adds	r4, r0, #1
 80031ba:	7837      	ldrb	r7, [r6, #0]
 80031bc:	2f00      	cmp	r7, #0
 80031be:	d104      	bne.n	80031ca <__strtok_r+0x26>
 80031c0:	2d00      	cmp	r5, #0
 80031c2:	d110      	bne.n	80031e6 <__strtok_r+0x42>
 80031c4:	6015      	str	r5, [r2, #0]
 80031c6:	0028      	movs	r0, r5
 80031c8:	e7f2      	b.n	80031b0 <__strtok_r+0xc>
 80031ca:	3601      	adds	r6, #1
 80031cc:	42bd      	cmp	r5, r7
 80031ce:	d1f4      	bne.n	80031ba <__strtok_r+0x16>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ee      	bne.n	80031b2 <__strtok_r+0xe>
 80031d4:	6014      	str	r4, [r2, #0]
 80031d6:	7003      	strb	r3, [r0, #0]
 80031d8:	e7ea      	b.n	80031b0 <__strtok_r+0xc>
 80031da:	0033      	movs	r3, r6
 80031dc:	e00d      	b.n	80031fa <__strtok_r+0x56>
 80031de:	3501      	adds	r5, #1
 80031e0:	2f00      	cmp	r7, #0
 80031e2:	d103      	bne.n	80031ec <__strtok_r+0x48>
 80031e4:	001c      	movs	r4, r3
 80031e6:	000d      	movs	r5, r1
 80031e8:	7826      	ldrb	r6, [r4, #0]
 80031ea:	1c63      	adds	r3, r4, #1
 80031ec:	782f      	ldrb	r7, [r5, #0]
 80031ee:	42be      	cmp	r6, r7
 80031f0:	d1f5      	bne.n	80031de <__strtok_r+0x3a>
 80031f2:	2e00      	cmp	r6, #0
 80031f4:	d0f1      	beq.n	80031da <__strtok_r+0x36>
 80031f6:	2100      	movs	r1, #0
 80031f8:	7021      	strb	r1, [r4, #0]
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e7d8      	b.n	80031b0 <__strtok_r+0xc>

080031fe <strtok_r>:
 80031fe:	b510      	push	{r4, lr}
 8003200:	2301      	movs	r3, #1
 8003202:	f7ff ffcf 	bl	80031a4 <__strtok_r>
 8003206:	bd10      	pop	{r4, pc}

08003208 <memchr>:
 8003208:	b2c9      	uxtb	r1, r1
 800320a:	1882      	adds	r2, r0, r2
 800320c:	4290      	cmp	r0, r2
 800320e:	d101      	bne.n	8003214 <memchr+0xc>
 8003210:	2000      	movs	r0, #0
 8003212:	4770      	bx	lr
 8003214:	7803      	ldrb	r3, [r0, #0]
 8003216:	428b      	cmp	r3, r1
 8003218:	d0fb      	beq.n	8003212 <memchr+0xa>
 800321a:	3001      	adds	r0, #1
 800321c:	e7f6      	b.n	800320c <memchr+0x4>

0800321e <memmem>:
 800321e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003220:	0007      	movs	r7, r0
 8003222:	9100      	str	r1, [sp, #0]
 8003224:	9201      	str	r2, [sp, #4]
 8003226:	001e      	movs	r6, r3
 8003228:	0004      	movs	r4, r0
 800322a:	000d      	movs	r5, r1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d109      	bne.n	8003244 <memmem+0x26>
 8003230:	0020      	movs	r0, r4
 8003232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003234:	0032      	movs	r2, r6
 8003236:	9901      	ldr	r1, [sp, #4]
 8003238:	0020      	movs	r0, r4
 800323a:	f000 f815 	bl	8003268 <memcmp>
 800323e:	2800      	cmp	r0, #0
 8003240:	d0f6      	beq.n	8003230 <memmem+0x12>
 8003242:	3d01      	subs	r5, #1
 8003244:	9b00      	ldr	r3, [sp, #0]
 8003246:	18fc      	adds	r4, r7, r3
 8003248:	1b64      	subs	r4, r4, r5
 800324a:	42b5      	cmp	r5, r6
 800324c:	d2f2      	bcs.n	8003234 <memmem+0x16>
 800324e:	2400      	movs	r4, #0
 8003250:	e7ee      	b.n	8003230 <memmem+0x12>

08003252 <strnlen>:
 8003252:	0003      	movs	r3, r0
 8003254:	1841      	adds	r1, r0, r1
 8003256:	428b      	cmp	r3, r1
 8003258:	d002      	beq.n	8003260 <strnlen+0xe>
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	2a00      	cmp	r2, #0
 800325e:	d101      	bne.n	8003264 <strnlen+0x12>
 8003260:	1a18      	subs	r0, r3, r0
 8003262:	4770      	bx	lr
 8003264:	3301      	adds	r3, #1
 8003266:	e7f6      	b.n	8003256 <strnlen+0x4>

08003268 <memcmp>:
 8003268:	b530      	push	{r4, r5, lr}
 800326a:	2400      	movs	r4, #0
 800326c:	42a2      	cmp	r2, r4
 800326e:	d101      	bne.n	8003274 <memcmp+0xc>
 8003270:	2000      	movs	r0, #0
 8003272:	e005      	b.n	8003280 <memcmp+0x18>
 8003274:	5d03      	ldrb	r3, [r0, r4]
 8003276:	1c65      	adds	r5, r4, #1
 8003278:	5d0c      	ldrb	r4, [r1, r4]
 800327a:	42a3      	cmp	r3, r4
 800327c:	d001      	beq.n	8003282 <memcmp+0x1a>
 800327e:	1b18      	subs	r0, r3, r4
 8003280:	bd30      	pop	{r4, r5, pc}
 8003282:	002c      	movs	r4, r5
 8003284:	e7f2      	b.n	800326c <memcmp+0x4>
	...

08003288 <_init>:
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800328e:	bc08      	pop	{r3}
 8003290:	469e      	mov	lr, r3
 8003292:	4770      	bx	lr

08003294 <_fini>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr
