
Antenna Switch 6x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  00020458  2**0
                  CONTENTS
  4 .ARM          00000000  08003c18  08003c18  00020458  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c18  08003c18  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08003c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000458  08004078  00020458  2**3
                  ALLOC
 10 ._user_heap_stack 00000444  2000091c  08004078  0002091c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc25  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000394b  00000000  00000000  0003c0a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007b0b  00000000  00000000  0003f9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c80  00000000  00000000  00047500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c50  00000000  00000000  00048180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00010150  00000000  00000000  00048dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e7ff  00000000  00000000  00058f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00045a66  00000000  00000000  0006771f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000ad185  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022c4  00000000  00000000  000ad200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000458 	.word	0x20000458
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003988 	.word	0x08003988

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000045c 	.word	0x2000045c
 8000104:	08003988 	.word	0x08003988

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fdda 	bl	8000e00 <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 f860 	bl	8000318 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 f820 	bl	80002a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
{
 8000268:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	2110      	movs	r1, #16
 8000270:	430b      	orrs	r3, r1
 8000272:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f003 f937 	bl	80034ec <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	200006f8 	.word	0x200006f8

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	200006f8 	.word	0x200006f8

080002a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a6:	2800      	cmp	r0, #0
 80002a8:	db11      	blt.n	80002ce <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	0884      	lsrs	r4, r0, #2
 80002ac:	4d13      	ldr	r5, [pc, #76]	; (80002fc <HAL_NVIC_SetPriority+0x58>)
 80002ae:	34c0      	adds	r4, #192	; 0xc0
 80002b0:	00a4      	lsls	r4, r4, #2
 80002b2:	5962      	ldr	r2, [r4, r5]
 80002b4:	2303      	movs	r3, #3
 80002b6:	4018      	ands	r0, r3
 80002b8:	00c0      	lsls	r0, r0, #3
 80002ba:	33fc      	adds	r3, #252	; 0xfc
 80002bc:	001e      	movs	r6, r3
 80002be:	4086      	lsls	r6, r0
 80002c0:	43b2      	bics	r2, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	0189      	lsls	r1, r1, #6
 80002c4:	400b      	ands	r3, r1
 80002c6:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4313      	orrs	r3, r2
 80002ca:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002cc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ce:	b2c0      	uxtb	r0, r0
 80002d0:	220f      	movs	r2, #15
 80002d2:	4002      	ands	r2, r0
 80002d4:	3a08      	subs	r2, #8
 80002d6:	0892      	lsrs	r2, r2, #2
 80002d8:	3206      	adds	r2, #6
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_NVIC_SetPriority+0x5c>)
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	685d      	ldr	r5, [r3, #4]
 80002e2:	2403      	movs	r4, #3
 80002e4:	4020      	ands	r0, r4
 80002e6:	00c0      	lsls	r0, r0, #3
 80002e8:	22ff      	movs	r2, #255	; 0xff
 80002ea:	0014      	movs	r4, r2
 80002ec:	4084      	lsls	r4, r0
 80002ee:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	0189      	lsls	r1, r1, #6
 80002f2:	400a      	ands	r2, r1
 80002f4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f6:	432a      	orrs	r2, r5
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	e7e7      	b.n	80002cc <HAL_NVIC_SetPriority+0x28>
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x10>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_SYSTICK_Config+0x2c>)
 800031c:	4298      	cmp	r0, r3
 800031e:	d80f      	bhi.n	8000340 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a09      	ldr	r2, [pc, #36]	; (8000348 <HAL_SYSTICK_Config+0x30>)
 8000322:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_SYSTICK_Config+0x34>)
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	021b      	lsls	r3, r3, #8
 800032a:	0a1b      	lsrs	r3, r3, #8
 800032c:	21c0      	movs	r1, #192	; 0xc0
 800032e:	0609      	lsls	r1, r1, #24
 8000330:	430b      	orrs	r3, r1
 8000332:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	2300      	movs	r3, #0
 8000336:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	3307      	adds	r3, #7
 800033a:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000340:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000342:	e7fc      	b.n	800033e <HAL_SYSTICK_Config+0x26>
 8000344:	00ffffff 	.word	0x00ffffff
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000350:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000352:	2321      	movs	r3, #33	; 0x21
 8000354:	5cc3      	ldrb	r3, [r0, r3]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d003      	beq.n	8000362 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800035a:	2304      	movs	r3, #4
 800035c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800035e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000360:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000362:	6802      	ldr	r2, [r0, #0]
 8000364:	6813      	ldr	r3, [r2, #0]
 8000366:	210e      	movs	r1, #14
 8000368:	438b      	bics	r3, r1
 800036a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800036c:	6801      	ldr	r1, [r0, #0]
 800036e:	680a      	ldr	r2, [r1, #0]
 8000370:	2301      	movs	r3, #1
 8000372:	439a      	bics	r2, r3
 8000374:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000376:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000378:	0019      	movs	r1, r3
 800037a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800037c:	40a1      	lsls	r1, r4
 800037e:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000380:	2221      	movs	r2, #33	; 0x21
 8000382:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000384:	331f      	adds	r3, #31
 8000386:	2200      	movs	r2, #0
 8000388:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 800038a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800038c:	2b00      	cmp	r3, #0
 800038e:	d002      	beq.n	8000396 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000390:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000392:	2000      	movs	r0, #0
 8000394:	e7e4      	b.n	8000360 <HAL_DMA_Abort_IT+0x10>
 8000396:	2000      	movs	r0, #0
 8000398:	e7e2      	b.n	8000360 <HAL_DMA_Abort_IT+0x10>
	...

0800039c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800039c:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <FLASH_Program_HalfWord+0x18>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <FLASH_Program_HalfWord+0x1c>)
 80003a6:	6913      	ldr	r3, [r2, #16]
 80003a8:	2401      	movs	r4, #1
 80003aa:	4323      	orrs	r3, r4
 80003ac:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80003ae:	8001      	strh	r1, [r0, #0]
}
 80003b0:	bd10      	pop	{r4, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	20000700 	.word	0x20000700
 80003b8:	40022000 	.word	0x40022000

080003bc <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80003bc:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <FLASH_SetErrorCode+0x34>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	06db      	lsls	r3, r3, #27
 80003c2:	d513      	bpl.n	80003ec <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80003c4:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <FLASH_SetErrorCode+0x38>)
 80003c6:	69d3      	ldr	r3, [r2, #28]
 80003c8:	2102      	movs	r1, #2
 80003ca:	430b      	orrs	r3, r1
 80003cc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 80003ce:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80003d0:	4a07      	ldr	r2, [pc, #28]	; (80003f0 <FLASH_SetErrorCode+0x34>)
 80003d2:	68d2      	ldr	r2, [r2, #12]
 80003d4:	0752      	lsls	r2, r2, #29
 80003d6:	d506      	bpl.n	80003e6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80003d8:	4906      	ldr	r1, [pc, #24]	; (80003f4 <FLASH_SetErrorCode+0x38>)
 80003da:	69ca      	ldr	r2, [r1, #28]
 80003dc:	2001      	movs	r0, #1
 80003de:	4302      	orrs	r2, r0
 80003e0:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 80003e2:	2204      	movs	r2, #4
 80003e4:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80003e6:	4a02      	ldr	r2, [pc, #8]	; (80003f0 <FLASH_SetErrorCode+0x34>)
 80003e8:	60d3      	str	r3, [r2, #12]
}  
 80003ea:	4770      	bx	lr
  uint32_t flags = 0U;
 80003ec:	2300      	movs	r3, #0
 80003ee:	e7ef      	b.n	80003d0 <FLASH_SetErrorCode+0x14>
 80003f0:	40022000 	.word	0x40022000
 80003f4:	20000700 	.word	0x20000700

080003f8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80003f8:	4b08      	ldr	r3, [pc, #32]	; (800041c <HAL_FLASH_Unlock+0x24>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	061b      	lsls	r3, r3, #24
 80003fe:	d50b      	bpl.n	8000418 <HAL_FLASH_Unlock+0x20>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <HAL_FLASH_Unlock+0x24>)
 8000402:	4a07      	ldr	r2, [pc, #28]	; (8000420 <HAL_FLASH_Unlock+0x28>)
 8000404:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000406:	4a07      	ldr	r2, [pc, #28]	; (8000424 <HAL_FLASH_Unlock+0x2c>)
 8000408:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	061b      	lsls	r3, r3, #24
 800040e:	d501      	bpl.n	8000414 <HAL_FLASH_Unlock+0x1c>
      status = HAL_ERROR;
 8000410:	2001      	movs	r0, #1
 8000412:	e002      	b.n	800041a <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8000414:	2000      	movs	r0, #0
 8000416:	e000      	b.n	800041a <HAL_FLASH_Unlock+0x22>
 8000418:	2000      	movs	r0, #0
}
 800041a:	4770      	bx	lr
 800041c:	40022000 	.word	0x40022000
 8000420:	45670123 	.word	0x45670123
 8000424:	cdef89ab 	.word	0xcdef89ab

08000428 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000428:	4a03      	ldr	r2, [pc, #12]	; (8000438 <HAL_FLASH_Lock+0x10>)
 800042a:	6913      	ldr	r3, [r2, #16]
 800042c:	2180      	movs	r1, #128	; 0x80
 800042e:	430b      	orrs	r3, r1
 8000430:	6113      	str	r3, [r2, #16]
}
 8000432:	2000      	movs	r0, #0
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40022000 	.word	0x40022000

0800043c <FLASH_WaitForLastOperation>:
{
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000440:	f7ff ff2a 	bl	8000298 <HAL_GetTick>
 8000444:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <FLASH_WaitForLastOperation+0x58>)
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	07db      	lsls	r3, r3, #31
 800044c:	d50a      	bpl.n	8000464 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 800044e:	1c63      	adds	r3, r4, #1
 8000450:	d0f9      	beq.n	8000446 <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000452:	2c00      	cmp	r4, #0
 8000454:	d019      	beq.n	800048a <FLASH_WaitForLastOperation+0x4e>
 8000456:	f7ff ff1f 	bl	8000298 <HAL_GetTick>
 800045a:	1b40      	subs	r0, r0, r5
 800045c:	42a0      	cmp	r0, r4
 800045e:	d9f2      	bls.n	8000446 <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000460:	2003      	movs	r0, #3
 8000462:	e011      	b.n	8000488 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000464:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <FLASH_WaitForLastOperation+0x58>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	069b      	lsls	r3, r3, #26
 800046a:	d502      	bpl.n	8000472 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <FLASH_WaitForLastOperation+0x58>)
 800046e:	2220      	movs	r2, #32
 8000470:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <FLASH_WaitForLastOperation+0x58>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	06db      	lsls	r3, r3, #27
 8000478:	d403      	bmi.n	8000482 <FLASH_WaitForLastOperation+0x46>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <FLASH_WaitForLastOperation+0x58>)
 800047c:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800047e:	075b      	lsls	r3, r3, #29
 8000480:	d505      	bpl.n	800048e <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8000482:	f7ff ff9b 	bl	80003bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000486:	2001      	movs	r0, #1
}
 8000488:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800048a:	2003      	movs	r0, #3
 800048c:	e7fc      	b.n	8000488 <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 800048e:	2000      	movs	r0, #0
 8000490:	e7fa      	b.n	8000488 <FLASH_WaitForLastOperation+0x4c>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	40022000 	.word	0x40022000

08000498 <HAL_FLASH_Program>:
{
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	46c6      	mov	lr, r8
 800049c:	b500      	push	{lr}
 800049e:	0004      	movs	r4, r0
 80004a0:	000d      	movs	r5, r1
 80004a2:	4690      	mov	r8, r2
 80004a4:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <HAL_FLASH_Program+0x94>)
 80004a8:	7e1b      	ldrb	r3, [r3, #24]
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d03b      	beq.n	8000526 <HAL_FLASH_Program+0x8e>
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <HAL_FLASH_Program+0x94>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004b4:	481e      	ldr	r0, [pc, #120]	; (8000530 <HAL_FLASH_Program+0x98>)
 80004b6:	f7ff ffc1 	bl	800043c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d12d      	bne.n	800051a <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80004be:	2c01      	cmp	r4, #1
 80004c0:	d006      	beq.n	80004d0 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80004c2:	2c02      	cmp	r4, #2
 80004c4:	d002      	beq.n	80004cc <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 80004c6:	2704      	movs	r7, #4
    for (index = 0U; index < nbiterations; index++)
 80004c8:	2400      	movs	r4, #0
 80004ca:	e01b      	b.n	8000504 <HAL_FLASH_Program+0x6c>
      nbiterations = 2U;
 80004cc:	2702      	movs	r7, #2
 80004ce:	e7fb      	b.n	80004c8 <HAL_FLASH_Program+0x30>
      nbiterations = 1U;
 80004d0:	2701      	movs	r7, #1
 80004d2:	e7f9      	b.n	80004c8 <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004d4:	2220      	movs	r2, #32
 80004d6:	1ad2      	subs	r2, r2, r3
 80004d8:	0031      	movs	r1, r6
 80004da:	4091      	lsls	r1, r2
 80004dc:	000a      	movs	r2, r1
 80004de:	4641      	mov	r1, r8
 80004e0:	40d9      	lsrs	r1, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	b289      	uxth	r1, r1
 80004e6:	1940      	adds	r0, r0, r5
 80004e8:	f7ff ff58 	bl	800039c <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <HAL_FLASH_Program+0x98>)
 80004ee:	f7ff ffa5 	bl	800043c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80004f2:	4a10      	ldr	r2, [pc, #64]	; (8000534 <HAL_FLASH_Program+0x9c>)
 80004f4:	6913      	ldr	r3, [r2, #16]
 80004f6:	2101      	movs	r1, #1
 80004f8:	438b      	bics	r3, r1
 80004fa:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d10c      	bne.n	800051a <HAL_FLASH_Program+0x82>
    for (index = 0U; index < nbiterations; index++)
 8000500:	3401      	adds	r4, #1
 8000502:	b2e4      	uxtb	r4, r4
 8000504:	42bc      	cmp	r4, r7
 8000506:	d208      	bcs.n	800051a <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000508:	0060      	lsls	r0, r4, #1
 800050a:	0123      	lsls	r3, r4, #4
 800050c:	2220      	movs	r2, #32
 800050e:	4252      	negs	r2, r2
 8000510:	189a      	adds	r2, r3, r2
 8000512:	d4df      	bmi.n	80004d4 <HAL_FLASH_Program+0x3c>
 8000514:	0031      	movs	r1, r6
 8000516:	40d1      	lsrs	r1, r2
 8000518:	e7e4      	b.n	80004e4 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_FLASH_Program+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	761a      	strb	r2, [r3, #24]
}
 8000520:	bc04      	pop	{r2}
 8000522:	4690      	mov	r8, r2
 8000524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8000526:	2002      	movs	r0, #2
 8000528:	e7fa      	b.n	8000520 <HAL_FLASH_Program+0x88>
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000700 	.word	0x20000700
 8000530:	0000c350 	.word	0x0000c350
 8000534:	40022000 	.word	0x40022000

08000538 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <FLASH_MassErase+0x1c>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <FLASH_MassErase+0x20>)
 8000540:	691a      	ldr	r2, [r3, #16]
 8000542:	2104      	movs	r1, #4
 8000544:	430a      	orrs	r2, r1
 8000546:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000548:	691a      	ldr	r2, [r3, #16]
 800054a:	313c      	adds	r1, #60	; 0x3c
 800054c:	430a      	orrs	r2, r1
 800054e:	611a      	str	r2, [r3, #16]
}
 8000550:	4770      	bx	lr
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	20000700 	.word	0x20000700
 8000558:	40022000 	.word	0x40022000

0800055c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <FLASH_PageErase+0x1c>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <FLASH_PageErase+0x20>)
 8000564:	691a      	ldr	r2, [r3, #16]
 8000566:	2102      	movs	r1, #2
 8000568:	430a      	orrs	r2, r1
 800056a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800056c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800056e:	691a      	ldr	r2, [r3, #16]
 8000570:	313e      	adds	r1, #62	; 0x3e
 8000572:	430a      	orrs	r2, r1
 8000574:	611a      	str	r2, [r3, #16]
}
 8000576:	4770      	bx	lr
 8000578:	20000700 	.word	0x20000700
 800057c:	40022000 	.word	0x40022000

08000580 <HAL_FLASHEx_Erase>:
{
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	0005      	movs	r5, r0
 8000584:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8000586:	4b24      	ldr	r3, [pc, #144]	; (8000618 <HAL_FLASHEx_Erase+0x98>)
 8000588:	7e1b      	ldrb	r3, [r3, #24]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d041      	beq.n	8000612 <HAL_FLASHEx_Erase+0x92>
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <HAL_FLASHEx_Erase+0x98>)
 8000590:	2201      	movs	r2, #1
 8000592:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000594:	6803      	ldr	r3, [r0, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d022      	beq.n	80005e0 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800059a:	4820      	ldr	r0, [pc, #128]	; (800061c <HAL_FLASHEx_Erase+0x9c>)
 800059c:	f7ff ff4e 	bl	800043c <FLASH_WaitForLastOperation>
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d131      	bne.n	8000608 <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 80005a4:	2301      	movs	r3, #1
 80005a6:	425b      	negs	r3, r3
 80005a8:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 80005aa:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80005ac:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80005ae:	68ab      	ldr	r3, [r5, #8]
 80005b0:	029b      	lsls	r3, r3, #10
 80005b2:	686a      	ldr	r2, [r5, #4]
 80005b4:	4694      	mov	ip, r2
 80005b6:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80005b8:	42a3      	cmp	r3, r4
 80005ba:	d926      	bls.n	800060a <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 80005bc:	0020      	movs	r0, r4
 80005be:	f7ff ffcd 	bl	800055c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005c2:	4816      	ldr	r0, [pc, #88]	; (800061c <HAL_FLASHEx_Erase+0x9c>)
 80005c4:	f7ff ff3a 	bl	800043c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80005c8:	4a15      	ldr	r2, [pc, #84]	; (8000620 <HAL_FLASHEx_Erase+0xa0>)
 80005ca:	6913      	ldr	r3, [r2, #16]
 80005cc:	2102      	movs	r1, #2
 80005ce:	438b      	bics	r3, r1
 80005d0:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80005d2:	2800      	cmp	r0, #0
 80005d4:	d116      	bne.n	8000604 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	469c      	mov	ip, r3
 80005dc:	4464      	add	r4, ip
 80005de:	e7e6      	b.n	80005ae <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <HAL_FLASHEx_Erase+0x9c>)
 80005e2:	f7ff ff2b 	bl	800043c <FLASH_WaitForLastOperation>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d001      	beq.n	80005ee <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80005ea:	2001      	movs	r0, #1
 80005ec:	e00d      	b.n	800060a <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 80005ee:	f7ff ffa3 	bl	8000538 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <HAL_FLASHEx_Erase+0x9c>)
 80005f4:	f7ff ff22 	bl	800043c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80005f8:	4a09      	ldr	r2, [pc, #36]	; (8000620 <HAL_FLASHEx_Erase+0xa0>)
 80005fa:	6913      	ldr	r3, [r2, #16]
 80005fc:	2104      	movs	r1, #4
 80005fe:	438b      	bics	r3, r1
 8000600:	6113      	str	r3, [r2, #16]
 8000602:	e002      	b.n	800060a <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 8000604:	6034      	str	r4, [r6, #0]
            break;
 8000606:	e000      	b.n	800060a <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 8000608:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <HAL_FLASHEx_Erase+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	761a      	strb	r2, [r3, #24]
}
 8000610:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 8000612:	2002      	movs	r0, #2
 8000614:	e7fc      	b.n	8000610 <HAL_FLASHEx_Erase+0x90>
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	20000700 	.word	0x20000700
 800061c:	0000c350 	.word	0x0000c350
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	46c6      	mov	lr, r8
 8000628:	b500      	push	{lr}
 800062a:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 800062c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800062e:	e038      	b.n	80006a2 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000630:	2603      	movs	r6, #3
 8000632:	e000      	b.n	8000636 <HAL_GPIO_Init+0x12>
 8000634:	2600      	movs	r6, #0
 8000636:	40ae      	lsls	r6, r5
 8000638:	0035      	movs	r5, r6
 800063a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800063c:	3402      	adds	r4, #2
 800063e:	00a4      	lsls	r4, r4, #2
 8000640:	4e55      	ldr	r6, [pc, #340]	; (8000798 <HAL_GPIO_Init+0x174>)
 8000642:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000644:	4c55      	ldr	r4, [pc, #340]	; (800079c <HAL_GPIO_Init+0x178>)
 8000646:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000648:	4642      	mov	r2, r8
 800064a:	43d4      	mvns	r4, r2
 800064c:	002e      	movs	r6, r5
 800064e:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000650:	684a      	ldr	r2, [r1, #4]
 8000652:	03d2      	lsls	r2, r2, #15
 8000654:	d502      	bpl.n	800065c <HAL_GPIO_Init+0x38>
        {
          SET_BIT(temp, iocurrent); 
 8000656:	4642      	mov	r2, r8
 8000658:	4315      	orrs	r5, r2
 800065a:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 800065c:	4d4f      	ldr	r5, [pc, #316]	; (800079c <HAL_GPIO_Init+0x178>)
 800065e:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000660:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000662:	002e      	movs	r6, r5
 8000664:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000666:	684a      	ldr	r2, [r1, #4]
 8000668:	0392      	lsls	r2, r2, #14
 800066a:	d502      	bpl.n	8000672 <HAL_GPIO_Init+0x4e>
        { 
          SET_BIT(temp, iocurrent); 
 800066c:	4642      	mov	r2, r8
 800066e:	4315      	orrs	r5, r2
 8000670:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8000672:	4d4a      	ldr	r5, [pc, #296]	; (800079c <HAL_GPIO_Init+0x178>)
 8000674:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000676:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000678:	002e      	movs	r6, r5
 800067a:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800067c:	684a      	ldr	r2, [r1, #4]
 800067e:	02d2      	lsls	r2, r2, #11
 8000680:	d502      	bpl.n	8000688 <HAL_GPIO_Init+0x64>
        {
          SET_BIT(temp, iocurrent); 
 8000682:	4642      	mov	r2, r8
 8000684:	4315      	orrs	r5, r2
 8000686:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8000688:	4d44      	ldr	r5, [pc, #272]	; (800079c <HAL_GPIO_Init+0x178>)
 800068a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 800068c:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800068e:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000690:	684a      	ldr	r2, [r1, #4]
 8000692:	0292      	lsls	r2, r2, #10
 8000694:	d502      	bpl.n	800069c <HAL_GPIO_Init+0x78>
        {
          SET_BIT(temp, iocurrent); 
 8000696:	4642      	mov	r2, r8
 8000698:	432a      	orrs	r2, r5
 800069a:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 800069c:	4a3f      	ldr	r2, [pc, #252]	; (800079c <HAL_GPIO_Init+0x178>)
 800069e:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 80006a0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006a2:	680a      	ldr	r2, [r1, #0]
 80006a4:	0014      	movs	r4, r2
 80006a6:	40dc      	lsrs	r4, r3
 80006a8:	d071      	beq.n	800078e <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006aa:	2501      	movs	r5, #1
 80006ac:	409d      	lsls	r5, r3
 80006ae:	402a      	ands	r2, r5
 80006b0:	4690      	mov	r8, r2
    if(iocurrent)
 80006b2:	d0f5      	beq.n	80006a0 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006b4:	684c      	ldr	r4, [r1, #4]
 80006b6:	2c02      	cmp	r4, #2
 80006b8:	d001      	beq.n	80006be <HAL_GPIO_Init+0x9a>
 80006ba:	2c12      	cmp	r4, #18
 80006bc:	d10e      	bne.n	80006dc <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3];
 80006be:	08dc      	lsrs	r4, r3, #3
 80006c0:	3408      	adds	r4, #8
 80006c2:	00a4      	lsls	r4, r4, #2
 80006c4:	5827      	ldr	r7, [r4, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80006c6:	2607      	movs	r6, #7
 80006c8:	401e      	ands	r6, r3
 80006ca:	00b6      	lsls	r6, r6, #2
 80006cc:	220f      	movs	r2, #15
 80006ce:	40b2      	lsls	r2, r6
 80006d0:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80006d2:	690a      	ldr	r2, [r1, #16]
 80006d4:	40b2      	lsls	r2, r6
 80006d6:	0016      	movs	r6, r2
 80006d8:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80006da:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 80006dc:	6802      	ldr	r2, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80006de:	005f      	lsls	r7, r3, #1
 80006e0:	2403      	movs	r4, #3
 80006e2:	0026      	movs	r6, r4
 80006e4:	40be      	lsls	r6, r7
 80006e6:	43f6      	mvns	r6, r6
 80006e8:	4032      	ands	r2, r6
 80006ea:	4694      	mov	ip, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006ec:	684a      	ldr	r2, [r1, #4]
 80006ee:	4014      	ands	r4, r2
 80006f0:	40bc      	lsls	r4, r7
 80006f2:	4662      	mov	r2, ip
 80006f4:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80006f6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006f8:	684c      	ldr	r4, [r1, #4]
 80006fa:	1e62      	subs	r2, r4, #1
 80006fc:	2a01      	cmp	r2, #1
 80006fe:	d903      	bls.n	8000708 <HAL_GPIO_Init+0xe4>
 8000700:	2c11      	cmp	r4, #17
 8000702:	d001      	beq.n	8000708 <HAL_GPIO_Init+0xe4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000704:	2c12      	cmp	r4, #18
 8000706:	d110      	bne.n	800072a <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR; 
 8000708:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800070a:	4034      	ands	r4, r6
 800070c:	46a4      	mov	ip, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800070e:	68cc      	ldr	r4, [r1, #12]
 8000710:	40bc      	lsls	r4, r7
 8000712:	4662      	mov	r2, ip
 8000714:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8000716:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000718:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800071a:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800071c:	684a      	ldr	r2, [r1, #4]
 800071e:	0912      	lsrs	r2, r2, #4
 8000720:	2501      	movs	r5, #1
 8000722:	4015      	ands	r5, r2
 8000724:	409d      	lsls	r5, r3
 8000726:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 8000728:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800072a:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800072c:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800072e:	688c      	ldr	r4, [r1, #8]
 8000730:	40bc      	lsls	r4, r7
 8000732:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000734:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000736:	684a      	ldr	r2, [r1, #4]
 8000738:	00d2      	lsls	r2, r2, #3
 800073a:	d5b1      	bpl.n	80006a0 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073c:	4d18      	ldr	r5, [pc, #96]	; (80007a0 <HAL_GPIO_Init+0x17c>)
 800073e:	69ae      	ldr	r6, [r5, #24]
 8000740:	2401      	movs	r4, #1
 8000742:	4326      	orrs	r6, r4
 8000744:	61ae      	str	r6, [r5, #24]
 8000746:	69ad      	ldr	r5, [r5, #24]
 8000748:	402c      	ands	r4, r5
 800074a:	9401      	str	r4, [sp, #4]
 800074c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800074e:	089c      	lsrs	r4, r3, #2
 8000750:	1ca5      	adds	r5, r4, #2
 8000752:	00ad      	lsls	r5, r5, #2
 8000754:	4e10      	ldr	r6, [pc, #64]	; (8000798 <HAL_GPIO_Init+0x174>)
 8000756:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000758:	2503      	movs	r5, #3
 800075a:	401d      	ands	r5, r3
 800075c:	00ad      	lsls	r5, r5, #2
 800075e:	260f      	movs	r6, #15
 8000760:	40ae      	lsls	r6, r5
 8000762:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000764:	2690      	movs	r6, #144	; 0x90
 8000766:	05f6      	lsls	r6, r6, #23
 8000768:	42b0      	cmp	r0, r6
 800076a:	d100      	bne.n	800076e <HAL_GPIO_Init+0x14a>
 800076c:	e762      	b.n	8000634 <HAL_GPIO_Init+0x10>
 800076e:	4e0d      	ldr	r6, [pc, #52]	; (80007a4 <HAL_GPIO_Init+0x180>)
 8000770:	42b0      	cmp	r0, r6
 8000772:	d008      	beq.n	8000786 <HAL_GPIO_Init+0x162>
 8000774:	4e0c      	ldr	r6, [pc, #48]	; (80007a8 <HAL_GPIO_Init+0x184>)
 8000776:	42b0      	cmp	r0, r6
 8000778:	d007      	beq.n	800078a <HAL_GPIO_Init+0x166>
 800077a:	4e0c      	ldr	r6, [pc, #48]	; (80007ac <HAL_GPIO_Init+0x188>)
 800077c:	42b0      	cmp	r0, r6
 800077e:	d100      	bne.n	8000782 <HAL_GPIO_Init+0x15e>
 8000780:	e756      	b.n	8000630 <HAL_GPIO_Init+0xc>
 8000782:	2605      	movs	r6, #5
 8000784:	e757      	b.n	8000636 <HAL_GPIO_Init+0x12>
 8000786:	2601      	movs	r6, #1
 8000788:	e755      	b.n	8000636 <HAL_GPIO_Init+0x12>
 800078a:	2602      	movs	r6, #2
 800078c:	e753      	b.n	8000636 <HAL_GPIO_Init+0x12>
  } 
}
 800078e:	b002      	add	sp, #8
 8000790:	bc04      	pop	{r2}
 8000792:	4690      	mov	r8, r2
 8000794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40010000 	.word	0x40010000
 800079c:	40010400 	.word	0x40010400
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400
 80007a8:	48000800 	.word	0x48000800
 80007ac:	48000c00 	.word	0x48000c00

080007b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007b0:	6903      	ldr	r3, [r0, #16]
 80007b2:	420b      	tst	r3, r1
 80007b4:	d101      	bne.n	80007ba <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007b6:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 80007b8:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80007ba:	2001      	movs	r0, #1
 80007bc:	e7fc      	b.n	80007b8 <HAL_GPIO_ReadPin+0x8>

080007be <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007be:	2a00      	cmp	r2, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007c2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80007c4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007c6:	6181      	str	r1, [r0, #24]
 80007c8:	e7fc      	b.n	80007c4 <HAL_GPIO_WritePin+0x6>

080007ca <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80007ca:	4770      	bx	lr

080007cc <HAL_GPIO_EXTI_IRQHandler>:
{
 80007cc:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4218      	tst	r0, r3
 80007d4:	d100      	bne.n	80007d8 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80007d6:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007d8:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80007da:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007dc:	f7ff fff5 	bl	80007ca <HAL_GPIO_EXTI_Callback>
}
 80007e0:	e7f9      	b.n	80007d6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	40010400 	.word	0x40010400

080007e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ee:	6803      	ldr	r3, [r0, #0]
 80007f0:	07db      	lsls	r3, r3, #31
 80007f2:	d526      	bpl.n	8000842 <HAL_RCC_OscConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007f4:	4bae      	ldr	r3, [pc, #696]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	230c      	movs	r3, #12
 80007fa:	4013      	ands	r3, r2
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d018      	beq.n	8000832 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000800:	4bab      	ldr	r3, [pc, #684]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	230c      	movs	r3, #12
 8000806:	4013      	ands	r3, r2
 8000808:	2b08      	cmp	r3, #8
 800080a:	d00e      	beq.n	800082a <HAL_RCC_OscConfig+0x42>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800080c:	6863      	ldr	r3, [r4, #4]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d03c      	beq.n	800088c <HAL_RCC_OscConfig+0xa4>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d151      	bne.n	80008ba <HAL_RCC_OscConfig+0xd2>
 8000816:	4ba6      	ldr	r3, [pc, #664]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	49a6      	ldr	r1, [pc, #664]	; (8000ab4 <HAL_RCC_OscConfig+0x2cc>)
 800081c:	400a      	ands	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	49a5      	ldr	r1, [pc, #660]	; (8000ab8 <HAL_RCC_OscConfig+0x2d0>)
 8000824:	400a      	ands	r2, r1
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	e036      	b.n	8000898 <HAL_RCC_OscConfig+0xb0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800082a:	4ba1      	ldr	r3, [pc, #644]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	d5ec      	bpl.n	800080c <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000832:	4b9f      	ldr	r3, [pc, #636]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	039b      	lsls	r3, r3, #14
 8000838:	d503      	bpl.n	8000842 <HAL_RCC_OscConfig+0x5a>
 800083a:	6863      	ldr	r3, [r4, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d100      	bne.n	8000842 <HAL_RCC_OscConfig+0x5a>
 8000840:	e1ec      	b.n	8000c1c <HAL_RCC_OscConfig+0x434>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000842:	6823      	ldr	r3, [r4, #0]
 8000844:	079b      	lsls	r3, r3, #30
 8000846:	d573      	bpl.n	8000930 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000848:	4b99      	ldr	r3, [pc, #612]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	220c      	movs	r2, #12
 800084e:	421a      	tst	r2, r3
 8000850:	d05d      	beq.n	800090e <HAL_RCC_OscConfig+0x126>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000852:	4b97      	ldr	r3, [pc, #604]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000854:	685a      	ldr	r2, [r3, #4]
 8000856:	230c      	movs	r3, #12
 8000858:	4013      	ands	r3, r2
 800085a:	2b08      	cmp	r3, #8
 800085c:	d053      	beq.n	8000906 <HAL_RCC_OscConfig+0x11e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800085e:	68e3      	ldr	r3, [r4, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d100      	bne.n	8000866 <HAL_RCC_OscConfig+0x7e>
 8000864:	e086      	b.n	8000974 <HAL_RCC_OscConfig+0x18c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000866:	4a92      	ldr	r2, [pc, #584]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000868:	6813      	ldr	r3, [r2, #0]
 800086a:	2101      	movs	r1, #1
 800086c:	430b      	orrs	r3, r1
 800086e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000870:	f7ff fd12 	bl	8000298 <HAL_GetTick>
 8000874:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000876:	4b8e      	ldr	r3, [pc, #568]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	079b      	lsls	r3, r3, #30
 800087c:	d471      	bmi.n	8000962 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800087e:	f7ff fd0b 	bl	8000298 <HAL_GetTick>
 8000882:	1b40      	subs	r0, r0, r5
 8000884:	2802      	cmp	r0, #2
 8000886:	d9f6      	bls.n	8000876 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_TIMEOUT;
 8000888:	2003      	movs	r0, #3
 800088a:	e1ca      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800088c:	4a88      	ldr	r2, [pc, #544]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800088e:	6811      	ldr	r1, [r2, #0]
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	025b      	lsls	r3, r3, #9
 8000894:	430b      	orrs	r3, r1
 8000896:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000898:	6863      	ldr	r3, [r4, #4]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d025      	beq.n	80008ea <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 800089e:	f7ff fcfb 	bl	8000298 <HAL_GetTick>
 80008a2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008a4:	4b82      	ldr	r3, [pc, #520]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	039b      	lsls	r3, r3, #14
 80008aa:	d4ca      	bmi.n	8000842 <HAL_RCC_OscConfig+0x5a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fcf4 	bl	8000298 <HAL_GetTick>
 80008b0:	1b40      	subs	r0, r0, r5
 80008b2:	2864      	cmp	r0, #100	; 0x64
 80008b4:	d9f6      	bls.n	80008a4 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e1b3      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	2b05      	cmp	r3, #5
 80008bc:	d009      	beq.n	80008d2 <HAL_RCC_OscConfig+0xea>
 80008be:	4b7c      	ldr	r3, [pc, #496]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	497c      	ldr	r1, [pc, #496]	; (8000ab4 <HAL_RCC_OscConfig+0x2cc>)
 80008c4:	400a      	ands	r2, r1
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	497b      	ldr	r1, [pc, #492]	; (8000ab8 <HAL_RCC_OscConfig+0x2d0>)
 80008cc:	400a      	ands	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	e7e2      	b.n	8000898 <HAL_RCC_OscConfig+0xb0>
 80008d2:	4b77      	ldr	r3, [pc, #476]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	2280      	movs	r2, #128	; 0x80
 80008d8:	02d2      	lsls	r2, r2, #11
 80008da:	430a      	orrs	r2, r1
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	6819      	ldr	r1, [r3, #0]
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	0252      	lsls	r2, r2, #9
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e7d6      	b.n	8000898 <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 80008ea:	f7ff fcd5 	bl	8000298 <HAL_GetTick>
 80008ee:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f0:	4b6f      	ldr	r3, [pc, #444]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	039b      	lsls	r3, r3, #14
 80008f6:	d5a4      	bpl.n	8000842 <HAL_RCC_OscConfig+0x5a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008f8:	f7ff fcce 	bl	8000298 <HAL_GetTick>
 80008fc:	1b40      	subs	r0, r0, r5
 80008fe:	2864      	cmp	r0, #100	; 0x64
 8000900:	d9f6      	bls.n	80008f0 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 8000902:	2003      	movs	r0, #3
 8000904:	e18d      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000906:	4b6a      	ldr	r3, [pc, #424]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	03db      	lsls	r3, r3, #15
 800090c:	d4a7      	bmi.n	800085e <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800090e:	4b68      	ldr	r3, [pc, #416]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	079b      	lsls	r3, r3, #30
 8000914:	d504      	bpl.n	8000920 <HAL_RCC_OscConfig+0x138>
 8000916:	68e3      	ldr	r3, [r4, #12]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d001      	beq.n	8000920 <HAL_RCC_OscConfig+0x138>
        return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
 800091e:	e180      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000920:	4963      	ldr	r1, [pc, #396]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000922:	680b      	ldr	r3, [r1, #0]
 8000924:	22f8      	movs	r2, #248	; 0xf8
 8000926:	4393      	bics	r3, r2
 8000928:	6922      	ldr	r2, [r4, #16]
 800092a:	00d2      	lsls	r2, r2, #3
 800092c:	4313      	orrs	r3, r2
 800092e:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	071b      	lsls	r3, r3, #28
 8000934:	d544      	bpl.n	80009c0 <HAL_RCC_OscConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000936:	69e3      	ldr	r3, [r4, #28]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d02e      	beq.n	800099a <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800093c:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800093e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000940:	2101      	movs	r1, #1
 8000942:	430b      	orrs	r3, r1
 8000944:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000946:	f7ff fca7 	bl	8000298 <HAL_GetTick>
 800094a:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800094c:	4b58      	ldr	r3, [pc, #352]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800094e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000950:	079b      	lsls	r3, r3, #30
 8000952:	d435      	bmi.n	80009c0 <HAL_RCC_OscConfig+0x1d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000954:	f7ff fca0 	bl	8000298 <HAL_GetTick>
 8000958:	1b40      	subs	r0, r0, r5
 800095a:	2802      	cmp	r0, #2
 800095c:	d9f6      	bls.n	800094c <HAL_RCC_OscConfig+0x164>
        {
          return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
 8000960:	e15f      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000962:	4953      	ldr	r1, [pc, #332]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000964:	680b      	ldr	r3, [r1, #0]
 8000966:	22f8      	movs	r2, #248	; 0xf8
 8000968:	4393      	bics	r3, r2
 800096a:	6922      	ldr	r2, [r4, #16]
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	4313      	orrs	r3, r2
 8000970:	600b      	str	r3, [r1, #0]
 8000972:	e7dd      	b.n	8000930 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8000974:	4a4e      	ldr	r2, [pc, #312]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000976:	6813      	ldr	r3, [r2, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	438b      	bics	r3, r1
 800097c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800097e:	f7ff fc8b 	bl	8000298 <HAL_GetTick>
 8000982:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000984:	4b4a      	ldr	r3, [pc, #296]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	079b      	lsls	r3, r3, #30
 800098a:	d5d1      	bpl.n	8000930 <HAL_RCC_OscConfig+0x148>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800098c:	f7ff fc84 	bl	8000298 <HAL_GetTick>
 8000990:	1b40      	subs	r0, r0, r5
 8000992:	2802      	cmp	r0, #2
 8000994:	d9f6      	bls.n	8000984 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8000996:	2003      	movs	r0, #3
 8000998:	e143      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800099a:	4a45      	ldr	r2, [pc, #276]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 800099c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800099e:	2101      	movs	r1, #1
 80009a0:	438b      	bics	r3, r1
 80009a2:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009a4:	f7ff fc78 	bl	8000298 <HAL_GetTick>
 80009a8:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	079b      	lsls	r3, r3, #30
 80009b0:	d506      	bpl.n	80009c0 <HAL_RCC_OscConfig+0x1d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b2:	f7ff fc71 	bl	8000298 <HAL_GetTick>
 80009b6:	1b40      	subs	r0, r0, r5
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9f6      	bls.n	80009aa <HAL_RCC_OscConfig+0x1c2>
        {
          return HAL_TIMEOUT;
 80009bc:	2003      	movs	r0, #3
 80009be:	e130      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	075b      	lsls	r3, r3, #29
 80009c4:	d400      	bmi.n	80009c8 <HAL_RCC_OscConfig+0x1e0>
 80009c6:	e07f      	b.n	8000ac8 <HAL_RCC_OscConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	d41d      	bmi.n	8000a0c <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	4a37      	ldr	r2, [pc, #220]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80009d2:	69d1      	ldr	r1, [r2, #28]
 80009d4:	2080      	movs	r0, #128	; 0x80
 80009d6:	0540      	lsls	r0, r0, #21
 80009d8:	4301      	orrs	r1, r0
 80009da:	61d1      	str	r1, [r2, #28]
 80009dc:	69d3      	ldr	r3, [r2, #28]
 80009de:	4003      	ands	r3, r0
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009e4:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	05db      	lsls	r3, r3, #23
 80009ec:	d510      	bpl.n	8000a10 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ee:	68a3      	ldr	r3, [r4, #8]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d021      	beq.n	8000a38 <HAL_RCC_OscConfig+0x250>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d136      	bne.n	8000a66 <HAL_RCC_OscConfig+0x27e>
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 80009fa:	6a1a      	ldr	r2, [r3, #32]
 80009fc:	2101      	movs	r1, #1
 80009fe:	438a      	bics	r2, r1
 8000a00:	621a      	str	r2, [r3, #32]
 8000a02:	6a1a      	ldr	r2, [r3, #32]
 8000a04:	3103      	adds	r1, #3
 8000a06:	438a      	bics	r2, r1
 8000a08:	621a      	str	r2, [r3, #32]
 8000a0a:	e01a      	b.n	8000a42 <HAL_RCC_OscConfig+0x25a>
    FlagStatus       pwrclkchanged = RESET;
 8000a0c:	2500      	movs	r5, #0
 8000a0e:	e7ea      	b.n	80009e6 <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a10:	4a2a      	ldr	r2, [pc, #168]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000a12:	6811      	ldr	r1, [r2, #0]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	430b      	orrs	r3, r1
 8000a1a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a1c:	f7ff fc3c 	bl	8000298 <HAL_GetTick>
 8000a20:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <HAL_RCC_OscConfig+0x2d4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	d4e1      	bmi.n	80009ee <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a2a:	f7ff fc35 	bl	8000298 <HAL_GetTick>
 8000a2e:	1b80      	subs	r0, r0, r6
 8000a30:	2864      	cmp	r0, #100	; 0x64
 8000a32:	d9f6      	bls.n	8000a22 <HAL_RCC_OscConfig+0x23a>
          return HAL_TIMEOUT;
 8000a34:	2003      	movs	r0, #3
 8000a36:	e0f4      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000a3a:	6a13      	ldr	r3, [r2, #32]
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d024      	beq.n	8000a92 <HAL_RCC_OscConfig+0x2aa>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a48:	f7ff fc26 	bl	8000298 <HAL_GetTick>
 8000a4c:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	079b      	lsls	r3, r3, #30
 8000a54:	d436      	bmi.n	8000ac4 <HAL_RCC_OscConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a56:	f7ff fc1f 	bl	8000298 <HAL_GetTick>
 8000a5a:	1b80      	subs	r0, r0, r6
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_RCC_OscConfig+0x2d8>)
 8000a5e:	4298      	cmp	r0, r3
 8000a60:	d9f5      	bls.n	8000a4e <HAL_RCC_OscConfig+0x266>
        {
          return HAL_TIMEOUT;
 8000a62:	2003      	movs	r0, #3
 8000a64:	e0dd      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a66:	2b05      	cmp	r3, #5
 8000a68:	d009      	beq.n	8000a7e <HAL_RCC_OscConfig+0x296>
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000a6c:	6a1a      	ldr	r2, [r3, #32]
 8000a6e:	2101      	movs	r1, #1
 8000a70:	438a      	bics	r2, r1
 8000a72:	621a      	str	r2, [r3, #32]
 8000a74:	6a1a      	ldr	r2, [r3, #32]
 8000a76:	3103      	adds	r1, #3
 8000a78:	438a      	bics	r2, r1
 8000a7a:	621a      	str	r2, [r3, #32]
 8000a7c:	e7e1      	b.n	8000a42 <HAL_RCC_OscConfig+0x25a>
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000a80:	6a1a      	ldr	r2, [r3, #32]
 8000a82:	2104      	movs	r1, #4
 8000a84:	430a      	orrs	r2, r1
 8000a86:	621a      	str	r2, [r3, #32]
 8000a88:	6a1a      	ldr	r2, [r3, #32]
 8000a8a:	3903      	subs	r1, #3
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	621a      	str	r2, [r3, #32]
 8000a90:	e7d7      	b.n	8000a42 <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a92:	f7ff fc01 	bl	8000298 <HAL_GetTick>
 8000a96:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_RCC_OscConfig+0x2c8>)
 8000a9a:	6a1b      	ldr	r3, [r3, #32]
 8000a9c:	079b      	lsls	r3, r3, #30
 8000a9e:	d511      	bpl.n	8000ac4 <HAL_RCC_OscConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aa0:	f7ff fbfa 	bl	8000298 <HAL_GetTick>
 8000aa4:	1b80      	subs	r0, r0, r6
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_RCC_OscConfig+0x2d8>)
 8000aa8:	4298      	cmp	r0, r3
 8000aaa:	d9f5      	bls.n	8000a98 <HAL_RCC_OscConfig+0x2b0>
        {
          return HAL_TIMEOUT;
 8000aac:	2003      	movs	r0, #3
 8000aae:	e0b8      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	fffeffff 	.word	0xfffeffff
 8000ab8:	fffbffff 	.word	0xfffbffff
 8000abc:	40007000 	.word	0x40007000
 8000ac0:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ac4:	2d01      	cmp	r5, #1
 8000ac6:	d033      	beq.n	8000b30 <HAL_RCC_OscConfig+0x348>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	06db      	lsls	r3, r3, #27
 8000acc:	d510      	bpl.n	8000af0 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ace:	6963      	ldr	r3, [r4, #20]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d033      	beq.n	8000b3c <HAL_RCC_OscConfig+0x354>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ad4:	3305      	adds	r3, #5
 8000ad6:	d151      	bne.n	8000b7c <HAL_RCC_OscConfig+0x394>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ad8:	4a54      	ldr	r2, [pc, #336]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000ada:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000adc:	2104      	movs	r1, #4
 8000ade:	438b      	bics	r3, r1
 8000ae0:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ae2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000ae4:	31f4      	adds	r1, #244	; 0xf4
 8000ae6:	438b      	bics	r3, r1
 8000ae8:	69a1      	ldr	r1, [r4, #24]
 8000aea:	00c9      	lsls	r1, r1, #3
 8000aec:	430b      	orrs	r3, r1
 8000aee:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000af0:	6a23      	ldr	r3, [r4, #32]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d100      	bne.n	8000af8 <HAL_RCC_OscConfig+0x310>
 8000af6:	e093      	b.n	8000c20 <HAL_RCC_OscConfig+0x438>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af8:	4a4c      	ldr	r2, [pc, #304]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000afa:	6851      	ldr	r1, [r2, #4]
 8000afc:	220c      	movs	r2, #12
 8000afe:	400a      	ands	r2, r1
 8000b00:	2a08      	cmp	r2, #8
 8000b02:	d100      	bne.n	8000b06 <HAL_RCC_OscConfig+0x31e>
 8000b04:	e08f      	b.n	8000c26 <HAL_RCC_OscConfig+0x43e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d04f      	beq.n	8000baa <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b0a:	4a48      	ldr	r2, [pc, #288]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	4948      	ldr	r1, [pc, #288]	; (8000c30 <HAL_RCC_OscConfig+0x448>)
 8000b10:	400b      	ands	r3, r1
 8000b12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b14:	f7ff fbc0 	bl	8000298 <HAL_GetTick>
 8000b18:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b1a:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	019b      	lsls	r3, r3, #6
 8000b20:	d57a      	bpl.n	8000c18 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b22:	f7ff fbb9 	bl	8000298 <HAL_GetTick>
 8000b26:	1b00      	subs	r0, r0, r4
 8000b28:	2802      	cmp	r0, #2
 8000b2a:	d9f6      	bls.n	8000b1a <HAL_RCC_OscConfig+0x332>
          {
            return HAL_TIMEOUT;
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	e078      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b30:	4a3e      	ldr	r2, [pc, #248]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b32:	69d3      	ldr	r3, [r2, #28]
 8000b34:	493f      	ldr	r1, [pc, #252]	; (8000c34 <HAL_RCC_OscConfig+0x44c>)
 8000b36:	400b      	ands	r3, r1
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	e7c5      	b.n	8000ac8 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b3c:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b40:	2104      	movs	r1, #4
 8000b42:	430a      	orrs	r2, r1
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b48:	3903      	subs	r1, #3
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fba3 	bl	8000298 <HAL_GetTick>
 8000b52:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b58:	079b      	lsls	r3, r3, #30
 8000b5a:	d406      	bmi.n	8000b6a <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b5c:	f7ff fb9c 	bl	8000298 <HAL_GetTick>
 8000b60:	1b40      	subs	r0, r0, r5
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d9f6      	bls.n	8000b54 <HAL_RCC_OscConfig+0x36c>
          return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	e05b      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b6a:	4930      	ldr	r1, [pc, #192]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b6c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000b6e:	22f8      	movs	r2, #248	; 0xf8
 8000b70:	4393      	bics	r3, r2
 8000b72:	69a2      	ldr	r2, [r4, #24]
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	634b      	str	r3, [r1, #52]	; 0x34
 8000b7a:	e7b9      	b.n	8000af0 <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b80:	2104      	movs	r1, #4
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b88:	3903      	subs	r1, #3
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fb83 	bl	8000298 <HAL_GetTick>
 8000b92:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b98:	079b      	lsls	r3, r3, #30
 8000b9a:	d5a9      	bpl.n	8000af0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b9c:	f7ff fb7c 	bl	8000298 <HAL_GetTick>
 8000ba0:	1b40      	subs	r0, r0, r5
 8000ba2:	2802      	cmp	r0, #2
 8000ba4:	d9f6      	bls.n	8000b94 <HAL_RCC_OscConfig+0x3ac>
          return HAL_TIMEOUT;
 8000ba6:	2003      	movs	r0, #3
 8000ba8:	e03b      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8000baa:	4a20      	ldr	r2, [pc, #128]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000bac:	6813      	ldr	r3, [r2, #0]
 8000bae:	4920      	ldr	r1, [pc, #128]	; (8000c30 <HAL_RCC_OscConfig+0x448>)
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000bb4:	f7ff fb70 	bl	8000298 <HAL_GetTick>
 8000bb8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	019b      	lsls	r3, r3, #6
 8000bc0:	d506      	bpl.n	8000bd0 <HAL_RCC_OscConfig+0x3e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc2:	f7ff fb69 	bl	8000298 <HAL_GetTick>
 8000bc6:	1b40      	subs	r0, r0, r5
 8000bc8:	2802      	cmp	r0, #2
 8000bca:	d9f6      	bls.n	8000bba <HAL_RCC_OscConfig+0x3d2>
            return HAL_TIMEOUT;
 8000bcc:	2003      	movs	r0, #3
 8000bce:	e028      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd4:	210f      	movs	r1, #15
 8000bd6:	438a      	bics	r2, r1
 8000bd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	4915      	ldr	r1, [pc, #84]	; (8000c38 <HAL_RCC_OscConfig+0x450>)
 8000be2:	400a      	ands	r2, r1
 8000be4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000be8:	4301      	orrs	r1, r0
 8000bea:	430a      	orrs	r2, r1
 8000bec:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	0452      	lsls	r2, r2, #17
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fb4e 	bl	8000298 <HAL_GetTick>
 8000bfc:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_RCC_OscConfig+0x444>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	019b      	lsls	r3, r3, #6
 8000c04:	d406      	bmi.n	8000c14 <HAL_RCC_OscConfig+0x42c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c06:	f7ff fb47 	bl	8000298 <HAL_GetTick>
 8000c0a:	1b00      	subs	r0, r0, r4
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f6      	bls.n	8000bfe <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 8000c10:	2003      	movs	r0, #3
 8000c12:	e006      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000c14:	2000      	movs	r0, #0
 8000c16:	e004      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
 8000c18:	2000      	movs	r0, #0
 8000c1a:	e002      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
        return HAL_ERROR;
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	e000      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 8000c20:	2000      	movs	r0, #0
}
 8000c22:	b002      	add	sp, #8
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000c26:	2001      	movs	r0, #1
 8000c28:	e7fb      	b.n	8000c22 <HAL_RCC_OscConfig+0x43a>
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	feffffff 	.word	0xfeffffff
 8000c34:	efffffff 	.word	0xefffffff
 8000c38:	ffc2ffff 	.word	0xffc2ffff

08000c3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c3c:	b530      	push	{r4, r5, lr}
 8000c3e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c40:	aa04      	add	r2, sp, #16
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	c832      	ldmia	r0!, {r1, r4, r5}
 8000c48:	c232      	stmia	r2!, {r1, r4, r5}
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	6802      	ldr	r2, [r0, #0]
 8000c4e:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000c50:	466a      	mov	r2, sp
 8000c52:	3310      	adds	r3, #16
 8000c54:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000c56:	c213      	stmia	r2!, {r0, r1, r4}
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c5e:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c60:	230c      	movs	r3, #12
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d119      	bne.n	8000c9c <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c68:	0c91      	lsrs	r1, r2, #18
 8000c6a:	3307      	adds	r3, #7
 8000c6c:	4019      	ands	r1, r3
 8000c6e:	a804      	add	r0, sp, #16
 8000c70:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000c72:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c74:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000c76:	400b      	ands	r3, r1
 8000c78:	4669      	mov	r1, sp
 8000c7a:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000c7c:	03d3      	lsls	r3, r2, #15
 8000c7e:	d408      	bmi.n	8000c92 <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000c80:	0163      	lsls	r3, r4, #5
 8000c82:	1b1b      	subs	r3, r3, r4
 8000c84:	0198      	lsls	r0, r3, #6
 8000c86:	1ac0      	subs	r0, r0, r3
 8000c88:	00c0      	lsls	r0, r0, #3
 8000c8a:	1904      	adds	r4, r0, r4
 8000c8c:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c8e:	b009      	add	sp, #36	; 0x24
 8000c90:	bd30      	pop	{r4, r5, pc}
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c94:	f7ff fa4a 	bl	800012c <__udivsi3>
 8000c98:	4360      	muls	r0, r4
 8000c9a:	e7f8      	b.n	8000c8e <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000c9e:	e7f6      	b.n	8000c8e <HAL_RCC_GetSysClockFreq+0x52>
 8000ca0:	080039a0 	.word	0x080039a0
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	007a1200 	.word	0x007a1200

08000cac <HAL_RCC_ClockConfig>:
{
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	0005      	movs	r5, r0
 8000cb0:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cb2:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <HAL_RCC_ClockConfig+0x13c>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d20b      	bcs.n	8000cd6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cbe:	494a      	ldr	r1, [pc, #296]	; (8000de8 <HAL_RCC_ClockConfig+0x13c>)
 8000cc0:	680b      	ldr	r3, [r1, #0]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4393      	bics	r3, r2
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cca:	680b      	ldr	r3, [r1, #0]
 8000ccc:	401a      	ands	r2, r3
 8000cce:	42a2      	cmp	r2, r4
 8000cd0:	d001      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
}
 8000cd4:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	079b      	lsls	r3, r3, #30
 8000cda:	d506      	bpl.n	8000cea <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cdc:	4a43      	ldr	r2, [pc, #268]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000cde:	6853      	ldr	r3, [r2, #4]
 8000ce0:	21f0      	movs	r1, #240	; 0xf0
 8000ce2:	438b      	bics	r3, r1
 8000ce4:	68a9      	ldr	r1, [r5, #8]
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cea:	682b      	ldr	r3, [r5, #0]
 8000cec:	07db      	lsls	r3, r3, #31
 8000cee:	d54b      	bpl.n	8000d88 <HAL_RCC_ClockConfig+0xdc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cf0:	686b      	ldr	r3, [r5, #4]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d020      	beq.n	8000d38 <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d024      	beq.n	8000d44 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfa:	4a3c      	ldr	r2, [pc, #240]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	0792      	lsls	r2, r2, #30
 8000d00:	d56f      	bpl.n	8000de2 <HAL_RCC_ClockConfig+0x136>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d02:	493a      	ldr	r1, [pc, #232]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000d04:	684a      	ldr	r2, [r1, #4]
 8000d06:	2003      	movs	r0, #3
 8000d08:	4382      	bics	r2, r0
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000d0e:	f7ff fac3 	bl	8000298 <HAL_GetTick>
 8000d12:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d14:	686b      	ldr	r3, [r5, #4]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d01a      	beq.n	8000d50 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d026      	beq.n	8000d6c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d1e:	4b33      	ldr	r3, [pc, #204]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	220c      	movs	r2, #12
 8000d24:	421a      	tst	r2, r3
 8000d26:	d02f      	beq.n	8000d88 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d28:	f7ff fab6 	bl	8000298 <HAL_GetTick>
 8000d2c:	1b80      	subs	r0, r0, r6
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <HAL_RCC_ClockConfig+0x144>)
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d9f4      	bls.n	8000d1e <HAL_RCC_ClockConfig+0x72>
          return HAL_TIMEOUT;
 8000d34:	2003      	movs	r0, #3
 8000d36:	e7cd      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d38:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	0392      	lsls	r2, r2, #14
 8000d3e:	d4e0      	bmi.n	8000d02 <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8000d40:	2001      	movs	r0, #1
 8000d42:	e7c7      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d44:	4a29      	ldr	r2, [pc, #164]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	0192      	lsls	r2, r2, #6
 8000d4a:	d4da      	bmi.n	8000d02 <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	e7c1      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	230c      	movs	r3, #12
 8000d56:	4013      	ands	r3, r2
 8000d58:	2b04      	cmp	r3, #4
 8000d5a:	d015      	beq.n	8000d88 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff fa9c 	bl	8000298 <HAL_GetTick>
 8000d60:	1b80      	subs	r0, r0, r6
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <HAL_RCC_ClockConfig+0x144>)
 8000d64:	4298      	cmp	r0, r3
 8000d66:	d9f3      	bls.n	8000d50 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8000d68:	2003      	movs	r0, #3
 8000d6a:	e7b3      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	230c      	movs	r3, #12
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d007      	beq.n	8000d88 <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d78:	f7ff fa8e 	bl	8000298 <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_RCC_ClockConfig+0x144>)
 8000d80:	4298      	cmp	r0, r3
 8000d82:	d9f3      	bls.n	8000d6c <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8000d84:	2003      	movs	r0, #3
 8000d86:	e7a5      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_RCC_ClockConfig+0x13c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4013      	ands	r3, r2
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	d90b      	bls.n	8000dac <HAL_RCC_ClockConfig+0x100>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <HAL_RCC_ClockConfig+0x13c>)
 8000d96:	680b      	ldr	r3, [r1, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4393      	bics	r3, r2
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000da0:	680b      	ldr	r3, [r1, #0]
 8000da2:	401a      	ands	r2, r3
 8000da4:	42a2      	cmp	r2, r4
 8000da6:	d001      	beq.n	8000dac <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
 8000da8:	2001      	movs	r0, #1
 8000daa:	e793      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	075b      	lsls	r3, r3, #29
 8000db0:	d506      	bpl.n	8000dc0 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000db4:	6853      	ldr	r3, [r2, #4]
 8000db6:	490f      	ldr	r1, [pc, #60]	; (8000df4 <HAL_RCC_ClockConfig+0x148>)
 8000db8:	400b      	ands	r3, r1
 8000dba:	68e9      	ldr	r1, [r5, #12]
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000dc0:	f7ff ff3c 	bl	8000c3c <HAL_RCC_GetSysClockFreq>
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_RCC_ClockConfig+0x140>)
 8000dc6:	685a      	ldr	r2, [r3, #4]
 8000dc8:	0912      	lsrs	r2, r2, #4
 8000dca:	230f      	movs	r3, #15
 8000dcc:	4013      	ands	r3, r2
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_RCC_ClockConfig+0x14c>)
 8000dd0:	5cd3      	ldrb	r3, [r2, r3]
 8000dd2:	40d8      	lsrs	r0, r3
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_RCC_ClockConfig+0x150>)
 8000dd6:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fa33 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000dde:	2000      	movs	r0, #0
 8000de0:	e778      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
        return HAL_ERROR;
 8000de2:	2001      	movs	r0, #1
 8000de4:	e776      	b.n	8000cd4 <HAL_RCC_ClockConfig+0x28>
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	40022000 	.word	0x40022000
 8000dec:	40021000 	.word	0x40021000
 8000df0:	00001388 	.word	0x00001388
 8000df4:	fffff8ff 	.word	0xfffff8ff
 8000df8:	08003c00 	.word	0x08003c00
 8000dfc:	20000454 	.word	0x20000454

08000e00 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000e00:	4b01      	ldr	r3, [pc, #4]	; (8000e08 <HAL_RCC_GetHCLKFreq+0x8>)
 8000e02:	6818      	ldr	r0, [r3, #0]
}
 8000e04:	4770      	bx	lr
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000454 	.word	0x20000454

08000e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e0c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000e0e:	f7ff fff7 	bl	8000e00 <HAL_RCC_GetHCLKFreq>
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	0a12      	lsrs	r2, r2, #8
 8000e18:	2307      	movs	r3, #7
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	4a02      	ldr	r2, [pc, #8]	; (8000e28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000e1e:	5cd3      	ldrb	r3, [r2, r3]
 8000e20:	40d8      	lsrs	r0, r3
}    
 8000e22:	bd10      	pop	{r4, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	08003c10 	.word	0x08003c10

08000e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000e32:	6803      	ldr	r3, [r0, #0]
 8000e34:	03db      	lsls	r3, r3, #15
 8000e36:	d535      	bpl.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e38:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	d448      	bmi.n	8000ed2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e40:	4a3a      	ldr	r2, [pc, #232]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e42:	69d1      	ldr	r1, [r2, #28]
 8000e44:	2080      	movs	r0, #128	; 0x80
 8000e46:	0540      	lsls	r0, r0, #21
 8000e48:	4301      	orrs	r1, r0
 8000e4a:	61d1      	str	r1, [r2, #28]
 8000e4c:	69d3      	ldr	r3, [r2, #28]
 8000e4e:	4003      	ands	r3, r0
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e54:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	d53b      	bpl.n	8000ed6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	22c0      	movs	r2, #192	; 0xc0
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e68:	d013      	beq.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8000e6a:	6861      	ldr	r1, [r4, #4]
 8000e6c:	400a      	ands	r2, r1
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d00f      	beq.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e72:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e74:	6a18      	ldr	r0, [r3, #32]
 8000e76:	4a2f      	ldr	r2, [pc, #188]	; (8000f34 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e78:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e7a:	6a1e      	ldr	r6, [r3, #32]
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0249      	lsls	r1, r1, #9
 8000e80:	4331      	orrs	r1, r6
 8000e82:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e84:	6a19      	ldr	r1, [r3, #32]
 8000e86:	4e2c      	ldr	r6, [pc, #176]	; (8000f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000e88:	4031      	ands	r1, r6
 8000e8a:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000e8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e8e:	07c3      	lsls	r3, r0, #31
 8000e90:	d435      	bmi.n	8000efe <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e94:	6a13      	ldr	r3, [r2, #32]
 8000e96:	4927      	ldr	r1, [pc, #156]	; (8000f34 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e98:	400b      	ands	r3, r1
 8000e9a:	6861      	ldr	r1, [r4, #4]
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ea0:	2d01      	cmp	r5, #1
 8000ea2:	d03b      	beq.n	8000f1c <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	07db      	lsls	r3, r3, #31
 8000ea8:	d506      	bpl.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000eac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000eae:	2103      	movs	r1, #3
 8000eb0:	438b      	bics	r3, r1
 8000eb2:	68a1      	ldr	r1, [r4, #8]
 8000eb4:	430b      	orrs	r3, r1
 8000eb6:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	069b      	lsls	r3, r3, #26
 8000ebc:	d533      	bpl.n	8000f26 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000ebe:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000ec0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	438b      	bics	r3, r1
 8000ec6:	68e1      	ldr	r1, [r4, #12]
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000ecc:	2000      	movs	r0, #0
}
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8000ed2:	2500      	movs	r5, #0
 8000ed4:	e7bf      	b.n	8000e56 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000ed8:	6811      	ldr	r1, [r2, #0]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	430b      	orrs	r3, r1
 8000ee0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000ee2:	f7ff f9d9 	bl	8000298 <HAL_GetTick>
 8000ee6:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	05db      	lsls	r3, r3, #23
 8000eee:	d4b6      	bmi.n	8000e5e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef0:	f7ff f9d2 	bl	8000298 <HAL_GetTick>
 8000ef4:	1b80      	subs	r0, r0, r6
 8000ef6:	2864      	cmp	r0, #100	; 0x64
 8000ef8:	d9f6      	bls.n	8000ee8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8000efa:	2003      	movs	r0, #3
 8000efc:	e7e7      	b.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8000efe:	f7ff f9cb 	bl	8000298 <HAL_GetTick>
 8000f02:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000f06:	6a1b      	ldr	r3, [r3, #32]
 8000f08:	079b      	lsls	r3, r3, #30
 8000f0a:	d4c2      	bmi.n	8000e92 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0c:	f7ff f9c4 	bl	8000298 <HAL_GetTick>
 8000f10:	1b80      	subs	r0, r0, r6
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000f14:	4298      	cmp	r0, r3
 8000f16:	d9f5      	bls.n	8000f04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8000f18:	2003      	movs	r0, #3
 8000f1a:	e7d8      	b.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f1c:	69d3      	ldr	r3, [r2, #28]
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000f20:	400b      	ands	r3, r1
 8000f22:	61d3      	str	r3, [r2, #28]
 8000f24:	e7be      	b.n	8000ea4 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8000f26:	2000      	movs	r0, #0
 8000f28:	e7d1      	b.n	8000ece <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40007000 	.word	0x40007000
 8000f34:	fffffcff 	.word	0xfffffcff
 8000f38:	fffeffff 	.word	0xfffeffff
 8000f3c:	00001388 	.word	0x00001388
 8000f40:	efffffff 	.word	0xefffffff

08000f44 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	0006      	movs	r6, r0
 8000f48:	000c      	movs	r4, r1
 8000f4a:	0017      	movs	r7, r2
 8000f4c:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f4e:	e03e      	b.n	8000fce <SPI_WaitFlagStateUntilTimeout+0x8a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f50:	2d00      	cmp	r5, #0
 8000f52:	d005      	beq.n	8000f60 <SPI_WaitFlagStateUntilTimeout+0x1c>
 8000f54:	f7ff f9a0 	bl	8000298 <HAL_GetTick>
 8000f58:	9b06      	ldr	r3, [sp, #24]
 8000f5a:	1ac0      	subs	r0, r0, r3
 8000f5c:	42a8      	cmp	r0, r5
 8000f5e:	d336      	bcc.n	8000fce <SPI_WaitFlagStateUntilTimeout+0x8a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000f60:	6832      	ldr	r2, [r6, #0]
 8000f62:	6853      	ldr	r3, [r2, #4]
 8000f64:	21e0      	movs	r1, #224	; 0xe0
 8000f66:	438b      	bics	r3, r1
 8000f68:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f6a:	2382      	movs	r3, #130	; 0x82
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	6872      	ldr	r2, [r6, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d00c      	beq.n	8000f8e <SPI_WaitFlagStateUntilTimeout+0x4a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	019b      	lsls	r3, r3, #6
 8000f78:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d016      	beq.n	8000fac <SPI_WaitFlagStateUntilTimeout+0x68>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000f7e:	235d      	movs	r3, #93	; 0x5d
 8000f80:	2201      	movs	r2, #1
 8000f82:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000f84:	3b01      	subs	r3, #1
 8000f86:	2200      	movs	r2, #0
 8000f88:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	e027      	b.n	8000fde <SPI_WaitFlagStateUntilTimeout+0x9a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f8e:	68b3      	ldr	r3, [r6, #8]
 8000f90:	2280      	movs	r2, #128	; 0x80
 8000f92:	0212      	lsls	r2, r2, #8
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	00d2      	lsls	r2, r2, #3
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d1e9      	bne.n	8000f74 <SPI_WaitFlagStateUntilTimeout+0x30>
          __HAL_SPI_DISABLE(hspi);
 8000fa0:	6832      	ldr	r2, [r6, #0]
 8000fa2:	6813      	ldr	r3, [r2, #0]
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	438b      	bics	r3, r1
 8000fa8:	6013      	str	r3, [r2, #0]
 8000faa:	e7e3      	b.n	8000f74 <SPI_WaitFlagStateUntilTimeout+0x30>
          SPI_RESET_CRC(hspi);
 8000fac:	6832      	ldr	r2, [r6, #0]
 8000fae:	6813      	ldr	r3, [r2, #0]
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <SPI_WaitFlagStateUntilTimeout+0x9c>)
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	6832      	ldr	r2, [r6, #0]
 8000fb8:	6811      	ldr	r1, [r2, #0]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	019b      	lsls	r3, r3, #6
 8000fbe:	430b      	orrs	r3, r1
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e7dc      	b.n	8000f7e <SPI_WaitFlagStateUntilTimeout+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	42bb      	cmp	r3, r7
 8000fc8:	d008      	beq.n	8000fdc <SPI_WaitFlagStateUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8000fca:	1c6b      	adds	r3, r5, #1
 8000fcc:	d1c0      	bne.n	8000f50 <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000fce:	6833      	ldr	r3, [r6, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	4023      	ands	r3, r4
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d0f5      	beq.n	8000fc4 <SPI_WaitFlagStateUntilTimeout+0x80>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e7f4      	b.n	8000fc6 <SPI_WaitFlagStateUntilTimeout+0x82>
      }
    }
  }

  return HAL_OK;
 8000fdc:	2000      	movs	r0, #0
}
 8000fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fe0:	ffffdfff 	.word	0xffffdfff

08000fe4 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	0007      	movs	r7, r0
 8000fea:	000c      	movs	r4, r1
 8000fec:	0015      	movs	r5, r2
 8000fee:	001e      	movs	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8000ff0:	e001      	b.n	8000ff6 <SPI_WaitFifoStateUntilTimeout+0x12>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8000ff2:	1c73      	adds	r3, r6, #1
 8000ff4:	d110      	bne.n	8001018 <SPI_WaitFifoStateUntilTimeout+0x34>
  while ((hspi->Instance->SR & Fifo) != State)
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	6893      	ldr	r3, [r2, #8]
 8000ffa:	4023      	ands	r3, r4
 8000ffc:	42ab      	cmp	r3, r5
 8000ffe:	d045      	beq.n	800108c <SPI_WaitFifoStateUntilTimeout+0xa8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001000:	23c0      	movs	r3, #192	; 0xc0
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	429c      	cmp	r4, r3
 8001006:	d1f4      	bne.n	8000ff2 <SPI_WaitFifoStateUntilTimeout+0xe>
 8001008:	2d00      	cmp	r5, #0
 800100a:	d1f2      	bne.n	8000ff2 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 800100c:	7b13      	ldrb	r3, [r2, #12]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	466a      	mov	r2, sp
 8001012:	71d3      	strb	r3, [r2, #7]
      UNUSED(tmpreg);
 8001014:	79d3      	ldrb	r3, [r2, #7]
 8001016:	e7ec      	b.n	8000ff2 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001018:	2e00      	cmp	r6, #0
 800101a:	d005      	beq.n	8001028 <SPI_WaitFifoStateUntilTimeout+0x44>
 800101c:	f7ff f93c 	bl	8000298 <HAL_GetTick>
 8001020:	9b08      	ldr	r3, [sp, #32]
 8001022:	1ac0      	subs	r0, r0, r3
 8001024:	42b0      	cmp	r0, r6
 8001026:	d3e6      	bcc.n	8000ff6 <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6853      	ldr	r3, [r2, #4]
 800102c:	21e0      	movs	r1, #224	; 0xe0
 800102e:	438b      	bics	r3, r1
 8001030:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001032:	2382      	movs	r3, #130	; 0x82
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	429a      	cmp	r2, r3
 800103a:	d00c      	beq.n	8001056 <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	019b      	lsls	r3, r3, #6
 8001040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001042:	429a      	cmp	r2, r3
 8001044:	d016      	beq.n	8001074 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001046:	235d      	movs	r3, #93	; 0x5d
 8001048:	2201      	movs	r2, #1
 800104a:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800104c:	3b01      	subs	r3, #1
 800104e:	2200      	movs	r2, #0
 8001050:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8001052:	2003      	movs	r0, #3
 8001054:	e01b      	b.n	800108e <SPI_WaitFifoStateUntilTimeout+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2280      	movs	r2, #128	; 0x80
 800105a:	0212      	lsls	r2, r2, #8
 800105c:	4293      	cmp	r3, r2
 800105e:	d003      	beq.n	8001068 <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	00d2      	lsls	r2, r2, #3
 8001064:	4293      	cmp	r3, r2
 8001066:	d1e9      	bne.n	800103c <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	2140      	movs	r1, #64	; 0x40
 800106e:	438b      	bics	r3, r1
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e7e3      	b.n	800103c <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	4906      	ldr	r1, [pc, #24]	; (8001094 <SPI_WaitFifoStateUntilTimeout+0xb0>)
 800107a:	400b      	ands	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	6811      	ldr	r1, [r2, #0]
 8001082:	2380      	movs	r3, #128	; 0x80
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	430b      	orrs	r3, r1
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e7dc      	b.n	8001046 <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 800108c:	2000      	movs	r0, #0
}
 800108e:	b003      	add	sp, #12
 8001090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	ffffdfff 	.word	0xffffdfff

08001098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001098:	b570      	push	{r4, r5, r6, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	0004      	movs	r4, r0
 800109e:	000d      	movs	r5, r1
 80010a0:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80010a2:	21c0      	movs	r1, #192	; 0xc0
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	002b      	movs	r3, r5
 80010a8:	2200      	movs	r2, #0
 80010aa:	0149      	lsls	r1, r1, #5
 80010ac:	f7ff ff9a 	bl	8000fe4 <SPI_WaitFifoStateUntilTimeout>
 80010b0:	2800      	cmp	r0, #0
 80010b2:	d118      	bne.n	80010e6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80010b4:	9600      	str	r6, [sp, #0]
 80010b6:	002b      	movs	r3, r5
 80010b8:	2200      	movs	r2, #0
 80010ba:	2180      	movs	r1, #128	; 0x80
 80010bc:	0020      	movs	r0, r4
 80010be:	f7ff ff41 	bl	8000f44 <SPI_WaitFlagStateUntilTimeout>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d116      	bne.n	80010f4 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80010c6:	21c0      	movs	r1, #192	; 0xc0
 80010c8:	9600      	str	r6, [sp, #0]
 80010ca:	002b      	movs	r3, r5
 80010cc:	2200      	movs	r2, #0
 80010ce:	00c9      	lsls	r1, r1, #3
 80010d0:	0020      	movs	r0, r4
 80010d2:	f7ff ff87 	bl	8000fe4 <SPI_WaitFifoStateUntilTimeout>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d00a      	beq.n	80010f0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80010da:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80010dc:	2220      	movs	r2, #32
 80010de:	4313      	orrs	r3, r2
 80010e0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80010e2:	2003      	movs	r0, #3
 80010e4:	e004      	b.n	80010f0 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80010e6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80010e8:	2220      	movs	r2, #32
 80010ea:	4313      	orrs	r3, r2
 80010ec:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80010ee:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80010f0:	b002      	add	sp, #8
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80010f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80010f6:	2220      	movs	r2, #32
 80010f8:	4313      	orrs	r3, r2
 80010fa:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e7f7      	b.n	80010f0 <SPI_EndRxTxTransaction+0x58>

08001100 <SPI_EndRxTransaction>:
{
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	0004      	movs	r4, r0
 8001106:	000d      	movs	r5, r1
 8001108:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800110a:	2382      	movs	r3, #130	; 0x82
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	6842      	ldr	r2, [r0, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	d00f      	beq.n	8001134 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001114:	9600      	str	r6, [sp, #0]
 8001116:	002b      	movs	r3, r5
 8001118:	2200      	movs	r2, #0
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	0020      	movs	r0, r4
 800111e:	f7ff ff11 	bl	8000f44 <SPI_WaitFlagStateUntilTimeout>
 8001122:	2800      	cmp	r0, #0
 8001124:	d115      	bne.n	8001152 <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001126:	2382      	movs	r3, #130	; 0x82
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	6862      	ldr	r2, [r4, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	d016      	beq.n	800115e <SPI_EndRxTransaction+0x5e>
}
 8001130:	b002      	add	sp, #8
 8001132:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001134:	6883      	ldr	r3, [r0, #8]
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0212      	lsls	r2, r2, #8
 800113a:	4293      	cmp	r3, r2
 800113c:	d003      	beq.n	8001146 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	4293      	cmp	r3, r2
 8001144:	d1e6      	bne.n	8001114 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 8001146:	6822      	ldr	r2, [r4, #0]
 8001148:	6813      	ldr	r3, [r2, #0]
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	438b      	bics	r3, r1
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e7e0      	b.n	8001114 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001152:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001154:	2220      	movs	r2, #32
 8001156:	4313      	orrs	r3, r2
 8001158:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800115a:	2003      	movs	r0, #3
 800115c:	e7e8      	b.n	8001130 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800115e:	68a3      	ldr	r3, [r4, #8]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	0212      	lsls	r2, r2, #8
 8001164:	4293      	cmp	r3, r2
 8001166:	d003      	beq.n	8001170 <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	00d2      	lsls	r2, r2, #3
 800116c:	4293      	cmp	r3, r2
 800116e:	d1df      	bne.n	8001130 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001170:	21c0      	movs	r1, #192	; 0xc0
 8001172:	9600      	str	r6, [sp, #0]
 8001174:	002b      	movs	r3, r5
 8001176:	2200      	movs	r2, #0
 8001178:	00c9      	lsls	r1, r1, #3
 800117a:	0020      	movs	r0, r4
 800117c:	f7ff ff32 	bl	8000fe4 <SPI_WaitFifoStateUntilTimeout>
 8001180:	2800      	cmp	r0, #0
 8001182:	d0d5      	beq.n	8001130 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001184:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001186:	2220      	movs	r2, #32
 8001188:	4313      	orrs	r3, r2
 800118a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
 800118e:	e7cf      	b.n	8001130 <SPI_EndRxTransaction+0x30>

08001190 <HAL_SPI_Init>:
{
 8001190:	b510      	push	{r4, lr}
 8001192:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8001194:	d05e      	beq.n	8001254 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800119a:	335d      	adds	r3, #93	; 0x5d
 800119c:	5cc3      	ldrb	r3, [r0, r3]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d04c      	beq.n	800123c <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 80011a2:	235d      	movs	r3, #93	; 0x5d
 80011a4:	2202      	movs	r2, #2
 80011a6:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	438b      	bics	r3, r1
 80011b0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011b2:	68e3      	ldr	r3, [r4, #12]
 80011b4:	22e0      	movs	r2, #224	; 0xe0
 80011b6:	00d2      	lsls	r2, r2, #3
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d945      	bls.n	8001248 <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80011bc:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80011be:	21f0      	movs	r1, #240	; 0xf0
 80011c0:	0109      	lsls	r1, r1, #4
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d005      	beq.n	80011d2 <HAL_SPI_Init+0x42>
 80011c6:	21e0      	movs	r1, #224	; 0xe0
 80011c8:	00c9      	lsls	r1, r1, #3
 80011ca:	428b      	cmp	r3, r1
 80011cc:	d001      	beq.n	80011d2 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ce:	2100      	movs	r1, #0
 80011d0:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80011d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d105      	bne.n	80011e4 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011d8:	21e0      	movs	r1, #224	; 0xe0
 80011da:	00c9      	lsls	r1, r1, #3
 80011dc:	428b      	cmp	r3, r1
 80011de:	d936      	bls.n	800124e <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80011e0:	2302      	movs	r3, #2
 80011e2:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80011e4:	6863      	ldr	r3, [r4, #4]
 80011e6:	68a1      	ldr	r1, [r4, #8]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6921      	ldr	r1, [r4, #16]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6961      	ldr	r1, [r4, #20]
 80011f0:	430b      	orrs	r3, r1
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0089      	lsls	r1, r1, #2
 80011f6:	69a0      	ldr	r0, [r4, #24]
 80011f8:	4001      	ands	r1, r0
 80011fa:	430b      	orrs	r3, r1
 80011fc:	69e1      	ldr	r1, [r4, #28]
 80011fe:	430b      	orrs	r3, r1
 8001200:	6a21      	ldr	r1, [r4, #32]
 8001202:	430b      	orrs	r3, r1
 8001204:	6821      	ldr	r1, [r4, #0]
 8001206:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001208:	4303      	orrs	r3, r0
 800120a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800120c:	8b61      	ldrh	r1, [r4, #26]
 800120e:	2304      	movs	r3, #4
 8001210:	400b      	ands	r3, r1
 8001212:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001214:	430b      	orrs	r3, r1
 8001216:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001218:	430b      	orrs	r3, r1
 800121a:	68e1      	ldr	r1, [r4, #12]
 800121c:	430b      	orrs	r3, r1
 800121e:	6821      	ldr	r1, [r4, #0]
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	69d3      	ldr	r3, [r2, #28]
 8001228:	490b      	ldr	r1, [pc, #44]	; (8001258 <HAL_SPI_Init+0xc8>)
 800122a:	400b      	ands	r3, r1
 800122c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001232:	335d      	adds	r3, #93	; 0x5d
 8001234:	2201      	movs	r2, #1
 8001236:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001238:	2000      	movs	r0, #0
}
 800123a:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800123c:	335c      	adds	r3, #92	; 0x5c
 800123e:	2200      	movs	r2, #0
 8001240:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 8001242:	f002 f96b 	bl	800351c <HAL_SPI_MspInit>
 8001246:	e7ac      	b.n	80011a2 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	0152      	lsls	r2, r2, #5
 800124c:	e7b7      	b.n	80011be <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800124e:	2301      	movs	r3, #1
 8001250:	6323      	str	r3, [r4, #48]	; 0x30
 8001252:	e7c7      	b.n	80011e4 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
 8001256:	e7f0      	b.n	800123a <HAL_SPI_Init+0xaa>
 8001258:	fffff7ff 	.word	0xfffff7ff

0800125c <HAL_SPI_Transmit>:
{
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	0004      	movs	r4, r0
 8001262:	000d      	movs	r5, r1
 8001264:	0016      	movs	r6, r2
 8001266:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 8001268:	235c      	movs	r3, #92	; 0x5c
 800126a:	5cc3      	ldrb	r3, [r0, r3]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d100      	bne.n	8001272 <HAL_SPI_Transmit+0x16>
 8001270:	e0d4      	b.n	800141c <HAL_SPI_Transmit+0x1c0>
 8001272:	235c      	movs	r3, #92	; 0x5c
 8001274:	2201      	movs	r2, #1
 8001276:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001278:	f7ff f80e 	bl	8000298 <HAL_GetTick>
 800127c:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 800127e:	235d      	movs	r3, #93	; 0x5d
 8001280:	5ce3      	ldrb	r3, [r4, r3]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d008      	beq.n	8001298 <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 8001286:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001288:	235d      	movs	r3, #93	; 0x5d
 800128a:	2201      	movs	r2, #1
 800128c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800128e:	3b01      	subs	r3, #1
 8001290:	2200      	movs	r2, #0
 8001292:	54e2      	strb	r2, [r4, r3]
}
 8001294:	b005      	add	sp, #20
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8001298:	2d00      	cmp	r5, #0
 800129a:	d100      	bne.n	800129e <HAL_SPI_Transmit+0x42>
 800129c:	e0b4      	b.n	8001408 <HAL_SPI_Transmit+0x1ac>
 800129e:	2e00      	cmp	r6, #0
 80012a0:	d100      	bne.n	80012a4 <HAL_SPI_Transmit+0x48>
 80012a2:	e0b3      	b.n	800140c <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80012a4:	335c      	adds	r3, #92	; 0x5c
 80012a6:	2203      	movs	r2, #3
 80012a8:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80012ae:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80012b0:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80012b2:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80012b4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80012b6:	3241      	adds	r2, #65	; 0x41
 80012b8:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 80012ba:	3202      	adds	r2, #2
 80012bc:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 80012be:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80012c0:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	68a2      	ldr	r2, [r4, #8]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d01c      	beq.n	8001306 <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	0652      	lsls	r2, r2, #25
 80012d2:	d403      	bmi.n	80012dc <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80012dc:	23e0      	movs	r3, #224	; 0xe0
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	68e2      	ldr	r2, [r4, #12]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d933      	bls.n	800134e <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80012e6:	6863      	ldr	r3, [r4, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_SPI_Transmit+0x98>
 80012ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d114      	bne.n	800131e <HAL_SPI_Transmit+0xc2>
      hspi->Instance->DR = *((uint16_t *)pData);
 80012f4:	6823      	ldr	r3, [r4, #0]
 80012f6:	882a      	ldrh	r2, [r5, #0]
 80012f8:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80012fa:	3502      	adds	r5, #2
      hspi->TxXferCount--;
 80012fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012fe:	3b01      	subs	r3, #1
 8001300:	b29b      	uxth	r3, r3
 8001302:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001304:	e00b      	b.n	800131e <HAL_SPI_Transmit+0xc2>
    SPI_1LINE_TX(hspi);
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	6811      	ldr	r1, [r2, #0]
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	01db      	lsls	r3, r3, #7
 800130e:	430b      	orrs	r3, r1
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e7db      	b.n	80012cc <HAL_SPI_Transmit+0x70>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001314:	2f00      	cmp	r7, #0
 8001316:	d100      	bne.n	800131a <HAL_SPI_Transmit+0xbe>
 8001318:	e07a      	b.n	8001410 <HAL_SPI_Transmit+0x1b4>
 800131a:	1c7b      	adds	r3, r7, #1
 800131c:	d10f      	bne.n	800133e <HAL_SPI_Transmit+0xe2>
    while (hspi->TxXferCount > 0U)
 800131e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001320:	b29b      	uxth	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d058      	beq.n	80013d8 <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	0792      	lsls	r2, r2, #30
 800132c:	d5f2      	bpl.n	8001314 <HAL_SPI_Transmit+0xb8>
        hspi->Instance->DR = *((uint16_t *)pData);
 800132e:	882a      	ldrh	r2, [r5, #0]
 8001330:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001332:	3502      	adds	r5, #2
        hspi->TxXferCount--;
 8001334:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001336:	3b01      	subs	r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800133c:	e7ef      	b.n	800131e <HAL_SPI_Transmit+0xc2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800133e:	f7fe ffab 	bl	8000298 <HAL_GetTick>
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	1ac0      	subs	r0, r0, r3
 8001346:	42b8      	cmp	r0, r7
 8001348:	d3e9      	bcc.n	800131e <HAL_SPI_Transmit+0xc2>
          errorcode = HAL_TIMEOUT;
 800134a:	2003      	movs	r0, #3
 800134c:	e79c      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800134e:	6863      	ldr	r3, [r4, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_SPI_Transmit+0x100>
 8001354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001356:	b29b      	uxth	r3, r3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d121      	bne.n	80013a0 <HAL_SPI_Transmit+0x144>
      if (hspi->TxXferCount > 1U)
 800135c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800135e:	b29b      	uxth	r3, r3
 8001360:	2b01      	cmp	r3, #1
 8001362:	d908      	bls.n	8001376 <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001364:	6823      	ldr	r3, [r4, #0]
 8001366:	882a      	ldrh	r2, [r5, #0]
 8001368:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800136a:	3502      	adds	r5, #2
        hspi->TxXferCount -= 2U;
 800136c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800136e:	3b02      	subs	r3, #2
 8001370:	b29b      	uxth	r3, r3
 8001372:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001374:	e014      	b.n	80013a0 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001376:	782b      	ldrb	r3, [r5, #0]
 8001378:	6822      	ldr	r2, [r4, #0]
 800137a:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800137c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800137e:	3b01      	subs	r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001384:	3501      	adds	r5, #1
 8001386:	e00b      	b.n	80013a0 <HAL_SPI_Transmit+0x144>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001388:	782a      	ldrb	r2, [r5, #0]
 800138a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 800138c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800138e:	3b01      	subs	r3, #1
 8001390:	b29b      	uxth	r3, r3
 8001392:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001394:	3501      	adds	r5, #1
 8001396:	e003      	b.n	80013a0 <HAL_SPI_Transmit+0x144>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001398:	2f00      	cmp	r7, #0
 800139a:	d03b      	beq.n	8001414 <HAL_SPI_Transmit+0x1b8>
 800139c:	1c7b      	adds	r3, r7, #1
 800139e:	d113      	bne.n	80013c8 <HAL_SPI_Transmit+0x16c>
    while (hspi->TxXferCount > 0U)
 80013a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d017      	beq.n	80013d8 <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	0792      	lsls	r2, r2, #30
 80013ae:	d5f3      	bpl.n	8001398 <HAL_SPI_Transmit+0x13c>
        if (hspi->TxXferCount > 1U)
 80013b0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80013b2:	b292      	uxth	r2, r2
 80013b4:	2a01      	cmp	r2, #1
 80013b6:	d9e7      	bls.n	8001388 <HAL_SPI_Transmit+0x12c>
          hspi->Instance->DR = *((uint16_t *)pData);
 80013b8:	882a      	ldrh	r2, [r5, #0]
 80013ba:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80013bc:	3502      	adds	r5, #2
          hspi->TxXferCount -= 2U;
 80013be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80013c0:	3b02      	subs	r3, #2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80013c6:	e7eb      	b.n	80013a0 <HAL_SPI_Transmit+0x144>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80013c8:	f7fe ff66 	bl	8000298 <HAL_GetTick>
 80013cc:	9b01      	ldr	r3, [sp, #4]
 80013ce:	1ac0      	subs	r0, r0, r3
 80013d0:	42b8      	cmp	r0, r7
 80013d2:	d3e5      	bcc.n	80013a0 <HAL_SPI_Transmit+0x144>
          errorcode = HAL_TIMEOUT;
 80013d4:	2003      	movs	r0, #3
 80013d6:	e757      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80013d8:	9a01      	ldr	r2, [sp, #4]
 80013da:	0039      	movs	r1, r7
 80013dc:	0020      	movs	r0, r4
 80013de:	f7ff fe5b 	bl	8001098 <SPI_EndRxTxTransaction>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d001      	beq.n	80013ea <HAL_SPI_Transmit+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013e6:	2320      	movs	r3, #32
 80013e8:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80013ea:	68a3      	ldr	r3, [r4, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d106      	bne.n	80013fe <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013f0:	9303      	str	r3, [sp, #12]
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	9203      	str	r2, [sp, #12]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	9303      	str	r3, [sp, #12]
 80013fc:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_SPI_Transmit+0x1bc>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001404:	2000      	movs	r0, #0
 8001406:	e73f      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001408:	2001      	movs	r0, #1
 800140a:	e73d      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
 800140c:	2001      	movs	r0, #1
 800140e:	e73b      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
 8001412:	e739      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 8001414:	2003      	movs	r0, #3
 8001416:	e737      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 8001418:	2001      	movs	r0, #1
 800141a:	e735      	b.n	8001288 <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 800141c:	2002      	movs	r0, #2
 800141e:	e739      	b.n	8001294 <HAL_SPI_Transmit+0x38>

08001420 <HAL_SPI_TransmitReceive>:
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b083      	sub	sp, #12
 8001424:	0004      	movs	r4, r0
 8001426:	000e      	movs	r6, r1
 8001428:	0017      	movs	r7, r2
 800142a:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 800142c:	235c      	movs	r3, #92	; 0x5c
 800142e:	5cc3      	ldrb	r3, [r0, r3]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d100      	bne.n	8001436 <HAL_SPI_TransmitReceive+0x16>
 8001434:	e142      	b.n	80016bc <HAL_SPI_TransmitReceive+0x29c>
 8001436:	235c      	movs	r3, #92	; 0x5c
 8001438:	2201      	movs	r2, #1
 800143a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800143c:	f7fe ff2c 	bl	8000298 <HAL_GetTick>
 8001440:	9001      	str	r0, [sp, #4]
  tmp  = hspi->State;
 8001442:	235d      	movs	r3, #93	; 0x5d
 8001444:	5ce3      	ldrb	r3, [r4, r3]
 8001446:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 8001448:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 800144a:	2b01      	cmp	r3, #1
 800144c:	d014      	beq.n	8001478 <HAL_SPI_TransmitReceive+0x58>
 800144e:	2182      	movs	r1, #130	; 0x82
 8001450:	0049      	lsls	r1, r1, #1
 8001452:	428a      	cmp	r2, r1
 8001454:	d008      	beq.n	8001468 <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 8001456:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001458:	235d      	movs	r3, #93	; 0x5d
 800145a:	2201      	movs	r2, #1
 800145c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800145e:	3b01      	subs	r3, #1
 8001460:	2200      	movs	r2, #0
 8001462:	54e2      	strb	r2, [r4, r3]
}
 8001464:	b003      	add	sp, #12
 8001466:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001468:	68a2      	ldr	r2, [r4, #8]
 800146a:	2a00      	cmp	r2, #0
 800146c:	d000      	beq.n	8001470 <HAL_SPI_TransmitReceive+0x50>
 800146e:	e11b      	b.n	80016a8 <HAL_SPI_TransmitReceive+0x288>
 8001470:	2b04      	cmp	r3, #4
 8001472:	d001      	beq.n	8001478 <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 8001474:	2002      	movs	r0, #2
 8001476:	e7ef      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001478:	2e00      	cmp	r6, #0
 800147a:	d100      	bne.n	800147e <HAL_SPI_TransmitReceive+0x5e>
 800147c:	e116      	b.n	80016ac <HAL_SPI_TransmitReceive+0x28c>
 800147e:	2f00      	cmp	r7, #0
 8001480:	d100      	bne.n	8001484 <HAL_SPI_TransmitReceive+0x64>
 8001482:	e115      	b.n	80016b0 <HAL_SPI_TransmitReceive+0x290>
 8001484:	2d00      	cmp	r5, #0
 8001486:	d100      	bne.n	800148a <HAL_SPI_TransmitReceive+0x6a>
 8001488:	e114      	b.n	80016b4 <HAL_SPI_TransmitReceive+0x294>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800148a:	235d      	movs	r3, #93	; 0x5d
 800148c:	5ce3      	ldrb	r3, [r4, r3]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d002      	beq.n	8001498 <HAL_SPI_TransmitReceive+0x78>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001492:	235d      	movs	r3, #93	; 0x5d
 8001494:	2205      	movs	r2, #5
 8001496:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001498:	2300      	movs	r3, #0
 800149a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800149c:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800149e:	2246      	movs	r2, #70	; 0x46
 80014a0:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 80014a2:	3a02      	subs	r2, #2
 80014a4:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80014a6:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80014a8:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80014aa:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 80014ac:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80014ae:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 80014b0:	23e0      	movs	r3, #224	; 0xe0
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	68e2      	ldr	r2, [r4, #12]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d804      	bhi.n	80014c4 <HAL_SPI_TransmitReceive+0xa4>
 80014ba:	2346      	movs	r3, #70	; 0x46
 80014bc:	5ae3      	ldrh	r3, [r4, r3]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d922      	bls.n	800150a <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6853      	ldr	r3, [r2, #4]
 80014c8:	497d      	ldr	r1, [pc, #500]	; (80016c0 <HAL_SPI_TransmitReceive+0x2a0>)
 80014ca:	400b      	ands	r3, r1
 80014cc:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	0652      	lsls	r2, r2, #25
 80014d4:	d403      	bmi.n	80014de <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2140      	movs	r1, #64	; 0x40
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80014de:	23e0      	movs	r3, #224	; 0xe0
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	68e2      	ldr	r2, [r4, #12]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d952      	bls.n	800158e <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80014e8:	6863      	ldr	r3, [r4, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_SPI_TransmitReceive+0xd6>
 80014ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80014f6:	6823      	ldr	r3, [r4, #0]
 80014f8:	8832      	ldrh	r2, [r6, #0]
 80014fa:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80014fc:	3602      	adds	r6, #2
      hspi->TxXferCount--;
 80014fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001500:	3b01      	subs	r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001506:	2501      	movs	r5, #1
 8001508:	e01b      	b.n	8001542 <HAL_SPI_TransmitReceive+0x122>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800150a:	6822      	ldr	r2, [r4, #0]
 800150c:	6851      	ldr	r1, [r2, #4]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	015b      	lsls	r3, r3, #5
 8001512:	430b      	orrs	r3, r1
 8001514:	6053      	str	r3, [r2, #4]
 8001516:	e7da      	b.n	80014ce <HAL_SPI_TransmitReceive+0xae>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001518:	2346      	movs	r3, #70	; 0x46
 800151a:	5ae3      	ldrh	r3, [r4, r3]
 800151c:	b29b      	uxth	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00c      	beq.n	800153c <HAL_SPI_TransmitReceive+0x11c>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	07d2      	lsls	r2, r2, #31
 8001528:	d508      	bpl.n	800153c <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	803b      	strh	r3, [r7, #0]
        pRxData += sizeof(uint16_t);
 800152e:	3702      	adds	r7, #2
        hspi->RxXferCount--;
 8001530:	2246      	movs	r2, #70	; 0x46
 8001532:	5aa3      	ldrh	r3, [r4, r2]
 8001534:	3b01      	subs	r3, #1
 8001536:	b29b      	uxth	r3, r3
 8001538:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800153a:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800153c:	9b08      	ldr	r3, [sp, #32]
 800153e:	3301      	adds	r3, #1
 8001540:	d11c      	bne.n	800157c <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001542:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001544:	b29b      	uxth	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <HAL_SPI_TransmitReceive+0x136>
 800154a:	3346      	adds	r3, #70	; 0x46
 800154c:	5ae3      	ldrh	r3, [r4, r3]
 800154e:	b29b      	uxth	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d100      	bne.n	8001556 <HAL_SPI_TransmitReceive+0x136>
 8001554:	e09a      	b.n	800168c <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001556:	2d00      	cmp	r5, #0
 8001558:	d0de      	beq.n	8001518 <HAL_SPI_TransmitReceive+0xf8>
 800155a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800155c:	b29b      	uxth	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0da      	beq.n	8001518 <HAL_SPI_TransmitReceive+0xf8>
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	0792      	lsls	r2, r2, #30
 8001568:	d5d6      	bpl.n	8001518 <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800156a:	8832      	ldrh	r2, [r6, #0]
 800156c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800156e:	3602      	adds	r6, #2
        hspi->TxXferCount--;
 8001570:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001572:	3b01      	subs	r3, #1
 8001574:	b29b      	uxth	r3, r3
 8001576:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001578:	2500      	movs	r5, #0
 800157a:	e7cd      	b.n	8001518 <HAL_SPI_TransmitReceive+0xf8>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800157c:	f7fe fe8c 	bl	8000298 <HAL_GetTick>
 8001580:	9b01      	ldr	r3, [sp, #4]
 8001582:	1ac0      	subs	r0, r0, r3
 8001584:	9b08      	ldr	r3, [sp, #32]
 8001586:	4298      	cmp	r0, r3
 8001588:	d3db      	bcc.n	8001542 <HAL_SPI_TransmitReceive+0x122>
        errorcode = HAL_TIMEOUT;
 800158a:	2003      	movs	r0, #3
 800158c:	e764      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_SPI_TransmitReceive+0x17c>
 8001594:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001596:	b29b      	uxth	r3, r3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10b      	bne.n	80015b4 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 800159c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800159e:	b29b      	uxth	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d909      	bls.n	80015b8 <HAL_SPI_TransmitReceive+0x198>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	8832      	ldrh	r2, [r6, #0]
 80015a8:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80015aa:	3602      	adds	r6, #2
        hspi->TxXferCount -= 2U;
 80015ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015ae:	3b02      	subs	r3, #2
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015b4:	2501      	movs	r5, #1
 80015b6:	e02e      	b.n	8001616 <HAL_SPI_TransmitReceive+0x1f6>
 80015b8:	7833      	ldrb	r3, [r6, #0]
 80015ba:	6822      	ldr	r2, [r4, #0]
 80015bc:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80015be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015c6:	3601      	adds	r6, #1
 80015c8:	e7f4      	b.n	80015b4 <HAL_SPI_TransmitReceive+0x194>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015ca:	7832      	ldrb	r2, [r6, #0]
 80015cc:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80015ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80015d6:	3601      	adds	r6, #1
        txallowed = 0U;
 80015d8:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80015da:	2346      	movs	r3, #70	; 0x46
 80015dc:	5ae3      	ldrh	r3, [r4, r3]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d015      	beq.n	8001610 <HAL_SPI_TransmitReceive+0x1f0>
 80015e4:	6823      	ldr	r3, [r4, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	07d2      	lsls	r2, r2, #31
 80015ea:	d511      	bpl.n	8001610 <HAL_SPI_TransmitReceive+0x1f0>
        if (hspi->RxXferCount > 1U)
 80015ec:	2246      	movs	r2, #70	; 0x46
 80015ee:	5aa2      	ldrh	r2, [r4, r2]
 80015f0:	b292      	uxth	r2, r2
 80015f2:	2a01      	cmp	r2, #1
 80015f4:	d937      	bls.n	8001666 <HAL_SPI_TransmitReceive+0x246>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	803b      	strh	r3, [r7, #0]
          pRxData += sizeof(uint16_t);
 80015fa:	3702      	adds	r7, #2
          hspi->RxXferCount -= 2U;
 80015fc:	2246      	movs	r2, #70	; 0x46
 80015fe:	5aa3      	ldrh	r3, [r4, r2]
 8001600:	3b02      	subs	r3, #2
 8001602:	b29b      	uxth	r3, r3
 8001604:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 8001606:	5aa3      	ldrh	r3, [r4, r2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d923      	bls.n	8001656 <HAL_SPI_TransmitReceive+0x236>
        txallowed = 1U;
 800160e:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001610:	9b08      	ldr	r3, [sp, #32]
 8001612:	3301      	adds	r3, #1
 8001614:	d131      	bne.n	800167a <HAL_SPI_TransmitReceive+0x25a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001616:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d104      	bne.n	8001628 <HAL_SPI_TransmitReceive+0x208>
 800161e:	3346      	adds	r3, #70	; 0x46
 8001620:	5ae3      	ldrh	r3, [r4, r3]
 8001622:	b29b      	uxth	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d031      	beq.n	800168c <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001628:	2d00      	cmp	r5, #0
 800162a:	d0d6      	beq.n	80015da <HAL_SPI_TransmitReceive+0x1ba>
 800162c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800162e:	b29b      	uxth	r3, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0d2      	beq.n	80015da <HAL_SPI_TransmitReceive+0x1ba>
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	0792      	lsls	r2, r2, #30
 800163a:	d5ce      	bpl.n	80015da <HAL_SPI_TransmitReceive+0x1ba>
        if (hspi->TxXferCount > 1U)
 800163c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800163e:	b292      	uxth	r2, r2
 8001640:	2a01      	cmp	r2, #1
 8001642:	d9c2      	bls.n	80015ca <HAL_SPI_TransmitReceive+0x1aa>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001644:	8832      	ldrh	r2, [r6, #0]
 8001646:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001648:	3602      	adds	r6, #2
          hspi->TxXferCount -= 2U;
 800164a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800164c:	3b02      	subs	r3, #2
 800164e:	b29b      	uxth	r3, r3
 8001650:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001652:	2500      	movs	r5, #0
 8001654:	e7c1      	b.n	80015da <HAL_SPI_TransmitReceive+0x1ba>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001656:	6822      	ldr	r2, [r4, #0]
 8001658:	6851      	ldr	r1, [r2, #4]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	015b      	lsls	r3, r3, #5
 800165e:	430b      	orrs	r3, r1
 8001660:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8001662:	2501      	movs	r5, #1
 8001664:	e7d4      	b.n	8001610 <HAL_SPI_TransmitReceive+0x1f0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 800166a:	2246      	movs	r2, #70	; 0x46
 800166c:	5aa3      	ldrh	r3, [r4, r2]
 800166e:	3b01      	subs	r3, #1
 8001670:	b29b      	uxth	r3, r3
 8001672:	52a3      	strh	r3, [r4, r2]
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001674:	3701      	adds	r7, #1
        txallowed = 1U;
 8001676:	2501      	movs	r5, #1
 8001678:	e7ca      	b.n	8001610 <HAL_SPI_TransmitReceive+0x1f0>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800167a:	f7fe fe0d 	bl	8000298 <HAL_GetTick>
 800167e:	9b01      	ldr	r3, [sp, #4]
 8001680:	1ac0      	subs	r0, r0, r3
 8001682:	9b08      	ldr	r3, [sp, #32]
 8001684:	4298      	cmp	r0, r3
 8001686:	d3c6      	bcc.n	8001616 <HAL_SPI_TransmitReceive+0x1f6>
        errorcode = HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
 800168a:	e6e5      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800168c:	9a01      	ldr	r2, [sp, #4]
 800168e:	9908      	ldr	r1, [sp, #32]
 8001690:	0020      	movs	r0, r4
 8001692:	f7ff fd01 	bl	8001098 <SPI_EndRxTxTransaction>
 8001696:	2800      	cmp	r0, #0
 8001698:	d001      	beq.n	800169e <HAL_SPI_TransmitReceive+0x27e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800169a:	2320      	movs	r3, #32
 800169c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800169e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <HAL_SPI_TransmitReceive+0x298>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80016a4:	2000      	movs	r0, #0
 80016a6:	e6d7      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 80016a8:	2002      	movs	r0, #2
 80016aa:	e6d5      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 80016ac:	2001      	movs	r0, #1
 80016ae:	e6d3      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
 80016b0:	2001      	movs	r0, #1
 80016b2:	e6d1      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
 80016b4:	2001      	movs	r0, #1
 80016b6:	e6cf      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
 80016ba:	e6cd      	b.n	8001458 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80016bc:	2002      	movs	r0, #2
 80016be:	e6d1      	b.n	8001464 <HAL_SPI_TransmitReceive+0x44>
 80016c0:	ffffefff 	.word	0xffffefff

080016c4 <HAL_SPI_Receive>:
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	0004      	movs	r4, r0
 80016ca:	000d      	movs	r5, r1
 80016cc:	0016      	movs	r6, r2
 80016ce:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80016d0:	2382      	movs	r3, #130	; 0x82
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	6842      	ldr	r2, [r0, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d017      	beq.n	800170a <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 80016da:	235c      	movs	r3, #92	; 0x5c
 80016dc:	5ce3      	ldrb	r3, [r4, r3]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d100      	bne.n	80016e4 <HAL_SPI_Receive+0x20>
 80016e2:	e0b1      	b.n	8001848 <HAL_SPI_Receive+0x184>
 80016e4:	235c      	movs	r3, #92	; 0x5c
 80016e6:	2201      	movs	r2, #1
 80016e8:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 80016ea:	f7fe fdd5 	bl	8000298 <HAL_GetTick>
 80016ee:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80016f0:	235d      	movs	r3, #93	; 0x5d
 80016f2:	5ce3      	ldrb	r3, [r4, r3]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d014      	beq.n	8001722 <HAL_SPI_Receive+0x5e>
    errorcode = HAL_BUSY;
 80016f8:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80016fa:	235d      	movs	r3, #93	; 0x5d
 80016fc:	2201      	movs	r2, #1
 80016fe:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001700:	3b01      	subs	r3, #1
 8001702:	2200      	movs	r2, #0
 8001704:	54e2      	strb	r2, [r4, r3]
}
 8001706:	b005      	add	sp, #20
 8001708:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800170a:	6883      	ldr	r3, [r0, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1e4      	bne.n	80016da <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001710:	335d      	adds	r3, #93	; 0x5d
 8001712:	2204      	movs	r2, #4
 8001714:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001716:	9700      	str	r7, [sp, #0]
 8001718:	0033      	movs	r3, r6
 800171a:	000a      	movs	r2, r1
 800171c:	f7ff fe80 	bl	8001420 <HAL_SPI_TransmitReceive>
 8001720:	e7f1      	b.n	8001706 <HAL_SPI_Receive+0x42>
  if ((pData == NULL) || (Size == 0U))
 8001722:	2d00      	cmp	r5, #0
 8001724:	d100      	bne.n	8001728 <HAL_SPI_Receive+0x64>
 8001726:	e085      	b.n	8001834 <HAL_SPI_Receive+0x170>
 8001728:	2e00      	cmp	r6, #0
 800172a:	d100      	bne.n	800172e <HAL_SPI_Receive+0x6a>
 800172c:	e084      	b.n	8001838 <HAL_SPI_Receive+0x174>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800172e:	335c      	adds	r3, #92	; 0x5c
 8001730:	2204      	movs	r2, #4
 8001732:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001738:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800173a:	3240      	adds	r2, #64	; 0x40
 800173c:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 800173e:	3202      	adds	r2, #2
 8001740:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001742:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001744:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001746:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001748:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800174a:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800174c:	23e0      	movs	r3, #224	; 0xe0
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	68e2      	ldr	r2, [r4, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d917      	bls.n	8001786 <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001756:	6822      	ldr	r2, [r4, #0]
 8001758:	6853      	ldr	r3, [r2, #4]
 800175a:	493c      	ldr	r1, [pc, #240]	; (800184c <HAL_SPI_Receive+0x188>)
 800175c:	400b      	ands	r3, r1
 800175e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	68a2      	ldr	r2, [r4, #8]
 8001766:	429a      	cmp	r2, r3
 8001768:	d014      	beq.n	8001794 <HAL_SPI_Receive+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	0652      	lsls	r2, r2, #25
 8001770:	d403      	bmi.n	800177a <HAL_SPI_Receive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2140      	movs	r1, #64	; 0x40
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800177a:	23e0      	movs	r3, #224	; 0xe0
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	68e2      	ldr	r2, [r4, #12]
 8001780:	429a      	cmp	r2, r3
 8001782:	d911      	bls.n	80017a8 <HAL_SPI_Receive+0xe4>
 8001784:	e02e      	b.n	80017e4 <HAL_SPI_Receive+0x120>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001786:	6822      	ldr	r2, [r4, #0]
 8001788:	6851      	ldr	r1, [r2, #4]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	430b      	orrs	r3, r1
 8001790:	6053      	str	r3, [r2, #4]
 8001792:	e7e5      	b.n	8001760 <HAL_SPI_Receive+0x9c>
    SPI_1LINE_RX(hspi);
 8001794:	6822      	ldr	r2, [r4, #0]
 8001796:	6813      	ldr	r3, [r2, #0]
 8001798:	492d      	ldr	r1, [pc, #180]	; (8001850 <HAL_SPI_Receive+0x18c>)
 800179a:	400b      	ands	r3, r1
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e7e4      	b.n	800176a <HAL_SPI_Receive+0xa6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80017a0:	2f00      	cmp	r7, #0
 80017a2:	d04b      	beq.n	800183c <HAL_SPI_Receive+0x178>
 80017a4:	1c7b      	adds	r3, r7, #1
 80017a6:	d111      	bne.n	80017cc <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 80017a8:	2346      	movs	r3, #70	; 0x46
 80017aa:	5ae3      	ldrh	r3, [r4, r3]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d032      	beq.n	8001818 <HAL_SPI_Receive+0x154>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80017b2:	6823      	ldr	r3, [r4, #0]
 80017b4:	689a      	ldr	r2, [r3, #8]
 80017b6:	07d2      	lsls	r2, r2, #31
 80017b8:	d5f2      	bpl.n	80017a0 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
 80017bc:	702b      	strb	r3, [r5, #0]
        pData += sizeof(uint8_t);
 80017be:	3501      	adds	r5, #1
        hspi->RxXferCount--;
 80017c0:	2246      	movs	r2, #70	; 0x46
 80017c2:	5aa3      	ldrh	r3, [r4, r2]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	52a3      	strh	r3, [r4, r2]
 80017ca:	e7ed      	b.n	80017a8 <HAL_SPI_Receive+0xe4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80017cc:	f7fe fd64 	bl	8000298 <HAL_GetTick>
 80017d0:	9b03      	ldr	r3, [sp, #12]
 80017d2:	1ac0      	subs	r0, r0, r3
 80017d4:	42b8      	cmp	r0, r7
 80017d6:	d3e7      	bcc.n	80017a8 <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 80017d8:	2003      	movs	r0, #3
 80017da:	e78e      	b.n	80016fa <HAL_SPI_Receive+0x36>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80017dc:	2f00      	cmp	r7, #0
 80017de:	d02f      	beq.n	8001840 <HAL_SPI_Receive+0x17c>
 80017e0:	1c7b      	adds	r3, r7, #1
 80017e2:	d111      	bne.n	8001808 <HAL_SPI_Receive+0x144>
    while (hspi->RxXferCount > 0U)
 80017e4:	2346      	movs	r3, #70	; 0x46
 80017e6:	5ae3      	ldrh	r3, [r4, r3]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d014      	beq.n	8001818 <HAL_SPI_Receive+0x154>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80017ee:	6823      	ldr	r3, [r4, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	07d2      	lsls	r2, r2, #31
 80017f4:	d5f2      	bpl.n	80017dc <HAL_SPI_Receive+0x118>
        *((uint16_t *)pData) = hspi->Instance->DR;
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	802b      	strh	r3, [r5, #0]
        pData += sizeof(uint16_t);
 80017fa:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 80017fc:	2246      	movs	r2, #70	; 0x46
 80017fe:	5aa3      	ldrh	r3, [r4, r2]
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	52a3      	strh	r3, [r4, r2]
 8001806:	e7ed      	b.n	80017e4 <HAL_SPI_Receive+0x120>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001808:	f7fe fd46 	bl	8000298 <HAL_GetTick>
 800180c:	9b03      	ldr	r3, [sp, #12]
 800180e:	1ac0      	subs	r0, r0, r3
 8001810:	42b8      	cmp	r0, r7
 8001812:	d3e7      	bcc.n	80017e4 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 8001814:	2003      	movs	r0, #3
 8001816:	e770      	b.n	80016fa <HAL_SPI_Receive+0x36>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001818:	9a03      	ldr	r2, [sp, #12]
 800181a:	0039      	movs	r1, r7
 800181c:	0020      	movs	r0, r4
 800181e:	f7ff fc6f 	bl	8001100 <SPI_EndRxTransaction>
 8001822:	2800      	cmp	r0, #0
 8001824:	d001      	beq.n	800182a <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001826:	2320      	movs	r3, #32
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800182a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800182c:	2b00      	cmp	r3, #0
 800182e:	d109      	bne.n	8001844 <HAL_SPI_Receive+0x180>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001830:	2000      	movs	r0, #0
 8001832:	e762      	b.n	80016fa <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e760      	b.n	80016fa <HAL_SPI_Receive+0x36>
 8001838:	2001      	movs	r0, #1
 800183a:	e75e      	b.n	80016fa <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 800183c:	2003      	movs	r0, #3
 800183e:	e75c      	b.n	80016fa <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 8001840:	2003      	movs	r0, #3
 8001842:	e75a      	b.n	80016fa <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 8001844:	2001      	movs	r0, #1
 8001846:	e758      	b.n	80016fa <HAL_SPI_Receive+0x36>
  __HAL_LOCK(hspi);
 8001848:	2002      	movs	r0, #2
 800184a:	e75c      	b.n	8001706 <HAL_SPI_Receive+0x42>
 800184c:	ffffefff 	.word	0xffffefff
 8001850:	ffffbfff 	.word	0xffffbfff

08001854 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001854:	6802      	ldr	r2, [r0, #0]
 8001856:	6813      	ldr	r3, [r2, #0]
 8001858:	4906      	ldr	r1, [pc, #24]	; (8001874 <UART_EndRxTransfer+0x20>)
 800185a:	400b      	ands	r3, r1
 800185c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800185e:	6802      	ldr	r2, [r0, #0]
 8001860:	6893      	ldr	r3, [r2, #8]
 8001862:	3123      	adds	r1, #35	; 0x23
 8001864:	31ff      	adds	r1, #255	; 0xff
 8001866:	438b      	bics	r3, r1
 8001868:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800186a:	236a      	movs	r3, #106	; 0x6a
 800186c:	2220      	movs	r2, #32
 800186e:	54c2      	strb	r2, [r0, r3]
}
 8001870:	4770      	bx	lr
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	fffffedf 	.word	0xfffffedf

08001878 <HAL_UART_TxCpltCallback>:
}
 8001878:	4770      	bx	lr

0800187a <HAL_UART_RxCpltCallback>:
}
 800187a:	4770      	bx	lr

0800187c <HAL_UART_ErrorCallback>:
}
 800187c:	4770      	bx	lr

0800187e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800187e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001880:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	225a      	movs	r2, #90	; 0x5a
 8001886:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001888:	3a08      	subs	r2, #8
 800188a:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 800188c:	f7ff fff6 	bl	800187c <HAL_UART_ErrorCallback>
}
 8001890:	bd10      	pop	{r4, pc}
	...

08001894 <UART_SetConfig>:
{
 8001894:	b510      	push	{r4, lr}
 8001896:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001898:	6883      	ldr	r3, [r0, #8]
 800189a:	6902      	ldr	r2, [r0, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	6942      	ldr	r2, [r0, #20]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	69c2      	ldr	r2, [r0, #28]
 80018a4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80018a6:	6801      	ldr	r1, [r0, #0]
 80018a8:	680a      	ldr	r2, [r1, #0]
 80018aa:	485c      	ldr	r0, [pc, #368]	; (8001a1c <UART_SetConfig+0x188>)
 80018ac:	4002      	ands	r2, r0
 80018ae:	4313      	orrs	r3, r2
 80018b0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b2:	6822      	ldr	r2, [r4, #0]
 80018b4:	6853      	ldr	r3, [r2, #4]
 80018b6:	495a      	ldr	r1, [pc, #360]	; (8001a20 <UART_SetConfig+0x18c>)
 80018b8:	400b      	ands	r3, r1
 80018ba:	68e1      	ldr	r1, [r4, #12]
 80018bc:	430b      	orrs	r3, r1
 80018be:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80018c0:	69a2      	ldr	r2, [r4, #24]
 80018c2:	6a23      	ldr	r3, [r4, #32]
 80018c4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80018c6:	6821      	ldr	r1, [r4, #0]
 80018c8:	688b      	ldr	r3, [r1, #8]
 80018ca:	4856      	ldr	r0, [pc, #344]	; (8001a24 <UART_SetConfig+0x190>)
 80018cc:	4003      	ands	r3, r0
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018d2:	4b55      	ldr	r3, [pc, #340]	; (8001a28 <UART_SetConfig+0x194>)
 80018d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d6:	2303      	movs	r3, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d026      	beq.n	800192c <UART_SetConfig+0x98>
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <UART_SetConfig+0x5a>
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d024      	beq.n	8001930 <UART_SetConfig+0x9c>
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d024      	beq.n	8001934 <UART_SetConfig+0xa0>
 80018ea:	2310      	movs	r3, #16
 80018ec:	e000      	b.n	80018f0 <UART_SetConfig+0x5c>
 80018ee:	2300      	movs	r3, #0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	0212      	lsls	r2, r2, #8
 80018f4:	69e1      	ldr	r1, [r4, #28]
 80018f6:	4291      	cmp	r1, r2
 80018f8:	d01e      	beq.n	8001938 <UART_SetConfig+0xa4>
    switch (clocksource)
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d100      	bne.n	8001900 <UART_SetConfig+0x6c>
 80018fe:	e06f      	b.n	80019e0 <UART_SetConfig+0x14c>
 8001900:	d95e      	bls.n	80019c0 <UART_SetConfig+0x12c>
 8001902:	2b04      	cmp	r3, #4
 8001904:	d100      	bne.n	8001908 <UART_SetConfig+0x74>
 8001906:	e079      	b.n	80019fc <UART_SetConfig+0x168>
 8001908:	2b08      	cmp	r3, #8
 800190a:	d000      	beq.n	800190e <UART_SetConfig+0x7a>
 800190c:	e084      	b.n	8001a18 <UART_SetConfig+0x184>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800190e:	6863      	ldr	r3, [r4, #4]
 8001910:	0858      	lsrs	r0, r3, #1
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	469c      	mov	ip, r3
 8001918:	4460      	add	r0, ip
 800191a:	6861      	ldr	r1, [r4, #4]
 800191c:	f7fe fc06 	bl	800012c <__udivsi3>
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	0400      	lsls	r0, r0, #16
 8001924:	0c00      	lsrs	r0, r0, #16
 8001926:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001928:	2000      	movs	r0, #0
        break;
 800192a:	e02e      	b.n	800198a <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800192c:	2304      	movs	r3, #4
 800192e:	e7df      	b.n	80018f0 <UART_SetConfig+0x5c>
 8001930:	2308      	movs	r3, #8
 8001932:	e7dd      	b.n	80018f0 <UART_SetConfig+0x5c>
 8001934:	2302      	movs	r3, #2
 8001936:	e7db      	b.n	80018f0 <UART_SetConfig+0x5c>
    switch (clocksource)
 8001938:	2b02      	cmp	r3, #2
 800193a:	d027      	beq.n	800198c <UART_SetConfig+0xf8>
 800193c:	d90f      	bls.n	800195e <UART_SetConfig+0xca>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d02f      	beq.n	80019a2 <UART_SetConfig+0x10e>
 8001942:	2b08      	cmp	r3, #8
 8001944:	d139      	bne.n	80019ba <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001946:	6863      	ldr	r3, [r4, #4]
 8001948:	0858      	lsrs	r0, r3, #1
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	469c      	mov	ip, r3
 8001950:	4460      	add	r0, ip
 8001952:	6861      	ldr	r1, [r4, #4]
 8001954:	f7fe fbea 	bl	800012c <__udivsi3>
 8001958:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800195a:	2000      	movs	r0, #0
        break;
 800195c:	e00c      	b.n	8001978 <UART_SetConfig+0xe4>
    switch (clocksource)
 800195e:	2b00      	cmp	r3, #0
 8001960:	d12b      	bne.n	80019ba <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001962:	f7ff fa53 	bl	8000e0c <HAL_RCC_GetPCLK1Freq>
 8001966:	0040      	lsls	r0, r0, #1
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	18c0      	adds	r0, r0, r3
 800196e:	6861      	ldr	r1, [r4, #4]
 8001970:	f7fe fbdc 	bl	800012c <__udivsi3>
 8001974:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001976:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001978:	220f      	movs	r2, #15
 800197a:	0019      	movs	r1, r3
 800197c:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800197e:	105b      	asrs	r3, r3, #1
 8001980:	3a08      	subs	r2, #8
 8001982:	4013      	ands	r3, r2
 8001984:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	60d3      	str	r3, [r2, #12]
}
 800198a:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	0858      	lsrs	r0, r3, #1
 8001990:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <UART_SetConfig+0x198>)
 8001992:	469c      	mov	ip, r3
 8001994:	4460      	add	r0, ip
 8001996:	6861      	ldr	r1, [r4, #4]
 8001998:	f7fe fbc8 	bl	800012c <__udivsi3>
 800199c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800199e:	2000      	movs	r0, #0
        break;
 80019a0:	e7ea      	b.n	8001978 <UART_SetConfig+0xe4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019a2:	f7ff f94b 	bl	8000c3c <HAL_RCC_GetSysClockFreq>
 80019a6:	0040      	lsls	r0, r0, #1
 80019a8:	6863      	ldr	r3, [r4, #4]
 80019aa:	085b      	lsrs	r3, r3, #1
 80019ac:	18c0      	adds	r0, r0, r3
 80019ae:	6861      	ldr	r1, [r4, #4]
 80019b0:	f7fe fbbc 	bl	800012c <__udivsi3>
 80019b4:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80019b6:	2000      	movs	r0, #0
        break;
 80019b8:	e7de      	b.n	8001978 <UART_SetConfig+0xe4>
        ret = HAL_ERROR;
 80019ba:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80019bc:	2300      	movs	r3, #0
 80019be:	e7db      	b.n	8001978 <UART_SetConfig+0xe4>
    switch (clocksource)
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d129      	bne.n	8001a18 <UART_SetConfig+0x184>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80019c4:	f7ff fa22 	bl	8000e0c <HAL_RCC_GetPCLK1Freq>
 80019c8:	6863      	ldr	r3, [r4, #4]
 80019ca:	085b      	lsrs	r3, r3, #1
 80019cc:	18c0      	adds	r0, r0, r3
 80019ce:	6861      	ldr	r1, [r4, #4]
 80019d0:	f7fe fbac 	bl	800012c <__udivsi3>
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	0400      	lsls	r0, r0, #16
 80019d8:	0c00      	lsrs	r0, r0, #16
 80019da:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80019dc:	2000      	movs	r0, #0
        break;
 80019de:	e7d4      	b.n	800198a <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80019e0:	6863      	ldr	r3, [r4, #4]
 80019e2:	0858      	lsrs	r0, r3, #1
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <UART_SetConfig+0x19c>)
 80019e6:	469c      	mov	ip, r3
 80019e8:	4460      	add	r0, ip
 80019ea:	6861      	ldr	r1, [r4, #4]
 80019ec:	f7fe fb9e 	bl	800012c <__udivsi3>
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	0400      	lsls	r0, r0, #16
 80019f4:	0c00      	lsrs	r0, r0, #16
 80019f6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80019f8:	2000      	movs	r0, #0
        break;
 80019fa:	e7c6      	b.n	800198a <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80019fc:	f7ff f91e 	bl	8000c3c <HAL_RCC_GetSysClockFreq>
 8001a00:	6863      	ldr	r3, [r4, #4]
 8001a02:	085b      	lsrs	r3, r3, #1
 8001a04:	18c0      	adds	r0, r0, r3
 8001a06:	6861      	ldr	r1, [r4, #4]
 8001a08:	f7fe fb90 	bl	800012c <__udivsi3>
 8001a0c:	6823      	ldr	r3, [r4, #0]
 8001a0e:	0400      	lsls	r0, r0, #16
 8001a10:	0c00      	lsrs	r0, r0, #16
 8001a12:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a14:	2000      	movs	r0, #0
        break;
 8001a16:	e7b8      	b.n	800198a <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
 8001a1a:	e7b6      	b.n	800198a <UART_SetConfig+0xf6>
 8001a1c:	ffff69f3 	.word	0xffff69f3
 8001a20:	ffffcfff 	.word	0xffffcfff
 8001a24:	fffff4ff 	.word	0xfffff4ff
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	00f42400 	.word	0x00f42400
 8001a30:	007a1200 	.word	0x007a1200

08001a34 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001a34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a36:	07db      	lsls	r3, r3, #31
 8001a38:	d506      	bpl.n	8001a48 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001a3a:	6802      	ldr	r2, [r0, #0]
 8001a3c:	6853      	ldr	r3, [r2, #4]
 8001a3e:	492c      	ldr	r1, [pc, #176]	; (8001af0 <UART_AdvFeatureConfig+0xbc>)
 8001a40:	400b      	ands	r3, r1
 8001a42:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001a48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a4a:	079b      	lsls	r3, r3, #30
 8001a4c:	d506      	bpl.n	8001a5c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001a4e:	6802      	ldr	r2, [r0, #0]
 8001a50:	6853      	ldr	r3, [r2, #4]
 8001a52:	4928      	ldr	r1, [pc, #160]	; (8001af4 <UART_AdvFeatureConfig+0xc0>)
 8001a54:	400b      	ands	r3, r1
 8001a56:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001a58:	430b      	orrs	r3, r1
 8001a5a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001a5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a5e:	075b      	lsls	r3, r3, #29
 8001a60:	d506      	bpl.n	8001a70 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	6853      	ldr	r3, [r2, #4]
 8001a66:	4924      	ldr	r1, [pc, #144]	; (8001af8 <UART_AdvFeatureConfig+0xc4>)
 8001a68:	400b      	ands	r3, r1
 8001a6a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a72:	071b      	lsls	r3, r3, #28
 8001a74:	d506      	bpl.n	8001a84 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a76:	6802      	ldr	r2, [r0, #0]
 8001a78:	6853      	ldr	r3, [r2, #4]
 8001a7a:	4920      	ldr	r1, [pc, #128]	; (8001afc <UART_AdvFeatureConfig+0xc8>)
 8001a7c:	400b      	ands	r3, r1
 8001a7e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a86:	06db      	lsls	r3, r3, #27
 8001a88:	d506      	bpl.n	8001a98 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a8a:	6802      	ldr	r2, [r0, #0]
 8001a8c:	6893      	ldr	r3, [r2, #8]
 8001a8e:	491c      	ldr	r1, [pc, #112]	; (8001b00 <UART_AdvFeatureConfig+0xcc>)
 8001a90:	400b      	ands	r3, r1
 8001a92:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a9a:	069b      	lsls	r3, r3, #26
 8001a9c:	d506      	bpl.n	8001aac <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a9e:	6802      	ldr	r2, [r0, #0]
 8001aa0:	6893      	ldr	r3, [r2, #8]
 8001aa2:	4918      	ldr	r1, [pc, #96]	; (8001b04 <UART_AdvFeatureConfig+0xd0>)
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001aae:	065b      	lsls	r3, r3, #25
 8001ab0:	d50b      	bpl.n	8001aca <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ab2:	6802      	ldr	r2, [r0, #0]
 8001ab4:	6853      	ldr	r3, [r2, #4]
 8001ab6:	4914      	ldr	r1, [pc, #80]	; (8001b08 <UART_AdvFeatureConfig+0xd4>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	035b      	lsls	r3, r3, #13
 8001ac4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d00a      	beq.n	8001ae0 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	d506      	bpl.n	8001ade <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ad0:	6802      	ldr	r2, [r0, #0]
 8001ad2:	6853      	ldr	r3, [r2, #4]
 8001ad4:	490d      	ldr	r1, [pc, #52]	; (8001b0c <UART_AdvFeatureConfig+0xd8>)
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001ada:	430b      	orrs	r3, r1
 8001adc:	6053      	str	r3, [r2, #4]
}
 8001ade:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ae0:	6802      	ldr	r2, [r0, #0]
 8001ae2:	6853      	ldr	r3, [r2, #4]
 8001ae4:	490a      	ldr	r1, [pc, #40]	; (8001b10 <UART_AdvFeatureConfig+0xdc>)
 8001ae6:	400b      	ands	r3, r1
 8001ae8:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6053      	str	r3, [r2, #4]
 8001aee:	e7ec      	b.n	8001aca <UART_AdvFeatureConfig+0x96>
 8001af0:	fffdffff 	.word	0xfffdffff
 8001af4:	fffeffff 	.word	0xfffeffff
 8001af8:	fffbffff 	.word	0xfffbffff
 8001afc:	ffff7fff 	.word	0xffff7fff
 8001b00:	ffffefff 	.word	0xffffefff
 8001b04:	ffffdfff 	.word	0xffffdfff
 8001b08:	ffefffff 	.word	0xffefffff
 8001b0c:	fff7ffff 	.word	0xfff7ffff
 8001b10:	ff9fffff 	.word	0xff9fffff

08001b14 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	66c3      	str	r3, [r0, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 8001b18:	2220      	movs	r2, #32
 8001b1a:	2169      	movs	r1, #105	; 0x69
 8001b1c:	5442      	strb	r2, [r0, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8001b1e:	3101      	adds	r1, #1
 8001b20:	5442      	strb	r2, [r0, r1]
  __HAL_UNLOCK(huart);
 8001b22:	3248      	adds	r2, #72	; 0x48
 8001b24:	5483      	strb	r3, [r0, r2]
}
 8001b26:	2000      	movs	r0, #0
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_UART_Init>:
{
 8001b2c:	b510      	push	{r4, lr}
 8001b2e:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001b30:	d030      	beq.n	8001b94 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001b32:	2369      	movs	r3, #105	; 0x69
 8001b34:	5cc3      	ldrb	r3, [r0, r3]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d022      	beq.n	8001b80 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b3a:	2369      	movs	r3, #105	; 0x69
 8001b3c:	2224      	movs	r2, #36	; 0x24
 8001b3e:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	438b      	bics	r3, r1
 8001b48:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b4a:	0020      	movs	r0, r4
 8001b4c:	f7ff fea2 	bl	8001894 <UART_SetConfig>
 8001b50:	2801      	cmp	r0, #1
 8001b52:	d014      	beq.n	8001b7e <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	6853      	ldr	r3, [r2, #4]
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_UART_Init+0x6c>)
 8001b60:	400b      	ands	r3, r1
 8001b62:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001b64:	6822      	ldr	r2, [r4, #0]
 8001b66:	6893      	ldr	r3, [r2, #8]
 8001b68:	2108      	movs	r1, #8
 8001b6a:	438b      	bics	r3, r1
 8001b6c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b6e:	6822      	ldr	r2, [r4, #0]
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	3907      	subs	r1, #7
 8001b74:	430b      	orrs	r3, r1
 8001b76:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b78:	0020      	movs	r0, r4
 8001b7a:	f7ff ffcb 	bl	8001b14 <UART_CheckIdleState>
}
 8001b7e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b80:	3368      	adds	r3, #104	; 0x68
 8001b82:	2200      	movs	r2, #0
 8001b84:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001b86:	f001 fcfd 	bl	8003584 <HAL_UART_MspInit>
 8001b8a:	e7d6      	b.n	8001b3a <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8001b8c:	0020      	movs	r0, r4
 8001b8e:	f7ff ff51 	bl	8001a34 <UART_AdvFeatureConfig>
 8001b92:	e7e2      	b.n	8001b5a <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
 8001b96:	e7f2      	b.n	8001b7e <HAL_UART_Init+0x52>
 8001b98:	fffff7ff 	.word	0xfffff7ff

08001b9c <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b9c:	2369      	movs	r3, #105	; 0x69
 8001b9e:	5cc3      	ldrb	r3, [r0, r3]
 8001ba0:	2b21      	cmp	r3, #33	; 0x21
 8001ba2:	d12f      	bne.n	8001c04 <UART_Transmit_IT+0x68>
  {
    if(huart->TxXferCount == 0U)
 8001ba4:	3331      	adds	r3, #49	; 0x31
 8001ba6:	5ac3      	ldrh	r3, [r0, r3]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d011      	beq.n	8001bd2 <UART_Transmit_IT+0x36>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	015b      	lsls	r3, r3, #5
 8001bb2:	6882      	ldr	r2, [r0, #8]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d018      	beq.n	8001bea <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
        huart->pTxBuffPtr += 2U;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001bb8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	64c2      	str	r2, [r0, #76]	; 0x4c
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	8513      	strh	r3, [r2, #40]	; 0x28
      }
      huart->TxXferCount--;
 8001bc4:	2252      	movs	r2, #82	; 0x52
 8001bc6:	5a83      	ldrh	r3, [r0, r2]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e019      	b.n	8001c06 <UART_Transmit_IT+0x6a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001bd2:	6802      	ldr	r2, [r0, #0]
 8001bd4:	6813      	ldr	r3, [r2, #0]
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	438b      	bics	r3, r1
 8001bda:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	3940      	subs	r1, #64	; 0x40
 8001be2:	430b      	orrs	r3, r1
 8001be4:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8001be6:	2000      	movs	r0, #0
 8001be8:	e00d      	b.n	8001c06 <UART_Transmit_IT+0x6a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bea:	6903      	ldr	r3, [r0, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e3      	bne.n	8001bb8 <UART_Transmit_IT+0x1c>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001bf0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	05db      	lsls	r3, r3, #23
 8001bf6:	0ddb      	lsrs	r3, r3, #23
 8001bf8:	6802      	ldr	r2, [r0, #0]
 8001bfa:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001bfc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001bfe:	3302      	adds	r3, #2
 8001c00:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001c02:	e7df      	b.n	8001bc4 <UART_Transmit_IT+0x28>
    }
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2002      	movs	r0, #2
  }
}
 8001c06:	4770      	bx	lr

08001c08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c08:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6813      	ldr	r3, [r2, #0]
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	438b      	bics	r3, r1
 8001c12:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c14:	2369      	movs	r3, #105	; 0x69
 8001c16:	2220      	movs	r2, #32
 8001c18:	54c2      	strb	r2, [r0, r3]

  HAL_UART_TxCpltCallback(huart);
 8001c1a:	f7ff fe2d 	bl	8001878 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001c1e:	2000      	movs	r0, #0
 8001c20:	bd10      	pop	{r4, pc}
	...

08001c24 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001c24:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8001c26:	235c      	movs	r3, #92	; 0x5c
 8001c28:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c2a:	330e      	adds	r3, #14
 8001c2c:	5cc3      	ldrb	r3, [r0, r3]
 8001c2e:	2b22      	cmp	r3, #34	; 0x22
 8001c30:	d132      	bne.n	8001c98 <UART_Receive_IT+0x74>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c32:	6803      	ldr	r3, [r0, #0]
 8001c34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001c36:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c38:	2180      	movs	r1, #128	; 0x80
 8001c3a:	0149      	lsls	r1, r1, #5
 8001c3c:	6884      	ldr	r4, [r0, #8]
 8001c3e:	428c      	cmp	r4, r1
 8001c40:	d00e      	beq.n	8001c60 <UART_Receive_IT+0x3c>
      *tmp = (uint16_t)(uhdata & uhMask);
      huart->pRxBuffPtr +=2U;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001c46:	1c4c      	adds	r4, r1, #1
 8001c48:	6544      	str	r4, [r0, #84]	; 0x54
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0U)
 8001c4e:	225a      	movs	r2, #90	; 0x5a
 8001c50:	5a83      	ldrh	r3, [r0, r2]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	5283      	strh	r3, [r0, r2]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00b      	beq.n	8001c74 <UART_Receive_IT+0x50>
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e021      	b.n	8001ca4 <UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c60:	6901      	ldr	r1, [r0, #16]
 8001c62:	2900      	cmp	r1, #0
 8001c64:	d1ed      	bne.n	8001c42 <UART_Receive_IT+0x1e>
      *tmp = (uint16_t)(uhdata & uhMask);
 8001c66:	4013      	ands	r3, r2
 8001c68:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c6a:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8001c6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c6e:	3302      	adds	r3, #2
 8001c70:	6543      	str	r3, [r0, #84]	; 0x54
 8001c72:	e7ec      	b.n	8001c4e <UART_Receive_IT+0x2a>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c74:	6802      	ldr	r2, [r0, #0]
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	490b      	ldr	r1, [pc, #44]	; (8001ca8 <UART_Receive_IT+0x84>)
 8001c7a:	400b      	ands	r3, r1
 8001c7c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c7e:	6802      	ldr	r2, [r0, #0]
 8001c80:	6893      	ldr	r3, [r2, #8]
 8001c82:	3123      	adds	r1, #35	; 0x23
 8001c84:	31ff      	adds	r1, #255	; 0xff
 8001c86:	438b      	bics	r3, r1
 8001c88:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001c8a:	236a      	movs	r3, #106	; 0x6a
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8001c90:	f7ff fdf3 	bl	800187a <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	e005      	b.n	8001ca4 <UART_Receive_IT+0x80>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001c98:	6802      	ldr	r2, [r0, #0]
 8001c9a:	6993      	ldr	r3, [r2, #24]
 8001c9c:	2108      	movs	r1, #8
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8001ca2:	2002      	movs	r0, #2
  }
}
 8001ca4:	bd10      	pop	{r4, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	fffffedf 	.word	0xfffffedf

08001cac <HAL_UART_IRQHandler>:
{
 8001cac:	b570      	push	{r4, r5, r6, lr}
 8001cae:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001cb0:	6801      	ldr	r1, [r0, #0]
 8001cb2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cb4:	6808      	ldr	r0, [r1, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8001cba:	d103      	bne.n	8001cc4 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cbc:	069d      	lsls	r5, r3, #26
 8001cbe:	d501      	bpl.n	8001cc4 <HAL_UART_IRQHandler+0x18>
 8001cc0:	0685      	lsls	r5, r0, #26
 8001cc2:	d45b      	bmi.n	8001d7c <HAL_UART_IRQHandler+0xd0>
  cr3its = READ_REG(huart->Instance->CR3);
 8001cc4:	688d      	ldr	r5, [r1, #8]
  if(   (errorflags != RESET)
 8001cc6:	2a00      	cmp	r2, #0
 8001cc8:	d06e      	beq.n	8001da8 <HAL_UART_IRQHandler+0xfc>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	402a      	ands	r2, r5
 8001cce:	d103      	bne.n	8001cd8 <HAL_UART_IRQHandler+0x2c>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001cd0:	2590      	movs	r5, #144	; 0x90
 8001cd2:	006d      	lsls	r5, r5, #1
 8001cd4:	4228      	tst	r0, r5
 8001cd6:	d067      	beq.n	8001da8 <HAL_UART_IRQHandler+0xfc>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cd8:	07dd      	lsls	r5, r3, #31
 8001cda:	d506      	bpl.n	8001cea <HAL_UART_IRQHandler+0x3e>
 8001cdc:	05c5      	lsls	r5, r0, #23
 8001cde:	d504      	bpl.n	8001cea <HAL_UART_IRQHandler+0x3e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001ce0:	2501      	movs	r5, #1
 8001ce2:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ce4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001ce6:	4329      	orrs	r1, r5
 8001ce8:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cea:	0799      	lsls	r1, r3, #30
 8001cec:	d508      	bpl.n	8001d00 <HAL_UART_IRQHandler+0x54>
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d006      	beq.n	8001d00 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001cf2:	6821      	ldr	r1, [r4, #0]
 8001cf4:	2502      	movs	r5, #2
 8001cf6:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cf8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001cfa:	3502      	adds	r5, #2
 8001cfc:	4329      	orrs	r1, r5
 8001cfe:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d00:	0759      	lsls	r1, r3, #29
 8001d02:	d508      	bpl.n	8001d16 <HAL_UART_IRQHandler+0x6a>
 8001d04:	2a00      	cmp	r2, #0
 8001d06:	d006      	beq.n	8001d16 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001d08:	6821      	ldr	r1, [r4, #0]
 8001d0a:	2504      	movs	r5, #4
 8001d0c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d0e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001d10:	3d02      	subs	r5, #2
 8001d12:	4329      	orrs	r1, r5
 8001d14:	66e1      	str	r1, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001d16:	0719      	lsls	r1, r3, #28
 8001d18:	d509      	bpl.n	8001d2e <HAL_UART_IRQHandler+0x82>
 8001d1a:	0681      	lsls	r1, r0, #26
 8001d1c:	d401      	bmi.n	8001d22 <HAL_UART_IRQHandler+0x76>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	2108      	movs	r1, #8
 8001d26:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d28:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d2e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001d30:	2a00      	cmp	r2, #0
 8001d32:	d041      	beq.n	8001db8 <HAL_UART_IRQHandler+0x10c>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d34:	069b      	lsls	r3, r3, #26
 8001d36:	d501      	bpl.n	8001d3c <HAL_UART_IRQHandler+0x90>
 8001d38:	0683      	lsls	r3, r0, #26
 8001d3a:	d423      	bmi.n	8001d84 <HAL_UART_IRQHandler+0xd8>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001d3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001d3e:	071b      	lsls	r3, r3, #28
 8001d40:	d403      	bmi.n	8001d4a <HAL_UART_IRQHandler+0x9e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001d46:	065b      	lsls	r3, r3, #25
 8001d48:	d528      	bpl.n	8001d9c <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8001d4a:	0020      	movs	r0, r4
 8001d4c:	f7ff fd82 	bl	8001854 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	0652      	lsls	r2, r2, #25
 8001d56:	d51d      	bpl.n	8001d94 <HAL_UART_IRQHandler+0xe8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	2140      	movs	r1, #64	; 0x40
 8001d5c:	438a      	bics	r2, r1
 8001d5e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_UART_IRQHandler+0xe0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_UART_IRQHandler+0x120>)
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d6a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001d6c:	f7fe faf0 	bl	8000350 <HAL_DMA_Abort_IT>
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d021      	beq.n	8001db8 <HAL_UART_IRQHandler+0x10c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d74:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001d76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001d78:	4798      	blx	r3
 8001d7a:	e01d      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
      UART_Receive_IT(huart);
 8001d7c:	0020      	movs	r0, r4
 8001d7e:	f7ff ff51 	bl	8001c24 <UART_Receive_IT>
      return;
 8001d82:	e019      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
        UART_Receive_IT(huart);
 8001d84:	0020      	movs	r0, r4
 8001d86:	f7ff ff4d 	bl	8001c24 <UART_Receive_IT>
 8001d8a:	e7d7      	b.n	8001d3c <HAL_UART_IRQHandler+0x90>
            HAL_UART_ErrorCallback(huart);
 8001d8c:	0020      	movs	r0, r4
 8001d8e:	f7ff fd75 	bl	800187c <HAL_UART_ErrorCallback>
 8001d92:	e011      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
          HAL_UART_ErrorCallback(huart);
 8001d94:	0020      	movs	r0, r4
 8001d96:	f7ff fd71 	bl	800187c <HAL_UART_ErrorCallback>
 8001d9a:	e00d      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
        HAL_UART_ErrorCallback(huart);
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	f7ff fd6d 	bl	800187c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	66e3      	str	r3, [r4, #108]	; 0x6c
 8001da6:	e007      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001da8:	061a      	lsls	r2, r3, #24
 8001daa:	d501      	bpl.n	8001db0 <HAL_UART_IRQHandler+0x104>
 8001dac:	0602      	lsls	r2, r0, #24
 8001dae:	d404      	bmi.n	8001dba <HAL_UART_IRQHandler+0x10e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001db0:	065b      	lsls	r3, r3, #25
 8001db2:	d501      	bpl.n	8001db8 <HAL_UART_IRQHandler+0x10c>
 8001db4:	0643      	lsls	r3, r0, #25
 8001db6:	d404      	bmi.n	8001dc2 <HAL_UART_IRQHandler+0x116>
}
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
 8001dba:	0020      	movs	r0, r4
 8001dbc:	f7ff feee 	bl	8001b9c <UART_Transmit_IT>
    return;
 8001dc0:	e7fa      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
    UART_EndTransmit_IT(huart);
 8001dc2:	0020      	movs	r0, r4
 8001dc4:	f7ff ff20 	bl	8001c08 <UART_EndTransmit_IT>
    return;
 8001dc8:	e7f6      	b.n	8001db8 <HAL_UART_IRQHandler+0x10c>
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	0800187f 	.word	0x0800187f

08001dd0 <CH395TCPServerStart>:
		blk += 4;
	}
}

BOOL CH395TCPServerStart(uint32_t ip, uint16_t port)
{
 8001dd0:	b530      	push	{r4, r5, lr}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	9001      	str	r0, [sp, #4]
 8001dd6:	000d      	movs	r5, r1
	uint8_t i;
	// Initialize Stack
	CH395CMDInitCH395();
 8001dd8:	f000 f89a 	bl	8001f10 <CH395CMDInitCH395>
	ch395.RX_received = 0;
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <CH395TCPServerStart+0x88>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	705a      	strb	r2, [r3, #1]
	ch395.TX_available= 0;
 8001de2:	70da      	strb	r2, [r3, #3]
	ch395.SOCK_responding = -1;
 8001de4:	32ff      	adds	r2, #255	; 0xff
 8001de6:	709a      	strb	r2, [r3, #2]
	// Check PHY
	i=0;
 8001de8:	2400      	movs	r4, #0
	do
	{
		Delay_ms(100);
 8001dea:	481c      	ldr	r0, [pc, #112]	; (8001e5c <CH395TCPServerStart+0x8c>)
 8001dec:	f000 fabc 	bl	8002368 <Delay_us>
		uint8_t phy = CH395CMDGetPHYStatus();
 8001df0:	f000 f858 	bl	8001ea4 <CH395CMDGetPHYStatus>
		if(phy != (uint8_t)1) break; // PHY connected
 8001df4:	2801      	cmp	r0, #1
 8001df6:	d103      	bne.n	8001e00 <CH395TCPServerStart+0x30>
		++i;
 8001df8:	3401      	adds	r4, #1
 8001dfa:	b2e4      	uxtb	r4, r4
	}while(i<5);
 8001dfc:	2c04      	cmp	r4, #4
 8001dfe:	d9f4      	bls.n	8001dea <CH395TCPServerStart+0x1a>
	if(i >= 5) return FALSE;
 8001e00:	2c04      	cmp	r4, #4
 8001e02:	d902      	bls.n	8001e0a <CH395TCPServerStart+0x3a>
 8001e04:	2000      	movs	r0, #0
	}

	CH395OpenSocket(0); // open socket 0
	uint8_t s = CH395TCPListen(0); // start lisening
	return s;
}
 8001e06:	b003      	add	sp, #12
 8001e08:	bd30      	pop	{r4, r5, pc}
	Delay_ms(200);
 8001e0a:	4815      	ldr	r0, [pc, #84]	; (8001e60 <CH395TCPServerStart+0x90>)
 8001e0c:	f000 faac 	bl	8002368 <Delay_us>
	if(CH395DHCPEnable(TRUE) != 0)
 8001e10:	2001      	movs	r0, #1
 8001e12:	f000 fa19 	bl	8002248 <CH395DHCPEnable>
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d104      	bne.n	8001e24 <CH395TCPServerStart+0x54>
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER);
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f000 fa52 	bl	80022c4 <CH395SetStartPara>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 8001e20:	2400      	movs	r4, #0
 8001e22:	e010      	b.n	8001e46 <CH395TCPServerStart+0x76>
		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
 8001e24:	a801      	add	r0, sp, #4
 8001e26:	f000 f891 	bl	8001f4c <CH395CMDSetIPAddr>
		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
 8001e2a:	a801      	add	r0, sp, #4
 8001e2c:	f000 f8a8 	bl	8001f80 <CH395CMDSetGWIPAddr>
 8001e30:	e7f3      	b.n	8001e1a <CH395TCPServerStart+0x4a>
		CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET 0 to be TCP server
 8001e32:	2103      	movs	r1, #3
 8001e34:	0020      	movs	r0, r4
 8001e36:	f000 f8bd 	bl	8001fb4 <CH395SetSocketProtType>
		CH395SetSocketSourPort(i, port);
 8001e3a:	0029      	movs	r1, r5
 8001e3c:	0020      	movs	r0, r4
 8001e3e:	f000 f8cf 	bl	8001fe0 <CH395SetSocketSourPort>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 8001e42:	3401      	adds	r4, #1
 8001e44:	b2e4      	uxtb	r4, r4
 8001e46:	2c03      	cmp	r4, #3
 8001e48:	d9f3      	bls.n	8001e32 <CH395TCPServerStart+0x62>
	CH395OpenSocket(0); // open socket 0
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f9a0 	bl	8002190 <CH395OpenSocket>
	uint8_t s = CH395TCPListen(0); // start lisening
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f9bf 	bl	80021d4 <CH395TCPListen>
	return s;
 8001e56:	e7d6      	b.n	8001e06 <CH395TCPServerStart+0x36>
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	000186a0 	.word	0x000186a0
 8001e60:	00030d40 	.word	0x00030d40

08001e64 <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 8001e64:	b510      	push	{r4, lr}
    xWriteCH395Cmd(CMD00_RESET_ALL);
 8001e66:	2005      	movs	r0, #5
 8001e68:	f000 fa40 	bl	80022ec <xWriteCH395Cmd>
    xEndCH395Cmd();
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <CH395CMDReset+0x18>)
 8001e6e:	8899      	ldrh	r1, [r3, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f7fe fca3 	bl	80007be <HAL_GPIO_WritePin>
}
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	20000000 	.word	0x20000000

08001e80 <CH395CMDGetVer>:
* Input          : None
* Output         : None
* Return         : 1字节芯片及固件版本号
*******************************************************************************/
uint8_t CH395CMDGetVer(void)
{
 8001e80:	b510      	push	{r4, lr}
    uint8_t i;
    xWriteCH395Cmd(CMD01_GET_IC_VER);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f000 fa32 	bl	80022ec <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001e88:	f000 fa5e 	bl	8002348 <xReadCH395Data>
 8001e8c:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <CH395CMDGetVer+0x20>)
 8001e90:	8899      	ldrh	r1, [r3, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f7fe fc92 	bl	80007be <HAL_GPIO_WritePin>
    return i;
}
 8001e9a:	0020      	movs	r0, r4
 8001e9c:	bd10      	pop	{r4, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	20000000 	.word	0x20000000

08001ea4 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 8001ea4:	b510      	push	{r4, lr}
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 8001ea6:	2026      	movs	r0, #38	; 0x26
 8001ea8:	f000 fa20 	bl	80022ec <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001eac:	f000 fa4c 	bl	8002348 <xReadCH395Data>
 8001eb0:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <CH395CMDGetPHYStatus+0x20>)
 8001eb4:	8899      	ldrh	r1, [r3, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f7fe fc80 	bl	80007be <HAL_GPIO_WritePin>
    return i;
}
 8001ebe:	0020      	movs	r0, r4
 8001ec0:	bd10      	pop	{r4, pc}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <CH395CMDGetGlobIntStatus>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint8_t CH395CMDGetGlobIntStatus(void)
{
 8001ec8:	b510      	push	{r4, lr}
    uint8_t init_status;

    xWriteCH395Cmd(CMD01_GET_GLOB_INT_STATUS);
 8001eca:	2029      	movs	r0, #41	; 0x29
 8001ecc:	f000 fa0e 	bl	80022ec <xWriteCH395Cmd>
    init_status = xReadCH395Data();
 8001ed0:	f000 fa3a 	bl	8002348 <xReadCH395Data>
 8001ed4:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001ed6:	4b04      	ldr	r3, [pc, #16]	; (8001ee8 <CH395CMDGetGlobIntStatus+0x20>)
 8001ed8:	8899      	ldrh	r1, [r3, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f7fe fc6e 	bl	80007be <HAL_GPIO_WritePin>
    return  init_status;
}
 8001ee2:	0020      	movs	r0, r4
 8001ee4:	bd10      	pop	{r4, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	20000000 	.word	0x20000000

08001eec <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 8001eec:	b510      	push	{r4, lr}
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 8001eee:	202c      	movs	r0, #44	; 0x2c
 8001ef0:	f000 f9fc 	bl	80022ec <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001ef4:	f000 fa28 	bl	8002348 <xReadCH395Data>
 8001ef8:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <CH395GetCmdStatus+0x20>)
 8001efc:	8899      	ldrh	r1, [r3, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f7fe fc5c 	bl	80007be <HAL_GPIO_WritePin>
    return i;
}
 8001f06:	0020      	movs	r0, r4
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	20000000 	.word	0x20000000

08001f10 <CH395CMDInitCH395>:
{
 8001f10:	b510      	push	{r4, lr}
    xWriteCH395Cmd(CMD0W_INIT_CH395);
 8001f12:	2027      	movs	r0, #39	; 0x27
 8001f14:	f000 f9ea 	bl	80022ec <xWriteCH395Cmd>
    xEndCH395Cmd();
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <CH395CMDInitCH395+0x34>)
 8001f1a:	8899      	ldrh	r1, [r3, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f7fe fc4d 	bl	80007be <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001f24:	2400      	movs	r4, #0
 8001f26:	e000      	b.n	8001f2a <CH395CMDInitCH395+0x1a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 8001f28:	001c      	movs	r4, r3
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <CH395CMDInitCH395+0x38>)
 8001f2c:	f000 fa1c 	bl	8002368 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001f30:	f7ff ffdc 	bl	8001eec <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001f34:	2810      	cmp	r0, #16
 8001f36:	d104      	bne.n	8001f42 <CH395CMDInitCH395+0x32>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 8001f38:	1c63      	adds	r3, r4, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2cc8      	cmp	r4, #200	; 0xc8
 8001f3e:	d9f3      	bls.n	8001f28 <CH395CMDInitCH395+0x18>
 8001f40:	30ea      	adds	r0, #234	; 0xea
}
 8001f42:	bd10      	pop	{r4, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	00002710 	.word	0x00002710

08001f4c <CH395CMDSetIPAddr>:
* Input          : ipaddr 指IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetIPAddr(uint8_t *ipaddr)
{
 8001f4c:	b570      	push	{r4, r5, r6, lr}
 8001f4e:	0005      	movs	r5, r0
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_IP_ADDR);
 8001f50:	2022      	movs	r0, #34	; 0x22
 8001f52:	f000 f9cb 	bl	80022ec <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*ipaddr++);
 8001f56:	2400      	movs	r4, #0
 8001f58:	e006      	b.n	8001f68 <CH395CMDSetIPAddr+0x1c>
 8001f5a:	1c6e      	adds	r6, r5, #1
 8001f5c:	7828      	ldrb	r0, [r5, #0]
 8001f5e:	f000 f9e5 	bl	800232c <xWriteCH395Data>
 8001f62:	3401      	adds	r4, #1
 8001f64:	b2e4      	uxtb	r4, r4
 8001f66:	0035      	movs	r5, r6
 8001f68:	2c03      	cmp	r4, #3
 8001f6a:	d9f6      	bls.n	8001f5a <CH395CMDSetIPAddr+0xe>
    xEndCH395Cmd();
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <CH395CMDSetIPAddr+0x30>)
 8001f6e:	8899      	ldrh	r1, [r3, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f7fe fc23 	bl	80007be <HAL_GPIO_WritePin>
}
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	20000000 	.word	0x20000000

08001f80 <CH395CMDSetGWIPAddr>:
* Input          : ipaddr 指向网关IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetGWIPAddr(uint8_t *gwipaddr)
{
 8001f80:	b570      	push	{r4, r5, r6, lr}
 8001f82:	0005      	movs	r5, r0
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_GWIP_ADDR);
 8001f84:	2023      	movs	r0, #35	; 0x23
 8001f86:	f000 f9b1 	bl	80022ec <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*gwipaddr++);
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	e006      	b.n	8001f9c <CH395CMDSetGWIPAddr+0x1c>
 8001f8e:	1c6e      	adds	r6, r5, #1
 8001f90:	7828      	ldrb	r0, [r5, #0]
 8001f92:	f000 f9cb 	bl	800232c <xWriteCH395Data>
 8001f96:	3401      	adds	r4, #1
 8001f98:	b2e4      	uxtb	r4, r4
 8001f9a:	0035      	movs	r5, r6
 8001f9c:	2c03      	cmp	r4, #3
 8001f9e:	d9f6      	bls.n	8001f8e <CH395CMDSetGWIPAddr+0xe>
    xEndCH395Cmd();
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <CH395CMDSetGWIPAddr+0x30>)
 8001fa2:	8899      	ldrh	r1, [r3, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f7fe fc09 	bl	80007be <HAL_GPIO_WritePin>
}
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 8001fb4:	b570      	push	{r4, r5, r6, lr}
 8001fb6:	0005      	movs	r5, r0
 8001fb8:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 8001fba:	2034      	movs	r0, #52	; 0x34
 8001fbc:	f000 f996 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001fc0:	0028      	movs	r0, r5
 8001fc2:	f000 f9b3 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data(prottype);
 8001fc6:	0020      	movs	r0, r4
 8001fc8:	f000 f9b0 	bl	800232c <xWriteCH395Data>
    xEndCH395Cmd();
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <CH395SetSocketProtType+0x28>)
 8001fce:	8899      	ldrh	r1, [r3, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f7fe fbf3 	bl	80007be <HAL_GPIO_WritePin>
}
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	0005      	movs	r5, r0
 8001fe4:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 8001fe6:	2033      	movs	r0, #51	; 0x33
 8001fe8:	f000 f980 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001fec:	0028      	movs	r0, r5
 8001fee:	f000 f99d 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 8001ff2:	b2e0      	uxtb	r0, r4
 8001ff4:	f000 f99a 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 8001ff8:	0a20      	lsrs	r0, r4, #8
 8001ffa:	f000 f997 	bl	800232c <xWriteCH395Data>
    xEndCH395Cmd();
 8001ffe:	4b03      	ldr	r3, [pc, #12]	; (800200c <CH395SetSocketSourPort+0x2c>)
 8002000:	8899      	ldrh	r1, [r3, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	f7fe fbda 	bl	80007be <HAL_GPIO_WritePin>
}
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	20000000 	.word	0x20000000

08002010 <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,uint8_t *databuf,uint16_t len)
{
 8002010:	b570      	push	{r4, r5, r6, lr}
 8002012:	0004      	movs	r4, r0
 8002014:	000d      	movs	r5, r1
 8002016:	0016      	movs	r6, r2
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 8002018:	e004      	b.n	8002024 <CH395SendData+0x14>
    {
    	Delay_ms(10);
 800201a:	4818      	ldr	r0, [pc, #96]	; (800207c <CH395SendData+0x6c>)
 800201c:	f000 f9a4 	bl	8002368 <Delay_us>
    	i = CH395CMDGetVer();
 8002020:	f7ff ff2e 	bl	8001e80 <CH395CMDGetVer>
    while(!(ch395.TX_available & (1<<sockindex)))
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <CH395SendData+0x70>)
 8002026:	78db      	ldrb	r3, [r3, #3]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4123      	asrs	r3, r4
 800202c:	07db      	lsls	r3, r3, #31
 800202e:	d5f4      	bpl.n	800201a <CH395SendData+0xa>
    	DEBUG_LOG("%d", i);
    }
    ch395.TX_available &= ~(1<<sockindex);
 8002030:	4813      	ldr	r0, [pc, #76]	; (8002080 <CH395SendData+0x70>)
 8002032:	78c3      	ldrb	r3, [r0, #3]
 8002034:	2101      	movs	r1, #1
 8002036:	40a1      	lsls	r1, r4
 8002038:	438b      	bics	r3, r1
 800203a:	70c3      	strb	r3, [r0, #3]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 800203c:	2039      	movs	r0, #57	; 0x39
 800203e:	f000 f955 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8002042:	0020      	movs	r0, r4
 8002044:	f000 f972 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8002048:	b2f0      	uxtb	r0, r6
 800204a:	f000 f96f 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 800204e:	0a30      	lsrs	r0, r6, #8
 8002050:	f000 f96c 	bl	800232c <xWriteCH395Data>
    Delay_us(2);
 8002054:	2002      	movs	r0, #2
 8002056:	f000 f987 	bl	8002368 <Delay_us>
    for(i = 0; i < len; i++)
 800205a:	2400      	movs	r4, #0
 800205c:	e005      	b.n	800206a <CH395SendData+0x5a>
    {
        xWriteCH395Data(*databuf);
 800205e:	7828      	ldrb	r0, [r5, #0]
 8002060:	f000 f964 	bl	800232c <xWriteCH395Data>
        databuf++;
 8002064:	3501      	adds	r5, #1
    for(i = 0; i < len; i++)
 8002066:	3401      	adds	r4, #1
 8002068:	b2a4      	uxth	r4, r4
 800206a:	42b4      	cmp	r4, r6
 800206c:	d3f7      	bcc.n	800205e <CH395SendData+0x4e>
    }
    xEndCH395Cmd();
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <CH395SendData+0x74>)
 8002070:	8899      	ldrh	r1, [r3, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	f7fe fba2 	bl	80007be <HAL_GPIO_WritePin>
}
 800207a:	bd70      	pop	{r4, r5, r6, pc}
 800207c:	00002710 	.word	0x00002710
 8002080:	20000008 	.word	0x20000008
 8002084:	20000000 	.word	0x20000000

08002088 <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	0005      	movs	r5, r0
 800208c:	000c      	movs	r4, r1
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 800208e:	2039      	movs	r0, #57	; 0x39
 8002090:	f000 f92c 	bl	80022ec <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 8002094:	0028      	movs	r0, r5
 8002096:	f000 f949 	bl	800232c <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 800209a:	b2e0      	uxtb	r0, r4
 800209c:	f000 f946 	bl	800232c <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 80020a0:	0a20      	lsrs	r0, r4, #8
 80020a2:	f000 f943 	bl	800232c <xWriteCH395Data>
	Delay_us(2);
 80020a6:	2002      	movs	r0, #2
 80020a8:	f000 f95e 	bl	8002368 <Delay_us>
}
 80020ac:	bd70      	pop	{r4, r5, r6, pc}

080020ae <CH395ContinueSendingData>:

void CH395ContinueSendingData(uint8_t *databuf, uint16_t len)
{
 80020ae:	b570      	push	{r4, r5, r6, lr}
 80020b0:	0005      	movs	r5, r0
 80020b2:	000e      	movs	r6, r1
	uint16_t i;
	for(i=0; i<len; ++i)
 80020b4:	2400      	movs	r4, #0
 80020b6:	e005      	b.n	80020c4 <CH395ContinueSendingData+0x16>
	{
		xWriteCH395Data(*databuf);
 80020b8:	7828      	ldrb	r0, [r5, #0]
 80020ba:	f000 f937 	bl	800232c <xWriteCH395Data>
		databuf++;
 80020be:	3501      	adds	r5, #1
	for(i=0; i<len; ++i)
 80020c0:	3401      	adds	r4, #1
 80020c2:	b2a4      	uxth	r4, r4
 80020c4:	42b4      	cmp	r4, r6
 80020c6:	d3f7      	bcc.n	80020b8 <CH395ContinueSendingData+0xa>
	}
}
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080020cc <CH395Complete>:
void CH395Complete()
{
 80020cc:	b510      	push	{r4, lr}
	xEndCH395Cmd();
 80020ce:	4b03      	ldr	r3, [pc, #12]	; (80020dc <CH395Complete+0x10>)
 80020d0:	8899      	ldrh	r1, [r3, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f7fe fb72 	bl	80007be <HAL_GPIO_WritePin>
}
 80020da:	bd10      	pop	{r4, pc}
 80020dc:	20000000 	.word	0x20000000

080020e0 <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	0004      	movs	r4, r0
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 80020e4:	203b      	movs	r0, #59	; 0x3b
 80020e6:	f000 f901 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 80020ea:	0020      	movs	r0, r4
 80020ec:	f000 f91e 	bl	800232c <xWriteCH395Data>
    i = xReadCH395Data();
 80020f0:	f000 f92a 	bl	8002348 <xReadCH395Data>
 80020f4:	b285      	uxth	r5, r0
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 80020f6:	f000 f927 	bl	8002348 <xReadCH395Data>
 80020fa:	b280      	uxth	r0, r0
 80020fc:	0200      	lsls	r0, r0, #8
 80020fe:	b284      	uxth	r4, r0
 8002100:	1964      	adds	r4, r4, r5
 8002102:	b2a4      	uxth	r4, r4
    xEndCH395Cmd();
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <CH395GetRecvLength+0x34>)
 8002106:	8899      	ldrh	r1, [r3, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	2201      	movs	r2, #1
 800210c:	f7fe fb57 	bl	80007be <HAL_GPIO_WritePin>
    return i;
}
 8002110:	0020      	movs	r0, r4
 8002112:	bd70      	pop	{r4, r5, r6, pc}
 8002114:	20000000 	.word	0x20000000

08002118 <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 8002118:	b510      	push	{r4, lr}
 800211a:	0004      	movs	r4, r0
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 800211c:	202e      	movs	r0, #46	; 0x2e
 800211e:	f000 f8e5 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8002122:	0020      	movs	r0, r4
 8002124:	f000 f902 	bl	800232c <xWriteCH395Data>
    xEndCH395Cmd();
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <CH395ClearRecvBuf+0x20>)
 800212a:	8899      	ldrh	r1, [r3, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	f7fe fb45 	bl	80007be <HAL_GPIO_WritePin>
}
 8002134:	bd10      	pop	{r4, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	20000000 	.word	0x20000000

0800213c <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	0004      	movs	r4, r0
 8002140:	000e      	movs	r6, r1
 8002142:	0015      	movs	r5, r2
    uint16_t i;
    if(!len)return;
 8002144:	2900      	cmp	r1, #0
 8002146:	d100      	bne.n	800214a <CH395GetRecvData+0xe>
    {
       *pbuf = xReadCH395Data();
       pbuf++;
    }   
    xEndCH395Cmd();
}
 8002148:	bd70      	pop	{r4, r5, r6, pc}
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 800214a:	203c      	movs	r0, #60	; 0x3c
 800214c:	f000 f8ce 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8002150:	0020      	movs	r0, r4
 8002152:	f000 f8eb 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8002156:	b2f0      	uxtb	r0, r6
 8002158:	f000 f8e8 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 800215c:	0a30      	lsrs	r0, r6, #8
 800215e:	f000 f8e5 	bl	800232c <xWriteCH395Data>
    Delay_us(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f000 f900 	bl	8002368 <Delay_us>
    for(i = 0; i < len; i++)
 8002168:	2400      	movs	r4, #0
 800216a:	e005      	b.n	8002178 <CH395GetRecvData+0x3c>
       *pbuf = xReadCH395Data();
 800216c:	f000 f8ec 	bl	8002348 <xReadCH395Data>
 8002170:	7028      	strb	r0, [r5, #0]
       pbuf++;
 8002172:	3501      	adds	r5, #1
    for(i = 0; i < len; i++)
 8002174:	3401      	adds	r4, #1
 8002176:	b2a4      	uxth	r4, r4
 8002178:	42b4      	cmp	r4, r6
 800217a:	d3f7      	bcc.n	800216c <CH395GetRecvData+0x30>
    xEndCH395Cmd();
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <CH395GetRecvData+0x50>)
 800217e:	8899      	ldrh	r1, [r3, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	f7fe fb1b 	bl	80007be <HAL_GPIO_WritePin>
 8002188:	e7de      	b.n	8002148 <CH395GetRecvData+0xc>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	20000000 	.word	0x20000000

08002190 <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 8002190:	b510      	push	{r4, lr}
 8002192:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s = 0;
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 8002194:	2035      	movs	r0, #53	; 0x35
 8002196:	f000 f8a9 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800219a:	0020      	movs	r0, r4
 800219c:	f000 f8c6 	bl	800232c <xWriteCH395Data>
    xEndCH395Cmd();
 80021a0:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <CH395OpenSocket+0x3c>)
 80021a2:	8899      	ldrh	r1, [r3, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f7fe fb09 	bl	80007be <HAL_GPIO_WritePin>
    uint8_t i = 0;
 80021ac:	2400      	movs	r4, #0
 80021ae:	e000      	b.n	80021b2 <CH395OpenSocket+0x22>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 80021b0:	001c      	movs	r4, r3
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <CH395OpenSocket+0x40>)
 80021b4:	f000 f8d8 	bl	8002368 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80021b8:	f7ff fe98 	bl	8001eec <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80021bc:	2810      	cmp	r0, #16
 80021be:	d104      	bne.n	80021ca <CH395OpenSocket+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 80021c0:	1c63      	adds	r3, r4, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2cc8      	cmp	r4, #200	; 0xc8
 80021c6:	d9f3      	bls.n	80021b0 <CH395OpenSocket+0x20>
 80021c8:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 80021ca:	bd10      	pop	{r4, pc}
 80021cc:	20000000 	.word	0x20000000
 80021d0:	00001388 	.word	0x00001388

080021d4 <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 80021d4:	b510      	push	{r4, lr}
 80021d6:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s = 0;
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 80021d8:	2036      	movs	r0, #54	; 0x36
 80021da:	f000 f887 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80021de:	0020      	movs	r0, r4
 80021e0:	f000 f8a4 	bl	800232c <xWriteCH395Data>
    xEndCH395Cmd();
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <CH395TCPListen+0x3c>)
 80021e6:	8899      	ldrh	r1, [r3, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f7fe fae7 	bl	80007be <HAL_GPIO_WritePin>
    uint8_t i = 0;
 80021f0:	2400      	movs	r4, #0
 80021f2:	e000      	b.n	80021f6 <CH395TCPListen+0x22>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 80021f4:	001c      	movs	r4, r3
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 80021f6:	4807      	ldr	r0, [pc, #28]	; (8002214 <CH395TCPListen+0x40>)
 80021f8:	f000 f8b6 	bl	8002368 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80021fc:	f7ff fe76 	bl	8001eec <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8002200:	2810      	cmp	r0, #16
 8002202:	d104      	bne.n	800220e <CH395TCPListen+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8002204:	1c63      	adds	r3, r4, #1
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2cc8      	cmp	r4, #200	; 0xc8
 800220a:	d9f3      	bls.n	80021f4 <CH395TCPListen+0x20>
 800220c:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 800220e:	bd10      	pop	{r4, pc}
 8002210:	20000000 	.word	0x20000000
 8002214:	00001388 	.word	0x00001388

08002218 <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 8002218:	b510      	push	{r4, lr}
 800221a:	0004      	movs	r4, r0
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 800221c:	2030      	movs	r0, #48	; 0x30
 800221e:	f000 f865 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8002222:	0020      	movs	r0, r4
 8002224:	f000 f882 	bl	800232c <xWriteCH395Data>
    Delay_us(2);
 8002228:	2002      	movs	r0, #2
 800222a:	f000 f89d 	bl	8002368 <Delay_us>
    intstatus = xReadCH395Data();
 800222e:	f000 f88b 	bl	8002348 <xReadCH395Data>
 8002232:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <CH395GetSocketInt+0x2c>)
 8002236:	8899      	ldrh	r1, [r3, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	2201      	movs	r2, #1
 800223c:	f7fe fabf 	bl	80007be <HAL_GPIO_WritePin>
    return intstatus;
}
 8002240:	0020      	movs	r0, r4
 8002242:	bd10      	pop	{r4, pc}
 8002244:	20000000 	.word	0x20000000

08002248 <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 8002248:	b510      	push	{r4, lr}
 800224a:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 800224c:	2041      	movs	r0, #65	; 0x41
 800224e:	f000 f84d 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 8002252:	0020      	movs	r0, r4
 8002254:	f000 f86a 	bl	800232c <xWriteCH395Data>
    xEndCH395Cmd();
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <CH395DHCPEnable+0x3c>)
 800225a:	8899      	ldrh	r1, [r3, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	f7fe faad 	bl	80007be <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8002264:	2400      	movs	r4, #0
 8002266:	e000      	b.n	800226a <CH395DHCPEnable+0x22>
    while(1)
    {
        Delay_ms(20);
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8002268:	001c      	movs	r4, r3
        Delay_ms(20);
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <CH395DHCPEnable+0x40>)
 800226c:	f000 f87c 	bl	8002368 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8002270:	f7ff fe3c 	bl	8001eec <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8002274:	2810      	cmp	r0, #16
 8002276:	d104      	bne.n	8002282 <CH395DHCPEnable+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8002278:	1c63      	adds	r3, r4, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2cc8      	cmp	r4, #200	; 0xc8
 800227e:	d9f3      	bls.n	8002268 <CH395DHCPEnable+0x20>
 8002280:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8002282:	bd10      	pop	{r4, pc}
 8002284:	20000000 	.word	0x20000000
 8002288:	00004e20 	.word	0x00004e20

0800228c <CH395WriteGPIOAddr>:
*                ：regval   寄存器值
* Output         : None
* Return         : None
*******************************************************************************/
void CH395WriteGPIOAddr(uint8_t regadd,uint8_t regval)
{
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	0005      	movs	r5, r0
 8002290:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD20_WRITE_GPIO_REG);
 8002292:	20ed      	movs	r0, #237	; 0xed
 8002294:	f000 f82a 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(regadd);
 8002298:	0028      	movs	r0, r5
 800229a:	f000 f847 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data(regval);
 800229e:	0020      	movs	r0, r4
 80022a0:	f000 f844 	bl	800232c <xWriteCH395Data>
}
 80022a4:	bd70      	pop	{r4, r5, r6, pc}

080022a6 <CH395ReadGPIOAddr>:
* Input          : regadd   寄存器地址
* Output         : None
* Return         : 寄存器的值
*******************************************************************************/
uint8_t CH395ReadGPIOAddr(uint8_t regadd)
{
 80022a6:	b510      	push	{r4, lr}
 80022a8:	0004      	movs	r4, r0
    uint8_t i;
    xWriteCH395Cmd(CMD10_READ_GPIO_REG);
 80022aa:	20ec      	movs	r0, #236	; 0xec
 80022ac:	f000 f81e 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data(regadd);
 80022b0:	0020      	movs	r0, r4
 80022b2:	f000 f83b 	bl	800232c <xWriteCH395Data>
    Delay_ms(1);
 80022b6:	20fa      	movs	r0, #250	; 0xfa
 80022b8:	0080      	lsls	r0, r0, #2
 80022ba:	f000 f855 	bl	8002368 <Delay_us>
    i = xReadCH395Data();
 80022be:	f000 f843 	bl	8002348 <xReadCH395Data>
    return i;
}
 80022c2:	bd10      	pop	{r4, pc}

080022c4 <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 80022c4:	b510      	push	{r4, lr}
 80022c6:	0004      	movs	r4, r0
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 80022c8:	2055      	movs	r0, #85	; 0x55
 80022ca:	f000 f80f 	bl	80022ec <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 80022ce:	b2e0      	uxtb	r0, r4
 80022d0:	f000 f82c 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 80022d4:	b2a0      	uxth	r0, r4
 80022d6:	0a00      	lsrs	r0, r0, #8
 80022d8:	f000 f828 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 80022dc:	0c20      	lsrs	r0, r4, #16
 80022de:	b2c0      	uxtb	r0, r0
 80022e0:	f000 f824 	bl	800232c <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 80022e4:	0e20      	lsrs	r0, r4, #24
 80022e6:	f000 f821 	bl	800232c <xWriteCH395Data>
}
 80022ea:	bd10      	pop	{r4, pc}

080022ec <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 80022ec:	b530      	push	{r4, r5, lr}
 80022ee:	b083      	sub	sp, #12
 80022f0:	466b      	mov	r3, sp
 80022f2:	1ddd      	adds	r5, r3, #7
 80022f4:	71d8      	strb	r0, [r3, #7]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 80022f6:	4c0b      	ldr	r4, [pc, #44]	; (8002324 <xWriteCH395Cmd+0x38>)
 80022f8:	88a1      	ldrh	r1, [r4, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	f7fe fa5e 	bl	80007be <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 8002302:	88a1      	ldrh	r1, [r4, #4]
 8002304:	6820      	ldr	r0, [r4, #0]
 8002306:	2200      	movs	r2, #0
 8002308:	f7fe fa59 	bl	80007be <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 800230c:	2364      	movs	r3, #100	; 0x64
 800230e:	2201      	movs	r2, #1
 8002310:	0029      	movs	r1, r5
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <xWriteCH395Cmd+0x3c>)
 8002314:	f7fe ffa2 	bl	800125c <HAL_SPI_Transmit>
    Delay_us(2);
 8002318:	2002      	movs	r0, #2
 800231a:	f000 f825 	bl	8002368 <Delay_us>
}
 800231e:	b003      	add	sp, #12
 8002320:	bd30      	pop	{r4, r5, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	20000000 	.word	0x20000000
 8002328:	200008b8 	.word	0x200008b8

0800232c <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 800232c:	b500      	push	{lr}
 800232e:	b083      	sub	sp, #12
 8002330:	466b      	mov	r3, sp
 8002332:	1dd9      	adds	r1, r3, #7
 8002334:	7008      	strb	r0, [r1, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 8002336:	2364      	movs	r3, #100	; 0x64
 8002338:	2201      	movs	r2, #1
 800233a:	4802      	ldr	r0, [pc, #8]	; (8002344 <xWriteCH395Data+0x18>)
 800233c:	f7fe ff8e 	bl	800125c <HAL_SPI_Transmit>
}
 8002340:	b003      	add	sp, #12
 8002342:	bd00      	pop	{pc}
 8002344:	200008b8 	.word	0x200008b8

08002348 <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 8002348:	b510      	push	{r4, lr}
 800234a:	b082      	sub	sp, #8
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 800234c:	466b      	mov	r3, sp
 800234e:	1ddc      	adds	r4, r3, #7
 8002350:	2364      	movs	r3, #100	; 0x64
 8002352:	2201      	movs	r2, #1
 8002354:	0021      	movs	r1, r4
 8002356:	4803      	ldr	r0, [pc, #12]	; (8002364 <xReadCH395Data+0x1c>)
 8002358:	f7ff f9b4 	bl	80016c4 <HAL_SPI_Receive>
    return i;
 800235c:	7820      	ldrb	r0, [r4, #0]
}
 800235e:	b002      	add	sp, #8
 8002360:	bd10      	pop	{r4, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	200008b8 	.word	0x200008b8

08002368 <Delay_us>:

#include "Delay.h"

void Delay_us(unsigned int n) {
	uint32_t temp;
	SysTick->LOAD = 8 * n; // SYSCLK Frequency MHz * us
 8002368:	00c0      	lsls	r0, r0, #3
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <Delay_us+0x24>)
 800236c:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0X00; //清空计数器
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0X01; //使能，减到零是无动作，采用外部时钟源
 8002372:	3201      	adds	r2, #1
 8002374:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL; //读取当前倒计数值
 8002376:	4b05      	ldr	r3, [pc, #20]	; (800238c <Delay_us+0x24>)
 8002378:	681b      	ldr	r3, [r3, #0]
	} while ((temp & 0x01) && (!(temp & (1 << 16)))); //等待时间到达
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <Delay_us+0x28>)
 800237c:	4013      	ands	r3, r2
 800237e:	2b01      	cmp	r3, #1
 8002380:	d0f9      	beq.n	8002376 <Delay_us+0xe>
	SysTick->CTRL = 0x00; //关闭计数器
 8002382:	4b02      	ldr	r3, [pc, #8]	; (800238c <Delay_us+0x24>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0X00; //清空计数器
 8002388:	609a      	str	r2, [r3, #8]
}
 800238a:	4770      	bx	lr
 800238c:	e000e010 	.word	0xe000e010
 8002390:	00010001 	.word	0x00010001

08002394 <FS_open>:
		return FALSE;
	}
}

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 8002394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002396:	46ce      	mov	lr, r9
 8002398:	4647      	mov	r7, r8
 800239a:	b580      	push	{r7, lr}
 800239c:	b083      	sub	sp, #12
 800239e:	0007      	movs	r7, r0
 80023a0:	9201      	str	r2, [sp, #4]
	int i = pFS->n_files;
 80023a2:	684e      	ldr	r6, [r1, #4]
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 80023a4:	680d      	ldr	r5, [r1, #0]
	uint32_t offset = (uint32_t)pFS->addr_base;
 80023a6:	46a9      	mov	r9, r5

	FSfile_typedef file;
	file.size = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	6083      	str	r3, [r0, #8]
	file.p_content = NULL;
 80023ac:	6043      	str	r3, [r0, #4]
	file.path = NULL;
 80023ae:	6003      	str	r3, [r0, #0]
	do{
		addr ++;
 80023b0:	3504      	adds	r5, #4
		i--;
 80023b2:	3e01      	subs	r6, #1
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 80023b4:	682b      	ldr	r3, [r5, #0]
 80023b6:	444b      	add	r3, r9
 80023b8:	001c      	movs	r4, r3
 80023ba:	2308      	movs	r3, #8
 80023bc:	4698      	mov	r8, r3
 80023be:	44a0      	add	r8, r4
		if(strcmp(path, _path) == 0) // path matched
 80023c0:	4641      	mov	r1, r8
 80023c2:	9801      	ldr	r0, [sp, #4]
 80023c4:	f7fd fea0 	bl	8000108 <strcmp>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d002      	beq.n	80023d2 <FS_open+0x3e>
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
			file.size = *(uint32_t*)(*addr + offset);
			break;
		}
	}while(i > 0);
 80023cc:	2e00      	cmp	r6, #0
 80023ce:	dcef      	bgt.n	80023b0 <FS_open+0x1c>
 80023d0:	e006      	b.n	80023e0 <FS_open+0x4c>
			file.path = _path;
 80023d2:	4643      	mov	r3, r8
 80023d4:	603b      	str	r3, [r7, #0]
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 80023d6:	6863      	ldr	r3, [r4, #4]
 80023d8:	444b      	add	r3, r9
 80023da:	607b      	str	r3, [r7, #4]
			file.size = *(uint32_t*)(*addr + offset);
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	60bb      	str	r3, [r7, #8]
	return file;
}
 80023e0:	0038      	movs	r0, r7
 80023e2:	b003      	add	sp, #12
 80023e4:	bc0c      	pop	{r2, r3}
 80023e6:	4690      	mov	r8, r2
 80023e8:	4699      	mov	r9, r3
 80023ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080023ec <FS_exists>:
	}
	return -1;
}

BOOL FS_exists(FS_typedef* pFS, const char* path)
{
 80023ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ee:	b083      	sub	sp, #12
 80023f0:	0007      	movs	r7, r0
 80023f2:	9101      	str	r1, [sp, #4]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 80023f4:	6804      	ldr	r4, [r0, #0]
	uint32_t offset = (uint32_t)pFS->addr_base;
 80023f6:	0025      	movs	r5, r4
	for(i=0; i<pFS->n_files; ++i)
 80023f8:	2600      	movs	r6, #0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	42b3      	cmp	r3, r6
 80023fe:	d90a      	bls.n	8002416 <FS_exists+0x2a>
	{
		addr++;
 8002400:	3404      	adds	r4, #4
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	1959      	adds	r1, r3, r5
 8002406:	3108      	adds	r1, #8
		if(strcmp(path, _path) == 0)
 8002408:	9801      	ldr	r0, [sp, #4]
 800240a:	f7fd fe7d 	bl	8000108 <strcmp>
 800240e:	2800      	cmp	r0, #0
 8002410:	d004      	beq.n	800241c <FS_exists+0x30>
	for(i=0; i<pFS->n_files; ++i)
 8002412:	3601      	adds	r6, #1
 8002414:	e7f1      	b.n	80023fa <FS_exists+0xe>
		{
			return TRUE;
		}
	}
	return FALSE;
 8002416:	2000      	movs	r0, #0
}
 8002418:	b003      	add	sp, #12
 800241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return TRUE;
 800241c:	2001      	movs	r0, #1
 800241e:	e7fb      	b.n	8002418 <FS_exists+0x2c>

08002420 <EEPROM_WriteBytes>:
	uint32_t word;
} Quadbyte;

// Notice: 4-byte alignment
void EEPROM_WriteBytes(EEPROM_typedef *pEEPROM,uint8_t *Buffer,uint16_t Length)
{
 8002420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002422:	b087      	sub	sp, #28
 8002424:	000e      	movs	r6, r1
 8002426:	0014      	movs	r4, r2
	uint16_t i;
	uint32_t* addr = (uint32_t*)pEEPROM->base_addr;
 8002428:	6805      	ldr	r5, [r0, #0]
	Quadbyte quadbyte;
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=addr, .NbPages=1};
 800242a:	2300      	movs	r3, #0
 800242c:	9302      	str	r3, [sp, #8]
 800242e:	9503      	str	r5, [sp, #12]
 8002430:	2201      	movs	r2, #1
 8002432:	9204      	str	r2, [sp, #16]
	uint32_t PageError = 0;
 8002434:	9301      	str	r3, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002436:	b672      	cpsid	i
    __disable_irq();
    HAL_FLASH_Unlock();
 8002438:	f7fd ffde 	bl	80003f8 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&fe, &PageError);
 800243c:	a901      	add	r1, sp, #4
 800243e:	a802      	add	r0, sp, #8
 8002440:	f7fe f89e 	bl	8000580 <HAL_FLASHEx_Erase>
    while(Length)
 8002444:	e013      	b.n	800246e <EEPROM_WriteBytes+0x4e>
    {
    	memset(quadbyte.bytes, 0, 4);
    	for(i=0; i<4 && Length; ++i)
    	{
    		quadbyte.bytes[i] = *Buffer;
 8002446:	7831      	ldrb	r1, [r6, #0]
 8002448:	aa05      	add	r2, sp, #20
 800244a:	54d1      	strb	r1, [r2, r3]
    		Length--;
 800244c:	3c01      	subs	r4, #1
 800244e:	b2a4      	uxth	r4, r4
    		Buffer++;
 8002450:	3601      	adds	r6, #1
    	for(i=0; i<4 && Length; ++i)
 8002452:	3301      	adds	r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b03      	cmp	r3, #3
 8002458:	d801      	bhi.n	800245e <EEPROM_WriteBytes+0x3e>
 800245a:	2c00      	cmp	r4, #0
 800245c:	d1f3      	bne.n	8002446 <EEPROM_WriteBytes+0x26>
    	}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addr++, quadbyte.word);
 800245e:	1d2f      	adds	r7, r5, #4
 8002460:	9a05      	ldr	r2, [sp, #20]
 8002462:	2300      	movs	r3, #0
 8002464:	0029      	movs	r1, r5
 8002466:	2002      	movs	r0, #2
 8002468:	f7fe f816 	bl	8000498 <HAL_FLASH_Program>
 800246c:	003d      	movs	r5, r7
    while(Length)
 800246e:	2c00      	cmp	r4, #0
 8002470:	d002      	beq.n	8002478 <EEPROM_WriteBytes+0x58>
    	memset(quadbyte.bytes, 0, 4);
 8002472:	2300      	movs	r3, #0
 8002474:	9305      	str	r3, [sp, #20]
    	for(i=0; i<4 && Length; ++i)
 8002476:	e7ee      	b.n	8002456 <EEPROM_WriteBytes+0x36>
    }
    HAL_FLASH_Lock();
 8002478:	f7fd ffd6 	bl	8000428 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 800247c:	b662      	cpsie	i
    __enable_irq();
}
 800247e:	b007      	add	sp, #28
 8002480:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002482 <EEPROM_ReadBytes>:

void EEPROM_ReadBytes(EEPROM_typedef* pEEPROM, uint8_t *Buffer,uint16_t Length)
{
	uint8_t* addr = pEEPROM->base_addr;
 8002482:	6803      	ldr	r3, [r0, #0]
	while(Length)
 8002484:	e005      	b.n	8002492 <EEPROM_ReadBytes+0x10>
	{
		*Buffer = *addr;
 8002486:	7818      	ldrb	r0, [r3, #0]
 8002488:	7008      	strb	r0, [r1, #0]
		Buffer++;
 800248a:	3101      	adds	r1, #1
		addr++;
 800248c:	3301      	adds	r3, #1
		Length--;
 800248e:	3a01      	subs	r2, #1
 8002490:	b292      	uxth	r2, r2
	while(Length)
 8002492:	2a00      	cmp	r2, #0
 8002494:	d1f7      	bne.n	8002486 <EEPROM_ReadBytes+0x4>
	}
}
 8002496:	4770      	bx	lr

08002498 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	0005      	movs	r5, r0
	strcat(pS->URI, "index.html");
 800249c:	1d44      	adds	r4, r0, #5
 800249e:	0020      	movs	r0, r4
 80024a0:	f7fd fe3c 	bl	800011c <strlen>
 80024a4:	1820      	adds	r0, r4, r0
 80024a6:	220b      	movs	r2, #11
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <onHome+0x20>)
 80024aa:	f001 f953 	bl	8003754 <memcpy>
	HTTPonNotFound(pS);
 80024ae:	0028      	movs	r0, r5
 80024b0:	f000 fc4e 	bl	8002d50 <HTTPonNotFound>
}
 80024b4:	bd70      	pop	{r4, r5, r6, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	080039d0 	.word	0x080039d0

080024bc <onSwitch>:
/* URI: /switch
 * METHOD: POST
 * Args: sel1=[0-6]&sel2=[0-6]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	0004      	movs	r4, r0
	const char *A = getHTTPArg(pS, "sel1");
 80024c0:	4914      	ldr	r1, [pc, #80]	; (8002514 <onSwitch+0x58>)
 80024c2:	f000 fa67 	bl	8002994 <getHTTPArg>
 80024c6:	0005      	movs	r5, r0
	const char *B = getHTTPArg(pS, "sel2");
 80024c8:	4913      	ldr	r1, [pc, #76]	; (8002518 <onSwitch+0x5c>)
 80024ca:	0020      	movs	r0, r4
 80024cc:	f000 fa62 	bl	8002994 <getHTTPArg>
 80024d0:	0006      	movs	r6, r0
	if(A && B)
 80024d2:	2d00      	cmp	r5, #0
 80024d4:	d00c      	beq.n	80024f0 <onSwitch+0x34>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d00a      	beq.n	80024f0 <onSwitch+0x34>
	{
		uint8_t nA = atou8(A);
 80024da:	0028      	movs	r0, r5
 80024dc:	f000 fa7f 	bl	80029de <atou8>
 80024e0:	0005      	movs	r5, r0
		uint8_t nB = atou8(B);
 80024e2:	0030      	movs	r0, r6
 80024e4:	f000 fa7b 	bl	80029de <atou8>
		if(nA <= NUM_ANTENNA && nB<=NUM_ANTENNA)
 80024e8:	2d06      	cmp	r5, #6
 80024ea:	d801      	bhi.n	80024f0 <onSwitch+0x34>
 80024ec:	2806      	cmp	r0, #6
 80024ee:	d906      	bls.n	80024fe <onSwitch+0x42>
			switch_Antenna(nA, nB);
			HTTPSendStr(pS, 200, "OK\r\n");
			return;
		}
	}
	HTTPSendStr(pS, 300, "Invalid\r\n");
 80024f0:	2196      	movs	r1, #150	; 0x96
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <onSwitch+0x60>)
 80024f4:	0049      	lsls	r1, r1, #1
 80024f6:	0020      	movs	r0, r4
 80024f8:	f000 fb86 	bl	8002c08 <HTTPSendStr>
}
 80024fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch_Antenna(nA, nB);
 80024fe:	0001      	movs	r1, r0
 8002500:	0028      	movs	r0, r5
 8002502:	f000 ff7f 	bl	8003404 <switch_Antenna>
			HTTPSendStr(pS, 200, "OK\r\n");
 8002506:	4a06      	ldr	r2, [pc, #24]	; (8002520 <onSwitch+0x64>)
 8002508:	21c8      	movs	r1, #200	; 0xc8
 800250a:	0020      	movs	r0, r4
 800250c:	f000 fb7c 	bl	8002c08 <HTTPSendStr>
			return;
 8002510:	e7f4      	b.n	80024fc <onSwitch+0x40>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	08003a00 	.word	0x08003a00
 8002518:	08003a08 	.word	0x08003a08
 800251c:	08003a18 	.word	0x08003a18
 8002520:	08003a10 	.word	0x08003a10

08002524 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8002524:	b510      	push	{r4, lr}
	HTTPSendStr(pS, 200, "Status\r\n");
 8002526:	4a02      	ldr	r2, [pc, #8]	; (8002530 <onStatus+0xc>)
 8002528:	21c8      	movs	r1, #200	; 0xc8
 800252a:	f000 fb6d 	bl	8002c08 <HTTPSendStr>
}
 800252e:	bd10      	pop	{r4, pc}
 8002530:	080039f4 	.word	0x080039f4

08002534 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 8002534:	b510      	push	{r4, lr}
	HTTPSendStr(pS, 200, "Reset\r\n");
 8002536:	4a02      	ldr	r2, [pc, #8]	; (8002540 <onReset+0xc>)
 8002538:	21c8      	movs	r1, #200	; 0xc8
 800253a:	f000 fb65 	bl	8002c08 <HTTPSendStr>
//	DEBUG_LOG("Restart\n");
}
 800253e:	bd10      	pop	{r4, pc}
 8002540:	080039dc 	.word	0x080039dc

08002544 <onGetAlloc>:
{
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	0005      	movs	r5, r0
	uint8_t d = get_Antenna();
 8002548:	f000 ffac 	bl	80034a4 <get_Antenna>
 800254c:	0004      	movs	r4, r0
	strcpy(p, "sel1=");
 800254e:	4e0e      	ldr	r6, [pc, #56]	; (8002588 <onGetAlloc+0x44>)
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <onGetAlloc+0x48>)
 8002552:	8033      	strh	r3, [r6, #0]
	*p = (uint8_t)(d & 0xf) + '0'; // "sel1=%d"
 8002554:	230f      	movs	r3, #15
 8002556:	4003      	ands	r3, r0
 8002558:	3330      	adds	r3, #48	; 0x30
 800255a:	70b3      	strb	r3, [r6, #2]
	strcpy(p, "&sel2="); // "sel1=%d&sel2="
 800255c:	1cf0      	adds	r0, r6, #3
 800255e:	2203      	movs	r2, #3
 8002560:	490b      	ldr	r1, [pc, #44]	; (8002590 <onGetAlloc+0x4c>)
 8002562:	f001 f8f7 	bl	8003754 <memcpy>
	*p = (uint8_t)(d >> 4) + '0'; // "sel1=%d&sel2=%d"
 8002566:	0924      	lsrs	r4, r4, #4
 8002568:	b2e4      	uxtb	r4, r4
 800256a:	3430      	adds	r4, #48	; 0x30
 800256c:	71b4      	strb	r4, [r6, #6]
	strcpy(p, "\r\n");
 800256e:	1df0      	adds	r0, r6, #7
 8002570:	2203      	movs	r2, #3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <onGetAlloc+0x50>)
 8002574:	f001 f8ee 	bl	8003754 <memcpy>
	*p = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	7273      	strb	r3, [r6, #9]
	HTTPSendStr(pS, 200, s_tmp);
 800257c:	0032      	movs	r2, r6
 800257e:	21c8      	movs	r1, #200	; 0xc8
 8002580:	0028      	movs	r0, r5
 8002582:	f000 fb41 	bl	8002c08 <HTTPSendStr>
}
 8002586:	bd70      	pop	{r4, r5, r6, pc}
 8002588:	20000474 	.word	0x20000474
 800258c:	00006573 	.word	0x00006573
 8002590:	080039c0 	.word	0x080039c0
 8002594:	080039c8 	.word	0x080039c8

08002598 <onSetLabel>:
/* URI: /getAlloc
 * METHOD: POST
 * Args: ant1=name&ant2=name&ant3=name&ant4=name&ant5=name&ant6=name
 * Usage: set antenna label*/
void onSetLabel(HTTPRequestParseState* pS)
{
 8002598:	b530      	push	{r4, r5, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	0005      	movs	r5, r0
	uint8_t i;
	char s_tmp[5] = "ant";
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <onSetLabel+0x70>)
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	466a      	mov	r2, sp
 80025a6:	7113      	strb	r3, [r2, #4]
	if(pS->argc == 0)
 80025a8:	3345      	adds	r3, #69	; 0x45
 80025aa:	5cc3      	ldrb	r3, [r0, r3]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <onSetLabel+0x1c>
	{
		HTTPSendStr(pS, 300, "Bad args");
		return;
	}
	for(i=1; i<=NUM_ANTENNA; ++i)
 80025b0:	2401      	movs	r4, #1
 80025b2:	e007      	b.n	80025c4 <onSetLabel+0x2c>
		HTTPSendStr(pS, 300, "Bad args");
 80025b4:	2196      	movs	r1, #150	; 0x96
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <onSetLabel+0x74>)
 80025b8:	0049      	lsls	r1, r1, #1
 80025ba:	f000 fb25 	bl	8002c08 <HTTPSendStr>
 80025be:	e021      	b.n	8002604 <onSetLabel+0x6c>
	for(i=1; i<=NUM_ANTENNA; ++i)
 80025c0:	3401      	adds	r4, #1
 80025c2:	b2e4      	uxtb	r4, r4
 80025c4:	2c06      	cmp	r4, #6
 80025c6:	d813      	bhi.n	80025f0 <onSetLabel+0x58>
	{
		u16toa(i, s_tmp+3); //s_tmp = ant[i]
 80025c8:	b2a0      	uxth	r0, r4
 80025ca:	466b      	mov	r3, sp
 80025cc:	1cd9      	adds	r1, r3, #3
 80025ce:	f000 fa1c 	bl	8002a0a <u16toa>
		char* s_label;
		if((s_label = getHTTPArg(pS, s_tmp)) != NULL)
 80025d2:	4669      	mov	r1, sp
 80025d4:	0028      	movs	r0, r5
 80025d6:	f000 f9dd 	bl	8002994 <getHTTPArg>
 80025da:	1e01      	subs	r1, r0, #0
 80025dc:	d0f0      	beq.n	80025c0 <onSetLabel+0x28>
		{
			strncpy(SavedData.ant_labels[i-1], s_label, MAX_LEN_ANT_LABEL);
 80025de:	1e63      	subs	r3, r4, #1
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	480b      	ldr	r0, [pc, #44]	; (8002610 <onSetLabel+0x78>)
 80025e4:	1818      	adds	r0, r3, r0
 80025e6:	3001      	adds	r0, #1
 80025e8:	2210      	movs	r2, #16
 80025ea:	f001 f90f 	bl	800380c <strncpy>
 80025ee:	e7e7      	b.n	80025c0 <onSetLabel+0x28>
		}
	}
	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 80025f0:	2261      	movs	r2, #97	; 0x61
 80025f2:	4907      	ldr	r1, [pc, #28]	; (8002610 <onSetLabel+0x78>)
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <onSetLabel+0x7c>)
 80025f6:	f7ff ff13 	bl	8002420 <EEPROM_WriteBytes>
	HTTPSendStr(pS, 200, "OK");
 80025fa:	4a07      	ldr	r2, [pc, #28]	; (8002618 <onSetLabel+0x80>)
 80025fc:	21c8      	movs	r1, #200	; 0xc8
 80025fe:	0028      	movs	r0, r5
 8002600:	f000 fb02 	bl	8002c08 <HTTPSendStr>
}
 8002604:	b003      	add	sp, #12
 8002606:	bd30      	pop	{r4, r5, pc}
 8002608:	00746e61 	.word	0x00746e61
 800260c:	080039e4 	.word	0x080039e4
 8002610:	200007ac 	.word	0x200007ac
 8002614:	2000040c 	.word	0x2000040c
 8002618:	080039f0 	.word	0x080039f0

0800261c <onGetLabel>:

void onGetLabel(HTTPRequestParseState* pS)
{
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	0005      	movs	r5, r0
	static char s_tmp[(MAX_LEN_ANT_LABEL+5) * NUM_ANTENNA];
	uint8_t i;
	char* s = s_tmp;
 8002620:	4811      	ldr	r0, [pc, #68]	; (8002668 <onGetLabel+0x4c>)
	for(i=0; i<NUM_ANTENNA; ++i)
 8002622:	2400      	movs	r4, #0
 8002624:	e001      	b.n	800262a <onGetLabel+0xe>
 8002626:	3401      	adds	r4, #1
 8002628:	b2e4      	uxtb	r4, r4
 800262a:	2c05      	cmp	r4, #5
 800262c:	d815      	bhi.n	800265a <onGetLabel+0x3e>
	{
		s = strcpy_f(s, "ant");
 800262e:	490f      	ldr	r1, [pc, #60]	; (800266c <onGetLabel+0x50>)
 8002630:	f000 fcba 	bl	8002fa8 <strcpy_f>
		*s = i + '1';
 8002634:	0023      	movs	r3, r4
 8002636:	3331      	adds	r3, #49	; 0x31
 8002638:	7003      	strb	r3, [r0, #0]
		s++;
		*s = '=';
 800263a:	233d      	movs	r3, #61	; 0x3d
 800263c:	7043      	strb	r3, [r0, #1]
		s++;
 800263e:	3002      	adds	r0, #2
		s = strncpy_f(s, SavedData.ant_labels[i], MAX_LEN_ANT_LABEL);
 8002640:	0123      	lsls	r3, r4, #4
 8002642:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <onGetLabel+0x54>)
 8002644:	1899      	adds	r1, r3, r2
 8002646:	3101      	adds	r1, #1
 8002648:	2210      	movs	r2, #16
 800264a:	f000 fcb6 	bl	8002fba <strncpy_f>
		if(i != NUM_ANTENNA-1)
 800264e:	2c05      	cmp	r4, #5
 8002650:	d0e9      	beq.n	8002626 <onGetLabel+0xa>
		{
			*s = '&';
 8002652:	2326      	movs	r3, #38	; 0x26
 8002654:	7003      	strb	r3, [r0, #0]
			s++;
 8002656:	3001      	adds	r0, #1
 8002658:	e7e5      	b.n	8002626 <onGetLabel+0xa>
		}
	}
	HTTPSendStr(pS, 200, s_tmp);
 800265a:	4a03      	ldr	r2, [pc, #12]	; (8002668 <onGetLabel+0x4c>)
 800265c:	21c8      	movs	r1, #200	; 0xc8
 800265e:	0028      	movs	r0, r5
 8002660:	f000 fad2 	bl	8002c08 <HTTPSendStr>
}
 8002664:	bd70      	pop	{r4, r5, r6, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20000480 	.word	0x20000480
 800266c:	080039cc 	.word	0x080039cc
 8002670:	200007ac 	.word	0x200007ac

08002674 <resetHTTPParseState>:
	.ready = FALSE}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
	pS->state = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	7003      	strb	r3, [r0, #0]
	pS->argc = 0;
 8002678:	2245      	movs	r2, #69	; 0x45
 800267a:	5483      	strb	r3, [r0, r2]
	pS->connection = CLOSED;
 800267c:	7103      	strb	r3, [r0, #4]
	pS->method = HTTP_GET;
 800267e:	70c3      	strb	r3, [r0, #3]
	pS->ready = FALSE;
 8002680:	3243      	adds	r2, #67	; 0x43
 8002682:	5483      	strb	r3, [r0, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 8002684:	3a10      	subs	r2, #16
 8002686:	5483      	strb	r3, [r0, r2]
	pS->len_response_content_remain = 0;
 8002688:	3208      	adds	r2, #8
 800268a:	5283      	strh	r3, [r0, r2]
	pS->response_header = response_header_shared_buffer; // use shared buffer
 800268c:	4b01      	ldr	r3, [pc, #4]	; (8002694 <resetHTTPParseState+0x20>)
 800268e:	67c3      	str	r3, [r0, #124]	; 0x7c
}
 8002690:	4770      	bx	lr
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	20000720 	.word	0x20000720

08002698 <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	0004      	movs	r4, r0
	if(strlen(filename) > 3)
 800269c:	f7fd fd3e 	bl	800011c <strlen>
 80026a0:	0005      	movs	r5, r0
 80026a2:	2803      	cmp	r0, #3
 80026a4:	d936      	bls.n	8002714 <HTTPGetContentType+0x7c>
	{
		if(ENDSWITH(filename, ".html"))
 80026a6:	1f47      	subs	r7, r0, #5
 80026a8:	19e7      	adds	r7, r4, r7
 80026aa:	4923      	ldr	r1, [pc, #140]	; (8002738 <HTTPGetContentType+0xa0>)
 80026ac:	0038      	movs	r0, r7
 80026ae:	f7fd fd2b 	bl	8000108 <strcmp>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d030      	beq.n	8002718 <HTTPGetContentType+0x80>
			return HTTP_CONTENT_TYPE_HTML;
		else if(ENDSWITH(filename, ".htm"))
 80026b6:	1f2e      	subs	r6, r5, #4
 80026b8:	19a6      	adds	r6, r4, r6
 80026ba:	4920      	ldr	r1, [pc, #128]	; (800273c <HTTPGetContentType+0xa4>)
 80026bc:	0030      	movs	r0, r6
 80026be:	f7fd fd23 	bl	8000108 <strcmp>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d02a      	beq.n	800271c <HTTPGetContentType+0x84>
			return HTTP_CONTENT_TYPE_HTML;
		else if(ENDSWITH(filename, ".css"))
 80026c6:	491e      	ldr	r1, [pc, #120]	; (8002740 <HTTPGetContentType+0xa8>)
 80026c8:	0030      	movs	r0, r6
 80026ca:	f7fd fd1d 	bl	8000108 <strcmp>
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d026      	beq.n	8002720 <HTTPGetContentType+0x88>
			return HTTP_CONTENT_TYPE_CSS;
		else if(ENDSWITH(filename, ".js"))
 80026d2:	1ee8      	subs	r0, r5, #3
 80026d4:	1820      	adds	r0, r4, r0
 80026d6:	491b      	ldr	r1, [pc, #108]	; (8002744 <HTTPGetContentType+0xac>)
 80026d8:	f7fd fd16 	bl	8000108 <strcmp>
 80026dc:	2800      	cmp	r0, #0
 80026de:	d021      	beq.n	8002724 <HTTPGetContentType+0x8c>
			return HTTP_CONTENT_TYPE_JS;
		else if(ENDSWITH(filename, ".png"))
 80026e0:	4919      	ldr	r1, [pc, #100]	; (8002748 <HTTPGetContentType+0xb0>)
 80026e2:	0030      	movs	r0, r6
 80026e4:	f7fd fd10 	bl	8000108 <strcmp>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	d01d      	beq.n	8002728 <HTTPGetContentType+0x90>
			return HTTP_CONTENT_TYPE_PNG;
		else if(ENDSWITH(filename, ".jpg"))
 80026ec:	4917      	ldr	r1, [pc, #92]	; (800274c <HTTPGetContentType+0xb4>)
 80026ee:	0030      	movs	r0, r6
 80026f0:	f7fd fd0a 	bl	8000108 <strcmp>
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d019      	beq.n	800272c <HTTPGetContentType+0x94>
			return HTTP_CONTENT_TYPE_JPEG;
		else if(ENDSWITH(filename, ".jpeg"))
 80026f8:	4915      	ldr	r1, [pc, #84]	; (8002750 <HTTPGetContentType+0xb8>)
 80026fa:	0038      	movs	r0, r7
 80026fc:	f7fd fd04 	bl	8000108 <strcmp>
 8002700:	2800      	cmp	r0, #0
 8002702:	d015      	beq.n	8002730 <HTTPGetContentType+0x98>
			return HTTP_CONTENT_TYPE_JPEG;
		else if(ENDSWITH(filename, ".gif"))
 8002704:	4913      	ldr	r1, [pc, #76]	; (8002754 <HTTPGetContentType+0xbc>)
 8002706:	0030      	movs	r0, r6
 8002708:	f7fd fcfe 	bl	8000108 <strcmp>
 800270c:	2800      	cmp	r0, #0
 800270e:	d011      	beq.n	8002734 <HTTPGetContentType+0x9c>
			return HTTP_CONTENT_TYPE_GIF;
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 8002710:	4811      	ldr	r0, [pc, #68]	; (8002758 <HTTPGetContentType+0xc0>)
 8002712:	e000      	b.n	8002716 <HTTPGetContentType+0x7e>
 8002714:	4810      	ldr	r0, [pc, #64]	; (8002758 <HTTPGetContentType+0xc0>)
}
 8002716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return HTTP_CONTENT_TYPE_HTML;
 8002718:	4810      	ldr	r0, [pc, #64]	; (800275c <HTTPGetContentType+0xc4>)
 800271a:	e7fc      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_HTML;
 800271c:	480f      	ldr	r0, [pc, #60]	; (800275c <HTTPGetContentType+0xc4>)
 800271e:	e7fa      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 8002720:	480f      	ldr	r0, [pc, #60]	; (8002760 <HTTPGetContentType+0xc8>)
 8002722:	e7f8      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JS;
 8002724:	480f      	ldr	r0, [pc, #60]	; (8002764 <HTTPGetContentType+0xcc>)
 8002726:	e7f6      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_PNG;
 8002728:	480f      	ldr	r0, [pc, #60]	; (8002768 <HTTPGetContentType+0xd0>)
 800272a:	e7f4      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JPEG;
 800272c:	480f      	ldr	r0, [pc, #60]	; (800276c <HTTPGetContentType+0xd4>)
 800272e:	e7f2      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JPEG;
 8002730:	480e      	ldr	r0, [pc, #56]	; (800276c <HTTPGetContentType+0xd4>)
 8002732:	e7f0      	b.n	8002716 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_GIF;
 8002734:	480e      	ldr	r0, [pc, #56]	; (8002770 <HTTPGetContentType+0xd8>)
 8002736:	e7ee      	b.n	8002716 <HTTPGetContentType+0x7e>
 8002738:	08003a60 	.word	0x08003a60
 800273c:	08003a68 	.word	0x08003a68
 8002740:	08003a70 	.word	0x08003a70
 8002744:	08003a78 	.word	0x08003a78
 8002748:	08003a7c 	.word	0x08003a7c
 800274c:	08003a84 	.word	0x08003a84
 8002750:	08003a8c 	.word	0x08003a8c
 8002754:	08003a94 	.word	0x08003a94
 8002758:	08003b6c 	.word	0x08003b6c
 800275c:	08003b3c 	.word	0x08003b3c
 8002760:	08003b24 	.word	0x08003b24
 8002764:	08003b54 	.word	0x08003b54
 8002768:	08003b78 	.word	0x08003b78
 800276c:	08003b48 	.word	0x08003b48
 8002770:	08003b30 	.word	0x08003b30

08002774 <strsepstr>:
	}
}
#endif

char* strsepstr(char** stringp, const char* delim)
{
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	0006      	movs	r6, r0
 8002778:	000d      	movs	r5, r1
	int len_delim = strlen(delim);
 800277a:	0008      	movs	r0, r1
 800277c:	f7fd fcce 	bl	800011c <strlen>
 8002780:	0007      	movs	r7, r0
	char* loc_head = *stringp;
 8002782:	6834      	ldr	r4, [r6, #0]
	if(loc_head != NULL)
 8002784:	2c00      	cmp	r4, #0
 8002786:	d007      	beq.n	8002798 <strsepstr+0x24>
	{
		char* loc_delim = strstr(loc_head, delim);
 8002788:	0029      	movs	r1, r5
 800278a:	0020      	movs	r0, r4
 800278c:	f001 f871 	bl	8003872 <strstr>
 8002790:	1e05      	subs	r5, r0, #0
		if(loc_delim != NULL)
 8002792:	d103      	bne.n	800279c <strsepstr+0x28>
			memset(loc_delim, 0, len_delim);
			*stringp = loc_delim + len_delim;
		}
		else
		{
			*stringp = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	6033      	str	r3, [r6, #0]
		}
	}
	return loc_head;
}
 8002798:	0020      	movs	r0, r4
 800279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memset(loc_delim, 0, len_delim);
 800279c:	003a      	movs	r2, r7
 800279e:	2100      	movs	r1, #0
 80027a0:	f000 ffe1 	bl	8003766 <memset>
			*stringp = loc_delim + len_delim;
 80027a4:	19ed      	adds	r5, r5, r7
 80027a6:	6035      	str	r5, [r6, #0]
 80027a8:	e7f6      	b.n	8002798 <strsepstr+0x24>
	...

080027ac <parse_http>:

BOOL parse_http(HTTPRequestParseState *pS, char* buffer)

{
 80027ac:	b530      	push	{r4, r5, lr}
 80027ae:	b085      	sub	sp, #20
 80027b0:	0005      	movs	r5, r0
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 80027b2:	7803      	ldrb	r3, [r0, #0]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d04f      	beq.n	8002858 <parse_http+0xac>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <parse_http+0x20>
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d100      	bne.n	80027c2 <parse_http+0x16>
 80027c0:	e0a8      	b.n	8002914 <parse_http+0x168>
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d100      	bne.n	80027c8 <parse_http+0x1c>
 80027c6:	e0ab      	b.n	8002920 <parse_http+0x174>
		}
		pS->state++;
	case 4: // finished
		pS->ready = TRUE;
	}
	return TRUE;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e0ad      	b.n	8002928 <parse_http+0x17c>
		line_tok_saveptr = buffer;
 80027cc:	9103      	str	r1, [sp, #12]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80027ce:	4967      	ldr	r1, [pc, #412]	; (800296c <parse_http+0x1c0>)
 80027d0:	a803      	add	r0, sp, #12
 80027d2:	f7ff ffcf 	bl	8002774 <strsepstr>
 80027d6:	1e04      	subs	r4, r0, #0
		if(line)
 80027d8:	d100      	bne.n	80027dc <parse_http+0x30>
 80027da:	e0c1      	b.n	8002960 <parse_http+0x1b4>
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 80027dc:	2280      	movs	r2, #128	; 0x80
 80027de:	00d2      	lsls	r2, r2, #3
 80027e0:	4963      	ldr	r1, [pc, #396]	; (8002970 <parse_http+0x1c4>)
 80027e2:	f001 f827 	bl	8003834 <strnstr>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d100      	bne.n	80027ec <parse_http+0x40>
 80027ea:	e0b9      	b.n	8002960 <parse_http+0x1b4>
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 80027ec:	aa02      	add	r2, sp, #8
 80027ee:	4961      	ldr	r1, [pc, #388]	; (8002974 <parse_http+0x1c8>)
 80027f0:	0020      	movs	r0, r4
 80027f2:	f001 f884 	bl	80038fe <strtok_r>
 80027f6:	1e04      	subs	r4, r0, #0
			if(tok)
 80027f8:	d100      	bne.n	80027fc <parse_http+0x50>
 80027fa:	e0b1      	b.n	8002960 <parse_http+0x1b4>
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 80027fc:	495e      	ldr	r1, [pc, #376]	; (8002978 <parse_http+0x1cc>)
 80027fe:	f7fd fc83 	bl	8000108 <strcmp>
 8002802:	2800      	cmp	r0, #0
 8002804:	d12d      	bne.n	8002862 <parse_http+0xb6>
					pS->method = HTTP_GET;
 8002806:	2300      	movs	r3, #0
 8002808:	70eb      	strb	r3, [r5, #3]
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 800280a:	aa02      	add	r2, sp, #8
 800280c:	4959      	ldr	r1, [pc, #356]	; (8002974 <parse_http+0x1c8>)
 800280e:	2000      	movs	r0, #0
 8002810:	f001 f875 	bl	80038fe <strtok_r>
			if(tok)
 8002814:	2800      	cmp	r0, #0
 8002816:	d100      	bne.n	800281a <parse_http+0x6e>
 8002818:	e0a2      	b.n	8002960 <parse_http+0x1b4>
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 800281a:	1d6c      	adds	r4, r5, #5
 800281c:	2240      	movs	r2, #64	; 0x40
 800281e:	0001      	movs	r1, r0
 8002820:	0020      	movs	r0, r4
 8002822:	f000 fff3 	bl	800380c <strncpy>
			char* s_args = strchr(pS->URI, '?');
 8002826:	213f      	movs	r1, #63	; 0x3f
 8002828:	0020      	movs	r0, r4
 800282a:	f000 ffb2 	bl	8003792 <strchr>
			if(pS->method == HTTP_GET && s_args != NULL)
 800282e:	78eb      	ldrb	r3, [r5, #3]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <parse_http+0x96>
 8002834:	2800      	cmp	r0, #0
 8002836:	d004      	beq.n	8002842 <parse_http+0x96>
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 8002838:	7003      	strb	r3, [r0, #0]
				s_args++; // move to the char next to ?
 800283a:	1c44      	adds	r4, r0, #1
				if(*s_args)
 800283c:	7843      	ldrb	r3, [r0, #1]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d11b      	bne.n	800287a <parse_http+0xce>
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8002842:	aa02      	add	r2, sp, #8
 8002844:	494b      	ldr	r1, [pc, #300]	; (8002974 <parse_http+0x1c8>)
 8002846:	2000      	movs	r0, #0
 8002848:	f001 f859 	bl	80038fe <strtok_r>
			if(tok)
 800284c:	2800      	cmp	r0, #0
 800284e:	d100      	bne.n	8002852 <parse_http+0xa6>
 8002850:	e086      	b.n	8002960 <parse_http+0x1b4>
			pS->state ++;
 8002852:	782b      	ldrb	r3, [r5, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	702b      	strb	r3, [r5, #0]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8002858:	4944      	ldr	r1, [pc, #272]	; (800296c <parse_http+0x1c0>)
 800285a:	a803      	add	r0, sp, #12
 800285c:	f7ff ff8a 	bl	8002774 <strsepstr>
		while(line)
 8002860:	e031      	b.n	80028c6 <parse_http+0x11a>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 8002862:	4946      	ldr	r1, [pc, #280]	; (800297c <parse_http+0x1d0>)
 8002864:	0020      	movs	r0, r4
 8002866:	f7fd fc4f 	bl	8000108 <strcmp>
 800286a:	2800      	cmp	r0, #0
 800286c:	d102      	bne.n	8002874 <parse_http+0xc8>
					pS->method = HTTP_POST;
 800286e:	2301      	movs	r3, #1
 8002870:	70eb      	strb	r3, [r5, #3]
 8002872:	e7ca      	b.n	800280a <parse_http+0x5e>
					pS->method = HTTP_GET;
 8002874:	2300      	movs	r3, #0
 8002876:	70eb      	strb	r3, [r5, #3]
 8002878:	e7c7      	b.n	800280a <parse_http+0x5e>
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 800287a:	aa01      	add	r2, sp, #4
 800287c:	4940      	ldr	r1, [pc, #256]	; (8002980 <parse_http+0x1d4>)
 800287e:	0020      	movs	r0, r4
 8002880:	f001 f83d 	bl	80038fe <strtok_r>
					while(tok_arg)
 8002884:	e00b      	b.n	800289e <parse_http+0xf2>
						pS->argv[pS->argc++] = tok_arg;
 8002886:	2245      	movs	r2, #69	; 0x45
 8002888:	5cab      	ldrb	r3, [r5, r2]
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	54a9      	strb	r1, [r5, r2]
 800288e:	3312      	adds	r3, #18
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	5158      	str	r0, [r3, r5]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8002894:	aa01      	add	r2, sp, #4
 8002896:	493a      	ldr	r1, [pc, #232]	; (8002980 <parse_http+0x1d4>)
 8002898:	2000      	movs	r0, #0
 800289a:	f001 f830 	bl	80038fe <strtok_r>
					while(tok_arg)
 800289e:	2800      	cmp	r0, #0
 80028a0:	d1f1      	bne.n	8002886 <parse_http+0xda>
 80028a2:	e7ce      	b.n	8002842 <parse_http+0x96>
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80028a4:	aa02      	add	r2, sp, #8
 80028a6:	4937      	ldr	r1, [pc, #220]	; (8002984 <parse_http+0x1d8>)
 80028a8:	f001 f829 	bl	80038fe <strtok_r>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d057      	beq.n	8002960 <parse_http+0x1b4>
					if(strstr(tok, "Keep") != NULL)
 80028b0:	4935      	ldr	r1, [pc, #212]	; (8002988 <parse_http+0x1dc>)
 80028b2:	f000 ffde 	bl	8003872 <strstr>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d001      	beq.n	80028be <parse_http+0x112>
						pS->connection = KEEP_ALIVE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	712b      	strb	r3, [r5, #4]
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80028be:	492b      	ldr	r1, [pc, #172]	; (800296c <parse_http+0x1c0>)
 80028c0:	a803      	add	r0, sp, #12
 80028c2:	f7ff ff57 	bl	8002774 <strsepstr>
		while(line)
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d021      	beq.n	800290e <parse_http+0x162>
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80028ca:	aa02      	add	r2, sp, #8
 80028cc:	492d      	ldr	r1, [pc, #180]	; (8002984 <parse_http+0x1d8>)
 80028ce:	f001 f816 	bl	80038fe <strtok_r>
 80028d2:	1e04      	subs	r4, r0, #0
			if(tok == NULL || *tok == 0)
 80028d4:	d01b      	beq.n	800290e <parse_http+0x162>
 80028d6:	7803      	ldrb	r3, [r0, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d018      	beq.n	800290e <parse_http+0x162>
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 80028dc:	492b      	ldr	r1, [pc, #172]	; (800298c <parse_http+0x1e0>)
 80028de:	f7fd fc13 	bl	8000108 <strcmp>
 80028e2:	2800      	cmp	r0, #0
 80028e4:	d0de      	beq.n	80028a4 <parse_http+0xf8>
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 80028e6:	492a      	ldr	r1, [pc, #168]	; (8002990 <parse_http+0x1e4>)
 80028e8:	0020      	movs	r0, r4
 80028ea:	f7fd fc0d 	bl	8000108 <strcmp>
 80028ee:	2800      	cmp	r0, #0
 80028f0:	d1e5      	bne.n	80028be <parse_http+0x112>
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80028f2:	aa02      	add	r2, sp, #8
 80028f4:	4923      	ldr	r1, [pc, #140]	; (8002984 <parse_http+0x1d8>)
 80028f6:	f001 f802 	bl	80038fe <strtok_r>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d030      	beq.n	8002960 <parse_http+0x1b4>
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 80028fe:	002b      	movs	r3, r5
 8002900:	3358      	adds	r3, #88	; 0x58
 8002902:	2220      	movs	r2, #32
 8002904:	0001      	movs	r1, r0
 8002906:	0018      	movs	r0, r3
 8002908:	f000 ff80 	bl	800380c <strncpy>
 800290c:	e7d7      	b.n	80028be <parse_http+0x112>
		pS->state++;
 800290e:	782b      	ldrb	r3, [r5, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	702b      	strb	r3, [r5, #0]
		if(pS->method == HTTP_POST)
 8002914:	78eb      	ldrb	r3, [r5, #3]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d008      	beq.n	800292c <parse_http+0x180>
		pS->state++;
 800291a:	782b      	ldrb	r3, [r5, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	702b      	strb	r3, [r5, #0]
		pS->ready = TRUE;
 8002920:	2388      	movs	r3, #136	; 0x88
 8002922:	2201      	movs	r2, #1
 8002924:	54ea      	strb	r2, [r5, r3]
	return TRUE;
 8002926:	2001      	movs	r0, #1
	HTTP_PARSE_ERROR:
		pS->state = 0;
		pS->ready = FALSE;
		return FALSE;
}
 8002928:	b005      	add	sp, #20
 800292a:	bd30      	pop	{r4, r5, pc}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800292c:	490f      	ldr	r1, [pc, #60]	; (800296c <parse_http+0x1c0>)
 800292e:	a803      	add	r0, sp, #12
 8002930:	f7ff ff20 	bl	8002774 <strsepstr>
			if(line)
 8002934:	2800      	cmp	r0, #0
 8002936:	d0f0      	beq.n	800291a <parse_http+0x16e>
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 8002938:	aa01      	add	r2, sp, #4
 800293a:	4911      	ldr	r1, [pc, #68]	; (8002980 <parse_http+0x1d4>)
 800293c:	f000 ffdf 	bl	80038fe <strtok_r>
				while(tok_arg)
 8002940:	e00b      	b.n	800295a <parse_http+0x1ae>
					pS->argv[pS->argc++] = tok_arg;
 8002942:	2245      	movs	r2, #69	; 0x45
 8002944:	5cab      	ldrb	r3, [r5, r2]
 8002946:	1c59      	adds	r1, r3, #1
 8002948:	54a9      	strb	r1, [r5, r2]
 800294a:	3312      	adds	r3, #18
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	5158      	str	r0, [r3, r5]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8002950:	aa01      	add	r2, sp, #4
 8002952:	490b      	ldr	r1, [pc, #44]	; (8002980 <parse_http+0x1d4>)
 8002954:	2000      	movs	r0, #0
 8002956:	f000 ffd2 	bl	80038fe <strtok_r>
				while(tok_arg)
 800295a:	2800      	cmp	r0, #0
 800295c:	d1f1      	bne.n	8002942 <parse_http+0x196>
 800295e:	e7dc      	b.n	800291a <parse_http+0x16e>
		pS->state = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	702b      	strb	r3, [r5, #0]
		pS->ready = FALSE;
 8002964:	2288      	movs	r2, #136	; 0x88
 8002966:	54ab      	strb	r3, [r5, r2]
		return FALSE;
 8002968:	2000      	movs	r0, #0
 800296a:	e7dd      	b.n	8002928 <parse_http+0x17c>
 800296c:	08003ba8 	.word	0x08003ba8
 8002970:	08003bb8 	.word	0x08003bb8
 8002974:	08003b84 	.word	0x08003b84
 8002978:	08003b9c 	.word	0x08003b9c
 800297c:	08003ba0 	.word	0x08003ba0
 8002980:	08003bc0 	.word	0x08003bc0
 8002984:	08003b20 	.word	0x08003b20
 8002988:	08003bc4 	.word	0x08003bc4
 800298c:	08003b88 	.word	0x08003b88
 8002990:	08003b94 	.word	0x08003b94

08002994 <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 8002994:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(pS->argc == 0)
 8002996:	2345      	movs	r3, #69	; 0x45
 8002998:	5cc7      	ldrb	r7, [r0, r3]
 800299a:	2f00      	cmp	r7, #0
 800299c:	d01d      	beq.n	80029da <getHTTPArg+0x46>
		return NULL;
	int i;
	const char* cur_s; 
	const char* cur_name = name;
	for(i=0; i<pS->argc; ++i)
 800299e:	2600      	movs	r6, #0
 80029a0:	e005      	b.n	80029ae <getHTTPArg+0x1a>
				break;
			}
			cur_name++;
			cur_s++;
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	2a00      	cmp	r2, #0
 80029a6:	d101      	bne.n	80029ac <getHTTPArg+0x18>
 80029a8:	2b3d      	cmp	r3, #61	; 0x3d
 80029aa:	d012      	beq.n	80029d2 <getHTTPArg+0x3e>
	for(i=0; i<pS->argc; ++i)
 80029ac:	3601      	adds	r6, #1
 80029ae:	42b7      	cmp	r7, r6
 80029b0:	dd11      	ble.n	80029d6 <getHTTPArg+0x42>
		cur_s = pS->argv[i];
 80029b2:	0033      	movs	r3, r6
 80029b4:	3312      	adds	r3, #18
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	581c      	ldr	r4, [r3, r0]
		while(*cur_s && *cur_name)
 80029ba:	000a      	movs	r2, r1
 80029bc:	7823      	ldrb	r3, [r4, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ef      	beq.n	80029a2 <getHTTPArg+0xe>
 80029c2:	7815      	ldrb	r5, [r2, #0]
 80029c4:	2d00      	cmp	r5, #0
 80029c6:	d0ec      	beq.n	80029a2 <getHTTPArg+0xe>
			if(*cur_s != *cur_name)
 80029c8:	42ab      	cmp	r3, r5
 80029ca:	d1ea      	bne.n	80029a2 <getHTTPArg+0xe>
			cur_name++;
 80029cc:	3201      	adds	r2, #1
			cur_s++;
 80029ce:	3401      	adds	r4, #1
 80029d0:	e7f4      	b.n	80029bc <getHTTPArg+0x28>
		{
			return cur_s+1;
 80029d2:	1c60      	adds	r0, r4, #1
 80029d4:	e000      	b.n	80029d8 <getHTTPArg+0x44>
		}
		cur_name = name;
	}
	return NULL;
 80029d6:	2000      	movs	r0, #0
}
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
 80029da:	2000      	movs	r0, #0
 80029dc:	e7fc      	b.n	80029d8 <getHTTPArg+0x44>

080029de <atou8>:
uint8_t atou8(const char* s)
{
 80029de:	b510      	push	{r4, lr}
 80029e0:	0004      	movs	r4, r0
	uint8_t i;
	uint8_t sum = 0;
 80029e2:	2000      	movs	r0, #0
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 80029e4:	2200      	movs	r2, #0
 80029e6:	e00a      	b.n	80029fe <atou8+0x20>
	{
		sum *= 10;
 80029e8:	0081      	lsls	r1, r0, #2
 80029ea:	1840      	adds	r0, r0, r1
 80029ec:	0041      	lsls	r1, r0, #1
 80029ee:	b2c9      	uxtb	r1, r1
		sum += *s - '0';
 80029f0:	185b      	adds	r3, r3, r1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	3b30      	subs	r3, #48	; 0x30
 80029f6:	b2d8      	uxtb	r0, r3
		s++;
 80029f8:	3401      	adds	r4, #1
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 80029fa:	3201      	adds	r2, #1
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	2a02      	cmp	r2, #2
 8002a00:	d802      	bhi.n	8002a08 <atou8+0x2a>
 8002a02:	7823      	ldrb	r3, [r4, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1ef      	bne.n	80029e8 <atou8+0xa>
	}
	return sum;
}
 8002a08:	bd10      	pop	{r4, pc}

08002a0a <u16toa>:
uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 8002a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0c:	0004      	movs	r4, r0
 8002a0e:	000d      	movs	r5, r1
	uint8_t i = 0, j;
 8002a10:	2700      	movs	r7, #0
	while(d)
 8002a12:	e00e      	b.n	8002a32 <u16toa+0x28>
	{
		buf[i++] = (d % 10) + '0';
 8002a14:	1c7e      	adds	r6, r7, #1
 8002a16:	b2f6      	uxtb	r6, r6
 8002a18:	19ef      	adds	r7, r5, r7
 8002a1a:	210a      	movs	r1, #10
 8002a1c:	0020      	movs	r0, r4
 8002a1e:	f7fd fc0b 	bl	8000238 <__aeabi_uidivmod>
 8002a22:	3130      	adds	r1, #48	; 0x30
 8002a24:	7039      	strb	r1, [r7, #0]
		d /= 10;
 8002a26:	210a      	movs	r1, #10
 8002a28:	0020      	movs	r0, r4
 8002a2a:	f7fd fb7f 	bl	800012c <__udivsi3>
 8002a2e:	b284      	uxth	r4, r0
		buf[i++] = (d % 10) + '0';
 8002a30:	0037      	movs	r7, r6
	while(d)
 8002a32:	2c00      	cmp	r4, #0
 8002a34:	d1ee      	bne.n	8002a14 <u16toa+0xa>
	}
	buf[i] = 0;
 8002a36:	19eb      	adds	r3, r5, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e009      	b.n	8002a54 <u16toa+0x4a>
	{
		char tmp;
		tmp = buf[j];
 8002a40:	18e9      	adds	r1, r5, r3
 8002a42:	780c      	ldrb	r4, [r1, #0]
		buf[j] = buf[i-j-1];
 8002a44:	1afa      	subs	r2, r7, r3
 8002a46:	3a01      	subs	r2, #1
 8002a48:	18aa      	adds	r2, r5, r2
 8002a4a:	7816      	ldrb	r6, [r2, #0]
 8002a4c:	700e      	strb	r6, [r1, #0]
		buf[i-j-1] = tmp; // swap
 8002a4e:	7014      	strb	r4, [r2, #0]
	for(j = 0; j < i/2; ++j)
 8002a50:	3301      	adds	r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	087a      	lsrs	r2, r7, #1
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d8f2      	bhi.n	8002a40 <u16toa+0x36>
	}
	return i;
}
 8002a5a:	0038      	movs	r0, r7
 8002a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a60 <HTTPSendFile>:
{
 8002a60:	b082      	sub	sp, #8
 8002a62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a64:	b08b      	sub	sp, #44	; 0x2c
 8002a66:	0006      	movs	r6, r0
 8002a68:	000f      	movs	r7, r1
 8002a6a:	0015      	movs	r5, r2
 8002a6c:	9210      	str	r2, [sp, #64]	; 0x40
 8002a6e:	9311      	str	r3, [sp, #68]	; 0x44
	unsigned char* buf = pS->response_header;
 8002a70:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
	if(ENDSWITH(file.path, ".gz"))
 8002a72:	0010      	movs	r0, r2
 8002a74:	f7fd fb52 	bl	800011c <strlen>
 8002a78:	3803      	subs	r0, #3
 8002a7a:	1828      	adds	r0, r5, r0
 8002a7c:	4958      	ldr	r1, [pc, #352]	; (8002be0 <HTTPSendFile+0x180>)
 8002a7e:	f7fd fb43 	bl	8000108 <strcmp>
 8002a82:	2800      	cmp	r0, #0
 8002a84:	d100      	bne.n	8002a88 <HTTPSendFile+0x28>
 8002a86:	e085      	b.n	8002b94 <HTTPSendFile+0x134>
		content_type = HTTPGetContentType(file.path);
 8002a88:	0028      	movs	r0, r5
 8002a8a:	f7ff fe05 	bl	8002698 <HTTPGetContentType>
 8002a8e:	9001      	str	r0, [sp, #4]
	BOOL is_gzip = FALSE;
 8002a90:	2500      	movs	r5, #0
	*buf = 0; // clear buffer
 8002a92:	2300      	movs	r3, #0
 8002a94:	7023      	strb	r3, [r4, #0]
	strcat(buf, HTTP_STR_VERSION);
 8002a96:	0020      	movs	r0, r4
 8002a98:	f7fd fb40 	bl	800011c <strlen>
 8002a9c:	1820      	adds	r0, r4, r0
 8002a9e:	2209      	movs	r2, #9
 8002aa0:	4950      	ldr	r1, [pc, #320]	; (8002be4 <HTTPSendFile+0x184>)
 8002aa2:	f000 fe57 	bl	8003754 <memcpy>
	*buf = ' '; // HTTP/1.1_
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	7223      	strb	r3, [r4, #8]
	buf++;
 8002aaa:	3409      	adds	r4, #9
	buf += u16toa(code, buf);
 8002aac:	b2b8      	uxth	r0, r7
 8002aae:	0021      	movs	r1, r4
 8002ab0:	f7ff ffab 	bl	8002a0a <u16toa>
 8002ab4:	1824      	adds	r4, r4, r0
	strcat(buf, " OK\r\n");
 8002ab6:	0020      	movs	r0, r4
 8002ab8:	f7fd fb30 	bl	800011c <strlen>
 8002abc:	1820      	adds	r0, r4, r0
 8002abe:	2206      	movs	r2, #6
 8002ac0:	4949      	ldr	r1, [pc, #292]	; (8002be8 <HTTPSendFile+0x188>)
 8002ac2:	f000 fe47 	bl	8003754 <memcpy>
	buf += 5;	// 200 OK\r\n
 8002ac6:	1d67      	adds	r7, r4, #5
	strcat(buf, "Connection: ");
 8002ac8:	0038      	movs	r0, r7
 8002aca:	f7fd fb27 	bl	800011c <strlen>
 8002ace:	1838      	adds	r0, r7, r0
 8002ad0:	220d      	movs	r2, #13
 8002ad2:	4946      	ldr	r1, [pc, #280]	; (8002bec <HTTPSendFile+0x18c>)
 8002ad4:	f000 fe3e 	bl	8003754 <memcpy>
	buf += 12;
 8002ad8:	370c      	adds	r7, #12
	if(pS->connection == KEEP_ALIVE)
 8002ada:	7933      	ldrb	r3, [r6, #4]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d06a      	beq.n	8002bb6 <HTTPSendFile+0x156>
		strcat(buf, "Closed\r\n");
 8002ae0:	0038      	movs	r0, r7
 8002ae2:	f7fd fb1b 	bl	800011c <strlen>
 8002ae6:	1838      	adds	r0, r7, r0
 8002ae8:	2209      	movs	r2, #9
 8002aea:	4941      	ldr	r1, [pc, #260]	; (8002bf0 <HTTPSendFile+0x190>)
 8002aec:	f000 fe32 	bl	8003754 <memcpy>
		buf += 8;
 8002af0:	3419      	adds	r4, #25
	if(is_gzip)
 8002af2:	2d00      	cmp	r5, #0
 8002af4:	d169      	bne.n	8002bca <HTTPSendFile+0x16a>
	strcat(buf, "Content-Type: ");
 8002af6:	0020      	movs	r0, r4
 8002af8:	f7fd fb10 	bl	800011c <strlen>
 8002afc:	1820      	adds	r0, r4, r0
 8002afe:	220f      	movs	r2, #15
 8002b00:	493c      	ldr	r1, [pc, #240]	; (8002bf4 <HTTPSendFile+0x194>)
 8002b02:	f000 fe27 	bl	8003754 <memcpy>
	buf += 14;
 8002b06:	340e      	adds	r4, #14
	strcat(buf, content_type);
 8002b08:	9d01      	ldr	r5, [sp, #4]
 8002b0a:	0029      	movs	r1, r5
 8002b0c:	0020      	movs	r0, r4
 8002b0e:	f000 fe32 	bl	8003776 <strcat>
	buf += strlen(content_type);
 8002b12:	0028      	movs	r0, r5
 8002b14:	f7fd fb02 	bl	800011c <strlen>
 8002b18:	1824      	adds	r4, r4, r0
	strcat(buf, "\r\n");
 8002b1a:	0020      	movs	r0, r4
 8002b1c:	f7fd fafe 	bl	800011c <strlen>
 8002b20:	1820      	adds	r0, r4, r0
 8002b22:	4d35      	ldr	r5, [pc, #212]	; (8002bf8 <HTTPSendFile+0x198>)
 8002b24:	2203      	movs	r2, #3
 8002b26:	0029      	movs	r1, r5
 8002b28:	f000 fe14 	bl	8003754 <memcpy>
	buf += 2;
 8002b2c:	1ca7      	adds	r7, r4, #2
	strcat(buf, "Content-Length: ");
 8002b2e:	0038      	movs	r0, r7
 8002b30:	f7fd faf4 	bl	800011c <strlen>
 8002b34:	1838      	adds	r0, r7, r0
 8002b36:	2211      	movs	r2, #17
 8002b38:	4930      	ldr	r1, [pc, #192]	; (8002bfc <HTTPSendFile+0x19c>)
 8002b3a:	f000 fe0b 	bl	8003754 <memcpy>
	buf += 16;
 8002b3e:	3412      	adds	r4, #18
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 8002b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002b42:	b29f      	uxth	r7, r3
 8002b44:	0021      	movs	r1, r4
 8002b46:	0038      	movs	r0, r7
 8002b48:	f7ff ff5f 	bl	8002a0a <u16toa>
 8002b4c:	1824      	adds	r4, r4, r0
	strcat(buf, HTTP_LINE_DELIM);
 8002b4e:	0020      	movs	r0, r4
 8002b50:	f7fd fae4 	bl	800011c <strlen>
 8002b54:	1820      	adds	r0, r4, r0
 8002b56:	2203      	movs	r2, #3
 8002b58:	0029      	movs	r1, r5
 8002b5a:	f000 fdfb 	bl	8003754 <memcpy>
	buf += 2;
 8002b5e:	3402      	adds	r4, #2
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 8002b60:	0020      	movs	r0, r4
 8002b62:	f7fd fadb 	bl	800011c <strlen>
 8002b66:	1820      	adds	r0, r4, r0
 8002b68:	2203      	movs	r2, #3
 8002b6a:	0029      	movs	r1, r5
 8002b6c:	f000 fdf2 	bl	8003754 <memcpy>
	pS->len_response_header = strlen(pS->response_header);
 8002b70:	6ff0      	ldr	r0, [r6, #124]	; 0x7c
 8002b72:	f7fd fad3 	bl	800011c <strlen>
 8002b76:	237a      	movs	r3, #122	; 0x7a
 8002b78:	52f0      	strh	r0, [r6, r3]
	pS->len_response_content_remain = (uint16_t)file.size;
 8002b7a:	3306      	adds	r3, #6
 8002b7c:	52f7      	strh	r7, [r6, r3]
	pS->response_content = file.p_content;
 8002b7e:	3304      	adds	r3, #4
 8002b80:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002b82:	50f2      	str	r2, [r6, r3]
	pS->response_stage = RESPONSE_PREPARED;
 8002b84:	3b0c      	subs	r3, #12
 8002b86:	2201      	movs	r2, #1
 8002b88:	54f2      	strb	r2, [r6, r3]
}
 8002b8a:	b00b      	add	sp, #44	; 0x2c
 8002b8c:	bcf0      	pop	{r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	b002      	add	sp, #8
 8002b92:	4718      	bx	r3
		strcpy(s_tmp, file.path);
 8002b94:	0029      	movs	r1, r5
 8002b96:	a802      	add	r0, sp, #8
 8002b98:	f000 fe09 	bl	80037ae <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 8002b9c:	a802      	add	r0, sp, #8
 8002b9e:	f7fd fabd 	bl	800011c <strlen>
 8002ba2:	3803      	subs	r0, #3
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	aa02      	add	r2, sp, #8
 8002ba8:	5413      	strb	r3, [r2, r0]
		content_type = HTTPGetContentType(s_tmp);
 8002baa:	0010      	movs	r0, r2
 8002bac:	f7ff fd74 	bl	8002698 <HTTPGetContentType>
 8002bb0:	9001      	str	r0, [sp, #4]
		is_gzip = TRUE;
 8002bb2:	2501      	movs	r5, #1
 8002bb4:	e76d      	b.n	8002a92 <HTTPSendFile+0x32>
		strcat(buf, "Keep-Alive\r\n");
 8002bb6:	0038      	movs	r0, r7
 8002bb8:	f7fd fab0 	bl	800011c <strlen>
 8002bbc:	1838      	adds	r0, r7, r0
 8002bbe:	220d      	movs	r2, #13
 8002bc0:	490f      	ldr	r1, [pc, #60]	; (8002c00 <HTTPSendFile+0x1a0>)
 8002bc2:	f000 fdc7 	bl	8003754 <memcpy>
		buf += 12;
 8002bc6:	341d      	adds	r4, #29
 8002bc8:	e793      	b.n	8002af2 <HTTPSendFile+0x92>
		strcat(buf, "Content-Encoding: gzip\r\n");
 8002bca:	0020      	movs	r0, r4
 8002bcc:	f7fd faa6 	bl	800011c <strlen>
 8002bd0:	1820      	adds	r0, r4, r0
 8002bd2:	2219      	movs	r2, #25
 8002bd4:	490b      	ldr	r1, [pc, #44]	; (8002c04 <HTTPSendFile+0x1a4>)
 8002bd6:	f000 fdbd 	bl	8003754 <memcpy>
		buf += 24;
 8002bda:	3418      	adds	r4, #24
 8002bdc:	e78b      	b.n	8002af6 <HTTPSendFile+0x96>
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	08003a9c 	.word	0x08003a9c
 8002be4:	08003b14 	.word	0x08003b14
 8002be8:	08003aa0 	.word	0x08003aa0
 8002bec:	08003aa8 	.word	0x08003aa8
 8002bf0:	08003ac8 	.word	0x08003ac8
 8002bf4:	08003af0 	.word	0x08003af0
 8002bf8:	080039c8 	.word	0x080039c8
 8002bfc:	08003b00 	.word	0x08003b00
 8002c00:	08003ab8 	.word	0x08003ab8
 8002c04:	08003ad4 	.word	0x08003ad4

08002c08 <HTTPSendStr>:
{
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	0007      	movs	r7, r0
 8002c0e:	000e      	movs	r6, r1
 8002c10:	9201      	str	r2, [sp, #4]
	unsigned char* buf = pS->response_header;
 8002c12:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
	*buf = 0; // clear buffer
 8002c14:	2300      	movs	r3, #0
 8002c16:	7023      	strb	r3, [r4, #0]
	strcat(buf, HTTP_STR_VERSION);
 8002c18:	0020      	movs	r0, r4
 8002c1a:	f7fd fa7f 	bl	800011c <strlen>
 8002c1e:	1820      	adds	r0, r4, r0
 8002c20:	2209      	movs	r2, #9
 8002c22:	4943      	ldr	r1, [pc, #268]	; (8002d30 <HTTPSendStr+0x128>)
 8002c24:	f000 fd96 	bl	8003754 <memcpy>
	*buf = ' '; // HTTP/1.1_
 8002c28:	2320      	movs	r3, #32
 8002c2a:	7223      	strb	r3, [r4, #8]
	buf++;
 8002c2c:	3409      	adds	r4, #9
	buf += u16toa(code, buf);
 8002c2e:	b2b0      	uxth	r0, r6
 8002c30:	0021      	movs	r1, r4
 8002c32:	f7ff feea 	bl	8002a0a <u16toa>
 8002c36:	1824      	adds	r4, r4, r0
	strcat(buf, " OK\r\n");
 8002c38:	0020      	movs	r0, r4
 8002c3a:	f7fd fa6f 	bl	800011c <strlen>
 8002c3e:	1820      	adds	r0, r4, r0
 8002c40:	2206      	movs	r2, #6
 8002c42:	493c      	ldr	r1, [pc, #240]	; (8002d34 <HTTPSendStr+0x12c>)
 8002c44:	f000 fd86 	bl	8003754 <memcpy>
	buf += 5;	// 200 OK\r\n
 8002c48:	1d66      	adds	r6, r4, #5
	strcat(buf, "Connection: ");
 8002c4a:	0030      	movs	r0, r6
 8002c4c:	f7fd fa66 	bl	800011c <strlen>
 8002c50:	1830      	adds	r0, r6, r0
 8002c52:	220d      	movs	r2, #13
 8002c54:	4938      	ldr	r1, [pc, #224]	; (8002d38 <HTTPSendStr+0x130>)
 8002c56:	f000 fd7d 	bl	8003754 <memcpy>
	buf += 12;
 8002c5a:	360c      	adds	r6, #12
	if(pS->connection == KEEP_ALIVE)
 8002c5c:	793b      	ldrb	r3, [r7, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d05b      	beq.n	8002d1a <HTTPSendStr+0x112>
		strcat(buf, "Closed\r\n");
 8002c62:	0030      	movs	r0, r6
 8002c64:	f7fd fa5a 	bl	800011c <strlen>
 8002c68:	1830      	adds	r0, r6, r0
 8002c6a:	2209      	movs	r2, #9
 8002c6c:	4933      	ldr	r1, [pc, #204]	; (8002d3c <HTTPSendStr+0x134>)
 8002c6e:	f000 fd71 	bl	8003754 <memcpy>
		buf += 8;
 8002c72:	3419      	adds	r4, #25
	const char* content_type = HTTPGetContentType(pS->URI);
 8002c74:	1d78      	adds	r0, r7, #5
 8002c76:	f7ff fd0f 	bl	8002698 <HTTPGetContentType>
 8002c7a:	0006      	movs	r6, r0
	strcat(buf, "Content-Type: ");
 8002c7c:	0020      	movs	r0, r4
 8002c7e:	f7fd fa4d 	bl	800011c <strlen>
 8002c82:	1820      	adds	r0, r4, r0
 8002c84:	220f      	movs	r2, #15
 8002c86:	492e      	ldr	r1, [pc, #184]	; (8002d40 <HTTPSendStr+0x138>)
 8002c88:	f000 fd64 	bl	8003754 <memcpy>
	buf += 14;
 8002c8c:	340e      	adds	r4, #14
	strcat(buf, content_type);
 8002c8e:	0031      	movs	r1, r6
 8002c90:	0020      	movs	r0, r4
 8002c92:	f000 fd70 	bl	8003776 <strcat>
	buf += strlen(content_type);
 8002c96:	0030      	movs	r0, r6
 8002c98:	f7fd fa40 	bl	800011c <strlen>
 8002c9c:	1824      	adds	r4, r4, r0
	strcat(buf, "\r\n");
 8002c9e:	0020      	movs	r0, r4
 8002ca0:	f7fd fa3c 	bl	800011c <strlen>
 8002ca4:	1820      	adds	r0, r4, r0
 8002ca6:	4e27      	ldr	r6, [pc, #156]	; (8002d44 <HTTPSendStr+0x13c>)
 8002ca8:	2203      	movs	r2, #3
 8002caa:	0031      	movs	r1, r6
 8002cac:	f000 fd52 	bl	8003754 <memcpy>
	buf += 2;
 8002cb0:	1ca5      	adds	r5, r4, #2
	strcat(buf, "Content-Length: ");
 8002cb2:	0028      	movs	r0, r5
 8002cb4:	f7fd fa32 	bl	800011c <strlen>
 8002cb8:	1828      	adds	r0, r5, r0
 8002cba:	2211      	movs	r2, #17
 8002cbc:	4922      	ldr	r1, [pc, #136]	; (8002d48 <HTTPSendStr+0x140>)
 8002cbe:	f000 fd49 	bl	8003754 <memcpy>
	buf += 16;
 8002cc2:	3412      	adds	r4, #18
	uint16_t len_content = strlen(content);
 8002cc4:	9d01      	ldr	r5, [sp, #4]
 8002cc6:	0028      	movs	r0, r5
 8002cc8:	f7fd fa28 	bl	800011c <strlen>
 8002ccc:	b280      	uxth	r0, r0
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8002cce:	0021      	movs	r1, r4
 8002cd0:	f7ff fe9b 	bl	8002a0a <u16toa>
 8002cd4:	1824      	adds	r4, r4, r0
	strcat(buf, HTTP_LINE_DELIM);
 8002cd6:	0020      	movs	r0, r4
 8002cd8:	f7fd fa20 	bl	800011c <strlen>
 8002cdc:	1820      	adds	r0, r4, r0
 8002cde:	2203      	movs	r2, #3
 8002ce0:	0031      	movs	r1, r6
 8002ce2:	f000 fd37 	bl	8003754 <memcpy>
	buf += 2;
 8002ce6:	3402      	adds	r4, #2
	strcat(buf, HTTP_LINE_DELIM);
 8002ce8:	0020      	movs	r0, r4
 8002cea:	f7fd fa17 	bl	800011c <strlen>
 8002cee:	1820      	adds	r0, r4, r0
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	0031      	movs	r1, r6
 8002cf4:	f000 fd2e 	bl	8003754 <memcpy>
	pS->len_response_header = strlen(pS->response_header);
 8002cf8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002cfa:	f7fd fa0f 	bl	800011c <strlen>
 8002cfe:	237a      	movs	r3, #122	; 0x7a
 8002d00:	52f8      	strh	r0, [r7, r3]
	pS->len_response_content_remain = strlen(content);
 8002d02:	0028      	movs	r0, r5
 8002d04:	f7fd fa0a 	bl	800011c <strlen>
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	52f8      	strh	r0, [r7, r3]
	pS->response_content = content;
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	50fd      	str	r5, [r7, r3]
	pS->response_stage = RESPONSE_PREPARED;
 8002d10:	3b0c      	subs	r3, #12
 8002d12:	2201      	movs	r2, #1
 8002d14:	54fa      	strb	r2, [r7, r3]
}
 8002d16:	b003      	add	sp, #12
 8002d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(buf, "Keep-Alive\r\n");
 8002d1a:	0030      	movs	r0, r6
 8002d1c:	f7fd f9fe 	bl	800011c <strlen>
 8002d20:	1830      	adds	r0, r6, r0
 8002d22:	220d      	movs	r2, #13
 8002d24:	4909      	ldr	r1, [pc, #36]	; (8002d4c <HTTPSendStr+0x144>)
 8002d26:	f000 fd15 	bl	8003754 <memcpy>
		buf += 12;
 8002d2a:	341d      	adds	r4, #29
 8002d2c:	e7a2      	b.n	8002c74 <HTTPSendStr+0x6c>
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	08003b14 	.word	0x08003b14
 8002d34:	08003aa0 	.word	0x08003aa0
 8002d38:	08003aa8 	.word	0x08003aa8
 8002d3c:	08003ac8 	.word	0x08003ac8
 8002d40:	08003af0 	.word	0x08003af0
 8002d44:	080039c8 	.word	0x080039c8
 8002d48:	08003b00 	.word	0x08003b00
 8002d4c:	08003ab8 	.word	0x08003ab8

08002d50 <HTTPonNotFound>:
{
 8002d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d52:	b09f      	sub	sp, #124	; 0x7c
 8002d54:	0006      	movs	r6, r0
	if(FS_exists(&FS, pS->URI))
 8002d56:	1d45      	adds	r5, r0, #5
 8002d58:	0029      	movs	r1, r5
 8002d5a:	4830      	ldr	r0, [pc, #192]	; (8002e1c <HTTPonNotFound+0xcc>)
 8002d5c:	f7ff fb46 	bl	80023ec <FS_exists>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d016      	beq.n	8002d92 <HTTPonNotFound+0x42>
		FSfile_typedef file = FS_open(&FS, pS->URI);
 8002d64:	002a      	movs	r2, r5
 8002d66:	492d      	ldr	r1, [pc, #180]	; (8002e1c <HTTPonNotFound+0xcc>)
 8002d68:	a804      	add	r0, sp, #16
 8002d6a:	f7ff fb13 	bl	8002394 <FS_open>
		if(file.path)
 8002d6e:	9b04      	ldr	r3, [sp, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d022      	beq.n	8002dba <HTTPonNotFound+0x6a>
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 8002d74:	002a      	movs	r2, r5
 8002d76:	4929      	ldr	r1, [pc, #164]	; (8002e1c <HTTPonNotFound+0xcc>)
 8002d78:	a818      	add	r0, sp, #96	; 0x60
 8002d7a:	f7ff fb0b 	bl	8002394 <FS_open>
 8002d7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002d80:	9303      	str	r3, [sp, #12]
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002d86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002d88:	21c8      	movs	r1, #200	; 0xc8
 8002d8a:	0030      	movs	r0, r6
 8002d8c:	f7ff fe68 	bl	8002a60 <HTTPSendFile>
 8002d90:	e02b      	b.n	8002dea <HTTPonNotFound+0x9a>
		strcpy(s_tmp, pS->URI);
 8002d92:	0029      	movs	r1, r5
 8002d94:	a807      	add	r0, sp, #28
 8002d96:	f000 fd0a 	bl	80037ae <strcpy>
		strcat(s_tmp, ".gz");
 8002d9a:	a807      	add	r0, sp, #28
 8002d9c:	f7fd f9be 	bl	800011c <strlen>
 8002da0:	ab07      	add	r3, sp, #28
 8002da2:	469c      	mov	ip, r3
 8002da4:	4460      	add	r0, ip
 8002da6:	2204      	movs	r2, #4
 8002da8:	491d      	ldr	r1, [pc, #116]	; (8002e20 <HTTPonNotFound+0xd0>)
 8002daa:	f000 fcd3 	bl	8003754 <memcpy>
		if(FS_exists(&FS, s_tmp))
 8002dae:	a907      	add	r1, sp, #28
 8002db0:	481a      	ldr	r0, [pc, #104]	; (8002e1c <HTTPonNotFound+0xcc>)
 8002db2:	f7ff fb1b 	bl	80023ec <FS_exists>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d119      	bne.n	8002dee <HTTPonNotFound+0x9e>
	strcpy(s_notfound, "Not Found: ");
 8002dba:	4c1a      	ldr	r4, [pc, #104]	; (8002e24 <HTTPonNotFound+0xd4>)
 8002dbc:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HTTPonNotFound+0xd8>)
 8002dbe:	0022      	movs	r2, r4
 8002dc0:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002dc2:	c283      	stmia	r2!, {r0, r1, r7}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 8002dc4:	2240      	movs	r2, #64	; 0x40
 8002dc6:	0029      	movs	r1, r5
 8002dc8:	0020      	movs	r0, r4
 8002dca:	f000 fcf8 	bl	80037be <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 8002dce:	0020      	movs	r0, r4
 8002dd0:	f7fd f9a4 	bl	800011c <strlen>
 8002dd4:	1820      	adds	r0, r4, r0
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	4914      	ldr	r1, [pc, #80]	; (8002e2c <HTTPonNotFound+0xdc>)
 8002dda:	f000 fcbb 	bl	8003754 <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 8002dde:	21ca      	movs	r1, #202	; 0xca
 8002de0:	0022      	movs	r2, r4
 8002de2:	0049      	lsls	r1, r1, #1
 8002de4:	0030      	movs	r0, r6
 8002de6:	f7ff ff0f 	bl	8002c08 <HTTPSendStr>
}
 8002dea:	b01f      	add	sp, #124	; 0x7c
 8002dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FSfile_typedef file = FS_open(&FS, s_tmp);
 8002dee:	aa07      	add	r2, sp, #28
 8002df0:	490a      	ldr	r1, [pc, #40]	; (8002e1c <HTTPonNotFound+0xcc>)
 8002df2:	a804      	add	r0, sp, #16
 8002df4:	f7ff face 	bl	8002394 <FS_open>
			if(file.path)
 8002df8:	9b04      	ldr	r3, [sp, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0dd      	beq.n	8002dba <HTTPonNotFound+0x6a>
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 8002dfe:	aa07      	add	r2, sp, #28
 8002e00:	4906      	ldr	r1, [pc, #24]	; (8002e1c <HTTPonNotFound+0xcc>)
 8002e02:	a81b      	add	r0, sp, #108	; 0x6c
 8002e04:	f7ff fac6 	bl	8002394 <FS_open>
 8002e08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002e0a:	9303      	str	r3, [sp, #12]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002e10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002e12:	21c8      	movs	r1, #200	; 0xc8
 8002e14:	0030      	movs	r0, r6
 8002e16:	f7ff fe23 	bl	8002a60 <HTTPSendFile>
 8002e1a:	e7e6      	b.n	8002dea <HTTPonNotFound+0x9a>
 8002e1c:	200007a0 	.word	0x200007a0
 8002e20:	08003a9c 	.word	0x08003a9c
 8002e24:	200006a4 	.word	0x200006a4
 8002e28:	08003bac 	.word	0x08003bac
 8002e2c:	080039c8 	.word	0x080039c8

08002e30 <HTTPHandle>:
{
 8002e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e32:	b083      	sub	sp, #12
 8002e34:	0007      	movs	r7, r0
	uint8_t i = pch395->SOCK_responding;
 8002e36:	7886      	ldrb	r6, [r0, #2]
	if(i)
 8002e38:	2e00      	cmp	r6, #0
 8002e3a:	d02c      	beq.n	8002e96 <HTTPHandle+0x66>
		HTTPRequestParseState *pS= parseStates +i  - 1;
 8002e3c:	248c      	movs	r4, #140	; 0x8c
 8002e3e:	4374      	muls	r4, r6
 8002e40:	3c8c      	subs	r4, #140	; 0x8c
 8002e42:	4b56      	ldr	r3, [pc, #344]	; (8002f9c <HTTPHandle+0x16c>)
 8002e44:	18e4      	adds	r4, r4, r3
		if((pch395->TX_available & (1 << i)) && pS->ready) // socket recv buffer non-empty, bit_i is 1
 8002e46:	78c3      	ldrb	r3, [r0, #3]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	4133      	asrs	r3, r6
 8002e4c:	07db      	lsls	r3, r3, #31
 8002e4e:	d522      	bpl.n	8002e96 <HTTPHandle+0x66>
 8002e50:	2388      	movs	r3, #136	; 0x88
 8002e52:	5ce3      	ldrb	r3, [r4, r3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01e      	beq.n	8002e96 <HTTPHandle+0x66>
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8002e58:	2500      	movs	r5, #0
 8002e5a:	2d06      	cmp	r5, #6
 8002e5c:	d813      	bhi.n	8002e86 <HTTPHandle+0x56>
					if(strncmp(pS->URI, HTTPResponders[j].uri, MAX_LEN_URI) == 0) // matches
 8002e5e:	1d60      	adds	r0, r4, #5
 8002e60:	9501      	str	r5, [sp, #4]
 8002e62:	00eb      	lsls	r3, r5, #3
 8002e64:	4a4e      	ldr	r2, [pc, #312]	; (8002fa0 <HTTPHandle+0x170>)
 8002e66:	5899      	ldr	r1, [r3, r2]
 8002e68:	2240      	movs	r2, #64	; 0x40
 8002e6a:	f000 fcbe 	bl	80037ea <strncmp>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	d002      	beq.n	8002e78 <HTTPHandle+0x48>
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8002e72:	3501      	adds	r5, #1
 8002e74:	b2ed      	uxtb	r5, r5
 8002e76:	e7f0      	b.n	8002e5a <HTTPHandle+0x2a>
						(HTTPResponders[j].func)(pS); // call HTTPResponder service function
 8002e78:	9b01      	ldr	r3, [sp, #4]
 8002e7a:	00da      	lsls	r2, r3, #3
 8002e7c:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <HTTPHandle+0x170>)
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	0020      	movs	r0, r4
 8002e84:	4798      	blx	r3
				if(j == NUM_HTTP_RESPONDERS) // Resource not found
 8002e86:	2d07      	cmp	r5, #7
 8002e88:	d007      	beq.n	8002e9a <HTTPHandle+0x6a>
				if(pS->response_stage == RESPONSE_PREPARED) // start the process of data sending
 8002e8a:	2378      	movs	r3, #120	; 0x78
 8002e8c:	5ce3      	ldrb	r3, [r4, r3]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d007      	beq.n	8002ea2 <HTTPHandle+0x72>
				else if(pS->response_stage == RESPONSE_CONTENT_REMAIN) // continue the sending process
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d04c      	beq.n	8002f30 <HTTPHandle+0x100>
}
 8002e96:	b003      	add	sp, #12
 8002e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					HTTPonNotFound(pS);
 8002e9a:	0020      	movs	r0, r4
 8002e9c:	f7ff ff58 	bl	8002d50 <HTTPonNotFound>
 8002ea0:	e7f3      	b.n	8002e8a <HTTPHandle+0x5a>
					uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 8002ea2:	3379      	adds	r3, #121	; 0x79
 8002ea4:	5ae1      	ldrh	r1, [r4, r3]
 8002ea6:	23af      	movs	r3, #175	; 0xaf
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	1a5b      	subs	r3, r3, r1
 8002eac:	b29b      	uxth	r3, r3
					uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	5aa2      	ldrh	r2, [r4, r2]
 8002eb2:	1c15      	adds	r5, r2, #0
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d900      	bls.n	8002eba <HTTPHandle+0x8a>
 8002eb8:	1c1d      	adds	r5, r3, #0
 8002eba:	b2ad      	uxth	r5, r5
					CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8002ebc:	1949      	adds	r1, r1, r5
 8002ebe:	b289      	uxth	r1, r1
 8002ec0:	0030      	movs	r0, r6
 8002ec2:	f7ff f8e1 	bl	8002088 <CH395StartSendingData>
					CH395ContinueSendingData(pS->response_header, pS->len_response_header);
 8002ec6:	237a      	movs	r3, #122	; 0x7a
 8002ec8:	5ae1      	ldrh	r1, [r4, r3]
 8002eca:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002ecc:	f7ff f8ef 	bl	80020ae <CH395ContinueSendingData>
					CH395ContinueSendingData(pS->response_content, len_content_this_time);
 8002ed0:	2684      	movs	r6, #132	; 0x84
 8002ed2:	0029      	movs	r1, r5
 8002ed4:	59a0      	ldr	r0, [r4, r6]
 8002ed6:	f7ff f8ea 	bl	80020ae <CH395ContinueSendingData>
					CH395Complete();
 8002eda:	f7ff f8f7 	bl	80020cc <CH395Complete>
					pS->len_response_content_remain -= len_content_this_time;
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	5aa3      	ldrh	r3, [r4, r2]
 8002ee2:	1b5b      	subs	r3, r3, r5
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	52a3      	strh	r3, [r4, r2]
					pS->response_content += len_content_this_time;
 8002ee8:	59a2      	ldr	r2, [r4, r6]
 8002eea:	4694      	mov	ip, r2
 8002eec:	4465      	add	r5, ip
 8002eee:	51a5      	str	r5, [r4, r6]
					if(pS->len_response_content_remain == 0) // all content completely sent this time
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HTTPHandle+0xcc>
						pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8002ef4:	2378      	movs	r3, #120	; 0x78
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	54e2      	strb	r2, [r4, r3]
 8002efa:	e7cc      	b.n	8002e96 <HTTPHandle+0x66>
						resetHTTPParseState(pS);
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7ff fbb9 	bl	8002674 <resetHTTPParseState>
						for(j=1; j <= NUM_SOCKETS; ++j)
 8002f02:	2301      	movs	r3, #1
 8002f04:	e001      	b.n	8002f0a <HTTPHandle+0xda>
 8002f06:	3301      	adds	r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d8c3      	bhi.n	8002e96 <HTTPHandle+0x66>
							if(parseStates[j-1].ready && (pch395->socket_connected & (1 << j)))
 8002f0e:	1e59      	subs	r1, r3, #1
 8002f10:	228c      	movs	r2, #140	; 0x8c
 8002f12:	4351      	muls	r1, r2
 8002f14:	4a21      	ldr	r2, [pc, #132]	; (8002f9c <HTTPHandle+0x16c>)
 8002f16:	1852      	adds	r2, r2, r1
 8002f18:	3288      	adds	r2, #136	; 0x88
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	d0f2      	beq.n	8002f06 <HTTPHandle+0xd6>
 8002f20:	783a      	ldrb	r2, [r7, #0]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	411a      	asrs	r2, r3
 8002f26:	07d2      	lsls	r2, r2, #31
 8002f28:	d5ed      	bpl.n	8002f06 <HTTPHandle+0xd6>
								pch395->SOCK_responding = j;
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	70bb      	strb	r3, [r7, #2]
								break;
 8002f2e:	e7b2      	b.n	8002e96 <HTTPHandle+0x66>
					uint16_t len = pS->len_response_content_remain;
 8002f30:	337e      	adds	r3, #126	; 0x7e
 8002f32:	5ae5      	ldrh	r5, [r4, r3]
					CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 8002f34:	3304      	adds	r3, #4
 8002f36:	58e1      	ldr	r1, [r4, r3]
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <HTTPHandle+0x174>)
 8002f3a:	429d      	cmp	r5, r3
 8002f3c:	d901      	bls.n	8002f42 <HTTPHandle+0x112>
 8002f3e:	25af      	movs	r5, #175	; 0xaf
 8002f40:	00ed      	lsls	r5, r5, #3
 8002f42:	002a      	movs	r2, r5
 8002f44:	0030      	movs	r0, r6
 8002f46:	f7ff f863 	bl	8002010 <CH395SendData>
					pS->len_response_content_remain -= len;
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	5aa3      	ldrh	r3, [r4, r2]
 8002f4e:	1b5b      	subs	r3, r3, r5
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	52a3      	strh	r3, [r4, r2]
					pS->response_content += len; // move the cursor
 8002f54:	3204      	adds	r2, #4
 8002f56:	58a1      	ldr	r1, [r4, r2]
 8002f58:	468c      	mov	ip, r1
 8002f5a:	4465      	add	r5, ip
 8002f5c:	50a5      	str	r5, [r4, r2]
					if(pS->len_response_content_remain == 0) // finished
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d000      	beq.n	8002f64 <HTTPHandle+0x134>
 8002f62:	e798      	b.n	8002e96 <HTTPHandle+0x66>
						resetHTTPParseState(pS);
 8002f64:	0020      	movs	r0, r4
 8002f66:	f7ff fb85 	bl	8002674 <resetHTTPParseState>
						for(j=1; j <= NUM_SOCKETS; ++j)
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e001      	b.n	8002f72 <HTTPHandle+0x142>
 8002f6e:	3301      	adds	r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d900      	bls.n	8002f78 <HTTPHandle+0x148>
 8002f76:	e78e      	b.n	8002e96 <HTTPHandle+0x66>
							if(parseStates[j-1].ready && (pch395->socket_connected & (1 << j)))
 8002f78:	1e59      	subs	r1, r3, #1
 8002f7a:	228c      	movs	r2, #140	; 0x8c
 8002f7c:	4351      	muls	r1, r2
 8002f7e:	4a07      	ldr	r2, [pc, #28]	; (8002f9c <HTTPHandle+0x16c>)
 8002f80:	1852      	adds	r2, r2, r1
 8002f82:	3288      	adds	r2, #136	; 0x88
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	d0f1      	beq.n	8002f6e <HTTPHandle+0x13e>
 8002f8a:	783a      	ldrb	r2, [r7, #0]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	411a      	asrs	r2, r3
 8002f90:	07d2      	lsls	r2, r2, #31
 8002f92:	d5ec      	bpl.n	8002f6e <HTTPHandle+0x13e>
								pch395->SOCK_responding = j;
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	70bb      	strb	r3, [r7, #2]
								break;
 8002f98:	e77d      	b.n	8002e96 <HTTPHandle+0x66>
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	20000500 	.word	0x20000500
 8002fa0:	20000414 	.word	0x20000414
 8002fa4:	00000577 	.word	0x00000577

08002fa8 <strcpy_f>:

// Fast strcpy
// Return: pointer to the end of dest + src
char* strcpy_f(char* dest, const char* src)
{
	while(*src)
 8002fa8:	e002      	b.n	8002fb0 <strcpy_f+0x8>
	{
		*dest = *src;
 8002faa:	7003      	strb	r3, [r0, #0]
		src++;
 8002fac:	3101      	adds	r1, #1
		dest++;
 8002fae:	3001      	adds	r0, #1
	while(*src)
 8002fb0:	780b      	ldrb	r3, [r1, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1f9      	bne.n	8002faa <strcpy_f+0x2>
	}
	*dest = 0;
 8002fb6:	7003      	strb	r3, [r0, #0]
	return dest;
}
 8002fb8:	4770      	bx	lr

08002fba <strncpy_f>:

char* strncpy_f(char* dest, const char* src, uint16_t len)
{
	while(*src && len)
 8002fba:	e004      	b.n	8002fc6 <strncpy_f+0xc>
	{
		*dest = *src;
 8002fbc:	7003      	strb	r3, [r0, #0]
		src++;
 8002fbe:	3101      	adds	r1, #1
		dest++;
 8002fc0:	3001      	adds	r0, #1
		len--;
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	b292      	uxth	r2, r2
	while(*src && len)
 8002fc6:	780b      	ldrb	r3, [r1, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <strncpy_f+0x16>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d1f5      	bne.n	8002fbc <strncpy_f+0x2>
	}
	*dest = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	7003      	strb	r3, [r0, #0]
	return dest;
}
 8002fd4:	4770      	bx	lr
	...

08002fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fda:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	2214      	movs	r2, #20
 8002fde:	2100      	movs	r1, #0
 8002fe0:	a803      	add	r0, sp, #12
 8002fe2:	f000 fbc0 	bl	8003766 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <MX_GPIO_Init+0xbc>)
 8002fe8:	6959      	ldr	r1, [r3, #20]
 8002fea:	2080      	movs	r0, #128	; 0x80
 8002fec:	03c0      	lsls	r0, r0, #15
 8002fee:	4301      	orrs	r1, r0
 8002ff0:	6159      	str	r1, [r3, #20]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	4002      	ands	r2, r0
 8002ff6:	9200      	str	r2, [sp, #0]
 8002ff8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	6959      	ldr	r1, [r3, #20]
 8002ffc:	2080      	movs	r0, #128	; 0x80
 8002ffe:	0280      	lsls	r0, r0, #10
 8003000:	4301      	orrs	r1, r0
 8003002:	6159      	str	r1, [r3, #20]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	4002      	ands	r2, r0
 8003008:	9201      	str	r2, [sp, #4]
 800300a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	02c9      	lsls	r1, r1, #11
 8003012:	430a      	orrs	r2, r1
 8003014:	615a      	str	r2, [r3, #20]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	400b      	ands	r3, r1
 800301a:	9302      	str	r3, [sp, #8]
 800301c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	2103      	movs	r1, #3
 8003022:	481d      	ldr	r0, [pc, #116]	; (8003098 <MX_GPIO_Init+0xc0>)
 8003024:	f7fd fbcb 	bl	80007be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8003028:	4d1c      	ldr	r5, [pc, #112]	; (800309c <MX_GPIO_Init+0xc4>)
 800302a:	2200      	movs	r2, #0
 800302c:	0029      	movs	r1, r5
 800302e:	2090      	movs	r0, #144	; 0x90
 8003030:	05c0      	lsls	r0, r0, #23
 8003032:	f7fd fbc4 	bl	80007be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCS_GPIO_Port, SCS_Pin, GPIO_PIN_SET);
 8003036:	2201      	movs	r2, #1
 8003038:	2110      	movs	r1, #16
 800303a:	2090      	movs	r0, #144	; 0x90
 800303c:	05c0      	lsls	r0, r0, #23
 800303e:	f7fd fbbe 	bl	80007be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003042:	2303      	movs	r3, #3
 8003044:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2401      	movs	r4, #1
 8003048:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800304a:	2602      	movs	r6, #2
 800304c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2700      	movs	r7, #0
 8003050:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003052:	a903      	add	r1, sp, #12
 8003054:	4810      	ldr	r0, [pc, #64]	; (8003098 <MX_GPIO_Init+0xc0>)
 8003056:	f7fd fae5 	bl	8000624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 800305a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800305e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003060:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	a903      	add	r1, sp, #12
 8003064:	2090      	movs	r0, #144	; 0x90
 8003066:	05c0      	lsls	r0, r0, #23
 8003068:	f7fd fadc 	bl	8000624 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCS_Pin */
  GPIO_InitStruct.Pin = SCS_Pin;
 800306c:	2310      	movs	r3, #16
 800306e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003070:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003072:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003074:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(SCS_GPIO_Port, &GPIO_InitStruct);
 8003076:	a903      	add	r1, sp, #12
 8003078:	2090      	movs	r0, #144	; 0x90
 800307a:	05c0      	lsls	r0, r0, #23
 800307c:	f7fd fad2 	bl	8000624 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8003080:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <MX_GPIO_Init+0xc8>)
 8003084:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003086:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 8003088:	a903      	add	r1, sp, #12
 800308a:	4806      	ldr	r0, [pc, #24]	; (80030a4 <MX_GPIO_Init+0xcc>)
 800308c:	f7fd faca 	bl	8000624 <HAL_GPIO_Init>

}
 8003090:	b009      	add	sp, #36	; 0x24
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	48001400 	.word	0x48001400
 800309c:	00000603 	.word	0x00000603
 80030a0:	10210000 	.word	0x10210000
 80030a4:	48000400 	.word	0x48000400

080030a8 <MX_SPI1_Init>:
{
 80030a8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80030aa:	480f      	ldr	r0, [pc, #60]	; (80030e8 <MX_SPI1_Init+0x40>)
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <MX_SPI1_Init+0x44>)
 80030ae:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030b0:	2382      	movs	r3, #130	; 0x82
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030b6:	2300      	movs	r3, #0
 80030b8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030ba:	22e0      	movs	r2, #224	; 0xe0
 80030bc:	00d2      	lsls	r2, r2, #3
 80030be:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80030c0:	2202      	movs	r2, #2
 80030c2:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80030c4:	3a01      	subs	r2, #1
 80030c6:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	0092      	lsls	r2, r2, #2
 80030cc:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030ce:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030d0:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030d2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80030d6:	3afa      	subs	r2, #250	; 0xfa
 80030d8:	3aff      	subs	r2, #255	; 0xff
 80030da:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80030dc:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80030de:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030e0:	f7fe f856 	bl	8001190 <HAL_SPI_Init>
}
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	200008b8 	.word	0x200008b8
 80030ec:	40013000 	.word	0x40013000

080030f0 <MX_USART1_UART_Init>:
{
 80030f0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80030f2:	4809      	ldr	r0, [pc, #36]	; (8003118 <MX_USART1_UART_Init+0x28>)
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_USART1_UART_Init+0x2c>)
 80030f6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80030f8:	2396      	movs	r3, #150	; 0x96
 80030fa:	019b      	lsls	r3, r3, #6
 80030fc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030fe:	2300      	movs	r3, #0
 8003100:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003102:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003104:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003106:	220c      	movs	r2, #12
 8003108:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800310a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800310c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800310e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003110:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003112:	f7fe fd0b 	bl	8001b2c <HAL_UART_Init>
}
 8003116:	bd10      	pop	{r4, pc}
 8003118:	20000848 	.word	0x20000848
 800311c:	40013800 	.word	0x40013800

08003120 <MX_NVIC_Init>:
{
 8003120:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	2005      	movs	r0, #5
 8003128:	f7fd f8bc 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800312c:	2005      	movs	r0, #5
 800312e:	f7fd f8e9 	bl	8000304 <HAL_NVIC_EnableIRQ>
}
 8003132:	bd10      	pop	{r4, pc}

08003134 <SystemClock_Config>:
{
 8003134:	b510      	push	{r4, lr}
 8003136:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003138:	222c      	movs	r2, #44	; 0x2c
 800313a:	2100      	movs	r1, #0
 800313c:	a809      	add	r0, sp, #36	; 0x24
 800313e:	f000 fb12 	bl	8003766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003142:	2210      	movs	r2, #16
 8003144:	2100      	movs	r1, #0
 8003146:	a804      	add	r0, sp, #16
 8003148:	f000 fb0d 	bl	8003766 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800314c:	2210      	movs	r2, #16
 800314e:	2100      	movs	r1, #0
 8003150:	4668      	mov	r0, sp
 8003152:	f000 fb08 	bl	8003766 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003156:	2302      	movs	r3, #2
 8003158:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800315a:	2401      	movs	r4, #1
 800315c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800315e:	330e      	adds	r3, #14
 8003160:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003162:	a808      	add	r0, sp, #32
 8003164:	f7fd fb40 	bl	80007e8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003168:	2307      	movs	r3, #7
 800316a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800316c:	2300      	movs	r3, #0
 800316e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003170:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003172:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003174:	2100      	movs	r1, #0
 8003176:	a804      	add	r0, sp, #16
 8003178:	f7fd fd98 	bl	8000cac <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800317c:	9400      	str	r4, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800317e:	2303      	movs	r3, #3
 8003180:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003182:	4668      	mov	r0, sp
 8003184:	f7fd fe52 	bl	8000e2c <HAL_RCCEx_PeriphCLKConfig>
}
 8003188:	b014      	add	sp, #80	; 0x50
 800318a:	bd10      	pop	{r4, pc}

0800318c <main>:
{
 800318c:	b570      	push	{r4, r5, r6, lr}
	Selector[0].PIN_BCD0 = BCD1_0;
 800318e:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <main+0x11c>)
 8003190:	4946      	ldr	r1, [pc, #280]	; (80032ac <main+0x120>)
 8003192:	001a      	movs	r2, r3
 8003194:	c911      	ldmia	r1!, {r0, r4}
 8003196:	c211      	stmia	r2!, {r0, r4}
	Selector[0].PIN_BCD1 = BCD1_1;
 8003198:	4845      	ldr	r0, [pc, #276]	; (80032b0 <main+0x124>)
 800319a:	c812      	ldmia	r0!, {r1, r4}
 800319c:	c212      	stmia	r2!, {r1, r4}
 800319e:	0011      	movs	r1, r2
	Selector[0].PIN_BCD2 = BCD1_2;
 80031a0:	4a44      	ldr	r2, [pc, #272]	; (80032b4 <main+0x128>)
 80031a2:	ca11      	ldmia	r2!, {r0, r4}
 80031a4:	c111      	stmia	r1!, {r0, r4}
	Selector[0].sel = 0;
 80031a6:	2200      	movs	r2, #0
 80031a8:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCD0 = BCD2_0;
 80031aa:	4943      	ldr	r1, [pc, #268]	; (80032b8 <main+0x12c>)
 80031ac:	001a      	movs	r2, r3
 80031ae:	321c      	adds	r2, #28
 80031b0:	c911      	ldmia	r1!, {r0, r4}
 80031b2:	c211      	stmia	r2!, {r0, r4}
	Selector[1].PIN_BCD1 = BCD2_1;
 80031b4:	4941      	ldr	r1, [pc, #260]	; (80032bc <main+0x130>)
 80031b6:	001a      	movs	r2, r3
 80031b8:	3224      	adds	r2, #36	; 0x24
 80031ba:	c911      	ldmia	r1!, {r0, r4}
 80031bc:	c211      	stmia	r2!, {r0, r4}
	Selector[1].PIN_BCD2 = BCD2_2;
 80031be:	4a40      	ldr	r2, [pc, #256]	; (80032c0 <main+0x134>)
 80031c0:	332c      	adds	r3, #44	; 0x2c
 80031c2:	ca03      	ldmia	r2!, {r0, r1}
 80031c4:	c303      	stmia	r3!, {r0, r1}
  HAL_Init();
 80031c6:	f7fd f84f 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 80031ca:	f7ff ffb3 	bl	8003134 <SystemClock_Config>
  MX_GPIO_Init();
 80031ce:	f7ff ff03 	bl	8002fd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80031d2:	f7ff ff69 	bl	80030a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80031d6:	f7ff ff8b 	bl	80030f0 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 80031da:	f7ff ffa1 	bl	8003120 <MX_NVIC_Init>
  EEPROM.base_addr = EEPROM_BASE_ADDR;
 80031de:	4839      	ldr	r0, [pc, #228]	; (80032c4 <main+0x138>)
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <main+0x13c>)
 80031e2:	6003      	str	r3, [r0, #0]
  EEPROM.size = 400;
 80031e4:	23c8      	movs	r3, #200	; 0xc8
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	8083      	strh	r3, [r0, #4]
  EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 80031ea:	4c38      	ldr	r4, [pc, #224]	; (80032cc <main+0x140>)
 80031ec:	2261      	movs	r2, #97	; 0x61
 80031ee:	0021      	movs	r1, r4
 80031f0:	f7ff f947 	bl	8002482 <EEPROM_ReadBytes>
  if(SavedData.EEPROM_valid_ID != EEPROM_VALID_BYTE)
 80031f4:	7823      	ldrb	r3, [r4, #0]
 80031f6:	2baa      	cmp	r3, #170	; 0xaa
 80031f8:	d154      	bne.n	80032a4 <main+0x118>
	Delay_ms(500); // wait for CH395 being ready from power on`	q1was
 80031fa:	4835      	ldr	r0, [pc, #212]	; (80032d0 <main+0x144>)
 80031fc:	f7ff f8b4 	bl	8002368 <Delay_us>
	CH395CMDReset();
 8003200:	f7fe fe30 	bl	8001e64 <CH395CMDReset>
	Delay_ms(500); // wait for CH395 being ready from power on`	q1was
 8003204:	4832      	ldr	r0, [pc, #200]	; (80032d0 <main+0x144>)
 8003206:	f7ff f8af 	bl	8002368 <Delay_us>
	CH395WriteGPIOAddr(GPIO_DIR_REG, 0);
 800320a:	2100      	movs	r1, #0
 800320c:	2080      	movs	r0, #128	; 0x80
 800320e:	f7ff f83d 	bl	800228c <CH395WriteGPIOAddr>
	CH395WriteGPIOAddr(GPIO_PU_REG, 0);
 8003212:	2100      	movs	r1, #0
 8003214:	2084      	movs	r0, #132	; 0x84
 8003216:	f7ff f839 	bl	800228c <CH395WriteGPIOAddr>
	CH395WriteGPIOAddr(GPIO_PD_REG, 0xff);
 800321a:	21ff      	movs	r1, #255	; 0xff
 800321c:	2085      	movs	r0, #133	; 0x85
 800321e:	f7ff f835 	bl	800228c <CH395WriteGPIOAddr>
  flag_CH395_ready = CH395TCPServerStart(*(uint32_t*)IP, port);
 8003222:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <main+0x148>)
 8003224:	8819      	ldrh	r1, [r3, #0]
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <main+0x14c>)
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	f7fe fdd1 	bl	8001dd0 <CH395TCPServerStart>
 800322e:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <main+0x150>)
 8003230:	7018      	strb	r0, [r3, #0]
  flag_PHY_change = FALSE;
 8003232:	2300      	movs	r3, #0
 8003234:	4a2a      	ldr	r2, [pc, #168]	; (80032e0 <main+0x154>)
 8003236:	7013      	strb	r3, [r2, #0]
  flag_IP_conflict = FALSE;
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <main+0x158>)
 800323a:	7013      	strb	r3, [r2, #0]
	  if(flag_PHY_change || flag_IP_conflict) goto RESET_CH395;
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <main+0x154>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1dd      	bne.n	8003200 <main+0x74>
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <main+0x158>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1d9      	bne.n	8003200 <main+0x74>
	  if(flag_CH395_ready && ch395.RX_received)
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <main+0x150>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f3      	beq.n	800323c <main+0xb0>
 8003254:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <main+0x15c>)
 8003256:	785b      	ldrb	r3, [r3, #1]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ef      	beq.n	800323c <main+0xb0>
		  HTTPHandle(&ch395);
 800325c:	4822      	ldr	r0, [pc, #136]	; (80032e8 <main+0x15c>)
 800325e:	f7ff fde7 	bl	8002e30 <HTTPHandle>
 8003262:	e7eb      	b.n	800323c <main+0xb0>
		  strcpy(SavedData.ant_labels[i], "Ant");
 8003264:	0125      	lsls	r5, r4, #4
 8003266:	4b19      	ldr	r3, [pc, #100]	; (80032cc <main+0x140>)
 8003268:	18ed      	adds	r5, r5, r3
 800326a:	1c68      	adds	r0, r5, #1
 800326c:	2204      	movs	r2, #4
 800326e:	491f      	ldr	r1, [pc, #124]	; (80032ec <main+0x160>)
 8003270:	f000 fa70 	bl	8003754 <memcpy>
		  SavedData.ant_labels[i][4] = '1' + i;
 8003274:	0023      	movs	r3, r4
 8003276:	3331      	adds	r3, #49	; 0x31
 8003278:	716b      	strb	r3, [r5, #5]
		  SavedData.ant_labels[i][5] = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	71ab      	strb	r3, [r5, #6]
	  for(i=0; i<NUM_ANTENNA; ++i)
 800327e:	3401      	adds	r4, #1
 8003280:	b2e4      	uxtb	r4, r4
 8003282:	2c05      	cmp	r4, #5
 8003284:	d9ee      	bls.n	8003264 <main+0xd8>
	  SavedData.EEPROM_valid_ID = EEPROM_VALID_BYTE;
 8003286:	4c11      	ldr	r4, [pc, #68]	; (80032cc <main+0x140>)
 8003288:	23aa      	movs	r3, #170	; 0xaa
 800328a:	7023      	strb	r3, [r4, #0]
	  EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 800328c:	4d0d      	ldr	r5, [pc, #52]	; (80032c4 <main+0x138>)
 800328e:	2261      	movs	r2, #97	; 0x61
 8003290:	0021      	movs	r1, r4
 8003292:	0028      	movs	r0, r5
 8003294:	f7ff f8c4 	bl	8002420 <EEPROM_WriteBytes>
	  EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8003298:	2261      	movs	r2, #97	; 0x61
 800329a:	0021      	movs	r1, r4
 800329c:	0028      	movs	r0, r5
 800329e:	f7ff f8f0 	bl	8002482 <EEPROM_ReadBytes>
 80032a2:	e7aa      	b.n	80031fa <main+0x6e>
	  for(i=0; i<NUM_ANTENNA; ++i)
 80032a4:	2400      	movs	r4, #0
 80032a6:	e7ec      	b.n	8003282 <main+0xf6>
 80032a8:	20000810 	.word	0x20000810
 80032ac:	08003bcc 	.word	0x08003bcc
 80032b0:	08003bd4 	.word	0x08003bd4
 80032b4:	08003bdc 	.word	0x08003bdc
 80032b8:	08003be4 	.word	0x08003be4
 80032bc:	08003bec 	.word	0x08003bec
 80032c0:	08003bf4 	.word	0x08003bf4
 80032c4:	2000040c 	.word	0x2000040c
 80032c8:	08005000 	.word	0x08005000
 80032cc:	200007ac 	.word	0x200007ac
 80032d0:	0007a120 	.word	0x0007a120
 80032d4:	20000450 	.word	0x20000450
 80032d8:	2000044c 	.word	0x2000044c
 80032dc:	200006f4 	.word	0x200006f4
 80032e0:	2000080d 	.word	0x2000080d
 80032e4:	200007a8 	.word	0x200007a8
 80032e8:	20000008 	.word	0x20000008
 80032ec:	08003bfc 	.word	0x08003bfc

080032f0 <interrupt_CH395>:
//{
//	onReceived_serial485(p485);
//}

void interrupt_CH395()
{
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	46ce      	mov	lr, r9
 80032f4:	4647      	mov	r7, r8
 80032f6:	b580      	push	{r7, lr}
	uint8_t glob_int_status, sock_int_status, i;
	BEGIN_INT_CH395:
	// read global int status
	glob_int_status = CH395CMDGetGlobIntStatus();
 80032f8:	f7fe fde6 	bl	8001ec8 <CH395CMDGetGlobIntStatus>
//	}
//	if(glob_int_status & GINT_STAT_IP_CONFLI)
//	{
//		flag_IP_conflict = TRUE;
//	}
	if(glob_int_status & GINT_STAT_PHY_CHANGE)
 80032fc:	0743      	lsls	r3, r0, #29
 80032fe:	d502      	bpl.n	8003306 <interrupt_CH395+0x16>
	{
		flag_PHY_change = TRUE;
 8003300:	4b3b      	ldr	r3, [pc, #236]	; (80033f0 <interrupt_CH395+0x100>)
 8003302:	2201      	movs	r2, #1
 8003304:	701a      	strb	r2, [r3, #0]
	}
	glob_int_status >>= 4; // get socket interrupt status
 8003306:	0900      	lsrs	r0, r0, #4
 8003308:	b2c4      	uxtb	r4, r0
	if(!glob_int_status) goto END_INT_CH395;
 800330a:	2c00      	cmp	r4, #0
 800330c:	d06b      	beq.n	80033e6 <interrupt_CH395+0xf6>
	// handle SOCKET interrupts
	for(i=1; i<=NUM_SOCKETS; ++i)
 800330e:	2501      	movs	r5, #1
 8003310:	e037      	b.n	8003382 <interrupt_CH395+0x92>
//			if(sock_int_status & SINT_STAT_SEND_OK)
//			{
//			}
			if(sock_int_status & SINT_STAT_RECV) // data received on SOCK i
			{
				HTTPRequestParseState* pS = parseStates + i - 1;
 8003312:	278c      	movs	r7, #140	; 0x8c
 8003314:	436f      	muls	r7, r5
 8003316:	3f8c      	subs	r7, #140	; 0x8c
 8003318:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <interrupt_CH395+0x104>)
 800331a:	18ff      	adds	r7, r7, r3
				uint16_t len = CH395GetRecvLength(i);
 800331c:	0028      	movs	r0, r5
 800331e:	f7fe fedf 	bl	80020e0 <CH395GetRecvLength>
 8003322:	4680      	mov	r8, r0
				CH395GetRecvData(i, (len < CH395_SIZE_BUFFER)?(len):(len = CH395_SIZE_BUFFER-1), ch395.buffer);
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <interrupt_CH395+0x108>)
 8003326:	4298      	cmp	r0, r3
 8003328:	d900      	bls.n	800332c <interrupt_CH395+0x3c>
 800332a:	4698      	mov	r8, r3
 800332c:	4b33      	ldr	r3, [pc, #204]	; (80033fc <interrupt_CH395+0x10c>)
 800332e:	4699      	mov	r9, r3
 8003330:	001a      	movs	r2, r3
 8003332:	4641      	mov	r1, r8
 8003334:	0028      	movs	r0, r5
 8003336:	f7fe ff01 	bl	800213c <CH395GetRecvData>
				ch395.buffer[len] = 0; // terminate the recved text stream
 800333a:	464b      	mov	r3, r9
 800333c:	1f18      	subs	r0, r3, #4
 800333e:	4440      	add	r0, r8
 8003340:	2300      	movs	r3, #0
 8003342:	7103      	strb	r3, [r0, #4]
				resetHTTPParseState(pS);
 8003344:	0038      	movs	r0, r7
 8003346:	f7ff f995 	bl	8002674 <resetHTTPParseState>
				pS->sock_index = i;
 800334a:	2389      	movs	r3, #137	; 0x89
 800334c:	54fd      	strb	r5, [r7, r3]
				if(parse_http(pS, ch395.buffer))
 800334e:	4649      	mov	r1, r9
 8003350:	0038      	movs	r0, r7
 8003352:	f7ff fa2b 	bl	80027ac <parse_http>
 8003356:	2800      	cmp	r0, #0
 8003358:	d00a      	beq.n	8003370 <interrupt_CH395+0x80>
				{
					ch395.RX_received |= (1 << i);
 800335a:	4a29      	ldr	r2, [pc, #164]	; (8003400 <interrupt_CH395+0x110>)
 800335c:	7853      	ldrb	r3, [r2, #1]
 800335e:	2101      	movs	r1, #1
 8003360:	40a9      	lsls	r1, r5
 8003362:	430b      	orrs	r3, r1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	7053      	strb	r3, [r2, #1]
					if(ch395.SOCK_responding < 0) // no socket currently responding to
 8003368:	7893      	ldrb	r3, [r2, #2]
 800336a:	b25b      	sxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	db03      	blt.n	8003378 <interrupt_CH395+0x88>
						ch395.SOCK_responding = i;
				}
				CH395ClearRecvBuf(i);
 8003370:	0028      	movs	r0, r5
 8003372:	f7fe fed1 	bl	8002118 <CH395ClearRecvBuf>
 8003376:	e018      	b.n	80033aa <interrupt_CH395+0xba>
						ch395.SOCK_responding = i;
 8003378:	b26b      	sxtb	r3, r5
 800337a:	7093      	strb	r3, [r2, #2]
 800337c:	e7f8      	b.n	8003370 <interrupt_CH395+0x80>
	for(i=1; i<=NUM_SOCKETS; ++i)
 800337e:	3501      	adds	r5, #1
 8003380:	b2ed      	uxtb	r5, r5
 8003382:	2d03      	cmp	r5, #3
 8003384:	d82f      	bhi.n	80033e6 <interrupt_CH395+0xf6>
		glob_int_status >>= 1;
 8003386:	0864      	lsrs	r4, r4, #1
		if(glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 8003388:	07e3      	lsls	r3, r4, #31
 800338a:	d5f8      	bpl.n	800337e <interrupt_CH395+0x8e>
			sock_int_status = CH395GetSocketInt(i);
 800338c:	0028      	movs	r0, r5
 800338e:	f7fe ff43 	bl	8002218 <CH395GetSocketInt>
 8003392:	0006      	movs	r6, r0
			if(sock_int_status & SINT_STAT_SENBUF_FREE) // Send buffer free
 8003394:	07c3      	lsls	r3, r0, #31
 8003396:	d506      	bpl.n	80033a6 <interrupt_CH395+0xb6>
				ch395.TX_available |= (1 << i);
 8003398:	4919      	ldr	r1, [pc, #100]	; (8003400 <interrupt_CH395+0x110>)
 800339a:	78cb      	ldrb	r3, [r1, #3]
 800339c:	2201      	movs	r2, #1
 800339e:	40aa      	lsls	r2, r5
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	70cb      	strb	r3, [r1, #3]
			if(sock_int_status & SINT_STAT_RECV) // data received on SOCK i
 80033a6:	0773      	lsls	r3, r6, #29
 80033a8:	d4b3      	bmi.n	8003312 <interrupt_CH395+0x22>
			}
			if(sock_int_status & SINT_STAT_CONNECT) // SOCK i connected
 80033aa:	0733      	lsls	r3, r6, #28
 80033ac:	d506      	bpl.n	80033bc <interrupt_CH395+0xcc>
			{
				ch395.socket_connected |= (1 << i);
 80033ae:	4914      	ldr	r1, [pc, #80]	; (8003400 <interrupt_CH395+0x110>)
 80033b0:	780b      	ldrb	r3, [r1, #0]
 80033b2:	2201      	movs	r2, #1
 80033b4:	40aa      	lsls	r2, r5
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	700b      	strb	r3, [r1, #0]
			}
			if(sock_int_status & SINT_STAT_DISCONNECT) // SOCK i disconnected
 80033bc:	06f3      	lsls	r3, r6, #27
 80033be:	d5de      	bpl.n	800337e <interrupt_CH395+0x8e>
			{
				ch395.socket_connected &= ~(1<<i);
 80033c0:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <interrupt_CH395+0x110>)
 80033c2:	7811      	ldrb	r1, [r2, #0]
 80033c4:	2301      	movs	r3, #1
 80033c6:	40ab      	lsls	r3, r5
 80033c8:	43db      	mvns	r3, r3
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	4019      	ands	r1, r3
 80033ce:	7011      	strb	r1, [r2, #0]
				ch395.RX_received &= ~(1<<i);
 80033d0:	7851      	ldrb	r1, [r2, #1]
 80033d2:	400b      	ands	r3, r1
 80033d4:	7053      	strb	r3, [r2, #1]
				if(ch395.SOCK_responding == i) ch395.SOCK_responding = -1; // release the responding socket flag
 80033d6:	7893      	ldrb	r3, [r2, #2]
 80033d8:	b25b      	sxtb	r3, r3
 80033da:	429d      	cmp	r5, r3
 80033dc:	d1cf      	bne.n	800337e <interrupt_CH395+0x8e>
 80033de:	0013      	movs	r3, r2
 80033e0:	22ff      	movs	r2, #255	; 0xff
 80033e2:	709a      	strb	r2, [r3, #2]
 80033e4:	e7cb      	b.n	800337e <interrupt_CH395+0x8e>
		}
	}
	END_INT_CH395:
	return;
//	if(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET) goto BEGIN_INT_CH395;
}
 80033e6:	bc0c      	pop	{r2, r3}
 80033e8:	4690      	mov	r8, r2
 80033ea:	4699      	mov	r9, r3
 80033ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	2000080d 	.word	0x2000080d
 80033f4:	20000500 	.word	0x20000500
 80033f8:	000003ff 	.word	0x000003ff
 80033fc:	2000000c 	.word	0x2000000c
 8003400:	20000008 	.word	0x20000008

08003404 <switch_Antenna>:

void switch_Antenna(uint8_t A, uint8_t B)
{
 8003404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003406:	46ce      	mov	lr, r9
 8003408:	4647      	mov	r7, r8
 800340a:	b580      	push	{r7, lr}
 800340c:	b087      	sub	sp, #28
 800340e:	0004      	movs	r4, r0
	uint8_t i;
	Selector[0].sel = A;
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <switch_Antenna+0x9c>)
 8003412:	7618      	strb	r0, [r3, #24]
	Selector[1].sel = B;
 8003414:	2234      	movs	r2, #52	; 0x34
 8003416:	5499      	strb	r1, [r3, r2]
	if(A==B && A>0) return;
 8003418:	4288      	cmp	r0, r1
 800341a:	d001      	beq.n	8003420 <switch_Antenna+0x1c>
 800341c:	2400      	movs	r4, #0
 800341e:	e038      	b.n	8003492 <switch_Antenna+0x8e>
 8003420:	2800      	cmp	r0, #0
 8003422:	d036      	beq.n	8003492 <switch_Antenna+0x8e>
 8003424:	e037      	b.n	8003496 <switch_Antenna+0x92>
	for(i=0; i<N_SELECTORS; ++i)
	{
		PIN_typedef pin0 = Selector[i].PIN_BCD0;
 8003426:	46e9      	mov	r9, sp
 8003428:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <switch_Antenna+0x9c>)
 800342a:	469c      	mov	ip, r3
 800342c:	00e2      	lsls	r2, r4, #3
 800342e:	1b15      	subs	r5, r2, r4
 8003430:	00ab      	lsls	r3, r5, #2
 8003432:	4463      	add	r3, ip
 8003434:	464d      	mov	r5, r9
 8003436:	cbc0      	ldmia	r3!, {r6, r7}
 8003438:	c5c0      	stmia	r5!, {r6, r7}
		PIN_typedef pin1 = Selector[i].PIN_BCD1;
 800343a:	1b16      	subs	r6, r2, r4
 800343c:	00b3      	lsls	r3, r6, #2
 800343e:	4463      	add	r3, ip
 8003440:	0018      	movs	r0, r3
 8003442:	001e      	movs	r6, r3
 8003444:	3608      	adds	r6, #8
 8003446:	002f      	movs	r7, r5
 8003448:	ce0a      	ldmia	r6!, {r1, r3}
 800344a:	c70a      	stmia	r7!, {r1, r3}
		PIN_typedef pin2 = Selector[i].PIN_BCD2;
 800344c:	ae04      	add	r6, sp, #16
 800344e:	0003      	movs	r3, r0
 8003450:	3310      	adds	r3, #16
 8003452:	0037      	movs	r7, r6
 8003454:	cb03      	ldmia	r3!, {r0, r1}
 8003456:	c703      	stmia	r7!, {r0, r1}
		uint8_t val = Selector[i].sel;
 8003458:	1b12      	subs	r2, r2, r4
 800345a:	0093      	lsls	r3, r2, #2
 800345c:	4463      	add	r3, ip
 800345e:	7e1f      	ldrb	r7, [r3, #24]
		HAL_GPIO_WritePin(pin0.group, pin0.pin, val & 1);
 8003460:	2301      	movs	r3, #1
 8003462:	4698      	mov	r8, r3
 8003464:	001a      	movs	r2, r3
 8003466:	403a      	ands	r2, r7
 8003468:	464b      	mov	r3, r9
 800346a:	8899      	ldrh	r1, [r3, #4]
 800346c:	9800      	ldr	r0, [sp, #0]
 800346e:	f7fd f9a6 	bl	80007be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin1.group, pin1.pin, (val >> 1) & 1);
 8003472:	087a      	lsrs	r2, r7, #1
 8003474:	4643      	mov	r3, r8
 8003476:	401a      	ands	r2, r3
 8003478:	88a9      	ldrh	r1, [r5, #4]
 800347a:	9802      	ldr	r0, [sp, #8]
 800347c:	f7fd f99f 	bl	80007be <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin2.group, pin2.pin, (val >> 2) & 2);
 8003480:	08bf      	lsrs	r7, r7, #2
 8003482:	2202      	movs	r2, #2
 8003484:	403a      	ands	r2, r7
 8003486:	88b1      	ldrh	r1, [r6, #4]
 8003488:	9804      	ldr	r0, [sp, #16]
 800348a:	f7fd f998 	bl	80007be <HAL_GPIO_WritePin>
	for(i=0; i<N_SELECTORS; ++i)
 800348e:	3401      	adds	r4, #1
 8003490:	b2e4      	uxtb	r4, r4
 8003492:	2c01      	cmp	r4, #1
 8003494:	d9c7      	bls.n	8003426 <switch_Antenna+0x22>
	}
}
 8003496:	b007      	add	sp, #28
 8003498:	bc0c      	pop	{r2, r3}
 800349a:	4690      	mov	r8, r2
 800349c:	4699      	mov	r9, r3
 800349e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034a0:	20000810 	.word	0x20000810

080034a4 <get_Antenna>:

uint8_t get_Antenna() //0-3:SEL1 4-7:SEL2
{
 80034a4:	b510      	push	{r4, lr}
	uint8_t d = CH395ReadGPIOAddr(GPIO_IN_REG); // read CH395 GPIO
 80034a6:	2081      	movs	r0, #129	; 0x81
 80034a8:	f7fe fefd 	bl	80022a6 <CH395ReadGPIOAddr>
	uint8_t res = 0;
	res |= (d >> BCDM1_0) & 1;// bit 0: BCDM1_0
 80034ac:	0882      	lsrs	r2, r0, #2
 80034ae:	2301      	movs	r3, #1
 80034b0:	4013      	ands	r3, r2
	res |= ((d >> BCDM1_1) & 1) << 1;// bit 1: BCDM1_1
 80034b2:	0842      	lsrs	r2, r0, #1
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	0052      	lsls	r2, r2, #1
 80034b8:	2102      	movs	r1, #2
 80034ba:	400a      	ands	r2, r1
 80034bc:	4313      	orrs	r3, r2
	res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
 80034be:	0081      	lsls	r1, r0, #2
 80034c0:	2204      	movs	r2, #4
 80034c2:	400a      	ands	r2, r1
 80034c4:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
 80034c6:	0902      	lsrs	r2, r0, #4
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	0112      	lsls	r2, r2, #4
 80034cc:	2110      	movs	r1, #16
 80034ce:	400a      	ands	r2, r1
 80034d0:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
 80034d2:	0982      	lsrs	r2, r0, #6
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	0152      	lsls	r2, r2, #5
 80034d8:	3110      	adds	r1, #16
 80034da:	400a      	ands	r2, r1
 80034dc:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_2) & 1) << 6;// bit 1: BCDM1_1
 80034de:	0940      	lsrs	r0, r0, #5
 80034e0:	b2c0      	uxtb	r0, r0
 80034e2:	0180      	lsls	r0, r0, #6
 80034e4:	2240      	movs	r2, #64	; 0x40
 80034e6:	4010      	ands	r0, r2
 80034e8:	4318      	orrs	r0, r3
	return res;
}
 80034ea:	bd10      	pop	{r4, pc}

080034ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_MspInit+0x2c>)
 80034f0:	6999      	ldr	r1, [r3, #24]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4311      	orrs	r1, r2
 80034f6:	6199      	str	r1, [r3, #24]
 80034f8:	6999      	ldr	r1, [r3, #24]
 80034fa:	400a      	ands	r2, r1
 80034fc:	9200      	str	r2, [sp, #0]
 80034fe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	0549      	lsls	r1, r1, #21
 8003506:	430a      	orrs	r2, r1
 8003508:	61da      	str	r2, [r3, #28]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	400b      	ands	r3, r1
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003512:	b002      	add	sp, #8
 8003514:	4770      	bx	lr
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	40021000 	.word	0x40021000

0800351c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800351c:	b510      	push	{r4, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003522:	2214      	movs	r2, #20
 8003524:	2100      	movs	r1, #0
 8003526:	a803      	add	r0, sp, #12
 8003528:	f000 f91d 	bl	8003766 <memset>
  if(hspi->Instance==SPI1)
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <HAL_SPI_MspInit+0x60>)
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003534:	b008      	add	sp, #32
 8003536:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <HAL_SPI_MspInit+0x64>)
 800353a:	6999      	ldr	r1, [r3, #24]
 800353c:	2080      	movs	r0, #128	; 0x80
 800353e:	0140      	lsls	r0, r0, #5
 8003540:	4301      	orrs	r1, r0
 8003542:	6199      	str	r1, [r3, #24]
 8003544:	699a      	ldr	r2, [r3, #24]
 8003546:	4002      	ands	r2, r0
 8003548:	9201      	str	r2, [sp, #4]
 800354a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	0289      	lsls	r1, r1, #10
 8003552:	430a      	orrs	r2, r1
 8003554:	615a      	str	r2, [r3, #20]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	400b      	ands	r3, r1
 800355a:	9302      	str	r3, [sp, #8]
 800355c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800355e:	23e0      	movs	r3, #224	; 0xe0
 8003560:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	3bde      	subs	r3, #222	; 0xde
 8003564:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003566:	3b01      	subs	r3, #1
 8003568:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800356a:	3302      	adds	r3, #2
 800356c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356e:	2090      	movs	r0, #144	; 0x90
 8003570:	a903      	add	r1, sp, #12
 8003572:	05c0      	lsls	r0, r0, #23
 8003574:	f7fd f856 	bl	8000624 <HAL_GPIO_Init>
}
 8003578:	e7dc      	b.n	8003534 <HAL_SPI_MspInit+0x18>
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	40013000 	.word	0x40013000
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003584:	b510      	push	{r4, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358a:	2214      	movs	r2, #20
 800358c:	2100      	movs	r1, #0
 800358e:	a803      	add	r0, sp, #12
 8003590:	f000 f8e9 	bl	8003766 <memset>
  if(huart->Instance==USART1)
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_UART_MspInit+0x70>)
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800359c:	b008      	add	sp, #32
 800359e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a0:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_UART_MspInit+0x74>)
 80035a2:	6999      	ldr	r1, [r3, #24]
 80035a4:	2080      	movs	r0, #128	; 0x80
 80035a6:	01c0      	lsls	r0, r0, #7
 80035a8:	4301      	orrs	r1, r0
 80035aa:	6199      	str	r1, [r3, #24]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	4002      	ands	r2, r0
 80035b0:	9201      	str	r2, [sp, #4]
 80035b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	2180      	movs	r1, #128	; 0x80
 80035b8:	0289      	lsls	r1, r1, #10
 80035ba:	430a      	orrs	r2, r1
 80035bc:	615a      	str	r2, [r3, #20]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	400b      	ands	r3, r1
 80035c2:	9302      	str	r3, [sp, #8]
 80035c4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80035c6:	230c      	movs	r3, #12
 80035c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	3b0a      	subs	r3, #10
 80035cc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ce:	3301      	adds	r3, #1
 80035d0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80035d2:	3b02      	subs	r3, #2
 80035d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d6:	2090      	movs	r0, #144	; 0x90
 80035d8:	a903      	add	r1, sp, #12
 80035da:	05c0      	lsls	r0, r0, #23
 80035dc:	f7fd f822 	bl	8000624 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2100      	movs	r1, #0
 80035e4:	201b      	movs	r0, #27
 80035e6:	f7fc fe5d 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035ea:	201b      	movs	r0, #27
 80035ec:	f7fc fe8a 	bl	8000304 <HAL_NVIC_EnableIRQ>
}
 80035f0:	e7d4      	b.n	800359c <HAL_UART_MspInit+0x18>
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40021000 	.word	0x40021000

080035fc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035fc:	4770      	bx	lr
	...

08003600 <HardFault_Handler>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003600:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003604:	4b03      	ldr	r3, [pc, #12]	; (8003614 <HardFault_Handler+0x14>)
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <HardFault_Handler+0x18>)
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	e7fd      	b.n	800360e <HardFault_Handler+0xe>
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	e000ed00 	.word	0xe000ed00
 8003618:	05fa0004 	.word	0x05fa0004

0800361c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800361c:	4770      	bx	lr

0800361e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361e:	4770      	bx	lr

08003620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003620:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003622:	f7fc fe31 	bl	8000288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003626:	bd10      	pop	{r4, pc}

08003628 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003628:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 800362a:	e001      	b.n	8003630 <EXTI0_1_IRQHandler+0x8>
	{
		interrupt_CH395();
 800362c:	f7ff fe60 	bl	80032f0 <interrupt_CH395>
	while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 8003630:	2102      	movs	r1, #2
 8003632:	4804      	ldr	r0, [pc, #16]	; (8003644 <EXTI0_1_IRQHandler+0x1c>)
 8003634:	f7fd f8bc 	bl	80007b0 <HAL_GPIO_ReadPin>
 8003638:	2800      	cmp	r0, #0
 800363a:	d0f7      	beq.n	800362c <EXTI0_1_IRQHandler+0x4>
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800363c:	2002      	movs	r0, #2
 800363e:	f7fd f8c5 	bl	80007cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003642:	bd10      	pop	{r4, pc}
 8003644:	48000400 	.word	0x48000400

08003648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003648:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800364a:	4802      	ldr	r0, [pc, #8]	; (8003654 <USART1_IRQHandler+0xc>)
 800364c:	f7fe fb2e 	bl	8001cac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003650:	bd10      	pop	{r4, pc}
 8003652:	46c0      	nop			; (mov r8, r8)
 8003654:	20000848 	.word	0x20000848

08003658 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003658:	4b11      	ldr	r3, [pc, #68]	; (80036a0 <SystemInit+0x48>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	430a      	orrs	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	480f      	ldr	r0, [pc, #60]	; (80036a4 <SystemInit+0x4c>)
 8003666:	4002      	ands	r2, r0
 8003668:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	480e      	ldr	r0, [pc, #56]	; (80036a8 <SystemInit+0x50>)
 800366e:	4002      	ands	r2, r0
 8003670:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	480d      	ldr	r0, [pc, #52]	; (80036ac <SystemInit+0x54>)
 8003676:	4002      	ands	r2, r0
 8003678:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	480c      	ldr	r0, [pc, #48]	; (80036b0 <SystemInit+0x58>)
 800367e:	4002      	ands	r2, r0
 8003680:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	200f      	movs	r0, #15
 8003686:	4382      	bics	r2, r0
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800368a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368c:	4809      	ldr	r0, [pc, #36]	; (80036b4 <SystemInit+0x5c>)
 800368e:	4002      	ands	r2, r0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003694:	438a      	bics	r2, r1
 8003696:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]

}
 800369c:	4770      	bx	lr
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	40021000 	.word	0x40021000
 80036a4:	08ffb80c 	.word	0x08ffb80c
 80036a8:	fef6ffff 	.word	0xfef6ffff
 80036ac:	fffbffff 	.word	0xfffbffff
 80036b0:	ffc0ffff 	.word	0xffc0ffff
 80036b4:	fffffeec 	.word	0xfffffeec

080036b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036b8:	480d      	ldr	r0, [pc, #52]	; (80036f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036bc:	480d      	ldr	r0, [pc, #52]	; (80036f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80036be:	490e      	ldr	r1, [pc, #56]	; (80036f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036c0:	4a0e      	ldr	r2, [pc, #56]	; (80036fc <LoopForever+0xe>)
  movs r3, #0
 80036c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036c4:	e002      	b.n	80036cc <LoopCopyDataInit>

080036c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ca:	3304      	adds	r3, #4

080036cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d0:	d3f9      	bcc.n	80036c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036d2:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036d4:	4c0b      	ldr	r4, [pc, #44]	; (8003704 <LoopForever+0x16>)
  movs r3, #0
 80036d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d8:	e001      	b.n	80036de <LoopFillZerobss>

080036da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036dc:	3204      	adds	r2, #4

080036de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e0:	d3fb      	bcc.n	80036da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80036e2:	f7ff ffb9 	bl	8003658 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80036e6:	f000 f811 	bl	800370c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ea:	f7ff fd4f 	bl	800318c <main>

080036ee <LoopForever>:

LoopForever:
    b LoopForever
 80036ee:	e7fe      	b.n	80036ee <LoopForever>
  ldr   r0, =_estack
 80036f0:	20000fff 	.word	0x20000fff
  ldr r0, =_sdata
 80036f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f8:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 80036fc:	08003c20 	.word	0x08003c20
  ldr r2, =_sbss
 8003700:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8003704:	2000091c 	.word	0x2000091c

08003708 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003708:	e7fe      	b.n	8003708 <ADC1_IRQHandler>
	...

0800370c <__libc_init_array>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	2600      	movs	r6, #0
 8003710:	4d0c      	ldr	r5, [pc, #48]	; (8003744 <__libc_init_array+0x38>)
 8003712:	4c0d      	ldr	r4, [pc, #52]	; (8003748 <__libc_init_array+0x3c>)
 8003714:	1b64      	subs	r4, r4, r5
 8003716:	10a4      	asrs	r4, r4, #2
 8003718:	42a6      	cmp	r6, r4
 800371a:	d109      	bne.n	8003730 <__libc_init_array+0x24>
 800371c:	2600      	movs	r6, #0
 800371e:	f000 f933 	bl	8003988 <_init>
 8003722:	4d0a      	ldr	r5, [pc, #40]	; (800374c <__libc_init_array+0x40>)
 8003724:	4c0a      	ldr	r4, [pc, #40]	; (8003750 <__libc_init_array+0x44>)
 8003726:	1b64      	subs	r4, r4, r5
 8003728:	10a4      	asrs	r4, r4, #2
 800372a:	42a6      	cmp	r6, r4
 800372c:	d105      	bne.n	800373a <__libc_init_array+0x2e>
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	00b3      	lsls	r3, r6, #2
 8003732:	58eb      	ldr	r3, [r5, r3]
 8003734:	4798      	blx	r3
 8003736:	3601      	adds	r6, #1
 8003738:	e7ee      	b.n	8003718 <__libc_init_array+0xc>
 800373a:	00b3      	lsls	r3, r6, #2
 800373c:	58eb      	ldr	r3, [r5, r3]
 800373e:	4798      	blx	r3
 8003740:	3601      	adds	r6, #1
 8003742:	e7f2      	b.n	800372a <__libc_init_array+0x1e>
 8003744:	08003c18 	.word	0x08003c18
 8003748:	08003c18 	.word	0x08003c18
 800374c:	08003c18 	.word	0x08003c18
 8003750:	08003c1c 	.word	0x08003c1c

08003754 <memcpy>:
 8003754:	2300      	movs	r3, #0
 8003756:	b510      	push	{r4, lr}
 8003758:	429a      	cmp	r2, r3
 800375a:	d100      	bne.n	800375e <memcpy+0xa>
 800375c:	bd10      	pop	{r4, pc}
 800375e:	5ccc      	ldrb	r4, [r1, r3]
 8003760:	54c4      	strb	r4, [r0, r3]
 8003762:	3301      	adds	r3, #1
 8003764:	e7f8      	b.n	8003758 <memcpy+0x4>

08003766 <memset>:
 8003766:	0003      	movs	r3, r0
 8003768:	1812      	adds	r2, r2, r0
 800376a:	4293      	cmp	r3, r2
 800376c:	d100      	bne.n	8003770 <memset+0xa>
 800376e:	4770      	bx	lr
 8003770:	7019      	strb	r1, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	e7f9      	b.n	800376a <memset+0x4>

08003776 <strcat>:
 8003776:	0002      	movs	r2, r0
 8003778:	b510      	push	{r4, lr}
 800377a:	7813      	ldrb	r3, [r2, #0]
 800377c:	1c54      	adds	r4, r2, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <strcat+0x18>
 8003782:	5ccc      	ldrb	r4, [r1, r3]
 8003784:	54d4      	strb	r4, [r2, r3]
 8003786:	3301      	adds	r3, #1
 8003788:	2c00      	cmp	r4, #0
 800378a:	d1fa      	bne.n	8003782 <strcat+0xc>
 800378c:	bd10      	pop	{r4, pc}
 800378e:	0022      	movs	r2, r4
 8003790:	e7f3      	b.n	800377a <strcat+0x4>

08003792 <strchr>:
 8003792:	b2c9      	uxtb	r1, r1
 8003794:	7803      	ldrb	r3, [r0, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <strchr+0x12>
 800379a:	428b      	cmp	r3, r1
 800379c:	d100      	bne.n	80037a0 <strchr+0xe>
 800379e:	4770      	bx	lr
 80037a0:	3001      	adds	r0, #1
 80037a2:	e7f7      	b.n	8003794 <strchr+0x2>
 80037a4:	424b      	negs	r3, r1
 80037a6:	4159      	adcs	r1, r3
 80037a8:	4249      	negs	r1, r1
 80037aa:	4008      	ands	r0, r1
 80037ac:	e7f7      	b.n	800379e <strchr+0xc>

080037ae <strcpy>:
 80037ae:	0003      	movs	r3, r0
 80037b0:	780a      	ldrb	r2, [r1, #0]
 80037b2:	3101      	adds	r1, #1
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	2a00      	cmp	r2, #0
 80037ba:	d1f9      	bne.n	80037b0 <strcpy+0x2>
 80037bc:	4770      	bx	lr

080037be <strncat>:
 80037be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c0:	0004      	movs	r4, r0
 80037c2:	7823      	ldrb	r3, [r4, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <strncat+0x1c>
 80037c8:	001f      	movs	r7, r3
 80037ca:	1e56      	subs	r6, r2, #1
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <strncat+0x1a>
 80037d0:	5ccd      	ldrb	r5, [r1, r3]
 80037d2:	54e5      	strb	r5, [r4, r3]
 80037d4:	2d00      	cmp	r5, #0
 80037d6:	d102      	bne.n	80037de <strncat+0x20>
 80037d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037da:	3401      	adds	r4, #1
 80037dc:	e7f1      	b.n	80037c2 <strncat+0x4>
 80037de:	429e      	cmp	r6, r3
 80037e0:	d101      	bne.n	80037e6 <strncat+0x28>
 80037e2:	19a5      	adds	r5, r4, r6
 80037e4:	706f      	strb	r7, [r5, #1]
 80037e6:	3301      	adds	r3, #1
 80037e8:	e7f0      	b.n	80037cc <strncat+0xe>

080037ea <strncmp>:
 80037ea:	2300      	movs	r3, #0
 80037ec:	b530      	push	{r4, r5, lr}
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d00a      	beq.n	8003808 <strncmp+0x1e>
 80037f2:	3a01      	subs	r2, #1
 80037f4:	5cc4      	ldrb	r4, [r0, r3]
 80037f6:	5ccd      	ldrb	r5, [r1, r3]
 80037f8:	42ac      	cmp	r4, r5
 80037fa:	d104      	bne.n	8003806 <strncmp+0x1c>
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d002      	beq.n	8003806 <strncmp+0x1c>
 8003800:	3301      	adds	r3, #1
 8003802:	2c00      	cmp	r4, #0
 8003804:	d1f6      	bne.n	80037f4 <strncmp+0xa>
 8003806:	1b63      	subs	r3, r4, r5
 8003808:	0018      	movs	r0, r3
 800380a:	bd30      	pop	{r4, r5, pc}

0800380c <strncpy>:
 800380c:	b530      	push	{r4, r5, lr}
 800380e:	0005      	movs	r5, r0
 8003810:	2a00      	cmp	r2, #0
 8003812:	d100      	bne.n	8003816 <strncpy+0xa>
 8003814:	bd30      	pop	{r4, r5, pc}
 8003816:	780c      	ldrb	r4, [r1, #0]
 8003818:	3a01      	subs	r2, #1
 800381a:	1c6b      	adds	r3, r5, #1
 800381c:	702c      	strb	r4, [r5, #0]
 800381e:	3101      	adds	r1, #1
 8003820:	2c00      	cmp	r4, #0
 8003822:	d105      	bne.n	8003830 <strncpy+0x24>
 8003824:	189a      	adds	r2, r3, r2
 8003826:	429a      	cmp	r2, r3
 8003828:	d0f4      	beq.n	8003814 <strncpy+0x8>
 800382a:	701c      	strb	r4, [r3, #0]
 800382c:	3301      	adds	r3, #1
 800382e:	e7fa      	b.n	8003826 <strncpy+0x1a>
 8003830:	001d      	movs	r5, r3
 8003832:	e7ed      	b.n	8003810 <strncpy+0x4>

08003834 <strnstr>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	000e      	movs	r6, r1
 8003838:	0005      	movs	r5, r0
 800383a:	0011      	movs	r1, r2
 800383c:	0030      	movs	r0, r6
 800383e:	0014      	movs	r4, r2
 8003840:	f000 f887 	bl	8003952 <strnlen>
 8003844:	0003      	movs	r3, r0
 8003846:	4284      	cmp	r4, r0
 8003848:	d802      	bhi.n	8003850 <strnstr+0x1c>
 800384a:	5c32      	ldrb	r2, [r6, r0]
 800384c:	2a00      	cmp	r2, #0
 800384e:	d10d      	bne.n	800386c <strnstr+0x38>
 8003850:	0021      	movs	r1, r4
 8003852:	0032      	movs	r2, r6
 8003854:	0028      	movs	r0, r5
 8003856:	f000 f862 	bl	800391e <memmem>
 800385a:	1e04      	subs	r4, r0, #0
 800385c:	d006      	beq.n	800386c <strnstr+0x38>
 800385e:	1b42      	subs	r2, r0, r5
 8003860:	2100      	movs	r1, #0
 8003862:	0028      	movs	r0, r5
 8003864:	f000 f850 	bl	8003908 <memchr>
 8003868:	2800      	cmp	r0, #0
 800386a:	d000      	beq.n	800386e <strnstr+0x3a>
 800386c:	2400      	movs	r4, #0
 800386e:	0020      	movs	r0, r4
 8003870:	bd70      	pop	{r4, r5, r6, pc}

08003872 <strstr>:
 8003872:	b510      	push	{r4, lr}
 8003874:	7803      	ldrb	r3, [r0, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <strstr+0x28>
 800387a:	780b      	ldrb	r3, [r1, #0]
 800387c:	425a      	negs	r2, r3
 800387e:	4153      	adcs	r3, r2
 8003880:	425b      	negs	r3, r3
 8003882:	4018      	ands	r0, r3
 8003884:	bd10      	pop	{r4, pc}
 8003886:	2300      	movs	r3, #0
 8003888:	5cca      	ldrb	r2, [r1, r3]
 800388a:	2a00      	cmp	r2, #0
 800388c:	d0fa      	beq.n	8003884 <strstr+0x12>
 800388e:	5cc4      	ldrb	r4, [r0, r3]
 8003890:	4294      	cmp	r4, r2
 8003892:	d101      	bne.n	8003898 <strstr+0x26>
 8003894:	3301      	adds	r3, #1
 8003896:	e7f7      	b.n	8003888 <strstr+0x16>
 8003898:	3001      	adds	r0, #1
 800389a:	7803      	ldrb	r3, [r0, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f2      	bne.n	8003886 <strstr+0x14>
 80038a0:	0018      	movs	r0, r3
 80038a2:	e7ef      	b.n	8003884 <strstr+0x12>

080038a4 <__strtok_r>:
 80038a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d104      	bne.n	80038b4 <__strtok_r+0x10>
 80038aa:	6810      	ldr	r0, [r2, #0]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d101      	bne.n	80038b4 <__strtok_r+0x10>
 80038b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038b2:	0020      	movs	r0, r4
 80038b4:	000e      	movs	r6, r1
 80038b6:	7805      	ldrb	r5, [r0, #0]
 80038b8:	1c44      	adds	r4, r0, #1
 80038ba:	7837      	ldrb	r7, [r6, #0]
 80038bc:	2f00      	cmp	r7, #0
 80038be:	d104      	bne.n	80038ca <__strtok_r+0x26>
 80038c0:	2d00      	cmp	r5, #0
 80038c2:	d110      	bne.n	80038e6 <__strtok_r+0x42>
 80038c4:	6015      	str	r5, [r2, #0]
 80038c6:	0028      	movs	r0, r5
 80038c8:	e7f2      	b.n	80038b0 <__strtok_r+0xc>
 80038ca:	3601      	adds	r6, #1
 80038cc:	42bd      	cmp	r5, r7
 80038ce:	d1f4      	bne.n	80038ba <__strtok_r+0x16>
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ee      	bne.n	80038b2 <__strtok_r+0xe>
 80038d4:	6014      	str	r4, [r2, #0]
 80038d6:	7003      	strb	r3, [r0, #0]
 80038d8:	e7ea      	b.n	80038b0 <__strtok_r+0xc>
 80038da:	0033      	movs	r3, r6
 80038dc:	e00d      	b.n	80038fa <__strtok_r+0x56>
 80038de:	3501      	adds	r5, #1
 80038e0:	2f00      	cmp	r7, #0
 80038e2:	d103      	bne.n	80038ec <__strtok_r+0x48>
 80038e4:	001c      	movs	r4, r3
 80038e6:	000d      	movs	r5, r1
 80038e8:	7826      	ldrb	r6, [r4, #0]
 80038ea:	1c63      	adds	r3, r4, #1
 80038ec:	782f      	ldrb	r7, [r5, #0]
 80038ee:	42be      	cmp	r6, r7
 80038f0:	d1f5      	bne.n	80038de <__strtok_r+0x3a>
 80038f2:	2e00      	cmp	r6, #0
 80038f4:	d0f1      	beq.n	80038da <__strtok_r+0x36>
 80038f6:	2100      	movs	r1, #0
 80038f8:	7021      	strb	r1, [r4, #0]
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	e7d8      	b.n	80038b0 <__strtok_r+0xc>

080038fe <strtok_r>:
 80038fe:	b510      	push	{r4, lr}
 8003900:	2301      	movs	r3, #1
 8003902:	f7ff ffcf 	bl	80038a4 <__strtok_r>
 8003906:	bd10      	pop	{r4, pc}

08003908 <memchr>:
 8003908:	b2c9      	uxtb	r1, r1
 800390a:	1882      	adds	r2, r0, r2
 800390c:	4290      	cmp	r0, r2
 800390e:	d101      	bne.n	8003914 <memchr+0xc>
 8003910:	2000      	movs	r0, #0
 8003912:	4770      	bx	lr
 8003914:	7803      	ldrb	r3, [r0, #0]
 8003916:	428b      	cmp	r3, r1
 8003918:	d0fb      	beq.n	8003912 <memchr+0xa>
 800391a:	3001      	adds	r0, #1
 800391c:	e7f6      	b.n	800390c <memchr+0x4>

0800391e <memmem>:
 800391e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003920:	0007      	movs	r7, r0
 8003922:	9100      	str	r1, [sp, #0]
 8003924:	9201      	str	r2, [sp, #4]
 8003926:	001e      	movs	r6, r3
 8003928:	0004      	movs	r4, r0
 800392a:	000d      	movs	r5, r1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <memmem+0x26>
 8003930:	0020      	movs	r0, r4
 8003932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003934:	0032      	movs	r2, r6
 8003936:	9901      	ldr	r1, [sp, #4]
 8003938:	0020      	movs	r0, r4
 800393a:	f000 f815 	bl	8003968 <memcmp>
 800393e:	2800      	cmp	r0, #0
 8003940:	d0f6      	beq.n	8003930 <memmem+0x12>
 8003942:	3d01      	subs	r5, #1
 8003944:	9b00      	ldr	r3, [sp, #0]
 8003946:	18fc      	adds	r4, r7, r3
 8003948:	1b64      	subs	r4, r4, r5
 800394a:	42b5      	cmp	r5, r6
 800394c:	d2f2      	bcs.n	8003934 <memmem+0x16>
 800394e:	2400      	movs	r4, #0
 8003950:	e7ee      	b.n	8003930 <memmem+0x12>

08003952 <strnlen>:
 8003952:	0003      	movs	r3, r0
 8003954:	1841      	adds	r1, r0, r1
 8003956:	428b      	cmp	r3, r1
 8003958:	d002      	beq.n	8003960 <strnlen+0xe>
 800395a:	781a      	ldrb	r2, [r3, #0]
 800395c:	2a00      	cmp	r2, #0
 800395e:	d101      	bne.n	8003964 <strnlen+0x12>
 8003960:	1a18      	subs	r0, r3, r0
 8003962:	4770      	bx	lr
 8003964:	3301      	adds	r3, #1
 8003966:	e7f6      	b.n	8003956 <strnlen+0x4>

08003968 <memcmp>:
 8003968:	b530      	push	{r4, r5, lr}
 800396a:	2400      	movs	r4, #0
 800396c:	42a2      	cmp	r2, r4
 800396e:	d101      	bne.n	8003974 <memcmp+0xc>
 8003970:	2000      	movs	r0, #0
 8003972:	e005      	b.n	8003980 <memcmp+0x18>
 8003974:	5d03      	ldrb	r3, [r0, r4]
 8003976:	1c65      	adds	r5, r4, #1
 8003978:	5d0c      	ldrb	r4, [r1, r4]
 800397a:	42a3      	cmp	r3, r4
 800397c:	d001      	beq.n	8003982 <memcmp+0x1a>
 800397e:	1b18      	subs	r0, r3, r4
 8003980:	bd30      	pop	{r4, r5, pc}
 8003982:	002c      	movs	r4, r5
 8003984:	e7f2      	b.n	800396c <memcmp+0x4>
	...

08003988 <_init>:
 8003988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800398e:	bc08      	pop	{r3}
 8003990:	469e      	mov	lr, r3
 8003992:	4770      	bx	lr

08003994 <_fini>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr
