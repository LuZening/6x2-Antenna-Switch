
Antenna Switch 6x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800397c  0800397c  00020458  2**0
                  CONTENTS
  4 .ARM          00000000  0800397c  0800397c  00020458  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800397c  0800397c  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800397c  0800397c  0001397c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08003984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000458  08003ddc  00020458  2**3
                  ALLOC
 10 ._user_heap_stack 00000304  20000a5c  08003ddc  00020a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a30d  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035ef  00000000  00000000  0003a78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000072ee  00000000  00000000  0003dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000be8  00000000  00000000  00045070  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c10  00000000  00000000  00045c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000fdce  00000000  00000000  00046868  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000dc62  00000000  00000000  00056636  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004576e  00000000  00000000  00064298  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a9a06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002134  00000000  00000000  000a9a84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000458 	.word	0x20000458
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036f0 	.word	0x080036f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000045c 	.word	0x2000045c
 8000104:	080036f0 	.word	0x080036f0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b510      	push	{r4, lr}
 8000246:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000248:	f000 fdb4 	bl	8000db4 <HAL_RCC_GetHCLKFreq>
 800024c:	21fa      	movs	r1, #250	; 0xfa
 800024e:	0089      	lsls	r1, r1, #2
 8000250:	f7ff ff6c 	bl	800012c <__udivsi3>
 8000254:	f000 f860 	bl	8000318 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000258:	2001      	movs	r0, #1
 800025a:	2200      	movs	r2, #0
 800025c:	0021      	movs	r1, r4
 800025e:	4240      	negs	r0, r0
 8000260:	f000 f820 	bl	80002a4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <HAL_Init>:
{
 8000268:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026a:	4a06      	ldr	r2, [pc, #24]	; (8000284 <HAL_Init+0x1c>)
 800026c:	6813      	ldr	r3, [r2, #0]
 800026e:	2110      	movs	r1, #16
 8000270:	430b      	orrs	r3, r1
 8000272:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000274:	2000      	movs	r0, #0
 8000276:	f7ff ffe5 	bl	8000244 <HAL_InitTick>
  HAL_MspInit();
 800027a:	f003 f809 	bl	8003290 <HAL_MspInit>
}
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	40022000 	.word	0x40022000

08000288 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000288:	4a02      	ldr	r2, [pc, #8]	; (8000294 <HAL_IncTick+0xc>)
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	3301      	adds	r3, #1
 800028e:	6013      	str	r3, [r2, #0]
}
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	200008c4 	.word	0x200008c4

08000298 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000298:	4b01      	ldr	r3, [pc, #4]	; (80002a0 <HAL_GetTick+0x8>)
 800029a:	6818      	ldr	r0, [r3, #0]
}
 800029c:	4770      	bx	lr
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	200008c4 	.word	0x200008c4

080002a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002a4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002a6:	2800      	cmp	r0, #0
 80002a8:	db11      	blt.n	80002ce <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002aa:	0884      	lsrs	r4, r0, #2
 80002ac:	4d13      	ldr	r5, [pc, #76]	; (80002fc <HAL_NVIC_SetPriority+0x58>)
 80002ae:	34c0      	adds	r4, #192	; 0xc0
 80002b0:	00a4      	lsls	r4, r4, #2
 80002b2:	5962      	ldr	r2, [r4, r5]
 80002b4:	2303      	movs	r3, #3
 80002b6:	4018      	ands	r0, r3
 80002b8:	00c0      	lsls	r0, r0, #3
 80002ba:	33fc      	adds	r3, #252	; 0xfc
 80002bc:	001e      	movs	r6, r3
 80002be:	4086      	lsls	r6, r0
 80002c0:	43b2      	bics	r2, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002c2:	0189      	lsls	r1, r1, #6
 80002c4:	400b      	ands	r3, r1
 80002c6:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002c8:	4313      	orrs	r3, r2
 80002ca:	5163      	str	r3, [r4, r5]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002cc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ce:	b2c0      	uxtb	r0, r0
 80002d0:	220f      	movs	r2, #15
 80002d2:	4002      	ands	r2, r0
 80002d4:	3a08      	subs	r2, #8
 80002d6:	0892      	lsrs	r2, r2, #2
 80002d8:	3206      	adds	r2, #6
 80002da:	0092      	lsls	r2, r2, #2
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <HAL_NVIC_SetPriority+0x5c>)
 80002de:	18d3      	adds	r3, r2, r3
 80002e0:	685d      	ldr	r5, [r3, #4]
 80002e2:	2403      	movs	r4, #3
 80002e4:	4020      	ands	r0, r4
 80002e6:	00c0      	lsls	r0, r0, #3
 80002e8:	22ff      	movs	r2, #255	; 0xff
 80002ea:	0014      	movs	r4, r2
 80002ec:	4084      	lsls	r4, r0
 80002ee:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002f0:	0189      	lsls	r1, r1, #6
 80002f2:	400a      	ands	r2, r1
 80002f4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f6:	432a      	orrs	r2, r5
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	e7e7      	b.n	80002cc <HAL_NVIC_SetPriority+0x28>
 80002fc:	e000e100 	.word	0xe000e100
 8000300:	e000ed00 	.word	0xe000ed00

08000304 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000304:	231f      	movs	r3, #31
 8000306:	4018      	ands	r0, r3
 8000308:	3b1e      	subs	r3, #30
 800030a:	4083      	lsls	r3, r0
 800030c:	4a01      	ldr	r2, [pc, #4]	; (8000314 <HAL_NVIC_EnableIRQ+0x10>)
 800030e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000310:	4770      	bx	lr
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100

08000318 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000318:	3801      	subs	r0, #1
 800031a:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <HAL_SYSTICK_Config+0x2c>)
 800031c:	4298      	cmp	r0, r3
 800031e:	d80f      	bhi.n	8000340 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a09      	ldr	r2, [pc, #36]	; (8000348 <HAL_SYSTICK_Config+0x30>)
 8000322:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <HAL_SYSTICK_Config+0x34>)
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	021b      	lsls	r3, r3, #8
 800032a:	0a1b      	lsrs	r3, r3, #8
 800032c:	21c0      	movs	r1, #192	; 0xc0
 800032e:	0609      	lsls	r1, r1, #24
 8000330:	430b      	orrs	r3, r1
 8000332:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000334:	2300      	movs	r3, #0
 8000336:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	3307      	adds	r3, #7
 800033a:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800033c:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000340:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000342:	e7fc      	b.n	800033e <HAL_SYSTICK_Config+0x26>
 8000344:	00ffffff 	.word	0x00ffffff
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000350:	b510      	push	{r4, lr}
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <FLASH_Program_HalfWord+0x18>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <FLASH_Program_HalfWord+0x1c>)
 800035a:	6913      	ldr	r3, [r2, #16]
 800035c:	2401      	movs	r4, #1
 800035e:	4323      	orrs	r3, r4
 8000360:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000362:	8001      	strh	r1, [r0, #0]
}
 8000364:	bd10      	pop	{r4, pc}
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	200008c8 	.word	0x200008c8
 800036c:	40022000 	.word	0x40022000

08000370 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <FLASH_SetErrorCode+0x34>)
 8000372:	68db      	ldr	r3, [r3, #12]
 8000374:	06db      	lsls	r3, r3, #27
 8000376:	d513      	bpl.n	80003a0 <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <FLASH_SetErrorCode+0x38>)
 800037a:	69d3      	ldr	r3, [r2, #28]
 800037c:	2102      	movs	r1, #2
 800037e:	430b      	orrs	r3, r1
 8000380:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000382:	2310      	movs	r3, #16
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000384:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <FLASH_SetErrorCode+0x34>)
 8000386:	68d2      	ldr	r2, [r2, #12]
 8000388:	0752      	lsls	r2, r2, #29
 800038a:	d506      	bpl.n	800039a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800038c:	4906      	ldr	r1, [pc, #24]	; (80003a8 <FLASH_SetErrorCode+0x38>)
 800038e:	69ca      	ldr	r2, [r1, #28]
 8000390:	2001      	movs	r0, #1
 8000392:	4302      	orrs	r2, r0
 8000394:	61ca      	str	r2, [r1, #28]
    flags |= FLASH_FLAG_PGERR;
 8000396:	2204      	movs	r2, #4
 8000398:	4313      	orrs	r3, r2
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800039a:	4a02      	ldr	r2, [pc, #8]	; (80003a4 <FLASH_SetErrorCode+0x34>)
 800039c:	60d3      	str	r3, [r2, #12]
}  
 800039e:	4770      	bx	lr
  uint32_t flags = 0U;
 80003a0:	2300      	movs	r3, #0
 80003a2:	e7ef      	b.n	8000384 <FLASH_SetErrorCode+0x14>
 80003a4:	40022000 	.word	0x40022000
 80003a8:	200008c8 	.word	0x200008c8

080003ac <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <HAL_FLASH_Unlock+0x24>)
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	061b      	lsls	r3, r3, #24
 80003b2:	d50b      	bpl.n	80003cc <HAL_FLASH_Unlock+0x20>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <HAL_FLASH_Unlock+0x24>)
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <HAL_FLASH_Unlock+0x28>)
 80003b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80003ba:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <HAL_FLASH_Unlock+0x2c>)
 80003bc:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	061b      	lsls	r3, r3, #24
 80003c2:	d501      	bpl.n	80003c8 <HAL_FLASH_Unlock+0x1c>
      status = HAL_ERROR;
 80003c4:	2001      	movs	r0, #1
 80003c6:	e002      	b.n	80003ce <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 80003c8:	2000      	movs	r0, #0
 80003ca:	e000      	b.n	80003ce <HAL_FLASH_Unlock+0x22>
 80003cc:	2000      	movs	r0, #0
}
 80003ce:	4770      	bx	lr
 80003d0:	40022000 	.word	0x40022000
 80003d4:	45670123 	.word	0x45670123
 80003d8:	cdef89ab 	.word	0xcdef89ab

080003dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <HAL_FLASH_Lock+0x10>)
 80003de:	6913      	ldr	r3, [r2, #16]
 80003e0:	2180      	movs	r1, #128	; 0x80
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6113      	str	r3, [r2, #16]
}
 80003e6:	2000      	movs	r0, #0
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	40022000 	.word	0x40022000

080003f0 <FLASH_WaitForLastOperation>:
{
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003f4:	f7ff ff50 	bl	8000298 <HAL_GetTick>
 80003f8:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80003fa:	4b13      	ldr	r3, [pc, #76]	; (8000448 <FLASH_WaitForLastOperation+0x58>)
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	07db      	lsls	r3, r3, #31
 8000400:	d50a      	bpl.n	8000418 <FLASH_WaitForLastOperation+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8000402:	1c63      	adds	r3, r4, #1
 8000404:	d0f9      	beq.n	80003fa <FLASH_WaitForLastOperation+0xa>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000406:	2c00      	cmp	r4, #0
 8000408:	d019      	beq.n	800043e <FLASH_WaitForLastOperation+0x4e>
 800040a:	f7ff ff45 	bl	8000298 <HAL_GetTick>
 800040e:	1b40      	subs	r0, r0, r5
 8000410:	42a0      	cmp	r0, r4
 8000412:	d9f2      	bls.n	80003fa <FLASH_WaitForLastOperation+0xa>
        return HAL_TIMEOUT;
 8000414:	2003      	movs	r0, #3
 8000416:	e011      	b.n	800043c <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <FLASH_WaitForLastOperation+0x58>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	069b      	lsls	r3, r3, #26
 800041e:	d502      	bpl.n	8000426 <FLASH_WaitForLastOperation+0x36>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000420:	4b09      	ldr	r3, [pc, #36]	; (8000448 <FLASH_WaitForLastOperation+0x58>)
 8000422:	2220      	movs	r2, #32
 8000424:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <FLASH_WaitForLastOperation+0x58>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	06db      	lsls	r3, r3, #27
 800042c:	d403      	bmi.n	8000436 <FLASH_WaitForLastOperation+0x46>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <FLASH_WaitForLastOperation+0x58>)
 8000430:	68db      	ldr	r3, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000432:	075b      	lsls	r3, r3, #29
 8000434:	d505      	bpl.n	8000442 <FLASH_WaitForLastOperation+0x52>
    FLASH_SetErrorCode();
 8000436:	f7ff ff9b 	bl	8000370 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800043a:	2001      	movs	r0, #1
}
 800043c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800043e:	2003      	movs	r0, #3
 8000440:	e7fc      	b.n	800043c <FLASH_WaitForLastOperation+0x4c>
  return HAL_OK;
 8000442:	2000      	movs	r0, #0
 8000444:	e7fa      	b.n	800043c <FLASH_WaitForLastOperation+0x4c>
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40022000 	.word	0x40022000

0800044c <HAL_FLASH_Program>:
{
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	46c6      	mov	lr, r8
 8000450:	b500      	push	{lr}
 8000452:	0004      	movs	r4, r0
 8000454:	000d      	movs	r5, r1
 8000456:	4690      	mov	r8, r2
 8000458:	001e      	movs	r6, r3
  __HAL_LOCK(&pFlash);
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <HAL_FLASH_Program+0x94>)
 800045c:	7e1b      	ldrb	r3, [r3, #24]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d03b      	beq.n	80004da <HAL_FLASH_Program+0x8e>
 8000462:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <HAL_FLASH_Program+0x94>)
 8000464:	2201      	movs	r2, #1
 8000466:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000468:	481e      	ldr	r0, [pc, #120]	; (80004e4 <HAL_FLASH_Program+0x98>)
 800046a:	f7ff ffc1 	bl	80003f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800046e:	2800      	cmp	r0, #0
 8000470:	d12d      	bne.n	80004ce <HAL_FLASH_Program+0x82>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000472:	2c01      	cmp	r4, #1
 8000474:	d006      	beq.n	8000484 <HAL_FLASH_Program+0x38>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000476:	2c02      	cmp	r4, #2
 8000478:	d002      	beq.n	8000480 <HAL_FLASH_Program+0x34>
      nbiterations = 4U;
 800047a:	2704      	movs	r7, #4
    for (index = 0U; index < nbiterations; index++)
 800047c:	2400      	movs	r4, #0
 800047e:	e01b      	b.n	80004b8 <HAL_FLASH_Program+0x6c>
      nbiterations = 2U;
 8000480:	2702      	movs	r7, #2
 8000482:	e7fb      	b.n	800047c <HAL_FLASH_Program+0x30>
      nbiterations = 1U;
 8000484:	2701      	movs	r7, #1
 8000486:	e7f9      	b.n	800047c <HAL_FLASH_Program+0x30>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000488:	2220      	movs	r2, #32
 800048a:	1ad2      	subs	r2, r2, r3
 800048c:	0031      	movs	r1, r6
 800048e:	4091      	lsls	r1, r2
 8000490:	000a      	movs	r2, r1
 8000492:	4641      	mov	r1, r8
 8000494:	40d9      	lsrs	r1, r3
 8000496:	4311      	orrs	r1, r2
 8000498:	b289      	uxth	r1, r1
 800049a:	1940      	adds	r0, r0, r5
 800049c:	f7ff ff58 	bl	8000350 <FLASH_Program_HalfWord>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004a0:	4810      	ldr	r0, [pc, #64]	; (80004e4 <HAL_FLASH_Program+0x98>)
 80004a2:	f7ff ffa5 	bl	80003f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80004a6:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <HAL_FLASH_Program+0x9c>)
 80004a8:	6913      	ldr	r3, [r2, #16]
 80004aa:	2101      	movs	r1, #1
 80004ac:	438b      	bics	r3, r1
 80004ae:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d10c      	bne.n	80004ce <HAL_FLASH_Program+0x82>
    for (index = 0U; index < nbiterations; index++)
 80004b4:	3401      	adds	r4, #1
 80004b6:	b2e4      	uxtb	r4, r4
 80004b8:	42bc      	cmp	r4, r7
 80004ba:	d208      	bcs.n	80004ce <HAL_FLASH_Program+0x82>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004bc:	0060      	lsls	r0, r4, #1
 80004be:	0123      	lsls	r3, r4, #4
 80004c0:	2220      	movs	r2, #32
 80004c2:	4252      	negs	r2, r2
 80004c4:	189a      	adds	r2, r3, r2
 80004c6:	d4df      	bmi.n	8000488 <HAL_FLASH_Program+0x3c>
 80004c8:	0031      	movs	r1, r6
 80004ca:	40d1      	lsrs	r1, r2
 80004cc:	e7e4      	b.n	8000498 <HAL_FLASH_Program+0x4c>
  __HAL_UNLOCK(&pFlash);
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <HAL_FLASH_Program+0x94>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	761a      	strb	r2, [r3, #24]
}
 80004d4:	bc04      	pop	{r2}
 80004d6:	4690      	mov	r8, r2
 80004d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 80004da:	2002      	movs	r0, #2
 80004dc:	e7fa      	b.n	80004d4 <HAL_FLASH_Program+0x88>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	200008c8 	.word	0x200008c8
 80004e4:	0000c350 	.word	0x0000c350
 80004e8:	40022000 	.word	0x40022000

080004ec <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <FLASH_MassErase+0x1c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <FLASH_MassErase+0x20>)
 80004f4:	691a      	ldr	r2, [r3, #16]
 80004f6:	2104      	movs	r1, #4
 80004f8:	430a      	orrs	r2, r1
 80004fa:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80004fc:	691a      	ldr	r2, [r3, #16]
 80004fe:	313c      	adds	r1, #60	; 0x3c
 8000500:	430a      	orrs	r2, r1
 8000502:	611a      	str	r2, [r3, #16]
}
 8000504:	4770      	bx	lr
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	200008c8 	.word	0x200008c8
 800050c:	40022000 	.word	0x40022000

08000510 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <FLASH_PageErase+0x1c>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <FLASH_PageErase+0x20>)
 8000518:	691a      	ldr	r2, [r3, #16]
 800051a:	2102      	movs	r1, #2
 800051c:	430a      	orrs	r2, r1
 800051e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000520:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000522:	691a      	ldr	r2, [r3, #16]
 8000524:	313e      	adds	r1, #62	; 0x3e
 8000526:	430a      	orrs	r2, r1
 8000528:	611a      	str	r2, [r3, #16]
}
 800052a:	4770      	bx	lr
 800052c:	200008c8 	.word	0x200008c8
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_FLASHEx_Erase>:
{
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	0005      	movs	r5, r0
 8000538:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <HAL_FLASHEx_Erase+0x98>)
 800053c:	7e1b      	ldrb	r3, [r3, #24]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d041      	beq.n	80005c6 <HAL_FLASHEx_Erase+0x92>
 8000542:	4b22      	ldr	r3, [pc, #136]	; (80005cc <HAL_FLASHEx_Erase+0x98>)
 8000544:	2201      	movs	r2, #1
 8000546:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000548:	6803      	ldr	r3, [r0, #0]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d022      	beq.n	8000594 <HAL_FLASHEx_Erase+0x60>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800054e:	4820      	ldr	r0, [pc, #128]	; (80005d0 <HAL_FLASHEx_Erase+0x9c>)
 8000550:	f7ff ff4e 	bl	80003f0 <FLASH_WaitForLastOperation>
 8000554:	2800      	cmp	r0, #0
 8000556:	d131      	bne.n	80005bc <HAL_FLASHEx_Erase+0x88>
        *PageError = 0xFFFFFFFFU;
 8000558:	2301      	movs	r3, #1
 800055a:	425b      	negs	r3, r3
 800055c:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 800055e:	686c      	ldr	r4, [r5, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000560:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000562:	68ab      	ldr	r3, [r5, #8]
 8000564:	029b      	lsls	r3, r3, #10
 8000566:	686a      	ldr	r2, [r5, #4]
 8000568:	4694      	mov	ip, r2
 800056a:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 800056c:	42a3      	cmp	r3, r4
 800056e:	d926      	bls.n	80005be <HAL_FLASHEx_Erase+0x8a>
          FLASH_PageErase(address);
 8000570:	0020      	movs	r0, r4
 8000572:	f7ff ffcd 	bl	8000510 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000576:	4816      	ldr	r0, [pc, #88]	; (80005d0 <HAL_FLASHEx_Erase+0x9c>)
 8000578:	f7ff ff3a 	bl	80003f0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <HAL_FLASHEx_Erase+0xa0>)
 800057e:	6913      	ldr	r3, [r2, #16]
 8000580:	2102      	movs	r1, #2
 8000582:	438b      	bics	r3, r1
 8000584:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 8000586:	2800      	cmp	r0, #0
 8000588:	d116      	bne.n	80005b8 <HAL_FLASHEx_Erase+0x84>
            address += FLASH_PAGE_SIZE)
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	469c      	mov	ip, r3
 8000590:	4464      	add	r4, ip
 8000592:	e7e6      	b.n	8000562 <HAL_FLASHEx_Erase+0x2e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000594:	480e      	ldr	r0, [pc, #56]	; (80005d0 <HAL_FLASHEx_Erase+0x9c>)
 8000596:	f7ff ff2b 	bl	80003f0 <FLASH_WaitForLastOperation>
 800059a:	2800      	cmp	r0, #0
 800059c:	d001      	beq.n	80005a2 <HAL_FLASHEx_Erase+0x6e>
  HAL_StatusTypeDef status = HAL_ERROR;
 800059e:	2001      	movs	r0, #1
 80005a0:	e00d      	b.n	80005be <HAL_FLASHEx_Erase+0x8a>
        FLASH_MassErase();
 80005a2:	f7ff ffa3 	bl	80004ec <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <HAL_FLASHEx_Erase+0x9c>)
 80005a8:	f7ff ff22 	bl	80003f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80005ac:	4a09      	ldr	r2, [pc, #36]	; (80005d4 <HAL_FLASHEx_Erase+0xa0>)
 80005ae:	6913      	ldr	r3, [r2, #16]
 80005b0:	2104      	movs	r1, #4
 80005b2:	438b      	bics	r3, r1
 80005b4:	6113      	str	r3, [r2, #16]
 80005b6:	e002      	b.n	80005be <HAL_FLASHEx_Erase+0x8a>
            *PageError = address;
 80005b8:	6034      	str	r4, [r6, #0]
            break;
 80005ba:	e000      	b.n	80005be <HAL_FLASHEx_Erase+0x8a>
  HAL_StatusTypeDef status = HAL_ERROR;
 80005bc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80005be:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_FLASHEx_Erase+0x98>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	761a      	strb	r2, [r3, #24]
}
 80005c4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(&pFlash);
 80005c6:	2002      	movs	r0, #2
 80005c8:	e7fc      	b.n	80005c4 <HAL_FLASHEx_Erase+0x90>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	200008c8 	.word	0x200008c8
 80005d0:	0000c350 	.word	0x0000c350
 80005d4:	40022000 	.word	0x40022000

080005d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	46c6      	mov	lr, r8
 80005dc:	b500      	push	{lr}
 80005de:	b082      	sub	sp, #8
  uint32_t position = 0x00U;
 80005e0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80005e2:	e038      	b.n	8000656 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005e4:	2603      	movs	r6, #3
 80005e6:	e000      	b.n	80005ea <HAL_GPIO_Init+0x12>
 80005e8:	2600      	movs	r6, #0
 80005ea:	40ae      	lsls	r6, r5
 80005ec:	0035      	movs	r5, r6
 80005ee:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80005f0:	3402      	adds	r4, #2
 80005f2:	00a4      	lsls	r4, r4, #2
 80005f4:	4e55      	ldr	r6, [pc, #340]	; (800074c <HAL_GPIO_Init+0x174>)
 80005f6:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005f8:	4c55      	ldr	r4, [pc, #340]	; (8000750 <HAL_GPIO_Init+0x178>)
 80005fa:	6825      	ldr	r5, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80005fc:	4642      	mov	r2, r8
 80005fe:	43d4      	mvns	r4, r2
 8000600:	002e      	movs	r6, r5
 8000602:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000604:	684a      	ldr	r2, [r1, #4]
 8000606:	03d2      	lsls	r2, r2, #15
 8000608:	d502      	bpl.n	8000610 <HAL_GPIO_Init+0x38>
        {
          SET_BIT(temp, iocurrent); 
 800060a:	4642      	mov	r2, r8
 800060c:	4315      	orrs	r5, r2
 800060e:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8000610:	4d4f      	ldr	r5, [pc, #316]	; (8000750 <HAL_GPIO_Init+0x178>)
 8000612:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000614:	686d      	ldr	r5, [r5, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000616:	002e      	movs	r6, r5
 8000618:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800061a:	684a      	ldr	r2, [r1, #4]
 800061c:	0392      	lsls	r2, r2, #14
 800061e:	d502      	bpl.n	8000626 <HAL_GPIO_Init+0x4e>
        { 
          SET_BIT(temp, iocurrent); 
 8000620:	4642      	mov	r2, r8
 8000622:	4315      	orrs	r5, r2
 8000624:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8000626:	4d4a      	ldr	r5, [pc, #296]	; (8000750 <HAL_GPIO_Init+0x178>)
 8000628:	606e      	str	r6, [r5, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800062a:	68ad      	ldr	r5, [r5, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800062c:	002e      	movs	r6, r5
 800062e:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000630:	684a      	ldr	r2, [r1, #4]
 8000632:	02d2      	lsls	r2, r2, #11
 8000634:	d502      	bpl.n	800063c <HAL_GPIO_Init+0x64>
        {
          SET_BIT(temp, iocurrent); 
 8000636:	4642      	mov	r2, r8
 8000638:	4315      	orrs	r5, r2
 800063a:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 800063c:	4d44      	ldr	r5, [pc, #272]	; (8000750 <HAL_GPIO_Init+0x178>)
 800063e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000640:	68ed      	ldr	r5, [r5, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000642:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000644:	684a      	ldr	r2, [r1, #4]
 8000646:	0292      	lsls	r2, r2, #10
 8000648:	d502      	bpl.n	8000650 <HAL_GPIO_Init+0x78>
        {
          SET_BIT(temp, iocurrent); 
 800064a:	4642      	mov	r2, r8
 800064c:	432a      	orrs	r2, r5
 800064e:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8000650:	4a3f      	ldr	r2, [pc, #252]	; (8000750 <HAL_GPIO_Init+0x178>)
 8000652:	60d4      	str	r4, [r2, #12]
      }
    }
    
    position++;
 8000654:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000656:	680a      	ldr	r2, [r1, #0]
 8000658:	0014      	movs	r4, r2
 800065a:	40dc      	lsrs	r4, r3
 800065c:	d071      	beq.n	8000742 <HAL_GPIO_Init+0x16a>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800065e:	2501      	movs	r5, #1
 8000660:	409d      	lsls	r5, r3
 8000662:	402a      	ands	r2, r5
 8000664:	4690      	mov	r8, r2
    if(iocurrent)
 8000666:	d0f5      	beq.n	8000654 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000668:	684c      	ldr	r4, [r1, #4]
 800066a:	2c02      	cmp	r4, #2
 800066c:	d001      	beq.n	8000672 <HAL_GPIO_Init+0x9a>
 800066e:	2c12      	cmp	r4, #18
 8000670:	d10e      	bne.n	8000690 <HAL_GPIO_Init+0xb8>
        temp = GPIOx->AFR[position >> 3];
 8000672:	08dc      	lsrs	r4, r3, #3
 8000674:	3408      	adds	r4, #8
 8000676:	00a4      	lsls	r4, r4, #2
 8000678:	5827      	ldr	r7, [r4, r0]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800067a:	2607      	movs	r6, #7
 800067c:	401e      	ands	r6, r3
 800067e:	00b6      	lsls	r6, r6, #2
 8000680:	220f      	movs	r2, #15
 8000682:	40b2      	lsls	r2, r6
 8000684:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000686:	690a      	ldr	r2, [r1, #16]
 8000688:	40b2      	lsls	r2, r6
 800068a:	0016      	movs	r6, r2
 800068c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 800068e:	5026      	str	r6, [r4, r0]
      temp = GPIOx->MODER;
 8000690:	6802      	ldr	r2, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000692:	005f      	lsls	r7, r3, #1
 8000694:	2403      	movs	r4, #3
 8000696:	0026      	movs	r6, r4
 8000698:	40be      	lsls	r6, r7
 800069a:	43f6      	mvns	r6, r6
 800069c:	4032      	ands	r2, r6
 800069e:	4694      	mov	ip, r2
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a0:	684a      	ldr	r2, [r1, #4]
 80006a2:	4014      	ands	r4, r2
 80006a4:	40bc      	lsls	r4, r7
 80006a6:	4662      	mov	r2, ip
 80006a8:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80006aa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ac:	684c      	ldr	r4, [r1, #4]
 80006ae:	1e62      	subs	r2, r4, #1
 80006b0:	2a01      	cmp	r2, #1
 80006b2:	d903      	bls.n	80006bc <HAL_GPIO_Init+0xe4>
 80006b4:	2c11      	cmp	r4, #17
 80006b6:	d001      	beq.n	80006bc <HAL_GPIO_Init+0xe4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006b8:	2c12      	cmp	r4, #18
 80006ba:	d110      	bne.n	80006de <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR; 
 80006bc:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006be:	4034      	ands	r4, r6
 80006c0:	46a4      	mov	ip, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80006c2:	68cc      	ldr	r4, [r1, #12]
 80006c4:	40bc      	lsls	r4, r7
 80006c6:	4662      	mov	r2, ip
 80006c8:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 80006ca:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80006cc:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80006ce:	43ac      	bics	r4, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006d0:	684a      	ldr	r2, [r1, #4]
 80006d2:	0912      	lsrs	r2, r2, #4
 80006d4:	2501      	movs	r5, #1
 80006d6:	4015      	ands	r5, r2
 80006d8:	409d      	lsls	r5, r3
 80006da:	4325      	orrs	r5, r4
        GPIOx->OTYPER = temp;
 80006dc:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80006de:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006e0:	4026      	ands	r6, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80006e2:	688c      	ldr	r4, [r1, #8]
 80006e4:	40bc      	lsls	r4, r7
 80006e6:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80006e8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006ea:	684a      	ldr	r2, [r1, #4]
 80006ec:	00d2      	lsls	r2, r2, #3
 80006ee:	d5b1      	bpl.n	8000654 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f0:	4d18      	ldr	r5, [pc, #96]	; (8000754 <HAL_GPIO_Init+0x17c>)
 80006f2:	69ae      	ldr	r6, [r5, #24]
 80006f4:	2401      	movs	r4, #1
 80006f6:	4326      	orrs	r6, r4
 80006f8:	61ae      	str	r6, [r5, #24]
 80006fa:	69ad      	ldr	r5, [r5, #24]
 80006fc:	402c      	ands	r4, r5
 80006fe:	9401      	str	r4, [sp, #4]
 8000700:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000702:	089c      	lsrs	r4, r3, #2
 8000704:	1ca5      	adds	r5, r4, #2
 8000706:	00ad      	lsls	r5, r5, #2
 8000708:	4e10      	ldr	r6, [pc, #64]	; (800074c <HAL_GPIO_Init+0x174>)
 800070a:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800070c:	2503      	movs	r5, #3
 800070e:	401d      	ands	r5, r3
 8000710:	00ad      	lsls	r5, r5, #2
 8000712:	260f      	movs	r6, #15
 8000714:	40ae      	lsls	r6, r5
 8000716:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000718:	2690      	movs	r6, #144	; 0x90
 800071a:	05f6      	lsls	r6, r6, #23
 800071c:	42b0      	cmp	r0, r6
 800071e:	d100      	bne.n	8000722 <HAL_GPIO_Init+0x14a>
 8000720:	e762      	b.n	80005e8 <HAL_GPIO_Init+0x10>
 8000722:	4e0d      	ldr	r6, [pc, #52]	; (8000758 <HAL_GPIO_Init+0x180>)
 8000724:	42b0      	cmp	r0, r6
 8000726:	d008      	beq.n	800073a <HAL_GPIO_Init+0x162>
 8000728:	4e0c      	ldr	r6, [pc, #48]	; (800075c <HAL_GPIO_Init+0x184>)
 800072a:	42b0      	cmp	r0, r6
 800072c:	d007      	beq.n	800073e <HAL_GPIO_Init+0x166>
 800072e:	4e0c      	ldr	r6, [pc, #48]	; (8000760 <HAL_GPIO_Init+0x188>)
 8000730:	42b0      	cmp	r0, r6
 8000732:	d100      	bne.n	8000736 <HAL_GPIO_Init+0x15e>
 8000734:	e756      	b.n	80005e4 <HAL_GPIO_Init+0xc>
 8000736:	2605      	movs	r6, #5
 8000738:	e757      	b.n	80005ea <HAL_GPIO_Init+0x12>
 800073a:	2601      	movs	r6, #1
 800073c:	e755      	b.n	80005ea <HAL_GPIO_Init+0x12>
 800073e:	2602      	movs	r6, #2
 8000740:	e753      	b.n	80005ea <HAL_GPIO_Init+0x12>
  } 
}
 8000742:	b002      	add	sp, #8
 8000744:	bc04      	pop	{r2}
 8000746:	4690      	mov	r8, r2
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40010000 	.word	0x40010000
 8000750:	40010400 	.word	0x40010400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	48000800 	.word	0x48000800
 8000760:	48000c00 	.word	0x48000c00

08000764 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000764:	6903      	ldr	r3, [r0, #16]
 8000766:	420b      	tst	r3, r1
 8000768:	d101      	bne.n	800076e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800076a:	2000      	movs	r0, #0
  }
  return bitstatus;
  }
 800076c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 800076e:	2001      	movs	r0, #1
 8000770:	e7fc      	b.n	800076c <HAL_GPIO_ReadPin+0x8>

08000772 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000772:	2a00      	cmp	r2, #0
 8000774:	d101      	bne.n	800077a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000776:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000778:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800077a:	6181      	str	r1, [r0, #24]
 800077c:	e7fc      	b.n	8000778 <HAL_GPIO_WritePin+0x6>

0800077e <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 800077e:	4770      	bx	lr

08000780 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000780:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	4218      	tst	r0, r3
 8000788:	d100      	bne.n	800078c <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800078a:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800078e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000790:	f7ff fff5 	bl	800077e <HAL_GPIO_EXTI_Callback>
}
 8000794:	e7f9      	b.n	800078a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40010400 	.word	0x40010400

0800079c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007a2:	6803      	ldr	r3, [r0, #0]
 80007a4:	07db      	lsls	r3, r3, #31
 80007a6:	d526      	bpl.n	80007f6 <HAL_RCC_OscConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80007a8:	4bae      	ldr	r3, [pc, #696]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	230c      	movs	r3, #12
 80007ae:	4013      	ands	r3, r2
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d018      	beq.n	80007e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007b4:	4bab      	ldr	r3, [pc, #684]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80007b6:	685a      	ldr	r2, [r3, #4]
 80007b8:	230c      	movs	r3, #12
 80007ba:	4013      	ands	r3, r2
 80007bc:	2b08      	cmp	r3, #8
 80007be:	d00e      	beq.n	80007de <HAL_RCC_OscConfig+0x42>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c0:	6863      	ldr	r3, [r4, #4]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d03c      	beq.n	8000840 <HAL_RCC_OscConfig+0xa4>
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d151      	bne.n	800086e <HAL_RCC_OscConfig+0xd2>
 80007ca:	4ba6      	ldr	r3, [pc, #664]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	49a6      	ldr	r1, [pc, #664]	; (8000a68 <HAL_RCC_OscConfig+0x2cc>)
 80007d0:	400a      	ands	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	49a5      	ldr	r1, [pc, #660]	; (8000a6c <HAL_RCC_OscConfig+0x2d0>)
 80007d8:	400a      	ands	r2, r1
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e036      	b.n	800084c <HAL_RCC_OscConfig+0xb0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007de:	4ba1      	ldr	r3, [pc, #644]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	03db      	lsls	r3, r3, #15
 80007e4:	d5ec      	bpl.n	80007c0 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e6:	4b9f      	ldr	r3, [pc, #636]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	039b      	lsls	r3, r3, #14
 80007ec:	d503      	bpl.n	80007f6 <HAL_RCC_OscConfig+0x5a>
 80007ee:	6863      	ldr	r3, [r4, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d100      	bne.n	80007f6 <HAL_RCC_OscConfig+0x5a>
 80007f4:	e1ec      	b.n	8000bd0 <HAL_RCC_OscConfig+0x434>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	079b      	lsls	r3, r3, #30
 80007fa:	d573      	bpl.n	80008e4 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007fc:	4b99      	ldr	r3, [pc, #612]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	220c      	movs	r2, #12
 8000802:	421a      	tst	r2, r3
 8000804:	d05d      	beq.n	80008c2 <HAL_RCC_OscConfig+0x126>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000806:	4b97      	ldr	r3, [pc, #604]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	230c      	movs	r3, #12
 800080c:	4013      	ands	r3, r2
 800080e:	2b08      	cmp	r3, #8
 8000810:	d053      	beq.n	80008ba <HAL_RCC_OscConfig+0x11e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000812:	68e3      	ldr	r3, [r4, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d100      	bne.n	800081a <HAL_RCC_OscConfig+0x7e>
 8000818:	e086      	b.n	8000928 <HAL_RCC_OscConfig+0x18c>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800081a:	4a92      	ldr	r2, [pc, #584]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 800081c:	6813      	ldr	r3, [r2, #0]
 800081e:	2101      	movs	r1, #1
 8000820:	430b      	orrs	r3, r1
 8000822:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000824:	f7ff fd38 	bl	8000298 <HAL_GetTick>
 8000828:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800082a:	4b8e      	ldr	r3, [pc, #568]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	079b      	lsls	r3, r3, #30
 8000830:	d471      	bmi.n	8000916 <HAL_RCC_OscConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000832:	f7ff fd31 	bl	8000298 <HAL_GetTick>
 8000836:	1b40      	subs	r0, r0, r5
 8000838:	2802      	cmp	r0, #2
 800083a:	d9f6      	bls.n	800082a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_TIMEOUT;
 800083c:	2003      	movs	r0, #3
 800083e:	e1ca      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000840:	4a88      	ldr	r2, [pc, #544]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000842:	6811      	ldr	r1, [r2, #0]
 8000844:	2380      	movs	r3, #128	; 0x80
 8000846:	025b      	lsls	r3, r3, #9
 8000848:	430b      	orrs	r3, r1
 800084a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800084c:	6863      	ldr	r3, [r4, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d025      	beq.n	800089e <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 8000852:	f7ff fd21 	bl	8000298 <HAL_GetTick>
 8000856:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000858:	4b82      	ldr	r3, [pc, #520]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	039b      	lsls	r3, r3, #14
 800085e:	d4ca      	bmi.n	80007f6 <HAL_RCC_OscConfig+0x5a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000860:	f7ff fd1a 	bl	8000298 <HAL_GetTick>
 8000864:	1b40      	subs	r0, r0, r5
 8000866:	2864      	cmp	r0, #100	; 0x64
 8000868:	d9f6      	bls.n	8000858 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 800086a:	2003      	movs	r0, #3
 800086c:	e1b3      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800086e:	2b05      	cmp	r3, #5
 8000870:	d009      	beq.n	8000886 <HAL_RCC_OscConfig+0xea>
 8000872:	4b7c      	ldr	r3, [pc, #496]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	497c      	ldr	r1, [pc, #496]	; (8000a68 <HAL_RCC_OscConfig+0x2cc>)
 8000878:	400a      	ands	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	497b      	ldr	r1, [pc, #492]	; (8000a6c <HAL_RCC_OscConfig+0x2d0>)
 8000880:	400a      	ands	r2, r1
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	e7e2      	b.n	800084c <HAL_RCC_OscConfig+0xb0>
 8000886:	4b77      	ldr	r3, [pc, #476]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	02d2      	lsls	r2, r2, #11
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	6819      	ldr	r1, [r3, #0]
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	0252      	lsls	r2, r2, #9
 8000898:	430a      	orrs	r2, r1
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e7d6      	b.n	800084c <HAL_RCC_OscConfig+0xb0>
        tickstart = HAL_GetTick();
 800089e:	f7ff fcfb 	bl	8000298 <HAL_GetTick>
 80008a2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008a4:	4b6f      	ldr	r3, [pc, #444]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	039b      	lsls	r3, r3, #14
 80008aa:	d5a4      	bpl.n	80007f6 <HAL_RCC_OscConfig+0x5a>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ac:	f7ff fcf4 	bl	8000298 <HAL_GetTick>
 80008b0:	1b40      	subs	r0, r0, r5
 80008b2:	2864      	cmp	r0, #100	; 0x64
 80008b4:	d9f6      	bls.n	80008a4 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e18d      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80008ba:	4b6a      	ldr	r3, [pc, #424]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	03db      	lsls	r3, r3, #15
 80008c0:	d4a7      	bmi.n	8000812 <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008c2:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	079b      	lsls	r3, r3, #30
 80008c8:	d504      	bpl.n	80008d4 <HAL_RCC_OscConfig+0x138>
 80008ca:	68e3      	ldr	r3, [r4, #12]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d001      	beq.n	80008d4 <HAL_RCC_OscConfig+0x138>
        return HAL_ERROR;
 80008d0:	2001      	movs	r0, #1
 80008d2:	e180      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d4:	4963      	ldr	r1, [pc, #396]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80008d6:	680b      	ldr	r3, [r1, #0]
 80008d8:	22f8      	movs	r2, #248	; 0xf8
 80008da:	4393      	bics	r3, r2
 80008dc:	6922      	ldr	r2, [r4, #16]
 80008de:	00d2      	lsls	r2, r2, #3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	071b      	lsls	r3, r3, #28
 80008e8:	d544      	bpl.n	8000974 <HAL_RCC_OscConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008ea:	69e3      	ldr	r3, [r4, #28]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d02e      	beq.n	800094e <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008f0:	4a5c      	ldr	r2, [pc, #368]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80008f2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80008f4:	2101      	movs	r1, #1
 80008f6:	430b      	orrs	r3, r1
 80008f8:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008fa:	f7ff fccd 	bl	8000298 <HAL_GetTick>
 80008fe:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000900:	4b58      	ldr	r3, [pc, #352]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000904:	079b      	lsls	r3, r3, #30
 8000906:	d435      	bmi.n	8000974 <HAL_RCC_OscConfig+0x1d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000908:	f7ff fcc6 	bl	8000298 <HAL_GetTick>
 800090c:	1b40      	subs	r0, r0, r5
 800090e:	2802      	cmp	r0, #2
 8000910:	d9f6      	bls.n	8000900 <HAL_RCC_OscConfig+0x164>
        {
          return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e15f      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000916:	4953      	ldr	r1, [pc, #332]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000918:	680b      	ldr	r3, [r1, #0]
 800091a:	22f8      	movs	r2, #248	; 0xf8
 800091c:	4393      	bics	r3, r2
 800091e:	6922      	ldr	r2, [r4, #16]
 8000920:	00d2      	lsls	r2, r2, #3
 8000922:	4313      	orrs	r3, r2
 8000924:	600b      	str	r3, [r1, #0]
 8000926:	e7dd      	b.n	80008e4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8000928:	4a4e      	ldr	r2, [pc, #312]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 800092a:	6813      	ldr	r3, [r2, #0]
 800092c:	2101      	movs	r1, #1
 800092e:	438b      	bics	r3, r1
 8000930:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000932:	f7ff fcb1 	bl	8000298 <HAL_GetTick>
 8000936:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000938:	4b4a      	ldr	r3, [pc, #296]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	079b      	lsls	r3, r3, #30
 800093e:	d5d1      	bpl.n	80008e4 <HAL_RCC_OscConfig+0x148>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000940:	f7ff fcaa 	bl	8000298 <HAL_GetTick>
 8000944:	1b40      	subs	r0, r0, r5
 8000946:	2802      	cmp	r0, #2
 8000948:	d9f6      	bls.n	8000938 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 800094a:	2003      	movs	r0, #3
 800094c:	e143      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000950:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000952:	2101      	movs	r1, #1
 8000954:	438b      	bics	r3, r1
 8000956:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000958:	f7ff fc9e 	bl	8000298 <HAL_GetTick>
 800095c:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800095e:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	079b      	lsls	r3, r3, #30
 8000964:	d506      	bpl.n	8000974 <HAL_RCC_OscConfig+0x1d8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000966:	f7ff fc97 	bl	8000298 <HAL_GetTick>
 800096a:	1b40      	subs	r0, r0, r5
 800096c:	2802      	cmp	r0, #2
 800096e:	d9f6      	bls.n	800095e <HAL_RCC_OscConfig+0x1c2>
        {
          return HAL_TIMEOUT;
 8000970:	2003      	movs	r0, #3
 8000972:	e130      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000974:	6823      	ldr	r3, [r4, #0]
 8000976:	075b      	lsls	r3, r3, #29
 8000978:	d400      	bmi.n	800097c <HAL_RCC_OscConfig+0x1e0>
 800097a:	e07f      	b.n	8000a7c <HAL_RCC_OscConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800097c:	4b39      	ldr	r3, [pc, #228]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	d41d      	bmi.n	80009c0 <HAL_RCC_OscConfig+0x224>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	4a37      	ldr	r2, [pc, #220]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000986:	69d1      	ldr	r1, [r2, #28]
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	0540      	lsls	r0, r0, #21
 800098c:	4301      	orrs	r1, r0
 800098e:	61d1      	str	r1, [r2, #28]
 8000990:	69d3      	ldr	r3, [r2, #28]
 8000992:	4003      	ands	r3, r0
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000998:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800099a:	4b35      	ldr	r3, [pc, #212]	; (8000a70 <HAL_RCC_OscConfig+0x2d4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	d510      	bpl.n	80009c4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009a2:	68a3      	ldr	r3, [r4, #8]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d021      	beq.n	80009ec <HAL_RCC_OscConfig+0x250>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d136      	bne.n	8000a1a <HAL_RCC_OscConfig+0x27e>
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80009ae:	6a1a      	ldr	r2, [r3, #32]
 80009b0:	2101      	movs	r1, #1
 80009b2:	438a      	bics	r2, r1
 80009b4:	621a      	str	r2, [r3, #32]
 80009b6:	6a1a      	ldr	r2, [r3, #32]
 80009b8:	3103      	adds	r1, #3
 80009ba:	438a      	bics	r2, r1
 80009bc:	621a      	str	r2, [r3, #32]
 80009be:	e01a      	b.n	80009f6 <HAL_RCC_OscConfig+0x25a>
    FlagStatus       pwrclkchanged = RESET;
 80009c0:	2500      	movs	r5, #0
 80009c2:	e7ea      	b.n	800099a <HAL_RCC_OscConfig+0x1fe>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009c4:	4a2a      	ldr	r2, [pc, #168]	; (8000a70 <HAL_RCC_OscConfig+0x2d4>)
 80009c6:	6811      	ldr	r1, [r2, #0]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	430b      	orrs	r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80009d0:	f7ff fc62 	bl	8000298 <HAL_GetTick>
 80009d4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d6:	4b26      	ldr	r3, [pc, #152]	; (8000a70 <HAL_RCC_OscConfig+0x2d4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	d4e1      	bmi.n	80009a2 <HAL_RCC_OscConfig+0x206>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009de:	f7ff fc5b 	bl	8000298 <HAL_GetTick>
 80009e2:	1b80      	subs	r0, r0, r6
 80009e4:	2864      	cmp	r0, #100	; 0x64
 80009e6:	d9f6      	bls.n	80009d6 <HAL_RCC_OscConfig+0x23a>
          return HAL_TIMEOUT;
 80009e8:	2003      	movs	r0, #3
 80009ea:	e0f4      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 80009ee:	6a13      	ldr	r3, [r2, #32]
 80009f0:	2101      	movs	r1, #1
 80009f2:	430b      	orrs	r3, r1
 80009f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009f6:	68a3      	ldr	r3, [r4, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d024      	beq.n	8000a46 <HAL_RCC_OscConfig+0x2aa>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009fc:	f7ff fc4c 	bl	8000298 <HAL_GetTick>
 8000a00:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000a04:	6a1b      	ldr	r3, [r3, #32]
 8000a06:	079b      	lsls	r3, r3, #30
 8000a08:	d436      	bmi.n	8000a78 <HAL_RCC_OscConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a0a:	f7ff fc45 	bl	8000298 <HAL_GetTick>
 8000a0e:	1b80      	subs	r0, r0, r6
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_RCC_OscConfig+0x2d8>)
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d9f5      	bls.n	8000a02 <HAL_RCC_OscConfig+0x266>
        {
          return HAL_TIMEOUT;
 8000a16:	2003      	movs	r0, #3
 8000a18:	e0dd      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	d009      	beq.n	8000a32 <HAL_RCC_OscConfig+0x296>
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000a20:	6a1a      	ldr	r2, [r3, #32]
 8000a22:	2101      	movs	r1, #1
 8000a24:	438a      	bics	r2, r1
 8000a26:	621a      	str	r2, [r3, #32]
 8000a28:	6a1a      	ldr	r2, [r3, #32]
 8000a2a:	3103      	adds	r1, #3
 8000a2c:	438a      	bics	r2, r1
 8000a2e:	621a      	str	r2, [r3, #32]
 8000a30:	e7e1      	b.n	80009f6 <HAL_RCC_OscConfig+0x25a>
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000a34:	6a1a      	ldr	r2, [r3, #32]
 8000a36:	2104      	movs	r1, #4
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	621a      	str	r2, [r3, #32]
 8000a3c:	6a1a      	ldr	r2, [r3, #32]
 8000a3e:	3903      	subs	r1, #3
 8000a40:	430a      	orrs	r2, r1
 8000a42:	621a      	str	r2, [r3, #32]
 8000a44:	e7d7      	b.n	80009f6 <HAL_RCC_OscConfig+0x25a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a46:	f7ff fc27 	bl	8000298 <HAL_GetTick>
 8000a4a:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_RCC_OscConfig+0x2c8>)
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	079b      	lsls	r3, r3, #30
 8000a52:	d511      	bpl.n	8000a78 <HAL_RCC_OscConfig+0x2dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a54:	f7ff fc20 	bl	8000298 <HAL_GetTick>
 8000a58:	1b80      	subs	r0, r0, r6
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_RCC_OscConfig+0x2d8>)
 8000a5c:	4298      	cmp	r0, r3
 8000a5e:	d9f5      	bls.n	8000a4c <HAL_RCC_OscConfig+0x2b0>
        {
          return HAL_TIMEOUT;
 8000a60:	2003      	movs	r0, #3
 8000a62:	e0b8      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
 8000a64:	40021000 	.word	0x40021000
 8000a68:	fffeffff 	.word	0xfffeffff
 8000a6c:	fffbffff 	.word	0xfffbffff
 8000a70:	40007000 	.word	0x40007000
 8000a74:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a78:	2d01      	cmp	r5, #1
 8000a7a:	d033      	beq.n	8000ae4 <HAL_RCC_OscConfig+0x348>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	06db      	lsls	r3, r3, #27
 8000a80:	d510      	bpl.n	8000aa4 <HAL_RCC_OscConfig+0x308>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a82:	6963      	ldr	r3, [r4, #20]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d033      	beq.n	8000af0 <HAL_RCC_OscConfig+0x354>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000a88:	3305      	adds	r3, #5
 8000a8a:	d151      	bne.n	8000b30 <HAL_RCC_OscConfig+0x394>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000a8c:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000a8e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000a90:	2104      	movs	r1, #4
 8000a92:	438b      	bics	r3, r1
 8000a94:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a96:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000a98:	31f4      	adds	r1, #244	; 0xf4
 8000a9a:	438b      	bics	r3, r1
 8000a9c:	69a1      	ldr	r1, [r4, #24]
 8000a9e:	00c9      	lsls	r1, r1, #3
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aa4:	6a23      	ldr	r3, [r4, #32]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d100      	bne.n	8000aac <HAL_RCC_OscConfig+0x310>
 8000aaa:	e093      	b.n	8000bd4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000aae:	6851      	ldr	r1, [r2, #4]
 8000ab0:	220c      	movs	r2, #12
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	2a08      	cmp	r2, #8
 8000ab6:	d100      	bne.n	8000aba <HAL_RCC_OscConfig+0x31e>
 8000ab8:	e08f      	b.n	8000bda <HAL_RCC_OscConfig+0x43e>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d04f      	beq.n	8000b5e <HAL_RCC_OscConfig+0x3c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000abe:	4a48      	ldr	r2, [pc, #288]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	4948      	ldr	r1, [pc, #288]	; (8000be4 <HAL_RCC_OscConfig+0x448>)
 8000ac4:	400b      	ands	r3, r1
 8000ac6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fbe6 	bl	8000298 <HAL_GetTick>
 8000acc:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ace:	4b44      	ldr	r3, [pc, #272]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	019b      	lsls	r3, r3, #6
 8000ad4:	d57a      	bpl.n	8000bcc <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad6:	f7ff fbdf 	bl	8000298 <HAL_GetTick>
 8000ada:	1b00      	subs	r0, r0, r4
 8000adc:	2802      	cmp	r0, #2
 8000ade:	d9f6      	bls.n	8000ace <HAL_RCC_OscConfig+0x332>
          {
            return HAL_TIMEOUT;
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	e078      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae4:	4a3e      	ldr	r2, [pc, #248]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000ae6:	69d3      	ldr	r3, [r2, #28]
 8000ae8:	493f      	ldr	r1, [pc, #252]	; (8000be8 <HAL_RCC_OscConfig+0x44c>)
 8000aea:	400b      	ands	r3, r1
 8000aec:	61d3      	str	r3, [r2, #28]
 8000aee:	e7c5      	b.n	8000a7c <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000af0:	4b3b      	ldr	r3, [pc, #236]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000af4:	2104      	movs	r1, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afc:	3903      	subs	r1, #3
 8000afe:	430a      	orrs	r2, r1
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b02:	f7ff fbc9 	bl	8000298 <HAL_GetTick>
 8000b06:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b08:	4b35      	ldr	r3, [pc, #212]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0c:	079b      	lsls	r3, r3, #30
 8000b0e:	d406      	bmi.n	8000b1e <HAL_RCC_OscConfig+0x382>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b10:	f7ff fbc2 	bl	8000298 <HAL_GetTick>
 8000b14:	1b40      	subs	r0, r0, r5
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f6      	bls.n	8000b08 <HAL_RCC_OscConfig+0x36c>
          return HAL_TIMEOUT;
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	e05b      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b1e:	4930      	ldr	r1, [pc, #192]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b20:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8000b22:	22f8      	movs	r2, #248	; 0xf8
 8000b24:	4393      	bics	r3, r2
 8000b26:	69a2      	ldr	r2, [r4, #24]
 8000b28:	00d2      	lsls	r2, r2, #3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	634b      	str	r3, [r1, #52]	; 0x34
 8000b2e:	e7b9      	b.n	8000aa4 <HAL_RCC_OscConfig+0x308>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b34:	2104      	movs	r1, #4
 8000b36:	430a      	orrs	r2, r1
 8000b38:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b3c:	3903      	subs	r1, #3
 8000b3e:	438a      	bics	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b42:	f7ff fba9 	bl	8000298 <HAL_GetTick>
 8000b46:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	079b      	lsls	r3, r3, #30
 8000b4e:	d5a9      	bpl.n	8000aa4 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b50:	f7ff fba2 	bl	8000298 <HAL_GetTick>
 8000b54:	1b40      	subs	r0, r0, r5
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d9f6      	bls.n	8000b48 <HAL_RCC_OscConfig+0x3ac>
          return HAL_TIMEOUT;
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	e03b      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_DISABLE();
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b60:	6813      	ldr	r3, [r2, #0]
 8000b62:	4920      	ldr	r1, [pc, #128]	; (8000be4 <HAL_RCC_OscConfig+0x448>)
 8000b64:	400b      	ands	r3, r1
 8000b66:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b68:	f7ff fb96 	bl	8000298 <HAL_GetTick>
 8000b6c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	019b      	lsls	r3, r3, #6
 8000b74:	d506      	bpl.n	8000b84 <HAL_RCC_OscConfig+0x3e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b76:	f7ff fb8f 	bl	8000298 <HAL_GetTick>
 8000b7a:	1b40      	subs	r0, r0, r5
 8000b7c:	2802      	cmp	r0, #2
 8000b7e:	d9f6      	bls.n	8000b6e <HAL_RCC_OscConfig+0x3d2>
            return HAL_TIMEOUT;
 8000b80:	2003      	movs	r0, #3
 8000b82:	e028      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b88:	210f      	movs	r1, #15
 8000b8a:	438a      	bics	r2, r1
 8000b8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4915      	ldr	r1, [pc, #84]	; (8000bec <HAL_RCC_OscConfig+0x450>)
 8000b96:	400a      	ands	r2, r1
 8000b98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000b9c:	4301      	orrs	r1, r0
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	0452      	lsls	r2, r2, #17
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bac:	f7ff fb74 	bl	8000298 <HAL_GetTick>
 8000bb0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_RCC_OscConfig+0x444>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	019b      	lsls	r3, r3, #6
 8000bb8:	d406      	bmi.n	8000bc8 <HAL_RCC_OscConfig+0x42c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bba:	f7ff fb6d 	bl	8000298 <HAL_GetTick>
 8000bbe:	1b00      	subs	r0, r0, r4
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9f6      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	e006      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000bc8:	2000      	movs	r0, #0
 8000bca:	e004      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
 8000bcc:	2000      	movs	r0, #0
 8000bce:	e002      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
        return HAL_ERROR;
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	e000      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 8000bd4:	2000      	movs	r0, #0
}
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000bda:	2001      	movs	r0, #1
 8000bdc:	e7fb      	b.n	8000bd6 <HAL_RCC_OscConfig+0x43a>
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	40021000 	.word	0x40021000
 8000be4:	feffffff 	.word	0xfeffffff
 8000be8:	efffffff 	.word	0xefffffff
 8000bec:	ffc2ffff 	.word	0xffc2ffff

08000bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bf0:	b530      	push	{r4, r5, lr}
 8000bf2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000bf4:	aa04      	add	r2, sp, #16
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_RCC_GetSysClockFreq+0x64>)
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	c832      	ldmia	r0!, {r1, r4, r5}
 8000bfc:	c232      	stmia	r2!, {r1, r4, r5}
 8000bfe:	0011      	movs	r1, r2
 8000c00:	6802      	ldr	r2, [r0, #0]
 8000c02:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000c04:	466a      	mov	r2, sp
 8000c06:	3310      	adds	r3, #16
 8000c08:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000c0a:	c213      	stmia	r2!, {r0, r1, r4}
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c12:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c14:	230c      	movs	r3, #12
 8000c16:	4013      	ands	r3, r2
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d119      	bne.n	8000c50 <HAL_RCC_GetSysClockFreq+0x60>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c1c:	0c91      	lsrs	r1, r2, #18
 8000c1e:	3307      	adds	r3, #7
 8000c20:	4019      	ands	r1, r3
 8000c22:	a804      	add	r0, sp, #16
 8000c24:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000c26:	490c      	ldr	r1, [pc, #48]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x68>)
 8000c28:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	4669      	mov	r1, sp
 8000c2e:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000c30:	03d3      	lsls	r3, r2, #15
 8000c32:	d408      	bmi.n	8000c46 <HAL_RCC_GetSysClockFreq+0x56>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000c34:	0163      	lsls	r3, r4, #5
 8000c36:	1b1b      	subs	r3, r3, r4
 8000c38:	0198      	lsls	r0, r3, #6
 8000c3a:	1ac0      	subs	r0, r0, r3
 8000c3c:	00c0      	lsls	r0, r0, #3
 8000c3e:	1904      	adds	r4, r0, r4
 8000c40:	0220      	lsls	r0, r4, #8
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c42:	b009      	add	sp, #36	; 0x24
 8000c44:	bd30      	pop	{r4, r5, pc}
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000c48:	f7ff fa70 	bl	800012c <__udivsi3>
 8000c4c:	4360      	muls	r0, r4
 8000c4e:	e7f8      	b.n	8000c42 <HAL_RCC_GetSysClockFreq+0x52>
      sysclockfreq = HSE_VALUE;
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000c52:	e7f6      	b.n	8000c42 <HAL_RCC_GetSysClockFreq+0x52>
 8000c54:	08003708 	.word	0x08003708
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	007a1200 	.word	0x007a1200

08000c60 <HAL_RCC_ClockConfig>:
{
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	0005      	movs	r5, r0
 8000c64:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c66:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <HAL_RCC_ClockConfig+0x13c>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d20b      	bcs.n	8000c8a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c72:	494a      	ldr	r1, [pc, #296]	; (8000d9c <HAL_RCC_ClockConfig+0x13c>)
 8000c74:	680b      	ldr	r3, [r1, #0]
 8000c76:	2201      	movs	r2, #1
 8000c78:	4393      	bics	r3, r2
 8000c7a:	4323      	orrs	r3, r4
 8000c7c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c7e:	680b      	ldr	r3, [r1, #0]
 8000c80:	401a      	ands	r2, r3
 8000c82:	42a2      	cmp	r2, r4
 8000c84:	d001      	beq.n	8000c8a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8000c86:	2001      	movs	r0, #1
}
 8000c88:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c8a:	682b      	ldr	r3, [r5, #0]
 8000c8c:	079b      	lsls	r3, r3, #30
 8000c8e:	d506      	bpl.n	8000c9e <HAL_RCC_ClockConfig+0x3e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c90:	4a43      	ldr	r2, [pc, #268]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000c92:	6853      	ldr	r3, [r2, #4]
 8000c94:	21f0      	movs	r1, #240	; 0xf0
 8000c96:	438b      	bics	r3, r1
 8000c98:	68a9      	ldr	r1, [r5, #8]
 8000c9a:	430b      	orrs	r3, r1
 8000c9c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	07db      	lsls	r3, r3, #31
 8000ca2:	d54b      	bpl.n	8000d3c <HAL_RCC_ClockConfig+0xdc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ca4:	686b      	ldr	r3, [r5, #4]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d020      	beq.n	8000cec <HAL_RCC_ClockConfig+0x8c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d024      	beq.n	8000cf8 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cae:	4a3c      	ldr	r2, [pc, #240]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000cb0:	6812      	ldr	r2, [r2, #0]
 8000cb2:	0792      	lsls	r2, r2, #30
 8000cb4:	d56f      	bpl.n	8000d96 <HAL_RCC_ClockConfig+0x136>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb6:	493a      	ldr	r1, [pc, #232]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000cb8:	684a      	ldr	r2, [r1, #4]
 8000cba:	2003      	movs	r0, #3
 8000cbc:	4382      	bics	r2, r0
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000cc2:	f7ff fae9 	bl	8000298 <HAL_GetTick>
 8000cc6:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cc8:	686b      	ldr	r3, [r5, #4]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d01a      	beq.n	8000d04 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d026      	beq.n	8000d20 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	421a      	tst	r2, r3
 8000cda:	d02f      	beq.n	8000d3c <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cdc:	f7ff fadc 	bl	8000298 <HAL_GetTick>
 8000ce0:	1b80      	subs	r0, r0, r6
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <HAL_RCC_ClockConfig+0x144>)
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	d9f4      	bls.n	8000cd2 <HAL_RCC_ClockConfig+0x72>
          return HAL_TIMEOUT;
 8000ce8:	2003      	movs	r0, #3
 8000cea:	e7cd      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cec:	4a2c      	ldr	r2, [pc, #176]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	0392      	lsls	r2, r2, #14
 8000cf2:	d4e0      	bmi.n	8000cb6 <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	e7c7      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	0192      	lsls	r2, r2, #6
 8000cfe:	d4da      	bmi.n	8000cb6 <HAL_RCC_ClockConfig+0x56>
        return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
 8000d02:	e7c1      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d04:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	230c      	movs	r3, #12
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d015      	beq.n	8000d3c <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d10:	f7ff fac2 	bl	8000298 <HAL_GetTick>
 8000d14:	1b80      	subs	r0, r0, r6
 8000d16:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <HAL_RCC_ClockConfig+0x144>)
 8000d18:	4298      	cmp	r0, r3
 8000d1a:	d9f3      	bls.n	8000d04 <HAL_RCC_ClockConfig+0xa4>
          return HAL_TIMEOUT;
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	e7b3      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	230c      	movs	r3, #12
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d007      	beq.n	8000d3c <HAL_RCC_ClockConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d2c:	f7ff fab4 	bl	8000298 <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <HAL_RCC_ClockConfig+0x144>)
 8000d34:	4298      	cmp	r0, r3
 8000d36:	d9f3      	bls.n	8000d20 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8000d38:	2003      	movs	r0, #3
 8000d3a:	e7a5      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_RCC_ClockConfig+0x13c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	4013      	ands	r3, r2
 8000d44:	42a3      	cmp	r3, r4
 8000d46:	d90b      	bls.n	8000d60 <HAL_RCC_ClockConfig+0x100>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d48:	4914      	ldr	r1, [pc, #80]	; (8000d9c <HAL_RCC_ClockConfig+0x13c>)
 8000d4a:	680b      	ldr	r3, [r1, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4393      	bics	r3, r2
 8000d50:	4323      	orrs	r3, r4
 8000d52:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d54:	680b      	ldr	r3, [r1, #0]
 8000d56:	401a      	ands	r2, r3
 8000d58:	42a2      	cmp	r2, r4
 8000d5a:	d001      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	e793      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	075b      	lsls	r3, r3, #29
 8000d64:	d506      	bpl.n	8000d74 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000d68:	6853      	ldr	r3, [r2, #4]
 8000d6a:	490f      	ldr	r1, [pc, #60]	; (8000da8 <HAL_RCC_ClockConfig+0x148>)
 8000d6c:	400b      	ands	r3, r1
 8000d6e:	68e9      	ldr	r1, [r5, #12]
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000d74:	f7ff ff3c 	bl	8000bf0 <HAL_RCC_GetSysClockFreq>
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_RCC_ClockConfig+0x140>)
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	0912      	lsrs	r2, r2, #4
 8000d7e:	230f      	movs	r3, #15
 8000d80:	4013      	ands	r3, r2
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_RCC_ClockConfig+0x14c>)
 8000d84:	5cd3      	ldrb	r3, [r2, r3]
 8000d86:	40d8      	lsrs	r0, r3
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_RCC_ClockConfig+0x150>)
 8000d8a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fa59 	bl	8000244 <HAL_InitTick>
  return HAL_OK;
 8000d92:	2000      	movs	r0, #0
 8000d94:	e778      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
        return HAL_ERROR;
 8000d96:	2001      	movs	r0, #1
 8000d98:	e776      	b.n	8000c88 <HAL_RCC_ClockConfig+0x28>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	40022000 	.word	0x40022000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	00001388 	.word	0x00001388
 8000da8:	fffff8ff 	.word	0xfffff8ff
 8000dac:	08003964 	.word	0x08003964
 8000db0:	20000454 	.word	0x20000454

08000db4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000db4:	4b01      	ldr	r3, [pc, #4]	; (8000dbc <HAL_RCC_GetHCLKFreq+0x8>)
 8000db6:	6818      	ldr	r0, [r3, #0]
}
 8000db8:	4770      	bx	lr
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	20000454 	.word	0x20000454

08000dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dc0:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000dc2:	f7ff fff7 	bl	8000db4 <HAL_RCC_GetHCLKFreq>
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	0a12      	lsrs	r2, r2, #8
 8000dcc:	2307      	movs	r3, #7
 8000dce:	4013      	ands	r3, r2
 8000dd0:	4a02      	ldr	r2, [pc, #8]	; (8000ddc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	40d8      	lsrs	r0, r3
}    
 8000dd6:	bd10      	pop	{r4, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	08003974 	.word	0x08003974

08000de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000de0:	b570      	push	{r4, r5, r6, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000de6:	6803      	ldr	r3, [r0, #0]
 8000de8:	03db      	lsls	r3, r3, #15
 8000dea:	d535      	bpl.n	8000e58 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dec:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000dee:	69db      	ldr	r3, [r3, #28]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	d448      	bmi.n	8000e86 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000df4:	4a3a      	ldr	r2, [pc, #232]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000df6:	69d1      	ldr	r1, [r2, #28]
 8000df8:	2080      	movs	r0, #128	; 0x80
 8000dfa:	0540      	lsls	r0, r0, #21
 8000dfc:	4301      	orrs	r1, r0
 8000dfe:	61d1      	str	r1, [r2, #28]
 8000e00:	69d3      	ldr	r3, [r2, #28]
 8000e02:	4003      	ands	r3, r0
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e08:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	d53b      	bpl.n	8000e8a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e14:	6a1b      	ldr	r3, [r3, #32]
 8000e16:	22c0      	movs	r2, #192	; 0xc0
 8000e18:	0092      	lsls	r2, r2, #2
 8000e1a:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000e1c:	d013      	beq.n	8000e46 <HAL_RCCEx_PeriphCLKConfig+0x66>
 8000e1e:	6861      	ldr	r1, [r4, #4]
 8000e20:	400a      	ands	r2, r1
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00f      	beq.n	8000e46 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e28:	6a18      	ldr	r0, [r3, #32]
 8000e2a:	4a2f      	ldr	r2, [pc, #188]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e2c:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e2e:	6a1e      	ldr	r6, [r3, #32]
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0249      	lsls	r1, r1, #9
 8000e34:	4331      	orrs	r1, r6
 8000e36:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e38:	6a19      	ldr	r1, [r3, #32]
 8000e3a:	4e2c      	ldr	r6, [pc, #176]	; (8000eec <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8000e3c:	4031      	ands	r1, r6
 8000e3e:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000e40:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e42:	07c3      	lsls	r3, r0, #31
 8000e44:	d435      	bmi.n	8000eb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000e46:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e48:	6a13      	ldr	r3, [r2, #32]
 8000e4a:	4927      	ldr	r1, [pc, #156]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8000e4c:	400b      	ands	r3, r1
 8000e4e:	6861      	ldr	r1, [r4, #4]
 8000e50:	430b      	orrs	r3, r1
 8000e52:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e54:	2d01      	cmp	r5, #1
 8000e56:	d03b      	beq.n	8000ed0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	07db      	lsls	r3, r3, #31
 8000e5c:	d506      	bpl.n	8000e6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000e5e:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e60:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e62:	2103      	movs	r1, #3
 8000e64:	438b      	bics	r3, r1
 8000e66:	68a1      	ldr	r1, [r4, #8]
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e6c:	6823      	ldr	r3, [r4, #0]
 8000e6e:	069b      	lsls	r3, r3, #26
 8000e70:	d533      	bpl.n	8000eda <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e72:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000e74:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e76:	2110      	movs	r1, #16
 8000e78:	438b      	bics	r3, r1
 8000e7a:	68e1      	ldr	r1, [r4, #12]
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000e80:	2000      	movs	r0, #0
}
 8000e82:	b002      	add	sp, #8
 8000e84:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8000e86:	2500      	movs	r5, #0
 8000e88:	e7bf      	b.n	8000e0a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8a:	4a16      	ldr	r2, [pc, #88]	; (8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000e8c:	6811      	ldr	r1, [r2, #0]
 8000e8e:	2380      	movs	r3, #128	; 0x80
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e96:	f7ff f9ff 	bl	8000298 <HAL_GetTick>
 8000e9a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	05db      	lsls	r3, r3, #23
 8000ea2:	d4b6      	bmi.n	8000e12 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea4:	f7ff f9f8 	bl	8000298 <HAL_GetTick>
 8000ea8:	1b80      	subs	r0, r0, r6
 8000eaa:	2864      	cmp	r0, #100	; 0x64
 8000eac:	d9f6      	bls.n	8000e9c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8000eae:	2003      	movs	r0, #3
 8000eb0:	e7e7      	b.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        tickstart = HAL_GetTick();
 8000eb2:	f7ff f9f1 	bl	8000298 <HAL_GetTick>
 8000eb6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	079b      	lsls	r3, r3, #30
 8000ebe:	d4c2      	bmi.n	8000e46 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f7ff f9ea 	bl	8000298 <HAL_GetTick>
 8000ec4:	1b80      	subs	r0, r0, r6
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000ec8:	4298      	cmp	r0, r3
 8000eca:	d9f5      	bls.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
 8000ecc:	2003      	movs	r0, #3
 8000ece:	e7d8      	b.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed0:	69d3      	ldr	r3, [r2, #28]
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8000ed4:	400b      	ands	r3, r1
 8000ed6:	61d3      	str	r3, [r2, #28]
 8000ed8:	e7be      	b.n	8000e58 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 8000eda:	2000      	movs	r0, #0
 8000edc:	e7d1      	b.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40007000 	.word	0x40007000
 8000ee8:	fffffcff 	.word	0xfffffcff
 8000eec:	fffeffff 	.word	0xfffeffff
 8000ef0:	00001388 	.word	0x00001388
 8000ef4:	efffffff 	.word	0xefffffff

08000ef8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	0006      	movs	r6, r0
 8000efc:	000c      	movs	r4, r1
 8000efe:	0017      	movs	r7, r2
 8000f00:	001d      	movs	r5, r3
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f02:	e03e      	b.n	8000f82 <SPI_WaitFlagStateUntilTimeout+0x8a>
  {
    if (Timeout != HAL_MAX_DELAY)
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	d005      	beq.n	8000f14 <SPI_WaitFlagStateUntilTimeout+0x1c>
 8000f08:	f7ff f9c6 	bl	8000298 <HAL_GetTick>
 8000f0c:	9b06      	ldr	r3, [sp, #24]
 8000f0e:	1ac0      	subs	r0, r0, r3
 8000f10:	42a8      	cmp	r0, r5
 8000f12:	d336      	bcc.n	8000f82 <SPI_WaitFlagStateUntilTimeout+0x8a>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000f14:	6832      	ldr	r2, [r6, #0]
 8000f16:	6853      	ldr	r3, [r2, #4]
 8000f18:	21e0      	movs	r1, #224	; 0xe0
 8000f1a:	438b      	bics	r3, r1
 8000f1c:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f1e:	2382      	movs	r3, #130	; 0x82
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	6872      	ldr	r2, [r6, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d00c      	beq.n	8000f42 <SPI_WaitFlagStateUntilTimeout+0x4a>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	019b      	lsls	r3, r3, #6
 8000f2c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d016      	beq.n	8000f60 <SPI_WaitFlagStateUntilTimeout+0x68>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000f32:	235d      	movs	r3, #93	; 0x5d
 8000f34:	2201      	movs	r2, #1
 8000f36:	54f2      	strb	r2, [r6, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	54f2      	strb	r2, [r6, r3]

        return HAL_TIMEOUT;
 8000f3e:	2003      	movs	r0, #3
 8000f40:	e027      	b.n	8000f92 <SPI_WaitFlagStateUntilTimeout+0x9a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f42:	68b3      	ldr	r3, [r6, #8]
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	0212      	lsls	r2, r2, #8
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000f4c:	2280      	movs	r2, #128	; 0x80
 8000f4e:	00d2      	lsls	r2, r2, #3
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d1e9      	bne.n	8000f28 <SPI_WaitFlagStateUntilTimeout+0x30>
          __HAL_SPI_DISABLE(hspi);
 8000f54:	6832      	ldr	r2, [r6, #0]
 8000f56:	6813      	ldr	r3, [r2, #0]
 8000f58:	2140      	movs	r1, #64	; 0x40
 8000f5a:	438b      	bics	r3, r1
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e7e3      	b.n	8000f28 <SPI_WaitFlagStateUntilTimeout+0x30>
          SPI_RESET_CRC(hspi);
 8000f60:	6832      	ldr	r2, [r6, #0]
 8000f62:	6813      	ldr	r3, [r2, #0]
 8000f64:	490b      	ldr	r1, [pc, #44]	; (8000f94 <SPI_WaitFlagStateUntilTimeout+0x9c>)
 8000f66:	400b      	ands	r3, r1
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	6832      	ldr	r2, [r6, #0]
 8000f6c:	6811      	ldr	r1, [r2, #0]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	019b      	lsls	r3, r3, #6
 8000f72:	430b      	orrs	r3, r1
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e7dc      	b.n	8000f32 <SPI_WaitFlagStateUntilTimeout+0x3a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f78:	2301      	movs	r3, #1
 8000f7a:	42bb      	cmp	r3, r7
 8000f7c:	d008      	beq.n	8000f90 <SPI_WaitFlagStateUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 8000f7e:	1c6b      	adds	r3, r5, #1
 8000f80:	d1c0      	bne.n	8000f04 <SPI_WaitFlagStateUntilTimeout+0xc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f82:	6833      	ldr	r3, [r6, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	4023      	ands	r3, r4
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d0f5      	beq.n	8000f78 <SPI_WaitFlagStateUntilTimeout+0x80>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e7f4      	b.n	8000f7a <SPI_WaitFlagStateUntilTimeout+0x82>
      }
    }
  }

  return HAL_OK;
 8000f90:	2000      	movs	r0, #0
}
 8000f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f94:	ffffdfff 	.word	0xffffdfff

08000f98 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	0007      	movs	r7, r0
 8000f9e:	000c      	movs	r4, r1
 8000fa0:	0015      	movs	r5, r2
 8000fa2:	001e      	movs	r6, r3
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8000fa4:	e001      	b.n	8000faa <SPI_WaitFifoStateUntilTimeout+0x12>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
      /* To avoid GCC warning */
      UNUSED(tmpreg);
    }

    if (Timeout != HAL_MAX_DELAY)
 8000fa6:	1c73      	adds	r3, r6, #1
 8000fa8:	d110      	bne.n	8000fcc <SPI_WaitFifoStateUntilTimeout+0x34>
  while ((hspi->Instance->SR & Fifo) != State)
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	6893      	ldr	r3, [r2, #8]
 8000fae:	4023      	ands	r3, r4
 8000fb0:	42ab      	cmp	r3, r5
 8000fb2:	d045      	beq.n	8001040 <SPI_WaitFifoStateUntilTimeout+0xa8>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8000fb4:	23c0      	movs	r3, #192	; 0xc0
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	429c      	cmp	r4, r3
 8000fba:	d1f4      	bne.n	8000fa6 <SPI_WaitFifoStateUntilTimeout+0xe>
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d1f2      	bne.n	8000fa6 <SPI_WaitFifoStateUntilTimeout+0xe>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8000fc0:	7b13      	ldrb	r3, [r2, #12]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	466a      	mov	r2, sp
 8000fc6:	71d3      	strb	r3, [r2, #7]
      UNUSED(tmpreg);
 8000fc8:	79d3      	ldrb	r3, [r2, #7]
 8000fca:	e7ec      	b.n	8000fa6 <SPI_WaitFifoStateUntilTimeout+0xe>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000fcc:	2e00      	cmp	r6, #0
 8000fce:	d005      	beq.n	8000fdc <SPI_WaitFifoStateUntilTimeout+0x44>
 8000fd0:	f7ff f962 	bl	8000298 <HAL_GetTick>
 8000fd4:	9b08      	ldr	r3, [sp, #32]
 8000fd6:	1ac0      	subs	r0, r0, r3
 8000fd8:	42b0      	cmp	r0, r6
 8000fda:	d3e6      	bcc.n	8000faa <SPI_WaitFifoStateUntilTimeout+0x12>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	6853      	ldr	r3, [r2, #4]
 8000fe0:	21e0      	movs	r1, #224	; 0xe0
 8000fe2:	438b      	bics	r3, r1
 8000fe4:	6053      	str	r3, [r2, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fe6:	2382      	movs	r3, #130	; 0x82
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d00c      	beq.n	800100a <SPI_WaitFifoStateUntilTimeout+0x72>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	019b      	lsls	r3, r3, #6
 8000ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d016      	beq.n	8001028 <SPI_WaitFifoStateUntilTimeout+0x90>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000ffa:	235d      	movs	r3, #93	; 0x5d
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	54fa      	strb	r2, [r7, r3]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001000:	3b01      	subs	r3, #1
 8001002:	2200      	movs	r2, #0
 8001004:	54fa      	strb	r2, [r7, r3]

        return HAL_TIMEOUT;
 8001006:	2003      	movs	r0, #3
 8001008:	e01b      	b.n	8001042 <SPI_WaitFifoStateUntilTimeout+0xaa>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	2280      	movs	r2, #128	; 0x80
 800100e:	0212      	lsls	r2, r2, #8
 8001010:	4293      	cmp	r3, r2
 8001012:	d003      	beq.n	800101c <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001014:	2280      	movs	r2, #128	; 0x80
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	4293      	cmp	r3, r2
 800101a:	d1e9      	bne.n	8000ff0 <SPI_WaitFifoStateUntilTimeout+0x58>
          __HAL_SPI_DISABLE(hspi);
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	2140      	movs	r1, #64	; 0x40
 8001022:	438b      	bics	r3, r1
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e7e3      	b.n	8000ff0 <SPI_WaitFifoStateUntilTimeout+0x58>
          SPI_RESET_CRC(hspi);
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6813      	ldr	r3, [r2, #0]
 800102c:	4906      	ldr	r1, [pc, #24]	; (8001048 <SPI_WaitFifoStateUntilTimeout+0xb0>)
 800102e:	400b      	ands	r3, r1
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	6811      	ldr	r1, [r2, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	019b      	lsls	r3, r3, #6
 800103a:	430b      	orrs	r3, r1
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e7dc      	b.n	8000ffa <SPI_WaitFifoStateUntilTimeout+0x62>
      }
    }
  }

  return HAL_OK;
 8001040:	2000      	movs	r0, #0
}
 8001042:	b003      	add	sp, #12
 8001044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	ffffdfff 	.word	0xffffdfff

0800104c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	0004      	movs	r4, r0
 8001052:	000d      	movs	r5, r1
 8001054:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001056:	21c0      	movs	r1, #192	; 0xc0
 8001058:	9200      	str	r2, [sp, #0]
 800105a:	002b      	movs	r3, r5
 800105c:	2200      	movs	r2, #0
 800105e:	0149      	lsls	r1, r1, #5
 8001060:	f7ff ff9a 	bl	8000f98 <SPI_WaitFifoStateUntilTimeout>
 8001064:	2800      	cmp	r0, #0
 8001066:	d118      	bne.n	800109a <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001068:	9600      	str	r6, [sp, #0]
 800106a:	002b      	movs	r3, r5
 800106c:	2200      	movs	r2, #0
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0020      	movs	r0, r4
 8001072:	f7ff ff41 	bl	8000ef8 <SPI_WaitFlagStateUntilTimeout>
 8001076:	2800      	cmp	r0, #0
 8001078:	d116      	bne.n	80010a8 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800107a:	21c0      	movs	r1, #192	; 0xc0
 800107c:	9600      	str	r6, [sp, #0]
 800107e:	002b      	movs	r3, r5
 8001080:	2200      	movs	r2, #0
 8001082:	00c9      	lsls	r1, r1, #3
 8001084:	0020      	movs	r0, r4
 8001086:	f7ff ff87 	bl	8000f98 <SPI_WaitFifoStateUntilTimeout>
 800108a:	2800      	cmp	r0, #0
 800108c:	d00a      	beq.n	80010a4 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800108e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001090:	2220      	movs	r2, #32
 8001092:	4313      	orrs	r3, r2
 8001094:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8001096:	2003      	movs	r0, #3
 8001098:	e004      	b.n	80010a4 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800109a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800109c:	2220      	movs	r2, #32
 800109e:	4313      	orrs	r3, r2
 80010a0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80010a2:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80010a4:	b002      	add	sp, #8
 80010a6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80010a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80010aa:	2220      	movs	r2, #32
 80010ac:	4313      	orrs	r3, r2
 80010ae:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 80010b0:	2003      	movs	r0, #3
 80010b2:	e7f7      	b.n	80010a4 <SPI_EndRxTxTransaction+0x58>

080010b4 <SPI_EndRxTransaction>:
{
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	0004      	movs	r4, r0
 80010ba:	000d      	movs	r5, r1
 80010bc:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010be:	2382      	movs	r3, #130	; 0x82
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	6842      	ldr	r2, [r0, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d00f      	beq.n	80010e8 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80010c8:	9600      	str	r6, [sp, #0]
 80010ca:	002b      	movs	r3, r5
 80010cc:	2200      	movs	r2, #0
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	0020      	movs	r0, r4
 80010d2:	f7ff ff11 	bl	8000ef8 <SPI_WaitFlagStateUntilTimeout>
 80010d6:	2800      	cmp	r0, #0
 80010d8:	d115      	bne.n	8001106 <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010da:	2382      	movs	r3, #130	; 0x82
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	6862      	ldr	r2, [r4, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d016      	beq.n	8001112 <SPI_EndRxTransaction+0x5e>
}
 80010e4:	b002      	add	sp, #8
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010e8:	6883      	ldr	r3, [r0, #8]
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	0212      	lsls	r2, r2, #8
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d003      	beq.n	80010fa <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d1e6      	bne.n	80010c8 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 80010fa:	6822      	ldr	r2, [r4, #0]
 80010fc:	6813      	ldr	r3, [r2, #0]
 80010fe:	2140      	movs	r1, #64	; 0x40
 8001100:	438b      	bics	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e7e0      	b.n	80010c8 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001106:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001108:	2220      	movs	r2, #32
 800110a:	4313      	orrs	r3, r2
 800110c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e7e8      	b.n	80010e4 <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001112:	68a3      	ldr	r3, [r4, #8]
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	0212      	lsls	r2, r2, #8
 8001118:	4293      	cmp	r3, r2
 800111a:	d003      	beq.n	8001124 <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	00d2      	lsls	r2, r2, #3
 8001120:	4293      	cmp	r3, r2
 8001122:	d1df      	bne.n	80010e4 <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001124:	21c0      	movs	r1, #192	; 0xc0
 8001126:	9600      	str	r6, [sp, #0]
 8001128:	002b      	movs	r3, r5
 800112a:	2200      	movs	r2, #0
 800112c:	00c9      	lsls	r1, r1, #3
 800112e:	0020      	movs	r0, r4
 8001130:	f7ff ff32 	bl	8000f98 <SPI_WaitFifoStateUntilTimeout>
 8001134:	2800      	cmp	r0, #0
 8001136:	d0d5      	beq.n	80010e4 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001138:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800113a:	2220      	movs	r2, #32
 800113c:	4313      	orrs	r3, r2
 800113e:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001140:	2003      	movs	r0, #3
 8001142:	e7cf      	b.n	80010e4 <SPI_EndRxTransaction+0x30>

08001144 <HAL_SPI_Init>:
{
 8001144:	b510      	push	{r4, lr}
 8001146:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 8001148:	d05e      	beq.n	8001208 <HAL_SPI_Init+0xc4>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800114e:	335d      	adds	r3, #93	; 0x5d
 8001150:	5cc3      	ldrb	r3, [r0, r3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d04c      	beq.n	80011f0 <HAL_SPI_Init+0xac>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001156:	235d      	movs	r3, #93	; 0x5d
 8001158:	2202      	movs	r2, #2
 800115a:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 800115c:	6822      	ldr	r2, [r4, #0]
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	438b      	bics	r3, r1
 8001164:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	22e0      	movs	r2, #224	; 0xe0
 800116a:	00d2      	lsls	r2, r2, #3
 800116c:	4293      	cmp	r3, r2
 800116e:	d945      	bls.n	80011fc <HAL_SPI_Init+0xb8>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001170:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001172:	21f0      	movs	r1, #240	; 0xf0
 8001174:	0109      	lsls	r1, r1, #4
 8001176:	428b      	cmp	r3, r1
 8001178:	d005      	beq.n	8001186 <HAL_SPI_Init+0x42>
 800117a:	21e0      	movs	r1, #224	; 0xe0
 800117c:	00c9      	lsls	r1, r1, #3
 800117e:	428b      	cmp	r3, r1
 8001180:	d001      	beq.n	8001186 <HAL_SPI_Init+0x42>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001182:	2100      	movs	r1, #0
 8001184:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001186:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001188:	2900      	cmp	r1, #0
 800118a:	d105      	bne.n	8001198 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800118c:	21e0      	movs	r1, #224	; 0xe0
 800118e:	00c9      	lsls	r1, r1, #3
 8001190:	428b      	cmp	r3, r1
 8001192:	d936      	bls.n	8001202 <HAL_SPI_Init+0xbe>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001194:	2302      	movs	r3, #2
 8001196:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001198:	6863      	ldr	r3, [r4, #4]
 800119a:	68a1      	ldr	r1, [r4, #8]
 800119c:	430b      	orrs	r3, r1
 800119e:	6921      	ldr	r1, [r4, #16]
 80011a0:	430b      	orrs	r3, r1
 80011a2:	6961      	ldr	r1, [r4, #20]
 80011a4:	430b      	orrs	r3, r1
 80011a6:	2180      	movs	r1, #128	; 0x80
 80011a8:	0089      	lsls	r1, r1, #2
 80011aa:	69a0      	ldr	r0, [r4, #24]
 80011ac:	4001      	ands	r1, r0
 80011ae:	430b      	orrs	r3, r1
 80011b0:	69e1      	ldr	r1, [r4, #28]
 80011b2:	430b      	orrs	r3, r1
 80011b4:	6a21      	ldr	r1, [r4, #32]
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6821      	ldr	r1, [r4, #0]
 80011ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80011bc:	4303      	orrs	r3, r0
 80011be:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80011c0:	8b61      	ldrh	r1, [r4, #26]
 80011c2:	2304      	movs	r3, #4
 80011c4:	400b      	ands	r3, r1
 80011c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011cc:	430b      	orrs	r3, r1
 80011ce:	68e1      	ldr	r1, [r4, #12]
 80011d0:	430b      	orrs	r3, r1
 80011d2:	6821      	ldr	r1, [r4, #0]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011d8:	6822      	ldr	r2, [r4, #0]
 80011da:	69d3      	ldr	r3, [r2, #28]
 80011dc:	490b      	ldr	r1, [pc, #44]	; (800120c <HAL_SPI_Init+0xc8>)
 80011de:	400b      	ands	r3, r1
 80011e0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80011e6:	335d      	adds	r3, #93	; 0x5d
 80011e8:	2201      	movs	r2, #1
 80011ea:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80011ec:	2000      	movs	r0, #0
}
 80011ee:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80011f0:	335c      	adds	r3, #92	; 0x5c
 80011f2:	2200      	movs	r2, #0
 80011f4:	54c2      	strb	r2, [r0, r3]
    HAL_SPI_MspInit(hspi);
 80011f6:	f002 f863 	bl	80032c0 <HAL_SPI_MspInit>
 80011fa:	e7ac      	b.n	8001156 <HAL_SPI_Init+0x12>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80011fc:	2280      	movs	r2, #128	; 0x80
 80011fe:	0152      	lsls	r2, r2, #5
 8001200:	e7b7      	b.n	8001172 <HAL_SPI_Init+0x2e>
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001202:	2301      	movs	r3, #1
 8001204:	6323      	str	r3, [r4, #48]	; 0x30
 8001206:	e7c7      	b.n	8001198 <HAL_SPI_Init+0x54>
    return HAL_ERROR;
 8001208:	2001      	movs	r0, #1
 800120a:	e7f0      	b.n	80011ee <HAL_SPI_Init+0xaa>
 800120c:	fffff7ff 	.word	0xfffff7ff

08001210 <HAL_SPI_Transmit>:
{
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	b085      	sub	sp, #20
 8001214:	0004      	movs	r4, r0
 8001216:	000d      	movs	r5, r1
 8001218:	0016      	movs	r6, r2
 800121a:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 800121c:	235c      	movs	r3, #92	; 0x5c
 800121e:	5cc3      	ldrb	r3, [r0, r3]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d100      	bne.n	8001226 <HAL_SPI_Transmit+0x16>
 8001224:	e0d4      	b.n	80013d0 <HAL_SPI_Transmit+0x1c0>
 8001226:	235c      	movs	r3, #92	; 0x5c
 8001228:	2201      	movs	r2, #1
 800122a:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800122c:	f7ff f834 	bl	8000298 <HAL_GetTick>
 8001230:	9001      	str	r0, [sp, #4]
  if (hspi->State != HAL_SPI_STATE_READY)
 8001232:	235d      	movs	r3, #93	; 0x5d
 8001234:	5ce3      	ldrb	r3, [r4, r3]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d008      	beq.n	800124c <HAL_SPI_Transmit+0x3c>
    errorcode = HAL_BUSY;
 800123a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800123c:	235d      	movs	r3, #93	; 0x5d
 800123e:	2201      	movs	r2, #1
 8001240:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001242:	3b01      	subs	r3, #1
 8001244:	2200      	movs	r2, #0
 8001246:	54e2      	strb	r2, [r4, r3]
}
 8001248:	b005      	add	sp, #20
 800124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 800124c:	2d00      	cmp	r5, #0
 800124e:	d100      	bne.n	8001252 <HAL_SPI_Transmit+0x42>
 8001250:	e0b4      	b.n	80013bc <HAL_SPI_Transmit+0x1ac>
 8001252:	2e00      	cmp	r6, #0
 8001254:	d100      	bne.n	8001258 <HAL_SPI_Transmit+0x48>
 8001256:	e0b3      	b.n	80013c0 <HAL_SPI_Transmit+0x1b0>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001258:	335c      	adds	r3, #92	; 0x5c
 800125a:	2203      	movs	r2, #3
 800125c:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800125e:	2300      	movs	r3, #0
 8001260:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001262:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001264:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001266:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001268:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800126a:	3241      	adds	r2, #65	; 0x41
 800126c:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800126e:	3202      	adds	r2, #2
 8001270:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8001272:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001274:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	68a2      	ldr	r2, [r4, #8]
 800127c:	429a      	cmp	r2, r3
 800127e:	d01c      	beq.n	80012ba <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001280:	6823      	ldr	r3, [r4, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	0652      	lsls	r2, r2, #25
 8001286:	d403      	bmi.n	8001290 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001290:	23e0      	movs	r3, #224	; 0xe0
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	68e2      	ldr	r2, [r4, #12]
 8001296:	429a      	cmp	r2, r3
 8001298:	d933      	bls.n	8001302 <HAL_SPI_Transmit+0xf2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800129a:	6863      	ldr	r3, [r4, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_SPI_Transmit+0x98>
 80012a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d114      	bne.n	80012d2 <HAL_SPI_Transmit+0xc2>
      hspi->Instance->DR = *((uint16_t *)pData);
 80012a8:	6823      	ldr	r3, [r4, #0]
 80012aa:	882a      	ldrh	r2, [r5, #0]
 80012ac:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80012ae:	3502      	adds	r5, #2
      hspi->TxXferCount--;
 80012b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80012b8:	e00b      	b.n	80012d2 <HAL_SPI_Transmit+0xc2>
    SPI_1LINE_TX(hspi);
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	6811      	ldr	r1, [r2, #0]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	01db      	lsls	r3, r3, #7
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e7db      	b.n	8001280 <HAL_SPI_Transmit+0x70>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80012c8:	2f00      	cmp	r7, #0
 80012ca:	d100      	bne.n	80012ce <HAL_SPI_Transmit+0xbe>
 80012cc:	e07a      	b.n	80013c4 <HAL_SPI_Transmit+0x1b4>
 80012ce:	1c7b      	adds	r3, r7, #1
 80012d0:	d10f      	bne.n	80012f2 <HAL_SPI_Transmit+0xe2>
    while (hspi->TxXferCount > 0U)
 80012d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d058      	beq.n	800138c <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	0792      	lsls	r2, r2, #30
 80012e0:	d5f2      	bpl.n	80012c8 <HAL_SPI_Transmit+0xb8>
        hspi->Instance->DR = *((uint16_t *)pData);
 80012e2:	882a      	ldrh	r2, [r5, #0]
 80012e4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80012e6:	3502      	adds	r5, #2
        hspi->TxXferCount--;
 80012e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80012ea:	3b01      	subs	r3, #1
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80012f0:	e7ef      	b.n	80012d2 <HAL_SPI_Transmit+0xc2>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80012f2:	f7fe ffd1 	bl	8000298 <HAL_GetTick>
 80012f6:	9b01      	ldr	r3, [sp, #4]
 80012f8:	1ac0      	subs	r0, r0, r3
 80012fa:	42b8      	cmp	r0, r7
 80012fc:	d3e9      	bcc.n	80012d2 <HAL_SPI_Transmit+0xc2>
          errorcode = HAL_TIMEOUT;
 80012fe:	2003      	movs	r0, #3
 8001300:	e79c      	b.n	800123c <HAL_SPI_Transmit+0x2c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001302:	6863      	ldr	r3, [r4, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_SPI_Transmit+0x100>
 8001308:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800130a:	b29b      	uxth	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d121      	bne.n	8001354 <HAL_SPI_Transmit+0x144>
      if (hspi->TxXferCount > 1U)
 8001310:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001312:	b29b      	uxth	r3, r3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d908      	bls.n	800132a <HAL_SPI_Transmit+0x11a>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001318:	6823      	ldr	r3, [r4, #0]
 800131a:	882a      	ldrh	r2, [r5, #0]
 800131c:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 800131e:	3502      	adds	r5, #2
        hspi->TxXferCount -= 2U;
 8001320:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001322:	3b02      	subs	r3, #2
 8001324:	b29b      	uxth	r3, r3
 8001326:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001328:	e014      	b.n	8001354 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800132a:	782b      	ldrb	r3, [r5, #0]
 800132c:	6822      	ldr	r2, [r4, #0]
 800132e:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8001330:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001332:	3b01      	subs	r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001338:	3501      	adds	r5, #1
 800133a:	e00b      	b.n	8001354 <HAL_SPI_Transmit+0x144>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800133c:	782a      	ldrb	r2, [r5, #0]
 800133e:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001340:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001342:	3b01      	subs	r3, #1
 8001344:	b29b      	uxth	r3, r3
 8001346:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001348:	3501      	adds	r5, #1
 800134a:	e003      	b.n	8001354 <HAL_SPI_Transmit+0x144>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800134c:	2f00      	cmp	r7, #0
 800134e:	d03b      	beq.n	80013c8 <HAL_SPI_Transmit+0x1b8>
 8001350:	1c7b      	adds	r3, r7, #1
 8001352:	d113      	bne.n	800137c <HAL_SPI_Transmit+0x16c>
    while (hspi->TxXferCount > 0U)
 8001354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001356:	b29b      	uxth	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d017      	beq.n	800138c <HAL_SPI_Transmit+0x17c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	0792      	lsls	r2, r2, #30
 8001362:	d5f3      	bpl.n	800134c <HAL_SPI_Transmit+0x13c>
        if (hspi->TxXferCount > 1U)
 8001364:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001366:	b292      	uxth	r2, r2
 8001368:	2a01      	cmp	r2, #1
 800136a:	d9e7      	bls.n	800133c <HAL_SPI_Transmit+0x12c>
          hspi->Instance->DR = *((uint16_t *)pData);
 800136c:	882a      	ldrh	r2, [r5, #0]
 800136e:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001370:	3502      	adds	r5, #2
          hspi->TxXferCount -= 2U;
 8001372:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001374:	3b02      	subs	r3, #2
 8001376:	b29b      	uxth	r3, r3
 8001378:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800137a:	e7eb      	b.n	8001354 <HAL_SPI_Transmit+0x144>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800137c:	f7fe ff8c 	bl	8000298 <HAL_GetTick>
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	1ac0      	subs	r0, r0, r3
 8001384:	42b8      	cmp	r0, r7
 8001386:	d3e5      	bcc.n	8001354 <HAL_SPI_Transmit+0x144>
          errorcode = HAL_TIMEOUT;
 8001388:	2003      	movs	r0, #3
 800138a:	e757      	b.n	800123c <HAL_SPI_Transmit+0x2c>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800138c:	9a01      	ldr	r2, [sp, #4]
 800138e:	0039      	movs	r1, r7
 8001390:	0020      	movs	r0, r4
 8001392:	f7ff fe5b 	bl	800104c <SPI_EndRxTxTransaction>
 8001396:	2800      	cmp	r0, #0
 8001398:	d001      	beq.n	800139e <HAL_SPI_Transmit+0x18e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800139a:	2320      	movs	r3, #32
 800139c:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800139e:	68a3      	ldr	r3, [r4, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d106      	bne.n	80013b2 <HAL_SPI_Transmit+0x1a2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80013a4:	9303      	str	r3, [sp, #12]
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	9203      	str	r2, [sp, #12]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	9303      	str	r3, [sp, #12]
 80013b0:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <HAL_SPI_Transmit+0x1bc>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80013b8:	2000      	movs	r0, #0
 80013ba:	e73f      	b.n	800123c <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 80013bc:	2001      	movs	r0, #1
 80013be:	e73d      	b.n	800123c <HAL_SPI_Transmit+0x2c>
 80013c0:	2001      	movs	r0, #1
 80013c2:	e73b      	b.n	800123c <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 80013c4:	2003      	movs	r0, #3
 80013c6:	e739      	b.n	800123c <HAL_SPI_Transmit+0x2c>
          errorcode = HAL_TIMEOUT;
 80013c8:	2003      	movs	r0, #3
 80013ca:	e737      	b.n	800123c <HAL_SPI_Transmit+0x2c>
    errorcode = HAL_ERROR;
 80013cc:	2001      	movs	r0, #1
 80013ce:	e735      	b.n	800123c <HAL_SPI_Transmit+0x2c>
  __HAL_LOCK(hspi);
 80013d0:	2002      	movs	r0, #2
 80013d2:	e739      	b.n	8001248 <HAL_SPI_Transmit+0x38>

080013d4 <HAL_SPI_TransmitReceive>:
{
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	b083      	sub	sp, #12
 80013d8:	0004      	movs	r4, r0
 80013da:	000e      	movs	r6, r1
 80013dc:	0017      	movs	r7, r2
 80013de:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80013e0:	235c      	movs	r3, #92	; 0x5c
 80013e2:	5cc3      	ldrb	r3, [r0, r3]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d100      	bne.n	80013ea <HAL_SPI_TransmitReceive+0x16>
 80013e8:	e142      	b.n	8001670 <HAL_SPI_TransmitReceive+0x29c>
 80013ea:	235c      	movs	r3, #92	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80013f0:	f7fe ff52 	bl	8000298 <HAL_GetTick>
 80013f4:	9001      	str	r0, [sp, #4]
  tmp  = hspi->State;
 80013f6:	235d      	movs	r3, #93	; 0x5d
 80013f8:	5ce3      	ldrb	r3, [r4, r3]
 80013fa:	b2db      	uxtb	r3, r3
  tmp1 = hspi->Init.Mode;
 80013fc:	6862      	ldr	r2, [r4, #4]
  if (!((tmp == HAL_SPI_STATE_READY) || \
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d014      	beq.n	800142c <HAL_SPI_TransmitReceive+0x58>
 8001402:	2182      	movs	r1, #130	; 0x82
 8001404:	0049      	lsls	r1, r1, #1
 8001406:	428a      	cmp	r2, r1
 8001408:	d008      	beq.n	800141c <HAL_SPI_TransmitReceive+0x48>
    errorcode = HAL_BUSY;
 800140a:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800140c:	235d      	movs	r3, #93	; 0x5d
 800140e:	2201      	movs	r2, #1
 8001410:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001412:	3b01      	subs	r3, #1
 8001414:	2200      	movs	r2, #0
 8001416:	54e2      	strb	r2, [r4, r3]
}
 8001418:	b003      	add	sp, #12
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800141c:	68a2      	ldr	r2, [r4, #8]
 800141e:	2a00      	cmp	r2, #0
 8001420:	d000      	beq.n	8001424 <HAL_SPI_TransmitReceive+0x50>
 8001422:	e11b      	b.n	800165c <HAL_SPI_TransmitReceive+0x288>
 8001424:	2b04      	cmp	r3, #4
 8001426:	d001      	beq.n	800142c <HAL_SPI_TransmitReceive+0x58>
    errorcode = HAL_BUSY;
 8001428:	2002      	movs	r0, #2
 800142a:	e7ef      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800142c:	2e00      	cmp	r6, #0
 800142e:	d100      	bne.n	8001432 <HAL_SPI_TransmitReceive+0x5e>
 8001430:	e116      	b.n	8001660 <HAL_SPI_TransmitReceive+0x28c>
 8001432:	2f00      	cmp	r7, #0
 8001434:	d100      	bne.n	8001438 <HAL_SPI_TransmitReceive+0x64>
 8001436:	e115      	b.n	8001664 <HAL_SPI_TransmitReceive+0x290>
 8001438:	2d00      	cmp	r5, #0
 800143a:	d100      	bne.n	800143e <HAL_SPI_TransmitReceive+0x6a>
 800143c:	e114      	b.n	8001668 <HAL_SPI_TransmitReceive+0x294>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800143e:	235d      	movs	r3, #93	; 0x5d
 8001440:	5ce3      	ldrb	r3, [r4, r3]
 8001442:	2b04      	cmp	r3, #4
 8001444:	d002      	beq.n	800144c <HAL_SPI_TransmitReceive+0x78>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001446:	235d      	movs	r3, #93	; 0x5d
 8001448:	2205      	movs	r2, #5
 800144a:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800144c:	2300      	movs	r3, #0
 800144e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001450:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001452:	2246      	movs	r2, #70	; 0x46
 8001454:	52a5      	strh	r5, [r4, r2]
  hspi->RxXferSize  = Size;
 8001456:	3a02      	subs	r2, #2
 8001458:	52a5      	strh	r5, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800145a:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800145c:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800145e:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 8001460:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001462:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001464:	23e0      	movs	r3, #224	; 0xe0
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	68e2      	ldr	r2, [r4, #12]
 800146a:	429a      	cmp	r2, r3
 800146c:	d804      	bhi.n	8001478 <HAL_SPI_TransmitReceive+0xa4>
 800146e:	2346      	movs	r3, #70	; 0x46
 8001470:	5ae3      	ldrh	r3, [r4, r3]
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d922      	bls.n	80014be <HAL_SPI_TransmitReceive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001478:	6822      	ldr	r2, [r4, #0]
 800147a:	6853      	ldr	r3, [r2, #4]
 800147c:	497d      	ldr	r1, [pc, #500]	; (8001674 <HAL_SPI_TransmitReceive+0x2a0>)
 800147e:	400b      	ands	r3, r1
 8001480:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	0652      	lsls	r2, r2, #25
 8001488:	d403      	bmi.n	8001492 <HAL_SPI_TransmitReceive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2140      	movs	r1, #64	; 0x40
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001492:	23e0      	movs	r3, #224	; 0xe0
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	68e2      	ldr	r2, [r4, #12]
 8001498:	429a      	cmp	r2, r3
 800149a:	d952      	bls.n	8001542 <HAL_SPI_TransmitReceive+0x16e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800149c:	6863      	ldr	r3, [r4, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_SPI_TransmitReceive+0xd6>
 80014a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_SPI_TransmitReceive+0xe6>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	8832      	ldrh	r2, [r6, #0]
 80014ae:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 80014b0:	3602      	adds	r6, #2
      hspi->TxXferCount--;
 80014b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80014ba:	2501      	movs	r5, #1
 80014bc:	e01b      	b.n	80014f6 <HAL_SPI_TransmitReceive+0x122>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80014be:	6822      	ldr	r2, [r4, #0]
 80014c0:	6851      	ldr	r1, [r2, #4]
 80014c2:	2380      	movs	r3, #128	; 0x80
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	430b      	orrs	r3, r1
 80014c8:	6053      	str	r3, [r2, #4]
 80014ca:	e7da      	b.n	8001482 <HAL_SPI_TransmitReceive+0xae>
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80014cc:	2346      	movs	r3, #70	; 0x46
 80014ce:	5ae3      	ldrh	r3, [r4, r3]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_SPI_TransmitReceive+0x11c>
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	07d2      	lsls	r2, r2, #31
 80014dc:	d508      	bpl.n	80014f0 <HAL_SPI_TransmitReceive+0x11c>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	803b      	strh	r3, [r7, #0]
        pRxData += sizeof(uint16_t);
 80014e2:	3702      	adds	r7, #2
        hspi->RxXferCount--;
 80014e4:	2246      	movs	r2, #70	; 0x46
 80014e6:	5aa3      	ldrh	r3, [r4, r2]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80014ee:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80014f0:	9b08      	ldr	r3, [sp, #32]
 80014f2:	3301      	adds	r3, #1
 80014f4:	d11c      	bne.n	8001530 <HAL_SPI_TransmitReceive+0x15c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80014f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <HAL_SPI_TransmitReceive+0x136>
 80014fe:	3346      	adds	r3, #70	; 0x46
 8001500:	5ae3      	ldrh	r3, [r4, r3]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d100      	bne.n	800150a <HAL_SPI_TransmitReceive+0x136>
 8001508:	e09a      	b.n	8001640 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800150a:	2d00      	cmp	r5, #0
 800150c:	d0de      	beq.n	80014cc <HAL_SPI_TransmitReceive+0xf8>
 800150e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0da      	beq.n	80014cc <HAL_SPI_TransmitReceive+0xf8>
 8001516:	6823      	ldr	r3, [r4, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	0792      	lsls	r2, r2, #30
 800151c:	d5d6      	bpl.n	80014cc <HAL_SPI_TransmitReceive+0xf8>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800151e:	8832      	ldrh	r2, [r6, #0]
 8001520:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001522:	3602      	adds	r6, #2
        hspi->TxXferCount--;
 8001524:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001526:	3b01      	subs	r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800152c:	2500      	movs	r5, #0
 800152e:	e7cd      	b.n	80014cc <HAL_SPI_TransmitReceive+0xf8>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001530:	f7fe feb2 	bl	8000298 <HAL_GetTick>
 8001534:	9b01      	ldr	r3, [sp, #4]
 8001536:	1ac0      	subs	r0, r0, r3
 8001538:	9b08      	ldr	r3, [sp, #32]
 800153a:	4298      	cmp	r0, r3
 800153c:	d3db      	bcc.n	80014f6 <HAL_SPI_TransmitReceive+0x122>
        errorcode = HAL_TIMEOUT;
 800153e:	2003      	movs	r0, #3
 8001540:	e764      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001542:	6863      	ldr	r3, [r4, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_SPI_TransmitReceive+0x17c>
 8001548:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800154a:	b29b      	uxth	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d10b      	bne.n	8001568 <HAL_SPI_TransmitReceive+0x194>
      if (hspi->TxXferCount > 1U)
 8001550:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001552:	b29b      	uxth	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d909      	bls.n	800156c <HAL_SPI_TransmitReceive+0x198>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001558:	6823      	ldr	r3, [r4, #0]
 800155a:	8832      	ldrh	r2, [r6, #0]
 800155c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800155e:	3602      	adds	r6, #2
        hspi->TxXferCount -= 2U;
 8001560:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001562:	3b02      	subs	r3, #2
 8001564:	b29b      	uxth	r3, r3
 8001566:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001568:	2501      	movs	r5, #1
 800156a:	e02e      	b.n	80015ca <HAL_SPI_TransmitReceive+0x1f6>
 800156c:	7833      	ldrb	r3, [r6, #0]
 800156e:	6822      	ldr	r2, [r4, #0]
 8001570:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8001572:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001574:	3b01      	subs	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	87e3      	strh	r3, [r4, #62]	; 0x3e
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800157a:	3601      	adds	r6, #1
 800157c:	e7f4      	b.n	8001568 <HAL_SPI_TransmitReceive+0x194>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800157e:	7832      	ldrb	r2, [r6, #0]
 8001580:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001582:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001584:	3b01      	subs	r3, #1
 8001586:	b29b      	uxth	r3, r3
 8001588:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800158a:	3601      	adds	r6, #1
        txallowed = 0U;
 800158c:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800158e:	2346      	movs	r3, #70	; 0x46
 8001590:	5ae3      	ldrh	r3, [r4, r3]
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d015      	beq.n	80015c4 <HAL_SPI_TransmitReceive+0x1f0>
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	07d2      	lsls	r2, r2, #31
 800159e:	d511      	bpl.n	80015c4 <HAL_SPI_TransmitReceive+0x1f0>
        if (hspi->RxXferCount > 1U)
 80015a0:	2246      	movs	r2, #70	; 0x46
 80015a2:	5aa2      	ldrh	r2, [r4, r2]
 80015a4:	b292      	uxth	r2, r2
 80015a6:	2a01      	cmp	r2, #1
 80015a8:	d937      	bls.n	800161a <HAL_SPI_TransmitReceive+0x246>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	803b      	strh	r3, [r7, #0]
          pRxData += sizeof(uint16_t);
 80015ae:	3702      	adds	r7, #2
          hspi->RxXferCount -= 2U;
 80015b0:	2246      	movs	r2, #70	; 0x46
 80015b2:	5aa3      	ldrh	r3, [r4, r2]
 80015b4:	3b02      	subs	r3, #2
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	52a3      	strh	r3, [r4, r2]
          if (hspi->RxXferCount <= 1U)
 80015ba:	5aa3      	ldrh	r3, [r4, r2]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d923      	bls.n	800160a <HAL_SPI_TransmitReceive+0x236>
        txallowed = 1U;
 80015c2:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80015c4:	9b08      	ldr	r3, [sp, #32]
 80015c6:	3301      	adds	r3, #1
 80015c8:	d131      	bne.n	800162e <HAL_SPI_TransmitReceive+0x25a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d104      	bne.n	80015dc <HAL_SPI_TransmitReceive+0x208>
 80015d2:	3346      	adds	r3, #70	; 0x46
 80015d4:	5ae3      	ldrh	r3, [r4, r3]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d031      	beq.n	8001640 <HAL_SPI_TransmitReceive+0x26c>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d0d6      	beq.n	800158e <HAL_SPI_TransmitReceive+0x1ba>
 80015e0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0d2      	beq.n	800158e <HAL_SPI_TransmitReceive+0x1ba>
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	0792      	lsls	r2, r2, #30
 80015ee:	d5ce      	bpl.n	800158e <HAL_SPI_TransmitReceive+0x1ba>
        if (hspi->TxXferCount > 1U)
 80015f0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80015f2:	b292      	uxth	r2, r2
 80015f4:	2a01      	cmp	r2, #1
 80015f6:	d9c2      	bls.n	800157e <HAL_SPI_TransmitReceive+0x1aa>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80015f8:	8832      	ldrh	r2, [r6, #0]
 80015fa:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80015fc:	3602      	adds	r6, #2
          hspi->TxXferCount -= 2U;
 80015fe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001600:	3b02      	subs	r3, #2
 8001602:	b29b      	uxth	r3, r3
 8001604:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8001606:	2500      	movs	r5, #0
 8001608:	e7c1      	b.n	800158e <HAL_SPI_TransmitReceive+0x1ba>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800160a:	6822      	ldr	r2, [r4, #0]
 800160c:	6851      	ldr	r1, [r2, #4]
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	430b      	orrs	r3, r1
 8001614:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8001616:	2501      	movs	r5, #1
 8001618:	e7d4      	b.n	80015c4 <HAL_SPI_TransmitReceive+0x1f0>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 800161a:	7b1b      	ldrb	r3, [r3, #12]
 800161c:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 800161e:	2246      	movs	r2, #70	; 0x46
 8001620:	5aa3      	ldrh	r3, [r4, r2]
 8001622:	3b01      	subs	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	52a3      	strh	r3, [r4, r2]
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001628:	3701      	adds	r7, #1
        txallowed = 1U;
 800162a:	2501      	movs	r5, #1
 800162c:	e7ca      	b.n	80015c4 <HAL_SPI_TransmitReceive+0x1f0>
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800162e:	f7fe fe33 	bl	8000298 <HAL_GetTick>
 8001632:	9b01      	ldr	r3, [sp, #4]
 8001634:	1ac0      	subs	r0, r0, r3
 8001636:	9b08      	ldr	r3, [sp, #32]
 8001638:	4298      	cmp	r0, r3
 800163a:	d3c6      	bcc.n	80015ca <HAL_SPI_TransmitReceive+0x1f6>
        errorcode = HAL_TIMEOUT;
 800163c:	2003      	movs	r0, #3
 800163e:	e6e5      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001640:	9a01      	ldr	r2, [sp, #4]
 8001642:	9908      	ldr	r1, [sp, #32]
 8001644:	0020      	movs	r0, r4
 8001646:	f7ff fd01 	bl	800104c <SPI_EndRxTxTransaction>
 800164a:	2800      	cmp	r0, #0
 800164c:	d001      	beq.n	8001652 <HAL_SPI_TransmitReceive+0x27e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800164e:	2320      	movs	r3, #32
 8001650:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001652:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_SPI_TransmitReceive+0x298>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001658:	2000      	movs	r0, #0
 800165a:	e6d7      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_BUSY;
 800165c:	2002      	movs	r0, #2
 800165e:	e6d5      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 8001660:	2001      	movs	r0, #1
 8001662:	e6d3      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
 8001664:	2001      	movs	r0, #1
 8001666:	e6d1      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
 8001668:	2001      	movs	r0, #1
 800166a:	e6cf      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
    errorcode = HAL_ERROR;
 800166c:	2001      	movs	r0, #1
 800166e:	e6cd      	b.n	800140c <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8001670:	2002      	movs	r0, #2
 8001672:	e6d1      	b.n	8001418 <HAL_SPI_TransmitReceive+0x44>
 8001674:	ffffefff 	.word	0xffffefff

08001678 <HAL_SPI_Receive>:
{
 8001678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167a:	b085      	sub	sp, #20
 800167c:	0004      	movs	r4, r0
 800167e:	000d      	movs	r5, r1
 8001680:	0016      	movs	r6, r2
 8001682:	001f      	movs	r7, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001684:	2382      	movs	r3, #130	; 0x82
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	6842      	ldr	r2, [r0, #4]
 800168a:	429a      	cmp	r2, r3
 800168c:	d017      	beq.n	80016be <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 800168e:	235c      	movs	r3, #92	; 0x5c
 8001690:	5ce3      	ldrb	r3, [r4, r3]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d100      	bne.n	8001698 <HAL_SPI_Receive+0x20>
 8001696:	e0b1      	b.n	80017fc <HAL_SPI_Receive+0x184>
 8001698:	235c      	movs	r3, #92	; 0x5c
 800169a:	2201      	movs	r2, #1
 800169c:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 800169e:	f7fe fdfb 	bl	8000298 <HAL_GetTick>
 80016a2:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 80016a4:	235d      	movs	r3, #93	; 0x5d
 80016a6:	5ce3      	ldrb	r3, [r4, r3]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d014      	beq.n	80016d6 <HAL_SPI_Receive+0x5e>
    errorcode = HAL_BUSY;
 80016ac:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80016ae:	235d      	movs	r3, #93	; 0x5d
 80016b0:	2201      	movs	r2, #1
 80016b2:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80016b4:	3b01      	subs	r3, #1
 80016b6:	2200      	movs	r2, #0
 80016b8:	54e2      	strb	r2, [r4, r3]
}
 80016ba:	b005      	add	sp, #20
 80016bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80016be:	6883      	ldr	r3, [r0, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e4      	bne.n	800168e <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80016c4:	335d      	adds	r3, #93	; 0x5d
 80016c6:	2204      	movs	r2, #4
 80016c8:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80016ca:	9700      	str	r7, [sp, #0]
 80016cc:	0033      	movs	r3, r6
 80016ce:	000a      	movs	r2, r1
 80016d0:	f7ff fe80 	bl	80013d4 <HAL_SPI_TransmitReceive>
 80016d4:	e7f1      	b.n	80016ba <HAL_SPI_Receive+0x42>
  if ((pData == NULL) || (Size == 0U))
 80016d6:	2d00      	cmp	r5, #0
 80016d8:	d100      	bne.n	80016dc <HAL_SPI_Receive+0x64>
 80016da:	e085      	b.n	80017e8 <HAL_SPI_Receive+0x170>
 80016dc:	2e00      	cmp	r6, #0
 80016de:	d100      	bne.n	80016e2 <HAL_SPI_Receive+0x6a>
 80016e0:	e084      	b.n	80017ec <HAL_SPI_Receive+0x174>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80016e2:	335c      	adds	r3, #92	; 0x5c
 80016e4:	2204      	movs	r2, #4
 80016e6:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80016ec:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80016ee:	3240      	adds	r2, #64	; 0x40
 80016f0:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 80016f2:	3202      	adds	r2, #2
 80016f4:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80016f6:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80016f8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80016fa:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80016fc:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80016fe:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001700:	23e0      	movs	r3, #224	; 0xe0
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	68e2      	ldr	r2, [r4, #12]
 8001706:	429a      	cmp	r2, r3
 8001708:	d917      	bls.n	800173a <HAL_SPI_Receive+0xc2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800170a:	6822      	ldr	r2, [r4, #0]
 800170c:	6853      	ldr	r3, [r2, #4]
 800170e:	493c      	ldr	r1, [pc, #240]	; (8001800 <HAL_SPI_Receive+0x188>)
 8001710:	400b      	ands	r3, r1
 8001712:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	68a2      	ldr	r2, [r4, #8]
 800171a:	429a      	cmp	r2, r3
 800171c:	d014      	beq.n	8001748 <HAL_SPI_Receive+0xd0>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	0652      	lsls	r2, r2, #25
 8001724:	d403      	bmi.n	800172e <HAL_SPI_Receive+0xb6>
    __HAL_SPI_ENABLE(hspi);
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2140      	movs	r1, #64	; 0x40
 800172a:	430a      	orrs	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800172e:	23e0      	movs	r3, #224	; 0xe0
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	68e2      	ldr	r2, [r4, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d911      	bls.n	800175c <HAL_SPI_Receive+0xe4>
 8001738:	e02e      	b.n	8001798 <HAL_SPI_Receive+0x120>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800173a:	6822      	ldr	r2, [r4, #0]
 800173c:	6851      	ldr	r1, [r2, #4]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	430b      	orrs	r3, r1
 8001744:	6053      	str	r3, [r2, #4]
 8001746:	e7e5      	b.n	8001714 <HAL_SPI_Receive+0x9c>
    SPI_1LINE_RX(hspi);
 8001748:	6822      	ldr	r2, [r4, #0]
 800174a:	6813      	ldr	r3, [r2, #0]
 800174c:	492d      	ldr	r1, [pc, #180]	; (8001804 <HAL_SPI_Receive+0x18c>)
 800174e:	400b      	ands	r3, r1
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e7e4      	b.n	800171e <HAL_SPI_Receive+0xa6>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001754:	2f00      	cmp	r7, #0
 8001756:	d04b      	beq.n	80017f0 <HAL_SPI_Receive+0x178>
 8001758:	1c7b      	adds	r3, r7, #1
 800175a:	d111      	bne.n	8001780 <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 800175c:	2346      	movs	r3, #70	; 0x46
 800175e:	5ae3      	ldrh	r3, [r4, r3]
 8001760:	b29b      	uxth	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d032      	beq.n	80017cc <HAL_SPI_Receive+0x154>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	07d2      	lsls	r2, r2, #31
 800176c:	d5f2      	bpl.n	8001754 <HAL_SPI_Receive+0xdc>
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 800176e:	7b1b      	ldrb	r3, [r3, #12]
 8001770:	702b      	strb	r3, [r5, #0]
        pData += sizeof(uint8_t);
 8001772:	3501      	adds	r5, #1
        hspi->RxXferCount--;
 8001774:	2246      	movs	r2, #70	; 0x46
 8001776:	5aa3      	ldrh	r3, [r4, r2]
 8001778:	3b01      	subs	r3, #1
 800177a:	b29b      	uxth	r3, r3
 800177c:	52a3      	strh	r3, [r4, r2]
 800177e:	e7ed      	b.n	800175c <HAL_SPI_Receive+0xe4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001780:	f7fe fd8a 	bl	8000298 <HAL_GetTick>
 8001784:	9b03      	ldr	r3, [sp, #12]
 8001786:	1ac0      	subs	r0, r0, r3
 8001788:	42b8      	cmp	r0, r7
 800178a:	d3e7      	bcc.n	800175c <HAL_SPI_Receive+0xe4>
          errorcode = HAL_TIMEOUT;
 800178c:	2003      	movs	r0, #3
 800178e:	e78e      	b.n	80016ae <HAL_SPI_Receive+0x36>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001790:	2f00      	cmp	r7, #0
 8001792:	d02f      	beq.n	80017f4 <HAL_SPI_Receive+0x17c>
 8001794:	1c7b      	adds	r3, r7, #1
 8001796:	d111      	bne.n	80017bc <HAL_SPI_Receive+0x144>
    while (hspi->RxXferCount > 0U)
 8001798:	2346      	movs	r3, #70	; 0x46
 800179a:	5ae3      	ldrh	r3, [r4, r3]
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d014      	beq.n	80017cc <HAL_SPI_Receive+0x154>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	689a      	ldr	r2, [r3, #8]
 80017a6:	07d2      	lsls	r2, r2, #31
 80017a8:	d5f2      	bpl.n	8001790 <HAL_SPI_Receive+0x118>
        *((uint16_t *)pData) = hspi->Instance->DR;
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	802b      	strh	r3, [r5, #0]
        pData += sizeof(uint16_t);
 80017ae:	3502      	adds	r5, #2
        hspi->RxXferCount--;
 80017b0:	2246      	movs	r2, #70	; 0x46
 80017b2:	5aa3      	ldrh	r3, [r4, r2]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	52a3      	strh	r3, [r4, r2]
 80017ba:	e7ed      	b.n	8001798 <HAL_SPI_Receive+0x120>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80017bc:	f7fe fd6c 	bl	8000298 <HAL_GetTick>
 80017c0:	9b03      	ldr	r3, [sp, #12]
 80017c2:	1ac0      	subs	r0, r0, r3
 80017c4:	42b8      	cmp	r0, r7
 80017c6:	d3e7      	bcc.n	8001798 <HAL_SPI_Receive+0x120>
          errorcode = HAL_TIMEOUT;
 80017c8:	2003      	movs	r0, #3
 80017ca:	e770      	b.n	80016ae <HAL_SPI_Receive+0x36>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80017cc:	9a03      	ldr	r2, [sp, #12]
 80017ce:	0039      	movs	r1, r7
 80017d0:	0020      	movs	r0, r4
 80017d2:	f7ff fc6f 	bl	80010b4 <SPI_EndRxTransaction>
 80017d6:	2800      	cmp	r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_SPI_Receive+0x166>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80017da:	2320      	movs	r3, #32
 80017dc:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80017de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <HAL_SPI_Receive+0x180>
  HAL_StatusTypeDef errorcode = HAL_OK;
 80017e4:	2000      	movs	r0, #0
 80017e6:	e762      	b.n	80016ae <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 80017e8:	2001      	movs	r0, #1
 80017ea:	e760      	b.n	80016ae <HAL_SPI_Receive+0x36>
 80017ec:	2001      	movs	r0, #1
 80017ee:	e75e      	b.n	80016ae <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 80017f0:	2003      	movs	r0, #3
 80017f2:	e75c      	b.n	80016ae <HAL_SPI_Receive+0x36>
          errorcode = HAL_TIMEOUT;
 80017f4:	2003      	movs	r0, #3
 80017f6:	e75a      	b.n	80016ae <HAL_SPI_Receive+0x36>
    errorcode = HAL_ERROR;
 80017f8:	2001      	movs	r0, #1
 80017fa:	e758      	b.n	80016ae <HAL_SPI_Receive+0x36>
  __HAL_LOCK(hspi);
 80017fc:	2002      	movs	r0, #2
 80017fe:	e75c      	b.n	80016ba <HAL_SPI_Receive+0x42>
 8001800:	ffffefff 	.word	0xffffefff
 8001804:	ffffbfff 	.word	0xffffbfff

08001808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001808:	b510      	push	{r4, lr}
 800180a:	0004      	movs	r4, r0
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800180c:	6883      	ldr	r3, [r0, #8]
 800180e:	6902      	ldr	r2, [r0, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	6942      	ldr	r2, [r0, #20]
 8001814:	4313      	orrs	r3, r2
 8001816:	69c2      	ldr	r2, [r0, #28]
 8001818:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800181a:	6801      	ldr	r1, [r0, #0]
 800181c:	680a      	ldr	r2, [r1, #0]
 800181e:	485c      	ldr	r0, [pc, #368]	; (8001990 <UART_SetConfig+0x188>)
 8001820:	4002      	ands	r2, r0
 8001822:	4313      	orrs	r3, r2
 8001824:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	6853      	ldr	r3, [r2, #4]
 800182a:	495a      	ldr	r1, [pc, #360]	; (8001994 <UART_SetConfig+0x18c>)
 800182c:	400b      	ands	r3, r1
 800182e:	68e1      	ldr	r1, [r4, #12]
 8001830:	430b      	orrs	r3, r1
 8001832:	6053      	str	r3, [r2, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001834:	69a2      	ldr	r2, [r4, #24]
 8001836:	6a23      	ldr	r3, [r4, #32]
 8001838:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800183a:	6821      	ldr	r1, [r4, #0]
 800183c:	688b      	ldr	r3, [r1, #8]
 800183e:	4856      	ldr	r0, [pc, #344]	; (8001998 <UART_SetConfig+0x190>)
 8001840:	4003      	ands	r3, r0
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001846:	4b55      	ldr	r3, [pc, #340]	; (800199c <UART_SetConfig+0x194>)
 8001848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184a:	2303      	movs	r3, #3
 800184c:	4013      	ands	r3, r2
 800184e:	2b01      	cmp	r3, #1
 8001850:	d026      	beq.n	80018a0 <UART_SetConfig+0x98>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <UART_SetConfig+0x5a>
 8001856:	2b02      	cmp	r3, #2
 8001858:	d024      	beq.n	80018a4 <UART_SetConfig+0x9c>
 800185a:	2b03      	cmp	r3, #3
 800185c:	d024      	beq.n	80018a8 <UART_SetConfig+0xa0>
 800185e:	2310      	movs	r3, #16
 8001860:	e000      	b.n	8001864 <UART_SetConfig+0x5c>
 8001862:	2300      	movs	r3, #0
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001864:	2280      	movs	r2, #128	; 0x80
 8001866:	0212      	lsls	r2, r2, #8
 8001868:	69e1      	ldr	r1, [r4, #28]
 800186a:	4291      	cmp	r1, r2
 800186c:	d01e      	beq.n	80018ac <UART_SetConfig+0xa4>
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
  }
  else
  {
    switch (clocksource)
 800186e:	2b02      	cmp	r3, #2
 8001870:	d100      	bne.n	8001874 <UART_SetConfig+0x6c>
 8001872:	e06f      	b.n	8001954 <UART_SetConfig+0x14c>
 8001874:	d95e      	bls.n	8001934 <UART_SetConfig+0x12c>
 8001876:	2b04      	cmp	r3, #4
 8001878:	d100      	bne.n	800187c <UART_SetConfig+0x74>
 800187a:	e079      	b.n	8001970 <UART_SetConfig+0x168>
 800187c:	2b08      	cmp	r3, #8
 800187e:	d000      	beq.n	8001882 <UART_SetConfig+0x7a>
 8001880:	e084      	b.n	800198c <UART_SetConfig+0x184>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001882:	6863      	ldr	r3, [r4, #4]
 8001884:	0858      	lsrs	r0, r3, #1
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	469c      	mov	ip, r3
 800188c:	4460      	add	r0, ip
 800188e:	6861      	ldr	r1, [r4, #4]
 8001890:	f7fe fc4c 	bl	800012c <__udivsi3>
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	0400      	lsls	r0, r0, #16
 8001898:	0c00      	lsrs	r0, r0, #16
 800189a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800189c:	2000      	movs	r0, #0
        break;
 800189e:	e02e      	b.n	80018fe <UART_SetConfig+0xf6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018a0:	2304      	movs	r3, #4
 80018a2:	e7df      	b.n	8001864 <UART_SetConfig+0x5c>
 80018a4:	2308      	movs	r3, #8
 80018a6:	e7dd      	b.n	8001864 <UART_SetConfig+0x5c>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e7db      	b.n	8001864 <UART_SetConfig+0x5c>
    switch (clocksource)
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d027      	beq.n	8001900 <UART_SetConfig+0xf8>
 80018b0:	d90f      	bls.n	80018d2 <UART_SetConfig+0xca>
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d02f      	beq.n	8001916 <UART_SetConfig+0x10e>
 80018b6:	2b08      	cmp	r3, #8
 80018b8:	d139      	bne.n	800192e <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018ba:	6863      	ldr	r3, [r4, #4]
 80018bc:	0858      	lsrs	r0, r3, #1
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	025b      	lsls	r3, r3, #9
 80018c2:	469c      	mov	ip, r3
 80018c4:	4460      	add	r0, ip
 80018c6:	6861      	ldr	r1, [r4, #4]
 80018c8:	f7fe fc30 	bl	800012c <__udivsi3>
 80018cc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80018ce:	2000      	movs	r0, #0
        break;
 80018d0:	e00c      	b.n	80018ec <UART_SetConfig+0xe4>
    switch (clocksource)
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d12b      	bne.n	800192e <UART_SetConfig+0x126>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80018d6:	f7ff fa73 	bl	8000dc0 <HAL_RCC_GetPCLK1Freq>
 80018da:	0040      	lsls	r0, r0, #1
 80018dc:	6863      	ldr	r3, [r4, #4]
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	18c0      	adds	r0, r0, r3
 80018e2:	6861      	ldr	r1, [r4, #4]
 80018e4:	f7fe fc22 	bl	800012c <__udivsi3>
 80018e8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80018ea:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80018ec:	220f      	movs	r2, #15
 80018ee:	0019      	movs	r1, r3
 80018f0:	4391      	bics	r1, r2
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018f2:	105b      	asrs	r3, r3, #1
 80018f4:	3a08      	subs	r2, #8
 80018f6:	4013      	ands	r3, r2
 80018f8:	430b      	orrs	r3, r1
    huart->Instance->BRR = brrtemp;
 80018fa:	6822      	ldr	r2, [r4, #0]
 80018fc:	60d3      	str	r3, [r2, #12]
    }
  }

  return ret;

}
 80018fe:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001900:	6863      	ldr	r3, [r4, #4]
 8001902:	0858      	lsrs	r0, r3, #1
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <UART_SetConfig+0x198>)
 8001906:	469c      	mov	ip, r3
 8001908:	4460      	add	r0, ip
 800190a:	6861      	ldr	r1, [r4, #4]
 800190c:	f7fe fc0e 	bl	800012c <__udivsi3>
 8001910:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001912:	2000      	movs	r0, #0
        break;
 8001914:	e7ea      	b.n	80018ec <UART_SetConfig+0xe4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001916:	f7ff f96b 	bl	8000bf0 <HAL_RCC_GetSysClockFreq>
 800191a:	0040      	lsls	r0, r0, #1
 800191c:	6863      	ldr	r3, [r4, #4]
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	18c0      	adds	r0, r0, r3
 8001922:	6861      	ldr	r1, [r4, #4]
 8001924:	f7fe fc02 	bl	800012c <__udivsi3>
 8001928:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800192a:	2000      	movs	r0, #0
        break;
 800192c:	e7de      	b.n	80018ec <UART_SetConfig+0xe4>
        ret = HAL_ERROR;
 800192e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001930:	2300      	movs	r3, #0
 8001932:	e7db      	b.n	80018ec <UART_SetConfig+0xe4>
    switch (clocksource)
 8001934:	2b00      	cmp	r3, #0
 8001936:	d129      	bne.n	800198c <UART_SetConfig+0x184>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001938:	f7ff fa42 	bl	8000dc0 <HAL_RCC_GetPCLK1Freq>
 800193c:	6863      	ldr	r3, [r4, #4]
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	18c0      	adds	r0, r0, r3
 8001942:	6861      	ldr	r1, [r4, #4]
 8001944:	f7fe fbf2 	bl	800012c <__udivsi3>
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	0400      	lsls	r0, r0, #16
 800194c:	0c00      	lsrs	r0, r0, #16
 800194e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001950:	2000      	movs	r0, #0
        break;
 8001952:	e7d4      	b.n	80018fe <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001954:	6863      	ldr	r3, [r4, #4]
 8001956:	0858      	lsrs	r0, r3, #1
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <UART_SetConfig+0x19c>)
 800195a:	469c      	mov	ip, r3
 800195c:	4460      	add	r0, ip
 800195e:	6861      	ldr	r1, [r4, #4]
 8001960:	f7fe fbe4 	bl	800012c <__udivsi3>
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	0400      	lsls	r0, r0, #16
 8001968:	0c00      	lsrs	r0, r0, #16
 800196a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800196c:	2000      	movs	r0, #0
        break;
 800196e:	e7c6      	b.n	80018fe <UART_SetConfig+0xf6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001970:	f7ff f93e 	bl	8000bf0 <HAL_RCC_GetSysClockFreq>
 8001974:	6863      	ldr	r3, [r4, #4]
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	18c0      	adds	r0, r0, r3
 800197a:	6861      	ldr	r1, [r4, #4]
 800197c:	f7fe fbd6 	bl	800012c <__udivsi3>
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	0400      	lsls	r0, r0, #16
 8001984:	0c00      	lsrs	r0, r0, #16
 8001986:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001988:	2000      	movs	r0, #0
        break;
 800198a:	e7b8      	b.n	80018fe <UART_SetConfig+0xf6>
        ret = HAL_ERROR;
 800198c:	2001      	movs	r0, #1
 800198e:	e7b6      	b.n	80018fe <UART_SetConfig+0xf6>
 8001990:	ffff69f3 	.word	0xffff69f3
 8001994:	ffffcfff 	.word	0xffffcfff
 8001998:	fffff4ff 	.word	0xfffff4ff
 800199c:	40021000 	.word	0x40021000
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	007a1200 	.word	0x007a1200

080019a8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019aa:	07db      	lsls	r3, r3, #31
 80019ac:	d506      	bpl.n	80019bc <UART_AdvFeatureConfig+0x14>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019ae:	6802      	ldr	r2, [r0, #0]
 80019b0:	6853      	ldr	r3, [r2, #4]
 80019b2:	492c      	ldr	r1, [pc, #176]	; (8001a64 <UART_AdvFeatureConfig+0xbc>)
 80019b4:	400b      	ands	r3, r1
 80019b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019be:	079b      	lsls	r3, r3, #30
 80019c0:	d506      	bpl.n	80019d0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019c2:	6802      	ldr	r2, [r0, #0]
 80019c4:	6853      	ldr	r3, [r2, #4]
 80019c6:	4928      	ldr	r1, [pc, #160]	; (8001a68 <UART_AdvFeatureConfig+0xc0>)
 80019c8:	400b      	ands	r3, r1
 80019ca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80019cc:	430b      	orrs	r3, r1
 80019ce:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019d2:	075b      	lsls	r3, r3, #29
 80019d4:	d506      	bpl.n	80019e4 <UART_AdvFeatureConfig+0x3c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80019d6:	6802      	ldr	r2, [r0, #0]
 80019d8:	6853      	ldr	r3, [r2, #4]
 80019da:	4924      	ldr	r1, [pc, #144]	; (8001a6c <UART_AdvFeatureConfig+0xc4>)
 80019dc:	400b      	ands	r3, r1
 80019de:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80019e0:	430b      	orrs	r3, r1
 80019e2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80019e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019e6:	071b      	lsls	r3, r3, #28
 80019e8:	d506      	bpl.n	80019f8 <UART_AdvFeatureConfig+0x50>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80019ea:	6802      	ldr	r2, [r0, #0]
 80019ec:	6853      	ldr	r3, [r2, #4]
 80019ee:	4920      	ldr	r1, [pc, #128]	; (8001a70 <UART_AdvFeatureConfig+0xc8>)
 80019f0:	400b      	ands	r3, r1
 80019f2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80019f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019fa:	06db      	lsls	r3, r3, #27
 80019fc:	d506      	bpl.n	8001a0c <UART_AdvFeatureConfig+0x64>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80019fe:	6802      	ldr	r2, [r0, #0]
 8001a00:	6893      	ldr	r3, [r2, #8]
 8001a02:	491c      	ldr	r1, [pc, #112]	; (8001a74 <UART_AdvFeatureConfig+0xcc>)
 8001a04:	400b      	ands	r3, r1
 8001a06:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001a08:	430b      	orrs	r3, r1
 8001a0a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a0e:	069b      	lsls	r3, r3, #26
 8001a10:	d506      	bpl.n	8001a20 <UART_AdvFeatureConfig+0x78>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a12:	6802      	ldr	r2, [r0, #0]
 8001a14:	6893      	ldr	r3, [r2, #8]
 8001a16:	4918      	ldr	r1, [pc, #96]	; (8001a78 <UART_AdvFeatureConfig+0xd0>)
 8001a18:	400b      	ands	r3, r1
 8001a1a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a22:	065b      	lsls	r3, r3, #25
 8001a24:	d50b      	bpl.n	8001a3e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a26:	6802      	ldr	r2, [r0, #0]
 8001a28:	6853      	ldr	r3, [r2, #4]
 8001a2a:	4914      	ldr	r1, [pc, #80]	; (8001a7c <UART_AdvFeatureConfig+0xd4>)
 8001a2c:	400b      	ands	r3, r1
 8001a2e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	035b      	lsls	r3, r3, #13
 8001a38:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d00a      	beq.n	8001a54 <UART_AdvFeatureConfig+0xac>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a40:	061b      	lsls	r3, r3, #24
 8001a42:	d506      	bpl.n	8001a52 <UART_AdvFeatureConfig+0xaa>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a44:	6802      	ldr	r2, [r0, #0]
 8001a46:	6853      	ldr	r3, [r2, #4]
 8001a48:	490d      	ldr	r1, [pc, #52]	; (8001a80 <UART_AdvFeatureConfig+0xd8>)
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	6053      	str	r3, [r2, #4]
  }
}
 8001a52:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a54:	6802      	ldr	r2, [r0, #0]
 8001a56:	6853      	ldr	r3, [r2, #4]
 8001a58:	490a      	ldr	r1, [pc, #40]	; (8001a84 <UART_AdvFeatureConfig+0xdc>)
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	6053      	str	r3, [r2, #4]
 8001a62:	e7ec      	b.n	8001a3e <UART_AdvFeatureConfig+0x96>
 8001a64:	fffdffff 	.word	0xfffdffff
 8001a68:	fffeffff 	.word	0xfffeffff
 8001a6c:	fffbffff 	.word	0xfffbffff
 8001a70:	ffff7fff 	.word	0xffff7fff
 8001a74:	ffffefff 	.word	0xffffefff
 8001a78:	ffffdfff 	.word	0xffffdfff
 8001a7c:	ffefffff 	.word	0xffefffff
 8001a80:	fff7ffff 	.word	0xfff7ffff
 8001a84:	ff9fffff 	.word	0xff9fffff

08001a88 <UART_CheckIdleState>:
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	66c3      	str	r3, [r0, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	2169      	movs	r1, #105	; 0x69
 8001a90:	5442      	strb	r2, [r0, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8001a92:	3101      	adds	r1, #1
 8001a94:	5442      	strb	r2, [r0, r1]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001a96:	3248      	adds	r2, #72	; 0x48
 8001a98:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
}
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_UART_Init>:
{
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001aa4:	d030      	beq.n	8001b08 <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001aa6:	2369      	movs	r3, #105	; 0x69
 8001aa8:	5cc3      	ldrb	r3, [r0, r3]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d022      	beq.n	8001af4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8001aae:	2369      	movs	r3, #105	; 0x69
 8001ab0:	2224      	movs	r2, #36	; 0x24
 8001ab2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	6813      	ldr	r3, [r2, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	438b      	bics	r3, r1
 8001abc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001abe:	0020      	movs	r0, r4
 8001ac0:	f7ff fea2 	bl	8001808 <UART_SetConfig>
 8001ac4:	2801      	cmp	r0, #1
 8001ac6:	d014      	beq.n	8001af2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001ace:	6822      	ldr	r2, [r4, #0]
 8001ad0:	6853      	ldr	r3, [r2, #4]
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_UART_Init+0x6c>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ad8:	6822      	ldr	r2, [r4, #0]
 8001ada:	6893      	ldr	r3, [r2, #8]
 8001adc:	2108      	movs	r1, #8
 8001ade:	438b      	bics	r3, r1
 8001ae0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001ae2:	6822      	ldr	r2, [r4, #0]
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	3907      	subs	r1, #7
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001aec:	0020      	movs	r0, r4
 8001aee:	f7ff ffcb 	bl	8001a88 <UART_CheckIdleState>
}
 8001af2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001af4:	3368      	adds	r3, #104	; 0x68
 8001af6:	2200      	movs	r2, #0
 8001af8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001afa:	f001 fc15 	bl	8003328 <HAL_UART_MspInit>
 8001afe:	e7d6      	b.n	8001aae <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8001b00:	0020      	movs	r0, r4
 8001b02:	f7ff ff51 	bl	80019a8 <UART_AdvFeatureConfig>
 8001b06:	e7e2      	b.n	8001ace <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
 8001b0a:	e7f2      	b.n	8001af2 <HAL_UART_Init+0x52>
 8001b0c:	fffff7ff 	.word	0xfffff7ff

08001b10 <CH395TCPServerStart>:

#include <CH395.h>
#include <CH395CMD.h>
#include "Delay.h"
BOOL CH395TCPServerStart(uint32_t ip, uint16_t port)
{
 8001b10:	b530      	push	{r4, r5, lr}
 8001b12:	b083      	sub	sp, #12
 8001b14:	9001      	str	r0, [sp, #4]
 8001b16:	000d      	movs	r5, r1
	uint8_t i;
	// Initialize Stack
	CH395CMDInitCH395();
 8001b18:	f000 f894 	bl	8001c44 <CH395CMDInitCH395>
	// Check PHY
	i=0;
 8001b1c:	2400      	movs	r4, #0
	do
	{
		Delay_ms(100);
 8001b1e:	481c      	ldr	r0, [pc, #112]	; (8001b90 <CH395TCPServerStart+0x80>)
 8001b20:	f000 fab0 	bl	8002084 <Delay_us>
		uint8_t phy = CH395CMDGetPHYStatus();
 8001b24:	f000 f858 	bl	8001bd8 <CH395CMDGetPHYStatus>
		if(phy != (uint8_t)1) break; // PHY connected
 8001b28:	2801      	cmp	r0, #1
 8001b2a:	d103      	bne.n	8001b34 <CH395TCPServerStart+0x24>
		++i;
 8001b2c:	3401      	adds	r4, #1
 8001b2e:	b2e4      	uxtb	r4, r4
	}while(i<5);
 8001b30:	2c04      	cmp	r4, #4
 8001b32:	d9f4      	bls.n	8001b1e <CH395TCPServerStart+0xe>
	if(i >= 5) return FALSE;
 8001b34:	2c04      	cmp	r4, #4
 8001b36:	d902      	bls.n	8001b3e <CH395TCPServerStart+0x2e>
 8001b38:	2000      	movs	r0, #0
	}

	CH395OpenSocket(0); // open socket 0
	CH395TCPListen(0); // start lisening
	return TRUE;
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	bd30      	pop	{r4, r5, pc}
	Delay_ms(200);
 8001b3e:	4815      	ldr	r0, [pc, #84]	; (8001b94 <CH395TCPServerStart+0x84>)
 8001b40:	f000 faa0 	bl	8002084 <Delay_us>
	if(CH395DHCPEnable(TRUE) != 0)
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 fa19 	bl	8001f7c <CH395DHCPEnable>
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	d104      	bne.n	8001b58 <CH395TCPServerStart+0x48>
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER);
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f000 fa45 	bl	8001fde <CH395SetStartPara>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 8001b54:	2400      	movs	r4, #0
 8001b56:	e010      	b.n	8001b7a <CH395TCPServerStart+0x6a>
		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
 8001b58:	a801      	add	r0, sp, #4
 8001b5a:	f000 f891 	bl	8001c80 <CH395CMDSetIPAddr>
		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
 8001b5e:	a801      	add	r0, sp, #4
 8001b60:	f000 f8a8 	bl	8001cb4 <CH395CMDSetGWIPAddr>
 8001b64:	e7f3      	b.n	8001b4e <CH395TCPServerStart+0x3e>
		CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET 0 to be TCP server
 8001b66:	2103      	movs	r1, #3
 8001b68:	0020      	movs	r0, r4
 8001b6a:	f000 f8bd 	bl	8001ce8 <CH395SetSocketProtType>
		CH395SetSocketSourPort(i, port);
 8001b6e:	0029      	movs	r1, r5
 8001b70:	0020      	movs	r0, r4
 8001b72:	f000 f8cf 	bl	8001d14 <CH395SetSocketSourPort>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 8001b76:	3401      	adds	r4, #1
 8001b78:	b2e4      	uxtb	r4, r4
 8001b7a:	2c03      	cmp	r4, #3
 8001b7c:	d9f3      	bls.n	8001b66 <CH395TCPServerStart+0x56>
	CH395OpenSocket(0); // open socket 0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f9a0 	bl	8001ec4 <CH395OpenSocket>
	CH395TCPListen(0); // start lisening
 8001b84:	2000      	movs	r0, #0
 8001b86:	f000 f9bf 	bl	8001f08 <CH395TCPListen>
	return TRUE;
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	e7d5      	b.n	8001b3a <CH395TCPServerStart+0x2a>
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	000186a0 	.word	0x000186a0
 8001b94:	00030d40 	.word	0x00030d40

08001b98 <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 8001b98:	b510      	push	{r4, lr}
    xWriteCH395Cmd(CMD00_RESET_ALL);
 8001b9a:	2005      	movs	r0, #5
 8001b9c:	f000 fa34 	bl	8002008 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <CH395CMDReset+0x18>)
 8001ba2:	8899      	ldrh	r1, [r3, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f7fe fde3 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001bac:	bd10      	pop	{r4, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <CH395CMDGetVer>:
* Input          : None
* Output         : None
* Return         : 1字节芯片及固件版本号
*******************************************************************************/
uint8_t CH395CMDGetVer(void)
{
 8001bb4:	b510      	push	{r4, lr}
    uint8_t i;
    xWriteCH395Cmd(CMD01_GET_IC_VER);
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 fa26 	bl	8002008 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001bbc:	f000 fa52 	bl	8002064 <xReadCH395Data>
 8001bc0:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001bc2:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <CH395CMDGetVer+0x20>)
 8001bc4:	8899      	ldrh	r1, [r3, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f7fe fdd2 	bl	8000772 <HAL_GPIO_WritePin>
    return i;
}
 8001bce:	0020      	movs	r0, r4
 8001bd0:	bd10      	pop	{r4, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	20000000 	.word	0x20000000

08001bd8 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 8001bd8:	b510      	push	{r4, lr}
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 8001bda:	2026      	movs	r0, #38	; 0x26
 8001bdc:	f000 fa14 	bl	8002008 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001be0:	f000 fa40 	bl	8002064 <xReadCH395Data>
 8001be4:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <CH395CMDGetPHYStatus+0x20>)
 8001be8:	8899      	ldrh	r1, [r3, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f7fe fdc0 	bl	8000772 <HAL_GPIO_WritePin>
    return i;
}
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	bd10      	pop	{r4, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000000 	.word	0x20000000

08001bfc <CH395CMDGetGlobIntStatus>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint8_t CH395CMDGetGlobIntStatus(void)
{
 8001bfc:	b510      	push	{r4, lr}
    uint8_t init_status;

    xWriteCH395Cmd(CMD01_GET_GLOB_INT_STATUS);
 8001bfe:	2029      	movs	r0, #41	; 0x29
 8001c00:	f000 fa02 	bl	8002008 <xWriteCH395Cmd>
    init_status = xReadCH395Data();
 8001c04:	f000 fa2e 	bl	8002064 <xReadCH395Data>
 8001c08:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <CH395CMDGetGlobIntStatus+0x20>)
 8001c0c:	8899      	ldrh	r1, [r3, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f7fe fdae 	bl	8000772 <HAL_GPIO_WritePin>
    return  init_status;
}
 8001c16:	0020      	movs	r0, r4
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	20000000 	.word	0x20000000

08001c20 <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 8001c20:	b510      	push	{r4, lr}
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 8001c22:	202c      	movs	r0, #44	; 0x2c
 8001c24:	f000 f9f0 	bl	8002008 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8001c28:	f000 fa1c 	bl	8002064 <xReadCH395Data>
 8001c2c:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <CH395GetCmdStatus+0x20>)
 8001c30:	8899      	ldrh	r1, [r3, #4]
 8001c32:	6818      	ldr	r0, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f7fe fd9c 	bl	8000772 <HAL_GPIO_WritePin>
    return i;
}
 8001c3a:	0020      	movs	r0, r4
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	20000000 	.word	0x20000000

08001c44 <CH395CMDInitCH395>:
{
 8001c44:	b510      	push	{r4, lr}
    xWriteCH395Cmd(CMD0W_INIT_CH395);
 8001c46:	2027      	movs	r0, #39	; 0x27
 8001c48:	f000 f9de 	bl	8002008 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <CH395CMDInitCH395+0x34>)
 8001c4e:	8899      	ldrh	r1, [r3, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f7fe fd8d 	bl	8000772 <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001c58:	2400      	movs	r4, #0
 8001c5a:	e000      	b.n	8001c5e <CH395CMDInitCH395+0x1a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 8001c5c:	001c      	movs	r4, r3
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 8001c5e:	4807      	ldr	r0, [pc, #28]	; (8001c7c <CH395CMDInitCH395+0x38>)
 8001c60:	f000 fa10 	bl	8002084 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001c64:	f7ff ffdc 	bl	8001c20 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001c68:	2810      	cmp	r0, #16
 8001c6a:	d104      	bne.n	8001c76 <CH395CMDInitCH395+0x32>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 8001c6c:	1c63      	adds	r3, r4, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2cc8      	cmp	r4, #200	; 0xc8
 8001c72:	d9f3      	bls.n	8001c5c <CH395CMDInitCH395+0x18>
 8001c74:	30ea      	adds	r0, #234	; 0xea
}
 8001c76:	bd10      	pop	{r4, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	00002710 	.word	0x00002710

08001c80 <CH395CMDSetIPAddr>:
* Input          : ipaddr 指IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetIPAddr(uint8_t *ipaddr)
{
 8001c80:	b570      	push	{r4, r5, r6, lr}
 8001c82:	0005      	movs	r5, r0
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_IP_ADDR);
 8001c84:	2022      	movs	r0, #34	; 0x22
 8001c86:	f000 f9bf 	bl	8002008 <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*ipaddr++);
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	e006      	b.n	8001c9c <CH395CMDSetIPAddr+0x1c>
 8001c8e:	1c6e      	adds	r6, r5, #1
 8001c90:	7828      	ldrb	r0, [r5, #0]
 8001c92:	f000 f9d9 	bl	8002048 <xWriteCH395Data>
 8001c96:	3401      	adds	r4, #1
 8001c98:	b2e4      	uxtb	r4, r4
 8001c9a:	0035      	movs	r5, r6
 8001c9c:	2c03      	cmp	r4, #3
 8001c9e:	d9f6      	bls.n	8001c8e <CH395CMDSetIPAddr+0xe>
    xEndCH395Cmd();
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <CH395CMDSetIPAddr+0x30>)
 8001ca2:	8899      	ldrh	r1, [r3, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f7fe fd63 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001cac:	bd70      	pop	{r4, r5, r6, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <CH395CMDSetGWIPAddr>:
* Input          : ipaddr 指向网关IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetGWIPAddr(uint8_t *gwipaddr)
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
 8001cb6:	0005      	movs	r5, r0
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_GWIP_ADDR);
 8001cb8:	2023      	movs	r0, #35	; 0x23
 8001cba:	f000 f9a5 	bl	8002008 <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*gwipaddr++);
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	e006      	b.n	8001cd0 <CH395CMDSetGWIPAddr+0x1c>
 8001cc2:	1c6e      	adds	r6, r5, #1
 8001cc4:	7828      	ldrb	r0, [r5, #0]
 8001cc6:	f000 f9bf 	bl	8002048 <xWriteCH395Data>
 8001cca:	3401      	adds	r4, #1
 8001ccc:	b2e4      	uxtb	r4, r4
 8001cce:	0035      	movs	r5, r6
 8001cd0:	2c03      	cmp	r4, #3
 8001cd2:	d9f6      	bls.n	8001cc2 <CH395CMDSetGWIPAddr+0xe>
    xEndCH395Cmd();
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <CH395CMDSetGWIPAddr+0x30>)
 8001cd6:	8899      	ldrh	r1, [r3, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f7fe fd49 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	0005      	movs	r5, r0
 8001cec:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 8001cee:	2034      	movs	r0, #52	; 0x34
 8001cf0:	f000 f98a 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001cf4:	0028      	movs	r0, r5
 8001cf6:	f000 f9a7 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data(prottype);
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 f9a4 	bl	8002048 <xWriteCH395Data>
    xEndCH395Cmd();
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <CH395SetSocketProtType+0x28>)
 8001d02:	8899      	ldrh	r1, [r3, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f7fe fd33 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	46c0      	nop			; (mov r8, r8)
 8001d10:	20000000 	.word	0x20000000

08001d14 <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 8001d14:	b570      	push	{r4, r5, r6, lr}
 8001d16:	0005      	movs	r5, r0
 8001d18:	000c      	movs	r4, r1
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 8001d1a:	2033      	movs	r0, #51	; 0x33
 8001d1c:	f000 f974 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001d20:	0028      	movs	r0, r5
 8001d22:	f000 f991 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 8001d26:	b2e0      	uxtb	r0, r4
 8001d28:	f000 f98e 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 8001d2c:	0a20      	lsrs	r0, r4, #8
 8001d2e:	f000 f98b 	bl	8002048 <xWriteCH395Data>
    xEndCH395Cmd();
 8001d32:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <CH395SetSocketSourPort+0x2c>)
 8001d34:	8899      	ldrh	r1, [r3, #4]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f7fe fd1a 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001d3e:	bd70      	pop	{r4, r5, r6, pc}
 8001d40:	20000000 	.word	0x20000000

08001d44 <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,uint8_t *databuf,uint16_t len)
{
 8001d44:	b570      	push	{r4, r5, r6, lr}
 8001d46:	0004      	movs	r4, r0
 8001d48:	000d      	movs	r5, r1
 8001d4a:	0016      	movs	r6, r2
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 8001d4c:	e004      	b.n	8001d58 <CH395SendData+0x14>
    {
    	Delay_ms(10);
 8001d4e:	4818      	ldr	r0, [pc, #96]	; (8001db0 <CH395SendData+0x6c>)
 8001d50:	f000 f998 	bl	8002084 <Delay_us>
    	i = CH395CMDGetVer();
 8001d54:	f7ff ff2e 	bl	8001bb4 <CH395CMDGetVer>
    while(!(ch395.TX_available & (1<<sockindex)))
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <CH395SendData+0x70>)
 8001d5a:	789b      	ldrb	r3, [r3, #2]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4123      	asrs	r3, r4
 8001d60:	07db      	lsls	r3, r3, #31
 8001d62:	d5f4      	bpl.n	8001d4e <CH395SendData+0xa>
    	DEBUG_LOG("%d", i);
    }
    ch395.TX_available &= ~(1<<sockindex);
 8001d64:	4813      	ldr	r0, [pc, #76]	; (8001db4 <CH395SendData+0x70>)
 8001d66:	7883      	ldrb	r3, [r0, #2]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	40a1      	lsls	r1, r4
 8001d6c:	438b      	bics	r3, r1
 8001d6e:	7083      	strb	r3, [r0, #2]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8001d70:	2039      	movs	r0, #57	; 0x39
 8001d72:	f000 f949 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8001d76:	0020      	movs	r0, r4
 8001d78:	f000 f966 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8001d7c:	b2f0      	uxtb	r0, r6
 8001d7e:	f000 f963 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8001d82:	0a30      	lsrs	r0, r6, #8
 8001d84:	f000 f960 	bl	8002048 <xWriteCH395Data>
    Delay_us(2);
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f000 f97b 	bl	8002084 <Delay_us>
    for(i = 0; i < len; i++)
 8001d8e:	2400      	movs	r4, #0
 8001d90:	e005      	b.n	8001d9e <CH395SendData+0x5a>
    {
        xWriteCH395Data(*databuf);
 8001d92:	7828      	ldrb	r0, [r5, #0]
 8001d94:	f000 f958 	bl	8002048 <xWriteCH395Data>
        databuf++;
 8001d98:	3501      	adds	r5, #1
    for(i = 0; i < len; i++)
 8001d9a:	3401      	adds	r4, #1
 8001d9c:	b2a4      	uxth	r4, r4
 8001d9e:	42b4      	cmp	r4, r6
 8001da0:	d3f7      	bcc.n	8001d92 <CH395SendData+0x4e>
    }
    xEndCH395Cmd();
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <CH395SendData+0x74>)
 8001da4:	8899      	ldrh	r1, [r3, #4]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f7fe fce2 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	00002710 	.word	0x00002710
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000000 	.word	0x20000000

08001dbc <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	0005      	movs	r5, r0
 8001dc0:	000c      	movs	r4, r1
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8001dc2:	2039      	movs	r0, #57	; 0x39
 8001dc4:	f000 f920 	bl	8002008 <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 8001dc8:	0028      	movs	r0, r5
 8001dca:	f000 f93d 	bl	8002048 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 8001dce:	b2e0      	uxtb	r0, r4
 8001dd0:	f000 f93a 	bl	8002048 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 8001dd4:	0a20      	lsrs	r0, r4, #8
 8001dd6:	f000 f937 	bl	8002048 <xWriteCH395Data>
	Delay_us(2);
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f000 f952 	bl	8002084 <Delay_us>
}
 8001de0:	bd70      	pop	{r4, r5, r6, pc}

08001de2 <CH395ContinueSendingData>:

void CH395ContinueSendingData(uint8_t *databuf, uint16_t len)
{
 8001de2:	b570      	push	{r4, r5, r6, lr}
 8001de4:	0005      	movs	r5, r0
 8001de6:	000e      	movs	r6, r1
	uint16_t i;
	for(i=0; i<len; ++i)
 8001de8:	2400      	movs	r4, #0
 8001dea:	e005      	b.n	8001df8 <CH395ContinueSendingData+0x16>
	{
		xWriteCH395Data(*databuf);
 8001dec:	7828      	ldrb	r0, [r5, #0]
 8001dee:	f000 f92b 	bl	8002048 <xWriteCH395Data>
		databuf++;
 8001df2:	3501      	adds	r5, #1
	for(i=0; i<len; ++i)
 8001df4:	3401      	adds	r4, #1
 8001df6:	b2a4      	uxth	r4, r4
 8001df8:	42b4      	cmp	r4, r6
 8001dfa:	d3f7      	bcc.n	8001dec <CH395ContinueSendingData+0xa>
	}
}
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e00 <CH395Complete>:
void CH395Complete()
{
 8001e00:	b510      	push	{r4, lr}
	xEndCH395Cmd();
 8001e02:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <CH395Complete+0x10>)
 8001e04:	8899      	ldrh	r1, [r3, #4]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f7fe fcb2 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001e0e:	bd10      	pop	{r4, pc}
 8001e10:	20000000 	.word	0x20000000

08001e14 <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 8001e14:	b570      	push	{r4, r5, r6, lr}
 8001e16:	0004      	movs	r4, r0
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 8001e18:	203b      	movs	r0, #59	; 0x3b
 8001e1a:	f000 f8f5 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8001e1e:	0020      	movs	r0, r4
 8001e20:	f000 f912 	bl	8002048 <xWriteCH395Data>
    i = xReadCH395Data();
 8001e24:	f000 f91e 	bl	8002064 <xReadCH395Data>
 8001e28:	b285      	uxth	r5, r0
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 8001e2a:	f000 f91b 	bl	8002064 <xReadCH395Data>
 8001e2e:	b280      	uxth	r0, r0
 8001e30:	0200      	lsls	r0, r0, #8
 8001e32:	b284      	uxth	r4, r0
 8001e34:	1964      	adds	r4, r4, r5
 8001e36:	b2a4      	uxth	r4, r4
    xEndCH395Cmd();
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <CH395GetRecvLength+0x34>)
 8001e3a:	8899      	ldrh	r1, [r3, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f7fe fc97 	bl	8000772 <HAL_GPIO_WritePin>
    return i;
}
 8001e44:	0020      	movs	r0, r4
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
 8001e48:	20000000 	.word	0x20000000

08001e4c <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 8001e4c:	b510      	push	{r4, lr}
 8001e4e:	0004      	movs	r4, r0
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 8001e50:	202e      	movs	r0, #46	; 0x2e
 8001e52:	f000 f8d9 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8001e56:	0020      	movs	r0, r4
 8001e58:	f000 f8f6 	bl	8002048 <xWriteCH395Data>
    xEndCH395Cmd();
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <CH395ClearRecvBuf+0x20>)
 8001e5e:	8899      	ldrh	r1, [r3, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f7fe fc85 	bl	8000772 <HAL_GPIO_WritePin>
}
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	20000000 	.word	0x20000000

08001e70 <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 8001e70:	b570      	push	{r4, r5, r6, lr}
 8001e72:	0004      	movs	r4, r0
 8001e74:	000e      	movs	r6, r1
 8001e76:	0015      	movs	r5, r2
    uint16_t i;
    if(!len)return;
 8001e78:	2900      	cmp	r1, #0
 8001e7a:	d100      	bne.n	8001e7e <CH395GetRecvData+0xe>
    {
       *pbuf = xReadCH395Data();
       pbuf++;
    }   
    xEndCH395Cmd();
}
 8001e7c:	bd70      	pop	{r4, r5, r6, pc}
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 8001e7e:	203c      	movs	r0, #60	; 0x3c
 8001e80:	f000 f8c2 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001e84:	0020      	movs	r0, r4
 8001e86:	f000 f8df 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8001e8a:	b2f0      	uxtb	r0, r6
 8001e8c:	f000 f8dc 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8001e90:	0a30      	lsrs	r0, r6, #8
 8001e92:	f000 f8d9 	bl	8002048 <xWriteCH395Data>
    Delay_us(1);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f000 f8f4 	bl	8002084 <Delay_us>
    for(i = 0; i < len; i++)
 8001e9c:	2400      	movs	r4, #0
 8001e9e:	e005      	b.n	8001eac <CH395GetRecvData+0x3c>
       *pbuf = xReadCH395Data();
 8001ea0:	f000 f8e0 	bl	8002064 <xReadCH395Data>
 8001ea4:	7028      	strb	r0, [r5, #0]
       pbuf++;
 8001ea6:	3501      	adds	r5, #1
    for(i = 0; i < len; i++)
 8001ea8:	3401      	adds	r4, #1
 8001eaa:	b2a4      	uxth	r4, r4
 8001eac:	42b4      	cmp	r4, r6
 8001eae:	d3f7      	bcc.n	8001ea0 <CH395GetRecvData+0x30>
    xEndCH395Cmd();
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <CH395GetRecvData+0x50>)
 8001eb2:	8899      	ldrh	r1, [r3, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f7fe fc5b 	bl	8000772 <HAL_GPIO_WritePin>
 8001ebc:	e7de      	b.n	8001e7c <CH395GetRecvData+0xc>
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	20000000 	.word	0x20000000

08001ec4 <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 8001ec4:	b510      	push	{r4, lr}
 8001ec6:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s = 0;
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 8001ec8:	2035      	movs	r0, #53	; 0x35
 8001eca:	f000 f89d 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001ece:	0020      	movs	r0, r4
 8001ed0:	f000 f8ba 	bl	8002048 <xWriteCH395Data>
    xEndCH395Cmd();
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <CH395OpenSocket+0x3c>)
 8001ed6:	8899      	ldrh	r1, [r3, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f7fe fc49 	bl	8000772 <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	e000      	b.n	8001ee6 <CH395OpenSocket+0x22>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001ee4:	001c      	movs	r4, r3
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8001ee6:	4807      	ldr	r0, [pc, #28]	; (8001f04 <CH395OpenSocket+0x40>)
 8001ee8:	f000 f8cc 	bl	8002084 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001eec:	f7ff fe98 	bl	8001c20 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001ef0:	2810      	cmp	r0, #16
 8001ef2:	d104      	bne.n	8001efe <CH395OpenSocket+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001ef4:	1c63      	adds	r3, r4, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2cc8      	cmp	r4, #200	; 0xc8
 8001efa:	d9f3      	bls.n	8001ee4 <CH395OpenSocket+0x20>
 8001efc:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	00001388 	.word	0x00001388

08001f08 <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 8001f08:	b510      	push	{r4, lr}
 8001f0a:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s = 0;
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 8001f0c:	2036      	movs	r0, #54	; 0x36
 8001f0e:	f000 f87b 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001f12:	0020      	movs	r0, r4
 8001f14:	f000 f898 	bl	8002048 <xWriteCH395Data>
    xEndCH395Cmd();
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <CH395TCPListen+0x3c>)
 8001f1a:	8899      	ldrh	r1, [r3, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f7fe fc27 	bl	8000772 <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001f24:	2400      	movs	r4, #0
 8001f26:	e000      	b.n	8001f2a <CH395TCPListen+0x22>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001f28:	001c      	movs	r4, r3
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <CH395TCPListen+0x40>)
 8001f2c:	f000 f8aa 	bl	8002084 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001f30:	f7ff fe76 	bl	8001c20 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001f34:	2810      	cmp	r0, #16
 8001f36:	d104      	bne.n	8001f42 <CH395TCPListen+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001f38:	1c63      	adds	r3, r4, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2cc8      	cmp	r4, #200	; 0xc8
 8001f3e:	d9f3      	bls.n	8001f28 <CH395TCPListen+0x20>
 8001f40:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8001f42:	bd10      	pop	{r4, pc}
 8001f44:	20000000 	.word	0x20000000
 8001f48:	00001388 	.word	0x00001388

08001f4c <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 8001f4c:	b510      	push	{r4, lr}
 8001f4e:	0004      	movs	r4, r0
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 8001f50:	2030      	movs	r0, #48	; 0x30
 8001f52:	f000 f859 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8001f56:	0020      	movs	r0, r4
 8001f58:	f000 f876 	bl	8002048 <xWriteCH395Data>
    Delay_us(2);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f000 f891 	bl	8002084 <Delay_us>
    intstatus = xReadCH395Data();
 8001f62:	f000 f87f 	bl	8002064 <xReadCH395Data>
 8001f66:	0004      	movs	r4, r0
    xEndCH395Cmd();
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <CH395GetSocketInt+0x2c>)
 8001f6a:	8899      	ldrh	r1, [r3, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f7fe fbff 	bl	8000772 <HAL_GPIO_WritePin>
    return intstatus;
}
 8001f74:	0020      	movs	r0, r4
 8001f76:	bd10      	pop	{r4, pc}
 8001f78:	20000000 	.word	0x20000000

08001f7c <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 8001f7c:	b510      	push	{r4, lr}
 8001f7e:	0004      	movs	r4, r0
    uint8_t i = 0;
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 8001f80:	2041      	movs	r0, #65	; 0x41
 8001f82:	f000 f841 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 8001f86:	0020      	movs	r0, r4
 8001f88:	f000 f85e 	bl	8002048 <xWriteCH395Data>
    xEndCH395Cmd();
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <CH395DHCPEnable+0x3c>)
 8001f8e:	8899      	ldrh	r1, [r3, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f7fe fbed 	bl	8000772 <HAL_GPIO_WritePin>
    uint8_t i = 0;
 8001f98:	2400      	movs	r4, #0
 8001f9a:	e000      	b.n	8001f9e <CH395DHCPEnable+0x22>
    while(1)
    {
        Delay_ms(20);
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001f9c:	001c      	movs	r4, r3
        Delay_ms(20);
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <CH395DHCPEnable+0x40>)
 8001fa0:	f000 f870 	bl	8002084 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8001fa4:	f7ff fe3c 	bl	8001c20 <CH395GetCmdStatus>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8001fa8:	2810      	cmp	r0, #16
 8001faa:	d104      	bne.n	8001fb6 <CH395DHCPEnable+0x3a>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8001fac:	1c63      	adds	r3, r4, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2cc8      	cmp	r4, #200	; 0xc8
 8001fb2:	d9f3      	bls.n	8001f9c <CH395DHCPEnable+0x20>
 8001fb4:	30ea      	adds	r0, #234	; 0xea
    }
    return s;
}
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	00004e20 	.word	0x00004e20

08001fc0 <CH395ReadGPIOAddr>:
* Input          : regadd   寄存器地址
* Output         : None
* Return         : 寄存器的值
*******************************************************************************/
uint8_t CH395ReadGPIOAddr(uint8_t regadd)
{
 8001fc0:	b510      	push	{r4, lr}
 8001fc2:	0004      	movs	r4, r0
    uint8_t i;
    xWriteCH395Cmd(CMD10_READ_GPIO_REG);
 8001fc4:	20ec      	movs	r0, #236	; 0xec
 8001fc6:	f000 f81f 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data(regadd);
 8001fca:	0020      	movs	r0, r4
 8001fcc:	f000 f83c 	bl	8002048 <xWriteCH395Data>
    Delay_ms(1);
 8001fd0:	20fa      	movs	r0, #250	; 0xfa
 8001fd2:	0080      	lsls	r0, r0, #2
 8001fd4:	f000 f856 	bl	8002084 <Delay_us>
    i = xReadCH395Data();
 8001fd8:	f000 f844 	bl	8002064 <xReadCH395Data>
    return i;
}
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 8001fde:	b510      	push	{r4, lr}
 8001fe0:	0004      	movs	r4, r0
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 8001fe2:	2055      	movs	r0, #85	; 0x55
 8001fe4:	f000 f810 	bl	8002008 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 8001fe8:	b2e0      	uxtb	r0, r4
 8001fea:	f000 f82d 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 8001fee:	b2a0      	uxth	r0, r4
 8001ff0:	0a00      	lsrs	r0, r0, #8
 8001ff2:	f000 f829 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 8001ff6:	0c20      	lsrs	r0, r4, #16
 8001ff8:	b2c0      	uxtb	r0, r0
 8001ffa:	f000 f825 	bl	8002048 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 8001ffe:	0e20      	lsrs	r0, r4, #24
 8002000:	f000 f822 	bl	8002048 <xWriteCH395Data>
}
 8002004:	bd10      	pop	{r4, pc}
	...

08002008 <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 8002008:	b530      	push	{r4, r5, lr}
 800200a:	b083      	sub	sp, #12
 800200c:	466b      	mov	r3, sp
 800200e:	1ddd      	adds	r5, r3, #7
 8002010:	71d8      	strb	r0, [r3, #7]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 8002012:	4c0b      	ldr	r4, [pc, #44]	; (8002040 <xWriteCH395Cmd+0x38>)
 8002014:	88a1      	ldrh	r1, [r4, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	6820      	ldr	r0, [r4, #0]
 800201a:	f7fe fbaa 	bl	8000772 <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 800201e:	88a1      	ldrh	r1, [r4, #4]
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	2200      	movs	r2, #0
 8002024:	f7fe fba5 	bl	8000772 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 8002028:	2364      	movs	r3, #100	; 0x64
 800202a:	2201      	movs	r2, #1
 800202c:	0029      	movs	r1, r5
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <xWriteCH395Cmd+0x3c>)
 8002030:	f7ff f8ee 	bl	8001210 <HAL_SPI_Transmit>
    Delay_us(2);
 8002034:	2002      	movs	r0, #2
 8002036:	f000 f825 	bl	8002084 <Delay_us>
}
 800203a:	b003      	add	sp, #12
 800203c:	bd30      	pop	{r4, r5, pc}
 800203e:	46c0      	nop			; (mov r8, r8)
 8002040:	20000000 	.word	0x20000000
 8002044:	200009f8 	.word	0x200009f8

08002048 <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 8002048:	b500      	push	{lr}
 800204a:	b083      	sub	sp, #12
 800204c:	466b      	mov	r3, sp
 800204e:	1dd9      	adds	r1, r3, #7
 8002050:	7008      	strb	r0, [r1, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 8002052:	2364      	movs	r3, #100	; 0x64
 8002054:	2201      	movs	r2, #1
 8002056:	4802      	ldr	r0, [pc, #8]	; (8002060 <xWriteCH395Data+0x18>)
 8002058:	f7ff f8da 	bl	8001210 <HAL_SPI_Transmit>
}
 800205c:	b003      	add	sp, #12
 800205e:	bd00      	pop	{pc}
 8002060:	200009f8 	.word	0x200009f8

08002064 <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 8002064:	b510      	push	{r4, lr}
 8002066:	b082      	sub	sp, #8
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 8002068:	466b      	mov	r3, sp
 800206a:	1ddc      	adds	r4, r3, #7
 800206c:	2364      	movs	r3, #100	; 0x64
 800206e:	2201      	movs	r2, #1
 8002070:	0021      	movs	r1, r4
 8002072:	4803      	ldr	r0, [pc, #12]	; (8002080 <xReadCH395Data+0x1c>)
 8002074:	f7ff fb00 	bl	8001678 <HAL_SPI_Receive>
    return i;
 8002078:	7820      	ldrb	r0, [r4, #0]
}
 800207a:	b002      	add	sp, #8
 800207c:	bd10      	pop	{r4, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	200009f8 	.word	0x200009f8

08002084 <Delay_us>:

#include "Delay.h"

void Delay_us(unsigned int n) {
	uint32_t temp;
	SysTick->LOAD = 8 * n; // SYSCLK Frequency MHz * us
 8002084:	00c0      	lsls	r0, r0, #3
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <Delay_us+0x24>)
 8002088:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0X00; //清空计数器
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0X01; //使能，减到零是无动作，采用外部时钟源
 800208e:	3201      	adds	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL; //读取当前倒计数值
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <Delay_us+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
	} while ((temp & 0x01) && (!(temp & (1 << 16)))); //等待时间到达
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <Delay_us+0x28>)
 8002098:	4013      	ands	r3, r2
 800209a:	2b01      	cmp	r3, #1
 800209c:	d0f9      	beq.n	8002092 <Delay_us+0xe>
	SysTick->CTRL = 0x00; //关闭计数器
 800209e:	4b02      	ldr	r3, [pc, #8]	; (80020a8 <Delay_us+0x24>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0X00; //清空计数器
 80020a4:	609a      	str	r2, [r3, #8]
}
 80020a6:	4770      	bx	lr
 80020a8:	e000e010 	.word	0xe000e010
 80020ac:	00010001 	.word	0x00010001

080020b0 <FS_begin>:
#include "FS.h"
FS_typedef FS;

BOOL FS_begin(FS_typedef* pFS, uint32_t* addr_base)
{
	if((uint32_t)addr_base < MAX_ADDR && ((pFS->n_files = *(uint32_t*)(addr_base)) != 0xffffffff))
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <FS_begin+0x1c>)
 80020b2:	4299      	cmp	r1, r3
 80020b4:	d806      	bhi.n	80020c4 <FS_begin+0x14>
 80020b6:	680b      	ldr	r3, [r1, #0]
 80020b8:	6043      	str	r3, [r0, #4]
 80020ba:	3301      	adds	r3, #1
 80020bc:	d004      	beq.n	80020c8 <FS_begin+0x18>
	{
		pFS->addr_base = addr_base;
 80020be:	6001      	str	r1, [r0, #0]
		return TRUE;
 80020c0:	2001      	movs	r0, #1
 80020c2:	e000      	b.n	80020c6 <FS_begin+0x16>
	}
	else
	{
		return FALSE;
 80020c4:	2000      	movs	r0, #0
	}
}
 80020c6:	4770      	bx	lr
		return FALSE;
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7fc      	b.n	80020c6 <FS_begin+0x16>
 80020cc:	08007ffe 	.word	0x08007ffe

080020d0 <FS_open>:

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	46ce      	mov	lr, r9
 80020d4:	4647      	mov	r7, r8
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b083      	sub	sp, #12
 80020da:	0007      	movs	r7, r0
 80020dc:	9201      	str	r2, [sp, #4]
	int i = pFS->n_files;
 80020de:	684e      	ldr	r6, [r1, #4]
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 80020e0:	680d      	ldr	r5, [r1, #0]
	uint32_t offset = (uint32_t)pFS->addr_base;
 80020e2:	46a9      	mov	r9, r5

	FSfile_typedef file;
	file.size = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	6083      	str	r3, [r0, #8]
	file.p_content = NULL;
 80020e8:	6043      	str	r3, [r0, #4]
	file.path = NULL;
 80020ea:	6003      	str	r3, [r0, #0]
	do{
		addr ++;
 80020ec:	3504      	adds	r5, #4
		i--;
 80020ee:	3e01      	subs	r6, #1
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	444b      	add	r3, r9
 80020f4:	001c      	movs	r4, r3
 80020f6:	2308      	movs	r3, #8
 80020f8:	4698      	mov	r8, r3
 80020fa:	44a0      	add	r8, r4
		if(strcmp(path, _path) == 0) // path matched
 80020fc:	4641      	mov	r1, r8
 80020fe:	9801      	ldr	r0, [sp, #4]
 8002100:	f7fe f802 	bl	8000108 <strcmp>
 8002104:	2800      	cmp	r0, #0
 8002106:	d002      	beq.n	800210e <FS_open+0x3e>
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
			file.size = *(uint32_t*)(*addr + offset);
			break;
		}
	}while(i > 0);
 8002108:	2e00      	cmp	r6, #0
 800210a:	dcef      	bgt.n	80020ec <FS_open+0x1c>
 800210c:	e006      	b.n	800211c <FS_open+0x4c>
			file.path = _path;
 800210e:	4643      	mov	r3, r8
 8002110:	603b      	str	r3, [r7, #0]
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	444b      	add	r3, r9
 8002116:	607b      	str	r3, [r7, #4]
			file.size = *(uint32_t*)(*addr + offset);
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	60bb      	str	r3, [r7, #8]
	return file;
}
 800211c:	0038      	movs	r0, r7
 800211e:	b003      	add	sp, #12
 8002120:	bc0c      	pop	{r2, r3}
 8002122:	4690      	mov	r8, r2
 8002124:	4699      	mov	r9, r3
 8002126:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002128 <FS_exists>:
	}
	return -1;
}

BOOL FS_exists(FS_typedef* pFS, const char* path)
{
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	b083      	sub	sp, #12
 800212c:	0007      	movs	r7, r0
 800212e:	9101      	str	r1, [sp, #4]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 8002130:	6804      	ldr	r4, [r0, #0]
	uint32_t offset = (uint32_t)pFS->addr_base;
 8002132:	0025      	movs	r5, r4
	for(i=0; i<pFS->n_files; ++i)
 8002134:	2600      	movs	r6, #0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	42b3      	cmp	r3, r6
 800213a:	d90a      	bls.n	8002152 <FS_exists+0x2a>
	{
		addr++;
 800213c:	3404      	adds	r4, #4
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	1959      	adds	r1, r3, r5
 8002142:	3108      	adds	r1, #8
		if(strcmp(path, _path) == 0)
 8002144:	9801      	ldr	r0, [sp, #4]
 8002146:	f7fd ffdf 	bl	8000108 <strcmp>
 800214a:	2800      	cmp	r0, #0
 800214c:	d004      	beq.n	8002158 <FS_exists+0x30>
	for(i=0; i<pFS->n_files; ++i)
 800214e:	3601      	adds	r6, #1
 8002150:	e7f1      	b.n	8002136 <FS_exists+0xe>
		{
			return TRUE;
		}
	}
	return FALSE;
 8002152:	2000      	movs	r0, #0
}
 8002154:	b003      	add	sp, #12
 8002156:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return TRUE;
 8002158:	2001      	movs	r0, #1
 800215a:	e7fb      	b.n	8002154 <FS_exists+0x2c>

0800215c <EEPROM_WriteBytes>:
	uint32_t word;
} Quadbyte;

// Notice: 4-byte alignment
void EEPROM_WriteBytes(EEPROM_typedef *pEEPROM,uint8_t *Buffer,uint16_t Length)
{
 800215c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800215e:	b087      	sub	sp, #28
 8002160:	000e      	movs	r6, r1
 8002162:	0014      	movs	r4, r2
	uint16_t i;
	uint32_t* addr = (uint32_t*)pEEPROM->base_addr;
 8002164:	6805      	ldr	r5, [r0, #0]
	Quadbyte quadbyte;
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=addr, .NbPages=1};
 8002166:	2300      	movs	r3, #0
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	9503      	str	r5, [sp, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	9204      	str	r2, [sp, #16]
	uint32_t PageError = 0;
 8002170:	9301      	str	r3, [sp, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002172:	b672      	cpsid	i
    __disable_irq();
    HAL_FLASH_Unlock();
 8002174:	f7fe f91a 	bl	80003ac <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&fe, &PageError);
 8002178:	a901      	add	r1, sp, #4
 800217a:	a802      	add	r0, sp, #8
 800217c:	f7fe f9da 	bl	8000534 <HAL_FLASHEx_Erase>
    while(Length)
 8002180:	e013      	b.n	80021aa <EEPROM_WriteBytes+0x4e>
    {
    	memset(quadbyte.bytes, 0, 4);
    	for(i=0; i<4 && Length; ++i)
    	{
    		quadbyte.bytes[i] = *Buffer;
 8002182:	7831      	ldrb	r1, [r6, #0]
 8002184:	aa05      	add	r2, sp, #20
 8002186:	54d1      	strb	r1, [r2, r3]
    		Length--;
 8002188:	3c01      	subs	r4, #1
 800218a:	b2a4      	uxth	r4, r4
    		Buffer++;
 800218c:	3601      	adds	r6, #1
    	for(i=0; i<4 && Length; ++i)
 800218e:	3301      	adds	r3, #1
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d801      	bhi.n	800219a <EEPROM_WriteBytes+0x3e>
 8002196:	2c00      	cmp	r4, #0
 8002198:	d1f3      	bne.n	8002182 <EEPROM_WriteBytes+0x26>
    	}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addr++, quadbyte.word);
 800219a:	1d2f      	adds	r7, r5, #4
 800219c:	9a05      	ldr	r2, [sp, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	0029      	movs	r1, r5
 80021a2:	2002      	movs	r0, #2
 80021a4:	f7fe f952 	bl	800044c <HAL_FLASH_Program>
 80021a8:	003d      	movs	r5, r7
    while(Length)
 80021aa:	2c00      	cmp	r4, #0
 80021ac:	d002      	beq.n	80021b4 <EEPROM_WriteBytes+0x58>
    	memset(quadbyte.bytes, 0, 4);
 80021ae:	2300      	movs	r3, #0
 80021b0:	9305      	str	r3, [sp, #20]
    	for(i=0; i<4 && Length; ++i)
 80021b2:	e7ee      	b.n	8002192 <EEPROM_WriteBytes+0x36>
    }
    HAL_FLASH_Lock();
 80021b4:	f7fe f912 	bl	80003dc <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80021b8:	b662      	cpsie	i
    __enable_irq();
}
 80021ba:	b007      	add	sp, #28
 80021bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021be <EEPROM_ReadBytes>:

void EEPROM_ReadBytes(EEPROM_typedef* pEEPROM, uint8_t *Buffer,uint16_t Length)
{
	uint8_t* addr = pEEPROM->base_addr;
 80021be:	6803      	ldr	r3, [r0, #0]
	while(Length)
 80021c0:	e005      	b.n	80021ce <EEPROM_ReadBytes+0x10>
	{
		*Buffer = *addr;
 80021c2:	7818      	ldrb	r0, [r3, #0]
 80021c4:	7008      	strb	r0, [r1, #0]
		Buffer++;
 80021c6:	3101      	adds	r1, #1
		addr++;
 80021c8:	3301      	adds	r3, #1
		Length--;
 80021ca:	3a01      	subs	r2, #1
 80021cc:	b292      	uxth	r2, r2
	while(Length)
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d1f7      	bne.n	80021c2 <EEPROM_ReadBytes+0x4>
	}
}
 80021d2:	4770      	bx	lr

080021d4 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 80021d4:	b570      	push	{r4, r5, r6, lr}
 80021d6:	0005      	movs	r5, r0
	strcat(pS->URI, "index.html");
 80021d8:	1d44      	adds	r4, r0, #5
 80021da:	0020      	movs	r0, r4
 80021dc:	f7fd ff9e 	bl	800011c <strlen>
 80021e0:	1820      	adds	r0, r4, r0
 80021e2:	220b      	movs	r2, #11
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <onHome+0x20>)
 80021e6:	f001 f969 	bl	80034bc <memcpy>
	HTTPonNotFound(pS);
 80021ea:	0028      	movs	r0, r5
 80021ec:	f000 fc5e 	bl	8002aac <HTTPonNotFound>
}
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	08003738 	.word	0x08003738

080021f8 <onSwitch>:
/* URI: /switch
 * METHOD: POST
 * Args: A=[0-6]&B=[0-6]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 80021f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fa:	0004      	movs	r4, r0
	const char *A = getHTTPArg(pS, "A");
 80021fc:	4914      	ldr	r1, [pc, #80]	; (8002250 <onSwitch+0x58>)
 80021fe:	f000 fa69 	bl	80026d4 <getHTTPArg>
 8002202:	0005      	movs	r5, r0
	const char *B = getHTTPArg(pS, "B");
 8002204:	4913      	ldr	r1, [pc, #76]	; (8002254 <onSwitch+0x5c>)
 8002206:	0020      	movs	r0, r4
 8002208:	f000 fa64 	bl	80026d4 <getHTTPArg>
 800220c:	0006      	movs	r6, r0
	if(A && B)
 800220e:	2d00      	cmp	r5, #0
 8002210:	d00c      	beq.n	800222c <onSwitch+0x34>
 8002212:	2800      	cmp	r0, #0
 8002214:	d00a      	beq.n	800222c <onSwitch+0x34>
	{
		//  TODO: remove stdlib
		uint8_t nA = atou8(A);
 8002216:	0028      	movs	r0, r5
 8002218:	f000 fa81 	bl	800271e <atou8>
 800221c:	0005      	movs	r5, r0
		uint8_t nB = atou8(B);
 800221e:	0030      	movs	r0, r6
 8002220:	f000 fa7d 	bl	800271e <atou8>
		if(nA <= NUM_ANTENNA && nB<=NUM_ANTENNA)
 8002224:	2d06      	cmp	r5, #6
 8002226:	d801      	bhi.n	800222c <onSwitch+0x34>
 8002228:	2806      	cmp	r0, #6
 800222a:	d906      	bls.n	800223a <onSwitch+0x42>
			switch_Antenna(nA, nB);
			HTTPSendStr(pS, 200, "OK\r\n");
			return;
		}
	}
	HTTPSendStr(pS, 300, "Invalid\r\n");
 800222c:	2196      	movs	r1, #150	; 0x96
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <onSwitch+0x60>)
 8002230:	0049      	lsls	r1, r1, #1
 8002232:	0020      	movs	r0, r4
 8002234:	f000 fb92 	bl	800295c <HTTPSendStr>
}
 8002238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch_Antenna(nA, nB);
 800223a:	0001      	movs	r1, r0
 800223c:	0028      	movs	r0, r5
 800223e:	f000 ffb3 	bl	80031a8 <switch_Antenna>
			HTTPSendStr(pS, 200, "OK\r\n");
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <onSwitch+0x64>)
 8002244:	21c8      	movs	r1, #200	; 0xc8
 8002246:	0020      	movs	r0, r4
 8002248:	f000 fb88 	bl	800295c <HTTPSendStr>
			return;
 800224c:	e7f4      	b.n	8002238 <onSwitch+0x40>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	08003768 	.word	0x08003768
 8002254:	0800376c 	.word	0x0800376c
 8002258:	08003778 	.word	0x08003778
 800225c:	08003770 	.word	0x08003770

08002260 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8002260:	b510      	push	{r4, lr}
	HTTPSendStr(pS, 200, "Status\r\n");
 8002262:	4a02      	ldr	r2, [pc, #8]	; (800226c <onStatus+0xc>)
 8002264:	21c8      	movs	r1, #200	; 0xc8
 8002266:	f000 fb79 	bl	800295c <HTTPSendStr>
}
 800226a:	bd10      	pop	{r4, pc}
 800226c:	0800375c 	.word	0x0800375c

08002270 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 8002270:	b510      	push	{r4, lr}
	HTTPSendStr(pS, 200, "Reset\r\n");
 8002272:	4a02      	ldr	r2, [pc, #8]	; (800227c <onReset+0xc>)
 8002274:	21c8      	movs	r1, #200	; 0xc8
 8002276:	f000 fb71 	bl	800295c <HTTPSendStr>
//	DEBUG_LOG("Restart\n");
}
 800227a:	bd10      	pop	{r4, pc}
 800227c:	08003744 	.word	0x08003744

08002280 <onGetAlloc>:
{
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	0005      	movs	r5, r0
	uint8_t d = get_Antenna();
 8002284:	f000 ffe0 	bl	8003248 <get_Antenna>
 8002288:	0004      	movs	r4, r0
	strcpy(p, "A=");
 800228a:	4e0f      	ldr	r6, [pc, #60]	; (80022c8 <onGetAlloc+0x48>)
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <onGetAlloc+0x4c>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	8033      	strh	r3, [r6, #0]
	*p = (uint8_t)(d & 0xf) + '0'; // "A=%d"
 8002292:	230f      	movs	r3, #15
 8002294:	4003      	ands	r3, r0
 8002296:	3330      	adds	r3, #48	; 0x30
 8002298:	70b3      	strb	r3, [r6, #2]
	strcpy(p, "&B="); // "A=%d&B="
 800229a:	1cf0      	adds	r0, r6, #3
 800229c:	2204      	movs	r2, #4
 800229e:	490c      	ldr	r1, [pc, #48]	; (80022d0 <onGetAlloc+0x50>)
 80022a0:	f001 f90c 	bl	80034bc <memcpy>
	*p = (uint8_t)(d >> 4) + '0'; // "A=%d&B=%d"
 80022a4:	0924      	lsrs	r4, r4, #4
 80022a6:	b2e4      	uxtb	r4, r4
 80022a8:	3430      	adds	r4, #48	; 0x30
 80022aa:	71b4      	strb	r4, [r6, #6]
	strcpy(p, "\r\n");
 80022ac:	1df0      	adds	r0, r6, #7
 80022ae:	2203      	movs	r2, #3
 80022b0:	4908      	ldr	r1, [pc, #32]	; (80022d4 <onGetAlloc+0x54>)
 80022b2:	f001 f903 	bl	80034bc <memcpy>
	*p = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	7273      	strb	r3, [r6, #9]
	HTTPSendStr(pS, 200, s_tmp);
 80022ba:	0032      	movs	r2, r6
 80022bc:	21c8      	movs	r1, #200	; 0xc8
 80022be:	0028      	movs	r0, r5
 80022c0:	f000 fb4c 	bl	800295c <HTTPSendStr>
}
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	20000474 	.word	0x20000474
 80022cc:	08003728 	.word	0x08003728
 80022d0:	0800372c 	.word	0x0800372c
 80022d4:	08003730 	.word	0x08003730

080022d8 <onSetLabel>:
/* URI: /getAlloc
 * METHOD: POST
 * Args: ant1=name&ant2=name&ant3=name&ant4=name&ant5=name&ant6=name
 * Usage: set antenna label*/
void onSetLabel(HTTPRequestParseState* pS)
{
 80022d8:	b530      	push	{r4, r5, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	0005      	movs	r5, r0
	uint8_t i;
	char s_tmp[5] = "ant";
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <onSetLabel+0x74>)
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	2300      	movs	r3, #0
 80022e4:	466a      	mov	r2, sp
 80022e6:	7113      	strb	r3, [r2, #4]
	if(pS->argc == 0)
 80022e8:	3345      	adds	r3, #69	; 0x45
 80022ea:	5cc3      	ldrb	r3, [r0, r3]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <onSetLabel+0x1c>
	{
		HTTPSendStr(pS, 300, "Bad args");
		return;
	}
	for(i=1; i<=NUM_ANTENNA; ++i)
 80022f0:	2401      	movs	r4, #1
 80022f2:	e007      	b.n	8002304 <onSetLabel+0x2c>
		HTTPSendStr(pS, 300, "Bad args");
 80022f4:	2196      	movs	r1, #150	; 0x96
 80022f6:	4a16      	ldr	r2, [pc, #88]	; (8002350 <onSetLabel+0x78>)
 80022f8:	0049      	lsls	r1, r1, #1
 80022fa:	f000 fb2f 	bl	800295c <HTTPSendStr>
 80022fe:	e022      	b.n	8002346 <onSetLabel+0x6e>
	for(i=1; i<=NUM_ANTENNA; ++i)
 8002300:	3401      	adds	r4, #1
 8002302:	b2e4      	uxtb	r4, r4
 8002304:	2c06      	cmp	r4, #6
 8002306:	d814      	bhi.n	8002332 <onSetLabel+0x5a>
	{
		u16toa(i, s_tmp+3); //s_tmp = ant[i]
 8002308:	b2a0      	uxth	r0, r4
 800230a:	466b      	mov	r3, sp
 800230c:	1cd9      	adds	r1, r3, #3
 800230e:	f000 fa1c 	bl	800274a <u16toa>
		char* s_label;
		if((s_label = getHTTPArg(pS, s_tmp)) != NULL)
 8002312:	4669      	mov	r1, sp
 8002314:	0028      	movs	r0, r5
 8002316:	f000 f9dd 	bl	80026d4 <getHTTPArg>
 800231a:	1e01      	subs	r1, r0, #0
 800231c:	d0f0      	beq.n	8002300 <onSetLabel+0x28>
		{
			strncpy(SavedData.ant_labels[i-1], s_label, MAX_LEN_ANT_LABEL);
 800231e:	1e60      	subs	r0, r4, #1
 8002320:	0103      	lsls	r3, r0, #4
 8002322:	1a1b      	subs	r3, r3, r0
 8002324:	480b      	ldr	r0, [pc, #44]	; (8002354 <onSetLabel+0x7c>)
 8002326:	1818      	adds	r0, r3, r0
 8002328:	3001      	adds	r0, #1
 800232a:	220f      	movs	r2, #15
 800232c:	f001 f922 	bl	8003574 <strncpy>
 8002330:	e7e6      	b.n	8002300 <onSetLabel+0x28>
		}
	}
	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8002332:	225b      	movs	r2, #91	; 0x5b
 8002334:	4907      	ldr	r1, [pc, #28]	; (8002354 <onSetLabel+0x7c>)
 8002336:	4808      	ldr	r0, [pc, #32]	; (8002358 <onSetLabel+0x80>)
 8002338:	f7ff ff10 	bl	800215c <EEPROM_WriteBytes>
	HTTPSendStr(pS, 200, "OK");
 800233c:	4a07      	ldr	r2, [pc, #28]	; (800235c <onSetLabel+0x84>)
 800233e:	21c8      	movs	r1, #200	; 0xc8
 8002340:	0028      	movs	r0, r5
 8002342:	f000 fb0b 	bl	800295c <HTTPSendStr>
}
 8002346:	b003      	add	sp, #12
 8002348:	bd30      	pop	{r4, r5, pc}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	00746e61 	.word	0x00746e61
 8002350:	0800374c 	.word	0x0800374c
 8002354:	200008f4 	.word	0x200008f4
 8002358:	2000040c 	.word	0x2000040c
 800235c:	08003758 	.word	0x08003758

08002360 <onGetLabel>:

void onGetLabel(HTTPRequestParseState* pS)
{
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	0005      	movs	r5, r0
	static char s_tmp[(MAX_LEN_ANT_LABEL+5) * NUM_ANTENNA];
	uint8_t i;
	char* s = s_tmp;
 8002364:	4811      	ldr	r0, [pc, #68]	; (80023ac <onGetLabel+0x4c>)
	for(i=0; i<NUM_ANTENNA; ++i)
 8002366:	2400      	movs	r4, #0
 8002368:	e001      	b.n	800236e <onGetLabel+0xe>
 800236a:	3401      	adds	r4, #1
 800236c:	b2e4      	uxtb	r4, r4
 800236e:	2c05      	cmp	r4, #5
 8002370:	d816      	bhi.n	80023a0 <onGetLabel+0x40>
	{
		s = strcpy_f(s, "ant");
 8002372:	490f      	ldr	r1, [pc, #60]	; (80023b0 <onGetLabel+0x50>)
 8002374:	f000 fc92 	bl	8002c9c <strcpy_f>
		*s = i + '1';
 8002378:	0023      	movs	r3, r4
 800237a:	3331      	adds	r3, #49	; 0x31
 800237c:	7003      	strb	r3, [r0, #0]
		s++;
		*s = '=';
 800237e:	233d      	movs	r3, #61	; 0x3d
 8002380:	7043      	strb	r3, [r0, #1]
		s++;
 8002382:	3002      	adds	r0, #2
		s = strncpy_f(s, SavedData.ant_labels[i], MAX_LEN_ANT_LABEL);
 8002384:	0121      	lsls	r1, r4, #4
 8002386:	1b09      	subs	r1, r1, r4
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <onGetLabel+0x54>)
 800238a:	18c9      	adds	r1, r1, r3
 800238c:	3101      	adds	r1, #1
 800238e:	220f      	movs	r2, #15
 8002390:	f000 fc8d 	bl	8002cae <strncpy_f>
		if(i != NUM_ANTENNA-1)
 8002394:	2c05      	cmp	r4, #5
 8002396:	d0e8      	beq.n	800236a <onGetLabel+0xa>
		{
			*s = '&';
 8002398:	2326      	movs	r3, #38	; 0x26
 800239a:	7003      	strb	r3, [r0, #0]
			s++;
 800239c:	3001      	adds	r0, #1
 800239e:	e7e4      	b.n	800236a <onGetLabel+0xa>
		}
	}
	HTTPSendStr(pS, 200, s_tmp);
 80023a0:	4a02      	ldr	r2, [pc, #8]	; (80023ac <onGetLabel+0x4c>)
 80023a2:	21c8      	movs	r1, #200	; 0xc8
 80023a4:	0028      	movs	r0, r5
 80023a6:	f000 fad9 	bl	800295c <HTTPSendStr>
}
 80023aa:	bd70      	pop	{r4, r5, r6, pc}
 80023ac:	20000480 	.word	0x20000480
 80023b0:	08003734 	.word	0x08003734
 80023b4:	200008f4 	.word	0x200008f4

080023b8 <resetHTTPParseState>:
	.ready = FALSE}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
	pS->state = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	7003      	strb	r3, [r0, #0]
	pS->argc = 0;
 80023bc:	2245      	movs	r2, #69	; 0x45
 80023be:	5483      	strb	r3, [r0, r2]
	pS->connection = CLOSED;
 80023c0:	7103      	strb	r3, [r0, #4]
	pS->method = HTTP_GET;
 80023c2:	70c3      	strb	r3, [r0, #3]
	pS->ready = FALSE;
 80023c4:	32df      	adds	r2, #223	; 0xdf
 80023c6:	5483      	strb	r3, [r0, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 80023c8:	3a8c      	subs	r2, #140	; 0x8c
 80023ca:	5483      	strb	r3, [r0, r2]
	pS->len_response_content_remain = 0;
 80023cc:	3284      	adds	r2, #132	; 0x84
 80023ce:	5283      	strh	r3, [r0, r2]
}
 80023d0:	4770      	bx	lr
	...

080023d4 <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	0004      	movs	r4, r0
	if(strlen(filename) > 3)
 80023d8:	f7fd fea0 	bl	800011c <strlen>
 80023dc:	0005      	movs	r5, r0
 80023de:	2803      	cmp	r0, #3
 80023e0:	d936      	bls.n	8002450 <HTTPGetContentType+0x7c>
	{
		if(ENDSWITH(filename, ".html"))
 80023e2:	1f47      	subs	r7, r0, #5
 80023e4:	19e7      	adds	r7, r4, r7
 80023e6:	4923      	ldr	r1, [pc, #140]	; (8002474 <HTTPGetContentType+0xa0>)
 80023e8:	0038      	movs	r0, r7
 80023ea:	f7fd fe8d 	bl	8000108 <strcmp>
 80023ee:	2800      	cmp	r0, #0
 80023f0:	d030      	beq.n	8002454 <HTTPGetContentType+0x80>
			return HTTP_CONTENT_TYPE_HTML;
		else if(ENDSWITH(filename, ".htm"))
 80023f2:	1f2e      	subs	r6, r5, #4
 80023f4:	19a6      	adds	r6, r4, r6
 80023f6:	4920      	ldr	r1, [pc, #128]	; (8002478 <HTTPGetContentType+0xa4>)
 80023f8:	0030      	movs	r0, r6
 80023fa:	f7fd fe85 	bl	8000108 <strcmp>
 80023fe:	2800      	cmp	r0, #0
 8002400:	d02a      	beq.n	8002458 <HTTPGetContentType+0x84>
			return HTTP_CONTENT_TYPE_HTML;
		else if(ENDSWITH(filename, ".css"))
 8002402:	491e      	ldr	r1, [pc, #120]	; (800247c <HTTPGetContentType+0xa8>)
 8002404:	0030      	movs	r0, r6
 8002406:	f7fd fe7f 	bl	8000108 <strcmp>
 800240a:	2800      	cmp	r0, #0
 800240c:	d026      	beq.n	800245c <HTTPGetContentType+0x88>
			return HTTP_CONTENT_TYPE_CSS;
		else if(ENDSWITH(filename, ".js"))
 800240e:	1ee8      	subs	r0, r5, #3
 8002410:	1820      	adds	r0, r4, r0
 8002412:	491b      	ldr	r1, [pc, #108]	; (8002480 <HTTPGetContentType+0xac>)
 8002414:	f7fd fe78 	bl	8000108 <strcmp>
 8002418:	2800      	cmp	r0, #0
 800241a:	d021      	beq.n	8002460 <HTTPGetContentType+0x8c>
			return HTTP_CONTENT_TYPE_JS;
		else if(ENDSWITH(filename, ".png"))
 800241c:	4919      	ldr	r1, [pc, #100]	; (8002484 <HTTPGetContentType+0xb0>)
 800241e:	0030      	movs	r0, r6
 8002420:	f7fd fe72 	bl	8000108 <strcmp>
 8002424:	2800      	cmp	r0, #0
 8002426:	d01d      	beq.n	8002464 <HTTPGetContentType+0x90>
			return HTTP_CONTENT_TYPE_PNG;
		else if(ENDSWITH(filename, ".jpg"))
 8002428:	4917      	ldr	r1, [pc, #92]	; (8002488 <HTTPGetContentType+0xb4>)
 800242a:	0030      	movs	r0, r6
 800242c:	f7fd fe6c 	bl	8000108 <strcmp>
 8002430:	2800      	cmp	r0, #0
 8002432:	d019      	beq.n	8002468 <HTTPGetContentType+0x94>
			return HTTP_CONTENT_TYPE_JPEG;
		else if(ENDSWITH(filename, ".jpeg"))
 8002434:	4915      	ldr	r1, [pc, #84]	; (800248c <HTTPGetContentType+0xb8>)
 8002436:	0038      	movs	r0, r7
 8002438:	f7fd fe66 	bl	8000108 <strcmp>
 800243c:	2800      	cmp	r0, #0
 800243e:	d015      	beq.n	800246c <HTTPGetContentType+0x98>
			return HTTP_CONTENT_TYPE_JPEG;
		else if(ENDSWITH(filename, ".gif"))
 8002440:	4913      	ldr	r1, [pc, #76]	; (8002490 <HTTPGetContentType+0xbc>)
 8002442:	0030      	movs	r0, r6
 8002444:	f7fd fe60 	bl	8000108 <strcmp>
 8002448:	2800      	cmp	r0, #0
 800244a:	d011      	beq.n	8002470 <HTTPGetContentType+0x9c>
			return HTTP_CONTENT_TYPE_GIF;
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 800244c:	4811      	ldr	r0, [pc, #68]	; (8002494 <HTTPGetContentType+0xc0>)
 800244e:	e000      	b.n	8002452 <HTTPGetContentType+0x7e>
 8002450:	4810      	ldr	r0, [pc, #64]	; (8002494 <HTTPGetContentType+0xc0>)
}
 8002452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return HTTP_CONTENT_TYPE_HTML;
 8002454:	4810      	ldr	r0, [pc, #64]	; (8002498 <HTTPGetContentType+0xc4>)
 8002456:	e7fc      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_HTML;
 8002458:	480f      	ldr	r0, [pc, #60]	; (8002498 <HTTPGetContentType+0xc4>)
 800245a:	e7fa      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 800245c:	480f      	ldr	r0, [pc, #60]	; (800249c <HTTPGetContentType+0xc8>)
 800245e:	e7f8      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JS;
 8002460:	480f      	ldr	r0, [pc, #60]	; (80024a0 <HTTPGetContentType+0xcc>)
 8002462:	e7f6      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_PNG;
 8002464:	480f      	ldr	r0, [pc, #60]	; (80024a4 <HTTPGetContentType+0xd0>)
 8002466:	e7f4      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JPEG;
 8002468:	480f      	ldr	r0, [pc, #60]	; (80024a8 <HTTPGetContentType+0xd4>)
 800246a:	e7f2      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_JPEG;
 800246c:	480e      	ldr	r0, [pc, #56]	; (80024a8 <HTTPGetContentType+0xd4>)
 800246e:	e7f0      	b.n	8002452 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_GIF;
 8002470:	480e      	ldr	r0, [pc, #56]	; (80024ac <HTTPGetContentType+0xd8>)
 8002472:	e7ee      	b.n	8002452 <HTTPGetContentType+0x7e>
 8002474:	080037c0 	.word	0x080037c0
 8002478:	080037c8 	.word	0x080037c8
 800247c:	080037d0 	.word	0x080037d0
 8002480:	080037d8 	.word	0x080037d8
 8002484:	080037dc 	.word	0x080037dc
 8002488:	080037e4 	.word	0x080037e4
 800248c:	080037ec 	.word	0x080037ec
 8002490:	080037f4 	.word	0x080037f4
 8002494:	080038cc 	.word	0x080038cc
 8002498:	0800389c 	.word	0x0800389c
 800249c:	08003884 	.word	0x08003884
 80024a0:	080038b4 	.word	0x080038b4
 80024a4:	080038d8 	.word	0x080038d8
 80024a8:	080038a8 	.word	0x080038a8
 80024ac:	08003890 	.word	0x08003890

080024b0 <strsepstr>:
	}
}
#endif

char* strsepstr(char** stringp, const char* delim)
{
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	0006      	movs	r6, r0
 80024b4:	000d      	movs	r5, r1
	int len_delim = strlen(delim);
 80024b6:	0008      	movs	r0, r1
 80024b8:	f7fd fe30 	bl	800011c <strlen>
 80024bc:	0007      	movs	r7, r0
	char* loc_head = *stringp;
 80024be:	6834      	ldr	r4, [r6, #0]
	if(loc_head != NULL)
 80024c0:	2c00      	cmp	r4, #0
 80024c2:	d007      	beq.n	80024d4 <strsepstr+0x24>
	{
		char* loc_delim = strstr(loc_head, delim);
 80024c4:	0029      	movs	r1, r5
 80024c6:	0020      	movs	r0, r4
 80024c8:	f001 f887 	bl	80035da <strstr>
 80024cc:	1e05      	subs	r5, r0, #0
		if(loc_delim != NULL)
 80024ce:	d103      	bne.n	80024d8 <strsepstr+0x28>
			memset(loc_delim, 0, len_delim);
			*stringp = loc_delim + len_delim;
		}
		else
		{
			*stringp = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	6033      	str	r3, [r6, #0]
		}
	}
	return loc_head;
}
 80024d4:	0020      	movs	r0, r4
 80024d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			memset(loc_delim, 0, len_delim);
 80024d8:	003a      	movs	r2, r7
 80024da:	2100      	movs	r1, #0
 80024dc:	f000 fff7 	bl	80034ce <memset>
			*stringp = loc_delim + len_delim;
 80024e0:	19ed      	adds	r5, r5, r7
 80024e2:	6035      	str	r5, [r6, #0]
 80024e4:	e7f6      	b.n	80024d4 <strsepstr+0x24>
	...

080024e8 <parse_http>:

BOOL parse_http(HTTPRequestParseState *pS, char* buffer)
{
 80024e8:	b530      	push	{r4, r5, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	0005      	movs	r5, r0
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 80024ee:	7803      	ldrb	r3, [r0, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d04f      	beq.n	8002594 <parse_http+0xac>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <parse_http+0x20>
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	d100      	bne.n	80024fe <parse_http+0x16>
 80024fc:	e0a8      	b.n	8002650 <parse_http+0x168>
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d100      	bne.n	8002504 <parse_http+0x1c>
 8002502:	e0ab      	b.n	800265c <parse_http+0x174>
		}
		pS->state++;
	case 4: // finished
		pS->ready = TRUE;
	}
	return TRUE;
 8002504:	2001      	movs	r0, #1
 8002506:	e0ae      	b.n	8002666 <parse_http+0x17e>
		line_tok_saveptr = buffer;
 8002508:	9103      	str	r1, [sp, #12]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800250a:	4968      	ldr	r1, [pc, #416]	; (80026ac <parse_http+0x1c4>)
 800250c:	a803      	add	r0, sp, #12
 800250e:	f7ff ffcf 	bl	80024b0 <strsepstr>
 8002512:	1e04      	subs	r4, r0, #0
		if(line)
 8002514:	d100      	bne.n	8002518 <parse_http+0x30>
 8002516:	e0c2      	b.n	800269e <parse_http+0x1b6>
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	00d2      	lsls	r2, r2, #3
 800251c:	4964      	ldr	r1, [pc, #400]	; (80026b0 <parse_http+0x1c8>)
 800251e:	f001 f83d 	bl	800359c <strnstr>
 8002522:	2800      	cmp	r0, #0
 8002524:	d100      	bne.n	8002528 <parse_http+0x40>
 8002526:	e0ba      	b.n	800269e <parse_http+0x1b6>
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 8002528:	aa02      	add	r2, sp, #8
 800252a:	4962      	ldr	r1, [pc, #392]	; (80026b4 <parse_http+0x1cc>)
 800252c:	0020      	movs	r0, r4
 800252e:	f001 f89a 	bl	8003666 <strtok_r>
 8002532:	1e04      	subs	r4, r0, #0
			if(tok)
 8002534:	d100      	bne.n	8002538 <parse_http+0x50>
 8002536:	e0b2      	b.n	800269e <parse_http+0x1b6>
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 8002538:	495f      	ldr	r1, [pc, #380]	; (80026b8 <parse_http+0x1d0>)
 800253a:	f7fd fde5 	bl	8000108 <strcmp>
 800253e:	2800      	cmp	r0, #0
 8002540:	d12d      	bne.n	800259e <parse_http+0xb6>
					pS->method = HTTP_GET;
 8002542:	2300      	movs	r3, #0
 8002544:	70eb      	strb	r3, [r5, #3]
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8002546:	aa02      	add	r2, sp, #8
 8002548:	495a      	ldr	r1, [pc, #360]	; (80026b4 <parse_http+0x1cc>)
 800254a:	2000      	movs	r0, #0
 800254c:	f001 f88b 	bl	8003666 <strtok_r>
			if(tok)
 8002550:	2800      	cmp	r0, #0
 8002552:	d100      	bne.n	8002556 <parse_http+0x6e>
 8002554:	e0a3      	b.n	800269e <parse_http+0x1b6>
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 8002556:	1d6c      	adds	r4, r5, #5
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	0001      	movs	r1, r0
 800255c:	0020      	movs	r0, r4
 800255e:	f001 f809 	bl	8003574 <strncpy>
			char* s_args = strchr(pS->URI, '?');
 8002562:	213f      	movs	r1, #63	; 0x3f
 8002564:	0020      	movs	r0, r4
 8002566:	f000 ffc8 	bl	80034fa <strchr>
			if(pS->method == HTTP_GET && s_args != NULL)
 800256a:	78eb      	ldrb	r3, [r5, #3]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d106      	bne.n	800257e <parse_http+0x96>
 8002570:	2800      	cmp	r0, #0
 8002572:	d004      	beq.n	800257e <parse_http+0x96>
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 8002574:	7003      	strb	r3, [r0, #0]
				s_args++; // move to the char next to ?
 8002576:	1c44      	adds	r4, r0, #1
				if(*s_args)
 8002578:	7843      	ldrb	r3, [r0, #1]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11b      	bne.n	80025b6 <parse_http+0xce>
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 800257e:	aa02      	add	r2, sp, #8
 8002580:	494c      	ldr	r1, [pc, #304]	; (80026b4 <parse_http+0x1cc>)
 8002582:	2000      	movs	r0, #0
 8002584:	f001 f86f 	bl	8003666 <strtok_r>
			if(tok)
 8002588:	2800      	cmp	r0, #0
 800258a:	d100      	bne.n	800258e <parse_http+0xa6>
 800258c:	e087      	b.n	800269e <parse_http+0x1b6>
			pS->state ++;
 800258e:	782b      	ldrb	r3, [r5, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	702b      	strb	r3, [r5, #0]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8002594:	4945      	ldr	r1, [pc, #276]	; (80026ac <parse_http+0x1c4>)
 8002596:	a803      	add	r0, sp, #12
 8002598:	f7ff ff8a 	bl	80024b0 <strsepstr>
		while(line)
 800259c:	e031      	b.n	8002602 <parse_http+0x11a>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 800259e:	4947      	ldr	r1, [pc, #284]	; (80026bc <parse_http+0x1d4>)
 80025a0:	0020      	movs	r0, r4
 80025a2:	f7fd fdb1 	bl	8000108 <strcmp>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d102      	bne.n	80025b0 <parse_http+0xc8>
					pS->method = HTTP_POST;
 80025aa:	2301      	movs	r3, #1
 80025ac:	70eb      	strb	r3, [r5, #3]
 80025ae:	e7ca      	b.n	8002546 <parse_http+0x5e>
					pS->method = HTTP_GET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	70eb      	strb	r3, [r5, #3]
 80025b4:	e7c7      	b.n	8002546 <parse_http+0x5e>
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 80025b6:	aa01      	add	r2, sp, #4
 80025b8:	4941      	ldr	r1, [pc, #260]	; (80026c0 <parse_http+0x1d8>)
 80025ba:	0020      	movs	r0, r4
 80025bc:	f001 f853 	bl	8003666 <strtok_r>
					while(tok_arg)
 80025c0:	e00b      	b.n	80025da <parse_http+0xf2>
						pS->argv[pS->argc++] = tok_arg;
 80025c2:	2245      	movs	r2, #69	; 0x45
 80025c4:	5cab      	ldrb	r3, [r5, r2]
 80025c6:	1c59      	adds	r1, r3, #1
 80025c8:	54a9      	strb	r1, [r5, r2]
 80025ca:	3312      	adds	r3, #18
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	5158      	str	r0, [r3, r5]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 80025d0:	aa01      	add	r2, sp, #4
 80025d2:	493b      	ldr	r1, [pc, #236]	; (80026c0 <parse_http+0x1d8>)
 80025d4:	2000      	movs	r0, #0
 80025d6:	f001 f846 	bl	8003666 <strtok_r>
					while(tok_arg)
 80025da:	2800      	cmp	r0, #0
 80025dc:	d1f1      	bne.n	80025c2 <parse_http+0xda>
 80025de:	e7ce      	b.n	800257e <parse_http+0x96>
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80025e0:	aa02      	add	r2, sp, #8
 80025e2:	4938      	ldr	r1, [pc, #224]	; (80026c4 <parse_http+0x1dc>)
 80025e4:	f001 f83f 	bl	8003666 <strtok_r>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d058      	beq.n	800269e <parse_http+0x1b6>
					if(strstr(tok, "Keep") != NULL)
 80025ec:	4936      	ldr	r1, [pc, #216]	; (80026c8 <parse_http+0x1e0>)
 80025ee:	f000 fff4 	bl	80035da <strstr>
 80025f2:	2800      	cmp	r0, #0
 80025f4:	d001      	beq.n	80025fa <parse_http+0x112>
						pS->connection = KEEP_ALIVE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	712b      	strb	r3, [r5, #4]
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80025fa:	492c      	ldr	r1, [pc, #176]	; (80026ac <parse_http+0x1c4>)
 80025fc:	a803      	add	r0, sp, #12
 80025fe:	f7ff ff57 	bl	80024b0 <strsepstr>
		while(line)
 8002602:	2800      	cmp	r0, #0
 8002604:	d021      	beq.n	800264a <parse_http+0x162>
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8002606:	aa02      	add	r2, sp, #8
 8002608:	492e      	ldr	r1, [pc, #184]	; (80026c4 <parse_http+0x1dc>)
 800260a:	f001 f82c 	bl	8003666 <strtok_r>
 800260e:	1e04      	subs	r4, r0, #0
			if(tok == NULL || *tok == 0)
 8002610:	d01b      	beq.n	800264a <parse_http+0x162>
 8002612:	7803      	ldrb	r3, [r0, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d018      	beq.n	800264a <parse_http+0x162>
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 8002618:	492c      	ldr	r1, [pc, #176]	; (80026cc <parse_http+0x1e4>)
 800261a:	f7fd fd75 	bl	8000108 <strcmp>
 800261e:	2800      	cmp	r0, #0
 8002620:	d0de      	beq.n	80025e0 <parse_http+0xf8>
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 8002622:	492b      	ldr	r1, [pc, #172]	; (80026d0 <parse_http+0x1e8>)
 8002624:	0020      	movs	r0, r4
 8002626:	f7fd fd6f 	bl	8000108 <strcmp>
 800262a:	2800      	cmp	r0, #0
 800262c:	d1e5      	bne.n	80025fa <parse_http+0x112>
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 800262e:	aa02      	add	r2, sp, #8
 8002630:	4924      	ldr	r1, [pc, #144]	; (80026c4 <parse_http+0x1dc>)
 8002632:	f001 f818 	bl	8003666 <strtok_r>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8002636:	2800      	cmp	r0, #0
 8002638:	d031      	beq.n	800269e <parse_http+0x1b6>
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 800263a:	002b      	movs	r3, r5
 800263c:	3358      	adds	r3, #88	; 0x58
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	0001      	movs	r1, r0
 8002642:	0018      	movs	r0, r3
 8002644:	f000 ff96 	bl	8003574 <strncpy>
 8002648:	e7d7      	b.n	80025fa <parse_http+0x112>
		pS->state++;
 800264a:	782b      	ldrb	r3, [r5, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	702b      	strb	r3, [r5, #0]
		if(pS->method == HTTP_POST)
 8002650:	78eb      	ldrb	r3, [r5, #3]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d009      	beq.n	800266a <parse_http+0x182>
		pS->state++;
 8002656:	782b      	ldrb	r3, [r5, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	702b      	strb	r3, [r5, #0]
		pS->ready = TRUE;
 800265c:	2392      	movs	r3, #146	; 0x92
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2201      	movs	r2, #1
 8002662:	54ea      	strb	r2, [r5, r3]
	return TRUE;
 8002664:	2001      	movs	r0, #1
	HTTP_PARSE_ERROR:
		pS->state = 0;
		pS->ready = FALSE;
		return FALSE;
}
 8002666:	b005      	add	sp, #20
 8002668:	bd30      	pop	{r4, r5, pc}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800266a:	4910      	ldr	r1, [pc, #64]	; (80026ac <parse_http+0x1c4>)
 800266c:	a803      	add	r0, sp, #12
 800266e:	f7ff ff1f 	bl	80024b0 <strsepstr>
			if(line)
 8002672:	2800      	cmp	r0, #0
 8002674:	d0ef      	beq.n	8002656 <parse_http+0x16e>
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 8002676:	aa01      	add	r2, sp, #4
 8002678:	4911      	ldr	r1, [pc, #68]	; (80026c0 <parse_http+0x1d8>)
 800267a:	f000 fff4 	bl	8003666 <strtok_r>
				while(tok_arg)
 800267e:	e00b      	b.n	8002698 <parse_http+0x1b0>
					pS->argv[pS->argc++] = tok_arg;
 8002680:	2245      	movs	r2, #69	; 0x45
 8002682:	5cab      	ldrb	r3, [r5, r2]
 8002684:	1c59      	adds	r1, r3, #1
 8002686:	54a9      	strb	r1, [r5, r2]
 8002688:	3312      	adds	r3, #18
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	5158      	str	r0, [r3, r5]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 800268e:	aa01      	add	r2, sp, #4
 8002690:	490b      	ldr	r1, [pc, #44]	; (80026c0 <parse_http+0x1d8>)
 8002692:	2000      	movs	r0, #0
 8002694:	f000 ffe7 	bl	8003666 <strtok_r>
				while(tok_arg)
 8002698:	2800      	cmp	r0, #0
 800269a:	d1f1      	bne.n	8002680 <parse_http+0x198>
 800269c:	e7db      	b.n	8002656 <parse_http+0x16e>
		pS->state = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	702b      	strb	r3, [r5, #0]
		pS->ready = FALSE;
 80026a2:	2292      	movs	r2, #146	; 0x92
 80026a4:	0052      	lsls	r2, r2, #1
 80026a6:	54ab      	strb	r3, [r5, r2]
		return FALSE;
 80026a8:	2000      	movs	r0, #0
 80026aa:	e7dc      	b.n	8002666 <parse_http+0x17e>
 80026ac:	08003908 	.word	0x08003908
 80026b0:	08003918 	.word	0x08003918
 80026b4:	080038e4 	.word	0x080038e4
 80026b8:	080038fc 	.word	0x080038fc
 80026bc:	08003900 	.word	0x08003900
 80026c0:	08003920 	.word	0x08003920
 80026c4:	08003880 	.word	0x08003880
 80026c8:	08003924 	.word	0x08003924
 80026cc:	080038e8 	.word	0x080038e8
 80026d0:	080038f4 	.word	0x080038f4

080026d4 <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(pS->argc == 0)
 80026d6:	2345      	movs	r3, #69	; 0x45
 80026d8:	5cc7      	ldrb	r7, [r0, r3]
 80026da:	2f00      	cmp	r7, #0
 80026dc:	d01d      	beq.n	800271a <getHTTPArg+0x46>
		return NULL;
	int i;
	const char* cur_s; 
	const char* cur_name = name;
	for(i=0; i<pS->argc; ++i)
 80026de:	2600      	movs	r6, #0
 80026e0:	e005      	b.n	80026ee <getHTTPArg+0x1a>
				break;
			}
			cur_name++;
			cur_s++;
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 80026e2:	7812      	ldrb	r2, [r2, #0]
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d101      	bne.n	80026ec <getHTTPArg+0x18>
 80026e8:	2b3d      	cmp	r3, #61	; 0x3d
 80026ea:	d012      	beq.n	8002712 <getHTTPArg+0x3e>
	for(i=0; i<pS->argc; ++i)
 80026ec:	3601      	adds	r6, #1
 80026ee:	42b7      	cmp	r7, r6
 80026f0:	dd11      	ble.n	8002716 <getHTTPArg+0x42>
		cur_s = pS->argv[i];
 80026f2:	0033      	movs	r3, r6
 80026f4:	3312      	adds	r3, #18
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	581c      	ldr	r4, [r3, r0]
		while(*cur_s && *cur_name)
 80026fa:	000a      	movs	r2, r1
 80026fc:	7823      	ldrb	r3, [r4, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ef      	beq.n	80026e2 <getHTTPArg+0xe>
 8002702:	7815      	ldrb	r5, [r2, #0]
 8002704:	2d00      	cmp	r5, #0
 8002706:	d0ec      	beq.n	80026e2 <getHTTPArg+0xe>
			if(*cur_s != *cur_name)
 8002708:	42ab      	cmp	r3, r5
 800270a:	d1ea      	bne.n	80026e2 <getHTTPArg+0xe>
			cur_name++;
 800270c:	3201      	adds	r2, #1
			cur_s++;
 800270e:	3401      	adds	r4, #1
 8002710:	e7f4      	b.n	80026fc <getHTTPArg+0x28>
		{
			return cur_s+1;
 8002712:	1c60      	adds	r0, r4, #1
 8002714:	e000      	b.n	8002718 <getHTTPArg+0x44>
		}
		cur_name = name;
	}
	return NULL;
 8002716:	2000      	movs	r0, #0
}
 8002718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
 800271a:	2000      	movs	r0, #0
 800271c:	e7fc      	b.n	8002718 <getHTTPArg+0x44>

0800271e <atou8>:
uint8_t atou8(const char* s)
{
 800271e:	b510      	push	{r4, lr}
 8002720:	0004      	movs	r4, r0
	uint8_t i;
	uint8_t sum = 0;
 8002722:	2000      	movs	r0, #0
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8002724:	2200      	movs	r2, #0
 8002726:	e00a      	b.n	800273e <atou8+0x20>
	{
		sum *= 10;
 8002728:	0081      	lsls	r1, r0, #2
 800272a:	1840      	adds	r0, r0, r1
 800272c:	0041      	lsls	r1, r0, #1
 800272e:	b2c9      	uxtb	r1, r1
		sum += *s - '0';
 8002730:	185b      	adds	r3, r3, r1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	3b30      	subs	r3, #48	; 0x30
 8002736:	b2d8      	uxtb	r0, r3
		s++;
 8002738:	3401      	adds	r4, #1
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 800273a:	3201      	adds	r2, #1
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	2a02      	cmp	r2, #2
 8002740:	d802      	bhi.n	8002748 <atou8+0x2a>
 8002742:	7823      	ldrb	r3, [r4, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ef      	bne.n	8002728 <atou8+0xa>
	}
	return sum;
}
 8002748:	bd10      	pop	{r4, pc}

0800274a <u16toa>:
uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 800274a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800274c:	0004      	movs	r4, r0
 800274e:	000d      	movs	r5, r1
	uint8_t i = 0, j;
 8002750:	2700      	movs	r7, #0
	while(d)
 8002752:	e00e      	b.n	8002772 <u16toa+0x28>
	{
		buf[i++] = (d % 10) + '0';
 8002754:	1c7e      	adds	r6, r7, #1
 8002756:	b2f6      	uxtb	r6, r6
 8002758:	19ef      	adds	r7, r5, r7
 800275a:	210a      	movs	r1, #10
 800275c:	0020      	movs	r0, r4
 800275e:	f7fd fd6b 	bl	8000238 <__aeabi_uidivmod>
 8002762:	3130      	adds	r1, #48	; 0x30
 8002764:	7039      	strb	r1, [r7, #0]
		d /= 10;
 8002766:	210a      	movs	r1, #10
 8002768:	0020      	movs	r0, r4
 800276a:	f7fd fcdf 	bl	800012c <__udivsi3>
 800276e:	b284      	uxth	r4, r0
		buf[i++] = (d % 10) + '0';
 8002770:	0037      	movs	r7, r6
	while(d)
 8002772:	2c00      	cmp	r4, #0
 8002774:	d1ee      	bne.n	8002754 <u16toa+0xa>
	}
	buf[i] = 0;
 8002776:	19eb      	adds	r3, r5, r7
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 800277c:	2300      	movs	r3, #0
 800277e:	e009      	b.n	8002794 <u16toa+0x4a>
	{
		char tmp;
		tmp = buf[j];
 8002780:	18e9      	adds	r1, r5, r3
 8002782:	780c      	ldrb	r4, [r1, #0]
		buf[j] = buf[i-j-1];
 8002784:	1afa      	subs	r2, r7, r3
 8002786:	3a01      	subs	r2, #1
 8002788:	18aa      	adds	r2, r5, r2
 800278a:	7816      	ldrb	r6, [r2, #0]
 800278c:	700e      	strb	r6, [r1, #0]
		buf[i-j-1] = tmp; // swap
 800278e:	7014      	strb	r4, [r2, #0]
	for(j = 0; j < i/2; ++j)
 8002790:	3301      	adds	r3, #1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	087a      	lsrs	r2, r7, #1
 8002796:	429a      	cmp	r2, r3
 8002798:	d8f2      	bhi.n	8002780 <u16toa+0x36>
	}
	return i;
}
 800279a:	0038      	movs	r0, r7
 800279c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027a0 <HTTPSendFile>:
{
 80027a0:	b082      	sub	sp, #8
 80027a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027a4:	46ce      	mov	lr, r9
 80027a6:	b500      	push	{lr}
 80027a8:	b08a      	sub	sp, #40	; 0x28
 80027aa:	0006      	movs	r6, r0
 80027ac:	000c      	movs	r4, r1
 80027ae:	0015      	movs	r5, r2
 80027b0:	9210      	str	r2, [sp, #64]	; 0x40
 80027b2:	9311      	str	r3, [sp, #68]	; 0x44
	unsigned char* buf = pS->response_header;
 80027b4:	0007      	movs	r7, r0
 80027b6:	379c      	adds	r7, #156	; 0x9c
	if(ENDSWITH(file.path, ".gz"))
 80027b8:	0010      	movs	r0, r2
 80027ba:	f7fd fcaf 	bl	800011c <strlen>
 80027be:	3803      	subs	r0, #3
 80027c0:	1828      	adds	r0, r5, r0
 80027c2:	495c      	ldr	r1, [pc, #368]	; (8002934 <HTTPSendFile+0x194>)
 80027c4:	f7fd fca0 	bl	8000108 <strcmp>
 80027c8:	2800      	cmp	r0, #0
 80027ca:	d100      	bne.n	80027ce <HTTPSendFile+0x2e>
 80027cc:	e08c      	b.n	80028e8 <HTTPSendFile+0x148>
		content_type = HTTPGetContentType(file.path);
 80027ce:	0028      	movs	r0, r5
 80027d0:	f7ff fe00 	bl	80023d4 <HTTPGetContentType>
 80027d4:	9001      	str	r0, [sp, #4]
	BOOL is_gzip = FALSE;
 80027d6:	2500      	movs	r5, #0
	*buf = 0; // clear buffer
 80027d8:	239c      	movs	r3, #156	; 0x9c
 80027da:	2200      	movs	r2, #0
 80027dc:	54f2      	strb	r2, [r6, r3]
	strcat(buf, HTTP_STR_VERSION);
 80027de:	0038      	movs	r0, r7
 80027e0:	f7fd fc9c 	bl	800011c <strlen>
 80027e4:	1838      	adds	r0, r7, r0
 80027e6:	2209      	movs	r2, #9
 80027e8:	4953      	ldr	r1, [pc, #332]	; (8002938 <HTTPSendFile+0x198>)
 80027ea:	f000 fe67 	bl	80034bc <memcpy>
	*buf = ' '; // HTTP/1.1_
 80027ee:	23a4      	movs	r3, #164	; 0xa4
 80027f0:	2220      	movs	r2, #32
 80027f2:	54f2      	strb	r2, [r6, r3]
	buf += u16toa(code, buf);
 80027f4:	b2a0      	uxth	r0, r4
 80027f6:	0034      	movs	r4, r6
 80027f8:	34a5      	adds	r4, #165	; 0xa5
 80027fa:	0021      	movs	r1, r4
 80027fc:	f7ff ffa5 	bl	800274a <u16toa>
 8002800:	1824      	adds	r4, r4, r0
	strcat(buf, " OK\r\n");
 8002802:	0020      	movs	r0, r4
 8002804:	f7fd fc8a 	bl	800011c <strlen>
 8002808:	1820      	adds	r0, r4, r0
 800280a:	2206      	movs	r2, #6
 800280c:	494b      	ldr	r1, [pc, #300]	; (800293c <HTTPSendFile+0x19c>)
 800280e:	f000 fe55 	bl	80034bc <memcpy>
	buf += 5;	// 200 OK\r\n
 8002812:	1d63      	adds	r3, r4, #5
 8002814:	4699      	mov	r9, r3
	strcat(buf, "Connection: ");
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fc80 	bl	800011c <strlen>
 800281c:	4448      	add	r0, r9
 800281e:	220d      	movs	r2, #13
 8002820:	4947      	ldr	r1, [pc, #284]	; (8002940 <HTTPSendFile+0x1a0>)
 8002822:	f000 fe4b 	bl	80034bc <memcpy>
	buf += 12;
 8002826:	2311      	movs	r3, #17
 8002828:	4699      	mov	r9, r3
 800282a:	44a1      	add	r9, r4
	if(pS->connection == KEEP_ALIVE)
 800282c:	7933      	ldrb	r3, [r6, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d06b      	beq.n	800290a <HTTPSendFile+0x16a>
		strcat(buf, "Closed\r\n");
 8002832:	4648      	mov	r0, r9
 8002834:	f7fd fc72 	bl	800011c <strlen>
 8002838:	4448      	add	r0, r9
 800283a:	2209      	movs	r2, #9
 800283c:	4941      	ldr	r1, [pc, #260]	; (8002944 <HTTPSendFile+0x1a4>)
 800283e:	f000 fe3d 	bl	80034bc <memcpy>
		buf += 8;
 8002842:	3419      	adds	r4, #25
	if(is_gzip)
 8002844:	2d00      	cmp	r5, #0
 8002846:	d16a      	bne.n	800291e <HTTPSendFile+0x17e>
	strcat(buf, "Content-Type: ");
 8002848:	0020      	movs	r0, r4
 800284a:	f7fd fc67 	bl	800011c <strlen>
 800284e:	1820      	adds	r0, r4, r0
 8002850:	220f      	movs	r2, #15
 8002852:	493d      	ldr	r1, [pc, #244]	; (8002948 <HTTPSendFile+0x1a8>)
 8002854:	f000 fe32 	bl	80034bc <memcpy>
	buf += 14;
 8002858:	340e      	adds	r4, #14
	strcat(buf, content_type);
 800285a:	9d01      	ldr	r5, [sp, #4]
 800285c:	0029      	movs	r1, r5
 800285e:	0020      	movs	r0, r4
 8002860:	f000 fe3d 	bl	80034de <strcat>
	buf += strlen(content_type);
 8002864:	0028      	movs	r0, r5
 8002866:	f7fd fc59 	bl	800011c <strlen>
 800286a:	1824      	adds	r4, r4, r0
	strcat(buf, "\r\n");
 800286c:	0020      	movs	r0, r4
 800286e:	f7fd fc55 	bl	800011c <strlen>
 8002872:	1820      	adds	r0, r4, r0
 8002874:	2203      	movs	r2, #3
 8002876:	4935      	ldr	r1, [pc, #212]	; (800294c <HTTPSendFile+0x1ac>)
 8002878:	f000 fe20 	bl	80034bc <memcpy>
	buf += 2;
 800287c:	1ca5      	adds	r5, r4, #2
	strcat(buf, "Content-Length: ");
 800287e:	0028      	movs	r0, r5
 8002880:	f7fd fc4c 	bl	800011c <strlen>
 8002884:	1828      	adds	r0, r5, r0
 8002886:	2211      	movs	r2, #17
 8002888:	4931      	ldr	r1, [pc, #196]	; (8002950 <HTTPSendFile+0x1b0>)
 800288a:	f000 fe17 	bl	80034bc <memcpy>
	buf += 16;
 800288e:	3412      	adds	r4, #18
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 8002890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002892:	b29d      	uxth	r5, r3
 8002894:	0021      	movs	r1, r4
 8002896:	0028      	movs	r0, r5
 8002898:	f7ff ff57 	bl	800274a <u16toa>
 800289c:	1824      	adds	r4, r4, r0
	strcat(buf, HTTP_LINE_DELIM);
 800289e:	0020      	movs	r0, r4
 80028a0:	f7fd fc3c 	bl	800011c <strlen>
 80028a4:	1820      	adds	r0, r4, r0
 80028a6:	2203      	movs	r2, #3
 80028a8:	4928      	ldr	r1, [pc, #160]	; (800294c <HTTPSendFile+0x1ac>)
 80028aa:	f000 fe07 	bl	80034bc <memcpy>
	buf += 2;
 80028ae:	3402      	adds	r4, #2
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 80028b0:	0020      	movs	r0, r4
 80028b2:	f7fd fc33 	bl	800011c <strlen>
 80028b6:	1820      	adds	r0, r4, r0
 80028b8:	2203      	movs	r2, #3
 80028ba:	4924      	ldr	r1, [pc, #144]	; (800294c <HTTPSendFile+0x1ac>)
 80028bc:	f000 fdfe 	bl	80034bc <memcpy>
	pS->len_response_header = strlen(pS->response_header);
 80028c0:	0038      	movs	r0, r7
 80028c2:	f7fd fc2b 	bl	800011c <strlen>
 80028c6:	239a      	movs	r3, #154	; 0x9a
 80028c8:	52f0      	strh	r0, [r6, r3]
	pS->len_response_content_remain = (uint16_t)file.size;
 80028ca:	3382      	adds	r3, #130	; 0x82
 80028cc:	52f5      	strh	r5, [r6, r3]
	pS->response_content = file.p_content;
 80028ce:	3304      	adds	r3, #4
 80028d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80028d2:	50f2      	str	r2, [r6, r3]
	pS->response_stage = RESPONSE_PREPARED;
 80028d4:	3b88      	subs	r3, #136	; 0x88
 80028d6:	2201      	movs	r2, #1
 80028d8:	54f2      	strb	r2, [r6, r3]
}
 80028da:	b00a      	add	sp, #40	; 0x28
 80028dc:	bc04      	pop	{r2}
 80028de:	4691      	mov	r9, r2
 80028e0:	bcf0      	pop	{r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	b002      	add	sp, #8
 80028e6:	4718      	bx	r3
		strcpy(s_tmp, file.path);
 80028e8:	0029      	movs	r1, r5
 80028ea:	a802      	add	r0, sp, #8
 80028ec:	f000 fe13 	bl	8003516 <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 80028f0:	a802      	add	r0, sp, #8
 80028f2:	f7fd fc13 	bl	800011c <strlen>
 80028f6:	3803      	subs	r0, #3
 80028f8:	2300      	movs	r3, #0
 80028fa:	aa02      	add	r2, sp, #8
 80028fc:	5413      	strb	r3, [r2, r0]
		content_type = HTTPGetContentType(s_tmp);
 80028fe:	0010      	movs	r0, r2
 8002900:	f7ff fd68 	bl	80023d4 <HTTPGetContentType>
 8002904:	9001      	str	r0, [sp, #4]
		is_gzip = TRUE;
 8002906:	2501      	movs	r5, #1
 8002908:	e766      	b.n	80027d8 <HTTPSendFile+0x38>
		strcat(buf, "Keep-Alive\r\n");
 800290a:	4648      	mov	r0, r9
 800290c:	f7fd fc06 	bl	800011c <strlen>
 8002910:	4448      	add	r0, r9
 8002912:	220d      	movs	r2, #13
 8002914:	490f      	ldr	r1, [pc, #60]	; (8002954 <HTTPSendFile+0x1b4>)
 8002916:	f000 fdd1 	bl	80034bc <memcpy>
		buf += 12;
 800291a:	341d      	adds	r4, #29
 800291c:	e792      	b.n	8002844 <HTTPSendFile+0xa4>
		strcat(buf, "Content-Encoding: gzip\r\n");
 800291e:	0020      	movs	r0, r4
 8002920:	f7fd fbfc 	bl	800011c <strlen>
 8002924:	1820      	adds	r0, r4, r0
 8002926:	2219      	movs	r2, #25
 8002928:	490b      	ldr	r1, [pc, #44]	; (8002958 <HTTPSendFile+0x1b8>)
 800292a:	f000 fdc7 	bl	80034bc <memcpy>
		buf += 24;
 800292e:	3418      	adds	r4, #24
 8002930:	e78a      	b.n	8002848 <HTTPSendFile+0xa8>
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	080037fc 	.word	0x080037fc
 8002938:	08003874 	.word	0x08003874
 800293c:	08003800 	.word	0x08003800
 8002940:	08003808 	.word	0x08003808
 8002944:	08003828 	.word	0x08003828
 8002948:	08003850 	.word	0x08003850
 800294c:	08003730 	.word	0x08003730
 8002950:	08003860 	.word	0x08003860
 8002954:	08003818 	.word	0x08003818
 8002958:	08003834 	.word	0x08003834

0800295c <HTTPSendStr>:
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b083      	sub	sp, #12
 8002960:	0007      	movs	r7, r0
 8002962:	000e      	movs	r6, r1
 8002964:	9201      	str	r2, [sp, #4]
	unsigned char* buf = pS->response_header;
 8002966:	0005      	movs	r5, r0
 8002968:	359c      	adds	r5, #156	; 0x9c
	*buf = 0; // clear buffer
 800296a:	239c      	movs	r3, #156	; 0x9c
 800296c:	2200      	movs	r2, #0
 800296e:	54c2      	strb	r2, [r0, r3]
	strcat(buf, HTTP_STR_VERSION);
 8002970:	0028      	movs	r0, r5
 8002972:	f7fd fbd3 	bl	800011c <strlen>
 8002976:	1828      	adds	r0, r5, r0
 8002978:	2209      	movs	r2, #9
 800297a:	4944      	ldr	r1, [pc, #272]	; (8002a8c <HTTPSendStr+0x130>)
 800297c:	f000 fd9e 	bl	80034bc <memcpy>
	*buf = ' '; // HTTP/1.1_
 8002980:	23a4      	movs	r3, #164	; 0xa4
 8002982:	2220      	movs	r2, #32
 8002984:	54fa      	strb	r2, [r7, r3]
	buf++;
 8002986:	003c      	movs	r4, r7
 8002988:	34a5      	adds	r4, #165	; 0xa5
	buf += u16toa(code, buf);
 800298a:	b2b0      	uxth	r0, r6
 800298c:	0021      	movs	r1, r4
 800298e:	f7ff fedc 	bl	800274a <u16toa>
 8002992:	1824      	adds	r4, r4, r0
	strcat(buf, " OK\r\n");
 8002994:	0020      	movs	r0, r4
 8002996:	f7fd fbc1 	bl	800011c <strlen>
 800299a:	1820      	adds	r0, r4, r0
 800299c:	2206      	movs	r2, #6
 800299e:	493c      	ldr	r1, [pc, #240]	; (8002a90 <HTTPSendStr+0x134>)
 80029a0:	f000 fd8c 	bl	80034bc <memcpy>
	buf += 5;	// 200 OK\r\n
 80029a4:	1d66      	adds	r6, r4, #5
	strcat(buf, "Connection: ");
 80029a6:	0030      	movs	r0, r6
 80029a8:	f7fd fbb8 	bl	800011c <strlen>
 80029ac:	1830      	adds	r0, r6, r0
 80029ae:	220d      	movs	r2, #13
 80029b0:	4938      	ldr	r1, [pc, #224]	; (8002a94 <HTTPSendStr+0x138>)
 80029b2:	f000 fd83 	bl	80034bc <memcpy>
	buf += 12;
 80029b6:	360c      	adds	r6, #12
	if(pS->connection == KEEP_ALIVE)
 80029b8:	793b      	ldrb	r3, [r7, #4]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d05b      	beq.n	8002a76 <HTTPSendStr+0x11a>
		strcat(buf, "Closed\r\n");
 80029be:	0030      	movs	r0, r6
 80029c0:	f7fd fbac 	bl	800011c <strlen>
 80029c4:	1830      	adds	r0, r6, r0
 80029c6:	2209      	movs	r2, #9
 80029c8:	4933      	ldr	r1, [pc, #204]	; (8002a98 <HTTPSendStr+0x13c>)
 80029ca:	f000 fd77 	bl	80034bc <memcpy>
		buf += 8;
 80029ce:	3419      	adds	r4, #25
	const char* content_type = HTTPGetContentType(pS->URI);
 80029d0:	1d78      	adds	r0, r7, #5
 80029d2:	f7ff fcff 	bl	80023d4 <HTTPGetContentType>
 80029d6:	0006      	movs	r6, r0
	strcat(buf, "Content-Type: ");
 80029d8:	0020      	movs	r0, r4
 80029da:	f7fd fb9f 	bl	800011c <strlen>
 80029de:	1820      	adds	r0, r4, r0
 80029e0:	220f      	movs	r2, #15
 80029e2:	492e      	ldr	r1, [pc, #184]	; (8002a9c <HTTPSendStr+0x140>)
 80029e4:	f000 fd6a 	bl	80034bc <memcpy>
	buf += 14;
 80029e8:	340e      	adds	r4, #14
	strcat(buf, content_type);
 80029ea:	0031      	movs	r1, r6
 80029ec:	0020      	movs	r0, r4
 80029ee:	f000 fd76 	bl	80034de <strcat>
	buf += strlen(content_type);
 80029f2:	0030      	movs	r0, r6
 80029f4:	f7fd fb92 	bl	800011c <strlen>
 80029f8:	1824      	adds	r4, r4, r0
	strcat(buf, "\r\n");
 80029fa:	0020      	movs	r0, r4
 80029fc:	f7fd fb8e 	bl	800011c <strlen>
 8002a00:	1820      	adds	r0, r4, r0
 8002a02:	2203      	movs	r2, #3
 8002a04:	4926      	ldr	r1, [pc, #152]	; (8002aa0 <HTTPSendStr+0x144>)
 8002a06:	f000 fd59 	bl	80034bc <memcpy>
	buf += 2;
 8002a0a:	1ca6      	adds	r6, r4, #2
	strcat(buf, "Content-Length: ");
 8002a0c:	0030      	movs	r0, r6
 8002a0e:	f7fd fb85 	bl	800011c <strlen>
 8002a12:	1830      	adds	r0, r6, r0
 8002a14:	2211      	movs	r2, #17
 8002a16:	4923      	ldr	r1, [pc, #140]	; (8002aa4 <HTTPSendStr+0x148>)
 8002a18:	f000 fd50 	bl	80034bc <memcpy>
	buf += 16;
 8002a1c:	3412      	adds	r4, #18
	uint16_t len_content = strlen(content);
 8002a1e:	9e01      	ldr	r6, [sp, #4]
 8002a20:	0030      	movs	r0, r6
 8002a22:	f7fd fb7b 	bl	800011c <strlen>
 8002a26:	b280      	uxth	r0, r0
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8002a28:	0021      	movs	r1, r4
 8002a2a:	f7ff fe8e 	bl	800274a <u16toa>
 8002a2e:	1824      	adds	r4, r4, r0
	strcat(buf, HTTP_LINE_DELIM);
 8002a30:	0020      	movs	r0, r4
 8002a32:	f7fd fb73 	bl	800011c <strlen>
 8002a36:	1820      	adds	r0, r4, r0
 8002a38:	2203      	movs	r2, #3
 8002a3a:	4919      	ldr	r1, [pc, #100]	; (8002aa0 <HTTPSendStr+0x144>)
 8002a3c:	f000 fd3e 	bl	80034bc <memcpy>
	buf += 2;
 8002a40:	3402      	adds	r4, #2
	strcat(buf, HTTP_LINE_DELIM);
 8002a42:	0020      	movs	r0, r4
 8002a44:	f7fd fb6a 	bl	800011c <strlen>
 8002a48:	1820      	adds	r0, r4, r0
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	4914      	ldr	r1, [pc, #80]	; (8002aa0 <HTTPSendStr+0x144>)
 8002a4e:	f000 fd35 	bl	80034bc <memcpy>
	pS->len_response_header = strlen(pS->response_header);
 8002a52:	0028      	movs	r0, r5
 8002a54:	f7fd fb62 	bl	800011c <strlen>
 8002a58:	239a      	movs	r3, #154	; 0x9a
 8002a5a:	52f8      	strh	r0, [r7, r3]
	pS->len_response_content_remain = strlen(content);
 8002a5c:	0030      	movs	r0, r6
 8002a5e:	f7fd fb5d 	bl	800011c <strlen>
 8002a62:	238e      	movs	r3, #142	; 0x8e
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	52f8      	strh	r0, [r7, r3]
	pS->response_content = content;
 8002a68:	3304      	adds	r3, #4
 8002a6a:	50fe      	str	r6, [r7, r3]
	pS->response_stage = RESPONSE_PREPARED;
 8002a6c:	3b88      	subs	r3, #136	; 0x88
 8002a6e:	2201      	movs	r2, #1
 8002a70:	54fa      	strb	r2, [r7, r3]
}
 8002a72:	b003      	add	sp, #12
 8002a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat(buf, "Keep-Alive\r\n");
 8002a76:	0030      	movs	r0, r6
 8002a78:	f7fd fb50 	bl	800011c <strlen>
 8002a7c:	1830      	adds	r0, r6, r0
 8002a7e:	220d      	movs	r2, #13
 8002a80:	4909      	ldr	r1, [pc, #36]	; (8002aa8 <HTTPSendStr+0x14c>)
 8002a82:	f000 fd1b 	bl	80034bc <memcpy>
		buf += 12;
 8002a86:	341d      	adds	r4, #29
 8002a88:	e7a2      	b.n	80029d0 <HTTPSendStr+0x74>
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	08003874 	.word	0x08003874
 8002a90:	08003800 	.word	0x08003800
 8002a94:	08003808 	.word	0x08003808
 8002a98:	08003828 	.word	0x08003828
 8002a9c:	08003850 	.word	0x08003850
 8002aa0:	08003730 	.word	0x08003730
 8002aa4:	08003860 	.word	0x08003860
 8002aa8:	08003818 	.word	0x08003818

08002aac <HTTPonNotFound>:
{
 8002aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aae:	b09f      	sub	sp, #124	; 0x7c
 8002ab0:	0006      	movs	r6, r0
	if(FS_exists(&FS, pS->URI))
 8002ab2:	1d45      	adds	r5, r0, #5
 8002ab4:	0029      	movs	r1, r5
 8002ab6:	4830      	ldr	r0, [pc, #192]	; (8002b78 <HTTPonNotFound+0xcc>)
 8002ab8:	f7ff fb36 	bl	8002128 <FS_exists>
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d016      	beq.n	8002aee <HTTPonNotFound+0x42>
		FSfile_typedef file = FS_open(&FS, pS->URI);
 8002ac0:	002a      	movs	r2, r5
 8002ac2:	492d      	ldr	r1, [pc, #180]	; (8002b78 <HTTPonNotFound+0xcc>)
 8002ac4:	a804      	add	r0, sp, #16
 8002ac6:	f7ff fb03 	bl	80020d0 <FS_open>
		if(file.path)
 8002aca:	9b04      	ldr	r3, [sp, #16]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d022      	beq.n	8002b16 <HTTPonNotFound+0x6a>
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 8002ad0:	002a      	movs	r2, r5
 8002ad2:	4929      	ldr	r1, [pc, #164]	; (8002b78 <HTTPonNotFound+0xcc>)
 8002ad4:	a818      	add	r0, sp, #96	; 0x60
 8002ad6:	f7ff fafb 	bl	80020d0 <FS_open>
 8002ada:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8002adc:	9303      	str	r3, [sp, #12]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002ae2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002ae4:	21c8      	movs	r1, #200	; 0xc8
 8002ae6:	0030      	movs	r0, r6
 8002ae8:	f7ff fe5a 	bl	80027a0 <HTTPSendFile>
 8002aec:	e02b      	b.n	8002b46 <HTTPonNotFound+0x9a>
		strcpy(s_tmp, pS->URI);
 8002aee:	0029      	movs	r1, r5
 8002af0:	a807      	add	r0, sp, #28
 8002af2:	f000 fd10 	bl	8003516 <strcpy>
		strcat(s_tmp, ".gz");
 8002af6:	a807      	add	r0, sp, #28
 8002af8:	f7fd fb10 	bl	800011c <strlen>
 8002afc:	ab07      	add	r3, sp, #28
 8002afe:	469c      	mov	ip, r3
 8002b00:	4460      	add	r0, ip
 8002b02:	2204      	movs	r2, #4
 8002b04:	491d      	ldr	r1, [pc, #116]	; (8002b7c <HTTPonNotFound+0xd0>)
 8002b06:	f000 fcd9 	bl	80034bc <memcpy>
		if(FS_exists(&FS, s_tmp))
 8002b0a:	a907      	add	r1, sp, #28
 8002b0c:	481a      	ldr	r0, [pc, #104]	; (8002b78 <HTTPonNotFound+0xcc>)
 8002b0e:	f7ff fb0b 	bl	8002128 <FS_exists>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d119      	bne.n	8002b4a <HTTPonNotFound+0x9e>
	strcpy(s_notfound, "Not Found: ");
 8002b16:	4c1a      	ldr	r4, [pc, #104]	; (8002b80 <HTTPonNotFound+0xd4>)
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <HTTPonNotFound+0xd8>)
 8002b1a:	0022      	movs	r2, r4
 8002b1c:	cb83      	ldmia	r3!, {r0, r1, r7}
 8002b1e:	c283      	stmia	r2!, {r0, r1, r7}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 8002b20:	2240      	movs	r2, #64	; 0x40
 8002b22:	0029      	movs	r1, r5
 8002b24:	0020      	movs	r0, r4
 8002b26:	f000 fcfe 	bl	8003526 <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 8002b2a:	0020      	movs	r0, r4
 8002b2c:	f7fd faf6 	bl	800011c <strlen>
 8002b30:	1820      	adds	r0, r4, r0
 8002b32:	2203      	movs	r2, #3
 8002b34:	4914      	ldr	r1, [pc, #80]	; (8002b88 <HTTPonNotFound+0xdc>)
 8002b36:	f000 fcc1 	bl	80034bc <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 8002b3a:	21ca      	movs	r1, #202	; 0xca
 8002b3c:	0022      	movs	r2, r4
 8002b3e:	0049      	lsls	r1, r1, #1
 8002b40:	0030      	movs	r0, r6
 8002b42:	f7ff ff0b 	bl	800295c <HTTPSendStr>
}
 8002b46:	b01f      	add	sp, #124	; 0x7c
 8002b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
			FSfile_typedef file = FS_open(&FS, s_tmp);
 8002b4a:	aa07      	add	r2, sp, #28
 8002b4c:	490a      	ldr	r1, [pc, #40]	; (8002b78 <HTTPonNotFound+0xcc>)
 8002b4e:	a804      	add	r0, sp, #16
 8002b50:	f7ff fabe 	bl	80020d0 <FS_open>
			if(file.path)
 8002b54:	9b04      	ldr	r3, [sp, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0dd      	beq.n	8002b16 <HTTPonNotFound+0x6a>
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 8002b5a:	aa07      	add	r2, sp, #28
 8002b5c:	4906      	ldr	r1, [pc, #24]	; (8002b78 <HTTPonNotFound+0xcc>)
 8002b5e:	a81b      	add	r0, sp, #108	; 0x6c
 8002b60:	f7ff fab6 	bl	80020d0 <FS_open>
 8002b64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b66:	9303      	str	r3, [sp, #12]
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002b6c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8002b6e:	21c8      	movs	r1, #200	; 0xc8
 8002b70:	0030      	movs	r0, r6
 8002b72:	f7ff fe15 	bl	80027a0 <HTTPSendFile>
 8002b76:	e7e6      	b.n	8002b46 <HTTPonNotFound+0x9a>
 8002b78:	200008e8 	.word	0x200008e8
 8002b7c:	080037fc 	.word	0x080037fc
 8002b80:	20000870 	.word	0x20000870
 8002b84:	0800390c 	.word	0x0800390c
 8002b88:	08003730 	.word	0x08003730

08002b8c <HTTPHandle>:
{
 8002b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8e:	46c6      	mov	lr, r8
 8002b90:	b500      	push	{lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	0006      	movs	r6, r0
	for(i=1; i <= NUM_SOCKETS; ++i)
 8002b96:	2401      	movs	r4, #1
 8002b98:	e01c      	b.n	8002bd4 <HTTPHandle+0x48>
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8002b9a:	3701      	adds	r7, #1
 8002b9c:	b2ff      	uxtb	r7, r7
 8002b9e:	2f06      	cmp	r7, #6
 8002ba0:	d810      	bhi.n	8002bc4 <HTTPHandle+0x38>
					if(strncmp(pS->URI, HTTPResponders[j].uri, MAX_LEN_URI) == 0) // matches
 8002ba2:	1d68      	adds	r0, r5, #5
 8002ba4:	9701      	str	r7, [sp, #4]
 8002ba6:	00fb      	lsls	r3, r7, #3
 8002ba8:	4a3a      	ldr	r2, [pc, #232]	; (8002c94 <HTTPHandle+0x108>)
 8002baa:	5899      	ldr	r1, [r3, r2]
 8002bac:	2240      	movs	r2, #64	; 0x40
 8002bae:	f000 fcd0 	bl	8003552 <strncmp>
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d1f1      	bne.n	8002b9a <HTTPHandle+0xe>
						(HTTPResponders[j].func)(pS); // call HTTPResponder service function
 8002bb6:	9b01      	ldr	r3, [sp, #4]
 8002bb8:	00da      	lsls	r2, r3, #3
 8002bba:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HTTPHandle+0x108>)
 8002bbc:	189b      	adds	r3, r3, r2
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	0028      	movs	r0, r5
 8002bc2:	4798      	blx	r3
				if(j == NUM_HTTP_RESPONDERS) // Resource not found
 8002bc4:	2f07      	cmp	r7, #7
 8002bc6:	d025      	beq.n	8002c14 <HTTPHandle+0x88>
				if(pS->response_stage == RESPONSE_PREPARED)
 8002bc8:	2398      	movs	r3, #152	; 0x98
 8002bca:	5ceb      	ldrb	r3, [r5, r3]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d025      	beq.n	8002c1c <HTTPHandle+0x90>
	for(i=1; i <= NUM_SOCKETS; ++i)
 8002bd0:	3401      	adds	r4, #1
 8002bd2:	b2e4      	uxtb	r4, r4
 8002bd4:	2c03      	cmp	r4, #3
 8002bd6:	d859      	bhi.n	8002c8c <HTTPHandle+0x100>
		HTTPRequestParseState *pS= parseStates + i - 1;
 8002bd8:	00e3      	lsls	r3, r4, #3
 8002bda:	191b      	adds	r3, r3, r4
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	191b      	adds	r3, r3, r4
 8002be0:	00dd      	lsls	r5, r3, #3
 8002be2:	3d29      	subs	r5, #41	; 0x29
 8002be4:	3dff      	subs	r5, #255	; 0xff
 8002be6:	4b2c      	ldr	r3, [pc, #176]	; (8002c98 <HTTPHandle+0x10c>)
 8002be8:	18ed      	adds	r5, r5, r3
		if(((pch395->RX_received) & (1<<i)) && pS->ready) // socket recv buffer non-empty, bit_i is 1
 8002bea:	7873      	ldrb	r3, [r6, #1]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4123      	asrs	r3, r4
 8002bf0:	07db      	lsls	r3, r3, #31
 8002bf2:	d5ed      	bpl.n	8002bd0 <HTTPHandle+0x44>
 8002bf4:	2392      	movs	r3, #146	; 0x92
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	5ceb      	ldrb	r3, [r5, r3]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0e8      	beq.n	8002bd0 <HTTPHandle+0x44>
			pch395->RX_received &= ~(1 << i); // clear availibility symbol
 8002bfe:	7873      	ldrb	r3, [r6, #1]
 8002c00:	2101      	movs	r1, #1
 8002c02:	40a1      	lsls	r1, r4
 8002c04:	438b      	bics	r3, r1
 8002c06:	7073      	strb	r3, [r6, #1]
			pS->ready = FALSE;
 8002c08:	2392      	movs	r3, #146	; 0x92
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	54ea      	strb	r2, [r5, r3]
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8002c10:	2700      	movs	r7, #0
 8002c12:	e7c4      	b.n	8002b9e <HTTPHandle+0x12>
					HTTPonNotFound(pS);
 8002c14:	0028      	movs	r0, r5
 8002c16:	f7ff ff49 	bl	8002aac <HTTPonNotFound>
 8002c1a:	e7d5      	b.n	8002bc8 <HTTPHandle+0x3c>
					uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 8002c1c:	3399      	adds	r3, #153	; 0x99
 8002c1e:	5ae9      	ldrh	r1, [r5, r3]
 8002c20:	23af      	movs	r3, #175	; 0xaf
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	1a5b      	subs	r3, r3, r1
 8002c26:	b29b      	uxth	r3, r3
					uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 8002c28:	228e      	movs	r2, #142	; 0x8e
 8002c2a:	0052      	lsls	r2, r2, #1
 8002c2c:	5aaa      	ldrh	r2, [r5, r2]
 8002c2e:	1c17      	adds	r7, r2, #0
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d900      	bls.n	8002c36 <HTTPHandle+0xaa>
 8002c34:	1c1f      	adds	r7, r3, #0
 8002c36:	b2bf      	uxth	r7, r7
					CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8002c38:	19c9      	adds	r1, r1, r7
 8002c3a:	b289      	uxth	r1, r1
 8002c3c:	0020      	movs	r0, r4
 8002c3e:	f7ff f8bd 	bl	8001dbc <CH395StartSendingData>
					CH395ContinueSendingData(pS->response_header, pS->len_response_header);
 8002c42:	0028      	movs	r0, r5
 8002c44:	309c      	adds	r0, #156	; 0x9c
 8002c46:	239a      	movs	r3, #154	; 0x9a
 8002c48:	5ae9      	ldrh	r1, [r5, r3]
 8002c4a:	f7ff f8ca 	bl	8001de2 <CH395ContinueSendingData>
					CH395ContinueSendingData(pS->response_content, len_content_this_time);
 8002c4e:	2390      	movs	r3, #144	; 0x90
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4698      	mov	r8, r3
 8002c54:	0039      	movs	r1, r7
 8002c56:	58e8      	ldr	r0, [r5, r3]
 8002c58:	f7ff f8c3 	bl	8001de2 <CH395ContinueSendingData>
					CH395Complete();
 8002c5c:	f7ff f8d0 	bl	8001e00 <CH395Complete>
					pS->len_response_content_remain -= len_content_this_time;
 8002c60:	228e      	movs	r2, #142	; 0x8e
 8002c62:	0052      	lsls	r2, r2, #1
 8002c64:	5aab      	ldrh	r3, [r5, r2]
 8002c66:	1bdb      	subs	r3, r3, r7
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	52ab      	strh	r3, [r5, r2]
					pS->response_content += len_content_this_time;
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	58aa      	ldr	r2, [r5, r2]
 8002c70:	4694      	mov	ip, r2
 8002c72:	4467      	add	r7, ip
 8002c74:	4642      	mov	r2, r8
 8002c76:	50af      	str	r7, [r5, r2]
					if(pS->len_response_content_remain == 0) // all content completely sent this time
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HTTPHandle+0xf8>
						pS->response_stage = RESPONSE_NOT_PREPARED;
 8002c7c:	3398      	adds	r3, #152	; 0x98
 8002c7e:	2200      	movs	r2, #0
 8002c80:	54ea      	strb	r2, [r5, r3]
 8002c82:	e7a5      	b.n	8002bd0 <HTTPHandle+0x44>
						pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8002c84:	2398      	movs	r3, #152	; 0x98
 8002c86:	2202      	movs	r2, #2
 8002c88:	54ea      	strb	r2, [r5, r3]
 8002c8a:	e7a1      	b.n	8002bd0 <HTTPHandle+0x44>
}
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bc04      	pop	{r2}
 8002c90:	4690      	mov	r8, r2
 8002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c94:	20000414 	.word	0x20000414
 8002c98:	200004f8 	.word	0x200004f8

08002c9c <strcpy_f>:

// Fast strcpy
// Return: pointer to the end of dest + src
char* strcpy_f(char* dest, const char* src)
{
	while(*src)
 8002c9c:	e002      	b.n	8002ca4 <strcpy_f+0x8>
	{
		*dest = *src;
 8002c9e:	7003      	strb	r3, [r0, #0]
		src++;
 8002ca0:	3101      	adds	r1, #1
		dest++;
 8002ca2:	3001      	adds	r0, #1
	while(*src)
 8002ca4:	780b      	ldrb	r3, [r1, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f9      	bne.n	8002c9e <strcpy_f+0x2>
	}
	*dest = 0;
 8002caa:	7003      	strb	r3, [r0, #0]
	return dest;
}
 8002cac:	4770      	bx	lr

08002cae <strncpy_f>:

char* strncpy_f(char* dest, const char* src, uint16_t len)
{
	while(*src && len)
 8002cae:	e004      	b.n	8002cba <strncpy_f+0xc>
	{
		*dest = *src;
 8002cb0:	7003      	strb	r3, [r0, #0]
		src++;
 8002cb2:	3101      	adds	r1, #1
		dest++;
 8002cb4:	3001      	adds	r0, #1
		len--;
 8002cb6:	3a01      	subs	r2, #1
 8002cb8:	b292      	uxth	r2, r2
	while(*src && len)
 8002cba:	780b      	ldrb	r3, [r1, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <strncpy_f+0x16>
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	d1f5      	bne.n	8002cb0 <strncpy_f+0x2>
	}
	*dest = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	7003      	strb	r3, [r0, #0]
	return dest;
}
 8002cc8:	4770      	bx	lr
	...

08002ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	2214      	movs	r2, #20
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	a803      	add	r0, sp, #12
 8002cd6:	f000 fbfa 	bl	80034ce <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <MX_GPIO_Init+0xbc>)
 8002cdc:	6959      	ldr	r1, [r3, #20]
 8002cde:	2080      	movs	r0, #128	; 0x80
 8002ce0:	03c0      	lsls	r0, r0, #15
 8002ce2:	4301      	orrs	r1, r0
 8002ce4:	6159      	str	r1, [r3, #20]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	4002      	ands	r2, r0
 8002cea:	9200      	str	r2, [sp, #0]
 8002cec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	6959      	ldr	r1, [r3, #20]
 8002cf0:	2080      	movs	r0, #128	; 0x80
 8002cf2:	0280      	lsls	r0, r0, #10
 8002cf4:	4301      	orrs	r1, r0
 8002cf6:	6159      	str	r1, [r3, #20]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	4002      	ands	r2, r0
 8002cfc:	9201      	str	r2, [sp, #4]
 8002cfe:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	02c9      	lsls	r1, r1, #11
 8002d06:	430a      	orrs	r2, r1
 8002d08:	615a      	str	r2, [r3, #20]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2103      	movs	r1, #3
 8002d16:	481d      	ldr	r0, [pc, #116]	; (8002d8c <MX_GPIO_Init+0xc0>)
 8002d18:	f7fd fd2b 	bl	8000772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002d1c:	4d1c      	ldr	r5, [pc, #112]	; (8002d90 <MX_GPIO_Init+0xc4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	0029      	movs	r1, r5
 8002d22:	2090      	movs	r0, #144	; 0x90
 8002d24:	05c0      	lsls	r0, r0, #23
 8002d26:	f7fd fd24 	bl	8000772 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCS_GPIO_Port, SCS_Pin, GPIO_PIN_SET);
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	2110      	movs	r1, #16
 8002d2e:	2090      	movs	r0, #144	; 0x90
 8002d30:	05c0      	lsls	r0, r0, #23
 8002d32:	f7fd fd1e 	bl	8000772 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d36:	2303      	movs	r3, #3
 8002d38:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3a:	2401      	movs	r4, #1
 8002d3c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d3e:	2602      	movs	r6, #2
 8002d40:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	2700      	movs	r7, #0
 8002d44:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d46:	a903      	add	r1, sp, #12
 8002d48:	4810      	ldr	r0, [pc, #64]	; (8002d8c <MX_GPIO_Init+0xc0>)
 8002d4a:	f7fd fc45 	bl	80005d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_10;
 8002d4e:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d50:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d52:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d54:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d56:	a903      	add	r1, sp, #12
 8002d58:	2090      	movs	r0, #144	; 0x90
 8002d5a:	05c0      	lsls	r0, r0, #23
 8002d5c:	f7fd fc3c 	bl	80005d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCS_Pin */
  GPIO_InitStruct.Pin = SCS_Pin;
 8002d60:	2310      	movs	r3, #16
 8002d62:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d64:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d66:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(SCS_GPIO_Port, &GPIO_InitStruct);
 8002d6a:	a903      	add	r1, sp, #12
 8002d6c:	2090      	movs	r0, #144	; 0x90
 8002d6e:	05c0      	lsls	r0, r0, #23
 8002d70:	f7fd fc32 	bl	80005d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8002d74:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <MX_GPIO_Init+0xc8>)
 8002d78:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 8002d7c:	a903      	add	r1, sp, #12
 8002d7e:	4806      	ldr	r0, [pc, #24]	; (8002d98 <MX_GPIO_Init+0xcc>)
 8002d80:	f7fd fc2a 	bl	80005d8 <HAL_GPIO_Init>

}
 8002d84:	b009      	add	sp, #36	; 0x24
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	48001400 	.word	0x48001400
 8002d90:	00000603 	.word	0x00000603
 8002d94:	10210000 	.word	0x10210000
 8002d98:	48000400 	.word	0x48000400

08002d9c <MX_SPI1_Init>:
{
 8002d9c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8002d9e:	480f      	ldr	r0, [pc, #60]	; (8002ddc <MX_SPI1_Init+0x40>)
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <MX_SPI1_Init+0x44>)
 8002da2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002da4:	2382      	movs	r3, #130	; 0x82
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002daa:	2300      	movs	r3, #0
 8002dac:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dae:	22e0      	movs	r2, #224	; 0xe0
 8002db0:	00d2      	lsls	r2, r2, #3
 8002db2:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002db4:	2202      	movs	r2, #2
 8002db6:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002db8:	3a01      	subs	r2, #1
 8002dba:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002dbc:	2280      	movs	r2, #128	; 0x80
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc2:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002dc4:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002dc6:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002dca:	3afa      	subs	r2, #250	; 0xfa
 8002dcc:	3aff      	subs	r2, #255	; 0xff
 8002dce:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dd0:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002dd2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dd4:	f7fe f9b6 	bl	8001144 <HAL_SPI_Init>
}
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	200009f8 	.word	0x200009f8
 8002de0:	40013000 	.word	0x40013000

08002de4 <MX_USART1_UART_Init>:
{
 8002de4:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8002de6:	4809      	ldr	r0, [pc, #36]	; (8002e0c <MX_USART1_UART_Init+0x28>)
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <MX_USART1_UART_Init+0x2c>)
 8002dea:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8002dec:	2396      	movs	r3, #150	; 0x96
 8002dee:	019b      	lsls	r3, r3, #6
 8002df0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002df2:	2300      	movs	r3, #0
 8002df4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002df6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002df8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e02:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e04:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e06:	f7fe fe4b 	bl	8001aa0 <HAL_UART_Init>
}
 8002e0a:	bd10      	pop	{r4, pc}
 8002e0c:	20000988 	.word	0x20000988
 8002e10:	40013800 	.word	0x40013800

08002e14 <MX_NVIC_Init>:
{
 8002e14:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2005      	movs	r0, #5
 8002e1c:	f7fd fa42 	bl	80002a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002e20:	2005      	movs	r0, #5
 8002e22:	f7fd fa6f 	bl	8000304 <HAL_NVIC_EnableIRQ>
}
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <SystemClock_Config>:
{
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2c:	222c      	movs	r2, #44	; 0x2c
 8002e2e:	2100      	movs	r1, #0
 8002e30:	a809      	add	r0, sp, #36	; 0x24
 8002e32:	f000 fb4c 	bl	80034ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e36:	2210      	movs	r2, #16
 8002e38:	2100      	movs	r1, #0
 8002e3a:	a804      	add	r0, sp, #16
 8002e3c:	f000 fb47 	bl	80034ce <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e40:	2210      	movs	r2, #16
 8002e42:	2100      	movs	r1, #0
 8002e44:	4668      	mov	r0, sp
 8002e46:	f000 fb42 	bl	80034ce <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e4e:	2401      	movs	r4, #1
 8002e50:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e52:	330e      	adds	r3, #14
 8002e54:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e56:	a808      	add	r0, sp, #32
 8002e58:	f7fd fca0 	bl	800079c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e5c:	2307      	movs	r3, #7
 8002e5e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e60:	2300      	movs	r3, #0
 8002e62:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e64:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e66:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	a804      	add	r0, sp, #16
 8002e6c:	f7fd fef8 	bl	8000c60 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e70:	9400      	str	r4, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002e72:	2303      	movs	r3, #3
 8002e74:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e76:	4668      	mov	r0, sp
 8002e78:	f7fd ffb2 	bl	8000de0 <HAL_RCCEx_PeriphCLKConfig>
}
 8002e7c:	b014      	add	sp, #80	; 0x50
 8002e7e:	bd10      	pop	{r4, pc}

08002e80 <main>:
{
 8002e80:	b530      	push	{r4, r5, lr}
 8002e82:	b085      	sub	sp, #20
	Selector[0].PIN_BCD0 = BCD1_0;
 8002e84:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <main+0xf8>)
 8002e86:	493d      	ldr	r1, [pc, #244]	; (8002f7c <main+0xfc>)
 8002e88:	001a      	movs	r2, r3
 8002e8a:	c911      	ldmia	r1!, {r0, r4}
 8002e8c:	c211      	stmia	r2!, {r0, r4}
	Selector[0].PIN_BCD1 = BCD1_1;
 8002e8e:	483c      	ldr	r0, [pc, #240]	; (8002f80 <main+0x100>)
 8002e90:	c812      	ldmia	r0!, {r1, r4}
 8002e92:	c212      	stmia	r2!, {r1, r4}
 8002e94:	0011      	movs	r1, r2
	Selector[0].PIN_BCD2 = BCD1_2;
 8002e96:	4a3b      	ldr	r2, [pc, #236]	; (8002f84 <main+0x104>)
 8002e98:	ca11      	ldmia	r2!, {r0, r4}
 8002e9a:	c111      	stmia	r1!, {r0, r4}
	Selector[0].sel = 0;
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCD0 = BCD2_0;
 8002ea0:	4939      	ldr	r1, [pc, #228]	; (8002f88 <main+0x108>)
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	321c      	adds	r2, #28
 8002ea6:	c911      	ldmia	r1!, {r0, r4}
 8002ea8:	c211      	stmia	r2!, {r0, r4}
	Selector[1].PIN_BCD1 = BCD2_1;
 8002eaa:	4938      	ldr	r1, [pc, #224]	; (8002f8c <main+0x10c>)
 8002eac:	001a      	movs	r2, r3
 8002eae:	3224      	adds	r2, #36	; 0x24
 8002eb0:	c911      	ldmia	r1!, {r0, r4}
 8002eb2:	c211      	stmia	r2!, {r0, r4}
	Selector[1].PIN_BCD2 = BCD2_2;
 8002eb4:	4a36      	ldr	r2, [pc, #216]	; (8002f90 <main+0x110>)
 8002eb6:	332c      	adds	r3, #44	; 0x2c
 8002eb8:	ca03      	ldmia	r2!, {r0, r1}
 8002eba:	c303      	stmia	r3!, {r0, r1}
  HAL_Init();
 8002ebc:	f7fd f9d4 	bl	8000268 <HAL_Init>
  SystemClock_Config();
 8002ec0:	f7ff ffb2 	bl	8002e28 <SystemClock_Config>
  MX_GPIO_Init();
 8002ec4:	f7ff ff02 	bl	8002ccc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ec8:	f7ff ff68 	bl	8002d9c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002ecc:	f7ff ff8a 	bl	8002de4 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 8002ed0:	f7ff ffa0 	bl	8002e14 <MX_NVIC_Init>
  EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8002ed4:	4c2f      	ldr	r4, [pc, #188]	; (8002f94 <main+0x114>)
 8002ed6:	225b      	movs	r2, #91	; 0x5b
 8002ed8:	0021      	movs	r1, r4
 8002eda:	482f      	ldr	r0, [pc, #188]	; (8002f98 <main+0x118>)
 8002edc:	f7ff f96f 	bl	80021be <EEPROM_ReadBytes>
  if(SavedData.EEPROM_valid_ID != EEPROM_VALID_BYTE)
 8002ee0:	7823      	ldrb	r3, [r4, #0]
 8002ee2:	2baa      	cmp	r3, #170	; 0xaa
 8002ee4:	d013      	beq.n	8002f0e <main+0x8e>
	  memset(SavedData.ant_labels, 0, sizeof(SavedData.ant_labels));
 8002ee6:	4c2d      	ldr	r4, [pc, #180]	; (8002f9c <main+0x11c>)
 8002ee8:	225a      	movs	r2, #90	; 0x5a
 8002eea:	2100      	movs	r1, #0
 8002eec:	0020      	movs	r0, r4
 8002eee:	f000 faee 	bl	80034ce <memset>
	  SavedData.EEPROM_valid_ID = EEPROM_VALID_BYTE;
 8002ef2:	3c01      	subs	r4, #1
 8002ef4:	23aa      	movs	r3, #170	; 0xaa
 8002ef6:	7023      	strb	r3, [r4, #0]
	  EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8002ef8:	4d27      	ldr	r5, [pc, #156]	; (8002f98 <main+0x118>)
 8002efa:	225b      	movs	r2, #91	; 0x5b
 8002efc:	0021      	movs	r1, r4
 8002efe:	0028      	movs	r0, r5
 8002f00:	f7ff f92c 	bl	800215c <EEPROM_WriteBytes>
	  EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8002f04:	225b      	movs	r2, #91	; 0x5b
 8002f06:	0021      	movs	r1, r4
 8002f08:	0028      	movs	r0, r5
 8002f0a:	f7ff f958 	bl	80021be <EEPROM_ReadBytes>
  FS_begin(&FS, (uint32_t*)FS_BASE_ADDR);
 8002f0e:	4c24      	ldr	r4, [pc, #144]	; (8002fa0 <main+0x120>)
 8002f10:	4924      	ldr	r1, [pc, #144]	; (8002fa4 <main+0x124>)
 8002f12:	0020      	movs	r0, r4
 8002f14:	f7ff f8cc 	bl	80020b0 <FS_begin>
  FSfile_typedef file = FS_open(&FS, "/a.txt");
 8002f18:	4a23      	ldr	r2, [pc, #140]	; (8002fa8 <main+0x128>)
 8002f1a:	0021      	movs	r1, r4
 8002f1c:	a801      	add	r0, sp, #4
 8002f1e:	f7ff f8d7 	bl	80020d0 <FS_open>
	Delay_ms(300); // wait for CH395 being ready from power on`	q1was
 8002f22:	4822      	ldr	r0, [pc, #136]	; (8002fac <main+0x12c>)
 8002f24:	f7ff f8ae 	bl	8002084 <Delay_us>
	CH395CMDReset();
 8002f28:	f7fe fe36 	bl	8001b98 <CH395CMDReset>
	Delay_ms(200);
 8002f2c:	4820      	ldr	r0, [pc, #128]	; (8002fb0 <main+0x130>)
 8002f2e:	f7ff f8a9 	bl	8002084 <Delay_us>
	flag_CH395_ready = FALSE;
 8002f32:	4d20      	ldr	r5, [pc, #128]	; (8002fb4 <main+0x134>)
 8002f34:	2400      	movs	r4, #0
 8002f36:	702c      	strb	r4, [r5, #0]
  flag_CH395_ready = CH395TCPServerStart(*(uint32_t*)IP, port);
 8002f38:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <main+0x138>)
 8002f3a:	8819      	ldrh	r1, [r3, #0]
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <main+0x13c>)
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	f7fe fde6 	bl	8001b10 <CH395TCPServerStart>
 8002f44:	7028      	strb	r0, [r5, #0]
  flag_PHY_change = FALSE;
 8002f46:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <main+0x140>)
 8002f48:	701c      	strb	r4, [r3, #0]
  flag_IP_conflict = FALSE;
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <main+0x144>)
 8002f4c:	701c      	strb	r4, [r3, #0]
	  if(flag_PHY_change || flag_IP_conflict) goto RESET_CH395;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <main+0x140>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <main+0xa2>
 8002f56:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <main+0x144>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1e1      	bne.n	8002f22 <main+0xa2>
	  if(flag_CH395_ready && ch395.RX_received)
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <main+0x134>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0f3      	beq.n	8002f4e <main+0xce>
 8002f66:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <main+0x148>)
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0ef      	beq.n	8002f4e <main+0xce>
		  HTTPHandle(&ch395);
 8002f6e:	4816      	ldr	r0, [pc, #88]	; (8002fc8 <main+0x148>)
 8002f70:	f7ff fe0c 	bl	8002b8c <HTTPHandle>
 8002f74:	e7eb      	b.n	8002f4e <main+0xce>
 8002f76:	46c0      	nop			; (mov r8, r8)
 8002f78:	20000950 	.word	0x20000950
 8002f7c:	0800392c 	.word	0x0800392c
 8002f80:	08003934 	.word	0x08003934
 8002f84:	0800393c 	.word	0x0800393c
 8002f88:	08003944 	.word	0x08003944
 8002f8c:	0800394c 	.word	0x0800394c
 8002f90:	08003954 	.word	0x08003954
 8002f94:	200008f4 	.word	0x200008f4
 8002f98:	2000040c 	.word	0x2000040c
 8002f9c:	200008f5 	.word	0x200008f5
 8002fa0:	200008e8 	.word	0x200008e8
 8002fa4:	08004400 	.word	0x08004400
 8002fa8:	0800395c 	.word	0x0800395c
 8002fac:	000493e0 	.word	0x000493e0
 8002fb0:	00030d40 	.word	0x00030d40
 8002fb4:	200008c0 	.word	0x200008c0
 8002fb8:	20000450 	.word	0x20000450
 8002fbc:	2000044c 	.word	0x2000044c
 8002fc0:	2000094f 	.word	0x2000094f
 8002fc4:	200008f0 	.word	0x200008f0
 8002fc8:	20000008 	.word	0x20000008

08002fcc <interrupt_CH395>:

/* USER CODE BEGIN 4 */

void interrupt_CH395()
{
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	46ce      	mov	lr, r9
 8002fd0:	4647      	mov	r7, r8
 8002fd2:	b580      	push	{r7, lr}
	uint8_t glob_int_status, sock_int_status, i;
	BEGIN_INT_CH395:
	// read global int status
	glob_int_status = CH395CMDGetGlobIntStatus();
 8002fd4:	f7fe fe12 	bl	8001bfc <CH395CMDGetGlobIntStatus>
//	}
//	if(glob_int_status & GINT_STAT_IP_CONFLI)
//	{
//		flag_IP_conflict = TRUE;
//	}
	if(glob_int_status & GINT_STAT_PHY_CHANGE)
 8002fd8:	0743      	lsls	r3, r0, #29
 8002fda:	d502      	bpl.n	8002fe2 <interrupt_CH395+0x16>
	{
		flag_PHY_change = TRUE;
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <interrupt_CH395+0x1c4>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
	}
	glob_int_status >>= 4; // get socket interrupt status
 8002fe2:	0900      	lsrs	r0, r0, #4
 8002fe4:	b2c5      	uxtb	r5, r0
	if(!glob_int_status) goto END_INT_CH395;
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	d100      	bne.n	8002fec <interrupt_CH395+0x20>
 8002fea:	e0cc      	b.n	8003186 <interrupt_CH395+0x1ba>
	// handle SOCKET interrupts
	for(i=1; i<=NUM_SOCKETS; ++i)
 8002fec:	2401      	movs	r4, #1
 8002fee:	e037      	b.n	8003060 <interrupt_CH395+0x94>
			{
				ch395.TX_available |= (1 << i);
				HTTPRequestParseState* pS = parseStates +i -1;
				if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
				{
					uint16_t len = pS->len_response_content_remain;
 8002ff0:	331b      	adds	r3, #27
 8002ff2:	33ff      	adds	r3, #255	; 0xff
 8002ff4:	5af3      	ldrh	r3, [r6, r3]
 8002ff6:	4698      	mov	r8, r3
					CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 8002ff8:	2390      	movs	r3, #144	; 0x90
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	58f1      	ldr	r1, [r6, r3]
 8002ffe:	4b65      	ldr	r3, [pc, #404]	; (8003194 <interrupt_CH395+0x1c8>)
 8003000:	4598      	cmp	r8, r3
 8003002:	d901      	bls.n	8003008 <interrupt_CH395+0x3c>
 8003004:	3301      	adds	r3, #1
 8003006:	4698      	mov	r8, r3
 8003008:	4642      	mov	r2, r8
 800300a:	0020      	movs	r0, r4
 800300c:	f7fe fe9a 	bl	8001d44 <CH395SendData>
					// sent
					pS->len_response_content_remain -= len;
 8003010:	228e      	movs	r2, #142	; 0x8e
 8003012:	0052      	lsls	r2, r2, #1
 8003014:	5ab3      	ldrh	r3, [r6, r2]
 8003016:	4641      	mov	r1, r8
 8003018:	1a5b      	subs	r3, r3, r1
 800301a:	b29b      	uxth	r3, r3
 800301c:	52b3      	strh	r3, [r6, r2]
					pS->response_content += len; // move the cursor
 800301e:	2190      	movs	r1, #144	; 0x90
 8003020:	0049      	lsls	r1, r1, #1
 8003022:	5872      	ldr	r2, [r6, r1]
 8003024:	4442      	add	r2, r8
 8003026:	5072      	str	r2, [r6, r1]
					if(pS->len_response_content_remain == 0)
 8003028:	2b00      	cmp	r3, #0
 800302a:	d070      	beq.n	800310e <interrupt_CH395+0x142>
				}
			}
//			if(sock_int_status & SINT_STAT_SEND_OK)
//			{
//			}
			if(sock_int_status & SINT_STAT_RECV)
 800302c:	077b      	lsls	r3, r7, #29
 800302e:	d476      	bmi.n	800311e <interrupt_CH395+0x152>
				{
					ch395.RX_received |= (1 << i);
				}
				CH395ClearRecvBuf(i);
			}
			if(sock_int_status & SINT_STAT_CONNECT)
 8003030:	073b      	lsls	r3, r7, #28
 8003032:	d506      	bpl.n	8003042 <interrupt_CH395+0x76>
			{
				ch395.socket_connected |= (1 << i);
 8003034:	4958      	ldr	r1, [pc, #352]	; (8003198 <interrupt_CH395+0x1cc>)
 8003036:	780b      	ldrb	r3, [r1, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	40a2      	lsls	r2, r4
 800303c:	4313      	orrs	r3, r2
 800303e:	b2db      	uxtb	r3, r3
 8003040:	700b      	strb	r3, [r1, #0]
			}
			if(sock_int_status & SINT_STAT_DISCONNECT)
 8003042:	06fb      	lsls	r3, r7, #27
 8003044:	d50a      	bpl.n	800305c <interrupt_CH395+0x90>
			{
				ch395.socket_connected &= ~(1<<i);
 8003046:	4a54      	ldr	r2, [pc, #336]	; (8003198 <interrupt_CH395+0x1cc>)
 8003048:	7811      	ldrb	r1, [r2, #0]
 800304a:	2301      	movs	r3, #1
 800304c:	40a3      	lsls	r3, r4
 800304e:	43db      	mvns	r3, r3
 8003050:	b25b      	sxtb	r3, r3
 8003052:	4019      	ands	r1, r3
 8003054:	7011      	strb	r1, [r2, #0]
				ch395.RX_received &= ~(1<<i);
 8003056:	7851      	ldrb	r1, [r2, #1]
 8003058:	400b      	ands	r3, r1
 800305a:	7053      	strb	r3, [r2, #1]
	for(i=1; i<=NUM_SOCKETS; ++i)
 800305c:	3401      	adds	r4, #1
 800305e:	b2e4      	uxtb	r4, r4
 8003060:	2c03      	cmp	r4, #3
 8003062:	d900      	bls.n	8003066 <interrupt_CH395+0x9a>
 8003064:	e08f      	b.n	8003186 <interrupt_CH395+0x1ba>
		glob_int_status >>= 1;
 8003066:	086d      	lsrs	r5, r5, #1
		if(glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 8003068:	07eb      	lsls	r3, r5, #31
 800306a:	d5f7      	bpl.n	800305c <interrupt_CH395+0x90>
			sock_int_status = CH395GetSocketInt(i);
 800306c:	0020      	movs	r0, r4
 800306e:	f7fe ff6d 	bl	8001f4c <CH395GetSocketInt>
 8003072:	0007      	movs	r7, r0
			if(sock_int_status & SINT_STAT_SENBUF_FREE) // Send buffer free
 8003074:	07c3      	lsls	r3, r0, #31
 8003076:	d5d9      	bpl.n	800302c <interrupt_CH395+0x60>
				ch395.TX_available |= (1 << i);
 8003078:	4947      	ldr	r1, [pc, #284]	; (8003198 <interrupt_CH395+0x1cc>)
 800307a:	788b      	ldrb	r3, [r1, #2]
 800307c:	2201      	movs	r2, #1
 800307e:	40a2      	lsls	r2, r4
 8003080:	4313      	orrs	r3, r2
 8003082:	b2db      	uxtb	r3, r3
 8003084:	708b      	strb	r3, [r1, #2]
				HTTPRequestParseState* pS = parseStates +i -1;
 8003086:	00e3      	lsls	r3, r4, #3
 8003088:	191b      	adds	r3, r3, r4
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	191b      	adds	r3, r3, r4
 800308e:	00de      	lsls	r6, r3, #3
 8003090:	3e29      	subs	r6, #41	; 0x29
 8003092:	3eff      	subs	r6, #255	; 0xff
 8003094:	4b41      	ldr	r3, [pc, #260]	; (800319c <interrupt_CH395+0x1d0>)
 8003096:	18f6      	adds	r6, r6, r3
				if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
 8003098:	2398      	movs	r3, #152	; 0x98
 800309a:	5cf3      	ldrb	r3, [r6, r3]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d0a7      	beq.n	8002ff0 <interrupt_CH395+0x24>
				else if(pS->response_stage == RESPONSE_PREPARED)
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d1c3      	bne.n	800302c <interrupt_CH395+0x60>
					uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 80030a4:	3399      	adds	r3, #153	; 0x99
 80030a6:	5af1      	ldrh	r1, [r6, r3]
 80030a8:	23af      	movs	r3, #175	; 0xaf
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	1a5b      	subs	r3, r3, r1
 80030ae:	b29b      	uxth	r3, r3
					uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 80030b0:	228e      	movs	r2, #142	; 0x8e
 80030b2:	0052      	lsls	r2, r2, #1
 80030b4:	5ab2      	ldrh	r2, [r6, r2]
 80030b6:	1c10      	adds	r0, r2, #0
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d900      	bls.n	80030be <interrupt_CH395+0xf2>
 80030bc:	1c18      	adds	r0, r3, #0
 80030be:	b283      	uxth	r3, r0
 80030c0:	4698      	mov	r8, r3
					CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 80030c2:	4441      	add	r1, r8
 80030c4:	b289      	uxth	r1, r1
 80030c6:	0020      	movs	r0, r4
 80030c8:	f7fe fe78 	bl	8001dbc <CH395StartSendingData>
					CH395ContinueSendingData(pS->response_header, pS->len_response_header);
 80030cc:	0030      	movs	r0, r6
 80030ce:	309c      	adds	r0, #156	; 0x9c
 80030d0:	239a      	movs	r3, #154	; 0x9a
 80030d2:	5af1      	ldrh	r1, [r6, r3]
 80030d4:	f7fe fe85 	bl	8001de2 <CH395ContinueSendingData>
					CH395ContinueSendingData(pS->response_content, len_content_this_time);
 80030d8:	2390      	movs	r3, #144	; 0x90
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4699      	mov	r9, r3
 80030de:	4641      	mov	r1, r8
 80030e0:	58f0      	ldr	r0, [r6, r3]
 80030e2:	f7fe fe7e 	bl	8001de2 <CH395ContinueSendingData>
					CH395Complete();
 80030e6:	f7fe fe8b 	bl	8001e00 <CH395Complete>
					pS->len_response_content_remain -= len_content_this_time;
 80030ea:	228e      	movs	r2, #142	; 0x8e
 80030ec:	0052      	lsls	r2, r2, #1
 80030ee:	5ab3      	ldrh	r3, [r6, r2]
 80030f0:	4641      	mov	r1, r8
 80030f2:	1a5b      	subs	r3, r3, r1
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	52b3      	strh	r3, [r6, r2]
					pS->response_content += len_content_this_time;
 80030f8:	464a      	mov	r2, r9
 80030fa:	58b2      	ldr	r2, [r6, r2]
 80030fc:	4442      	add	r2, r8
 80030fe:	4649      	mov	r1, r9
 8003100:	5072      	str	r2, [r6, r1]
					if(pS->len_response_content_remain == 0) // all content completely sent this time
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <interrupt_CH395+0x14a>
						pS->response_stage = RESPONSE_NOT_PREPARED;
 8003106:	3398      	adds	r3, #152	; 0x98
 8003108:	2200      	movs	r2, #0
 800310a:	54f2      	strb	r2, [r6, r3]
 800310c:	e78e      	b.n	800302c <interrupt_CH395+0x60>
						resetHTTPParseState(pS);
 800310e:	0030      	movs	r0, r6
 8003110:	f7ff f952 	bl	80023b8 <resetHTTPParseState>
 8003114:	e78a      	b.n	800302c <interrupt_CH395+0x60>
						pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8003116:	2398      	movs	r3, #152	; 0x98
 8003118:	2202      	movs	r2, #2
 800311a:	54f2      	strb	r2, [r6, r3]
 800311c:	e786      	b.n	800302c <interrupt_CH395+0x60>
				HTTPRequestParseState* pS = parseStates + i - 1;
 800311e:	00e3      	lsls	r3, r4, #3
 8003120:	191b      	adds	r3, r3, r4
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	191b      	adds	r3, r3, r4
 8003126:	00de      	lsls	r6, r3, #3
 8003128:	3e29      	subs	r6, #41	; 0x29
 800312a:	3eff      	subs	r6, #255	; 0xff
 800312c:	4b1b      	ldr	r3, [pc, #108]	; (800319c <interrupt_CH395+0x1d0>)
 800312e:	18f6      	adds	r6, r6, r3
				uint16_t len = CH395GetRecvLength(i);
 8003130:	0020      	movs	r0, r4
 8003132:	f7fe fe6f 	bl	8001e14 <CH395GetRecvLength>
 8003136:	4680      	mov	r8, r0
				CH395GetRecvData(i, (len < CH395_SIZE_BUFFER)?(len):(len = CH395_SIZE_BUFFER-1), ch395.buffer);
 8003138:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <interrupt_CH395+0x1d4>)
 800313a:	4298      	cmp	r0, r3
 800313c:	d900      	bls.n	8003140 <interrupt_CH395+0x174>
 800313e:	4698      	mov	r8, r3
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <interrupt_CH395+0x1d8>)
 8003142:	4699      	mov	r9, r3
 8003144:	001a      	movs	r2, r3
 8003146:	4641      	mov	r1, r8
 8003148:	0020      	movs	r0, r4
 800314a:	f7fe fe91 	bl	8001e70 <CH395GetRecvData>
				ch395.buffer[len] = 0; // terminate the recved text stream
 800314e:	464b      	mov	r3, r9
 8003150:	1ed8      	subs	r0, r3, #3
 8003152:	4440      	add	r0, r8
 8003154:	2300      	movs	r3, #0
 8003156:	70c3      	strb	r3, [r0, #3]
				resetHTTPParseState(pS);
 8003158:	0030      	movs	r0, r6
 800315a:	f7ff f92d 	bl	80023b8 <resetHTTPParseState>
				pS->sock_index = i;
 800315e:	2326      	movs	r3, #38	; 0x26
 8003160:	33ff      	adds	r3, #255	; 0xff
 8003162:	54f4      	strb	r4, [r6, r3]
				if(parse_http(pS, ch395.buffer))
 8003164:	4649      	mov	r1, r9
 8003166:	0030      	movs	r0, r6
 8003168:	f7ff f9be 	bl	80024e8 <parse_http>
 800316c:	2800      	cmp	r0, #0
 800316e:	d006      	beq.n	800317e <interrupt_CH395+0x1b2>
					ch395.RX_received |= (1 << i);
 8003170:	4909      	ldr	r1, [pc, #36]	; (8003198 <interrupt_CH395+0x1cc>)
 8003172:	784b      	ldrb	r3, [r1, #1]
 8003174:	2201      	movs	r2, #1
 8003176:	40a2      	lsls	r2, r4
 8003178:	4313      	orrs	r3, r2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	704b      	strb	r3, [r1, #1]
				CH395ClearRecvBuf(i);
 800317e:	0020      	movs	r0, r4
 8003180:	f7fe fe64 	bl	8001e4c <CH395ClearRecvBuf>
 8003184:	e754      	b.n	8003030 <interrupt_CH395+0x64>
		}
	}
	END_INT_CH395:
	return;
//	if(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET) goto BEGIN_INT_CH395;
}
 8003186:	bc0c      	pop	{r2, r3}
 8003188:	4690      	mov	r8, r2
 800318a:	4699      	mov	r9, r3
 800318c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	2000094f 	.word	0x2000094f
 8003194:	00000577 	.word	0x00000577
 8003198:	20000008 	.word	0x20000008
 800319c:	200004f8 	.word	0x200004f8
 80031a0:	000003ff 	.word	0x000003ff
 80031a4:	2000000b 	.word	0x2000000b

080031a8 <switch_Antenna>:

void switch_Antenna(uint8_t A, uint8_t B)
{
 80031a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031aa:	46ce      	mov	lr, r9
 80031ac:	4647      	mov	r7, r8
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b087      	sub	sp, #28
 80031b2:	0004      	movs	r4, r0
	uint8_t i;
	Selector[0].sel = A;
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <switch_Antenna+0x9c>)
 80031b6:	7618      	strb	r0, [r3, #24]
	Selector[1].sel = B;
 80031b8:	2234      	movs	r2, #52	; 0x34
 80031ba:	5499      	strb	r1, [r3, r2]
	if(A==B && A>0) return;
 80031bc:	4288      	cmp	r0, r1
 80031be:	d001      	beq.n	80031c4 <switch_Antenna+0x1c>
 80031c0:	2400      	movs	r4, #0
 80031c2:	e038      	b.n	8003236 <switch_Antenna+0x8e>
 80031c4:	2800      	cmp	r0, #0
 80031c6:	d036      	beq.n	8003236 <switch_Antenna+0x8e>
 80031c8:	e037      	b.n	800323a <switch_Antenna+0x92>
	for(i=0; i<N_SELECTORS; ++i)
	{
		PIN_typedef pin0 = Selector[i].PIN_BCD0;
 80031ca:	46e9      	mov	r9, sp
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <switch_Antenna+0x9c>)
 80031ce:	469c      	mov	ip, r3
 80031d0:	00e2      	lsls	r2, r4, #3
 80031d2:	1b15      	subs	r5, r2, r4
 80031d4:	00ab      	lsls	r3, r5, #2
 80031d6:	4463      	add	r3, ip
 80031d8:	464d      	mov	r5, r9
 80031da:	cbc0      	ldmia	r3!, {r6, r7}
 80031dc:	c5c0      	stmia	r5!, {r6, r7}
		PIN_typedef pin1 = Selector[i].PIN_BCD1;
 80031de:	1b16      	subs	r6, r2, r4
 80031e0:	00b3      	lsls	r3, r6, #2
 80031e2:	4463      	add	r3, ip
 80031e4:	0018      	movs	r0, r3
 80031e6:	001e      	movs	r6, r3
 80031e8:	3608      	adds	r6, #8
 80031ea:	002f      	movs	r7, r5
 80031ec:	ce0a      	ldmia	r6!, {r1, r3}
 80031ee:	c70a      	stmia	r7!, {r1, r3}
		PIN_typedef pin2 = Selector[i].PIN_BCD2;
 80031f0:	ae04      	add	r6, sp, #16
 80031f2:	0003      	movs	r3, r0
 80031f4:	3310      	adds	r3, #16
 80031f6:	0037      	movs	r7, r6
 80031f8:	cb03      	ldmia	r3!, {r0, r1}
 80031fa:	c703      	stmia	r7!, {r0, r1}
		uint8_t val = Selector[i].sel;
 80031fc:	1b12      	subs	r2, r2, r4
 80031fe:	0093      	lsls	r3, r2, #2
 8003200:	4463      	add	r3, ip
 8003202:	7e1f      	ldrb	r7, [r3, #24]
		HAL_GPIO_WritePin(pin0.group, pin0.pin, val & 1);
 8003204:	2301      	movs	r3, #1
 8003206:	4698      	mov	r8, r3
 8003208:	001a      	movs	r2, r3
 800320a:	403a      	ands	r2, r7
 800320c:	464b      	mov	r3, r9
 800320e:	8899      	ldrh	r1, [r3, #4]
 8003210:	9800      	ldr	r0, [sp, #0]
 8003212:	f7fd faae 	bl	8000772 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin1.group, pin1.pin, (val >> 1) & 1);
 8003216:	087a      	lsrs	r2, r7, #1
 8003218:	4643      	mov	r3, r8
 800321a:	401a      	ands	r2, r3
 800321c:	88a9      	ldrh	r1, [r5, #4]
 800321e:	9802      	ldr	r0, [sp, #8]
 8003220:	f7fd faa7 	bl	8000772 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin2.group, pin2.pin, (val >> 2) & 2);
 8003224:	08bf      	lsrs	r7, r7, #2
 8003226:	2202      	movs	r2, #2
 8003228:	403a      	ands	r2, r7
 800322a:	88b1      	ldrh	r1, [r6, #4]
 800322c:	9804      	ldr	r0, [sp, #16]
 800322e:	f7fd faa0 	bl	8000772 <HAL_GPIO_WritePin>
	for(i=0; i<N_SELECTORS; ++i)
 8003232:	3401      	adds	r4, #1
 8003234:	b2e4      	uxtb	r4, r4
 8003236:	2c01      	cmp	r4, #1
 8003238:	d9c7      	bls.n	80031ca <switch_Antenna+0x22>
	}
}
 800323a:	b007      	add	sp, #28
 800323c:	bc0c      	pop	{r2, r3}
 800323e:	4690      	mov	r8, r2
 8003240:	4699      	mov	r9, r3
 8003242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003244:	20000950 	.word	0x20000950

08003248 <get_Antenna>:

uint8_t get_Antenna() //0-3:SEL1 4-7:SEL2
{
 8003248:	b510      	push	{r4, lr}
	uint8_t d = CH395ReadGPIOAddr(GPIO_IN_REG); // read CH395 GPIO
 800324a:	2081      	movs	r0, #129	; 0x81
 800324c:	f7fe feb8 	bl	8001fc0 <CH395ReadGPIOAddr>
	uint8_t res = 0;
	res |= (d >> BCDM1_0) & 1;// bit 0: BCDM1_0
 8003250:	0882      	lsrs	r2, r0, #2
 8003252:	2301      	movs	r3, #1
 8003254:	4013      	ands	r3, r2
	res |= ((d >> BCDM1_1) & 1) << 1;// bit 1: BCDM1_1
 8003256:	0842      	lsrs	r2, r0, #1
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	0052      	lsls	r2, r2, #1
 800325c:	2102      	movs	r1, #2
 800325e:	400a      	ands	r2, r1
 8003260:	4313      	orrs	r3, r2
	res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
 8003262:	0081      	lsls	r1, r0, #2
 8003264:	2204      	movs	r2, #4
 8003266:	400a      	ands	r2, r1
 8003268:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
 800326a:	0902      	lsrs	r2, r0, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	2110      	movs	r1, #16
 8003272:	400a      	ands	r2, r1
 8003274:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
 8003276:	0982      	lsrs	r2, r0, #6
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	0152      	lsls	r2, r2, #5
 800327c:	3110      	adds	r1, #16
 800327e:	400a      	ands	r2, r1
 8003280:	4313      	orrs	r3, r2
	res |= ((d >> BCDM2_2) & 1) << 6;// bit 1: BCDM1_1
 8003282:	0940      	lsrs	r0, r0, #5
 8003284:	b2c0      	uxtb	r0, r0
 8003286:	0180      	lsls	r0, r0, #6
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	4010      	ands	r0, r2
 800328c:	4318      	orrs	r0, r3
	return res;
}
 800328e:	bd10      	pop	{r4, pc}

08003290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003290:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_MspInit+0x2c>)
 8003294:	6999      	ldr	r1, [r3, #24]
 8003296:	2201      	movs	r2, #1
 8003298:	4311      	orrs	r1, r2
 800329a:	6199      	str	r1, [r3, #24]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	400a      	ands	r2, r1
 80032a0:	9200      	str	r2, [sp, #0]
 80032a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	0549      	lsls	r1, r1, #21
 80032aa:	430a      	orrs	r2, r1
 80032ac:	61da      	str	r2, [r3, #28]
 80032ae:	69db      	ldr	r3, [r3, #28]
 80032b0:	400b      	ands	r3, r1
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032b6:	b002      	add	sp, #8
 80032b8:	4770      	bx	lr
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	40021000 	.word	0x40021000

080032c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c0:	b510      	push	{r4, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c6:	2214      	movs	r2, #20
 80032c8:	2100      	movs	r1, #0
 80032ca:	a803      	add	r0, sp, #12
 80032cc:	f000 f8ff 	bl	80034ce <memset>
  if(hspi->Instance==SPI1)
 80032d0:	6822      	ldr	r2, [r4, #0]
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_SPI_MspInit+0x60>)
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032d8:	b008      	add	sp, #32
 80032da:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_SPI_MspInit+0x64>)
 80032de:	6999      	ldr	r1, [r3, #24]
 80032e0:	2080      	movs	r0, #128	; 0x80
 80032e2:	0140      	lsls	r0, r0, #5
 80032e4:	4301      	orrs	r1, r0
 80032e6:	6199      	str	r1, [r3, #24]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	4002      	ands	r2, r0
 80032ec:	9201      	str	r2, [sp, #4]
 80032ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	2180      	movs	r1, #128	; 0x80
 80032f4:	0289      	lsls	r1, r1, #10
 80032f6:	430a      	orrs	r2, r1
 80032f8:	615a      	str	r2, [r3, #20]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	400b      	ands	r3, r1
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003302:	23e0      	movs	r3, #224	; 0xe0
 8003304:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003306:	3bde      	subs	r3, #222	; 0xde
 8003308:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800330a:	3b01      	subs	r3, #1
 800330c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800330e:	3302      	adds	r3, #2
 8003310:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	2090      	movs	r0, #144	; 0x90
 8003314:	a903      	add	r1, sp, #12
 8003316:	05c0      	lsls	r0, r0, #23
 8003318:	f7fd f95e 	bl	80005d8 <HAL_GPIO_Init>
}
 800331c:	e7dc      	b.n	80032d8 <HAL_SPI_MspInit+0x18>
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40013000 	.word	0x40013000
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003328:	b510      	push	{r4, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332e:	2214      	movs	r2, #20
 8003330:	2100      	movs	r1, #0
 8003332:	a803      	add	r0, sp, #12
 8003334:	f000 f8cb 	bl	80034ce <memset>
  if(huart->Instance==USART1)
 8003338:	6822      	ldr	r2, [r4, #0]
 800333a:	4b13      	ldr	r3, [pc, #76]	; (8003388 <HAL_UART_MspInit+0x60>)
 800333c:	429a      	cmp	r2, r3
 800333e:	d001      	beq.n	8003344 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003340:	b008      	add	sp, #32
 8003342:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003344:	4b11      	ldr	r3, [pc, #68]	; (800338c <HAL_UART_MspInit+0x64>)
 8003346:	6999      	ldr	r1, [r3, #24]
 8003348:	2080      	movs	r0, #128	; 0x80
 800334a:	01c0      	lsls	r0, r0, #7
 800334c:	4301      	orrs	r1, r0
 800334e:	6199      	str	r1, [r3, #24]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	4002      	ands	r2, r0
 8003354:	9201      	str	r2, [sp, #4]
 8003356:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	2180      	movs	r1, #128	; 0x80
 800335c:	0289      	lsls	r1, r1, #10
 800335e:	430a      	orrs	r2, r1
 8003360:	615a      	str	r2, [r3, #20]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	400b      	ands	r3, r1
 8003366:	9302      	str	r3, [sp, #8]
 8003368:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800336a:	230c      	movs	r3, #12
 800336c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	3b0a      	subs	r3, #10
 8003370:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003372:	3301      	adds	r3, #1
 8003374:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003376:	3b02      	subs	r3, #2
 8003378:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337a:	2090      	movs	r0, #144	; 0x90
 800337c:	a903      	add	r1, sp, #12
 800337e:	05c0      	lsls	r0, r0, #23
 8003380:	f7fd f92a 	bl	80005d8 <HAL_GPIO_Init>
}
 8003384:	e7dc      	b.n	8003340 <HAL_UART_MspInit+0x18>
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000

08003390 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003390:	4770      	bx	lr

08003392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003392:	e7fe      	b.n	8003392 <HardFault_Handler>

08003394 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003394:	4770      	bx	lr

08003396 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003396:	4770      	bx	lr

08003398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003398:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800339a:	f7fc ff75 	bl	8000288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800339e:	bd10      	pop	{r4, pc}

080033a0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80033a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 80033a2:	e001      	b.n	80033a8 <EXTI0_1_IRQHandler+0x8>
	{
		interrupt_CH395();
 80033a4:	f7ff fe12 	bl	8002fcc <interrupt_CH395>
	while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 80033a8:	2102      	movs	r1, #2
 80033aa:	4804      	ldr	r0, [pc, #16]	; (80033bc <EXTI0_1_IRQHandler+0x1c>)
 80033ac:	f7fd f9da 	bl	8000764 <HAL_GPIO_ReadPin>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d0f7      	beq.n	80033a4 <EXTI0_1_IRQHandler+0x4>
	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80033b4:	2002      	movs	r0, #2
 80033b6:	f7fd f9e3 	bl	8000780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80033ba:	bd10      	pop	{r4, pc}
 80033bc:	48000400 	.word	0x48000400

080033c0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <SystemInit+0x48>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	480f      	ldr	r0, [pc, #60]	; (800340c <SystemInit+0x4c>)
 80033ce:	4002      	ands	r2, r0
 80033d0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	480e      	ldr	r0, [pc, #56]	; (8003410 <SystemInit+0x50>)
 80033d6:	4002      	ands	r2, r0
 80033d8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	480d      	ldr	r0, [pc, #52]	; (8003414 <SystemInit+0x54>)
 80033de:	4002      	ands	r2, r0
 80033e0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	480c      	ldr	r0, [pc, #48]	; (8003418 <SystemInit+0x58>)
 80033e6:	4002      	ands	r2, r0
 80033e8:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80033ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ec:	200f      	movs	r0, #15
 80033ee:	4382      	bics	r2, r0
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80033f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f4:	4809      	ldr	r0, [pc, #36]	; (800341c <SystemInit+0x5c>)
 80033f6:	4002      	ands	r2, r0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80033fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fc:	438a      	bics	r2, r1
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]

}
 8003404:	4770      	bx	lr
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40021000 	.word	0x40021000
 800340c:	08ffb80c 	.word	0x08ffb80c
 8003410:	fef6ffff 	.word	0xfef6ffff
 8003414:	fffbffff 	.word	0xfffbffff
 8003418:	ffc0ffff 	.word	0xffc0ffff
 800341c:	fffffeec 	.word	0xfffffeec

08003420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003422:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003424:	480d      	ldr	r0, [pc, #52]	; (800345c <LoopForever+0x6>)
  ldr r1, =_edata
 8003426:	490e      	ldr	r1, [pc, #56]	; (8003460 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <LoopForever+0xe>)
  movs r3, #0
 800342a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800342c:	e002      	b.n	8003434 <LoopCopyDataInit>

0800342e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003432:	3304      	adds	r3, #4

08003434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003438:	d3f9      	bcc.n	800342e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800343a:	4a0b      	ldr	r2, [pc, #44]	; (8003468 <LoopForever+0x12>)
  ldr r4, =_ebss
 800343c:	4c0b      	ldr	r4, [pc, #44]	; (800346c <LoopForever+0x16>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003440:	e001      	b.n	8003446 <LoopFillZerobss>

08003442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003444:	3204      	adds	r2, #4

08003446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003448:	d3fb      	bcc.n	8003442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800344a:	f7ff ffb9 	bl	80033c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800344e:	f000 f811 	bl	8003474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003452:	f7ff fd15 	bl	8002e80 <main>

08003456 <LoopForever>:

LoopForever:
    b LoopForever
 8003456:	e7fe      	b.n	8003456 <LoopForever>
  ldr   r0, =_estack
 8003458:	20000fff 	.word	0x20000fff
  ldr r0, =_sdata
 800345c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003460:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8003464:	08003984 	.word	0x08003984
  ldr r2, =_sbss
 8003468:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 800346c:	20000a5c 	.word	0x20000a5c

08003470 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003470:	e7fe      	b.n	8003470 <ADC1_IRQHandler>
	...

08003474 <__libc_init_array>:
 8003474:	b570      	push	{r4, r5, r6, lr}
 8003476:	2600      	movs	r6, #0
 8003478:	4d0c      	ldr	r5, [pc, #48]	; (80034ac <__libc_init_array+0x38>)
 800347a:	4c0d      	ldr	r4, [pc, #52]	; (80034b0 <__libc_init_array+0x3c>)
 800347c:	1b64      	subs	r4, r4, r5
 800347e:	10a4      	asrs	r4, r4, #2
 8003480:	42a6      	cmp	r6, r4
 8003482:	d109      	bne.n	8003498 <__libc_init_array+0x24>
 8003484:	2600      	movs	r6, #0
 8003486:	f000 f933 	bl	80036f0 <_init>
 800348a:	4d0a      	ldr	r5, [pc, #40]	; (80034b4 <__libc_init_array+0x40>)
 800348c:	4c0a      	ldr	r4, [pc, #40]	; (80034b8 <__libc_init_array+0x44>)
 800348e:	1b64      	subs	r4, r4, r5
 8003490:	10a4      	asrs	r4, r4, #2
 8003492:	42a6      	cmp	r6, r4
 8003494:	d105      	bne.n	80034a2 <__libc_init_array+0x2e>
 8003496:	bd70      	pop	{r4, r5, r6, pc}
 8003498:	00b3      	lsls	r3, r6, #2
 800349a:	58eb      	ldr	r3, [r5, r3]
 800349c:	4798      	blx	r3
 800349e:	3601      	adds	r6, #1
 80034a0:	e7ee      	b.n	8003480 <__libc_init_array+0xc>
 80034a2:	00b3      	lsls	r3, r6, #2
 80034a4:	58eb      	ldr	r3, [r5, r3]
 80034a6:	4798      	blx	r3
 80034a8:	3601      	adds	r6, #1
 80034aa:	e7f2      	b.n	8003492 <__libc_init_array+0x1e>
 80034ac:	0800397c 	.word	0x0800397c
 80034b0:	0800397c 	.word	0x0800397c
 80034b4:	0800397c 	.word	0x0800397c
 80034b8:	08003980 	.word	0x08003980

080034bc <memcpy>:
 80034bc:	2300      	movs	r3, #0
 80034be:	b510      	push	{r4, lr}
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d100      	bne.n	80034c6 <memcpy+0xa>
 80034c4:	bd10      	pop	{r4, pc}
 80034c6:	5ccc      	ldrb	r4, [r1, r3]
 80034c8:	54c4      	strb	r4, [r0, r3]
 80034ca:	3301      	adds	r3, #1
 80034cc:	e7f8      	b.n	80034c0 <memcpy+0x4>

080034ce <memset>:
 80034ce:	0003      	movs	r3, r0
 80034d0:	1812      	adds	r2, r2, r0
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d100      	bne.n	80034d8 <memset+0xa>
 80034d6:	4770      	bx	lr
 80034d8:	7019      	strb	r1, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	e7f9      	b.n	80034d2 <memset+0x4>

080034de <strcat>:
 80034de:	0002      	movs	r2, r0
 80034e0:	b510      	push	{r4, lr}
 80034e2:	7813      	ldrb	r3, [r2, #0]
 80034e4:	1c54      	adds	r4, r2, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d105      	bne.n	80034f6 <strcat+0x18>
 80034ea:	5ccc      	ldrb	r4, [r1, r3]
 80034ec:	54d4      	strb	r4, [r2, r3]
 80034ee:	3301      	adds	r3, #1
 80034f0:	2c00      	cmp	r4, #0
 80034f2:	d1fa      	bne.n	80034ea <strcat+0xc>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	0022      	movs	r2, r4
 80034f8:	e7f3      	b.n	80034e2 <strcat+0x4>

080034fa <strchr>:
 80034fa:	b2c9      	uxtb	r1, r1
 80034fc:	7803      	ldrb	r3, [r0, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d004      	beq.n	800350c <strchr+0x12>
 8003502:	428b      	cmp	r3, r1
 8003504:	d100      	bne.n	8003508 <strchr+0xe>
 8003506:	4770      	bx	lr
 8003508:	3001      	adds	r0, #1
 800350a:	e7f7      	b.n	80034fc <strchr+0x2>
 800350c:	424b      	negs	r3, r1
 800350e:	4159      	adcs	r1, r3
 8003510:	4249      	negs	r1, r1
 8003512:	4008      	ands	r0, r1
 8003514:	e7f7      	b.n	8003506 <strchr+0xc>

08003516 <strcpy>:
 8003516:	0003      	movs	r3, r0
 8003518:	780a      	ldrb	r2, [r1, #0]
 800351a:	3101      	adds	r1, #1
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	2a00      	cmp	r2, #0
 8003522:	d1f9      	bne.n	8003518 <strcpy+0x2>
 8003524:	4770      	bx	lr

08003526 <strncat>:
 8003526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003528:	0004      	movs	r4, r0
 800352a:	7823      	ldrb	r3, [r4, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d108      	bne.n	8003542 <strncat+0x1c>
 8003530:	001f      	movs	r7, r3
 8003532:	1e56      	subs	r6, r2, #1
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <strncat+0x1a>
 8003538:	5ccd      	ldrb	r5, [r1, r3]
 800353a:	54e5      	strb	r5, [r4, r3]
 800353c:	2d00      	cmp	r5, #0
 800353e:	d102      	bne.n	8003546 <strncat+0x20>
 8003540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003542:	3401      	adds	r4, #1
 8003544:	e7f1      	b.n	800352a <strncat+0x4>
 8003546:	429e      	cmp	r6, r3
 8003548:	d101      	bne.n	800354e <strncat+0x28>
 800354a:	19a5      	adds	r5, r4, r6
 800354c:	706f      	strb	r7, [r5, #1]
 800354e:	3301      	adds	r3, #1
 8003550:	e7f0      	b.n	8003534 <strncat+0xe>

08003552 <strncmp>:
 8003552:	2300      	movs	r3, #0
 8003554:	b530      	push	{r4, r5, lr}
 8003556:	429a      	cmp	r2, r3
 8003558:	d00a      	beq.n	8003570 <strncmp+0x1e>
 800355a:	3a01      	subs	r2, #1
 800355c:	5cc4      	ldrb	r4, [r0, r3]
 800355e:	5ccd      	ldrb	r5, [r1, r3]
 8003560:	42ac      	cmp	r4, r5
 8003562:	d104      	bne.n	800356e <strncmp+0x1c>
 8003564:	4293      	cmp	r3, r2
 8003566:	d002      	beq.n	800356e <strncmp+0x1c>
 8003568:	3301      	adds	r3, #1
 800356a:	2c00      	cmp	r4, #0
 800356c:	d1f6      	bne.n	800355c <strncmp+0xa>
 800356e:	1b63      	subs	r3, r4, r5
 8003570:	0018      	movs	r0, r3
 8003572:	bd30      	pop	{r4, r5, pc}

08003574 <strncpy>:
 8003574:	b530      	push	{r4, r5, lr}
 8003576:	0005      	movs	r5, r0
 8003578:	2a00      	cmp	r2, #0
 800357a:	d100      	bne.n	800357e <strncpy+0xa>
 800357c:	bd30      	pop	{r4, r5, pc}
 800357e:	780c      	ldrb	r4, [r1, #0]
 8003580:	3a01      	subs	r2, #1
 8003582:	1c6b      	adds	r3, r5, #1
 8003584:	702c      	strb	r4, [r5, #0]
 8003586:	3101      	adds	r1, #1
 8003588:	2c00      	cmp	r4, #0
 800358a:	d105      	bne.n	8003598 <strncpy+0x24>
 800358c:	189a      	adds	r2, r3, r2
 800358e:	429a      	cmp	r2, r3
 8003590:	d0f4      	beq.n	800357c <strncpy+0x8>
 8003592:	701c      	strb	r4, [r3, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	e7fa      	b.n	800358e <strncpy+0x1a>
 8003598:	001d      	movs	r5, r3
 800359a:	e7ed      	b.n	8003578 <strncpy+0x4>

0800359c <strnstr>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	000e      	movs	r6, r1
 80035a0:	0005      	movs	r5, r0
 80035a2:	0011      	movs	r1, r2
 80035a4:	0030      	movs	r0, r6
 80035a6:	0014      	movs	r4, r2
 80035a8:	f000 f887 	bl	80036ba <strnlen>
 80035ac:	0003      	movs	r3, r0
 80035ae:	4284      	cmp	r4, r0
 80035b0:	d802      	bhi.n	80035b8 <strnstr+0x1c>
 80035b2:	5c32      	ldrb	r2, [r6, r0]
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	d10d      	bne.n	80035d4 <strnstr+0x38>
 80035b8:	0021      	movs	r1, r4
 80035ba:	0032      	movs	r2, r6
 80035bc:	0028      	movs	r0, r5
 80035be:	f000 f862 	bl	8003686 <memmem>
 80035c2:	1e04      	subs	r4, r0, #0
 80035c4:	d006      	beq.n	80035d4 <strnstr+0x38>
 80035c6:	1b42      	subs	r2, r0, r5
 80035c8:	2100      	movs	r1, #0
 80035ca:	0028      	movs	r0, r5
 80035cc:	f000 f850 	bl	8003670 <memchr>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	d000      	beq.n	80035d6 <strnstr+0x3a>
 80035d4:	2400      	movs	r4, #0
 80035d6:	0020      	movs	r0, r4
 80035d8:	bd70      	pop	{r4, r5, r6, pc}

080035da <strstr>:
 80035da:	b510      	push	{r4, lr}
 80035dc:	7803      	ldrb	r3, [r0, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <strstr+0x28>
 80035e2:	780b      	ldrb	r3, [r1, #0]
 80035e4:	425a      	negs	r2, r3
 80035e6:	4153      	adcs	r3, r2
 80035e8:	425b      	negs	r3, r3
 80035ea:	4018      	ands	r0, r3
 80035ec:	bd10      	pop	{r4, pc}
 80035ee:	2300      	movs	r3, #0
 80035f0:	5cca      	ldrb	r2, [r1, r3]
 80035f2:	2a00      	cmp	r2, #0
 80035f4:	d0fa      	beq.n	80035ec <strstr+0x12>
 80035f6:	5cc4      	ldrb	r4, [r0, r3]
 80035f8:	4294      	cmp	r4, r2
 80035fa:	d101      	bne.n	8003600 <strstr+0x26>
 80035fc:	3301      	adds	r3, #1
 80035fe:	e7f7      	b.n	80035f0 <strstr+0x16>
 8003600:	3001      	adds	r0, #1
 8003602:	7803      	ldrb	r3, [r0, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f2      	bne.n	80035ee <strstr+0x14>
 8003608:	0018      	movs	r0, r3
 800360a:	e7ef      	b.n	80035ec <strstr+0x12>

0800360c <__strtok_r>:
 800360c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360e:	2800      	cmp	r0, #0
 8003610:	d104      	bne.n	800361c <__strtok_r+0x10>
 8003612:	6810      	ldr	r0, [r2, #0]
 8003614:	2800      	cmp	r0, #0
 8003616:	d101      	bne.n	800361c <__strtok_r+0x10>
 8003618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361a:	0020      	movs	r0, r4
 800361c:	000e      	movs	r6, r1
 800361e:	7805      	ldrb	r5, [r0, #0]
 8003620:	1c44      	adds	r4, r0, #1
 8003622:	7837      	ldrb	r7, [r6, #0]
 8003624:	2f00      	cmp	r7, #0
 8003626:	d104      	bne.n	8003632 <__strtok_r+0x26>
 8003628:	2d00      	cmp	r5, #0
 800362a:	d110      	bne.n	800364e <__strtok_r+0x42>
 800362c:	6015      	str	r5, [r2, #0]
 800362e:	0028      	movs	r0, r5
 8003630:	e7f2      	b.n	8003618 <__strtok_r+0xc>
 8003632:	3601      	adds	r6, #1
 8003634:	42bd      	cmp	r5, r7
 8003636:	d1f4      	bne.n	8003622 <__strtok_r+0x16>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <__strtok_r+0xe>
 800363c:	6014      	str	r4, [r2, #0]
 800363e:	7003      	strb	r3, [r0, #0]
 8003640:	e7ea      	b.n	8003618 <__strtok_r+0xc>
 8003642:	0033      	movs	r3, r6
 8003644:	e00d      	b.n	8003662 <__strtok_r+0x56>
 8003646:	3501      	adds	r5, #1
 8003648:	2f00      	cmp	r7, #0
 800364a:	d103      	bne.n	8003654 <__strtok_r+0x48>
 800364c:	001c      	movs	r4, r3
 800364e:	000d      	movs	r5, r1
 8003650:	7826      	ldrb	r6, [r4, #0]
 8003652:	1c63      	adds	r3, r4, #1
 8003654:	782f      	ldrb	r7, [r5, #0]
 8003656:	42be      	cmp	r6, r7
 8003658:	d1f5      	bne.n	8003646 <__strtok_r+0x3a>
 800365a:	2e00      	cmp	r6, #0
 800365c:	d0f1      	beq.n	8003642 <__strtok_r+0x36>
 800365e:	2100      	movs	r1, #0
 8003660:	7021      	strb	r1, [r4, #0]
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e7d8      	b.n	8003618 <__strtok_r+0xc>

08003666 <strtok_r>:
 8003666:	b510      	push	{r4, lr}
 8003668:	2301      	movs	r3, #1
 800366a:	f7ff ffcf 	bl	800360c <__strtok_r>
 800366e:	bd10      	pop	{r4, pc}

08003670 <memchr>:
 8003670:	b2c9      	uxtb	r1, r1
 8003672:	1882      	adds	r2, r0, r2
 8003674:	4290      	cmp	r0, r2
 8003676:	d101      	bne.n	800367c <memchr+0xc>
 8003678:	2000      	movs	r0, #0
 800367a:	4770      	bx	lr
 800367c:	7803      	ldrb	r3, [r0, #0]
 800367e:	428b      	cmp	r3, r1
 8003680:	d0fb      	beq.n	800367a <memchr+0xa>
 8003682:	3001      	adds	r0, #1
 8003684:	e7f6      	b.n	8003674 <memchr+0x4>

08003686 <memmem>:
 8003686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003688:	0007      	movs	r7, r0
 800368a:	9100      	str	r1, [sp, #0]
 800368c:	9201      	str	r2, [sp, #4]
 800368e:	001e      	movs	r6, r3
 8003690:	0004      	movs	r4, r0
 8003692:	000d      	movs	r5, r1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d109      	bne.n	80036ac <memmem+0x26>
 8003698:	0020      	movs	r0, r4
 800369a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800369c:	0032      	movs	r2, r6
 800369e:	9901      	ldr	r1, [sp, #4]
 80036a0:	0020      	movs	r0, r4
 80036a2:	f000 f815 	bl	80036d0 <memcmp>
 80036a6:	2800      	cmp	r0, #0
 80036a8:	d0f6      	beq.n	8003698 <memmem+0x12>
 80036aa:	3d01      	subs	r5, #1
 80036ac:	9b00      	ldr	r3, [sp, #0]
 80036ae:	18fc      	adds	r4, r7, r3
 80036b0:	1b64      	subs	r4, r4, r5
 80036b2:	42b5      	cmp	r5, r6
 80036b4:	d2f2      	bcs.n	800369c <memmem+0x16>
 80036b6:	2400      	movs	r4, #0
 80036b8:	e7ee      	b.n	8003698 <memmem+0x12>

080036ba <strnlen>:
 80036ba:	0003      	movs	r3, r0
 80036bc:	1841      	adds	r1, r0, r1
 80036be:	428b      	cmp	r3, r1
 80036c0:	d002      	beq.n	80036c8 <strnlen+0xe>
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	2a00      	cmp	r2, #0
 80036c6:	d101      	bne.n	80036cc <strnlen+0x12>
 80036c8:	1a18      	subs	r0, r3, r0
 80036ca:	4770      	bx	lr
 80036cc:	3301      	adds	r3, #1
 80036ce:	e7f6      	b.n	80036be <strnlen+0x4>

080036d0 <memcmp>:
 80036d0:	b530      	push	{r4, r5, lr}
 80036d2:	2400      	movs	r4, #0
 80036d4:	42a2      	cmp	r2, r4
 80036d6:	d101      	bne.n	80036dc <memcmp+0xc>
 80036d8:	2000      	movs	r0, #0
 80036da:	e005      	b.n	80036e8 <memcmp+0x18>
 80036dc:	5d03      	ldrb	r3, [r0, r4]
 80036de:	1c65      	adds	r5, r4, #1
 80036e0:	5d0c      	ldrb	r4, [r1, r4]
 80036e2:	42a3      	cmp	r3, r4
 80036e4:	d001      	beq.n	80036ea <memcmp+0x1a>
 80036e6:	1b18      	subs	r0, r3, r4
 80036e8:	bd30      	pop	{r4, r5, pc}
 80036ea:	002c      	movs	r4, r5
 80036ec:	e7f2      	b.n	80036d4 <memcmp+0x4>
	...

080036f0 <_init>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr

080036fc <_fini>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr
