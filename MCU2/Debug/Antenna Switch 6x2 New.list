
Antenna Switch 6x2 New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af34  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800aff4  0800aff4  0001aff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b56c  0800b56c  000206a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b56c  0800b56c  000206a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b56c  0800b56c  000206a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b570  0800b570  0001b570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a4  20000000  0800b574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001504  200006a8  0800bc18  000206a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  20001bac  0800bc18  00021bac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a6d  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e3a  00000000  00000000  00046139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0004af73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001430  00000000  00000000  0004c50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00014d24  00000000  00000000  0004d93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000061fb  00000000  00000000  0006265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006885a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004edc  00000000  00000000  000688b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006a8 	.word	0x200006a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800afdc 	.word	0x0800afdc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006ac 	.word	0x200006ac
 8000104:	0800afdc 	.word	0x0800afdc

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__clzsi2>:
 8000244:	211c      	movs	r1, #28
 8000246:	2301      	movs	r3, #1
 8000248:	041b      	lsls	r3, r3, #16
 800024a:	4298      	cmp	r0, r3
 800024c:	d301      	bcc.n	8000252 <__clzsi2+0xe>
 800024e:	0c00      	lsrs	r0, r0, #16
 8000250:	3910      	subs	r1, #16
 8000252:	0a1b      	lsrs	r3, r3, #8
 8000254:	4298      	cmp	r0, r3
 8000256:	d301      	bcc.n	800025c <__clzsi2+0x18>
 8000258:	0a00      	lsrs	r0, r0, #8
 800025a:	3908      	subs	r1, #8
 800025c:	091b      	lsrs	r3, r3, #4
 800025e:	4298      	cmp	r0, r3
 8000260:	d301      	bcc.n	8000266 <__clzsi2+0x22>
 8000262:	0900      	lsrs	r0, r0, #4
 8000264:	3904      	subs	r1, #4
 8000266:	a202      	add	r2, pc, #8	; (adr r2, 8000270 <__clzsi2+0x2c>)
 8000268:	5c10      	ldrb	r0, [r2, r0]
 800026a:	1840      	adds	r0, r0, r1
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	02020304 	.word	0x02020304
 8000274:	01010101 	.word	0x01010101
	...

08000280 <load_config>:
// flash wear levelling handle
#ifdef ESP32
static wl_handle_t wlHandle = WL_INVALID_HANDLE;
#endif
void load_config(Config* p_cfg)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    if(mtxConfig == NULL) mtxConfig = xSemaphoreCreateMutex();
    #endif

    #if defined(USE_STM32_FLASH_EEPROM)
    EEPROM_ReadBytes(&EEPROM, (uint8_t*)p_cfg, sizeof(Config));
 8000288:	6879      	ldr	r1, [r7, #4]
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <load_config+0x1c>)
 800028c:	2270      	movs	r2, #112	; 0x70
 800028e:	0018      	movs	r0, r3
 8000290:	f000 f910 	bl	80004b4 <EEPROM_ReadBytes>
        ESP_LOGD(tag, "cfg.validstring = %s", p_cfg->body.sValid);
    }
    esp_vfs_fat_spiflash_unmount(FS_BASE_PATH_CONFIG, wlHandle);    
    ESP_LOGD(tag, "FS unmounted");
    #endif
}
 8000294:	46c0      	nop			; (mov r8, r8)
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}
 800029c:	20000000 	.word	0x20000000

080002a0 <save_config>:


void save_config(Config* p_cfg)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreTake(mtxConfig, portMAX_DELAY);
    #endif

    #if defined(USE_STM32_FLASH_EEPROM)
    EEPROM_WriteBytes(&EEPROM, (uint8_t*)p_cfg, sizeof(Config));
 80002a8:	6879      	ldr	r1, [r7, #4]
 80002aa:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <save_config+0x24>)
 80002ac:	2270      	movs	r2, #112	; 0x70
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 f84a 	bl	8000348 <EEPROM_WriteBytes>
    }
    esp_vfs_fat_spiflash_unmount(FS_BASE_PATH_CONFIG, wlHandle);    
    ESP_LOGD(tag, "FS unmounted");
    #endif

    isModified=false;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <save_config+0x28>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]

SAVE_CONFIG_FAILED:
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreGive(mtxConfig);
    #endif
    return;
 80002ba:	46c0      	nop			; (mov r8, r8)
}
 80002bc:	46bd      	mov	sp, r7
 80002be:	b002      	add	sp, #8
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	20000000 	.word	0x20000000
 80002c8:	200006c4 	.word	0x200006c4

080002cc <config_check_valid>:


bool config_check_valid(Config* p)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
    uint8_t check = strncmp(p->sValid, VALID_STRING, sizeof(p->sValid));
 80002d4:	6878      	ldr	r0, [r7, #4]
 80002d6:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <config_check_valid+0x78>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2208      	movs	r2, #8
 80002dc:	0019      	movs	r1, r3
 80002de:	f00a fdbf 	bl	800ae60 <strncmp>
 80002e2:	0002      	movs	r2, r0
 80002e4:	230f      	movs	r3, #15
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	701a      	strb	r2, [r3, #0]
    bool check2 = (p->portHTTP > 0) && (p->portTCP > 0) && (p->portUDP > 0);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	226a      	movs	r2, #106	; 0x6a
 80002ee:	5a9b      	ldrh	r3, [r3, r2]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d00b      	beq.n	800030c <config_check_valid+0x40>
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	226c      	movs	r2, #108	; 0x6c
 80002f8:	5a9b      	ldrh	r3, [r3, r2]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d006      	beq.n	800030c <config_check_valid+0x40>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	226e      	movs	r2, #110	; 0x6e
 8000302:	5a9b      	ldrh	r3, [r3, r2]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <config_check_valid+0x40>
 8000308:	2201      	movs	r2, #1
 800030a:	e000      	b.n	800030e <config_check_valid+0x42>
 800030c:	2200      	movs	r2, #0
 800030e:	200e      	movs	r0, #14
 8000310:	183b      	adds	r3, r7, r0
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	781a      	ldrb	r2, [r3, #0]
 8000316:	2101      	movs	r1, #1
 8000318:	400a      	ands	r2, r1
 800031a:	701a      	strb	r2, [r3, #0]
    return (check == 0) && check2;
 800031c:	230f      	movs	r3, #15
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d105      	bne.n	8000332 <config_check_valid+0x66>
 8000326:	183b      	adds	r3, r7, r0
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <config_check_valid+0x66>
 800032e:	2301      	movs	r3, #1
 8000330:	e000      	b.n	8000334 <config_check_valid+0x68>
 8000332:	2300      	movs	r3, #0
 8000334:	1c1a      	adds	r2, r3, #0
 8000336:	2301      	movs	r3, #1
 8000338:	4013      	ands	r3, r2
 800033a:	b2db      	uxtb	r3, r3

}
 800033c:	0018      	movs	r0, r3
 800033e:	46bd      	mov	sp, r7
 8000340:	b004      	add	sp, #16
 8000342:	bd80      	pop	{r7, pc}
 8000344:	20000634 	.word	0x20000634

08000348 <EEPROM_WriteBytes>:
} Quadbyte;


// Notice: 4-byte alignment
void EEPROM_WriteBytes(EEPROM_typedef *pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 8000348:	b5b0      	push	{r4, r5, r7, lr}
 800034a:	b090      	sub	sp, #64	; 0x40
 800034c:	af00      	add	r7, sp, #0
 800034e:	60f8      	str	r0, [r7, #12]
 8000350:	60b9      	str	r1, [r7, #8]
 8000352:	1dbb      	adds	r3, r7, #6
 8000354:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint32_t* addr = (uint32_t*)pEEPROM->base_addr;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* addrPageEnd =(addr + (PAGE_SIZE >> 2));
 800035c:	2380      	movs	r3, #128	; 0x80
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	089b      	lsrs	r3, r3, #2
 8000362:	b29b      	uxth	r3, r3
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000368:	18d3      	adds	r3, r2, r3
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
	Quadbyte quadbyte;

	uint32_t* addrOldContentBegin = addr;
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t* addrOldContentEnd;
	uint32_t* addrNewContentBegin = addr;
 8000370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000372:	633b      	str	r3, [r7, #48]	; 0x30
#if ENABLE_WEAR_LEVELING
	/* detect range of old content, non-zero non-0xff range */
	// find the head
	while((addrOldContentBegin < addrPageEnd) && (*addrOldContentBegin == 0x00000000U))
 8000374:	e002      	b.n	800037c <EEPROM_WriteBytes+0x34>
		addrOldContentBegin++;
 8000376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000378:	3304      	adds	r3, #4
 800037a:	63bb      	str	r3, [r7, #56]	; 0x38
	while((addrOldContentBegin < addrPageEnd) && (*addrOldContentBegin == 0x00000000U))
 800037c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800037e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000380:	429a      	cmp	r2, r3
 8000382:	d203      	bcs.n	800038c <EEPROM_WriteBytes+0x44>
 8000384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0f4      	beq.n	8000376 <EEPROM_WriteBytes+0x2e>
	// find the tail
	addrOldContentEnd = addrOldContentBegin;
 800038c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
	while((addrOldContentEnd < addrPageEnd) && (*addrOldContentEnd != 0xFFFFFFFFU))
 8000390:	e002      	b.n	8000398 <EEPROM_WriteBytes+0x50>
		addrOldContentEnd++;
 8000392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000394:	3304      	adds	r3, #4
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
	while((addrOldContentEnd < addrPageEnd) && (*addrOldContentEnd != 0xFFFFFFFFU))
 8000398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800039a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800039c:	429a      	cmp	r2, r3
 800039e:	d203      	bcs.n	80003a8 <EEPROM_WriteBytes+0x60>
 80003a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	3301      	adds	r3, #1
 80003a6:	d1f4      	bne.n	8000392 <EEPROM_WriteBytes+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	46c0      	nop			; (mov r8, r8)


#endif
    __disable_irq();
    HAL_FLASH_Unlock();
 80003ac:	f000 ff1a 	bl	80011e4 <HAL_FLASH_Unlock>

#if defined(STM32F4)
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
		FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
#endif
	uint32_t PageError = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_SECTORS,
			.Sector = addr_to_sector(addr),
			.NbSectors=1,
			.VoltageRange=FLASH_VOLTAGE_RANGE_3};
#else
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=(uint32_t)addr, .NbPages=1};
 80003b4:	2110      	movs	r1, #16
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2201      	movs	r2, #1
 80003c6:	609a      	str	r2, [r3, #8]


#if ENABLE_WEAR_LEVELING
	// if the remaining length cannot fit the new content, erase the full page
	// add 4bytes to leave room for header
	if(addrOldContentEnd + (Length >> 2) + 1 > addrPageEnd)
 80003c8:	1dbb      	adds	r3, r7, #6
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	089b      	lsrs	r3, r3, #2
 80003ce:	b29b      	uxth	r3, r3
 80003d0:	3301      	adds	r3, #1
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80003d6:	18d3      	adds	r3, r2, r3
 80003d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003da:	429a      	cmp	r2, r3
 80003dc:	d209      	bcs.n	80003f2 <EEPROM_WriteBytes+0xaa>
	{
		HAL_FLASHEx_Erase(&fe, &PageError);
 80003de:	231c      	movs	r3, #28
 80003e0:	18fa      	adds	r2, r7, r3
 80003e2:	187b      	adds	r3, r7, r1
 80003e4:	0011      	movs	r1, r2
 80003e6:	0018      	movs	r0, r3
 80003e8:	f000 ffbc 	bl	8001364 <HAL_FLASHEx_Erase>
		addrNewContentBegin = addr;
 80003ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003ee:	633b      	str	r3, [r7, #48]	; 0x30
 80003f0:	e011      	b.n	8000416 <EEPROM_WriteBytes+0xce>
	}
	/* SET EXISTING DATA TO ALL 0 TO MARK INVALID */
	else
	{
		for(uint32_t* addrToErase = addrOldContentBegin; addrToErase < addrOldContentEnd; addrToErase++)
 80003f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003f6:	e008      	b.n	800040a <EEPROM_WriteBytes+0xc2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrToErase, 0x00000000U);
 80003f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80003fa:	2200      	movs	r2, #0
 80003fc:	2300      	movs	r3, #0
 80003fe:	2002      	movs	r0, #2
 8000400:	f000 fe5a 	bl	80010b8 <HAL_FLASH_Program>
		for(uint32_t* addrToErase = addrOldContentBegin; addrToErase < addrOldContentEnd; addrToErase++)
 8000404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000406:	3304      	adds	r3, #4
 8000408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800040a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800040e:	429a      	cmp	r2, r3
 8000410:	d3f2      	bcc.n	80003f8 <EEPROM_WriteBytes+0xb0>
		addrNewContentBegin = addrOldContentEnd;
 8000412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000414:	633b      	str	r3, [r7, #48]	; 0x30
	/* If Wear Leveling is disabled, erase the full page each time before writing*/
	HAL_FLASHEx_Erase(&fe, &PageError);
#endif

	/* WRITE HEADER */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrNewContentBegin++, EEPROM_SYMBOL_HEADER);
 8000416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000418:	1d1a      	adds	r2, r3, #4
 800041a:	633a      	str	r2, [r7, #48]	; 0x30
 800041c:	0019      	movs	r1, r3
 800041e:	4a24      	ldr	r2, [pc, #144]	; (80004b0 <EEPROM_WriteBytes+0x168>)
 8000420:	2300      	movs	r3, #0
 8000422:	2002      	movs	r0, #2
 8000424:	f000 fe48 	bl	80010b8 <HAL_FLASH_Program>
	/* WRITE CONTENT BEGIN */
    while(Length)
 8000428:	e036      	b.n	8000498 <EEPROM_WriteBytes+0x150>
    {
    	memset(quadbyte.bytes, 0, 4);
 800042a:	2320      	movs	r3, #32
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	2204      	movs	r2, #4
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f00a fcad 	bl	800ad92 <memset>
    	for(i=0; i<4 && Length; ++i)
 8000438:	233e      	movs	r3, #62	; 0x3e
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	2200      	movs	r2, #0
 800043e:	801a      	strh	r2, [r3, #0]
 8000440:	e014      	b.n	800046c <EEPROM_WriteBytes+0x124>
    	{
    		quadbyte.bytes[i] = *Buffer;
 8000442:	203e      	movs	r0, #62	; 0x3e
 8000444:	183b      	adds	r3, r7, r0
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	68ba      	ldr	r2, [r7, #8]
 800044a:	7811      	ldrb	r1, [r2, #0]
 800044c:	2220      	movs	r2, #32
 800044e:	18ba      	adds	r2, r7, r2
 8000450:	54d1      	strb	r1, [r2, r3]
    		Length--;
 8000452:	1dbb      	adds	r3, r7, #6
 8000454:	881a      	ldrh	r2, [r3, #0]
 8000456:	1dbb      	adds	r3, r7, #6
 8000458:	3a01      	subs	r2, #1
 800045a:	801a      	strh	r2, [r3, #0]
    		Buffer++;
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	3301      	adds	r3, #1
 8000460:	60bb      	str	r3, [r7, #8]
    	for(i=0; i<4 && Length; ++i)
 8000462:	183b      	adds	r3, r7, r0
 8000464:	183a      	adds	r2, r7, r0
 8000466:	8812      	ldrh	r2, [r2, #0]
 8000468:	3201      	adds	r2, #1
 800046a:	801a      	strh	r2, [r3, #0]
 800046c:	233e      	movs	r3, #62	; 0x3e
 800046e:	18fb      	adds	r3, r7, r3
 8000470:	881b      	ldrh	r3, [r3, #0]
 8000472:	2b03      	cmp	r3, #3
 8000474:	d803      	bhi.n	800047e <EEPROM_WriteBytes+0x136>
 8000476:	1dbb      	adds	r3, r7, #6
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1e1      	bne.n	8000442 <EEPROM_WriteBytes+0xfa>
    	}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrNewContentBegin++, quadbyte.word);
 800047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000480:	1d1a      	adds	r2, r3, #4
 8000482:	633a      	str	r2, [r7, #48]	; 0x30
 8000484:	0019      	movs	r1, r3
 8000486:	6a3b      	ldr	r3, [r7, #32]
 8000488:	001c      	movs	r4, r3
 800048a:	2300      	movs	r3, #0
 800048c:	001d      	movs	r5, r3
 800048e:	0022      	movs	r2, r4
 8000490:	002b      	movs	r3, r5
 8000492:	2002      	movs	r0, #2
 8000494:	f000 fe10 	bl	80010b8 <HAL_FLASH_Program>
    while(Length)
 8000498:	1dbb      	adds	r3, r7, #6
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1c4      	bne.n	800042a <EEPROM_WriteBytes+0xe2>
    }
    /* WRITE CONTENT END */
    HAL_FLASH_Lock();
 80004a0:	f000 fec6 	bl	8001230 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 80004a4:	b662      	cpsie	i
}
 80004a6:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b010      	add	sp, #64	; 0x40
 80004ae:	bdb0      	pop	{r4, r5, r7, pc}
 80004b0:	07cb020a 	.word	0x07cb020a

080004b4 <EEPROM_ReadBytes>:


void EEPROM_ReadBytes(EEPROM_typedef* pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	1dbb      	adds	r3, r7, #6
 80004c0:	801a      	strh	r2, [r3, #0]
//	uint8_t* ad = pEEPROM->base_addr;
//	uint8_t* addr_end = addr + Length;
	Quadbyte quadbyte;
	uint32_t* addrBase= (uint32_t*)pEEPROM->base_addr;
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	61bb      	str	r3, [r7, #24]
	uint32_t* addrPageEnd = addrBase + (PAGE_SIZE >> 2);
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	089b      	lsrs	r3, r3, #2
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	69ba      	ldr	r2, [r7, #24]
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	617b      	str	r3, [r7, #20]
	uint32_t* addrContentBegin = addrBase;
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	627b      	str	r3, [r7, #36]	; 0x24
#if ENABLE_WEAR_LEVELING
	memset(Buffer, 0, Length);
 80004dc:	1dbb      	adds	r3, r7, #6
 80004de:	881a      	ldrh	r2, [r3, #0]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	2100      	movs	r1, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f00a fc54 	bl	800ad92 <memset>
	// read 4-bytes each
	// locate the header, the 1st non-zero data is the beginning of the valid data
	// for OLD DATA WERE SET TO 0 TO MARK INVALID
	while(addrContentBegin < addrPageEnd && *addrContentBegin == 0x00000000U)
 80004ea:	e002      	b.n	80004f2 <EEPROM_ReadBytes+0x3e>
		addrContentBegin++;
 80004ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ee:	3304      	adds	r3, #4
 80004f0:	627b      	str	r3, [r7, #36]	; 0x24
	while(addrContentBegin < addrPageEnd && *addrContentBegin == 0x00000000U)
 80004f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	429a      	cmp	r2, r3
 80004f8:	d203      	bcs.n	8000502 <EEPROM_ReadBytes+0x4e>
 80004fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0f4      	beq.n	80004ec <EEPROM_ReadBytes+0x38>
	// skip the header, the content is right after the header
	if(addrContentBegin < addrPageEnd - 1)
 8000502:	697b      	ldr	r3, [r7, #20]
 8000504:	3b04      	subs	r3, #4
 8000506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000508:	429a      	cmp	r2, r3
 800050a:	d202      	bcs.n	8000512 <EEPROM_ReadBytes+0x5e>
		addrContentBegin += 1;
 800050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800050e:	3304      	adds	r3, #4
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
#else
	addrContentBegin = addrBase + 1; // skip HEAD
	addrContentEnd = addrContentBegin + Length;
#endif
	uint32_t* addr = addrContentBegin;
 8000512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000514:	623b      	str	r3, [r7, #32]
	while(Length && (addr < addrPageEnd))
 8000516:	e028      	b.n	800056a <EEPROM_ReadBytes+0xb6>
	{
		quadbyte.word = *addr;
 8000518:	6a3b      	ldr	r3, [r7, #32]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	613b      	str	r3, [r7, #16]
		for(uint8_t i=0; i<4 && Length; ++i)
 800051e:	231f      	movs	r3, #31
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e014      	b.n	8000552 <EEPROM_ReadBytes+0x9e>
		{
			*Buffer = quadbyte.bytes[i];
 8000528:	211f      	movs	r1, #31
 800052a:	187b      	adds	r3, r7, r1
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2210      	movs	r2, #16
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	5cd2      	ldrb	r2, [r2, r3]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	701a      	strb	r2, [r3, #0]
			Buffer++;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	3301      	adds	r3, #1
 800053c:	60bb      	str	r3, [r7, #8]
			Length--;
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	881a      	ldrh	r2, [r3, #0]
 8000542:	1dbb      	adds	r3, r7, #6
 8000544:	3a01      	subs	r2, #1
 8000546:	801a      	strh	r2, [r3, #0]
		for(uint8_t i=0; i<4 && Length; ++i)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	187a      	adds	r2, r7, r1
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	3201      	adds	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	231f      	movs	r3, #31
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b03      	cmp	r3, #3
 800055a:	d803      	bhi.n	8000564 <EEPROM_ReadBytes+0xb0>
 800055c:	1dbb      	adds	r3, r7, #6
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1e1      	bne.n	8000528 <EEPROM_ReadBytes+0x74>
		}
		addr++;
 8000564:	6a3b      	ldr	r3, [r7, #32]
 8000566:	3304      	adds	r3, #4
 8000568:	623b      	str	r3, [r7, #32]
	while(Length && (addr < addrPageEnd))
 800056a:	1dbb      	adds	r3, r7, #6
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d003      	beq.n	800057a <EEPROM_ReadBytes+0xc6>
 8000572:	6a3a      	ldr	r2, [r7, #32]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	429a      	cmp	r2, r3
 8000578:	d3ce      	bcc.n	8000518 <EEPROM_ReadBytes+0x64>
	}
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b00a      	add	sp, #40	; 0x28
 8000580:	bd80      	pop	{r7, pc}

08000582 <__REV64>:
#include "cmsis_gcc.h"
#endif

// implement __REV64 for all hardwares
uint64_t __REV64(uint64_t value)
{
 8000582:	b5b0      	push	{r4, r5, r7, lr}
 8000584:	b08c      	sub	sp, #48	; 0x30
 8000586:	af00      	add	r7, sp, #0
 8000588:	6138      	str	r0, [r7, #16]
 800058a:	6179      	str	r1, [r7, #20]
    uint32_t l = value & 0xffff;
 800058c:	6939      	ldr	r1, [r7, #16]
 800058e:	0409      	lsls	r1, r1, #16
 8000590:	0c09      	lsrs	r1, r1, #16
 8000592:	62f9      	str	r1, [r7, #44]	; 0x2c
    uint32_t h = (value >> 32) & 0xffff;
 8000594:	6979      	ldr	r1, [r7, #20]
 8000596:	0009      	movs	r1, r1
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	2100      	movs	r1, #0
 800059c:	60f9      	str	r1, [r7, #12]
 800059e:	68b9      	ldr	r1, [r7, #8]
 80005a0:	0409      	lsls	r1, r1, #16
 80005a2:	0c09      	lsrs	r1, r1, #16
 80005a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80005a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80005a8:	61b9      	str	r1, [r7, #24]
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 80005aa:	69b9      	ldr	r1, [r7, #24]
 80005ac:	ba09      	rev	r1, r1

    uint64_t newvalue = ((uint64_t)__REV(l) << 32) | __REV(h);
 80005ae:	6039      	str	r1, [r7, #0]
 80005b0:	2100      	movs	r1, #0
 80005b2:	6079      	str	r1, [r7, #4]
 80005b4:	6839      	ldr	r1, [r7, #0]
 80005b6:	000b      	movs	r3, r1
 80005b8:	2100      	movs	r1, #0
 80005ba:	000a      	movs	r2, r1
 80005bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80005be:	61f9      	str	r1, [r7, #28]
 80005c0:	69f9      	ldr	r1, [r7, #28]
 80005c2:	ba09      	rev	r1, r1
 80005c4:	000c      	movs	r4, r1
 80005c6:	2100      	movs	r1, #0
 80005c8:	000d      	movs	r5, r1
 80005ca:	0011      	movs	r1, r2
 80005cc:	4321      	orrs	r1, r4
 80005ce:	6239      	str	r1, [r7, #32]
 80005d0:	432b      	orrs	r3, r5
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
    return newvalue;
 80005d4:	6a3a      	ldr	r2, [r7, #32]
 80005d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80005d8:	0010      	movs	r0, r2
 80005da:	0019      	movs	r1, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	b00c      	add	sp, #48	; 0x30
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080005e4 <sha1_init>:
/**
 * @brief call this first to initialize a sha1 encoder object
 * @param ctx: SHA-1 context pointer
 */
void sha1_init(SHA1_CTX* ctx)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    // Initialize SHA-1 context (RFC 3174 initial values)
    ctx->state[0] = 0x67452301;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <sha1_init+0x44>)
 80005f0:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0xEFCDAB89;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <sha1_init+0x48>)
 80005f6:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x98BADCFE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <sha1_init+0x4c>)
 80005fc:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x10325476;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <sha1_init+0x50>)
 8000602:	60da      	str	r2, [r3, #12]
    ctx->state[4] = 0xC3D2E1F0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <sha1_init+0x54>)
 8000608:	611a      	str	r2, [r3, #16]
    ctx->count = 0;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
    memset(ctx->buffer, 0, 64);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3318      	adds	r3, #24
 8000614:	2240      	movs	r2, #64	; 0x40
 8000616:	2100      	movs	r1, #0
 8000618:	0018      	movs	r0, r3
 800061a:	f00a fbba 	bl	800ad92 <memset>
};
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	67452301 	.word	0x67452301
 800062c:	efcdab89 	.word	0xefcdab89
 8000630:	98badcfe 	.word	0x98badcfe
 8000634:	10325476 	.word	0x10325476
 8000638:	c3d2e1f0 	.word	0xc3d2e1f0

0800063c <sha1_transform>:
/**
 * @brief Process a single 64-byte data block
 * @param ctx: SHA-1 context pointer
 * @note Uses Cortex-M0 hardware rotation (__ROR) for performance
 */
static void sha1_transform(SHA1_CTX *ctx) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b092      	sub	sp, #72	; 0x48
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
    static uint32_t w[80]; // NOTE: stack overflow risk, 320bytes, give up reentrance
    uint32_t a, b, c, d, e, i; // 24bytes
    // Convert big-endian bytes to words
    for (i = 0; i < 16; ++i)
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
 8000648:	e010      	b.n	800066c <sha1_transform+0x30>
        w[i] = __REV(*(uint32_t *)(ctx->buffer + i * 4)); // Use CPU's endian reversal
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3318      	adds	r3, #24
 800064e:	001a      	movs	r2, r3
 8000650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	18d3      	adds	r3, r2, r3
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	623b      	str	r3, [r7, #32]
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	ba19      	rev	r1, r3
 800065e:	4b71      	ldr	r3, [pc, #452]	; (8000824 <sha1_transform+0x1e8>)
 8000660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000662:	0092      	lsls	r2, r2, #2
 8000664:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 16; ++i)
 8000666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000668:	3301      	adds	r3, #1
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	2b0f      	cmp	r3, #15
 8000670:	d9eb      	bls.n	800064a <sha1_transform+0xe>
    // Expand message schedule
    for (; i < 80; ++i)
 8000672:	e030      	b.n	80006d6 <sha1_transform+0x9a>
        w[i] = __ROR(w[i-3] ^ w[i-8] ^ w[i-14] ^ w[i-16], 31);
 8000674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000676:	1eda      	subs	r2, r3, #3
 8000678:	4b6a      	ldr	r3, [pc, #424]	; (8000824 <sha1_transform+0x1e8>)
 800067a:	0092      	lsls	r2, r2, #2
 800067c:	58d2      	ldr	r2, [r2, r3]
 800067e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000680:	3b08      	subs	r3, #8
 8000682:	0019      	movs	r1, r3
 8000684:	4b67      	ldr	r3, [pc, #412]	; (8000824 <sha1_transform+0x1e8>)
 8000686:	0089      	lsls	r1, r1, #2
 8000688:	58cb      	ldr	r3, [r1, r3]
 800068a:	405a      	eors	r2, r3
 800068c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800068e:	3b0e      	subs	r3, #14
 8000690:	0019      	movs	r1, r3
 8000692:	4b64      	ldr	r3, [pc, #400]	; (8000824 <sha1_transform+0x1e8>)
 8000694:	0089      	lsls	r1, r1, #2
 8000696:	58cb      	ldr	r3, [r1, r3]
 8000698:	405a      	eors	r2, r3
 800069a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800069c:	3b10      	subs	r3, #16
 800069e:	0019      	movs	r1, r3
 80006a0:	4b60      	ldr	r3, [pc, #384]	; (8000824 <sha1_transform+0x1e8>)
 80006a2:	0089      	lsls	r1, r1, #2
 80006a4:	58cb      	ldr	r3, [r1, r3]
 80006a6:	4053      	eors	r3, r2
 80006a8:	61fb      	str	r3, [r7, #28]
 80006aa:	231f      	movs	r3, #31
 80006ac:	61bb      	str	r3, [r7, #24]
  \param [in]    op2  Number of Bits to rotate
  \return               Rotated value
 */
__STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
{
  op2 %= 32U;
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	221f      	movs	r2, #31
 80006b2:	4013      	ands	r3, r2
 80006b4:	61bb      	str	r3, [r7, #24]
  if (op2 == 0U)
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <sha1_transform+0x84>
  {
    return op1;
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	e003      	b.n	80006c8 <sha1_transform+0x8c>
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 80006c0:	69fa      	ldr	r2, [r7, #28]
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	41da      	rors	r2, r3
 80006c6:	0013      	movs	r3, r2
 80006c8:	4a56      	ldr	r2, [pc, #344]	; (8000824 <sha1_transform+0x1e8>)
 80006ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006cc:	0089      	lsls	r1, r1, #2
 80006ce:	508b      	str	r3, [r1, r2]
    for (; i < 80; ++i)
 80006d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d2:	3301      	adds	r3, #1
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
 80006d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006d8:	2b4f      	cmp	r3, #79	; 0x4f
 80006da:	d9cb      	bls.n	8000674 <sha1_transform+0x38>

    // Initialize hash values
    a = ctx->state[0]; b = ctx->state[1]; c = ctx->state[2];
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	643b      	str	r3, [r7, #64]	; 0x40
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    d = ctx->state[3]; e = ctx->state[4];
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	691b      	ldr	r3, [r3, #16]
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34

    // Main compression loop
    for (i = 0; i < 80; ++i) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
 80006fe:	e06c      	b.n	80007da <sha1_transform+0x19e>
        uint32_t f, k;
        // Select logical function based on round
        if (i < 20)      { f = (b & c) | ((~b) & d); k = 0x5A827999; }
 8000700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000702:	2b13      	cmp	r3, #19
 8000704:	d80b      	bhi.n	800071e <sha1_transform+0xe2>
 8000706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800070a:	401a      	ands	r2, r3
 800070c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800070e:	43db      	mvns	r3, r3
 8000710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000712:	400b      	ands	r3, r1
 8000714:	4313      	orrs	r3, r2
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000718:	4b43      	ldr	r3, [pc, #268]	; (8000828 <sha1_transform+0x1ec>)
 800071a:	62bb      	str	r3, [r7, #40]	; 0x28
 800071c:	e023      	b.n	8000766 <sha1_transform+0x12a>
        else if (i < 40) { f = b ^ c ^ d;          k = 0x6ED9EBA1; }
 800071e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000720:	2b27      	cmp	r3, #39	; 0x27
 8000722:	d808      	bhi.n	8000736 <sha1_transform+0xfa>
 8000724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000728:	4053      	eors	r3, r2
 800072a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800072c:	4053      	eors	r3, r2
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000730:	4b3e      	ldr	r3, [pc, #248]	; (800082c <sha1_transform+0x1f0>)
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
 8000734:	e017      	b.n	8000766 <sha1_transform+0x12a>
        else if (i < 60) { f = (b & c) | (b & d) | (c & d); k = 0x8F1BBCDC; }
 8000736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000738:	2b3b      	cmp	r3, #59	; 0x3b
 800073a:	d80c      	bhi.n	8000756 <sha1_transform+0x11a>
 800073c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800073e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000740:	4313      	orrs	r3, r2
 8000742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000744:	401a      	ands	r2, r3
 8000746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800074a:	400b      	ands	r3, r1
 800074c:	4313      	orrs	r3, r2
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000750:	4b37      	ldr	r3, [pc, #220]	; (8000830 <sha1_transform+0x1f4>)
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
 8000754:	e007      	b.n	8000766 <sha1_transform+0x12a>
        else             { f = b ^ c ^ d;          k = 0xCA62C1D6; }
 8000756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800075a:	4053      	eors	r3, r2
 800075c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800075e:	4053      	eors	r3, r2
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000762:	4b34      	ldr	r3, [pc, #208]	; (8000834 <sha1_transform+0x1f8>)
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
 8000766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	231b      	movs	r3, #27
 800076c:	60bb      	str	r3, [r7, #8]
  op2 %= 32U;
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	221f      	movs	r2, #31
 8000772:	4013      	ands	r3, r2
 8000774:	60bb      	str	r3, [r7, #8]
  if (op2 == 0U)
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d101      	bne.n	8000780 <sha1_transform+0x144>
    return op1;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	e003      	b.n	8000788 <sha1_transform+0x14c>
  return (op1 >> op2) | (op1 << (32U - op2));
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	41da      	rors	r2, r3
 8000786:	0013      	movs	r3, r2

        uint32_t temp = __ROR(a, 27) + f + e + k + w[i]; // Use hardware rotation
 8000788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800078a:	189a      	adds	r2, r3, r2
 800078c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078e:	18d2      	adds	r2, r2, r3
 8000790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000792:	18d2      	adds	r2, r2, r3
 8000794:	4b23      	ldr	r3, [pc, #140]	; (8000824 <sha1_transform+0x1e8>)
 8000796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000798:	0089      	lsls	r1, r1, #2
 800079a:	58cb      	ldr	r3, [r1, r3]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
        e = d; d = c; c = __ROR(b, 2); b = a; a = temp;
 80007a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
 80007a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80007a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  op2 %= 32U;
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	221f      	movs	r2, #31
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
  if (op2 == 0U)
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d101      	bne.n	80007c2 <sha1_transform+0x186>
    return op1;
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	e003      	b.n	80007ca <sha1_transform+0x18e>
  return (op1 >> op2) | (op1 << (32U - op2));
 80007c2:	697a      	ldr	r2, [r7, #20]
 80007c4:	693b      	ldr	r3, [r7, #16]
 80007c6:	41da      	rors	r2, r3
 80007c8:	0013      	movs	r3, r2
 80007ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ce:	643b      	str	r3, [r7, #64]	; 0x40
 80007d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d2:	647b      	str	r3, [r7, #68]	; 0x44
    for (i = 0; i < 80; ++i) {
 80007d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d6:	3301      	adds	r3, #1
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
 80007da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007dc:	2b4f      	cmp	r3, #79	; 0x4f
 80007de:	d98f      	bls.n	8000700 <sha1_transform+0xc4>
    }
    // Update hash state
    ctx->state[0] += a; ctx->state[1] += b;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007e6:	18d2      	adds	r2, r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007f2:	18d2      	adds	r2, r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	605a      	str	r2, [r3, #4]
    ctx->state[2] += c; ctx->state[3] += d;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689a      	ldr	r2, [r3, #8]
 80007fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007fe:	18d2      	adds	r2, r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68da      	ldr	r2, [r3, #12]
 8000808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800080a:	18d2      	adds	r2, r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	60da      	str	r2, [r3, #12]
    ctx->state[4] += e;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	691a      	ldr	r2, [r3, #16]
 8000814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000816:	18d2      	adds	r2, r2, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	611a      	str	r2, [r3, #16]
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b012      	add	sp, #72	; 0x48
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200006c8 	.word	0x200006c8
 8000828:	5a827999 	.word	0x5a827999
 800082c:	6ed9eba1 	.word	0x6ed9eba1
 8000830:	8f1bbcdc 	.word	0x8f1bbcdc
 8000834:	ca62c1d6 	.word	0xca62c1d6

08000838 <sha1_update>:
 * @param ctx: SHA-1 context pointer
 * @param data: Input data buffer
 * @param len: Data length in bytes
 * @note Buffers partial blocks to minimize memory usage
 */
static void sha1_update(SHA1_CTX *ctx, uint8_t *data, uint32_t len) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
    uint32_t i, remain = ctx->count & 0x3F; // Calculate buffer fill (0-63 bytes)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	223f      	movs	r2, #63	; 0x3f
 800084a:	4013      	ands	r3, r2
 800084c:	613b      	str	r3, [r7, #16]

    for (i = 0; i < len; ++i) {
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	e01b      	b.n	800088c <sha1_update+0x54>
        ctx->buffer[remain++] = data[i];
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	18d2      	adds	r2, r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	1c59      	adds	r1, r3, #1
 800085e:	6139      	str	r1, [r7, #16]
 8000860:	7811      	ldrb	r1, [r2, #0]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	1c0a      	adds	r2, r1, #0
 8000868:	761a      	strb	r2, [r3, #24]
        if (remain == 64) { // Process full block
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	2b40      	cmp	r3, #64	; 0x40
 800086e:	d105      	bne.n	800087c <sha1_update+0x44>
            sha1_transform(ctx);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	0018      	movs	r0, r3
 8000874:	f7ff fee2 	bl	800063c <sha1_transform>
            remain = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
        }
        ctx->count += 1; // Increment byte counter
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	1c5a      	adds	r2, r3, #1
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	615a      	str	r2, [r3, #20]
    for (i = 0; i < len; ++i) {
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3301      	adds	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d3df      	bcc.n	8000854 <sha1_update+0x1c>
    }
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b006      	add	sp, #24
 800089c:	bd80      	pop	{r7, pc}

0800089e <sha1_final>:
 * @brief Finalize hash and output digest
 * @param ctx: SHA-1 context pointer
 * @param digest: Output buffer (20 bytes)
 * @note Appends padding and processes final block
 */
static void sha1_final(SHA1_CTX *ctx, uint8_t digest[20]) {
 800089e:	b5b0      	push	{r4, r5, r7, lr}
 80008a0:	b08a      	sub	sp, #40	; 0x28
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
    uint32_t idx = ctx->count & 0x3F;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	223f      	movs	r2, #63	; 0x3f
 80008ae:	4013      	ands	r3, r2
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    // Add padding: 0x80 followed by zeros
    uint8_t pad = 0x80;
 80008b2:	2117      	movs	r1, #23
 80008b4:	2008      	movs	r0, #8
 80008b6:	183b      	adds	r3, r7, r0
 80008b8:	185b      	adds	r3, r3, r1
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	701a      	strb	r2, [r3, #0]
    ctx->buffer[idx++] = pad;
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	627a      	str	r2, [r7, #36]	; 0x24
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	18d3      	adds	r3, r2, r3
 80008c8:	183a      	adds	r2, r7, r0
 80008ca:	1852      	adds	r2, r2, r1
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	761a      	strb	r2, [r3, #24]
    // Pad until 56th byte (leaving 8 bytes for length)
    pad = 0;
 80008d0:	183b      	adds	r3, r7, r0
 80008d2:	185b      	adds	r3, r3, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
    if (idx > 56) {  // insufficient room for length info (8 bytes), pad the remaining with 0, and open up a new buffer page for length info.
 80008d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008da:	2b38      	cmp	r3, #56	; 0x38
 80008dc:	d911      	bls.n	8000902 <sha1_final+0x64>
        memset(ctx->buffer + idx, 0, 64 - idx);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3318      	adds	r3, #24
 80008e2:	001a      	movs	r2, r3
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	18d0      	adds	r0, r2, r3
 80008e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ea:	2240      	movs	r2, #64	; 0x40
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	001a      	movs	r2, r3
 80008f0:	2100      	movs	r1, #0
 80008f2:	f00a fa4e 	bl	800ad92 <memset>
        sha1_transform(ctx);
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fe9f 	bl	800063c <sha1_transform>
        idx = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    }
    // pad until buffer has last 8bytes for length info
    memset(ctx->buffer + idx, 0, 56 - idx);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	3318      	adds	r3, #24
 8000906:	001a      	movs	r2, r3
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	18d0      	adds	r0, r2, r3
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	2238      	movs	r2, #56	; 0x38
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f00a fa3c 	bl	800ad92 <memset>
    // Append length in bits
    uint64_t bit_count = __REV64((uint64_t)ctx->count << 3); // Total bits in big-endian
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	683a      	ldr	r2, [r7, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	0011      	movs	r1, r2
 800092a:	0f4d      	lsrs	r5, r1, #29
 800092c:	0013      	movs	r3, r2
 800092e:	00dc      	lsls	r4, r3, #3
 8000930:	0020      	movs	r0, r4
 8000932:	0029      	movs	r1, r5
 8000934:	f7ff fe25 	bl	8000582 <__REV64>
 8000938:	0002      	movs	r2, r0
 800093a:	000b      	movs	r3, r1
 800093c:	613a      	str	r2, [r7, #16]
 800093e:	617b      	str	r3, [r7, #20]
    memcpy(ctx->buffer + 56, (uint8_t*)&bit_count, 8);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	3318      	adds	r3, #24
 8000944:	3338      	adds	r3, #56	; 0x38
 8000946:	2208      	movs	r2, #8
 8000948:	2108      	movs	r1, #8
 800094a:	1879      	adds	r1, r7, r1
 800094c:	1889      	adds	r1, r1, r2
 800094e:	2208      	movs	r2, #8
 8000950:	0018      	movs	r0, r3
 8000952:	f00a fa15 	bl	800ad80 <memcpy>
    sha1_transform(ctx);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fe6f 	bl	800063c <sha1_transform>
    // Output digest in big-endian
    for (int i = 0; i < 5; ++i)
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
 8000962:	e00e      	b.n	8000982 <sha1_final+0xe4>
        ((uint32_t*)digest)[i] = __REV(ctx->state[i]);
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	6a3a      	ldr	r2, [r7, #32]
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	58d2      	ldr	r2, [r2, r3]
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	68b9      	ldr	r1, [r7, #8]
 8000972:	18cb      	adds	r3, r1, r3
 8000974:	61ba      	str	r2, [r7, #24]
  return __builtin_bswap32(value);
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	ba12      	rev	r2, r2
 800097a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 5; ++i)
 800097c:	6a3b      	ldr	r3, [r7, #32]
 800097e:	3301      	adds	r3, #1
 8000980:	623b      	str	r3, [r7, #32]
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	2b04      	cmp	r3, #4
 8000986:	dded      	ble.n	8000964 <sha1_final+0xc6>
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b00a      	add	sp, #40	; 0x28
 8000990:	bdb0      	pop	{r4, r5, r7, pc}

08000992 <sha1_encode>:
 * @brief call this function to encode data by SHA1
 * @param ctx: SHA-1 context pointer
 * @param digest: Output buffer (20 bytes)
 */
void sha1_encode(SHA1_CTX* ctx, uint8_t* original_data, size_t len, uint8_t output[20])
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	603b      	str	r3, [r7, #0]
    sha1_update(ctx, original_data, len);
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	68b9      	ldr	r1, [r7, #8]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	0018      	movs	r0, r3
 80009a8:	f7ff ff46 	bl	8000838 <sha1_update>
    sha1_final(ctx, output);
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	0011      	movs	r1, r2
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff ff73 	bl	800089e <sha1_final>
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b004      	add	sp, #16
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_Init+0x24>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_Init+0x24>)
 80009ca:	2110      	movs	r1, #16
 80009cc:	430a      	orrs	r2, r1
 80009ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f809 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d6:	f009 ffa9 	bl	800a92c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	0018      	movs	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	40022000 	.word	0x40022000

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_InitTick+0x5c>)
 80009f2:	681c      	ldr	r4, [r3, #0]
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0x60>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	0019      	movs	r1, r3
 80009fa:	23fa      	movs	r3, #250	; 0xfa
 80009fc:	0098      	lsls	r0, r3, #2
 80009fe:	f7ff fb95 	bl	800012c <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	0019      	movs	r1, r3
 8000a06:	0020      	movs	r0, r4
 8000a08:	f7ff fb90 	bl	800012c <__udivsi3>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f000 f92f 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e00f      	b.n	8000a3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b03      	cmp	r3, #3
 8000a20:	d80b      	bhi.n	8000a3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 f8fc 	bl	8000c28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_InitTick+0x64>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b003      	add	sp, #12
 8000a42:	bd90      	pop	{r4, r7, pc}
 8000a44:	200006a0 	.word	0x200006a0
 8000a48:	2000000c 	.word	0x2000000c
 8000a4c:	20000008 	.word	0x20000008

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x20>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	18d2      	adds	r2, r2, r3
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <HAL_IncTick+0x20>)
 8000a62:	601a      	str	r2, [r3, #0]
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			; (mov r8, r8)
 8000a6c:	2000000c 	.word	0x2000000c
 8000a70:	200013dc 	.word	0x200013dc

08000a74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <HAL_GetTick+0x10>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	200013dc 	.word	0x200013dc

08000a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a90:	f7ff fff0 	bl	8000a74 <HAL_GetTick>
 8000a94:	0003      	movs	r3, r0
 8000a96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	d005      	beq.n	8000aae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_Delay+0x44>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	189b      	adds	r3, r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	f7ff ffe0 	bl	8000a74 <HAL_GetTick>
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d8f7      	bhi.n	8000ab0 <HAL_Delay+0x28>
  {
  }
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b004      	add	sp, #16
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	2000000c 	.word	0x2000000c

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	0002      	movs	r2, r0
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	1dfb      	adds	r3, r7, #7
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ae2:	d809      	bhi.n	8000af8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	231f      	movs	r3, #31
 8000aec:	401a      	ands	r2, r3
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <__NVIC_EnableIRQ+0x30>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	4091      	lsls	r1, r2
 8000af4:	000a      	movs	r2, r1
 8000af6:	601a      	str	r2, [r3, #0]
  }
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b002      	add	sp, #8
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b7f      	cmp	r3, #127	; 0x7f
 8000b18:	d828      	bhi.n	8000b6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1a:	4a2f      	ldr	r2, [pc, #188]	; (8000bd8 <__NVIC_SetPriority+0xd4>)
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b25b      	sxtb	r3, r3
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	33c0      	adds	r3, #192	; 0xc0
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	589b      	ldr	r3, [r3, r2]
 8000b2a:	1dfa      	adds	r2, r7, #7
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	0011      	movs	r1, r2
 8000b30:	2203      	movs	r2, #3
 8000b32:	400a      	ands	r2, r1
 8000b34:	00d2      	lsls	r2, r2, #3
 8000b36:	21ff      	movs	r1, #255	; 0xff
 8000b38:	4091      	lsls	r1, r2
 8000b3a:	000a      	movs	r2, r1
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	401a      	ands	r2, r3
 8000b40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	019b      	lsls	r3, r3, #6
 8000b46:	22ff      	movs	r2, #255	; 0xff
 8000b48:	401a      	ands	r2, r3
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2303      	movs	r3, #3
 8000b52:	4003      	ands	r3, r0
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <__NVIC_SetPriority+0xd4>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	089b      	lsrs	r3, r3, #2
 8000b62:	430a      	orrs	r2, r1
 8000b64:	33c0      	adds	r3, #192	; 0xc0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b6a:	e031      	b.n	8000bd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <__NVIC_SetPriority+0xd8>)
 8000b6e:	1dfb      	adds	r3, r7, #7
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	0019      	movs	r1, r3
 8000b74:	230f      	movs	r3, #15
 8000b76:	400b      	ands	r3, r1
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3306      	adds	r3, #6
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	3304      	adds	r3, #4
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	400a      	ands	r2, r1
 8000b90:	00d2      	lsls	r2, r2, #3
 8000b92:	21ff      	movs	r1, #255	; 0xff
 8000b94:	4091      	lsls	r1, r2
 8000b96:	000a      	movs	r2, r1
 8000b98:	43d2      	mvns	r2, r2
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	019b      	lsls	r3, r3, #6
 8000ba2:	22ff      	movs	r2, #255	; 0xff
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	0018      	movs	r0, r3
 8000bac:	2303      	movs	r3, #3
 8000bae:	4003      	ands	r3, r0
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb4:	4809      	ldr	r0, [pc, #36]	; (8000bdc <__NVIC_SetPriority+0xd8>)
 8000bb6:	1dfb      	adds	r3, r7, #7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	001c      	movs	r4, r3
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	4023      	ands	r3, r4
 8000bc0:	3b08      	subs	r3, #8
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	3306      	adds	r3, #6
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	18c3      	adds	r3, r0, r3
 8000bcc:	3304      	adds	r3, #4
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	46c0      	nop			; (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b003      	add	sp, #12
 8000bd6:	bd90      	pop	{r4, r7, pc}
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	1e5a      	subs	r2, r3, #1
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	045b      	lsls	r3, r3, #17
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d301      	bcc.n	8000bf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e010      	b.n	8000c1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <SysTick_Config+0x44>)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	3a01      	subs	r2, #1
 8000bfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2103      	movs	r1, #3
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ff7c 	bl	8000b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x44>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x44>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b002      	add	sp, #8
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	210f      	movs	r1, #15
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	1c02      	adds	r2, r0, #0
 8000c38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f7ff ff5d 	bl	8000b04 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b004      	add	sp, #16
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	0002      	movs	r2, r0
 8000c5a:	1dfb      	adds	r3, r7, #7
 8000c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	b25b      	sxtb	r3, r3
 8000c64:	0018      	movs	r0, r3
 8000c66:	f7ff ff33 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f7ff ffaf 	bl	8000be0 <SysTick_Config>
 8000c82:	0003      	movs	r3, r0
}
 8000c84:	0018      	movs	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b002      	add	sp, #8
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d101      	bne.n	8000ca2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e036      	b.n	8000d10 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2221      	movs	r2, #33	; 0x21
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <HAL_DMA_Init+0x8c>)
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f9c4 	bl	8001080 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2221      	movs	r2, #33	; 0x21
 8000d02:	2101      	movs	r1, #1
 8000d04:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b004      	add	sp, #16
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	ffffc00f 	.word	0xffffc00f

08000d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2317      	movs	r3, #23
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2220      	movs	r2, #32
 8000d36:	5c9b      	ldrb	r3, [r3, r2]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_DMA_Start_IT+0x24>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e04f      	b.n	8000de0 <HAL_DMA_Start_IT+0xc4>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2220      	movs	r2, #32
 8000d44:	2101      	movs	r1, #1
 8000d46:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2221      	movs	r2, #33	; 0x21
 8000d4c:	5c9b      	ldrb	r3, [r3, r2]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d13a      	bne.n	8000dca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2221      	movs	r2, #33	; 0x21
 8000d58:	2102      	movs	r1, #2
 8000d5a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	438a      	bics	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f954 	bl	8001026 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	210e      	movs	r1, #14
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e00f      	b.n	8000db8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	210a      	movs	r1, #10
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2104      	movs	r1, #4
 8000db4:	438a      	bics	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2220      	movs	r2, #32
 8000dce:	2100      	movs	r1, #0
 8000dd0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dd2:	2317      	movs	r3, #23
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000dda:	2317      	movs	r3, #23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b006      	add	sp, #24
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2221      	movs	r2, #33	; 0x21
 8000df4:	5c9b      	ldrb	r3, [r3, r2]
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d008      	beq.n	8000e0e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2204      	movs	r2, #4
 8000e00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2220      	movs	r2, #32
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e020      	b.n	8000e50 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	210e      	movs	r1, #14
 8000e1a:	438a      	bics	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	438a      	bics	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e36:	2101      	movs	r1, #1
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2221      	movs	r2, #33	; 0x21
 8000e42:	2101      	movs	r1, #1
 8000e44:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2220      	movs	r2, #32
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b002      	add	sp, #8
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e60:	210f      	movs	r1, #15
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2221      	movs	r2, #33	; 0x21
 8000e6c:	5c9b      	ldrb	r3, [r3, r2]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d006      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2204      	movs	r2, #4
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
 8000e80:	e028      	b.n	8000ed4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	210e      	movs	r1, #14
 8000e8e:	438a      	bics	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	438a      	bics	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eaa:	2101      	movs	r1, #1
 8000eac:	4091      	lsls	r1, r2
 8000eae:	000a      	movs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2221      	movs	r2, #33	; 0x21
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2220      	movs	r2, #32
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	0010      	movs	r0, r2
 8000ed2:	4798      	blx	r3
    }
  }
  return status;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	781b      	ldrb	r3, [r3, #0]
}
 8000eda:	0018      	movs	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	2204      	movs	r2, #4
 8000f00:	409a      	lsls	r2, r3
 8000f02:	0013      	movs	r3, r2
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	d024      	beq.n	8000f54 <HAL_DMA_IRQHandler+0x72>
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2204      	movs	r2, #4
 8000f0e:	4013      	ands	r3, r2
 8000f10:	d020      	beq.n	8000f54 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2220      	movs	r2, #32
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d107      	bne.n	8000f2e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2104      	movs	r1, #4
 8000f2a:	438a      	bics	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f36:	2104      	movs	r1, #4
 8000f38:	4091      	lsls	r1, r2
 8000f3a:	000a      	movs	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <HAL_DMA_IRQHandler+0x66>
 8000f46:	e06a      	b.n	800101e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	0010      	movs	r0, r2
 8000f50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000f52:	e064      	b.n	800101e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	2202      	movs	r2, #2
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	4013      	ands	r3, r2
 8000f62:	d02b      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xda>
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d027      	beq.n	8000fbc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2220      	movs	r2, #32
 8000f74:	4013      	ands	r3, r2
 8000f76:	d10b      	bne.n	8000f90 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	210a      	movs	r1, #10
 8000f84:	438a      	bics	r2, r1
 8000f86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2221      	movs	r2, #33	; 0x21
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4091      	lsls	r1, r2
 8000f9c:	000a      	movs	r2, r1
 8000f9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d036      	beq.n	800101e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000fba:	e030      	b.n	800101e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	0013      	movs	r3, r2
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d028      	beq.n	800101e <HAL_DMA_IRQHandler+0x13c>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d024      	beq.n	800101e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	210e      	movs	r1, #14
 8000fe0:	438a      	bics	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fec:	2101      	movs	r1, #1
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2221      	movs	r2, #33	; 0x21
 8000ffe:	2101      	movs	r1, #1
 8001000:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	0010      	movs	r0, r2
 800101a:	4798      	blx	r3
    }
  }
}
 800101c:	e7ff      	b.n	800101e <HAL_DMA_IRQHandler+0x13c>
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}

08001026 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b084      	sub	sp, #16
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103c:	2101      	movs	r1, #1
 800103e:	4091      	lsls	r1, r2
 8001040:	000a      	movs	r2, r1
 8001042:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	2b10      	cmp	r3, #16
 8001052:	d108      	bne.n	8001066 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001064:	e007      	b.n	8001076 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	60da      	str	r2, [r3, #12]
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <DMA_CalcBaseAndBitshift+0x30>)
 800108e:	4694      	mov	ip, r2
 8001090:	4463      	add	r3, ip
 8001092:	2114      	movs	r1, #20
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff f849 	bl	800012c <__udivsi3>
 800109a:	0003      	movs	r3, r0
 800109c:	009a      	lsls	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <DMA_CalcBaseAndBitshift+0x34>)
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	bffdfff8 	.word	0xbffdfff8
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	603a      	str	r2, [r7, #0]
 80010c4:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010c6:	2317      	movs	r3, #23
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80010ce:	2316      	movs	r3, #22
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80010d6:	2315      	movs	r3, #21
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010de:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <HAL_FLASH_Program+0x120>)
 80010e0:	7e1b      	ldrb	r3, [r3, #24]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d101      	bne.n	80010ea <HAL_FLASH_Program+0x32>
 80010e6:	2302      	movs	r3, #2
 80010e8:	e072      	b.n	80011d0 <HAL_FLASH_Program+0x118>
 80010ea:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <HAL_FLASH_Program+0x120>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010f0:	2317      	movs	r3, #23
 80010f2:	18fe      	adds	r6, r7, r3
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <HAL_FLASH_Program+0x124>)
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f8c4 	bl	8001284 <FLASH_WaitForLastOperation>
 80010fc:	0003      	movs	r3, r0
 80010fe:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8001100:	2317      	movs	r3, #23
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d15c      	bne.n	80011c4 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d104      	bne.n	800111a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001110:	2315      	movs	r3, #21
 8001112:	18fb      	adds	r3, r7, r3
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
 8001118:	e00b      	b.n	8001132 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d104      	bne.n	800112a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001120:	2315      	movs	r3, #21
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	2202      	movs	r2, #2
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e003      	b.n	8001132 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800112a:	2315      	movs	r3, #21
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	2204      	movs	r2, #4
 8001130:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8001132:	2316      	movs	r3, #22
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e039      	b.n	80011b0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800113c:	2116      	movs	r1, #22
 800113e:	187b      	adds	r3, r7, r1
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	005a      	lsls	r2, r3, #1
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	18d0      	adds	r0, r2, r3
 8001148:	187b      	adds	r3, r7, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	001a      	movs	r2, r3
 8001150:	3a20      	subs	r2, #32
 8001152:	2a00      	cmp	r2, #0
 8001154:	db03      	blt.n	800115e <HAL_FLASH_Program+0xa6>
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	40d1      	lsrs	r1, r2
 800115a:	000c      	movs	r4, r1
 800115c:	e008      	b.n	8001170 <HAL_FLASH_Program+0xb8>
 800115e:	2220      	movs	r2, #32
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4091      	lsls	r1, r2
 8001166:	000a      	movs	r2, r1
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	40d9      	lsrs	r1, r3
 800116c:	000c      	movs	r4, r1
 800116e:	4314      	orrs	r4, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	40da      	lsrs	r2, r3
 8001174:	0015      	movs	r5, r2
 8001176:	b2a3      	uxth	r3, r4
 8001178:	0019      	movs	r1, r3
 800117a:	f000 f867 	bl	800124c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800117e:	2317      	movs	r3, #23
 8001180:	18fe      	adds	r6, r7, r3
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_FLASH_Program+0x124>)
 8001184:	0018      	movs	r0, r3
 8001186:	f000 f87d 	bl	8001284 <FLASH_WaitForLastOperation>
 800118a:	0003      	movs	r3, r0
 800118c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <HAL_FLASH_Program+0x128>)
 8001190:	691a      	ldr	r2, [r3, #16]
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_FLASH_Program+0x128>)
 8001194:	2101      	movs	r1, #1
 8001196:	438a      	bics	r2, r1
 8001198:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800119a:	2317      	movs	r3, #23
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10e      	bne.n	80011c2 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80011a4:	2116      	movs	r1, #22
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	3201      	adds	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	2316      	movs	r3, #22
 80011b2:	18fa      	adds	r2, r7, r3
 80011b4:	2315      	movs	r3, #21
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d3bd      	bcc.n	800113c <HAL_FLASH_Program+0x84>
 80011c0:	e000      	b.n	80011c4 <HAL_FLASH_Program+0x10c>
      {
        break;
 80011c2:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <HAL_FLASH_Program+0x120>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	761a      	strb	r2, [r3, #24]

  return status;
 80011ca:	2317      	movs	r3, #23
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b007      	add	sp, #28
 80011d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011d8:	200013e0 	.word	0x200013e0
 80011dc:	0000c350 	.word	0x0000c350
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_FLASH_Unlock+0x40>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	2280      	movs	r2, #128	; 0x80
 80011f6:	4013      	ands	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_FLASH_Unlock+0x40>)
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_FLASH_Unlock+0x44>)
 80011fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_FLASH_Unlock+0x40>)
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_FLASH_Unlock+0x48>)
 8001204:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <HAL_FLASH_Unlock+0x40>)
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	4013      	ands	r3, r2
 800120e:	d002      	beq.n	8001216 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40022000 	.word	0x40022000
 8001228:	45670123 	.word	0x45670123
 800122c:	cdef89ab 	.word	0xcdef89ab

08001230 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_FLASH_Lock+0x18>)
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_FLASH_Lock+0x18>)
 800123a:	2180      	movs	r1, #128	; 0x80
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40022000 	.word	0x40022000

0800124c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	000a      	movs	r2, r1
 8001256:	1cbb      	adds	r3, r7, #2
 8001258:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <FLASH_Program_HalfWord+0x30>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <FLASH_Program_HalfWord+0x34>)
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <FLASH_Program_HalfWord+0x34>)
 8001266:	2101      	movs	r1, #1
 8001268:	430a      	orrs	r2, r1
 800126a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1cba      	adds	r2, r7, #2
 8001270:	8812      	ldrh	r2, [r2, #0]
 8001272:	801a      	strh	r2, [r3, #0]
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200013e0 	.word	0x200013e0
 8001280:	40022000 	.word	0x40022000

08001284 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff fbf2 	bl	8000a74 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001294:	e00f      	b.n	80012b6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	d00c      	beq.n	80012b6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <FLASH_WaitForLastOperation+0x2e>
 80012a2:	f7ff fbe7 	bl	8000a74 <HAL_GetTick>
 80012a6:	0002      	movs	r2, r0
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d201      	bcs.n	80012b6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e01f      	b.n	80012f6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <FLASH_WaitForLastOperation+0x7c>)
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4013      	ands	r3, r2
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d0e9      	beq.n	8001296 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <FLASH_WaitForLastOperation+0x7c>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2220      	movs	r2, #32
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	d102      	bne.n	80012d4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <FLASH_WaitForLastOperation+0x7c>)
 80012d0:	2220      	movs	r2, #32
 80012d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <FLASH_WaitForLastOperation+0x7c>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2210      	movs	r2, #16
 80012da:	4013      	ands	r3, r2
 80012dc:	2b10      	cmp	r3, #16
 80012de:	d005      	beq.n	80012ec <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <FLASH_WaitForLastOperation+0x7c>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2204      	movs	r2, #4
 80012e6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d103      	bne.n	80012f4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012ec:	f000 f80a 	bl	8001304 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	40022000 	.word	0x40022000

08001304 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <FLASH_SetErrorCode+0x58>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2210      	movs	r2, #16
 8001314:	4013      	ands	r3, r2
 8001316:	2b10      	cmp	r3, #16
 8001318:	d109      	bne.n	800132e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <FLASH_SetErrorCode+0x5c>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2202      	movs	r2, #2
 8001320:	431a      	orrs	r2, r3
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <FLASH_SetErrorCode+0x5c>)
 8001324:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2210      	movs	r2, #16
 800132a:	4313      	orrs	r3, r2
 800132c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <FLASH_SetErrorCode+0x58>)
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	2204      	movs	r2, #4
 8001334:	4013      	ands	r3, r2
 8001336:	2b04      	cmp	r3, #4
 8001338:	d109      	bne.n	800134e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <FLASH_SetErrorCode+0x5c>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	2201      	movs	r2, #1
 8001340:	431a      	orrs	r2, r3
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <FLASH_SetErrorCode+0x5c>)
 8001344:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2204      	movs	r2, #4
 800134a:	4313      	orrs	r3, r2
 800134c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <FLASH_SetErrorCode+0x58>)
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	60da      	str	r2, [r3, #12]
}  
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40022000 	.word	0x40022000
 8001360:	200013e0 	.word	0x200013e0

08001364 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800136e:	230f      	movs	r3, #15
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800137a:	4b32      	ldr	r3, [pc, #200]	; (8001444 <HAL_FLASHEx_Erase+0xe0>)
 800137c:	7e1b      	ldrb	r3, [r3, #24]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_FLASHEx_Erase+0x22>
 8001382:	2302      	movs	r3, #2
 8001384:	e05a      	b.n	800143c <HAL_FLASHEx_Erase+0xd8>
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_FLASHEx_Erase+0xe0>)
 8001388:	2201      	movs	r2, #1
 800138a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d116      	bne.n	80013c2 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001394:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <HAL_FLASHEx_Erase+0xe4>)
 8001396:	0018      	movs	r0, r3
 8001398:	f7ff ff74 	bl	8001284 <FLASH_WaitForLastOperation>
 800139c:	1e03      	subs	r3, r0, #0
 800139e:	d147      	bne.n	8001430 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80013a0:	f000 f856 	bl	8001450 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013a4:	230f      	movs	r3, #15
 80013a6:	18fc      	adds	r4, r7, r3
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_FLASHEx_Erase+0xe4>)
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff ff6a 	bl	8001284 <FLASH_WaitForLastOperation>
 80013b0:	0003      	movs	r3, r0
 80013b2:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013b4:	4b25      	ldr	r3, [pc, #148]	; (800144c <HAL_FLASHEx_Erase+0xe8>)
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <HAL_FLASHEx_Erase+0xe8>)
 80013ba:	2104      	movs	r1, #4
 80013bc:	438a      	bics	r2, r1
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	e036      	b.n	8001430 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <HAL_FLASHEx_Erase+0xe4>)
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <FLASH_WaitForLastOperation>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d130      	bne.n	8001430 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4252      	negs	r2, r2
 80013d4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	e01f      	b.n	800141e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f000 f84d 	bl	8001480 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013e6:	250f      	movs	r5, #15
 80013e8:	197c      	adds	r4, r7, r5
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_FLASHEx_Erase+0xe4>)
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff ff49 	bl	8001284 <FLASH_WaitForLastOperation>
 80013f2:	0003      	movs	r3, r0
 80013f4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_FLASHEx_Erase+0xe8>)
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_FLASHEx_Erase+0xe8>)
 80013fc:	2102      	movs	r1, #2
 80013fe:	438a      	bics	r2, r1
 8001400:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8001402:	197b      	adds	r3, r7, r5
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	601a      	str	r2, [r3, #0]
            break;
 8001410:	e00e      	b.n	8001430 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	00d2      	lsls	r2, r2, #3
 8001418:	4694      	mov	ip, r2
 800141a:	4463      	add	r3, ip
 800141c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	029a      	lsls	r2, r3, #10
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	429a      	cmp	r2, r3
 800142e:	d3d6      	bcc.n	80013de <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_FLASHEx_Erase+0xe0>)
 8001432:	2200      	movs	r2, #0
 8001434:	761a      	strb	r2, [r3, #24]

  return status;
 8001436:	230f      	movs	r3, #15
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	781b      	ldrb	r3, [r3, #0]
}
 800143c:	0018      	movs	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	b004      	add	sp, #16
 8001442:	bdb0      	pop	{r4, r5, r7, pc}
 8001444:	200013e0 	.word	0x200013e0
 8001448:	0000c350 	.word	0x0000c350
 800144c:	40022000 	.word	0x40022000

08001450 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <FLASH_MassErase+0x28>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <FLASH_MassErase+0x2c>)
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	4b07      	ldr	r3, [pc, #28]	; (800147c <FLASH_MassErase+0x2c>)
 8001460:	2104      	movs	r1, #4
 8001462:	430a      	orrs	r2, r1
 8001464:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <FLASH_MassErase+0x2c>)
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <FLASH_MassErase+0x2c>)
 800146c:	2140      	movs	r1, #64	; 0x40
 800146e:	430a      	orrs	r2, r1
 8001470:	611a      	str	r2, [r3, #16]
}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200013e0 	.word	0x200013e0
 800147c:	40022000 	.word	0x40022000

08001480 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001488:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <FLASH_PageErase+0x34>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <FLASH_PageErase+0x38>)
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <FLASH_PageErase+0x38>)
 8001494:	2102      	movs	r1, #2
 8001496:	430a      	orrs	r2, r1
 8001498:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <FLASH_PageErase+0x38>)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <FLASH_PageErase+0x38>)
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <FLASH_PageErase+0x38>)
 80014a6:	2140      	movs	r1, #64	; 0x40
 80014a8:	430a      	orrs	r2, r1
 80014aa:	611a      	str	r2, [r3, #16]
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200013e0 	.word	0x200013e0
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	e14f      	b.n	800176c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <HAL_GPIO_Init+0x28>
 80014e2:	e140      	b.n	8001766 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d005      	beq.n	80014fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d130      	bne.n	800155e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	409a      	lsls	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	43da      	mvns	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	2201      	movs	r2, #1
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	4013      	ands	r3, r2
 8001566:	2b03      	cmp	r3, #3
 8001568:	d017      	beq.n	800159a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d123      	bne.n	80015ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	58d3      	ldr	r3, [r2, r3]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4013      	ands	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2107      	movs	r1, #7
 80015d2:	400b      	ands	r3, r1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	401a      	ands	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	23c0      	movs	r3, #192	; 0xc0
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	4013      	ands	r3, r2
 800162c:	d100      	bne.n	8001630 <HAL_GPIO_Init+0x174>
 800162e:	e09a      	b.n	8001766 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b54      	ldr	r3, [pc, #336]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001632:	699a      	ldr	r2, [r3, #24]
 8001634:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	619a      	str	r2, [r3, #24]
 800163c:	4b51      	ldr	r3, [pc, #324]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	2201      	movs	r2, #1
 8001642:	4013      	ands	r3, r2
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001648:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	3302      	adds	r3, #2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	589b      	ldr	r3, [r3, r2]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	409a      	lsls	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	2390      	movs	r3, #144	; 0x90
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	429a      	cmp	r2, r3
 8001674:	d013      	beq.n	800169e <HAL_GPIO_Init+0x1e2>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a44      	ldr	r2, [pc, #272]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00d      	beq.n	800169a <HAL_GPIO_Init+0x1de>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a43      	ldr	r2, [pc, #268]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0x1da>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a42      	ldr	r2, [pc, #264]	; (8001794 <HAL_GPIO_Init+0x2d8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d101      	bne.n	8001692 <HAL_GPIO_Init+0x1d6>
 800168e:	2303      	movs	r3, #3
 8001690:	e006      	b.n	80016a0 <HAL_GPIO_Init+0x1e4>
 8001692:	2305      	movs	r3, #5
 8001694:	e004      	b.n	80016a0 <HAL_GPIO_Init+0x1e4>
 8001696:	2302      	movs	r3, #2
 8001698:	e002      	b.n	80016a0 <HAL_GPIO_Init+0x1e4>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <HAL_GPIO_Init+0x1e4>
 800169e:	2300      	movs	r3, #0
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	2103      	movs	r1, #3
 80016a4:	400a      	ands	r2, r1
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	4093      	lsls	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b0:	4935      	ldr	r1, [pc, #212]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	089b      	lsrs	r3, r3, #2
 80016b6:	3302      	adds	r3, #2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43da      	mvns	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	035b      	lsls	r3, r3, #13
 80016d6:	4013      	ands	r3, r2
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43da      	mvns	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	039b      	lsls	r3, r3, #14
 8001700:	4013      	ands	r3, r2
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43da      	mvns	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	029b      	lsls	r3, r3, #10
 800172a:	4013      	ands	r3, r2
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001736:	4b18      	ldr	r3, [pc, #96]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	025b      	lsls	r3, r3, #9
 8001754:	4013      	ands	r3, r2
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3301      	adds	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	40da      	lsrs	r2, r3
 8001774:	1e13      	subs	r3, r2, #0
 8001776:	d000      	beq.n	800177a <HAL_GPIO_Init+0x2be>
 8001778:	e6a8      	b.n	80014cc <HAL_GPIO_Init+0x10>
  } 
}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	b006      	add	sp, #24
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	48000400 	.word	0x48000400
 8001790:	48000800 	.word	0x48000800
 8001794:	48000c00 	.word	0x48000c00
 8001798:	40010400 	.word	0x40010400

0800179c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	000a      	movs	r2, r1
 80017a6:	1cbb      	adds	r3, r7, #2
 80017a8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	1cba      	adds	r2, r7, #2
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	4013      	ands	r3, r2
 80017b4:	d004      	beq.n	80017c0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80017b6:	230f      	movs	r3, #15
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e003      	b.n	80017c8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017c0:	230f      	movs	r3, #15
 80017c2:	18fb      	adds	r3, r7, r3
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80017c8:	230f      	movs	r3, #15
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	781b      	ldrb	r3, [r3, #0]
  }
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	0008      	movs	r0, r1
 80017e0:	0011      	movs	r1, r2
 80017e2:	1cbb      	adds	r3, r7, #2
 80017e4:	1c02      	adds	r2, r0, #0
 80017e6:	801a      	strh	r2, [r3, #0]
 80017e8:	1c7b      	adds	r3, r7, #1
 80017ea:	1c0a      	adds	r2, r1, #0
 80017ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ee:	1c7b      	adds	r3, r7, #1
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	881a      	ldrh	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017fe:	e003      	b.n	8001808 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001800:	1cbb      	adds	r3, r7, #2
 8001802:	881a      	ldrh	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e301      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x1e>
 800182c:	e08d      	b.n	800194a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800182e:	4bc3      	ldr	r3, [pc, #780]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	220c      	movs	r2, #12
 8001834:	4013      	ands	r3, r2
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00e      	beq.n	8001858 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183a:	4bc0      	ldr	r3, [pc, #768]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	220c      	movs	r2, #12
 8001840:	4013      	ands	r3, r2
 8001842:	2b08      	cmp	r3, #8
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x64>
 8001846:	4bbd      	ldr	r3, [pc, #756]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	025b      	lsls	r3, r3, #9
 800184e:	401a      	ands	r2, r3
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	025b      	lsls	r3, r3, #9
 8001854:	429a      	cmp	r2, r3
 8001856:	d10d      	bne.n	8001874 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001858:	4bb8      	ldr	r3, [pc, #736]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	029b      	lsls	r3, r3, #10
 8001860:	4013      	ands	r3, r2
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x56>
 8001864:	e070      	b.n	8001948 <HAL_RCC_OscConfig+0x138>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d000      	beq.n	8001870 <HAL_RCC_OscConfig+0x60>
 800186e:	e06b      	b.n	8001948 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e2d8      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d107      	bne.n	800188c <HAL_RCC_OscConfig+0x7c>
 800187c:	4baf      	ldr	r3, [pc, #700]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4bae      	ldr	r3, [pc, #696]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001882:	2180      	movs	r1, #128	; 0x80
 8001884:	0249      	lsls	r1, r1, #9
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e02f      	b.n	80018ec <HAL_RCC_OscConfig+0xdc>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x9e>
 8001894:	4ba9      	ldr	r3, [pc, #676]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4ba8      	ldr	r3, [pc, #672]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800189a:	49a9      	ldr	r1, [pc, #676]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	4ba6      	ldr	r3, [pc, #664]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4ba5      	ldr	r3, [pc, #660]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018a6:	49a7      	ldr	r1, [pc, #668]	; (8001b44 <HAL_RCC_OscConfig+0x334>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e01e      	b.n	80018ec <HAL_RCC_OscConfig+0xdc>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d10e      	bne.n	80018d4 <HAL_RCC_OscConfig+0xc4>
 80018b6:	4ba1      	ldr	r3, [pc, #644]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4ba0      	ldr	r3, [pc, #640]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	02c9      	lsls	r1, r1, #11
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4b9d      	ldr	r3, [pc, #628]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b9c      	ldr	r3, [pc, #624]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0249      	lsls	r1, r1, #9
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e00b      	b.n	80018ec <HAL_RCC_OscConfig+0xdc>
 80018d4:	4b99      	ldr	r3, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b98      	ldr	r3, [pc, #608]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018da:	4999      	ldr	r1, [pc, #612]	; (8001b40 <HAL_RCC_OscConfig+0x330>)
 80018dc:	400a      	ands	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	4b96      	ldr	r3, [pc, #600]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b95      	ldr	r3, [pc, #596]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80018e6:	4997      	ldr	r1, [pc, #604]	; (8001b44 <HAL_RCC_OscConfig+0x334>)
 80018e8:	400a      	ands	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d014      	beq.n	800191e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff f8be 	bl	8000a74 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fe:	f7ff f8b9 	bl	8000a74 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	; 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e28a      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001910:	4b8a      	ldr	r3, [pc, #552]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	029b      	lsls	r3, r3, #10
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0xee>
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191e:	f7ff f8a9 	bl	8000a74 <HAL_GetTick>
 8001922:	0003      	movs	r3, r0
 8001924:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff f8a4 	bl	8000a74 <HAL_GetTick>
 800192c:	0002      	movs	r2, r0
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e275      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b80      	ldr	r3, [pc, #512]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	029b      	lsls	r3, r3, #10
 8001942:	4013      	ands	r3, r2
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x118>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2202      	movs	r2, #2
 8001950:	4013      	ands	r3, r2
 8001952:	d100      	bne.n	8001956 <HAL_RCC_OscConfig+0x146>
 8001954:	e069      	b.n	8001a2a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001956:	4b79      	ldr	r3, [pc, #484]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	220c      	movs	r2, #12
 800195c:	4013      	ands	r3, r2
 800195e:	d00b      	beq.n	8001978 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001960:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	220c      	movs	r2, #12
 8001966:	4013      	ands	r3, r2
 8001968:	2b08      	cmp	r3, #8
 800196a:	d11c      	bne.n	80019a6 <HAL_RCC_OscConfig+0x196>
 800196c:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d116      	bne.n	80019a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001978:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	d005      	beq.n	800198e <HAL_RCC_OscConfig+0x17e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e24b      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198e:	4b6b      	ldr	r3, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	22f8      	movs	r2, #248	; 0xf8
 8001994:	4393      	bics	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	00da      	lsls	r2, r3, #3
 800199e:	4b67      	ldr	r3, [pc, #412]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a4:	e041      	b.n	8001a2a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d024      	beq.n	80019f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ae:	4b63      	ldr	r3, [pc, #396]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff f85b 	bl	8000a74 <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff f856 	bl	8000a74 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e227      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d0f1      	beq.n	80019c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b56      	ldr	r3, [pc, #344]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	22f8      	movs	r2, #248	; 0xf8
 80019e6:	4393      	bics	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00da      	lsls	r2, r3, #3
 80019f0:	4b52      	ldr	r3, [pc, #328]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019f2:	430a      	orrs	r2, r1
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	e018      	b.n	8001a2a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	438a      	bics	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f836 	bl	8000a74 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f831 	bl	8000a74 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e202      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a20:	4b46      	ldr	r3, [pc, #280]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f1      	bne.n	8001a0e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	4013      	ands	r3, r2
 8001a32:	d036      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d019      	beq.n	8001a70 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3c:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a40:	4b3e      	ldr	r3, [pc, #248]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	430a      	orrs	r2, r1
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff f814 	bl	8000a74 <HAL_GetTick>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a52:	f7ff f80f 	bl	8000a74 <HAL_GetTick>
 8001a56:	0002      	movs	r2, r0
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e1e0      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d0f1      	beq.n	8001a52 <HAL_RCC_OscConfig+0x242>
 8001a6e:	e018      	b.n	8001aa2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a74:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	438a      	bics	r2, r1
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7c:	f7fe fffa 	bl	8000a74 <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a86:	f7fe fff5 	bl	8000a74 <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e1c6      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d1f1      	bne.n	8001a86 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d100      	bne.n	8001aae <HAL_RCC_OscConfig+0x29e>
 8001aac:	e0b4      	b.n	8001c18 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aae:	201f      	movs	r0, #31
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	055b      	lsls	r3, r3, #21
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d110      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0549      	lsls	r1, r1, #21
 8001acc:	430a      	orrs	r2, r1
 8001ace:	61da      	str	r2, [r3, #28]
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	69da      	ldr	r2, [r3, #28]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	055b      	lsls	r3, r3, #21
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ade:	183b      	adds	r3, r7, r0
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d11a      	bne.n	8001b26 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afe:	f7fe ffb9 	bl	8000a74 <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b08:	f7fe ffb4 	bl	8000a74 <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e185      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x338>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d10e      	bne.n	8001b4c <HAL_RCC_OscConfig+0x33c>
 8001b2e:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001b30:	6a1a      	ldr	r2, [r3, #32]
 8001b32:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <HAL_RCC_OscConfig+0x32c>)
 8001b34:	2101      	movs	r1, #1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	621a      	str	r2, [r3, #32]
 8001b3a:	e035      	b.n	8001ba8 <HAL_RCC_OscConfig+0x398>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	fffeffff 	.word	0xfffeffff
 8001b44:	fffbffff 	.word	0xfffbffff
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10c      	bne.n	8001b6e <HAL_RCC_OscConfig+0x35e>
 8001b54:	4bb6      	ldr	r3, [pc, #728]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	4bb5      	ldr	r3, [pc, #724]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	621a      	str	r2, [r3, #32]
 8001b60:	4bb3      	ldr	r3, [pc, #716]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b62:	6a1a      	ldr	r2, [r3, #32]
 8001b64:	4bb2      	ldr	r3, [pc, #712]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b66:	2104      	movs	r1, #4
 8001b68:	438a      	bics	r2, r1
 8001b6a:	621a      	str	r2, [r3, #32]
 8001b6c:	e01c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x398>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2b05      	cmp	r3, #5
 8001b74:	d10c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x380>
 8001b76:	4bae      	ldr	r3, [pc, #696]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b78:	6a1a      	ldr	r2, [r3, #32]
 8001b7a:	4bad      	ldr	r3, [pc, #692]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	621a      	str	r2, [r3, #32]
 8001b82:	4bab      	ldr	r3, [pc, #684]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b84:	6a1a      	ldr	r2, [r3, #32]
 8001b86:	4baa      	ldr	r3, [pc, #680]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	621a      	str	r2, [r3, #32]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x398>
 8001b90:	4ba7      	ldr	r3, [pc, #668]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4ba6      	ldr	r3, [pc, #664]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	621a      	str	r2, [r3, #32]
 8001b9c:	4ba4      	ldr	r3, [pc, #656]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001b9e:	6a1a      	ldr	r2, [r3, #32]
 8001ba0:	4ba3      	ldr	r3, [pc, #652]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d014      	beq.n	8001bda <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7fe ff60 	bl	8000a74 <HAL_GetTick>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	e009      	b.n	8001bce <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bba:	f7fe ff5b 	bl	8000a74 <HAL_GetTick>
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	4a9b      	ldr	r2, [pc, #620]	; (8001e34 <HAL_RCC_OscConfig+0x624>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e12b      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bce:	4b98      	ldr	r3, [pc, #608]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x3aa>
 8001bd8:	e013      	b.n	8001c02 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7fe ff4b 	bl	8000a74 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be2:	e009      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7fe ff46 	bl	8000a74 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	4a91      	ldr	r2, [pc, #580]	; (8001e34 <HAL_RCC_OscConfig+0x624>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e116      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf8:	4b8d      	ldr	r3, [pc, #564]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c02:	231f      	movs	r3, #31
 8001c04:	18fb      	adds	r3, r7, r3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c12:	4989      	ldr	r1, [pc, #548]	; (8001e38 <HAL_RCC_OscConfig+0x628>)
 8001c14:	400a      	ands	r2, r1
 8001c16:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d12a      	bne.n	8001c80 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c2a:	4b81      	ldr	r3, [pc, #516]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2e:	4b80      	ldr	r3, [pc, #512]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c30:	2104      	movs	r1, #4
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c36:	4b7e      	ldr	r3, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7fe ff17 	bl	8000a74 <HAL_GetTick>
 8001c46:	0003      	movs	r3, r0
 8001c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c4c:	f7fe ff12 	bl	8000a74 <HAL_GetTick>
 8001c50:	0002      	movs	r2, r0
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0e3      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c5e:	4b74      	ldr	r3, [pc, #464]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d0f1      	beq.n	8001c4c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c68:	4b71      	ldr	r3, [pc, #452]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6c:	22f8      	movs	r2, #248	; 0xf8
 8001c6e:	4393      	bics	r3, r2
 8001c70:	0019      	movs	r1, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	00da      	lsls	r2, r3, #3
 8001c78:	4b6d      	ldr	r3, [pc, #436]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c7e:	e034      	b.n	8001cea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	3305      	adds	r3, #5
 8001c86:	d111      	bne.n	8001cac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c88:	4b69      	ldr	r3, [pc, #420]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	4b68      	ldr	r3, [pc, #416]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	2104      	movs	r1, #4
 8001c90:	438a      	bics	r2, r1
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c98:	22f8      	movs	r2, #248	; 0xf8
 8001c9a:	4393      	bics	r3, r2
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	00da      	lsls	r2, r3, #3
 8001ca4:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cac:	4b60      	ldr	r3, [pc, #384]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001cb8:	4b5d      	ldr	r3, [pc, #372]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cbc:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	438a      	bics	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7fe fed6 	bl	8000a74 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001cce:	f7fe fed1 	bl	8000a74 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e0a2      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ce0:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d1f1      	bne.n	8001cce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x4e4>
 8001cf2:	e097      	b.n	8001e24 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	220c      	movs	r2, #12
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d100      	bne.n	8001d02 <HAL_RCC_OscConfig+0x4f2>
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d14c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b48      	ldr	r3, [pc, #288]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d10:	494a      	ldr	r1, [pc, #296]	; (8001e3c <HAL_RCC_OscConfig+0x62c>)
 8001d12:	400a      	ands	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7fe fead 	bl	8000a74 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7fe fea8 	bl	8000a74 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e079      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	049b      	lsls	r3, r3, #18
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3e:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	220f      	movs	r2, #15
 8001d44:	4393      	bics	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4c:	4b38      	ldr	r3, [pc, #224]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4a3a      	ldr	r2, [pc, #232]	; (8001e40 <HAL_RCC_OscConfig+0x630>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	431a      	orrs	r2, r3
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	0449      	lsls	r1, r1, #17
 8001d76:	430a      	orrs	r2, r1
 8001d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fe7b 	bl	8000a74 <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d84:	f7fe fe76 	bl	8000a74 <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e047      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	049b      	lsls	r3, r3, #18
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0x574>
 8001da2:	e03f      	b.n	8001e24 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da4:	4b22      	ldr	r3, [pc, #136]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001daa:	4924      	ldr	r1, [pc, #144]	; (8001e3c <HAL_RCC_OscConfig+0x62c>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fe60 	bl	8000a74 <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dba:	f7fe fe5b 	bl	8000a74 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e02c      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	049b      	lsls	r3, r3, #18
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x5aa>
 8001dd8:	e024      	b.n	8001e24 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e01f      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001de6:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <HAL_RCC_OscConfig+0x620>)
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	025b      	lsls	r3, r3, #9
 8001df8:	401a      	ands	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d10e      	bne.n	8001e20 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	220f      	movs	r2, #15
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	23f0      	movs	r3, #240	; 0xf0
 8001e14:	039b      	lsls	r3, r3, #14
 8001e16:	401a      	ands	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b008      	add	sp, #32
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40021000 	.word	0x40021000
 8001e34:	00001388 	.word	0x00001388
 8001e38:	efffffff 	.word	0xefffffff
 8001e3c:	feffffff 	.word	0xfeffffff
 8001e40:	ffc2ffff 	.word	0xffc2ffff

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0b3      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b5b      	ldr	r3, [pc, #364]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d911      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e09a      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d006      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001ea4:	21e0      	movs	r1, #224	; 0xe0
 8001ea6:	00c9      	lsls	r1, r1, #3
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	22f0      	movs	r2, #240	; 0xf0
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	4b44      	ldr	r3, [pc, #272]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d040      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	d114      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e06e      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b38      	ldr	r3, [pc, #224]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	049b      	lsls	r3, r3, #18
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d108      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e062      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e05b      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4393      	bics	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f1c:	f7fe fdaa 	bl	8000a74 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f24:	e009      	b.n	8001f3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f26:	f7fe fda5 	bl	8000a74 <HAL_GetTick>
 8001f2a:	0002      	movs	r2, r0
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_RCC_ClockConfig+0x18c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e042      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	220c      	movs	r2, #12
 8001f40:	401a      	ands	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d1ec      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d211      	bcs.n	8001f7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_RCC_ClockConfig+0x184>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d001      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e020      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2204      	movs	r2, #4
 8001f84:	4013      	ands	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a11      	ldr	r2, [pc, #68]	; (8001fd4 <HAL_RCC_ClockConfig+0x190>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f9c:	f000 f820 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_RCC_ClockConfig+0x188>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	220f      	movs	r2, #15
 8001faa:	4013      	ands	r3, r2
 8001fac:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x194>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	40da      	lsrs	r2, r3
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x198>)
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7fe fd15 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b004      	add	sp, #16
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	00001388 	.word	0x00001388
 8001fd4:	fffff8ff 	.word	0xfffff8ff
 8001fd8:	0800b554 	.word	0x0800b554
 8001fdc:	200006a0 	.word	0x200006a0

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	220c      	movs	r2, #12
 8002004:	4013      	ands	r3, r2
 8002006:	2b04      	cmp	r3, #4
 8002008:	d002      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x30>
 800200a:	2b08      	cmp	r3, #8
 800200c:	d003      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x36>
 800200e:	e02c      	b.n	800206a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002012:	613b      	str	r3, [r7, #16]
      break;
 8002014:	e02c      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	0c9b      	lsrs	r3, r3, #18
 800201a:	220f      	movs	r2, #15
 800201c:	4013      	ands	r3, r2
 800201e:	4a19      	ldr	r2, [pc, #100]	; (8002084 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	220f      	movs	r2, #15
 800202a:	4013      	ands	r3, r2
 800202c:	4a16      	ldr	r2, [pc, #88]	; (8002088 <HAL_RCC_GetSysClockFreq+0xa8>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	025b      	lsls	r3, r3, #9
 8002038:	4013      	ands	r3, r2
 800203a:	d009      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	4810      	ldr	r0, [pc, #64]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002040:	f7fe f874 	bl	800012c <__udivsi3>
 8002044:	0003      	movs	r3, r0
 8002046:	001a      	movs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4353      	muls	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	e009      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	000a      	movs	r2, r1
 8002054:	0152      	lsls	r2, r2, #5
 8002056:	1a52      	subs	r2, r2, r1
 8002058:	0193      	lsls	r3, r2, #6
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	185b      	adds	r3, r3, r1
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	613b      	str	r3, [r7, #16]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0xa0>)
 800206c:	613b      	str	r3, [r7, #16]
      break;
 800206e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002070:	693b      	ldr	r3, [r7, #16]
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b006      	add	sp, #24
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	40021000 	.word	0x40021000
 8002080:	007a1200 	.word	0x007a1200
 8002084:	0800b3e8 	.word	0x0800b3e8
 8002088:	0800b3f8 	.word	0x0800b3f8

0800208c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b02      	ldr	r3, [pc, #8]	; (800209c <HAL_RCC_GetHCLKFreq+0x10>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	200006a0 	.word	0x200006a0

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80020a4:	f7ff fff2 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020a8:	0001      	movs	r1, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	0a1b      	lsrs	r3, r3, #8
 80020b0:	2207      	movs	r2, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020b6:	5cd3      	ldrb	r3, [r2, r3]
 80020b8:	40d9      	lsrs	r1, r3
 80020ba:	000b      	movs	r3, r1
}    
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	46c0      	nop			; (mov r8, r8)
 80020c4:	40021000 	.word	0x40021000
 80020c8:	0800b564 	.word	0x0800b564

080020cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0a8      	b.n	8002230 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	2382      	movs	r3, #130	; 0x82
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d009      	beq.n	8002106 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
 80020f8:	e005      	b.n	8002106 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	225d      	movs	r2, #93	; 0x5d
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d107      	bne.n	8002128 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	225c      	movs	r2, #92	; 0x5c
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	0018      	movs	r0, r3
 8002124:	f008 fc26 	bl	800a974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	225d      	movs	r2, #93	; 0x5d
 800212c:	2102      	movs	r1, #2
 800212e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	438a      	bics	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	23e0      	movs	r3, #224	; 0xe0
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	429a      	cmp	r2, r3
 800214a:	d902      	bls.n	8002152 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e002      	b.n	8002158 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	23f0      	movs	r3, #240	; 0xf0
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	429a      	cmp	r2, r3
 8002162:	d008      	beq.n	8002176 <HAL_SPI_Init+0xaa>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	23e0      	movs	r3, #224	; 0xe0
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	429a      	cmp	r2, r3
 800216e:	d002      	beq.n	8002176 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	2382      	movs	r3, #130	; 0x82
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	401a      	ands	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	2384      	movs	r3, #132	; 0x84
 8002186:	021b      	lsls	r3, r3, #8
 8002188:	400b      	ands	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	2102      	movs	r1, #2
 8002192:	400b      	ands	r3, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	2101      	movs	r1, #1
 800219c:	400b      	ands	r3, r1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6999      	ldr	r1, [r3, #24]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	400b      	ands	r3, r1
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	2138      	movs	r1, #56	; 0x38
 80021b2:	400b      	ands	r3, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	400b      	ands	r3, r1
 80021be:	431a      	orrs	r2, r3
 80021c0:	0011      	movs	r1, r2
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	019b      	lsls	r3, r3, #6
 80021ca:	401a      	ands	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	2204      	movs	r2, #4
 80021dc:	401a      	ands	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2110      	movs	r1, #16
 80021e4:	400b      	ands	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ec:	2108      	movs	r1, #8
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68d9      	ldr	r1, [r3, #12]
 80021f6:	23f0      	movs	r3, #240	; 0xf0
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	400b      	ands	r3, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	0011      	movs	r1, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	015b      	lsls	r3, r3, #5
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69da      	ldr	r2, [r3, #28]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4907      	ldr	r1, [pc, #28]	; (8002238 <HAL_SPI_Init+0x16c>)
 800221c:	400a      	ands	r2, r1
 800221e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	225d      	movs	r2, #93	; 0x5d
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b004      	add	sp, #16
 8002236:	bd80      	pop	{r7, pc}
 8002238:	fffff7ff 	.word	0xfffff7ff

0800223c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	1dbb      	adds	r3, r7, #6
 800224a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800224c:	231f      	movs	r3, #31
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	225c      	movs	r2, #92	; 0x5c
 8002258:	5c9b      	ldrb	r3, [r3, r2]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_SPI_Transmit+0x26>
 800225e:	2302      	movs	r3, #2
 8002260:	e147      	b.n	80024f2 <HAL_SPI_Transmit+0x2b6>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	225c      	movs	r2, #92	; 0x5c
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800226a:	f7fe fc03 	bl	8000a74 <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002272:	2316      	movs	r3, #22
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	1dba      	adds	r2, r7, #6
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	225d      	movs	r2, #93	; 0x5d
 8002280:	5c9b      	ldrb	r3, [r3, r2]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d004      	beq.n	8002292 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002290:	e128      	b.n	80024e4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_SPI_Transmit+0x64>
 8002298:	1dbb      	adds	r3, r7, #6
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80022a0:	231f      	movs	r3, #31
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80022a8:	e11c      	b.n	80024e4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	225d      	movs	r2, #93	; 0x5d
 80022ae:	2103      	movs	r1, #3
 80022b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1dba      	adds	r2, r7, #6
 80022c2:	8812      	ldrh	r2, [r2, #0]
 80022c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1dba      	adds	r2, r7, #6
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2244      	movs	r2, #68	; 0x44
 80022d8:	2100      	movs	r1, #0
 80022da:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2246      	movs	r2, #70	; 0x46
 80022e0:	2100      	movs	r1, #0
 80022e2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	021b      	lsls	r3, r3, #8
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d110      	bne.n	800231e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2140      	movs	r1, #64	; 0x40
 8002308:	438a      	bics	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2180      	movs	r1, #128	; 0x80
 8002318:	01c9      	lsls	r1, r1, #7
 800231a:	430a      	orrs	r2, r1
 800231c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2240      	movs	r2, #64	; 0x40
 8002326:	4013      	ands	r3, r2
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d007      	beq.n	800233c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2140      	movs	r1, #64	; 0x40
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	23e0      	movs	r3, #224	; 0xe0
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	429a      	cmp	r2, r3
 8002346:	d952      	bls.n	80023ee <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <HAL_SPI_Transmit+0x11e>
 8002350:	2316      	movs	r3, #22
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d143      	bne.n	80023e2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	1c9a      	adds	r2, r3, #2
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800237e:	e030      	b.n	80023e2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2202      	movs	r2, #2
 8002388:	4013      	ands	r3, r2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d112      	bne.n	80023b4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	1c9a      	adds	r2, r3, #2
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023b2:	e016      	b.n	80023e2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023b4:	f7fe fb5e 	bl	8000a74 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d802      	bhi.n	80023ca <HAL_SPI_Transmit+0x18e>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	d102      	bne.n	80023d0 <HAL_SPI_Transmit+0x194>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d108      	bne.n	80023e2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80023d0:	231f      	movs	r3, #31
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2203      	movs	r2, #3
 80023d6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	225d      	movs	r2, #93	; 0x5d
 80023dc:	2101      	movs	r1, #1
 80023de:	5499      	strb	r1, [r3, r2]
          goto error;
 80023e0:	e080      	b.n	80024e4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1c9      	bne.n	8002380 <HAL_SPI_Transmit+0x144>
 80023ec:	e053      	b.n	8002496 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_SPI_Transmit+0x1c4>
 80023f6:	2316      	movs	r3, #22
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d145      	bne.n	800248c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	330c      	adds	r3, #12
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002426:	e031      	b.n	800248c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2202      	movs	r2, #2
 8002430:	4013      	ands	r3, r2
 8002432:	2b02      	cmp	r3, #2
 8002434:	d113      	bne.n	800245e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800245c:	e016      	b.n	800248c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800245e:	f7fe fb09 	bl	8000a74 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d802      	bhi.n	8002474 <HAL_SPI_Transmit+0x238>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	d102      	bne.n	800247a <HAL_SPI_Transmit+0x23e>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800247a:	231f      	movs	r3, #31
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2203      	movs	r2, #3
 8002480:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	225d      	movs	r2, #93	; 0x5d
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]
          goto error;
 800248a:	e02b      	b.n	80024e4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1c8      	bne.n	8002428 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	6839      	ldr	r1, [r7, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 fe0b 	bl	80030b8 <SPI_EndRxTxTransaction>
 80024a2:	1e03      	subs	r3, r0, #0
 80024a4:	d002      	beq.n	80024ac <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80024d2:	231f      	movs	r3, #31
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	2201      	movs	r2, #1
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	e003      	b.n	80024e4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	225d      	movs	r2, #93	; 0x5d
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	225c      	movs	r2, #92	; 0x5c
 80024e8:	2100      	movs	r1, #0
 80024ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024ec:	231f      	movs	r3, #31
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b008      	add	sp, #32
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	1dbb      	adds	r3, r7, #6
 800250a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800250c:	2117      	movs	r1, #23
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	225d      	movs	r2, #93	; 0x5d
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	d003      	beq.n	8002528 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
    goto error;
 8002526:	e12b      	b.n	8002780 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	2382      	movs	r3, #130	; 0x82
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	429a      	cmp	r2, r3
 8002532:	d113      	bne.n	800255c <HAL_SPI_Receive+0x60>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	225d      	movs	r2, #93	; 0x5d
 8002540:	2104      	movs	r1, #4
 8002542:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	881c      	ldrh	r4, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	0023      	movs	r3, r4
 8002554:	f000 f924 	bl	80027a0 <HAL_SPI_TransmitReceive>
 8002558:	0003      	movs	r3, r0
 800255a:	e118      	b.n	800278e <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	225c      	movs	r2, #92	; 0x5c
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_SPI_Receive+0x6e>
 8002566:	2302      	movs	r3, #2
 8002568:	e111      	b.n	800278e <HAL_SPI_Receive+0x292>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	225c      	movs	r2, #92	; 0x5c
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002572:	f7fe fa7f 	bl	8000a74 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_SPI_Receive+0x8c>
 8002580:	1dbb      	adds	r3, r7, #6
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002588:	2317      	movs	r3, #23
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002590:	e0f6      	b.n	8002780 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	225d      	movs	r2, #93	; 0x5d
 8002596:	2104      	movs	r1, #4
 8002598:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1dba      	adds	r2, r7, #6
 80025aa:	2144      	movs	r1, #68	; 0x44
 80025ac:	8812      	ldrh	r2, [r2, #0]
 80025ae:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1dba      	adds	r2, r7, #6
 80025b4:	2146      	movs	r1, #70	; 0x46
 80025b6:	8812      	ldrh	r2, [r2, #0]
 80025b8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	68da      	ldr	r2, [r3, #12]
 80025dc:	23e0      	movs	r3, #224	; 0xe0
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d908      	bls.n	80025f6 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	496a      	ldr	r1, [pc, #424]	; (8002798 <HAL_SPI_Receive+0x29c>)
 80025f0:	400a      	ands	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	e008      	b.n	8002608 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0149      	lsls	r1, r1, #5
 8002604:	430a      	orrs	r2, r1
 8002606:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	429a      	cmp	r2, r3
 8002612:	d10f      	bne.n	8002634 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2140      	movs	r1, #64	; 0x40
 8002620:	438a      	bics	r2, r1
 8002622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	495b      	ldr	r1, [pc, #364]	; (800279c <HAL_SPI_Receive+0x2a0>)
 8002630:	400a      	ands	r2, r1
 8002632:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2240      	movs	r2, #64	; 0x40
 800263c:	4013      	ands	r3, r2
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d007      	beq.n	8002652 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2140      	movs	r1, #64	; 0x40
 800264e:	430a      	orrs	r2, r1
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	23e0      	movs	r3, #224	; 0xe0
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	429a      	cmp	r2, r3
 800265c:	d900      	bls.n	8002660 <HAL_SPI_Receive+0x164>
 800265e:	e071      	b.n	8002744 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002660:	e035      	b.n	80026ce <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	2b01      	cmp	r3, #1
 800266e:	d117      	bne.n	80026a0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	001a      	movs	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2246      	movs	r2, #70	; 0x46
 8002690:	5a9b      	ldrh	r3, [r3, r2]
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b299      	uxth	r1, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2246      	movs	r2, #70	; 0x46
 800269c:	5299      	strh	r1, [r3, r2]
 800269e:	e016      	b.n	80026ce <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026a0:	f7fe f9e8 	bl	8000a74 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d802      	bhi.n	80026b6 <HAL_SPI_Receive+0x1ba>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_Receive+0x1c0>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d108      	bne.n	80026ce <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80026bc:	2317      	movs	r3, #23
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2203      	movs	r2, #3
 80026c2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	225d      	movs	r2, #93	; 0x5d
 80026c8:	2101      	movs	r1, #1
 80026ca:	5499      	strb	r1, [r3, r2]
          goto error;
 80026cc:	e058      	b.n	8002780 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2246      	movs	r2, #70	; 0x46
 80026d2:	5a9b      	ldrh	r3, [r3, r2]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1c3      	bne.n	8002662 <HAL_SPI_Receive+0x166>
 80026da:	e039      	b.n	8002750 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2201      	movs	r2, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d115      	bne.n	8002716 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	b292      	uxth	r2, r2
 80026f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	1c9a      	adds	r2, r3, #2
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2246      	movs	r2, #70	; 0x46
 8002706:	5a9b      	ldrh	r3, [r3, r2]
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b299      	uxth	r1, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2246      	movs	r2, #70	; 0x46
 8002712:	5299      	strh	r1, [r3, r2]
 8002714:	e016      	b.n	8002744 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002716:	f7fe f9ad 	bl	8000a74 <HAL_GetTick>
 800271a:	0002      	movs	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d802      	bhi.n	800272c <HAL_SPI_Receive+0x230>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	d102      	bne.n	8002732 <HAL_SPI_Receive+0x236>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d108      	bne.n	8002744 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002732:	2317      	movs	r3, #23
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2203      	movs	r2, #3
 8002738:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	225d      	movs	r2, #93	; 0x5d
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
          goto error;
 8002742:	e01d      	b.n	8002780 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2246      	movs	r2, #70	; 0x46
 8002748:	5a9b      	ldrh	r3, [r3, r2]
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1c5      	bne.n	80026dc <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	6839      	ldr	r1, [r7, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fc50 	bl	8002ffc <SPI_EndRxTransaction>
 800275c:	1e03      	subs	r3, r0, #0
 800275e:	d002      	beq.n	8002766 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2220      	movs	r2, #32
 8002764:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	2b00      	cmp	r3, #0
 800276c:	d004      	beq.n	8002778 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 800276e:	2317      	movs	r3, #23
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	2201      	movs	r2, #1
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e003      	b.n	8002780 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	225d      	movs	r2, #93	; 0x5d
 800277c:	2101      	movs	r1, #1
 800277e:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	225c      	movs	r2, #92	; 0x5c
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002788:	2317      	movs	r3, #23
 800278a:	18fb      	adds	r3, r7, r3
 800278c:	781b      	ldrb	r3, [r3, #0]
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b007      	add	sp, #28
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	ffffefff 	.word	0xffffefff
 800279c:	ffffbfff 	.word	0xffffbfff

080027a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	001a      	movs	r2, r3
 80027ae:	1cbb      	adds	r3, r7, #2
 80027b0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80027b2:	2301      	movs	r3, #1
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80027b6:	2323      	movs	r3, #35	; 0x23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	225c      	movs	r2, #92	; 0x5c
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_SPI_TransmitReceive+0x2c>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e1c4      	b.n	8002b56 <HAL_SPI_TransmitReceive+0x3b6>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	225c      	movs	r2, #92	; 0x5c
 80027d0:	2101      	movs	r1, #1
 80027d2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027d4:	f7fe f94e 	bl	8000a74 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027dc:	201b      	movs	r0, #27
 80027de:	183b      	adds	r3, r7, r0
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	215d      	movs	r1, #93	; 0x5d
 80027e4:	5c52      	ldrb	r2, [r2, r1]
 80027e6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80027ee:	2312      	movs	r3, #18
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	1cba      	adds	r2, r7, #2
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027f8:	183b      	adds	r3, r7, r0
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d011      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x84>
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	2382      	movs	r3, #130	; 0x82
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	429a      	cmp	r2, r3
 8002808:	d107      	bne.n	800281a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_SPI_TransmitReceive+0x7a>
 8002812:	183b      	adds	r3, r7, r0
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b04      	cmp	r3, #4
 8002818:	d004      	beq.n	8002824 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800281a:	2323      	movs	r3, #35	; 0x23
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
    goto error;
 8002822:	e191      	b.n	8002b48 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x98>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x98>
 8002830:	1cbb      	adds	r3, r7, #2
 8002832:	881b      	ldrh	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002838:	2323      	movs	r3, #35	; 0x23
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002840:	e182      	b.n	8002b48 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	225d      	movs	r2, #93	; 0x5d
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b04      	cmp	r3, #4
 800284c:	d003      	beq.n	8002856 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	225d      	movs	r2, #93	; 0x5d
 8002852:	2105      	movs	r1, #5
 8002854:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1cba      	adds	r2, r7, #2
 8002866:	2146      	movs	r1, #70	; 0x46
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1cba      	adds	r2, r7, #2
 8002870:	2144      	movs	r1, #68	; 0x44
 8002872:	8812      	ldrh	r2, [r2, #0]
 8002874:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1cba      	adds	r2, r7, #2
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1cba      	adds	r2, r7, #2
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	23e0      	movs	r3, #224	; 0xe0
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d908      	bls.n	80028b6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	49ac      	ldr	r1, [pc, #688]	; (8002b60 <HAL_SPI_TransmitReceive+0x3c0>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	e008      	b.n	80028c8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0149      	lsls	r1, r1, #5
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2240      	movs	r2, #64	; 0x40
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d007      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2140      	movs	r1, #64	; 0x40
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	23e0      	movs	r3, #224	; 0xe0
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d800      	bhi.n	80028f4 <HAL_SPI_TransmitReceive+0x154>
 80028f2:	e083      	b.n	80029fc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x168>
 80028fc:	2312      	movs	r3, #18
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d000      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x168>
 8002906:	e06d      	b.n	80029e4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	881a      	ldrh	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800292c:	e05a      	b.n	80029e4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2202      	movs	r2, #2
 8002936:	4013      	ands	r3, r2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d11b      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x1d4>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_SPI_TransmitReceive+0x1d4>
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	2b01      	cmp	r3, #1
 800294a:	d113      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	881a      	ldrh	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	1c9a      	adds	r2, r3, #2
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	2b01      	cmp	r3, #1
 8002980:	d11c      	bne.n	80029bc <HAL_SPI_TransmitReceive+0x21c>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2246      	movs	r2, #70	; 0x46
 8002986:	5a9b      	ldrh	r3, [r3, r2]
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	b292      	uxth	r2, r2
 800299a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	1c9a      	adds	r2, r3, #2
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2246      	movs	r2, #70	; 0x46
 80029aa:	5a9b      	ldrh	r3, [r3, r2]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b299      	uxth	r1, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2246      	movs	r2, #70	; 0x46
 80029b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029b8:	2301      	movs	r3, #1
 80029ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029bc:	f7fe f85a 	bl	8000a74 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d80b      	bhi.n	80029e4 <HAL_SPI_TransmitReceive+0x244>
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	3301      	adds	r3, #1
 80029d0:	d008      	beq.n	80029e4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80029d2:	2323      	movs	r3, #35	; 0x23
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2203      	movs	r2, #3
 80029d8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	225d      	movs	r2, #93	; 0x5d
 80029de:	2101      	movs	r1, #1
 80029e0:	5499      	strb	r1, [r3, r2]
        goto error;
 80029e2:	e0b1      	b.n	8002b48 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d19f      	bne.n	800292e <HAL_SPI_TransmitReceive+0x18e>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2246      	movs	r2, #70	; 0x46
 80029f2:	5a9b      	ldrh	r3, [r3, r2]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d199      	bne.n	800292e <HAL_SPI_TransmitReceive+0x18e>
 80029fa:	e089      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x270>
 8002a04:	2312      	movs	r3, #18
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d000      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x270>
 8002a0e:	e074      	b.n	8002afa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a36:	e060      	b.n	8002afa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d11c      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x2e0>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d017      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x2e0>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d114      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2201      	movs	r2, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d11e      	bne.n	8002acc <HAL_SPI_TransmitReceive+0x32c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2246      	movs	r2, #70	; 0x46
 8002a92:	5a9b      	ldrh	r3, [r3, r2]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2246      	movs	r2, #70	; 0x46
 8002aba:	5a9b      	ldrh	r3, [r3, r2]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b299      	uxth	r1, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2246      	movs	r2, #70	; 0x46
 8002ac6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002acc:	f7fd ffd2 	bl	8000a74 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d802      	bhi.n	8002ae2 <HAL_SPI_TransmitReceive+0x342>
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_SPI_TransmitReceive+0x348>
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d108      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002ae8:	2323      	movs	r3, #35	; 0x23
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2203      	movs	r2, #3
 8002aee:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	225d      	movs	r2, #93	; 0x5d
 8002af4:	2101      	movs	r1, #1
 8002af6:	5499      	strb	r1, [r3, r2]
        goto error;
 8002af8:	e026      	b.n	8002b48 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d199      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x298>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2246      	movs	r2, #70	; 0x46
 8002b08:	5a9b      	ldrh	r3, [r3, r2]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d193      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 face 	bl	80030b8 <SPI_EndRxTxTransaction>
 8002b1c:	1e03      	subs	r3, r0, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002b20:	2323      	movs	r3, #35	; 0x23
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002b36:	2323      	movs	r3, #35	; 0x23
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e003      	b.n	8002b48 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	225d      	movs	r2, #93	; 0x5d
 8002b44:	2101      	movs	r1, #1
 8002b46:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	225c      	movs	r2, #92	; 0x5c
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b50:	2323      	movs	r3, #35	; 0x23
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	781b      	ldrb	r3, [r3, #0]
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b00a      	add	sp, #40	; 0x28
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	ffffefff 	.word	0xffffefff

08002b64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	001a      	movs	r2, r3
 8002b82:	2301      	movs	r3, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d10f      	bne.n	8002ba8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b8e:	d00b      	beq.n	8002ba8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	001a      	movs	r2, r3
 8002b96:	2301      	movs	r3, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d005      	beq.n	8002ba8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	4798      	blx	r3
    return;
 8002ba6:	e0d5      	b.n	8002d54 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	001a      	movs	r2, r3
 8002bae:	2301      	movs	r3, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <HAL_SPI_IRQHandler+0x68>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	09db      	lsrs	r3, r3, #7
 8002bb8:	001a      	movs	r2, r3
 8002bba:	2301      	movs	r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d005      	beq.n	8002bcc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	0010      	movs	r0, r2
 8002bc8:	4798      	blx	r3
    return;
 8002bca:	e0c3      	b.n	8002d54 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_SPI_IRQHandler+0x8e>
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	001a      	movs	r2, r3
 8002bde:	2301      	movs	r3, #1
 8002be0:	4013      	ands	r3, r2
 8002be2:	d106      	bne.n	8002bf2 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	001a      	movs	r2, r3
 8002bea:	2301      	movs	r3, #1
 8002bec:	4013      	ands	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <HAL_SPI_IRQHandler+0x8e>
 8002bf0:	e0b0      	b.n	8002d54 <HAL_SPI_IRQHandler+0x1f0>
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d100      	bne.n	8002c00 <HAL_SPI_IRQHandler+0x9c>
 8002bfe:	e0a9      	b.n	8002d54 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	001a      	movs	r2, r3
 8002c06:	2301      	movs	r3, #1
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d023      	beq.n	8002c54 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	225d      	movs	r2, #93	; 0x5d
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d011      	beq.n	8002c3c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	e00b      	b.n	8002c54 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	693b      	ldr	r3, [r7, #16]
        return;
 8002c52:	e07f      	b.n	8002d54 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d014      	beq.n	8002c8a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	2201      	movs	r2, #1
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2140      	movs	r1, #64	; 0x40
 8002c84:	438a      	bics	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	001a      	movs	r2, r3
 8002c90:	2301      	movs	r3, #1
 8002c92:	4013      	ands	r3, r2
 8002c94:	d00c      	beq.n	8002cb0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c9a:	2208      	movs	r2, #8
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d04c      	beq.n	8002d52 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	21e0      	movs	r1, #224	; 0xe0
 8002cc4:	438a      	bics	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	225d      	movs	r2, #93	; 0x5d
 8002ccc:	2101      	movs	r1, #1
 8002cce:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d103      	bne.n	8002ce0 <HAL_SPI_IRQHandler+0x17c>
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d032      	beq.n	8002d46 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2103      	movs	r1, #3
 8002cec:	438a      	bics	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <HAL_SPI_IRQHandler+0x1f8>)
 8002cfe:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7fe f8a7 	bl	8000e58 <HAL_DMA_Abort_IT>
 8002d0a:	1e03      	subs	r3, r0, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	2240      	movs	r2, #64	; 0x40
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d26:	4a0d      	ldr	r2, [pc, #52]	; (8002d5c <HAL_SPI_IRQHandler+0x1f8>)
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f7fe f892 	bl	8000e58 <HAL_DMA_Abort_IT>
 8002d34:	1e03      	subs	r3, r0, #0
 8002d36:	d00b      	beq.n	8002d50 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d44:	e004      	b.n	8002d50 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f809 	bl	8002d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d4e:	e000      	b.n	8002d52 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002d50:	46c0      	nop			; (mov r8, r8)
    return;
 8002d52:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b008      	add	sp, #32
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	08002d71 	.word	0x08002d71

08002d60 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2246      	movs	r2, #70	; 0x46
 8002d82:	2100      	movs	r1, #0
 8002d84:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7ff ffe6 	bl	8002d60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002dac:	f7fd fe62 	bl	8000a74 <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	18d3      	adds	r3, r2, r3
 8002dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002dbc:	f7fd fe5a 	bl	8000a74 <HAL_GetTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002dc4:	4b3a      	ldr	r3, [pc, #232]	; (8002eb0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	015b      	lsls	r3, r3, #5
 8002dca:	0d1b      	lsrs	r3, r3, #20
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	4353      	muls	r3, r2
 8002dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dd2:	e058      	b.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	d055      	beq.n	8002e86 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dda:	f7fd fe4b 	bl	8000a74 <HAL_GetTick>
 8002dde:	0002      	movs	r2, r0
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d902      	bls.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d142      	bne.n	8002e76 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	21e0      	movs	r1, #224	; 0xe0
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	2382      	movs	r3, #130	; 0x82
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d113      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d005      	beq.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d107      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2140      	movs	r1, #64	; 0x40
 8002e30:	438a      	bics	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	019b      	lsls	r3, r3, #6
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d110      	bne.n	8002e62 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	491a      	ldr	r1, [pc, #104]	; (8002eb4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e4c:	400a      	ands	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2180      	movs	r1, #128	; 0x80
 8002e5c:	0189      	lsls	r1, r1, #6
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	225d      	movs	r2, #93	; 0x5d
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	225c      	movs	r2, #92	; 0x5c
 8002e6e:	2100      	movs	r1, #0
 8002e70:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e017      	b.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	425a      	negs	r2, r3
 8002e96:	4153      	adcs	r3, r2
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d197      	bne.n	8002dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b008      	add	sp, #32
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	200006a0 	.word	0x200006a0
 8002eb4:	ffffdfff 	.word	0xffffdfff

08002eb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ec6:	2317      	movs	r3, #23
 8002ec8:	18fb      	adds	r3, r7, r3
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ece:	f7fd fdd1 	bl	8000a74 <HAL_GetTick>
 8002ed2:	0002      	movs	r2, r0
 8002ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002ede:	f7fd fdc9 	bl	8000a74 <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330c      	adds	r3, #12
 8002eec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002eee:	4b41      	ldr	r3, [pc, #260]	; (8002ff4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	0013      	movs	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	189b      	adds	r3, r3, r2
 8002ef8:	00da      	lsls	r2, r3, #3
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	0d1b      	lsrs	r3, r3, #20
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	4353      	muls	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f04:	e068      	b.n	8002fd8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	23c0      	movs	r3, #192	; 0xc0
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d10a      	bne.n	8002f26 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	2117      	movs	r1, #23
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	d055      	beq.n	8002fd8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f2c:	f7fd fda2 	bl	8000a74 <HAL_GetTick>
 8002f30:	0002      	movs	r2, r0
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d902      	bls.n	8002f42 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d142      	bne.n	8002fc8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	21e0      	movs	r1, #224	; 0xe0
 8002f4e:	438a      	bics	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	2382      	movs	r3, #130	; 0x82
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d113      	bne.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d005      	beq.n	8002f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d107      	bne.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2140      	movs	r1, #64	; 0x40
 8002f82:	438a      	bics	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d110      	bne.n	8002fb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4916      	ldr	r1, [pc, #88]	; (8002ff8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002f9e:	400a      	ands	r2, r1
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0189      	lsls	r1, r1, #6
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	225d      	movs	r2, #93	; 0x5d
 8002fb8:	2101      	movs	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	225c      	movs	r2, #92	; 0x5c
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e010      	b.n	8002fea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d18e      	bne.n	8002f06 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b00a      	add	sp, #40	; 0x28
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	200006a0 	.word	0x200006a0
 8002ff8:	ffffdfff 	.word	0xffffdfff

08002ffc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	2382      	movs	r3, #130	; 0x82
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	429a      	cmp	r2, r3
 8003012:	d113      	bne.n	800303c <SPI_EndRxTransaction+0x40>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	429a      	cmp	r2, r3
 800301e:	d005      	beq.n	800302c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	429a      	cmp	r2, r3
 800302a:	d107      	bne.n	800303c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	438a      	bics	r2, r1
 800303a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	0013      	movs	r3, r2
 8003046:	2200      	movs	r2, #0
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	f7ff fea7 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d007      	beq.n	8003062 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003056:	2220      	movs	r2, #32
 8003058:	431a      	orrs	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e026      	b.n	80030b0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	2382      	movs	r3, #130	; 0x82
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	429a      	cmp	r2, r3
 800306c:	d11f      	bne.n	80030ae <SPI_EndRxTransaction+0xb2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	429a      	cmp	r2, r3
 8003078:	d005      	beq.n	8003086 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	2380      	movs	r3, #128	; 0x80
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	429a      	cmp	r2, r3
 8003084:	d113      	bne.n	80030ae <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	23c0      	movs	r3, #192	; 0xc0
 800308a:	00d9      	lsls	r1, r3, #3
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	0013      	movs	r3, r2
 8003094:	2200      	movs	r2, #0
 8003096:	f7ff ff0f 	bl	8002eb8 <SPI_WaitFifoStateUntilTimeout>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d007      	beq.n	80030ae <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	2220      	movs	r2, #32
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e000      	b.n	80030b0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b004      	add	sp, #16
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	23c0      	movs	r3, #192	; 0xc0
 80030c8:	0159      	lsls	r1, r3, #5
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	0013      	movs	r3, r2
 80030d2:	2200      	movs	r2, #0
 80030d4:	f7ff fef0 	bl	8002eb8 <SPI_WaitFifoStateUntilTimeout>
 80030d8:	1e03      	subs	r3, r0, #0
 80030da:	d007      	beq.n	80030ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e0:	2220      	movs	r2, #32
 80030e2:	431a      	orrs	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e027      	b.n	800313c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	0013      	movs	r3, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	f7ff fe4f 	bl	8002d9c <SPI_WaitFlagStateUntilTimeout>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d007      	beq.n	8003112 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	2220      	movs	r2, #32
 8003108:	431a      	orrs	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e014      	b.n	800313c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	23c0      	movs	r3, #192	; 0xc0
 8003116:	00d9      	lsls	r1, r3, #3
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	0013      	movs	r3, r2
 8003120:	2200      	movs	r2, #0
 8003122:	f7ff fec9 	bl	8002eb8 <SPI_WaitFifoStateUntilTimeout>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d007      	beq.n	800313a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	2220      	movs	r2, #32
 8003130:	431a      	orrs	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e000      	b.n	800313c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e042      	b.n	80031dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	223d      	movs	r2, #61	; 0x3d
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	223c      	movs	r2, #60	; 0x3c
 8003166:	2100      	movs	r1, #0
 8003168:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f007 fc55 	bl	800aa1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	223d      	movs	r2, #61	; 0x3d
 8003176:	2102      	movs	r1, #2
 8003178:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f000 f9b5 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2246      	movs	r2, #70	; 0x46
 800318e:	2101      	movs	r1, #1
 8003190:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	223e      	movs	r2, #62	; 0x3e
 8003196:	2101      	movs	r1, #1
 8003198:	5499      	strb	r1, [r3, r2]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	223f      	movs	r2, #63	; 0x3f
 800319e:	2101      	movs	r1, #1
 80031a0:	5499      	strb	r1, [r3, r2]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	2101      	movs	r1, #1
 80031a8:	5499      	strb	r1, [r3, r2]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2241      	movs	r2, #65	; 0x41
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2242      	movs	r2, #66	; 0x42
 80031b6:	2101      	movs	r1, #1
 80031b8:	5499      	strb	r1, [r3, r2]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2243      	movs	r2, #67	; 0x43
 80031be:	2101      	movs	r1, #1
 80031c0:	5499      	strb	r1, [r3, r2]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2244      	movs	r2, #68	; 0x44
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2245      	movs	r2, #69	; 0x45
 80031ce:	2101      	movs	r1, #1
 80031d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	223d      	movs	r2, #61	; 0x3d
 80031d6:	2101      	movs	r1, #1
 80031d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	0018      	movs	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	b002      	add	sp, #8
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	223d      	movs	r2, #61	; 0x3d
 80031f0:	5c9b      	ldrb	r3, [r3, r2]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d001      	beq.n	80031fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e035      	b.n	8003268 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	223d      	movs	r2, #61	; 0x3d
 8003200:	2102      	movs	r1, #2
 8003202:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	430a      	orrs	r2, r1
 8003212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a15      	ldr	r2, [pc, #84]	; (8003270 <HAL_TIM_Base_Start_IT+0x8c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d009      	beq.n	8003232 <HAL_TIM_Base_Start_IT+0x4e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a14      	ldr	r2, [pc, #80]	; (8003274 <HAL_TIM_Base_Start_IT+0x90>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d004      	beq.n	8003232 <HAL_TIM_Base_Start_IT+0x4e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a12      	ldr	r2, [pc, #72]	; (8003278 <HAL_TIM_Base_Start_IT+0x94>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d111      	bne.n	8003256 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2207      	movs	r2, #7
 800323a:	4013      	ands	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b06      	cmp	r3, #6
 8003242:	d010      	beq.n	8003266 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003254:	e007      	b.n	8003266 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b004      	add	sp, #16
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40012c00 	.word	0x40012c00
 8003274:	40000400 	.word	0x40000400
 8003278:	40014000 	.word	0x40014000

0800327c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2101      	movs	r1, #1
 8003290:	438a      	bics	r2, r1
 8003292:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_TIM_Base_Stop_IT+0x54>)
 800329c:	4013      	ands	r3, r2
 800329e:	d10d      	bne.n	80032bc <HAL_TIM_Base_Stop_IT+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <HAL_TIM_Base_Stop_IT+0x58>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	d107      	bne.n	80032bc <HAL_TIM_Base_Stop_IT+0x40>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2101      	movs	r1, #1
 80032b8:	438a      	bics	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	223d      	movs	r2, #61	; 0x3d
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	0018      	movs	r0, r3
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b002      	add	sp, #8
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	00001111 	.word	0x00001111
 80032d4:	00000444 	.word	0x00000444

080032d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	d021      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2202      	movs	r2, #2
 80032fc:	4013      	ands	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2203      	movs	r2, #3
 8003306:	4252      	negs	r2, r2
 8003308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2203      	movs	r2, #3
 8003318:	4013      	ands	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0018      	movs	r0, r3
 8003320:	f000 f8d0 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003324:	e007      	b.n	8003336 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0018      	movs	r0, r3
 800332a:	f000 f8c3 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f8cf 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2204      	movs	r2, #4
 8003340:	4013      	ands	r3, r2
 8003342:	d022      	beq.n	800338a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2204      	movs	r2, #4
 8003348:	4013      	ands	r3, r2
 800334a:	d01e      	beq.n	800338a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2205      	movs	r2, #5
 8003352:	4252      	negs	r2, r2
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	23c0      	movs	r3, #192	; 0xc0
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4013      	ands	r3, r2
 8003368:	d004      	beq.n	8003374 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 f8a9 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 8003372:	e007      	b.n	8003384 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f89c 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f8a8 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2208      	movs	r2, #8
 800338e:	4013      	ands	r3, r2
 8003390:	d021      	beq.n	80033d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2208      	movs	r2, #8
 8003396:	4013      	ands	r3, r2
 8003398:	d01d      	beq.n	80033d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2209      	movs	r2, #9
 80033a0:	4252      	negs	r2, r2
 80033a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2204      	movs	r2, #4
 80033a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2203      	movs	r2, #3
 80033b2:	4013      	ands	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 f883 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 80033be:	e007      	b.n	80033d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f876 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 f882 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2210      	movs	r2, #16
 80033da:	4013      	ands	r3, r2
 80033dc:	d022      	beq.n	8003424 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2210      	movs	r2, #16
 80033e2:	4013      	ands	r3, r2
 80033e4:	d01e      	beq.n	8003424 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2211      	movs	r2, #17
 80033ec:	4252      	negs	r2, r2
 80033ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2208      	movs	r2, #8
 80033f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69da      	ldr	r2, [r3, #28]
 80033fc:	23c0      	movs	r3, #192	; 0xc0
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4013      	ands	r3, r2
 8003402:	d004      	beq.n	800340e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f85c 	bl	80034c4 <HAL_TIM_IC_CaptureCallback>
 800340c:	e007      	b.n	800341e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f84f 	bl	80034b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 f85b 	bl	80034d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	2201      	movs	r2, #1
 8003428:	4013      	ands	r3, r2
 800342a:	d00c      	beq.n	8003446 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	4013      	ands	r3, r2
 8003432:	d008      	beq.n	8003446 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2202      	movs	r2, #2
 800343a:	4252      	negs	r2, r2
 800343c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f006 ff9b 	bl	800a37c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	2280      	movs	r2, #128	; 0x80
 800344a:	4013      	ands	r3, r2
 800344c:	d00c      	beq.n	8003468 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	4013      	ands	r3, r2
 8003454:	d008      	beq.n	8003468 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2281      	movs	r2, #129	; 0x81
 800345c:	4252      	negs	r2, r2
 800345e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f8d2 	bl	800360c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2240      	movs	r2, #64	; 0x40
 800346c:	4013      	ands	r3, r2
 800346e:	d00c      	beq.n	800348a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	4013      	ands	r3, r2
 8003476:	d008      	beq.n	800348a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2241      	movs	r2, #65	; 0x41
 800347e:	4252      	negs	r2, r2
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f82d 	bl	80034e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2220      	movs	r2, #32
 800348e:	4013      	ands	r3, r2
 8003490:	d00c      	beq.n	80034ac <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2220      	movs	r2, #32
 8003496:	4013      	ands	r3, r2
 8003498:	d008      	beq.n	80034ac <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2221      	movs	r2, #33	; 0x21
 80034a0:	4252      	negs	r2, r2
 80034a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 f8a8 	bl	80035fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b002      	add	sp, #8
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	46bd      	mov	sp, r7
 80034e0:	b002      	add	sp, #8
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b002      	add	sp, #8
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a36      	ldr	r2, [pc, #216]	; (80035e0 <TIM_Base_SetConfig+0xec>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d003      	beq.n	8003514 <TIM_Base_SetConfig+0x20>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a35      	ldr	r2, [pc, #212]	; (80035e4 <TIM_Base_SetConfig+0xf0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d108      	bne.n	8003526 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2270      	movs	r2, #112	; 0x70
 8003518:	4393      	bics	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4313      	orrs	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2d      	ldr	r2, [pc, #180]	; (80035e0 <TIM_Base_SetConfig+0xec>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <TIM_Base_SetConfig+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2c      	ldr	r2, [pc, #176]	; (80035e4 <TIM_Base_SetConfig+0xf0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_Base_SetConfig+0x62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2b      	ldr	r2, [pc, #172]	; (80035e8 <TIM_Base_SetConfig+0xf4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_Base_SetConfig+0x62>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <TIM_Base_SetConfig+0xf8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_Base_SetConfig+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <TIM_Base_SetConfig+0xfc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_Base_SetConfig+0x62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <TIM_Base_SetConfig+0x100>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <TIM_Base_SetConfig+0x104>)
 800355a:	4013      	ands	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	4393      	bics	r3, r2
 800356e:	001a      	movs	r2, r3
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <TIM_Base_SetConfig+0xec>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00b      	beq.n	80035ae <TIM_Base_SetConfig+0xba>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a14      	ldr	r2, [pc, #80]	; (80035ec <TIM_Base_SetConfig+0xf8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <TIM_Base_SetConfig+0xba>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a13      	ldr	r2, [pc, #76]	; (80035f0 <TIM_Base_SetConfig+0xfc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d003      	beq.n	80035ae <TIM_Base_SetConfig+0xba>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <TIM_Base_SetConfig+0x100>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d103      	bne.n	80035b6 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2201      	movs	r2, #1
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d106      	bne.n	80035d6 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4393      	bics	r3, r2
 80035d0:	001a      	movs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]
  }
}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b004      	add	sp, #16
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40002000 	.word	0x40002000
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800
 80035f8:	fffffcff 	.word	0xfffffcff

080035fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	46bd      	mov	sp, r7
 8003618:	b002      	add	sp, #8
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e044      	b.n	80036b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d107      	bne.n	8003646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2278      	movs	r2, #120	; 0x78
 800363a:	2100      	movs	r1, #0
 800363c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f007 fa11 	bl	800aa68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2224      	movs	r2, #36	; 0x24
 800364a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2101      	movs	r1, #1
 8003658:	438a      	bics	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	0018      	movs	r0, r3
 8003668:	f000 fcdc 	bl	8004024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 fb98 	bl	8003da4 <UART_SetConfig>
 8003674:	0003      	movs	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e01c      	b.n	80036b8 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	490d      	ldr	r1, [pc, #52]	; (80036c0 <HAL_UART_Init+0xa4>)
 800368a:	400a      	ands	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2108      	movs	r1, #8
 800369a:	438a      	bics	r2, r1
 800369c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2101      	movs	r1, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 fd6b 	bl	800418c <UART_CheckIdleState>
 80036b6:	0003      	movs	r3, r0
}
 80036b8:	0018      	movs	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b002      	add	sp, #8
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	fffff7ff 	.word	0xfffff7ff

080036c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	1dbb      	adds	r3, r7, #6
 80036d0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d000      	beq.n	80036dc <HAL_UART_Transmit_DMA+0x18>
 80036da:	e077      	b.n	80037cc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_UART_Transmit_DMA+0x26>
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06f      	b.n	80037ce <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	015b      	lsls	r3, r3, #5
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d109      	bne.n	800370e <HAL_UART_Transmit_DMA+0x4a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d105      	bne.n	800370e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2201      	movs	r2, #1
 8003706:	4013      	ands	r3, r2
 8003708:	d001      	beq.n	800370e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e05f      	b.n	80037ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1dba      	adds	r2, r7, #6
 8003718:	2150      	movs	r1, #80	; 0x50
 800371a:	8812      	ldrh	r2, [r2, #0]
 800371c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	1dba      	adds	r2, r7, #6
 8003722:	2152      	movs	r1, #82	; 0x52
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2284      	movs	r2, #132	; 0x84
 800372c:	2100      	movs	r1, #0
 800372e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2221      	movs	r2, #33	; 0x21
 8003734:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	2b00      	cmp	r3, #0
 800373c:	d027      	beq.n	800378e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <HAL_UART_Transmit_DMA+0x114>)
 8003744:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4a24      	ldr	r2, [pc, #144]	; (80037dc <HAL_UART_Transmit_DMA+0x118>)
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <HAL_UART_Transmit_DMA+0x11c>)
 8003754:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	2200      	movs	r2, #0
 800375c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003766:	0019      	movs	r1, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3328      	adds	r3, #40	; 0x28
 800376e:	001a      	movs	r2, r3
 8003770:	1dbb      	adds	r3, r7, #6
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	f7fd fad2 	bl	8000d1c <HAL_DMA_Start_IT>
 8003778:	1e03      	subs	r3, r0, #0
 800377a:	d008      	beq.n	800378e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2284      	movs	r2, #132	; 0x84
 8003780:	2110      	movs	r1, #16
 8003782:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e01f      	b.n	80037ce <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2240      	movs	r2, #64	; 0x40
 8003794:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003796:	f3ef 8310 	mrs	r3, PRIMASK
 800379a:	613b      	str	r3, [r7, #16]
  return(result);
 800379c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f383 8810 	msr	PRIMASK, r3
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f383 8810 	msr	PRIMASK, r3
}
 80037c6:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	e000      	b.n	80037ce <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037cc:	2302      	movs	r3, #2
  }
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b008      	add	sp, #32
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	0800460d 	.word	0x0800460d
 80037dc:	080046a1 	.word	0x080046a1
 80037e0:	0800482f 	.word	0x0800482f

080037e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b0ab      	sub	sp, #172	; 0xac
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	22a4      	movs	r2, #164	; 0xa4
 80037f4:	18b9      	adds	r1, r7, r2
 80037f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	20a0      	movs	r0, #160	; 0xa0
 8003800:	1839      	adds	r1, r7, r0
 8003802:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	219c      	movs	r1, #156	; 0x9c
 800380c:	1879      	adds	r1, r7, r1
 800380e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003810:	0011      	movs	r1, r2
 8003812:	18bb      	adds	r3, r7, r2
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a99      	ldr	r2, [pc, #612]	; (8003a7c <HAL_UART_IRQHandler+0x298>)
 8003818:	4013      	ands	r3, r2
 800381a:	2298      	movs	r2, #152	; 0x98
 800381c:	18bc      	adds	r4, r7, r2
 800381e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003820:	18bb      	adds	r3, r7, r2
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d114      	bne.n	8003852 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003828:	187b      	adds	r3, r7, r1
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2220      	movs	r2, #32
 800382e:	4013      	ands	r3, r2
 8003830:	d00f      	beq.n	8003852 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003832:	183b      	adds	r3, r7, r0
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2220      	movs	r2, #32
 8003838:	4013      	ands	r3, r2
 800383a:	d00a      	beq.n	8003852 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003840:	2b00      	cmp	r3, #0
 8003842:	d100      	bne.n	8003846 <HAL_UART_IRQHandler+0x62>
 8003844:	e286      	b.n	8003d54 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	0010      	movs	r0, r2
 800384e:	4798      	blx	r3
      }
      return;
 8003850:	e280      	b.n	8003d54 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003852:	2398      	movs	r3, #152	; 0x98
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d100      	bne.n	800385e <HAL_UART_IRQHandler+0x7a>
 800385c:	e114      	b.n	8003a88 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800385e:	239c      	movs	r3, #156	; 0x9c
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2201      	movs	r2, #1
 8003866:	4013      	ands	r3, r2
 8003868:	d106      	bne.n	8003878 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800386a:	23a0      	movs	r3, #160	; 0xa0
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a83      	ldr	r2, [pc, #524]	; (8003a80 <HAL_UART_IRQHandler+0x29c>)
 8003872:	4013      	ands	r3, r2
 8003874:	d100      	bne.n	8003878 <HAL_UART_IRQHandler+0x94>
 8003876:	e107      	b.n	8003a88 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003878:	23a4      	movs	r3, #164	; 0xa4
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	4013      	ands	r3, r2
 8003882:	d012      	beq.n	80038aa <HAL_UART_IRQHandler+0xc6>
 8003884:	23a0      	movs	r3, #160	; 0xa0
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2201      	movs	r2, #1
 8003898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2284      	movs	r2, #132	; 0x84
 800389e:	589b      	ldr	r3, [r3, r2]
 80038a0:	2201      	movs	r2, #1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2184      	movs	r1, #132	; 0x84
 80038a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038aa:	23a4      	movs	r3, #164	; 0xa4
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2202      	movs	r2, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	d011      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
 80038b6:	239c      	movs	r3, #156	; 0x9c
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	4013      	ands	r3, r2
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2284      	movs	r2, #132	; 0x84
 80038ce:	589b      	ldr	r3, [r3, r2]
 80038d0:	2204      	movs	r2, #4
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2184      	movs	r1, #132	; 0x84
 80038d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80038da:	23a4      	movs	r3, #164	; 0xa4
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2204      	movs	r2, #4
 80038e2:	4013      	ands	r3, r2
 80038e4:	d011      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
 80038e6:	239c      	movs	r3, #156	; 0x9c
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d00b      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2204      	movs	r2, #4
 80038f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2284      	movs	r2, #132	; 0x84
 80038fe:	589b      	ldr	r3, [r3, r2]
 8003900:	2202      	movs	r2, #2
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2184      	movs	r1, #132	; 0x84
 8003908:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800390a:	23a4      	movs	r3, #164	; 0xa4
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	4013      	ands	r3, r2
 8003914:	d017      	beq.n	8003946 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003916:	23a0      	movs	r3, #160	; 0xa0
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2220      	movs	r2, #32
 800391e:	4013      	ands	r3, r2
 8003920:	d105      	bne.n	800392e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003922:	239c      	movs	r3, #156	; 0x9c
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800392c:	d00b      	beq.n	8003946 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2208      	movs	r2, #8
 8003934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2284      	movs	r2, #132	; 0x84
 800393a:	589b      	ldr	r3, [r3, r2]
 800393c:	2208      	movs	r2, #8
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2184      	movs	r1, #132	; 0x84
 8003944:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003946:	23a4      	movs	r3, #164	; 0xa4
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4013      	ands	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_UART_IRQHandler+0x198>
 8003954:	23a0      	movs	r3, #160	; 0xa0
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	04db      	lsls	r3, r3, #19
 800395e:	4013      	ands	r3, r2
 8003960:	d00c      	beq.n	800397c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	0112      	lsls	r2, r2, #4
 800396a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2284      	movs	r2, #132	; 0x84
 8003970:	589b      	ldr	r3, [r3, r2]
 8003972:	2220      	movs	r2, #32
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2184      	movs	r1, #132	; 0x84
 800397a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2284      	movs	r2, #132	; 0x84
 8003980:	589b      	ldr	r3, [r3, r2]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d100      	bne.n	8003988 <HAL_UART_IRQHandler+0x1a4>
 8003986:	e1e7      	b.n	8003d58 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003988:	23a4      	movs	r3, #164	; 0xa4
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2220      	movs	r2, #32
 8003990:	4013      	ands	r3, r2
 8003992:	d00e      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003994:	23a0      	movs	r3, #160	; 0xa0
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
 800399e:	d008      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d004      	beq.n	80039b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	0010      	movs	r0, r2
 80039b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2284      	movs	r2, #132	; 0x84
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	2194      	movs	r1, #148	; 0x94
 80039ba:	187a      	adds	r2, r7, r1
 80039bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d004      	beq.n	80039d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80039cc:	187b      	adds	r3, r7, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2228      	movs	r2, #40	; 0x28
 80039d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80039d4:	d047      	beq.n	8003a66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0018      	movs	r0, r3
 80039da:	f000 fdb3 	bl	8004544 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2240      	movs	r2, #64	; 0x40
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d137      	bne.n	8003a5c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ec:	f3ef 8310 	mrs	r3, PRIMASK
 80039f0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80039f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039f4:	2090      	movs	r0, #144	; 0x90
 80039f6:	183a      	adds	r2, r7, r0
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	2301      	movs	r3, #1
 80039fc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	438a      	bics	r2, r1
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	183b      	adds	r3, r7, r0
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a1e:	f383 8810 	msr	PRIMASK, r3
}
 8003a22:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a30:	4a14      	ldr	r2, [pc, #80]	; (8003a84 <HAL_UART_IRQHandler+0x2a0>)
 8003a32:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd fa0d 	bl	8000e58 <HAL_DMA_Abort_IT>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d01a      	beq.n	8003a78 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a50:	e012      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f004 fcaf 	bl	80083b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5a:	e00d      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f004 fcaa 	bl	80083b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a64:	e008      	b.n	8003a78 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f004 fca5 	bl	80083b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2284      	movs	r2, #132	; 0x84
 8003a72:	2100      	movs	r1, #0
 8003a74:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a76:	e16f      	b.n	8003d58 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	46c0      	nop			; (mov r8, r8)
    return;
 8003a7a:	e16d      	b.n	8003d58 <HAL_UART_IRQHandler+0x574>
 8003a7c:	0000080f 	.word	0x0000080f
 8003a80:	04000120 	.word	0x04000120
 8003a84:	080048b3 	.word	0x080048b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d000      	beq.n	8003a92 <HAL_UART_IRQHandler+0x2ae>
 8003a90:	e139      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a92:	23a4      	movs	r3, #164	; 0xa4
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2210      	movs	r2, #16
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d100      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x2bc>
 8003a9e:	e132      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003aa0:	23a0      	movs	r3, #160	; 0xa0
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d100      	bne.n	8003aae <HAL_UART_IRQHandler+0x2ca>
 8003aac:	e12b      	b.n	8003d06 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b40      	cmp	r3, #64	; 0x40
 8003ac2:	d000      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x2e2>
 8003ac4:	e09f      	b.n	8003c06 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	217e      	movs	r1, #126	; 0x7e
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d100      	bne.n	8003ade <HAL_UART_IRQHandler+0x2fa>
 8003adc:	e13e      	b.n	8003d5c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2258      	movs	r2, #88	; 0x58
 8003ae2:	5a9b      	ldrh	r3, [r3, r2]
 8003ae4:	187a      	adds	r2, r7, r1
 8003ae6:	8812      	ldrh	r2, [r2, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d300      	bcc.n	8003aee <HAL_UART_IRQHandler+0x30a>
 8003aec:	e136      	b.n	8003d5c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	187a      	adds	r2, r7, r1
 8003af2:	215a      	movs	r1, #90	; 0x5a
 8003af4:	8812      	ldrh	r2, [r2, #0]
 8003af6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d06f      	beq.n	8003be2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b02:	f3ef 8310 	mrs	r3, PRIMASK
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4992      	ldr	r1, [pc, #584]	; (8003d6c <HAL_UART_IRQHandler+0x588>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	f383 8810 	msr	PRIMASK, r3
}
 8003b32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b34:	f3ef 8310 	mrs	r3, PRIMASK
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b3c:	677b      	str	r3, [r7, #116]	; 0x74
 8003b3e:	2301      	movs	r3, #1
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b44:	f383 8810 	msr	PRIMASK, r3
}
 8003b48:	46c0      	nop			; (mov r8, r8)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	438a      	bics	r2, r1
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b5c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b66:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	673b      	str	r3, [r7, #112]	; 0x70
 8003b70:	2301      	movs	r3, #1
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b76:	f383 8810 	msr	PRIMASK, r3
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2140      	movs	r1, #64	; 0x40
 8003b88:	438a      	bics	r2, r1
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b8e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2280      	movs	r2, #128	; 0x80
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2110      	movs	r1, #16
 8003bc8:	438a      	bics	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7fd f903 	bl	8000de8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2258      	movs	r2, #88	; 0x58
 8003bec:	5a9a      	ldrh	r2, [r3, r2]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	215a      	movs	r1, #90	; 0x5a
 8003bf2:	5a5b      	ldrh	r3, [r3, r1]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f004 fb5e 	bl	80082c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c04:	e0aa      	b.n	8003d5c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2258      	movs	r2, #88	; 0x58
 8003c0a:	5a99      	ldrh	r1, [r3, r2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	225a      	movs	r2, #90	; 0x5a
 8003c10:	5a9b      	ldrh	r3, [r3, r2]
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	208e      	movs	r0, #142	; 0x8e
 8003c16:	183b      	adds	r3, r7, r0
 8003c18:	1a8a      	subs	r2, r1, r2
 8003c1a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	225a      	movs	r2, #90	; 0x5a
 8003c20:	5a9b      	ldrh	r3, [r3, r2]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <HAL_UART_IRQHandler+0x446>
 8003c28:	e09a      	b.n	8003d60 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_UART_IRQHandler+0x450>
 8003c32:	e095      	b.n	8003d60 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3c:	2488      	movs	r4, #136	; 0x88
 8003c3e:	193a      	adds	r2, r7, r4
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	2301      	movs	r3, #1
 8003c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4945      	ldr	r1, [pc, #276]	; (8003d70 <HAL_UART_IRQHandler+0x58c>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c72:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	2484      	movs	r4, #132	; 0x84
 8003c76:	193a      	adds	r2, r7, r4
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	438a      	bics	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	2480      	movs	r4, #128	; 0x80
 8003cc2:	193a      	adds	r2, r7, r4
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	f383 8810 	msr	PRIMASK, r3
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2110      	movs	r1, #16
 8003cde:	438a      	bics	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	193b      	adds	r3, r7, r4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	f383 8810 	msr	PRIMASK, r3
}
 8003cee:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cf6:	183b      	adds	r3, r7, r0
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0011      	movs	r1, r2
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f004 fade 	bl	80082c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d04:	e02c      	b.n	8003d60 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003d06:	23a4      	movs	r3, #164	; 0xa4
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d00f      	beq.n	8003d32 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003d12:	23a0      	movs	r3, #160	; 0xa0
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d01e      	beq.n	8003d64 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	0010      	movs	r0, r2
 8003d2e:	4798      	blx	r3
    }
    return;
 8003d30:	e018      	b.n	8003d64 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d32:	23a4      	movs	r3, #164	; 0xa4
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2240      	movs	r2, #64	; 0x40
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_UART_IRQHandler+0x582>
 8003d3e:	23a0      	movs	r3, #160	; 0xa0
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	4013      	ands	r3, r2
 8003d48:	d00d      	beq.n	8003d66 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 fdc7 	bl	80048e0 <UART_EndTransmit_IT>
    return;
 8003d52:	e008      	b.n	8003d66 <HAL_UART_IRQHandler+0x582>
      return;
 8003d54:	46c0      	nop			; (mov r8, r8)
 8003d56:	e006      	b.n	8003d66 <HAL_UART_IRQHandler+0x582>
    return;
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	e004      	b.n	8003d66 <HAL_UART_IRQHandler+0x582>
      return;
 8003d5c:	46c0      	nop			; (mov r8, r8)
 8003d5e:	e002      	b.n	8003d66 <HAL_UART_IRQHandler+0x582>
      return;
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	e000      	b.n	8003d66 <HAL_UART_IRQHandler+0x582>
    return;
 8003d64:	46c0      	nop			; (mov r8, r8)
  }

}
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b02b      	add	sp, #172	; 0xac
 8003d6a:	bd90      	pop	{r4, r7, pc}
 8003d6c:	fffffeff 	.word	0xfffffeff
 8003d70:	fffffedf 	.word	0xfffffedf

08003d74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b002      	add	sp, #8
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b002      	add	sp, #8
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b002      	add	sp, #8
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b088      	sub	sp, #32
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dac:	231e      	movs	r3, #30
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a8d      	ldr	r2, [pc, #564]	; (8004008 <UART_SetConfig+0x264>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a88      	ldr	r2, [pc, #544]	; (800400c <UART_SetConfig+0x268>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	430a      	orrs	r2, r1
 8003df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	4a7f      	ldr	r2, [pc, #508]	; (8004010 <UART_SetConfig+0x26c>)
 8003e12:	4013      	ands	r3, r2
 8003e14:	0019      	movs	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a7b      	ldr	r2, [pc, #492]	; (8004014 <UART_SetConfig+0x270>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d127      	bne.n	8003e7a <UART_SetConfig+0xd6>
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <UART_SetConfig+0x274>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	2203      	movs	r2, #3
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d00d      	beq.n	8003e52 <UART_SetConfig+0xae>
 8003e36:	d81b      	bhi.n	8003e70 <UART_SetConfig+0xcc>
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d014      	beq.n	8003e66 <UART_SetConfig+0xc2>
 8003e3c:	d818      	bhi.n	8003e70 <UART_SetConfig+0xcc>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <UART_SetConfig+0xa4>
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d00a      	beq.n	8003e5c <UART_SetConfig+0xb8>
 8003e46:	e013      	b.n	8003e70 <UART_SetConfig+0xcc>
 8003e48:	231f      	movs	r3, #31
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
 8003e50:	e021      	b.n	8003e96 <UART_SetConfig+0xf2>
 8003e52:	231f      	movs	r3, #31
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2202      	movs	r2, #2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e01c      	b.n	8003e96 <UART_SetConfig+0xf2>
 8003e5c:	231f      	movs	r3, #31
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	2204      	movs	r2, #4
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e017      	b.n	8003e96 <UART_SetConfig+0xf2>
 8003e66:	231f      	movs	r3, #31
 8003e68:	18fb      	adds	r3, r7, r3
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	e012      	b.n	8003e96 <UART_SetConfig+0xf2>
 8003e70:	231f      	movs	r3, #31
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	2210      	movs	r2, #16
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e00d      	b.n	8003e96 <UART_SetConfig+0xf2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a67      	ldr	r2, [pc, #412]	; (800401c <UART_SetConfig+0x278>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d104      	bne.n	8003e8e <UART_SetConfig+0xea>
 8003e84:	231f      	movs	r3, #31
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	e003      	b.n	8003e96 <UART_SetConfig+0xf2>
 8003e8e:	231f      	movs	r3, #31
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	2210      	movs	r2, #16
 8003e94:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d15c      	bne.n	8003f5c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003ea2:	231f      	movs	r3, #31
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d015      	beq.n	8003ed8 <UART_SetConfig+0x134>
 8003eac:	dc18      	bgt.n	8003ee0 <UART_SetConfig+0x13c>
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00d      	beq.n	8003ece <UART_SetConfig+0x12a>
 8003eb2:	dc15      	bgt.n	8003ee0 <UART_SetConfig+0x13c>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <UART_SetConfig+0x11a>
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d005      	beq.n	8003ec8 <UART_SetConfig+0x124>
 8003ebc:	e010      	b.n	8003ee0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebe:	f7fe f8ef 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003ec2:	0003      	movs	r3, r0
 8003ec4:	61bb      	str	r3, [r7, #24]
        break;
 8003ec6:	e012      	b.n	8003eee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ec8:	4b55      	ldr	r3, [pc, #340]	; (8004020 <UART_SetConfig+0x27c>)
 8003eca:	61bb      	str	r3, [r7, #24]
        break;
 8003ecc:	e00f      	b.n	8003eee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ece:	f7fe f887 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	61bb      	str	r3, [r7, #24]
        break;
 8003ed6:	e00a      	b.n	8003eee <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	61bb      	str	r3, [r7, #24]
        break;
 8003ede:	e006      	b.n	8003eee <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee4:	231e      	movs	r3, #30
 8003ee6:	18fb      	adds	r3, r7, r3
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
        break;
 8003eec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d100      	bne.n	8003ef6 <UART_SetConfig+0x152>
 8003ef4:	e07a      	b.n	8003fec <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	005a      	lsls	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	085b      	lsrs	r3, r3, #1
 8003f00:	18d2      	adds	r2, r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	0019      	movs	r1, r3
 8003f08:	0010      	movs	r0, r2
 8003f0a:	f7fc f90f 	bl	800012c <__udivsi3>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d91c      	bls.n	8003f52 <UART_SetConfig+0x1ae>
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	025b      	lsls	r3, r3, #9
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d217      	bcs.n	8003f52 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	200e      	movs	r0, #14
 8003f28:	183b      	adds	r3, r7, r0
 8003f2a:	210f      	movs	r1, #15
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2207      	movs	r2, #7
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	183b      	adds	r3, r7, r0
 8003f3e:	183a      	adds	r2, r7, r0
 8003f40:	8812      	ldrh	r2, [r2, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	183a      	adds	r2, r7, r0
 8003f4c:	8812      	ldrh	r2, [r2, #0]
 8003f4e:	60da      	str	r2, [r3, #12]
 8003f50:	e04c      	b.n	8003fec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003f52:	231e      	movs	r3, #30
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e047      	b.n	8003fec <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f5c:	231f      	movs	r3, #31
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d015      	beq.n	8003f92 <UART_SetConfig+0x1ee>
 8003f66:	dc18      	bgt.n	8003f9a <UART_SetConfig+0x1f6>
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d00d      	beq.n	8003f88 <UART_SetConfig+0x1e4>
 8003f6c:	dc15      	bgt.n	8003f9a <UART_SetConfig+0x1f6>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <UART_SetConfig+0x1d4>
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d005      	beq.n	8003f82 <UART_SetConfig+0x1de>
 8003f76:	e010      	b.n	8003f9a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f78:	f7fe f892 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e012      	b.n	8003fa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f82:	4b27      	ldr	r3, [pc, #156]	; (8004020 <UART_SetConfig+0x27c>)
 8003f84:	61bb      	str	r3, [r7, #24]
        break;
 8003f86:	e00f      	b.n	8003fa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f88:	f7fe f82a 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e00a      	b.n	8003fa8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f92:	2380      	movs	r3, #128	; 0x80
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	61bb      	str	r3, [r7, #24]
        break;
 8003f98:	e006      	b.n	8003fa8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f9e:	231e      	movs	r3, #30
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
        break;
 8003fa6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d01e      	beq.n	8003fec <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	085a      	lsrs	r2, r3, #1
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	18d2      	adds	r2, r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0019      	movs	r1, r3
 8003fbe:	0010      	movs	r0, r2
 8003fc0:	f7fc f8b4 	bl	800012c <__udivsi3>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d90a      	bls.n	8003fe4 <UART_SetConfig+0x240>
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	025b      	lsls	r3, r3, #9
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d205      	bcs.n	8003fe4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	e003      	b.n	8003fec <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe4:	231e      	movs	r3, #30
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ff8:	231e      	movs	r3, #30
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	781b      	ldrb	r3, [r3, #0]
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b008      	add	sp, #32
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	ffff69f3 	.word	0xffff69f3
 800400c:	ffffcfff 	.word	0xffffcfff
 8004010:	fffff4ff 	.word	0xfffff4ff
 8004014:	40013800 	.word	0x40013800
 8004018:	40021000 	.word	0x40021000
 800401c:	40004400 	.word	0x40004400
 8004020:	007a1200 	.word	0x007a1200

08004024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2208      	movs	r2, #8
 8004032:	4013      	ands	r3, r2
 8004034:	d00b      	beq.n	800404e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a4a      	ldr	r2, [pc, #296]	; (8004168 <UART_AdvFeatureConfig+0x144>)
 800403e:	4013      	ands	r3, r2
 8004040:	0019      	movs	r1, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	2201      	movs	r2, #1
 8004054:	4013      	ands	r3, r2
 8004056:	d00b      	beq.n	8004070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a43      	ldr	r2, [pc, #268]	; (800416c <UART_AdvFeatureConfig+0x148>)
 8004060:	4013      	ands	r3, r2
 8004062:	0019      	movs	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d00b      	beq.n	8004092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a3b      	ldr	r2, [pc, #236]	; (8004170 <UART_AdvFeatureConfig+0x14c>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2204      	movs	r2, #4
 8004098:	4013      	ands	r3, r2
 800409a:	d00b      	beq.n	80040b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a34      	ldr	r2, [pc, #208]	; (8004174 <UART_AdvFeatureConfig+0x150>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	0019      	movs	r1, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	2210      	movs	r2, #16
 80040ba:	4013      	ands	r3, r2
 80040bc:	d00b      	beq.n	80040d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a2c      	ldr	r2, [pc, #176]	; (8004178 <UART_AdvFeatureConfig+0x154>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	0019      	movs	r1, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2220      	movs	r2, #32
 80040dc:	4013      	ands	r3, r2
 80040de:	d00b      	beq.n	80040f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	4a25      	ldr	r2, [pc, #148]	; (800417c <UART_AdvFeatureConfig+0x158>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	2240      	movs	r2, #64	; 0x40
 80040fe:	4013      	ands	r3, r2
 8004100:	d01d      	beq.n	800413e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <UART_AdvFeatureConfig+0x15c>)
 800410a:	4013      	ands	r3, r2
 800410c:	0019      	movs	r1, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	035b      	lsls	r3, r3, #13
 8004122:	429a      	cmp	r2, r3
 8004124:	d10b      	bne.n	800413e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	4a15      	ldr	r2, [pc, #84]	; (8004184 <UART_AdvFeatureConfig+0x160>)
 800412e:	4013      	ands	r3, r2
 8004130:	0019      	movs	r1, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	4013      	ands	r3, r2
 8004146:	d00b      	beq.n	8004160 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <UART_AdvFeatureConfig+0x164>)
 8004150:	4013      	ands	r3, r2
 8004152:	0019      	movs	r1, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  }
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b002      	add	sp, #8
 8004166:	bd80      	pop	{r7, pc}
 8004168:	ffff7fff 	.word	0xffff7fff
 800416c:	fffdffff 	.word	0xfffdffff
 8004170:	fffeffff 	.word	0xfffeffff
 8004174:	fffbffff 	.word	0xfffbffff
 8004178:	ffffefff 	.word	0xffffefff
 800417c:	ffffdfff 	.word	0xffffdfff
 8004180:	ffefffff 	.word	0xffefffff
 8004184:	ff9fffff 	.word	0xff9fffff
 8004188:	fff7ffff 	.word	0xfff7ffff

0800418c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b092      	sub	sp, #72	; 0x48
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2284      	movs	r2, #132	; 0x84
 8004198:	2100      	movs	r1, #0
 800419a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800419c:	f7fc fc6a 	bl	8000a74 <HAL_GetTick>
 80041a0:	0003      	movs	r3, r0
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2208      	movs	r2, #8
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d12c      	bne.n	800420c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	0391      	lsls	r1, r2, #14
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4a46      	ldr	r2, [pc, #280]	; (80042d4 <UART_CheckIdleState+0x148>)
 80041bc:	9200      	str	r2, [sp, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	f000 f88c 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d021      	beq.n	800420c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c8:	f3ef 8310 	mrs	r3, PRIMASK
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041d2:	2301      	movs	r3, #1
 80041d4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	438a      	bics	r2, r1
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2278      	movs	r2, #120	; 0x78
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e05f      	b.n	80042cc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2204      	movs	r2, #4
 8004214:	4013      	ands	r3, r2
 8004216:	2b04      	cmp	r3, #4
 8004218:	d146      	bne.n	80042a8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800421a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421c:	2280      	movs	r2, #128	; 0x80
 800421e:	03d1      	lsls	r1, r2, #15
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <UART_CheckIdleState+0x148>)
 8004224:	9200      	str	r2, [sp, #0]
 8004226:	2200      	movs	r2, #0
 8004228:	f000 f858 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 800422c:	1e03      	subs	r3, r0, #0
 800422e:	d03b      	beq.n	80042a8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004230:	f3ef 8310 	mrs	r3, PRIMASK
 8004234:	60fb      	str	r3, [r7, #12]
  return(result);
 8004236:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004238:	637b      	str	r3, [r7, #52]	; 0x34
 800423a:	2301      	movs	r3, #1
 800423c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f383 8810 	msr	PRIMASK, r3
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4921      	ldr	r1, [pc, #132]	; (80042d8 <UART_CheckIdleState+0x14c>)
 8004252:	400a      	ands	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f383 8810 	msr	PRIMASK, r3
}
 8004260:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004262:	f3ef 8310 	mrs	r3, PRIMASK
 8004266:	61bb      	str	r3, [r7, #24]
  return(result);
 8004268:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	633b      	str	r3, [r7, #48]	; 0x30
 800426c:	2301      	movs	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f383 8810 	msr	PRIMASK, r3
}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2101      	movs	r1, #1
 8004284:	438a      	bics	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	f383 8810 	msr	PRIMASK, r3
}
 8004292:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2280      	movs	r2, #128	; 0x80
 8004298:	2120      	movs	r1, #32
 800429a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2278      	movs	r2, #120	; 0x78
 80042a0:	2100      	movs	r1, #0
 80042a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e011      	b.n	80042cc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2280      	movs	r2, #128	; 0x80
 80042b2:	2120      	movs	r1, #32
 80042b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2278      	movs	r2, #120	; 0x78
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	0018      	movs	r0, r3
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b010      	add	sp, #64	; 0x40
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	01ffffff 	.word	0x01ffffff
 80042d8:	fffffedf 	.word	0xfffffedf

080042dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	e051      	b.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	3301      	adds	r3, #1
 80042f2:	d04e      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f4:	f7fc fbbe 	bl	8000a74 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	429a      	cmp	r2, r3
 8004302:	d302      	bcc.n	800430a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e051      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2204      	movs	r2, #4
 8004316:	4013      	ands	r3, r2
 8004318:	d03b      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b80      	cmp	r3, #128	; 0x80
 800431e:	d038      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d035      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	2208      	movs	r2, #8
 800432e:	4013      	ands	r3, r2
 8004330:	2b08      	cmp	r3, #8
 8004332:	d111      	bne.n	8004358 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2208      	movs	r2, #8
 800433a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f900 	bl	8004544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2284      	movs	r2, #132	; 0x84
 8004348:	2108      	movs	r1, #8
 800434a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2278      	movs	r2, #120	; 0x78
 8004350:	2100      	movs	r1, #0
 8004352:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e02c      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69da      	ldr	r2, [r3, #28]
 800435e:	2380      	movs	r3, #128	; 0x80
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	401a      	ands	r2, r3
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	429a      	cmp	r2, r3
 800436a:	d112      	bne.n	8004392 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	0112      	lsls	r2, r2, #4
 8004374:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	0018      	movs	r0, r3
 800437a:	f000 f8e3 	bl	8004544 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2284      	movs	r2, #132	; 0x84
 8004382:	2120      	movs	r1, #32
 8004384:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2278      	movs	r2, #120	; 0x78
 800438a:	2100      	movs	r1, #0
 800438c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e00f      	b.n	80043b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	425a      	negs	r2, r3
 80043a2:	4153      	adcs	r3, r2
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	001a      	movs	r2, r3
 80043a8:	1dfb      	adds	r3, r7, #7
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d09e      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b004      	add	sp, #16
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b090      	sub	sp, #64	; 0x40
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	1dbb      	adds	r3, r7, #6
 80043c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1dba      	adds	r2, r7, #6
 80043d4:	2158      	movs	r1, #88	; 0x58
 80043d6:	8812      	ldrh	r2, [r2, #0]
 80043d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2284      	movs	r2, #132	; 0x84
 80043de:	2100      	movs	r1, #0
 80043e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2280      	movs	r2, #128	; 0x80
 80043e6:	2122      	movs	r1, #34	; 0x22
 80043e8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d028      	beq.n	8004444 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	4a3e      	ldr	r2, [pc, #248]	; (80044f0 <UART_Start_Receive_DMA+0x134>)
 80043f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	4a3d      	ldr	r2, [pc, #244]	; (80044f4 <UART_Start_Receive_DMA+0x138>)
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004406:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <UART_Start_Receive_DMA+0x13c>)
 8004408:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	2200      	movs	r2, #0
 8004410:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3324      	adds	r3, #36	; 0x24
 800441c:	0019      	movs	r1, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	001a      	movs	r2, r3
 8004424:	1dbb      	adds	r3, r7, #6
 8004426:	881b      	ldrh	r3, [r3, #0]
 8004428:	f7fc fc78 	bl	8000d1c <HAL_DMA_Start_IT>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d009      	beq.n	8004444 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2284      	movs	r2, #132	; 0x84
 8004434:	2110      	movs	r1, #16
 8004436:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	2120      	movs	r1, #32
 800443e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e050      	b.n	80044e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d019      	beq.n	8004480 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800444c:	f3ef 8310 	mrs	r3, PRIMASK
 8004450:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004456:	2301      	movs	r3, #1
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	f383 8810 	msr	PRIMASK, r3
}
 8004460:	46c0      	nop			; (mov r8, r8)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0049      	lsls	r1, r1, #1
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004476:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	f383 8810 	msr	PRIMASK, r3
}
 800447e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004480:	f3ef 8310 	mrs	r3, PRIMASK
 8004484:	613b      	str	r3, [r7, #16]
  return(result);
 8004486:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	63bb      	str	r3, [r7, #56]	; 0x38
 800448a:	2301      	movs	r3, #1
 800448c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f383 8810 	msr	PRIMASK, r3
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2101      	movs	r1, #1
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	f383 8810 	msr	PRIMASK, r3
}
 80044b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b2:	f3ef 8310 	mrs	r3, PRIMASK
 80044b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80044b8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	637b      	str	r3, [r7, #52]	; 0x34
 80044bc:	2301      	movs	r3, #1
 80044be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2140      	movs	r1, #64	; 0x40
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
 80044d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	f383 8810 	msr	PRIMASK, r3
}
 80044e2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	0018      	movs	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b010      	add	sp, #64	; 0x40
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	080046c1 	.word	0x080046c1
 80044f4:	080047ed 	.word	0x080047ed
 80044f8:	0800482f 	.word	0x0800482f

080044fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004504:	f3ef 8310 	mrs	r3, PRIMASK
 8004508:	60bb      	str	r3, [r7, #8]
  return(result);
 800450a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	2301      	movs	r3, #1
 8004510:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f383 8810 	msr	PRIMASK, r3
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	21c0      	movs	r1, #192	; 0xc0
 8004526:	438a      	bics	r2, r1
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f383 8810 	msr	PRIMASK, r3
}
 8004534:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2220      	movs	r2, #32
 800453a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800453c:	46c0      	nop			; (mov r8, r8)
 800453e:	46bd      	mov	sp, r7
 8004540:	b006      	add	sp, #24
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454c:	f3ef 8310 	mrs	r3, PRIMASK
 8004550:	617b      	str	r3, [r7, #20]
  return(result);
 8004552:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
 8004556:	2301      	movs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4926      	ldr	r1, [pc, #152]	; (8004608 <UART_EndRxTransfer+0xc4>)
 800456e:	400a      	ands	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457e:	f3ef 8310 	mrs	r3, PRIMASK
 8004582:	623b      	str	r3, [r7, #32]
  return(result);
 8004584:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
 8004588:	2301      	movs	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			; (mov r8, r8)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	438a      	bics	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045aa:	f383 8810 	msr	PRIMASK, r3
}
 80045ae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d118      	bne.n	80045ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b8:	f3ef 8310 	mrs	r3, PRIMASK
 80045bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80045be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c2:	2301      	movs	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f383 8810 	msr	PRIMASK, r3
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2110      	movs	r1, #16
 80045da:	438a      	bics	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f383 8810 	msr	PRIMASK, r3
}
 80045e8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2280      	movs	r2, #128	; 0x80
 80045ee:	2120      	movs	r1, #32
 80045f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b00e      	add	sp, #56	; 0x38
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	fffffedf 	.word	0xfffffedf

0800460c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08c      	sub	sp, #48	; 0x30
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b20      	cmp	r3, #32
 8004620:	d035      	beq.n	800468e <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	2252      	movs	r2, #82	; 0x52
 8004626:	2100      	movs	r1, #0
 8004628:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800462a:	f3ef 8310 	mrs	r3, PRIMASK
 800462e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004630:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
 8004634:	2301      	movs	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f383 8810 	msr	PRIMASK, r3
}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	438a      	bics	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800465c:	f3ef 8310 	mrs	r3, PRIMASK
 8004660:	61bb      	str	r3, [r7, #24]
  return(result);
 8004662:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
 8004666:	2301      	movs	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			; (mov r8, r8)
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2140      	movs	r1, #64	; 0x40
 800467e:	430a      	orrs	r2, r1
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f383 8810 	msr	PRIMASK, r3
}
 800468c:	e004      	b.n	8004698 <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	0018      	movs	r0, r3
 8004692:	f003 fe71 	bl	8008378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46c0      	nop			; (mov r8, r8)
 800469a:	46bd      	mov	sp, r7
 800469c:	b00c      	add	sp, #48	; 0x30
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7ff fb5f 	bl	8003d74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b004      	add	sp, #16
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b094      	sub	sp, #80	; 0x50
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d06f      	beq.n	80047b6 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 80046d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d8:	225a      	movs	r2, #90	; 0x5a
 80046da:	2100      	movs	r1, #0
 80046dc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046de:	f3ef 8310 	mrs	r3, PRIMASK
 80046e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80046e4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e8:	2301      	movs	r3, #1
 80046ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	f383 8810 	msr	PRIMASK, r3
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	493a      	ldr	r1, [pc, #232]	; (80047e8 <UART_DMAReceiveCplt+0x128>)
 8004700:	400a      	ands	r2, r1
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004706:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f383 8810 	msr	PRIMASK, r3
}
 800470e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004710:	f3ef 8310 	mrs	r3, PRIMASK
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	2301      	movs	r3, #1
 800471c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	f383 8810 	msr	PRIMASK, r3
}
 8004724:	46c0      	nop			; (mov r8, r8)
 8004726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	438a      	bics	r2, r1
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	f383 8810 	msr	PRIMASK, r3
}
 8004740:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004742:	f3ef 8310 	mrs	r3, PRIMASK
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800474a:	643b      	str	r3, [r7, #64]	; 0x40
 800474c:	2301      	movs	r3, #1
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2140      	movs	r1, #64	; 0x40
 8004764:	438a      	bics	r2, r1
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476e:	f383 8810 	msr	PRIMASK, r3
}
 8004772:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	2280      	movs	r2, #128	; 0x80
 8004778:	2120      	movs	r1, #32
 800477a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004780:	2b01      	cmp	r3, #1
 8004782:	d118      	bne.n	80047b6 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004784:	f3ef 8310 	mrs	r3, PRIMASK
 8004788:	60fb      	str	r3, [r7, #12]
  return(result);
 800478a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800478e:	2301      	movs	r3, #1
 8004790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f383 8810 	msr	PRIMASK, r3
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2110      	movs	r1, #16
 80047a6:	438a      	bics	r2, r1
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f383 8810 	msr	PRIMASK, r3
}
 80047b4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	2200      	movs	r2, #0
 80047ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d108      	bne.n	80047d6 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	2258      	movs	r2, #88	; 0x58
 80047c8:	5a9a      	ldrh	r2, [r3, r2]
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f003 fd76 	bl	80082c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80047d4:	e003      	b.n	80047de <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff fad3 	bl	8003d84 <HAL_UART_RxCpltCallback>
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b014      	add	sp, #80	; 0x50
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	fffffeff 	.word	0xfffffeff

080047ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10a      	bne.n	800481e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2258      	movs	r2, #88	; 0x58
 800480c:	5a9b      	ldrh	r3, [r3, r2]
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	0011      	movs	r1, r2
 8004816:	0018      	movs	r0, r3
 8004818:	f003 fd52 	bl	80082c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800481c:	e003      	b.n	8004826 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	0018      	movs	r0, r3
 8004822:	f7ff fab7 	bl	8003d94 <HAL_UART_RxHalfCpltCallback>
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b004      	add	sp, #16
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004840:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	589b      	ldr	r3, [r3, r2]
 8004848:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2280      	movs	r2, #128	; 0x80
 8004852:	4013      	ands	r3, r2
 8004854:	2b80      	cmp	r3, #128	; 0x80
 8004856:	d10a      	bne.n	800486e <UART_DMAError+0x40>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b21      	cmp	r3, #33	; 0x21
 800485c:	d107      	bne.n	800486e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2252      	movs	r2, #82	; 0x52
 8004862:	2100      	movs	r1, #0
 8004864:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fe47 	bl	80044fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2240      	movs	r2, #64	; 0x40
 8004876:	4013      	ands	r3, r2
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d10a      	bne.n	8004892 <UART_DMAError+0x64>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b22      	cmp	r3, #34	; 0x22
 8004880:	d107      	bne.n	8004892 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	225a      	movs	r2, #90	; 0x5a
 8004886:	2100      	movs	r1, #0
 8004888:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	0018      	movs	r0, r3
 800488e:	f7ff fe59 	bl	8004544 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2284      	movs	r2, #132	; 0x84
 8004896:	589b      	ldr	r3, [r3, r2]
 8004898:	2210      	movs	r2, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2184      	movs	r1, #132	; 0x84
 80048a0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f003 fd87 	bl	80083b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b006      	add	sp, #24
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	225a      	movs	r2, #90	; 0x5a
 80048c4:	2100      	movs	r1, #0
 80048c6:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2252      	movs	r2, #82	; 0x52
 80048cc:	2100      	movs	r1, #0
 80048ce:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f003 fd70 	bl	80083b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048d8:	46c0      	nop			; (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	b004      	add	sp, #16
 80048de:	bd80      	pop	{r7, pc}

080048e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e8:	f3ef 8310 	mrs	r3, PRIMASK
 80048ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ee:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	2301      	movs	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f383 8810 	msr	PRIMASK, r3
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2140      	movs	r1, #64	; 0x40
 800490a:	438a      	bics	r2, r1
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	f383 8810 	msr	PRIMASK, r3
}
 8004918:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0018      	movs	r0, r3
 800492a:	f003 fd25 	bl	8008378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800492e:	46c0      	nop			; (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b006      	add	sp, #24
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004936:	b5b0      	push	{r4, r5, r7, lr}
 8004938:	b08a      	sub	sp, #40	; 0x28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	1dbb      	adds	r3, r7, #6
 8004942:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	589b      	ldr	r3, [r3, r2]
 800494a:	2b20      	cmp	r3, #32
 800494c:	d156      	bne.n	80049fc <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004954:	1dbb      	adds	r3, r7, #6
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e04e      	b.n	80049fe <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	015b      	lsls	r3, r3, #5
 8004968:	429a      	cmp	r2, r3
 800496a:	d109      	bne.n	8004980 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d105      	bne.n	8004980 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2201      	movs	r2, #1
 8004978:	4013      	ands	r3, r2
 800497a:	d001      	beq.n	8004980 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e03e      	b.n	80049fe <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800498c:	2527      	movs	r5, #39	; 0x27
 800498e:	197c      	adds	r4, r7, r5
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	881a      	ldrh	r2, [r3, #0]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	0018      	movs	r0, r3
 800499a:	f7ff fd0f 	bl	80043bc <UART_Start_Receive_DMA>
 800499e:	0003      	movs	r3, r0
 80049a0:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80049a2:	197b      	adds	r3, r7, r5
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d124      	bne.n	80049f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d11c      	bne.n	80049ec <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2210      	movs	r2, #16
 80049b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ba:	f3ef 8310 	mrs	r3, PRIMASK
 80049be:	617b      	str	r3, [r7, #20]
  return(result);
 80049c0:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	2301      	movs	r3, #1
 80049c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2110      	movs	r1, #16
 80049dc:	430a      	orrs	r2, r1
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	e003      	b.n	80049f4 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80049ec:	2327      	movs	r3, #39	; 0x27
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	2201      	movs	r2, #1
 80049f2:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80049f4:	2327      	movs	r3, #39	; 0x27
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	e000      	b.n	80049fe <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	0018      	movs	r0, r3
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b00a      	add	sp, #40	; 0x28
 8004a04:	bdb0      	pop	{r4, r5, r7, pc}

08004a06 <prepare_USR_response_msg>:


const char USR_DETECTION_MSG[LEN_USR_DETECTION_MSG+1] = "0123456789012345678901234567890123456789";

size_t prepare_USR_response_msg(const USR_response_t *p, char* buf)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]
	const uint8_t LEN_IP = 4;
 8004a10:	230a      	movs	r3, #10
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2204      	movs	r2, #4
 8004a16:	701a      	strb	r2, [r3, #0]
	const uint8_t LEN_MAC = 6;
 8004a18:	2109      	movs	r1, #9
 8004a1a:	187b      	adds	r3, r7, r1
 8004a1c:	2206      	movs	r2, #6
 8004a1e:	701a      	strb	r2, [r3, #0]
	char* s = buf;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	60fb      	str	r3, [r7, #12]
	int8_t i = 0; // i must be signed, for counting down can go below 0
 8004a24:	200b      	movs	r0, #11
 8004a26:	183b      	adds	r3, r7, r0
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]

	// MAC 6B
	for(i = LEN_MAC - 1; i >= 0; --i )
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	183b      	adds	r3, r7, r0
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e011      	b.n	8004a5e <prepare_USR_response_msg+0x58>
	{
		*(s++) = p->MAC[i];
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	200b      	movs	r0, #11
 8004a40:	183b      	adds	r3, r7, r0
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	18d2      	adds	r2, r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	1c59      	adds	r1, r3, #1
 8004a4c:	60f9      	str	r1, [r7, #12]
 8004a4e:	7812      	ldrb	r2, [r2, #0]
 8004a50:	701a      	strb	r2, [r3, #0]
	for(i = LEN_MAC - 1; i >= 0; --i )
 8004a52:	183b      	adds	r3, r7, r0
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	183b      	adds	r3, r7, r0
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	210b      	movs	r1, #11
 8004a60:	187b      	adds	r3, r7, r1
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b7f      	cmp	r3, #127	; 0x7f
 8004a66:	d9e8      	bls.n	8004a3a <prepare_USR_response_msg+0x34>
	}
	// version 1B
	*(s++) = 0x42;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	60fa      	str	r2, [r7, #12]
 8004a6e:	2242      	movs	r2, #66	; 0x42
 8004a70:	701a      	strb	r2, [r3, #0]

	/*  21 Bytes */
	//
	for(i = LEN_IP - 1; i >=0; -- i )
 8004a72:	230a      	movs	r3, #10
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e011      	b.n	8004aa6 <prepare_USR_response_msg+0xa0>
	{
		*(s++) = p->IPv4_target[i];
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	200b      	movs	r0, #11
 8004a88:	183b      	adds	r3, r7, r0
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	18d2      	adds	r2, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1c59      	adds	r1, r3, #1
 8004a94:	60f9      	str	r1, [r7, #12]
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 8004a9a:	183b      	adds	r3, r7, r0
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	183b      	adds	r3, r7, r0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	220b      	movs	r2, #11
 8004aa8:	18bb      	adds	r3, r7, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b7f      	cmp	r3, #127	; 0x7f
 8004aae:	d9e8      	bls.n	8004a82 <prepare_USR_response_msg+0x7c>
	}
	//
	for(i = 0; i < 2; ++ i )
 8004ab0:	18bb      	adds	r3, r7, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e014      	b.n	8004ae2 <prepare_USR_response_msg+0xdc>
	{
		*(s++) = (p->port_target >> (i * 8)) & 0xffU;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	899b      	ldrh	r3, [r3, #12]
 8004abc:	001a      	movs	r2, r3
 8004abe:	200b      	movs	r0, #11
 8004ac0:	183b      	adds	r3, r7, r0
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b25b      	sxtb	r3, r3
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	411a      	asrs	r2, r3
 8004aca:	0011      	movs	r1, r2
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	60fa      	str	r2, [r7, #12]
 8004ad2:	b2ca      	uxtb	r2, r1
 8004ad4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; ++ i )
 8004ad6:	183b      	adds	r3, r7, r0
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	183b      	adds	r3, r7, r0
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	210b      	movs	r1, #11
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b25b      	sxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	dde4      	ble.n	8004ab8 <prepare_USR_response_msg+0xb2>
	}
	//
	for(i = LEN_IP - 1; i >=0; -- i )
 8004aee:	230a      	movs	r3, #10
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	187b      	adds	r3, r7, r1
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	e011      	b.n	8004b22 <prepare_USR_response_msg+0x11c>
	{
		*(s++) = p->IPv4_self[i];
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	200b      	movs	r0, #11
 8004b04:	183b      	adds	r3, r7, r0
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	b25b      	sxtb	r3, r3
 8004b0a:	18d2      	adds	r2, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	60f9      	str	r1, [r7, #12]
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	183b      	adds	r3, r7, r0
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	220b      	movs	r2, #11
 8004b24:	18bb      	adds	r3, r7, r2
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b7f      	cmp	r3, #127	; 0x7f
 8004b2a:	d9e8      	bls.n	8004afe <prepare_USR_response_msg+0xf8>
	}
	//
	for(i = 0; i < 2; ++ i )
 8004b2c:	18bb      	adds	r3, r7, r2
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e014      	b.n	8004b5e <prepare_USR_response_msg+0x158>
	{
		*(s++) = (p->port_self >> (i * 8)) & 0xffU;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8a9b      	ldrh	r3, [r3, #20]
 8004b38:	001a      	movs	r2, r3
 8004b3a:	200b      	movs	r0, #11
 8004b3c:	183b      	adds	r3, r7, r0
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	411a      	asrs	r2, r3
 8004b46:	0011      	movs	r1, r2
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	60fa      	str	r2, [r7, #12]
 8004b4e:	b2ca      	uxtb	r2, r1
 8004b50:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; ++ i )
 8004b52:	183b      	adds	r3, r7, r0
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	3301      	adds	r3, #1
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	183b      	adds	r3, r7, r0
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	210b      	movs	r1, #11
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b25b      	sxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	dde4      	ble.n	8004b34 <prepare_USR_response_msg+0x12e>
	}
	//
	for(i = LEN_IP - 1; i >=0; -- i )
 8004b6a:	230a      	movs	r3, #10
 8004b6c:	18fb      	adds	r3, r7, r3
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	187b      	adds	r3, r7, r1
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e011      	b.n	8004b9e <prepare_USR_response_msg+0x198>
	{
		*(s++) = p->IPv4_gateway[i];
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	200b      	movs	r0, #11
 8004b80:	183b      	adds	r3, r7, r0
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	18d2      	adds	r2, r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1c59      	adds	r1, r3, #1
 8004b8c:	60f9      	str	r1, [r7, #12]
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 8004b92:	183b      	adds	r3, r7, r0
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	183b      	adds	r3, r7, r0
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	210b      	movs	r1, #11
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba6:	d9e8      	bls.n	8004b7a <prepare_USR_response_msg+0x174>
	}
	//
	*(s++) = p->mode;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	60fa      	str	r2, [r7, #12]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	7f12      	ldrb	r2, [r2, #28]
 8004bb2:	701a      	strb	r2, [r3, #0]
	// baud
	for(i = 0; i < 3; ++i )
 8004bb4:	187b      	adds	r3, r7, r1
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e013      	b.n	8004be4 <prepare_USR_response_msg+0x1de>
	{
		*(s++) = (uint8_t)((p->baud >> 8*(i)) & 0xffU);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a1a      	ldr	r2, [r3, #32]
 8004bc0:	200b      	movs	r0, #11
 8004bc2:	183b      	adds	r3, r7, r0
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	b25b      	sxtb	r3, r3
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	40da      	lsrs	r2, r3
 8004bcc:	0011      	movs	r1, r2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	60fa      	str	r2, [r7, #12]
 8004bd4:	b2ca      	uxtb	r2, r1
 8004bd6:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 3; ++i )
 8004bd8:	183b      	adds	r3, r7, r0
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	183b      	adds	r3, r7, r0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	200b      	movs	r0, #11
 8004be6:	183b      	adds	r3, r7, r0
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	b25b      	sxtb	r3, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	dde5      	ble.n	8004bbc <prepare_USR_response_msg+0x1b6>
	}

	*(s++) = p->stopbit_mode;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	60fa      	str	r2, [r7, #12]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	2124      	movs	r1, #36	; 0x24
 8004bfa:	5c52      	ldrb	r2, [r2, r1]
 8004bfc:	701a      	strb	r2, [r3, #0]

	/*  21 Bytes END */
	// ID
	for(i=0; i< 3; ++i)
 8004bfe:	183b      	adds	r3, r7, r0
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e00b      	b.n	8004c1e <prepare_USR_response_msg+0x218>
		*(s++) = 0;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	60fa      	str	r2, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
	for(i=0; i< 3; ++i)
 8004c10:	210b      	movs	r1, #11
 8004c12:	187b      	adds	r3, r7, r1
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	210b      	movs	r1, #11
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	dded      	ble.n	8004c06 <prepare_USR_response_msg+0x200>
	// mask
	for(i = LEN_IP - 1; i >=0; -- i )
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	187b      	adds	r3, r7, r1
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e011      	b.n	8004c5e <prepare_USR_response_msg+0x258>
	{
		*(s++) = p->IPv4_mask[i];
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	200b      	movs	r0, #11
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b25b      	sxtb	r3, r3
 8004c46:	18d2      	adds	r2, r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	60f9      	str	r1, [r7, #12]
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 8004c52:	183b      	adds	r3, r7, r0
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	183b      	adds	r3, r7, r0
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	230b      	movs	r3, #11
 8004c60:	18fb      	adds	r3, r7, r3
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b7f      	cmp	r3, #127	; 0x7f
 8004c66:	d9e8      	bls.n	8004c3a <prepare_USR_response_msg+0x234>
	}

	return s - buf;
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	1ad3      	subs	r3, r2, r3
}
 8004c6e:	0018      	movs	r0, r3
 8004c70:	46bd      	mov	sp, r7
 8004c72:	b004      	add	sp, #16
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <kfifo_DMA_static_init>:

}


void kfifo_DMA_static_init(KFIFO_DMA* p, uint8_t* buf, size_t size, size_t dmastep)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b086      	sub	sp, #24
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]

	p->in = 0;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	611a      	str	r2, [r3, #16]
	p->out = 0;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	615a      	str	r2, [r3, #20]
	p->size = size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	605a      	str	r2, [r3, #4]
	p->half = size >> 1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	085a      	lsrs	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	60da      	str	r2, [r3, #12]
	p->buffer = buf;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	601a      	str	r2, [r3, #0]
	p->bytesWritten = 0;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	619a      	str	r2, [r3, #24]
	p->bytesRead = 0;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	61da      	str	r2, [r3, #28]
	uint8_t leading_zeros = __CLZ(size);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fb fac7 	bl	8000244 <__clzsi2>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	001a      	movs	r2, r3
 8004cba:	2117      	movs	r1, #23
 8004cbc:	187b      	adds	r3, r7, r1
 8004cbe:	701a      	strb	r2, [r3, #0]
	p->mask_size = ((uint32_t)0xffffffffU) >> (leading_zeros+1);
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4252      	negs	r2, r2
 8004cca:	40da      	lsrs	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]
	p->pow_of_two = (32U - __clz(size) - 1);
	p->half = size >> 1;
	p->dmacur = 0;
	p->dmastep = dmastep;
#endif
}
 8004cd0:	46c0      	nop			; (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b006      	add	sp, #24
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <__kfifo_mod>:
//	if(s >= total_len) s -= total_len;
//	return s;
//}

static inline uint32_t __kfifo_mod(struct KFIFO_DMA *fifo, uint32_t a)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]


	return a & fifo->mask_size;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	4013      	ands	r3, r2
}
 8004cea:	0018      	movs	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <__kfifo_put>:


size_t __kfifo_put(struct KFIFO_DMA *fifo, const uint8_t *buffer, size_t len)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b088      	sub	sp, #32
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
	if(len == 0)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <__kfifo_put+0x16>
		return 0;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e042      	b.n	8004d8e <__kfifo_put+0x9c>

        //环形缓冲区的剩余容量为fifo->size - fifo->in + fifo->out，让写入的长度取len和剩余容量中较小的，避免写越界；
    // NOTE: in - out can in no case be greater than size, never, the code prevents that from happening.
    // so do not think about that.
    size_t freespace = kfifo_get_free_space(fifo);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f899 	bl	8004e42 <kfifo_get_free_space>
 8004d10:	0003      	movs	r3, r0
 8004d12:	61fb      	str	r3, [r7, #28]
    if(len > freespace)
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d901      	bls.n	8004d20 <__kfifo_put+0x2e>
    {
//    	fifo->out += (len - freespace);
    	return 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e036      	b.n	8004d8e <__kfifo_put+0x9c>
    }
    uint32_t in_mod = __kfifo_mod(fifo, fifo->in);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	0011      	movs	r1, r2
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7ff ffd5 	bl	8004cd8 <__kfifo_mod>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	61bb      	str	r3, [r7, #24]
	fifo->in += len;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	18d2      	adds	r2, r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	611a      	str	r2, [r3, #16]
	//    smp_mb();

    size_t L;

    /* first put the data starting from fifo->in to buffer end */
    L = min(len, fifo->size - in_mod);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	1ad2      	subs	r2, r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d900      	bls.n	8004d4e <__kfifo_put+0x5c>
 8004d4c:	0013      	movs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
    memcpy(fifo->buffer + in_mod, buffer, L);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	18d3      	adds	r3, r2, r3
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f006 f80f 	bl	800ad80 <memcpy>

    /* then put the rest (if any) at the beginning of the buffer */
    if(len - L)
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d00a      	beq.n	8004d80 <__kfifo_put+0x8e>
    	memcpy(fifo->buffer, buffer + L, len - L);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	18d1      	adds	r1, r2, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	f006 f800 	bl	800ad80 <memcpy>
  // smp_wmb();   //for multicore


    // override

    fifo->bytesWritten += len;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	18d2      	adds	r2, r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	619a      	str	r2, [r3, #24]
    // return freespace to help the caller to judge if override occures (when freespace < len)
    return freespace;
 8004d8c:	69fb      	ldr	r3, [r7, #28]
}
 8004d8e:	0018      	movs	r0, r3
 8004d90:	46bd      	mov	sp, r7
 8004d92:	b008      	add	sp, #32
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <__kfifo_get>:


size_t __kfifo_get(struct KFIFO_DMA *fifo, uint8_t *buffer, size_t len)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b086      	sub	sp, #24
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	60f8      	str	r0, [r7, #12]
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	607a      	str	r2, [r7, #4]
	if(len == 0)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <__kfifo_get+0x16>
		return 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e046      	b.n	8004e3a <__kfifo_get+0xa4>
    unsigned int L;

    // NOTE: in - out can in no case be greater than size, never, the code prevents that from happening.
    // so do not think about that.
    len = min(len, kfifo_get_filled_size(fifo));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	0018      	movs	r0, r3
 8004db0:	f000 f857 	bl	8004e62 <kfifo_get_filled_size>
 8004db4:	0002      	movs	r2, r0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d305      	bcc.n	8004dc8 <__kfifo_get+0x32>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f000 f84f 	bl	8004e62 <kfifo_get_filled_size>
 8004dc4:	0003      	movs	r3, r0
 8004dc6:	e000      	b.n	8004dca <__kfifo_get+0x34>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	607b      	str	r3, [r7, #4]
    uint32_t out_mod = __kfifo_mod(fifo, fifo->out);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	0011      	movs	r1, r2
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f7ff ff7f 	bl	8004cd8 <__kfifo_mod>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	617b      	str	r3, [r7, #20]
     * Ensure that we sample the fifo->in index -before- we
     * start removing bytes from the kfifo.
     */

    /* first get the data from fifo->out until the end of the buffer */
    L = min(len, fifo->size - out_mod );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	1ad2      	subs	r2, r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d900      	bls.n	8004dee <__kfifo_get+0x58>
 8004dec:	0013      	movs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    memcpy(buffer, fifo->buffer + out_mod, L);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	18d1      	adds	r1, r2, r3
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f005 ffbf 	bl	800ad80 <memcpy>

    /* then get the rest (if any) from the beginning of the buffer */
    if(len - L)
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d00a      	beq.n	8004e20 <__kfifo_get+0x8a>
    	memcpy(buffer + L, fifo->buffer, len - L);
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	18d0      	adds	r0, r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6819      	ldr	r1, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	001a      	movs	r2, r3
 8004e1c:	f005 ffb0 	bl	800ad80 <memcpy>


    fifo->out += len;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	18d2      	adds	r2, r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	615a      	str	r2, [r3, #20]
    fifo->bytesRead+=len;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	69da      	ldr	r2, [r3, #28]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	18d2      	adds	r2, r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	61da      	str	r2, [r3, #28]
    return len;
 8004e38:	687b      	ldr	r3, [r7, #4]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b006      	add	sp, #24
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <kfifo_get_free_space>:
{
	fifo->out = fifo->in;
}

size_t kfifo_get_free_space( KFIFO_DMA *fifo)
{
 8004e42:	b590      	push	{r4, r7, lr}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
	return fifo->size - kfifo_get_filled_size(fifo);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685c      	ldr	r4, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 f806 	bl	8004e62 <kfifo_get_filled_size>
 8004e56:	0003      	movs	r3, r0
 8004e58:	1ae3      	subs	r3, r4, r3
}
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	b003      	add	sp, #12
 8004e60:	bd90      	pop	{r4, r7, pc}

08004e62 <kfifo_get_filled_size>:

size_t kfifo_get_filled_size( KFIFO_DMA *fifo)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
	return fifo->in - fifo->out;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	1ad3      	subs	r3, r2, r3
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b002      	add	sp, #8
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <CH395SetBuffer>:
#include <CH395.h>
#include <CH395CMD.h>
#include "Delay.h"

void CH395SetBuffer() // use all 8 sockets, each socket 1.5KB x 2 buffer (each buffer block has 512B)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t blk = 0;
 8004e82:	1dbb      	adds	r3, r7, #6
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 8004e88:	1dfb      	adds	r3, r7, #7
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e01e      	b.n	8004ece <CH395SetBuffer+0x52>
	{
		CH395SetSocketRecvBuf(i, blk, 3);
 8004e90:	1dbb      	adds	r3, r7, #6
 8004e92:	7819      	ldrb	r1, [r3, #0]
 8004e94:	1dfb      	adds	r3, r7, #7
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2203      	movs	r2, #3
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f000 fd92 	bl	80059c4 <CH395SetSocketRecvBuf>
		blk += 3;
 8004ea0:	1dbb      	adds	r3, r7, #6
 8004ea2:	1dba      	adds	r2, r7, #6
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	3203      	adds	r2, #3
 8004ea8:	701a      	strb	r2, [r3, #0]
		CH395SetSocketSendBuf(i, blk, 3);
 8004eaa:	1dbb      	adds	r3, r7, #6
 8004eac:	7819      	ldrb	r1, [r3, #0]
 8004eae:	1dfb      	adds	r3, r7, #7
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f000 fdaa 	bl	8005a0e <CH395SetSocketSendBuf>
		blk += 3;
 8004eba:	1dbb      	adds	r3, r7, #6
 8004ebc:	1dba      	adds	r2, r7, #6
 8004ebe:	7812      	ldrb	r2, [r2, #0]
 8004ec0:	3203      	adds	r2, #3
 8004ec2:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 8004ec4:	1dfb      	adds	r3, r7, #7
 8004ec6:	1dfa      	adds	r2, r7, #7
 8004ec8:	7812      	ldrb	r2, [r2, #0]
 8004eca:	3201      	adds	r2, #1
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	1dfb      	adds	r3, r7, #7
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	d9dc      	bls.n	8004e90 <CH395SetBuffer+0x14>
	}
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <CH395TCPServerStart>:

BOOL CH395TCPServerStart(uint32_t ip, uint16_t port_http_server, uint16_t port_tcp_server)
{
 8004ee0:	b5b0      	push	{r4, r5, r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	0008      	movs	r0, r1
 8004eea:	0011      	movs	r1, r2
 8004eec:	1cbb      	adds	r3, r7, #2
 8004eee:	1c02      	adds	r2, r0, #0
 8004ef0:	801a      	strh	r2, [r3, #0]
 8004ef2:	003b      	movs	r3, r7
 8004ef4:	1c0a      	adds	r2, r1, #0
 8004ef6:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	//enable multi connections
	// !!!setStartPara must before Init!!!!
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER | FUN_PARA_FLAG_LOW_PWR);
 8004ef8:	2006      	movs	r0, #6
 8004efa:	f000 fdad 	bl	8005a58 <CH395SetStartPara>
	// Initialize Stack
	CH395CMDInitCH395();
 8004efe:	f000 f91d 	bl	800513c <CH395CMDInitCH395>
	ch395.RX_received = 0;
 8004f02:	4b64      	ldr	r3, [pc, #400]	; (8005094 <CH395TCPServerStart+0x1b4>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	765a      	strb	r2, [r3, #25]
	ch395.TX_available= 0;
 8004f08:	4b62      	ldr	r3, [pc, #392]	; (8005094 <CH395TCPServerStart+0x1b4>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	76da      	strb	r2, [r3, #27]
	ch395.SOCK_responding = -1;
 8004f0e:	4b61      	ldr	r3, [pc, #388]	; (8005094 <CH395TCPServerStart+0x1b4>)
 8004f10:	22ff      	movs	r2, #255	; 0xff
 8004f12:	769a      	strb	r2, [r3, #26]
	// Check PHY
	i=0;
 8004f14:	2317      	movs	r3, #23
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
	do
	{
		uint8_t phy = CH395CMDGetPHYStatus();
 8004f1c:	2515      	movs	r5, #21
 8004f1e:	197c      	adds	r4, r7, r5
 8004f20:	f000 f8f0 	bl	8005104 <CH395CMDGetPHYStatus>
 8004f24:	0003      	movs	r3, r0
 8004f26:	7023      	strb	r3, [r4, #0]
		if(phy != PHY_DISCONN) break; // PHY connected
 8004f28:	197b      	adds	r3, r7, r5
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10f      	bne.n	8004f50 <CH395TCPServerStart+0x70>
		++i;
 8004f30:	2417      	movs	r4, #23
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	193a      	adds	r2, r7, r4
 8004f36:	7812      	ldrb	r2, [r2, #0]
 8004f38:	3201      	adds	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8004f3c:	23fa      	movs	r3, #250	; 0xfa
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7fb fda1 	bl	8000a88 <HAL_Delay>
	}while(i<20);
 8004f46:	193b      	adds	r3, r7, r4
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b13      	cmp	r3, #19
 8004f4c:	d9e6      	bls.n	8004f1c <CH395TCPServerStart+0x3c>
 8004f4e:	e000      	b.n	8004f52 <CH395TCPServerStart+0x72>
		if(phy != PHY_DISCONN) break; // PHY connected
 8004f50:	46c0      	nop			; (mov r8, r8)
	if(i >= 20) return false;
 8004f52:	2317      	movs	r3, #23
 8004f54:	18fb      	adds	r3, r7, r3
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b13      	cmp	r3, #19
 8004f5a:	d901      	bls.n	8004f60 <CH395TCPServerStart+0x80>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	e095      	b.n	800508c <CH395TCPServerStart+0x1ac>
	// DHCP
	if(CH395DHCPEnable(true) != 0)
 8004f60:	2001      	movs	r0, #1
 8004f62:	f000 fca9 	bl	80058b8 <CH395DHCPEnable>
 8004f66:	1e03      	subs	r3, r0, #0
 8004f68:	d002      	beq.n	8004f70 <CH395TCPServerStart+0x90>
	{
		// DHCP not enabled
//		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
//		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
		HAL_Delay(100);
 8004f6a:	2064      	movs	r0, #100	; 0x64
 8004f6c:	f7fb fd8c 	bl	8000a88 <HAL_Delay>
	}
//	HAL_Delay(100);

	// set multiple sockets
	uint8_t err = 0;
 8004f70:	2416      	movs	r4, #22
 8004f72:	193b      	adds	r3, r7, r4
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
	if(port_http_server > 0)
 8004f78:	1cbb      	adds	r3, r7, #2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d100      	bne.n	8004f82 <CH395TCPServerStart+0xa2>
 8004f80:	e07e      	b.n	8005080 <CH395TCPServerStart+0x1a0>
	{

		// open socket 0 for listening HTTP
		CH395SetSocketProtType(0, PROTO_TYPE_TCP); // set SOC
 8004f82:	2103      	movs	r1, #3
 8004f84:	2000      	movs	r0, #0
 8004f86:	f000 f9bd 	bl	8005304 <CH395SetSocketProtType>
		CH395SetSocketSourPort(0, port_http_server); // listen on HTTP port
 8004f8a:	1cbb      	adds	r3, r7, #2
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	0019      	movs	r1, r3
 8004f90:	2000      	movs	r0, #0
 8004f92:	f000 fa09 	bl	80053a8 <CH395SetSocketSourPort>
		CH395OpenSocket(0);
 8004f96:	2000      	movs	r0, #0
 8004f98:	f000 fba0 	bl	80056dc <CH395OpenSocket>
		err = CH395TCPListen(0); // start lisening
 8004f9c:	193c      	adds	r4, r7, r4
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	f000 fbde 	bl	8005760 <CH395TCPListen>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	7023      	strb	r3, [r4, #0]
//		CH395SetSocketSourPort(CH395_TCP_LISTEN_SOCK, port_tcp_server); // listen on TCP port
//		CH395OpenSocket(CH395_TCP_LISTEN_SOCK);
//		err = CH395TCPListen(CH395_TCP_LISTEN_SOCK); // start lisening

		// open other multiple sockets
		for(i=1; i < 7; ++i)
 8004fa8:	2317      	movs	r3, #23
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	2201      	movs	r2, #1
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e02d      	b.n	800500e <CH395TCPServerStart+0x12e>
		{
//			if(i == CH395_TCP_LISTEN_SOCK) continue; // skip port 5, for it's a listener
			CH395_protocol_t proto = ch395.cfg.protocols[i];
 8004fb2:	2017      	movs	r0, #23
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	2514      	movs	r5, #20
 8004fba:	197b      	adds	r3, r7, r5
 8004fbc:	4935      	ldr	r1, [pc, #212]	; (8005094 <CH395TCPServerStart+0x1b4>)
 8004fbe:	188a      	adds	r2, r1, r2
 8004fc0:	7c12      	ldrb	r2, [r2, #16]
 8004fc2:	701a      	strb	r2, [r3, #0]
			uint16_t port = ch395.cfg.ports[i];
 8004fc4:	183b      	adds	r3, r7, r0
 8004fc6:	7819      	ldrb	r1, [r3, #0]
 8004fc8:	2412      	movs	r4, #18
 8004fca:	193b      	adds	r3, r7, r4
 8004fcc:	4a31      	ldr	r2, [pc, #196]	; (8005094 <CH395TCPServerStart+0x1b4>)
 8004fce:	0049      	lsls	r1, r1, #1
 8004fd0:	5a8a      	ldrh	r2, [r1, r2]
 8004fd2:	801a      	strh	r2, [r3, #0]
			if(proto != CH395_PROTOCOL_NOT_USED && port > 0)
 8004fd4:	197b      	adds	r3, r7, r5
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d012      	beq.n	8005002 <CH395TCPServerStart+0x122>
 8004fdc:	193b      	adds	r3, r7, r4
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <CH395TCPServerStart+0x122>
			{
				CH395SetSocketSourPort(i, port); // listen on HTTP port
 8004fe4:	193b      	adds	r3, r7, r4
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	0004      	movs	r4, r0
 8004fea:	183b      	adds	r3, r7, r0
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	0011      	movs	r1, r2
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f000 f9d9 	bl	80053a8 <CH395SetSocketSourPort>
				CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET  to be TCP server
 8004ff6:	193b      	adds	r3, r7, r4
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2103      	movs	r1, #3
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f000 f981 	bl	8005304 <CH395SetSocketProtType>
		for(i=1; i < 7; ++i)
 8005002:	2217      	movs	r2, #23
 8005004:	18bb      	adds	r3, r7, r2
 8005006:	18ba      	adds	r2, r7, r2
 8005008:	7812      	ldrb	r2, [r2, #0]
 800500a:	3201      	adds	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	2417      	movs	r4, #23
 8005010:	193b      	adds	r3, r7, r4
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b06      	cmp	r3, #6
 8005016:	d9cc      	bls.n	8004fb2 <CH395TCPServerStart+0xd2>
			}
		}

		/* UDP Server BEGIN */
		// open socket 7 for listening UDP
		i = CH395_UDP_LISTEN_SOCK;
 8005018:	193b      	adds	r3, r7, r4
 800501a:	2207      	movs	r2, #7
 800501c:	701a      	strb	r2, [r3, #0]
		CH395SetSocketProtType(i, PROTO_TYPE_UDP); // set SOC
 800501e:	193b      	adds	r3, r7, r4
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2102      	movs	r1, #2
 8005024:	0018      	movs	r0, r3
 8005026:	f000 f96d 	bl	8005304 <CH395SetSocketProtType>
		// enter UDP server mode by setting IP as 255.255.255.255
		uint8_t IP_UDP[4] = {255,255,255,255};
 800502a:	210c      	movs	r1, #12
 800502c:	187b      	adds	r3, r7, r1
 800502e:	2201      	movs	r2, #1
 8005030:	4252      	negs	r2, r2
 8005032:	601a      	str	r2, [r3, #0]
		CH395SetSocketDesIP(i, IP_UDP);
 8005034:	187a      	adds	r2, r7, r1
 8005036:	193b      	adds	r3, r7, r4
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	0011      	movs	r1, r2
 800503c:	0018      	movs	r0, r3
 800503e:	f000 f927 	bl	8005290 <CH395SetSocketDesIP>
		CH395SetSocketDesPort(i, ch395.cfg.ports[i]); // listen on TCP port
 8005042:	0021      	movs	r1, r4
 8005044:	193b      	adds	r3, r7, r4
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	4b12      	ldr	r3, [pc, #72]	; (8005094 <CH395TCPServerStart+0x1b4>)
 800504a:	0052      	lsls	r2, r2, #1
 800504c:	5ad2      	ldrh	r2, [r2, r3]
 800504e:	000c      	movs	r4, r1
 8005050:	187b      	adds	r3, r7, r1
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	0011      	movs	r1, r2
 8005056:	0018      	movs	r0, r3
 8005058:	f000 f978 	bl	800534c <CH395SetSocketDesPort>
		CH395SetSocketSourPort(i, ch395.cfg.ports[i]); // listen on TCP port
 800505c:	0021      	movs	r1, r4
 800505e:	187b      	adds	r3, r7, r1
 8005060:	781a      	ldrb	r2, [r3, #0]
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <CH395TCPServerStart+0x1b4>)
 8005064:	0052      	lsls	r2, r2, #1
 8005066:	5ad2      	ldrh	r2, [r2, r3]
 8005068:	000c      	movs	r4, r1
 800506a:	187b      	adds	r3, r7, r1
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	0011      	movs	r1, r2
 8005070:	0018      	movs	r0, r3
 8005072:	f000 f999 	bl	80053a8 <CH395SetSocketSourPort>
		CH395OpenSocket(i);
 8005076:	193b      	adds	r3, r7, r4
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fb2e 	bl	80056dc <CH395OpenSocket>
		/* UDP Server END */
	}

	return (err == 0);
 8005080:	2316      	movs	r3, #22
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	425a      	negs	r2, r3
 8005088:	4153      	adcs	r3, r2
 800508a:	b2db      	uxtb	r3, r3
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b006      	add	sp, #24
 8005092:	bdb0      	pop	{r4, r5, r7, pc}
 8005094:	20000010 	.word	0x20000010

08005098 <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
    xWriteCH395Cmd(CMD00_RESET_ALL);
 800509c:	2005      	movs	r0, #5
 800509e:	f000 fd29 	bl	8005af4 <xWriteCH395Cmd>
    xEndCH395Cmd();
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <CH395CMDReset+0x20>)
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <CH395CMDReset+0x20>)
 80050a8:	889b      	ldrh	r3, [r3, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	0019      	movs	r1, r3
 80050ae:	f7fc fb92 	bl	80017d6 <HAL_GPIO_WritePin>
}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	2000062c 	.word	0x2000062c

080050bc <CH395CMDCheckExist>:
* Input          : testdata 1字节测试数据
* Output         : None
* Return         : 硬件OK，返回 testdata按位取反
*******************************************************************************/
uint8_t CH395CMDCheckExist(uint8_t testdata)
{
 80050bc:	b5b0      	push	{r4, r5, r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	0002      	movs	r2, r0
 80050c4:	1dfb      	adds	r3, r7, #7
 80050c6:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    xWriteCH395Cmd(CMD11_CHECK_EXIST);
 80050c8:	2006      	movs	r0, #6
 80050ca:	f000 fd13 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(testdata);
 80050ce:	1dfb      	adds	r3, r7, #7
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 fd36 	bl	8005b44 <xWriteCH395Data>
    i = xReadCH395Data();
 80050d8:	250f      	movs	r5, #15
 80050da:	197c      	adds	r4, r7, r5
 80050dc:	f000 fd44 	bl	8005b68 <xReadCH395Data>
 80050e0:	0003      	movs	r3, r0
 80050e2:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <CH395CMDCheckExist+0x44>)
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <CH395CMDCheckExist+0x44>)
 80050ea:	889b      	ldrh	r3, [r3, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	0019      	movs	r1, r3
 80050f0:	f7fc fb71 	bl	80017d6 <HAL_GPIO_WritePin>
    return i;
 80050f4:	197b      	adds	r3, r7, r5
 80050f6:	781b      	ldrb	r3, [r3, #0]
}
 80050f8:	0018      	movs	r0, r3
 80050fa:	46bd      	mov	sp, r7
 80050fc:	b004      	add	sp, #16
 80050fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005100:	2000062c 	.word	0x2000062c

08005104 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 800510a:	2026      	movs	r0, #38	; 0x26
 800510c:	f000 fcf2 	bl	8005af4 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8005110:	1dfc      	adds	r4, r7, #7
 8005112:	f000 fd29 	bl	8005b68 <xReadCH395Data>
 8005116:	0003      	movs	r3, r0
 8005118:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <CH395CMDGetPHYStatus+0x34>)
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <CH395CMDGetPHYStatus+0x34>)
 8005120:	889b      	ldrh	r3, [r3, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	0019      	movs	r1, r3
 8005126:	f7fc fb56 	bl	80017d6 <HAL_GPIO_WritePin>
    return i;
 800512a:	1dfb      	adds	r3, r7, #7
 800512c:	781b      	ldrb	r3, [r3, #0]
}
 800512e:	0018      	movs	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	b003      	add	sp, #12
 8005134:	bd90      	pop	{r4, r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	2000062c 	.word	0x2000062c

0800513c <CH395CMDInitCH395>:
* Input          : None
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395CMDInitCH395(void)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8005142:	1dfb      	adds	r3, r7, #7
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 8005148:	1dbb      	adds	r3, r7, #6
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]

    xWriteCH395Cmd(CMD0W_INIT_CH395);
 800514e:	2027      	movs	r0, #39	; 0x27
 8005150:	f000 fcd0 	bl	8005af4 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8005154:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <CH395CMDInitCH395+0x64>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <CH395CMDInitCH395+0x64>)
 800515a:	889b      	ldrh	r3, [r3, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	0019      	movs	r1, r3
 8005160:	f7fc fb39 	bl	80017d6 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 8005164:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <CH395CMDInitCH395+0x68>)
 8005166:	0018      	movs	r0, r3
 8005168:	f000 fd44 	bl	8005bf4 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 800516c:	1dbc      	adds	r4, r7, #6
 800516e:	f000 f81b 	bl	80051a8 <CH395GetCmdStatus>
 8005172:	0003      	movs	r3, r0
 8005174:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8005176:	1dbb      	adds	r3, r7, #6
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b10      	cmp	r3, #16
 800517c:	d108      	bne.n	8005190 <CH395CMDInitCH395+0x54>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 800517e:	1dfb      	adds	r3, r7, #7
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	1dfa      	adds	r2, r7, #7
 8005184:	1c59      	adds	r1, r3, #1
 8005186:	7011      	strb	r1, [r2, #0]
 8005188:	2bc8      	cmp	r3, #200	; 0xc8
 800518a:	d9eb      	bls.n	8005164 <CH395CMDInitCH395+0x28>
 800518c:	23fa      	movs	r3, #250	; 0xfa
 800518e:	e002      	b.n	8005196 <CH395CMDInitCH395+0x5a>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8005190:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8005192:	1dbb      	adds	r3, r7, #6
 8005194:	781b      	ldrb	r3, [r3, #0]
}
 8005196:	0018      	movs	r0, r3
 8005198:	46bd      	mov	sp, r7
 800519a:	b003      	add	sp, #12
 800519c:	bd90      	pop	{r4, r7, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	2000062c 	.word	0x2000062c
 80051a4:	00002710 	.word	0x00002710

080051a8 <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 80051ae:	202c      	movs	r0, #44	; 0x2c
 80051b0:	f000 fca0 	bl	8005af4 <xWriteCH395Cmd>
    i = xReadCH395Data();
 80051b4:	1dfc      	adds	r4, r7, #7
 80051b6:	f000 fcd7 	bl	8005b68 <xReadCH395Data>
 80051ba:	0003      	movs	r3, r0
 80051bc:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <CH395GetCmdStatus+0x34>)
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <CH395GetCmdStatus+0x34>)
 80051c4:	889b      	ldrh	r3, [r3, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	0019      	movs	r1, r3
 80051ca:	f7fc fb04 	bl	80017d6 <HAL_GPIO_WritePin>
    return i;
 80051ce:	1dfb      	adds	r3, r7, #7
 80051d0:	781b      	ldrb	r3, [r3, #0]
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b003      	add	sp, #12
 80051d8:	bd90      	pop	{r4, r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	2000062c 	.word	0x2000062c

080051e0 <CH395CMDGetMACAddr>:
* Input          : amcaddr MAC地址指针
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDGetMACAddr(uint8_t *amcaddr)
{
 80051e0:	b590      	push	{r4, r7, lr}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD06_GET_MAC_ADDR);
 80051e8:	2040      	movs	r0, #64	; 0x40
 80051ea:	f000 fc83 	bl	8005af4 <xWriteCH395Cmd>
    for(i = 0; i < 6;i++)*amcaddr++ = xReadCH395Data();
 80051ee:	230f      	movs	r3, #15
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	e00c      	b.n	8005212 <CH395CMDGetMACAddr+0x32>
 80051f8:	687c      	ldr	r4, [r7, #4]
 80051fa:	1c63      	adds	r3, r4, #1
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	f000 fcb3 	bl	8005b68 <xReadCH395Data>
 8005202:	0003      	movs	r3, r0
 8005204:	7023      	strb	r3, [r4, #0]
 8005206:	210f      	movs	r1, #15
 8005208:	187b      	adds	r3, r7, r1
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	187b      	adds	r3, r7, r1
 800520e:	3201      	adds	r2, #1
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	230f      	movs	r3, #15
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b05      	cmp	r3, #5
 800521a:	d9ed      	bls.n	80051f8 <CH395CMDGetMACAddr+0x18>
    xEndCH395Cmd();
 800521c:	4b05      	ldr	r3, [pc, #20]	; (8005234 <CH395CMDGetMACAddr+0x54>)
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	4b04      	ldr	r3, [pc, #16]	; (8005234 <CH395CMDGetMACAddr+0x54>)
 8005222:	889b      	ldrh	r3, [r3, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	0019      	movs	r1, r3
 8005228:	f7fc fad5 	bl	80017d6 <HAL_GPIO_WritePin>
 }
 800522c:	46c0      	nop			; (mov r8, r8)
 800522e:	46bd      	mov	sp, r7
 8005230:	b005      	add	sp, #20
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	2000062c 	.word	0x2000062c

08005238 <CH395CMDGetUnreachIPPT>:
                        第4-8字节为IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDGetUnreachIPPT(uint8_t *list)
{
 8005238:	b590      	push	{r4, r7, lr}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD08_GET_UNREACH_IPPORT);
 8005240:	2028      	movs	r0, #40	; 0x28
 8005242:	f000 fc57 	bl	8005af4 <xWriteCH395Cmd>
    for(i = 0; i < 8; i++)
 8005246:	230f      	movs	r3, #15
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e00c      	b.n	800526a <CH395CMDGetUnreachIPPT+0x32>
    {
        *list++ = xReadCH395Data();
 8005250:	687c      	ldr	r4, [r7, #4]
 8005252:	1c63      	adds	r3, r4, #1
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	f000 fc87 	bl	8005b68 <xReadCH395Data>
 800525a:	0003      	movs	r3, r0
 800525c:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 8; i++)
 800525e:	210f      	movs	r1, #15
 8005260:	187b      	adds	r3, r7, r1
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	187b      	adds	r3, r7, r1
 8005266:	3201      	adds	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	230f      	movs	r3, #15
 800526c:	18fb      	adds	r3, r7, r3
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b07      	cmp	r3, #7
 8005272:	d9ed      	bls.n	8005250 <CH395CMDGetUnreachIPPT+0x18>
    }   
    xEndCH395Cmd();
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <CH395CMDGetUnreachIPPT+0x54>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4b04      	ldr	r3, [pc, #16]	; (800528c <CH395CMDGetUnreachIPPT+0x54>)
 800527a:	889b      	ldrh	r3, [r3, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	0019      	movs	r1, r3
 8005280:	f7fc faa9 	bl	80017d6 <HAL_GPIO_WritePin>
}
 8005284:	46c0      	nop			; (mov r8, r8)
 8005286:	46bd      	mov	sp, r7
 8005288:	b005      	add	sp, #20
 800528a:	bd90      	pop	{r4, r7, pc}
 800528c:	2000062c 	.word	0x2000062c

08005290 <CH395SetSocketDesIP>:
                   ipaddr 指向IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketDesIP(uint8_t sockindex,uint8_t *ipaddr)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	0002      	movs	r2, r0
 8005298:	6039      	str	r1, [r7, #0]
 800529a:	1dfb      	adds	r3, r7, #7
 800529c:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD50_SET_IP_ADDR_SN);
 800529e:	2031      	movs	r0, #49	; 0x31
 80052a0:	f000 fc28 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80052a4:	1dfb      	adds	r3, r7, #7
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	0018      	movs	r0, r3
 80052aa:	f000 fc4b 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	603a      	str	r2, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 fc44 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	603a      	str	r2, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 fc3d 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	603a      	str	r2, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	0018      	movs	r0, r3
 80052d4:	f000 fc36 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	603a      	str	r2, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	0018      	movs	r0, r3
 80052e2:	f000 fc2f 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <CH395SetSocketDesIP+0x70>)
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <CH395SetSocketDesIP+0x70>)
 80052ec:	889b      	ldrh	r3, [r3, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	0019      	movs	r1, r3
 80052f2:	f7fc fa70 	bl	80017d6 <HAL_GPIO_WritePin>
}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b002      	add	sp, #8
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	2000062c 	.word	0x2000062c

08005304 <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	0002      	movs	r2, r0
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	1dbb      	adds	r3, r7, #6
 8005312:	1c0a      	adds	r2, r1, #0
 8005314:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 8005316:	2034      	movs	r0, #52	; 0x34
 8005318:	f000 fbec 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800531c:	1dfb      	adds	r3, r7, #7
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	0018      	movs	r0, r3
 8005322:	f000 fc0f 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(prottype);
 8005326:	1dbb      	adds	r3, r7, #6
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	0018      	movs	r0, r3
 800532c:	f000 fc0a 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 8005330:	4b05      	ldr	r3, [pc, #20]	; (8005348 <CH395SetSocketProtType+0x44>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	4b04      	ldr	r3, [pc, #16]	; (8005348 <CH395SetSocketProtType+0x44>)
 8005336:	889b      	ldrh	r3, [r3, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	0019      	movs	r1, r3
 800533c:	f7fc fa4b 	bl	80017d6 <HAL_GPIO_WritePin>
}
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	46bd      	mov	sp, r7
 8005344:	b002      	add	sp, #8
 8005346:	bd80      	pop	{r7, pc}
 8005348:	2000062c 	.word	0x2000062c

0800534c <CH395SetSocketDesPort>:
                   desprot 2字节目的端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketDesPort(uint8_t sockindex,uint16_t desprot)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	0002      	movs	r2, r0
 8005354:	1dfb      	adds	r3, r7, #7
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	1d3b      	adds	r3, r7, #4
 800535a:	1c0a      	adds	r2, r1, #0
 800535c:	801a      	strh	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_DES_PORT_SN);
 800535e:	2032      	movs	r0, #50	; 0x32
 8005360:	f000 fbc8 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	0018      	movs	r0, r3
 800536a:	f000 fbeb 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)desprot);
 800536e:	1d3b      	adds	r3, r7, #4
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	0018      	movs	r0, r3
 8005376:	f000 fbe5 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(desprot >> 8));
 800537a:	1d3b      	adds	r3, r7, #4
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	b29b      	uxth	r3, r3
 8005382:	b2db      	uxtb	r3, r3
 8005384:	0018      	movs	r0, r3
 8005386:	f000 fbdd 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <CH395SetSocketDesPort+0x58>)
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <CH395SetSocketDesPort+0x58>)
 8005390:	889b      	ldrh	r3, [r3, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	0019      	movs	r1, r3
 8005396:	f7fc fa1e 	bl	80017d6 <HAL_GPIO_WritePin>
}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	2000062c 	.word	0x2000062c

080053a8 <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	0002      	movs	r2, r0
 80053b0:	1dfb      	adds	r3, r7, #7
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	1d3b      	adds	r3, r7, #4
 80053b6:	1c0a      	adds	r2, r1, #0
 80053b8:	801a      	strh	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 80053ba:	2033      	movs	r0, #51	; 0x33
 80053bc:	f000 fb9a 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80053c0:	1dfb      	adds	r3, r7, #7
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f000 fbbd 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 80053ca:	1d3b      	adds	r3, r7, #4
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	0018      	movs	r0, r3
 80053d2:	f000 fbb7 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	b29b      	uxth	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	0018      	movs	r0, r3
 80053e2:	f000 fbaf 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <CH395SetSocketSourPort+0x58>)
 80053e8:	6818      	ldr	r0, [r3, #0]
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <CH395SetSocketSourPort+0x58>)
 80053ec:	889b      	ldrh	r3, [r3, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	0019      	movs	r1, r3
 80053f2:	f7fc f9f0 	bl	80017d6 <HAL_GPIO_WritePin>
}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b002      	add	sp, #8
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	2000062c 	.word	0x2000062c

08005404 <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,const uint8_t *databuf,uint16_t len)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6039      	str	r1, [r7, #0]
 800540c:	0011      	movs	r1, r2
 800540e:	1dfb      	adds	r3, r7, #7
 8005410:	1c02      	adds	r2, r0, #0
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	1d3b      	adds	r3, r7, #4
 8005416:	1c0a      	adds	r2, r1, #0
 8005418:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 800541a:	e003      	b.n	8005424 <CH395SendData+0x20>
    {
    	Delay_ms(10);
 800541c:	4b2f      	ldr	r3, [pc, #188]	; (80054dc <CH395SendData+0xd8>)
 800541e:	0018      	movs	r0, r3
 8005420:	f000 fbe8 	bl	8005bf4 <Delay_us>
    while(!(ch395.TX_available & (1<<sockindex)))
 8005424:	4b2e      	ldr	r3, [pc, #184]	; (80054e0 <CH395SendData+0xdc>)
 8005426:	7edb      	ldrb	r3, [r3, #27]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	001a      	movs	r2, r3
 800542c:	1dfb      	adds	r3, r7, #7
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	411a      	asrs	r2, r3
 8005432:	0013      	movs	r3, r2
 8005434:	2201      	movs	r2, #1
 8005436:	4013      	ands	r3, r2
 8005438:	d0f0      	beq.n	800541c <CH395SendData+0x18>
    }
    ch395.TX_available &= ~(1<<sockindex);
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <CH395SendData+0xdc>)
 800543c:	7edb      	ldrb	r3, [r3, #27]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	b25b      	sxtb	r3, r3
 8005442:	1dfa      	adds	r2, r7, #7
 8005444:	7812      	ldrb	r2, [r2, #0]
 8005446:	2101      	movs	r1, #1
 8005448:	4091      	lsls	r1, r2
 800544a:	000a      	movs	r2, r1
 800544c:	b252      	sxtb	r2, r2
 800544e:	43d2      	mvns	r2, r2
 8005450:	b252      	sxtb	r2, r2
 8005452:	4013      	ands	r3, r2
 8005454:	b25b      	sxtb	r3, r3
 8005456:	b2da      	uxtb	r2, r3
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <CH395SendData+0xdc>)
 800545a:	76da      	strb	r2, [r3, #27]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 800545c:	2039      	movs	r0, #57	; 0x39
 800545e:	f000 fb49 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8005462:	1dfb      	adds	r3, r7, #7
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fb6c 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 800546c:	1d3b      	adds	r3, r7, #4
 800546e:	881b      	ldrh	r3, [r3, #0]
 8005470:	b2db      	uxtb	r3, r3
 8005472:	0018      	movs	r0, r3
 8005474:	f000 fb66 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8005478:	1d3b      	adds	r3, r7, #4
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	0a1b      	lsrs	r3, r3, #8
 800547e:	b29b      	uxth	r3, r3
 8005480:	b2db      	uxtb	r3, r3
 8005482:	0018      	movs	r0, r3
 8005484:	f000 fb5e 	bl	8005b44 <xWriteCH395Data>
    Delay_us(2);
 8005488:	2002      	movs	r0, #2
 800548a:	f000 fbb3 	bl	8005bf4 <Delay_us>
    for(i = 0; i < len; i++)
 800548e:	230e      	movs	r3, #14
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	2200      	movs	r2, #0
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e00d      	b.n	80054b4 <CH395SendData+0xb0>
    {
        xWriteCH395Data(*databuf);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	0018      	movs	r0, r3
 800549e:	f000 fb51 	bl	8005b44 <xWriteCH395Data>
        databuf++;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 80054a8:	210e      	movs	r1, #14
 80054aa:	187b      	adds	r3, r7, r1
 80054ac:	881a      	ldrh	r2, [r3, #0]
 80054ae:	187b      	adds	r3, r7, r1
 80054b0:	3201      	adds	r2, #1
 80054b2:	801a      	strh	r2, [r3, #0]
 80054b4:	230e      	movs	r3, #14
 80054b6:	18fa      	adds	r2, r7, r3
 80054b8:	1d3b      	adds	r3, r7, #4
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d3ea      	bcc.n	8005498 <CH395SendData+0x94>
    }
    xEndCH395Cmd();
 80054c2:	4b08      	ldr	r3, [pc, #32]	; (80054e4 <CH395SendData+0xe0>)
 80054c4:	6818      	ldr	r0, [r3, #0]
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <CH395SendData+0xe0>)
 80054c8:	889b      	ldrh	r3, [r3, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	0019      	movs	r1, r3
 80054ce:	f7fc f982 	bl	80017d6 <HAL_GPIO_WritePin>
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b004      	add	sp, #16
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	00002710 	.word	0x00002710
 80054e0:	20000010 	.word	0x20000010
 80054e4:	2000062c 	.word	0x2000062c

080054e8 <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	0002      	movs	r2, r0
 80054f0:	1dfb      	adds	r3, r7, #7
 80054f2:	701a      	strb	r2, [r3, #0]
 80054f4:	1d3b      	adds	r3, r7, #4
 80054f6:	1c0a      	adds	r2, r1, #0
 80054f8:	801a      	strh	r2, [r3, #0]
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 80054fa:	2039      	movs	r0, #57	; 0x39
 80054fc:	f000 fafa 	bl	8005af4 <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 8005500:	1dfb      	adds	r3, r7, #7
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	0018      	movs	r0, r3
 8005506:	f000 fb1d 	bl	8005b44 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	0018      	movs	r0, r3
 8005512:	f000 fb17 	bl	8005b44 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 8005516:	1d3b      	adds	r3, r7, #4
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	0a1b      	lsrs	r3, r3, #8
 800551c:	b29b      	uxth	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	0018      	movs	r0, r3
 8005522:	f000 fb0f 	bl	8005b44 <xWriteCH395Data>
	Delay_us(2);
 8005526:	2002      	movs	r0, #2
 8005528:	f000 fb64 	bl	8005bf4 <Delay_us>
}
 800552c:	46c0      	nop			; (mov r8, r8)
 800552e:	46bd      	mov	sp, r7
 8005530:	b002      	add	sp, #8
 8005532:	bd80      	pop	{r7, pc}

08005534 <CH395ContinueSendingData>:

void CH395ContinueSendingData(const uint8_t *databuf, uint16_t len)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	000a      	movs	r2, r1
 800553e:	1cbb      	adds	r3, r7, #2
 8005540:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	for(i=0; i<len; ++i)
 8005542:	230e      	movs	r3, #14
 8005544:	18fb      	adds	r3, r7, r3
 8005546:	2200      	movs	r2, #0
 8005548:	801a      	strh	r2, [r3, #0]
 800554a:	e00d      	b.n	8005568 <CH395ContinueSendingData+0x34>
	{
		xWriteCH395Data(*databuf);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 faf7 	bl	8005b44 <xWriteCH395Data>
		databuf++;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3301      	adds	r3, #1
 800555a:	607b      	str	r3, [r7, #4]
	for(i=0; i<len; ++i)
 800555c:	220e      	movs	r2, #14
 800555e:	18bb      	adds	r3, r7, r2
 8005560:	18ba      	adds	r2, r7, r2
 8005562:	8812      	ldrh	r2, [r2, #0]
 8005564:	3201      	adds	r2, #1
 8005566:	801a      	strh	r2, [r3, #0]
 8005568:	230e      	movs	r3, #14
 800556a:	18fa      	adds	r2, r7, r3
 800556c:	1cbb      	adds	r3, r7, #2
 800556e:	8812      	ldrh	r2, [r2, #0]
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3ea      	bcc.n	800554c <CH395ContinueSendingData+0x18>
	}
}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	46c0      	nop			; (mov r8, r8)
 800557a:	46bd      	mov	sp, r7
 800557c:	b004      	add	sp, #16
 800557e:	bd80      	pop	{r7, pc}

08005580 <CH395Complete>:
void CH395Complete()
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
	xEndCH395Cmd();
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <CH395Complete+0x1c>)
 8005586:	6818      	ldr	r0, [r3, #0]
 8005588:	4b04      	ldr	r3, [pc, #16]	; (800559c <CH395Complete+0x1c>)
 800558a:	889b      	ldrh	r3, [r3, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	0019      	movs	r1, r3
 8005590:	f7fc f921 	bl	80017d6 <HAL_GPIO_WritePin>
}
 8005594:	46c0      	nop			; (mov r8, r8)
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	2000062c 	.word	0x2000062c

080055a0 <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	0002      	movs	r2, r0
 80055a8:	1dfb      	adds	r3, r7, #7
 80055aa:	701a      	strb	r2, [r3, #0]
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 80055ac:	203b      	movs	r0, #59	; 0x3b
 80055ae:	f000 faa1 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 80055b2:	1dfb      	adds	r3, r7, #7
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	0018      	movs	r0, r3
 80055b8:	f000 fac4 	bl	8005b44 <xWriteCH395Data>
    i = xReadCH395Data();
 80055bc:	f000 fad4 	bl	8005b68 <xReadCH395Data>
 80055c0:	0003      	movs	r3, r0
 80055c2:	001a      	movs	r2, r3
 80055c4:	240e      	movs	r4, #14
 80055c6:	193b      	adds	r3, r7, r4
 80055c8:	801a      	strh	r2, [r3, #0]
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 80055ca:	f000 facd 	bl	8005b68 <xReadCH395Data>
 80055ce:	0003      	movs	r3, r0
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	021b      	lsls	r3, r3, #8
 80055d4:	b299      	uxth	r1, r3
 80055d6:	193b      	adds	r3, r7, r4
 80055d8:	193a      	adds	r2, r7, r4
 80055da:	8812      	ldrh	r2, [r2, #0]
 80055dc:	188a      	adds	r2, r1, r2
 80055de:	801a      	strh	r2, [r3, #0]
    xEndCH395Cmd();
 80055e0:	4b06      	ldr	r3, [pc, #24]	; (80055fc <CH395GetRecvLength+0x5c>)
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	4b05      	ldr	r3, [pc, #20]	; (80055fc <CH395GetRecvLength+0x5c>)
 80055e6:	889b      	ldrh	r3, [r3, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	0019      	movs	r1, r3
 80055ec:	f7fc f8f3 	bl	80017d6 <HAL_GPIO_WritePin>
    return i;
 80055f0:	193b      	adds	r3, r7, r4
 80055f2:	881b      	ldrh	r3, [r3, #0]
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b005      	add	sp, #20
 80055fa:	bd90      	pop	{r4, r7, pc}
 80055fc:	2000062c 	.word	0x2000062c

08005600 <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	0002      	movs	r2, r0
 8005608:	1dfb      	adds	r3, r7, #7
 800560a:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 800560c:	202e      	movs	r0, #46	; 0x2e
 800560e:	f000 fa71 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8005612:	1dfb      	adds	r3, r7, #7
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	0018      	movs	r0, r3
 8005618:	f000 fa94 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <CH395ClearRecvBuf+0x34>)
 800561e:	6818      	ldr	r0, [r3, #0]
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <CH395ClearRecvBuf+0x34>)
 8005622:	889b      	ldrh	r3, [r3, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	0019      	movs	r1, r3
 8005628:	f7fc f8d5 	bl	80017d6 <HAL_GPIO_WritePin>
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	46bd      	mov	sp, r7
 8005630:	b002      	add	sp, #8
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000062c 	.word	0x2000062c

08005638 <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	603a      	str	r2, [r7, #0]
 8005640:	1dfb      	adds	r3, r7, #7
 8005642:	1c02      	adds	r2, r0, #0
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	1c0a      	adds	r2, r1, #0
 800564a:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    if(!len)return;
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d03c      	beq.n	80056ce <CH395GetRecvData+0x96>
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 8005654:	203c      	movs	r0, #60	; 0x3c
 8005656:	f000 fa4d 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800565a:	1dfb      	adds	r3, r7, #7
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	0018      	movs	r0, r3
 8005660:	f000 fa70 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	0018      	movs	r0, r3
 800566c:	f000 fa6a 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8005670:	1d3b      	adds	r3, r7, #4
 8005672:	881b      	ldrh	r3, [r3, #0]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	b29b      	uxth	r3, r3
 8005678:	b2db      	uxtb	r3, r3
 800567a:	0018      	movs	r0, r3
 800567c:	f000 fa62 	bl	8005b44 <xWriteCH395Data>
    Delay_us(1);
 8005680:	2001      	movs	r0, #1
 8005682:	f000 fab7 	bl	8005bf4 <Delay_us>
    for(i = 0; i < len; i++)
 8005686:	230e      	movs	r3, #14
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	2200      	movs	r2, #0
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e00e      	b.n	80056ae <CH395GetRecvData+0x76>
    {
       *pbuf = xReadCH395Data();
 8005690:	f000 fa6a 	bl	8005b68 <xReadCH395Data>
 8005694:	0003      	movs	r3, r0
 8005696:	001a      	movs	r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	701a      	strb	r2, [r3, #0]
       pbuf++;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	3301      	adds	r3, #1
 80056a0:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 80056a2:	210e      	movs	r1, #14
 80056a4:	187b      	adds	r3, r7, r1
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	187b      	adds	r3, r7, r1
 80056aa:	3201      	adds	r2, #1
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	230e      	movs	r3, #14
 80056b0:	18fa      	adds	r2, r7, r3
 80056b2:	1d3b      	adds	r3, r7, #4
 80056b4:	8812      	ldrh	r2, [r2, #0]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d3e9      	bcc.n	8005690 <CH395GetRecvData+0x58>
    }   
    xEndCH395Cmd();
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <CH395GetRecvData+0xa0>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <CH395GetRecvData+0xa0>)
 80056c2:	889b      	ldrh	r3, [r3, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	0019      	movs	r1, r3
 80056c8:	f7fc f885 	bl	80017d6 <HAL_GPIO_WritePin>
 80056cc:	e000      	b.n	80056d0 <CH395GetRecvData+0x98>
    if(!len)return;
 80056ce:	46c0      	nop			; (mov r8, r8)
}
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b004      	add	sp, #16
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	2000062c 	.word	0x2000062c

080056dc <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 80056dc:	b5b0      	push	{r4, r5, r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	0002      	movs	r2, r0
 80056e4:	1dfb      	adds	r3, r7, #7
 80056e6:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 80056e8:	230f      	movs	r3, #15
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	2200      	movs	r2, #0
 80056ee:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 80056f0:	230e      	movs	r3, #14
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 80056f8:	2035      	movs	r0, #53	; 0x35
 80056fa:	f000 f9fb 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80056fe:	1dfb      	adds	r3, r7, #7
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	0018      	movs	r0, r3
 8005704:	f000 fa1e 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 8005708:	4b13      	ldr	r3, [pc, #76]	; (8005758 <CH395OpenSocket+0x7c>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	4b12      	ldr	r3, [pc, #72]	; (8005758 <CH395OpenSocket+0x7c>)
 800570e:	889b      	ldrh	r3, [r3, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	0019      	movs	r1, r3
 8005714:	f7fc f85f 	bl	80017d6 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8005718:	4b10      	ldr	r3, [pc, #64]	; (800575c <CH395OpenSocket+0x80>)
 800571a:	0018      	movs	r0, r3
 800571c:	f000 fa6a 	bl	8005bf4 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8005720:	250e      	movs	r5, #14
 8005722:	197c      	adds	r4, r7, r5
 8005724:	f7ff fd40 	bl	80051a8 <CH395GetCmdStatus>
 8005728:	0003      	movs	r3, r0
 800572a:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 800572c:	197b      	adds	r3, r7, r5
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b10      	cmp	r3, #16
 8005732:	d109      	bne.n	8005748 <CH395OpenSocket+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8005734:	220f      	movs	r2, #15
 8005736:	18bb      	adds	r3, r7, r2
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	18ba      	adds	r2, r7, r2
 800573c:	1c59      	adds	r1, r3, #1
 800573e:	7011      	strb	r1, [r2, #0]
 8005740:	2bc8      	cmp	r3, #200	; 0xc8
 8005742:	d9e9      	bls.n	8005718 <CH395OpenSocket+0x3c>
 8005744:	23fa      	movs	r3, #250	; 0xfa
 8005746:	e003      	b.n	8005750 <CH395OpenSocket+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8005748:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 800574a:	230e      	movs	r3, #14
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	781b      	ldrb	r3, [r3, #0]
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b004      	add	sp, #16
 8005756:	bdb0      	pop	{r4, r5, r7, pc}
 8005758:	2000062c 	.word	0x2000062c
 800575c:	00001388 	.word	0x00001388

08005760 <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 8005760:	b5b0      	push	{r4, r5, r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	0002      	movs	r2, r0
 8005768:	1dfb      	adds	r3, r7, #7
 800576a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 800576c:	230f      	movs	r3, #15
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 8005774:	230e      	movs	r3, #14
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 800577c:	2036      	movs	r0, #54	; 0x36
 800577e:	f000 f9b9 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8005782:	1dfb      	adds	r3, r7, #7
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	0018      	movs	r0, r3
 8005788:	f000 f9dc 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 800578c:	4b13      	ldr	r3, [pc, #76]	; (80057dc <CH395TCPListen+0x7c>)
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	4b12      	ldr	r3, [pc, #72]	; (80057dc <CH395TCPListen+0x7c>)
 8005792:	889b      	ldrh	r3, [r3, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	0019      	movs	r1, r3
 8005798:	f7fc f81d 	bl	80017d6 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <CH395TCPListen+0x80>)
 800579e:	0018      	movs	r0, r3
 80057a0:	f000 fa28 	bl	8005bf4 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80057a4:	250e      	movs	r5, #14
 80057a6:	197c      	adds	r4, r7, r5
 80057a8:	f7ff fcfe 	bl	80051a8 <CH395GetCmdStatus>
 80057ac:	0003      	movs	r3, r0
 80057ae:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80057b0:	197b      	adds	r3, r7, r5
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d109      	bne.n	80057cc <CH395TCPListen+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 80057b8:	220f      	movs	r2, #15
 80057ba:	18bb      	adds	r3, r7, r2
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	18ba      	adds	r2, r7, r2
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	7011      	strb	r1, [r2, #0]
 80057c4:	2bc8      	cmp	r3, #200	; 0xc8
 80057c6:	d9e9      	bls.n	800579c <CH395TCPListen+0x3c>
 80057c8:	23fa      	movs	r3, #250	; 0xfa
 80057ca:	e003      	b.n	80057d4 <CH395TCPListen+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80057cc:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 80057ce:	230e      	movs	r3, #14
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	781b      	ldrb	r3, [r3, #0]
}
 80057d4:	0018      	movs	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b004      	add	sp, #16
 80057da:	bdb0      	pop	{r4, r5, r7, pc}
 80057dc:	2000062c 	.word	0x2000062c
 80057e0:	00001388 	.word	0x00001388

080057e4 <CH395TCPDisconnect>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
uint8_t CH395TCPDisconnect(uint8_t sockindex)
{
 80057e4:	b5b0      	push	{r4, r5, r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	0002      	movs	r2, r0
 80057ec:	1dfb      	adds	r3, r7, #7
 80057ee:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 80057f0:	230f      	movs	r3, #15
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 80057f8:	230e      	movs	r3, #14
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_DISNCONNECT_SN);
 8005800:	2038      	movs	r0, #56	; 0x38
 8005802:	f000 f977 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8005806:	1dfb      	adds	r3, r7, #7
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f99a 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 8005810:	4b13      	ldr	r3, [pc, #76]	; (8005860 <CH395TCPDisconnect+0x7c>)
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <CH395TCPDisconnect+0x7c>)
 8005816:	889b      	ldrh	r3, [r3, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	0019      	movs	r1, r3
 800581c:	f7fb ffdb 	bl	80017d6 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8005820:	4b10      	ldr	r3, [pc, #64]	; (8005864 <CH395TCPDisconnect+0x80>)
 8005822:	0018      	movs	r0, r3
 8005824:	f000 f9e6 	bl	8005bf4 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8005828:	250e      	movs	r5, #14
 800582a:	197c      	adds	r4, r7, r5
 800582c:	f7ff fcbc 	bl	80051a8 <CH395GetCmdStatus>
 8005830:	0003      	movs	r3, r0
 8005832:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8005834:	197b      	adds	r3, r7, r5
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b10      	cmp	r3, #16
 800583a:	d109      	bne.n	8005850 <CH395TCPDisconnect+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 800583c:	220f      	movs	r2, #15
 800583e:	18bb      	adds	r3, r7, r2
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	18ba      	adds	r2, r7, r2
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	7011      	strb	r1, [r2, #0]
 8005848:	2bc8      	cmp	r3, #200	; 0xc8
 800584a:	d9e9      	bls.n	8005820 <CH395TCPDisconnect+0x3c>
 800584c:	23fa      	movs	r3, #250	; 0xfa
 800584e:	e003      	b.n	8005858 <CH395TCPDisconnect+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8005850:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8005852:	230e      	movs	r3, #14
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	781b      	ldrb	r3, [r3, #0]
}
 8005858:	0018      	movs	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	b004      	add	sp, #16
 800585e:	bdb0      	pop	{r4, r5, r7, pc}
 8005860:	2000062c 	.word	0x2000062c
 8005864:	00001388 	.word	0x00001388

08005868 <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 8005868:	b5b0      	push	{r4, r5, r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	0002      	movs	r2, r0
 8005870:	1dfb      	adds	r3, r7, #7
 8005872:	701a      	strb	r2, [r3, #0]
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 8005874:	2030      	movs	r0, #48	; 0x30
 8005876:	f000 f93d 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800587a:	1dfb      	adds	r3, r7, #7
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	0018      	movs	r0, r3
 8005880:	f000 f960 	bl	8005b44 <xWriteCH395Data>
    Delay_us(2);
 8005884:	2002      	movs	r0, #2
 8005886:	f000 f9b5 	bl	8005bf4 <Delay_us>
    intstatus = xReadCH395Data();
 800588a:	250f      	movs	r5, #15
 800588c:	197c      	adds	r4, r7, r5
 800588e:	f000 f96b 	bl	8005b68 <xReadCH395Data>
 8005892:	0003      	movs	r3, r0
 8005894:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8005896:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <CH395GetSocketInt+0x4c>)
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <CH395GetSocketInt+0x4c>)
 800589c:	889b      	ldrh	r3, [r3, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	0019      	movs	r1, r3
 80058a2:	f7fb ff98 	bl	80017d6 <HAL_GPIO_WritePin>
    return intstatus;
 80058a6:	197b      	adds	r3, r7, r5
 80058a8:	781b      	ldrb	r3, [r3, #0]
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b004      	add	sp, #16
 80058b0:	bdb0      	pop	{r4, r5, r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	2000062c 	.word	0x2000062c

080058b8 <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 80058b8:	b5b0      	push	{r4, r5, r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	0002      	movs	r2, r0
 80058c0:	1dfb      	adds	r3, r7, #7
 80058c2:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 80058c4:	230f      	movs	r3, #15
 80058c6:	18fb      	adds	r3, r7, r3
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 80058cc:	2041      	movs	r0, #65	; 0x41
 80058ce:	f000 f911 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 80058d2:	1dfb      	adds	r3, r7, #7
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	0018      	movs	r0, r3
 80058d8:	f000 f934 	bl	8005b44 <xWriteCH395Data>
    xEndCH395Cmd();
 80058dc:	4b13      	ldr	r3, [pc, #76]	; (800592c <CH395DHCPEnable+0x74>)
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	4b12      	ldr	r3, [pc, #72]	; (800592c <CH395DHCPEnable+0x74>)
 80058e2:	889b      	ldrh	r3, [r3, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	0019      	movs	r1, r3
 80058e8:	f7fb ff75 	bl	80017d6 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(20);
 80058ec:	4b10      	ldr	r3, [pc, #64]	; (8005930 <CH395DHCPEnable+0x78>)
 80058ee:	0018      	movs	r0, r3
 80058f0:	f000 f980 	bl	8005bf4 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80058f4:	250e      	movs	r5, #14
 80058f6:	197c      	adds	r4, r7, r5
 80058f8:	f7ff fc56 	bl	80051a8 <CH395GetCmdStatus>
 80058fc:	0003      	movs	r3, r0
 80058fe:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8005900:	197b      	adds	r3, r7, r5
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b10      	cmp	r3, #16
 8005906:	d109      	bne.n	800591c <CH395DHCPEnable+0x64>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8005908:	220f      	movs	r2, #15
 800590a:	18bb      	adds	r3, r7, r2
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	18ba      	adds	r2, r7, r2
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	7011      	strb	r1, [r2, #0]
 8005914:	2bc8      	cmp	r3, #200	; 0xc8
 8005916:	d9e9      	bls.n	80058ec <CH395DHCPEnable+0x34>
 8005918:	23fa      	movs	r3, #250	; 0xfa
 800591a:	e003      	b.n	8005924 <CH395DHCPEnable+0x6c>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 800591c:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 800591e:	230e      	movs	r3, #14
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	781b      	ldrb	r3, [r3, #0]
}
 8005924:	0018      	movs	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	b004      	add	sp, #16
 800592a:	bdb0      	pop	{r4, r5, r7, pc}
 800592c:	2000062c 	.word	0x2000062c
 8005930:	00004e20 	.word	0x00004e20

08005934 <CH395GetDHCPStatus>:
* Input          : None
* Output         : None
* Return         : DHCP状态，0为成功，其他值表示错误
*******************************************************************************/
uint8_t CH395GetDHCPStatus(void)
{
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
    uint8_t status;
    xWriteCH395Cmd(CMD01_GET_DHCP_STATUS);
 800593a:	2042      	movs	r0, #66	; 0x42
 800593c:	f000 f8da 	bl	8005af4 <xWriteCH395Cmd>
    status = xReadCH395Data();
 8005940:	1dfc      	adds	r4, r7, #7
 8005942:	f000 f911 	bl	8005b68 <xReadCH395Data>
 8005946:	0003      	movs	r3, r0
 8005948:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 800594a:	4b07      	ldr	r3, [pc, #28]	; (8005968 <CH395GetDHCPStatus+0x34>)
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <CH395GetDHCPStatus+0x34>)
 8005950:	889b      	ldrh	r3, [r3, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	0019      	movs	r1, r3
 8005956:	f7fb ff3e 	bl	80017d6 <HAL_GPIO_WritePin>
    return status;
 800595a:	1dfb      	adds	r3, r7, #7
 800595c:	781b      	ldrb	r3, [r3, #0]
}
 800595e:	0018      	movs	r0, r3
 8005960:	46bd      	mov	sp, r7
 8005962:	b003      	add	sp, #12
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	2000062c 	.word	0x2000062c

0800596c <CH395GetIPInf>:
* Input          : None
* Output         : 12个字节的IP,子网掩码和网关地址
* Return         : None
*******************************************************************************/
void CH395GetIPInf(uint8_t *addr)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
    uint8_t i;
    xWriteCH395Cmd(CMD014_GET_IP_INF);
 8005974:	2043      	movs	r0, #67	; 0x43
 8005976:	f000 f8bd 	bl	8005af4 <xWriteCH395Cmd>
    for(i = 0; i < 20; i++)
 800597a:	230f      	movs	r3, #15
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2200      	movs	r2, #0
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e00c      	b.n	800599e <CH395GetIPInf+0x32>
    {
     *addr++ = xReadCH395Data();
 8005984:	687c      	ldr	r4, [r7, #4]
 8005986:	1c63      	adds	r3, r4, #1
 8005988:	607b      	str	r3, [r7, #4]
 800598a:	f000 f8ed 	bl	8005b68 <xReadCH395Data>
 800598e:	0003      	movs	r3, r0
 8005990:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 20; i++)
 8005992:	210f      	movs	r1, #15
 8005994:	187b      	adds	r3, r7, r1
 8005996:	781a      	ldrb	r2, [r3, #0]
 8005998:	187b      	adds	r3, r7, r1
 800599a:	3201      	adds	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	230f      	movs	r3, #15
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b13      	cmp	r3, #19
 80059a6:	d9ed      	bls.n	8005984 <CH395GetIPInf+0x18>
    }
    xEndCH395Cmd();
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <CH395GetIPInf+0x54>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4b04      	ldr	r3, [pc, #16]	; (80059c0 <CH395GetIPInf+0x54>)
 80059ae:	889b      	ldrh	r3, [r3, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	0019      	movs	r1, r3
 80059b4:	f7fb ff0f 	bl	80017d6 <HAL_GPIO_WritePin>
}
 80059b8:	46c0      	nop			; (mov r8, r8)
 80059ba:	46bd      	mov	sp, r7
 80059bc:	b005      	add	sp, #20
 80059be:	bd90      	pop	{r4, r7, pc}
 80059c0:	2000062c 	.word	0x2000062c

080059c4 <CH395SetSocketRecvBuf>:
                 ：blknum     单位缓冲区个数 ，单位为512字节
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketRecvBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	0004      	movs	r4, r0
 80059cc:	0008      	movs	r0, r1
 80059ce:	0011      	movs	r1, r2
 80059d0:	1dfb      	adds	r3, r7, #7
 80059d2:	1c22      	adds	r2, r4, #0
 80059d4:	701a      	strb	r2, [r3, #0]
 80059d6:	1dbb      	adds	r3, r7, #6
 80059d8:	1c02      	adds	r2, r0, #0
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	1d7b      	adds	r3, r7, #5
 80059de:	1c0a      	adds	r2, r1, #0
 80059e0:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_RECV_BUF);
 80059e2:	2052      	movs	r0, #82	; 0x52
 80059e4:	f000 f886 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80059e8:	1dfb      	adds	r3, r7, #7
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	0018      	movs	r0, r3
 80059ee:	f000 f8a9 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 80059f2:	1dbb      	adds	r3, r7, #6
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	0018      	movs	r0, r3
 80059f8:	f000 f8a4 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 80059fc:	1d7b      	adds	r3, r7, #5
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	0018      	movs	r0, r3
 8005a02:	f000 f89f 	bl	8005b44 <xWriteCH395Data>
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b003      	add	sp, #12
 8005a0c:	bd90      	pop	{r4, r7, pc}

08005a0e <CH395SetSocketSendBuf>:
                 ：blknum     单位缓冲区个数
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSendBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 8005a0e:	b590      	push	{r4, r7, lr}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	0004      	movs	r4, r0
 8005a16:	0008      	movs	r0, r1
 8005a18:	0011      	movs	r1, r2
 8005a1a:	1dfb      	adds	r3, r7, #7
 8005a1c:	1c22      	adds	r2, r4, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
 8005a20:	1dbb      	adds	r3, r7, #6
 8005a22:	1c02      	adds	r2, r0, #0
 8005a24:	701a      	strb	r2, [r3, #0]
 8005a26:	1d7b      	adds	r3, r7, #5
 8005a28:	1c0a      	adds	r2, r1, #0
 8005a2a:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SEND_BUF);
 8005a2c:	2053      	movs	r0, #83	; 0x53
 8005a2e:	f000 f861 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8005a32:	1dfb      	adds	r3, r7, #7
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	0018      	movs	r0, r3
 8005a38:	f000 f884 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 8005a3c:	1dbb      	adds	r3, r7, #6
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	0018      	movs	r0, r3
 8005a42:	f000 f87f 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 8005a46:	1d7b      	adds	r3, r7, #5
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f000 f87a 	bl	8005b44 <xWriteCH395Data>
}
 8005a50:	46c0      	nop			; (mov r8, r8)
 8005a52:	46bd      	mov	sp, r7
 8005a54:	b003      	add	sp, #12
 8005a56:	bd90      	pop	{r4, r7, pc}

08005a58 <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 8005a60:	2055      	movs	r0, #85	; 0x55
 8005a62:	f000 f847 	bl	8005af4 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f000 f86a 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f000 f862 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0c1b      	lsrs	r3, r3, #16
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 f85c 	bl	8005b44 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	0e1b      	lsrs	r3, r3, #24
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	0018      	movs	r0, r3
 8005a94:	f000 f856 	bl	8005b44 <xWriteCH395Data>
}
 8005a98:	46c0      	nop			; (mov r8, r8)
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	b002      	add	sp, #8
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <CH395CMDGetGlobIntStatus_ALL>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint16_t CH395CMDGetGlobIntStatus_ALL(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
		uint16_t init_status;
		xWriteCH395Cmd(CMD02_GET_GLOB_INT_STATUS_ALL);
 8005aa6:	2019      	movs	r0, #25
 8005aa8:	f000 f824 	bl	8005af4 <xWriteCH395Cmd>
		Delay_us(2);
 8005aac:	2002      	movs	r0, #2
 8005aae:	f000 f8a1 	bl	8005bf4 <Delay_us>
		init_status = xReadCH395Data();
 8005ab2:	f000 f859 	bl	8005b68 <xReadCH395Data>
 8005ab6:	0003      	movs	r3, r0
 8005ab8:	001a      	movs	r2, r3
 8005aba:	1dbb      	adds	r3, r7, #6
 8005abc:	801a      	strh	r2, [r3, #0]
		init_status = (uint16_t)(xReadCH395Data()<<8) + init_status;
 8005abe:	f000 f853 	bl	8005b68 <xReadCH395Data>
 8005ac2:	0003      	movs	r3, r0
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	b299      	uxth	r1, r3
 8005aca:	1dbb      	adds	r3, r7, #6
 8005acc:	1dba      	adds	r2, r7, #6
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	188a      	adds	r2, r1, r2
 8005ad2:	801a      	strh	r2, [r3, #0]
		xEndCH395Cmd();
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <CH395CMDGetGlobIntStatus_ALL+0x50>)
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <CH395CMDGetGlobIntStatus_ALL+0x50>)
 8005ada:	889b      	ldrh	r3, [r3, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	0019      	movs	r1, r3
 8005ae0:	f7fb fe79 	bl	80017d6 <HAL_GPIO_WritePin>
		return 	init_status;
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	881b      	ldrh	r3, [r3, #0]
}
 8005ae8:	0018      	movs	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b002      	add	sp, #8
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2000062c 	.word	0x2000062c

08005af4 <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	0002      	movs	r2, r0
 8005afc:	1dfb      	adds	r3, r7, #7
 8005afe:	701a      	strb	r2, [r3, #0]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 8005b00:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <xWriteCH395Cmd+0x48>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	4b0d      	ldr	r3, [pc, #52]	; (8005b3c <xWriteCH395Cmd+0x48>)
 8005b06:	889b      	ldrh	r3, [r3, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	0019      	movs	r1, r3
 8005b0c:	f7fb fe63 	bl	80017d6 <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <xWriteCH395Cmd+0x48>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4b09      	ldr	r3, [pc, #36]	; (8005b3c <xWriteCH395Cmd+0x48>)
 8005b16:	889b      	ldrh	r3, [r3, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	f7fb fe5b 	bl	80017d6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 8005b20:	1df9      	adds	r1, r7, #7
 8005b22:	4807      	ldr	r0, [pc, #28]	; (8005b40 <xWriteCH395Cmd+0x4c>)
 8005b24:	2364      	movs	r3, #100	; 0x64
 8005b26:	2201      	movs	r2, #1
 8005b28:	f7fc fb88 	bl	800223c <HAL_SPI_Transmit>
    Delay_us(2);
 8005b2c:	2002      	movs	r0, #2
 8005b2e:	f000 f861 	bl	8005bf4 <Delay_us>
}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b002      	add	sp, #8
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	2000062c 	.word	0x2000062c
 8005b40:	20001a88 	.word	0x20001a88

08005b44 <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	0002      	movs	r2, r0
 8005b4c:	1dfb      	adds	r3, r7, #7
 8005b4e:	701a      	strb	r2, [r3, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 8005b50:	1df9      	adds	r1, r7, #7
 8005b52:	4804      	ldr	r0, [pc, #16]	; (8005b64 <xWriteCH395Data+0x20>)
 8005b54:	2364      	movs	r3, #100	; 0x64
 8005b56:	2201      	movs	r2, #1
 8005b58:	f7fc fb70 	bl	800223c <HAL_SPI_Transmit>
}
 8005b5c:	46c0      	nop			; (mov r8, r8)
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b002      	add	sp, #8
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20001a88 	.word	0x20001a88

08005b68 <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 8005b6e:	1df9      	adds	r1, r7, #7
 8005b70:	4805      	ldr	r0, [pc, #20]	; (8005b88 <xReadCH395Data+0x20>)
 8005b72:	2364      	movs	r3, #100	; 0x64
 8005b74:	2201      	movs	r2, #1
 8005b76:	f7fc fcc1 	bl	80024fc <HAL_SPI_Receive>
    return i;
 8005b7a:	1dfb      	adds	r3, r7, #7
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b002      	add	sp, #8
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	20001a88 	.word	0x20001a88

08005b8c <init_config>:
	{"label.5", &(cfg.sAntNames[4]), CONFIG_VAR_BYTESTRING_LONG},
	{"label.6", &(cfg.sAntNames[5]), CONFIG_VAR_BYTESTRING_LONG},
};

void init_config(Config *p)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    if(mtxConfig == NULL) mtxConfig = xSemaphoreCreateMutex();
    xSemaphoreTake(mtxConfig, portMAX_DELAY);
    #endif
    // set valid string
    strncpy(p->sValid, VALID_STRING, 8);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <init_config+0x5c>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2208      	movs	r2, #8
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	f005 f970 	bl	800ae82 <strncpy>
    // set config inital values
    memset(p->sAntNames, 0, sizeof(p->sAntNames));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	330a      	adds	r3, #10
 8005ba6:	2260      	movs	r2, #96	; 0x60
 8005ba8:	2100      	movs	r1, #0
 8005baa:	0018      	movs	r0, r3
 8005bac:	f005 f8f1 	bl	800ad92 <memset>
    memset(p->nRadioToAntNums, 0, sizeof(p->nRadioToAntNums));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3308      	adds	r3, #8
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f005 f8ea 	bl	800ad92 <memset>

    p->portHTTP = 80;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	226a      	movs	r2, #106	; 0x6a
 8005bc2:	2150      	movs	r1, #80	; 0x50
 8005bc4:	5299      	strh	r1, [r3, r2]
    p->portTCP = 502;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	226c      	movs	r2, #108	; 0x6c
 8005bca:	21fb      	movs	r1, #251	; 0xfb
 8005bcc:	0049      	lsls	r1, r1, #1
 8005bce:	5299      	strh	r1, [r3, r2]
    p->portUDP = 1500;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	226e      	movs	r2, #110	; 0x6e
 8005bd4:	4905      	ldr	r1, [pc, #20]	; (8005bec <init_config+0x60>)
 8005bd6:	5299      	strh	r1, [r3, r2]
    isModified = true;
 8005bd8:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <init_config+0x64>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	701a      	strb	r2, [r3, #0]
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreGive(mtxConfig);
    #endif
}
 8005bde:	46c0      	nop			; (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b002      	add	sp, #8
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	20000634 	.word	0x20000634
 8005bec:	000005dc 	.word	0x000005dc
 8005bf0:	200006c4 	.word	0x200006c4

08005bf4 <Delay_us>:
 *      Author: Zening
 */

#include "Delay.h"

void Delay_us(unsigned int n) {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	unsigned int t = n * SysCLK_Freq /2; // 32: MHz
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	015b      	lsls	r3, r3, #5
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
	while(--t){__NOP();};
 8005c04:	e000      	b.n	8005c08 <Delay_us+0x14>
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f8      	bne.n	8005c06 <Delay_us+0x12>
}
 8005c14:	46c0      	nop			; (mov r8, r8)
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b004      	add	sp, #16
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <FS_begin>:
#include "FS.h"
FS_typedef FS;


bool FS_begin(FS_typedef* pFS, uint32_t* addr_base)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	if((uint32_t)addr_base < MAX_ADDR && ((pFS->n_files = *(uint32_t*)(addr_base)) != 0xffffffff))
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	4a0a      	ldr	r2, [pc, #40]	; (8005c58 <FS_begin+0x38>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d80c      	bhi.n	8005c4c <FS_begin+0x2c>
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	d004      	beq.n	8005c4c <FS_begin+0x2c>
	{
		pFS->addr_base = addr_base;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	601a      	str	r2, [r3, #0]
		return true;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <FS_begin+0x2e>
	}
	else
	{
		return false;
 8005c4c:	2300      	movs	r3, #0
	}
}
 8005c4e:	0018      	movs	r0, r3
 8005c50:	46bd      	mov	sp, r7
 8005c52:	b002      	add	sp, #8
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	0800fffe 	.word	0x0800fffe

08005c5c <FS_open>:

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b08d      	sub	sp, #52	; 0x34
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
	int i = pFS->n_files;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t offset = (uint32_t)pFS->addr_base;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24

	FSfile_typedef file;
	file.size = 0;
 8005c7a:	2114      	movs	r1, #20
 8005c7c:	187b      	adds	r3, r7, r1
 8005c7e:	2200      	movs	r2, #0
 8005c80:	609a      	str	r2, [r3, #8]
	file.p_content = NULL;
 8005c82:	187b      	adds	r3, r7, r1
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]
	file.path = NULL;
 8005c88:	187b      	adds	r3, r7, r1
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
	do{
		addr ++;
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	3304      	adds	r3, #4
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
		i--;
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	3b01      	subs	r3, #1
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	18d3      	adds	r3, r2, r3
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	623b      	str	r3, [r7, #32]
		if(strcmp(path, _path) == 0) // path matched
 8005ca6:	6a3a      	ldr	r2, [r7, #32]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	0011      	movs	r1, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	f7fa fa2b 	bl	8000108 <strcmp>
 8005cb2:	1e03      	subs	r3, r0, #0
 8005cb4:	d116      	bne.n	8005ce4 <FS_open+0x88>
		{
			file.path = _path;
 8005cb6:	2114      	movs	r1, #20
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	601a      	str	r2, [r3, #0]
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	18d3      	adds	r3, r2, r3
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	18d3      	adds	r3, r2, r3
 8005cce:	001a      	movs	r2, r3
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	605a      	str	r2, [r3, #4]
			file.size = *(uint32_t*)(*addr + offset);
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	18d3      	adds	r3, r2, r3
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	609a      	str	r2, [r3, #8]
			break;
 8005ce2:	e002      	b.n	8005cea <FS_open+0x8e>
		}
	}while(i > 0);
 8005ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dcd1      	bgt.n	8005c8e <FS_open+0x32>
	return file;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2214      	movs	r2, #20
 8005cee:	18ba      	adds	r2, r7, r2
 8005cf0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cf2:	c313      	stmia	r3!, {r0, r1, r4}
}
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b00d      	add	sp, #52	; 0x34
 8005cfa:	bd90      	pop	{r4, r7, pc}

08005cfc <FS_exists>:
	}
	return -1;
}

bool FS_exists(FS_typedef* pFS, const char* path)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t)pFS->addr_base;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pFS->n_files; ++i)
 8005d12:	2300      	movs	r3, #0
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e015      	b.n	8005d44 <FS_exists+0x48>
	{
		addr++;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	613b      	str	r3, [r7, #16]
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	18d3      	adds	r3, r2, r3
 8005d26:	3308      	adds	r3, #8
 8005d28:	60bb      	str	r3, [r7, #8]
		if(strcmp(path, _path) == 0)
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	0011      	movs	r1, r2
 8005d30:	0018      	movs	r0, r3
 8005d32:	f7fa f9e9 	bl	8000108 <strcmp>
 8005d36:	1e03      	subs	r3, r0, #0
 8005d38:	d101      	bne.n	8005d3e <FS_exists+0x42>
		{
			return true;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e008      	b.n	8005d50 <FS_exists+0x54>
	for(i=0; i<pFS->n_files; ++i)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	3301      	adds	r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d3e4      	bcc.n	8005d18 <FS_exists+0x1c>
		}
	}
	return false;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b006      	add	sp, #24
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 8005d58:	b590      	push	{r4, r7, lr}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d012      	beq.n	8005d8e <onHome+0x36>
		return;
	}
	/* plain HTTP */
	else
	{
		strcat(pS->URI, "index.html");
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	1d5c      	adds	r4, r3, #5
 8005d6c:	0020      	movs	r0, r4
 8005d6e:	f7fa f9d5 	bl	800011c <strlen>
 8005d72:	0003      	movs	r3, r0
 8005d74:	18e2      	adds	r2, r4, r3
 8005d76:	4b08      	ldr	r3, [pc, #32]	; (8005d98 <onHome+0x40>)
 8005d78:	0010      	movs	r0, r2
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	230b      	movs	r3, #11
 8005d7e:	001a      	movs	r2, r3
 8005d80:	f004 fffe 	bl	800ad80 <memcpy>
		HTTPonNotFound(pS);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f001 f9c2 	bl	8007110 <HTTPonNotFound>
 8005d8c:	e000      	b.n	8005d90 <onHome+0x38>
		return;
 8005d8e:	46c0      	nop			; (mov r8, r8)
	}
}
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b003      	add	sp, #12
 8005d94:	bd90      	pop	{r4, r7, pc}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	0800b05c 	.word	0x0800b05c

08005d9c <onSwitch>:
/* URI: /switch
 * METHOD: POST
 * Args: sel1=[0-6|255]&sel2=[0-6|255]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 8005d9c:	b5b0      	push	{r4, r5, r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
	// arguments my not be fully filled
//	const char *A = getHTTPArg(pS, "sel1");
//	const char *B = getHTTPArg(pS, "sel2");
	uint8_t antnums[N_SELECTORS];
	char argname[8] = "sel";
 8005da4:	230c      	movs	r3, #12
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <onSwitch+0xf8>)
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	2200      	movs	r2, #0
 8005dae:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < N_SELECTORS; ++i)
 8005db0:	231f      	movs	r3, #31
 8005db2:	18fb      	adds	r3, r7, r3
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
 8005db8:	e02e      	b.n	8005e18 <onSwitch+0x7c>
	{
		argname[3] = '1' + i;
 8005dba:	231f      	movs	r3, #31
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	3331      	adds	r3, #49	; 0x31
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	210c      	movs	r1, #12
 8005dc6:	187b      	adds	r3, r7, r1
 8005dc8:	70da      	strb	r2, [r3, #3]
		argname[4] = 0;
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	2200      	movs	r2, #0
 8005dce:	711a      	strb	r2, [r3, #4]
		const char* sV = getHTTPArg(pS, argname);
 8005dd0:	187a      	adds	r2, r7, r1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	0011      	movs	r1, r2
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f001 feb2 	bl	8007b40 <getHTTPArg>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	61bb      	str	r3, [r7, #24]
		uint8_t v = 255; // 255 means no change
 8005de0:	211e      	movs	r1, #30
 8005de2:	187b      	adds	r3, r7, r1
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	701a      	strb	r2, [r3, #0]
		if(sV) v = atou8(sV); // if seli does not exist, treat it as 255
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d006      	beq.n	8005dfc <onSwitch+0x60>
 8005dee:	187c      	adds	r4, r7, r1
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	0018      	movs	r0, r3
 8005df4:	f001 fef0 	bl	8007bd8 <atou8>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	7023      	strb	r3, [r4, #0]
		antnums[i] = v;
 8005dfc:	201f      	movs	r0, #31
 8005dfe:	183b      	adds	r3, r7, r0
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2214      	movs	r2, #20
 8005e04:	18ba      	adds	r2, r7, r2
 8005e06:	211e      	movs	r1, #30
 8005e08:	1879      	adds	r1, r7, r1
 8005e0a:	7809      	ldrb	r1, [r1, #0]
 8005e0c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N_SELECTORS; ++i)
 8005e0e:	183b      	adds	r3, r7, r0
 8005e10:	183a      	adds	r2, r7, r0
 8005e12:	7812      	ldrb	r2, [r2, #0]
 8005e14:	3201      	adds	r2, #1
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	231f      	movs	r3, #31
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d9cb      	bls.n	8005dba <onSwitch+0x1e>
	}

	int8_t r = switch_Antenna(antnums, N_SELECTORS);
 8005e22:	251d      	movs	r5, #29
 8005e24:	197c      	adds	r4, r7, r5
 8005e26:	2314      	movs	r3, #20
 8005e28:	18fb      	adds	r3, r7, r3
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f004 f8f7 	bl	800a020 <switch_Antenna>
 8005e32:	0003      	movs	r3, r0
 8005e34:	7023      	strb	r3, [r4, #0]

	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d112      	bne.n	8005e64 <onSwitch+0xc8>
	{
		if(r == 0) // OK
 8005e3e:	197b      	adds	r3, r7, r5
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b25b      	sxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <onSwitch+0xba>
		{
			WSSendStr(pS, "/switch", "response=OK\r\n");
 8005e48:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <onSwitch+0xfc>)
 8005e4a:	4914      	ldr	r1, [pc, #80]	; (8005e9c <onSwitch+0x100>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 ff52 	bl	8006cf8 <WSSendStr>
		else
		{
			HTTPSendStr(pS, 300, "Invalid\r\n");
		}
	}
}
 8005e54:	e01a      	b.n	8005e8c <onSwitch+0xf0>
			WSSendStr(pS, "/switch", "response=Invalid\r\n");
 8005e56:	4a12      	ldr	r2, [pc, #72]	; (8005ea0 <onSwitch+0x104>)
 8005e58:	4910      	ldr	r1, [pc, #64]	; (8005e9c <onSwitch+0x100>)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 ff4b 	bl	8006cf8 <WSSendStr>
}
 8005e62:	e013      	b.n	8005e8c <onSwitch+0xf0>
		if(r == 0) // OK
 8005e64:	231d      	movs	r3, #29
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b25b      	sxtb	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d106      	bne.n	8005e7e <onSwitch+0xe2>
			HTTPredirect(pS, "/");
 8005e70:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <onSwitch+0x108>)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	0011      	movs	r1, r2
 8005e76:	0018      	movs	r0, r3
 8005e78:	f001 f812 	bl	8006ea0 <HTTPredirect>
}
 8005e7c:	e006      	b.n	8005e8c <onSwitch+0xf0>
			HTTPSendStr(pS, 300, "Invalid\r\n");
 8005e7e:	4a0a      	ldr	r2, [pc, #40]	; (8005ea8 <onSwitch+0x10c>)
 8005e80:	2396      	movs	r3, #150	; 0x96
 8005e82:	0059      	lsls	r1, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0018      	movs	r0, r3
 8005e88:	f000 fd86 	bl	8006998 <HTTPSendStr>
}
 8005e8c:	46c0      	nop			; (mov r8, r8)
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b008      	add	sp, #32
 8005e92:	bdb0      	pop	{r4, r5, r7, pc}
 8005e94:	006c6573 	.word	0x006c6573
 8005e98:	0800b068 	.word	0x0800b068
 8005e9c:	0800b078 	.word	0x0800b078
 8005ea0:	0800b080 	.word	0x0800b080
 8005ea4:	0800b094 	.word	0x0800b094
 8005ea8:	0800b098 	.word	0x0800b098

08005eac <make_ant_alloc_str>:
 * METHOD: GET
 * Responds: sel1=%d&sel2=%d
 * Usage: get current antenna allocation
 * */
int make_ant_alloc_str(char* buf)
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	char* p = buf;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	60fb      	str	r3, [r7, #12]
	uint8_t antnums[N_SELECTORS];
	get_Antenna_real_BCDs(antnums, N_SELECTORS);
 8005eb8:	2408      	movs	r4, #8
 8005eba:	193b      	adds	r3, r7, r4
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f004 f978 	bl	800a1b4 <get_Antenna_real_BCDs>
	strcpy(p, "sel1=");
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4b1e      	ldr	r3, [pc, #120]	; (8005f40 <make_ant_alloc_str+0x94>)
 8005ec8:	0010      	movs	r0, r2
 8005eca:	0019      	movs	r1, r3
 8005ecc:	2306      	movs	r3, #6
 8005ece:	001a      	movs	r2, r3
 8005ed0:	f004 ff56 	bl	800ad80 <memcpy>
	p+=5;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3305      	adds	r3, #5
 8005ed8:	60fb      	str	r3, [r7, #12]
	*p = (antnums[0]) + '0'; // "sel1=%d"
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	3330      	adds	r3, #48	; 0x30
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	701a      	strb	r2, [r3, #0]
	p++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
	strcpy(p, "&sel2="); // "sel1=%d&sel2="
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4b15      	ldr	r3, [pc, #84]	; (8005f44 <make_ant_alloc_str+0x98>)
 8005ef0:	0010      	movs	r0, r2
 8005ef2:	0019      	movs	r1, r3
 8005ef4:	2307      	movs	r3, #7
 8005ef6:	001a      	movs	r2, r3
 8005ef8:	f004 ff42 	bl	800ad80 <memcpy>
	p+=6;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3306      	adds	r3, #6
 8005f00:	60fb      	str	r3, [r7, #12]
	*p = antnums[1] + '0'; // "sel1=%d&sel2=%d"
 8005f02:	193b      	adds	r3, r7, r4
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	3330      	adds	r3, #48	; 0x30
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	701a      	strb	r2, [r3, #0]
	p++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60fb      	str	r3, [r7, #12]
	strcpy(p, "\r\n");
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4b0c      	ldr	r3, [pc, #48]	; (8005f48 <make_ant_alloc_str+0x9c>)
 8005f18:	0010      	movs	r0, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	001a      	movs	r2, r3
 8005f20:	f004 ff2e 	bl	800ad80 <memcpy>
	p+=2;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3302      	adds	r3, #2
 8005f28:	60fb      	str	r3, [r7, #12]
	*p = 0;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
	return p - buf;
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad3      	subs	r3, r2, r3
}
 8005f36:	0018      	movs	r0, r3
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	b005      	add	sp, #20
 8005f3c:	bd90      	pop	{r4, r7, pc}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	0800b0a4 	.word	0x0800b0a4
 8005f44:	0800b0ac 	.word	0x0800b0ac
 8005f48:	0800b0b4 	.word	0x0800b0b4

08005f4c <onGetAlloc>:

void onGetAlloc(HTTPRequestParseState* pS)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	static char s_tmp[24];
	int n = make_ant_alloc_str(s_tmp);
 8005f54:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <onGetAlloc+0x40>)
 8005f56:	0018      	movs	r0, r3
 8005f58:	f7ff ffa8 	bl	8005eac <make_ant_alloc_str>
 8005f5c:	0003      	movs	r3, r0
 8005f5e:	60fb      	str	r3, [r7, #12]

	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	791b      	ldrb	r3, [r3, #4]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d106      	bne.n	8005f76 <onGetAlloc+0x2a>
	{
		WSSendStr(pS, "/getalloc", s_tmp);
 8005f68:	4a08      	ldr	r2, [pc, #32]	; (8005f8c <onGetAlloc+0x40>)
 8005f6a:	4909      	ldr	r1, [pc, #36]	; (8005f90 <onGetAlloc+0x44>)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f000 fec2 	bl	8006cf8 <WSSendStr>
	/* plain HTTP */
	else
	{
		HTTPSendStr(pS, 200, s_tmp);
	}
}
 8005f74:	e005      	b.n	8005f82 <onGetAlloc+0x36>
		HTTPSendStr(pS, 200, s_tmp);
 8005f76:	4a05      	ldr	r2, [pc, #20]	; (8005f8c <onGetAlloc+0x40>)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	21c8      	movs	r1, #200	; 0xc8
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 fd0b 	bl	8006998 <HTTPSendStr>
}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	46bd      	mov	sp, r7
 8005f86:	b004      	add	sp, #16
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	46c0      	nop			; (mov r8, r8)
 8005f8c:	20000808 	.word	0x20000808
 8005f90:	0800b0b8 	.word	0x0800b0b8

08005f94 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d106      	bne.n	8005fb2 <onStatus+0x1e>
	{
		WSSendStr(pS, "/status", "Status");
 8005fa4:	4a08      	ldr	r2, [pc, #32]	; (8005fc8 <onStatus+0x34>)
 8005fa6:	4909      	ldr	r1, [pc, #36]	; (8005fcc <onStatus+0x38>)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 fea4 	bl	8006cf8 <WSSendStr>
	/* plain HTTP */
	else
	{
		HTTPSendStr(pS, 200, "Status");
	}
}
 8005fb0:	e005      	b.n	8005fbe <onStatus+0x2a>
		HTTPSendStr(pS, 200, "Status");
 8005fb2:	4a05      	ldr	r2, [pc, #20]	; (8005fc8 <onStatus+0x34>)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	21c8      	movs	r1, #200	; 0xc8
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 fced 	bl	8006998 <HTTPSendStr>
}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b002      	add	sp, #8
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	0800b0c4 	.word	0x0800b0c4
 8005fcc:	0800b0cc 	.word	0x0800b0cc

08005fd0 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d106      	bne.n	8005fee <onReset+0x1e>
	{
		WSSendStr(pS, "/reset", "Reset");
 8005fe0:	4a08      	ldr	r2, [pc, #32]	; (8006004 <onReset+0x34>)
 8005fe2:	4909      	ldr	r1, [pc, #36]	; (8006008 <onReset+0x38>)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f000 fe86 	bl	8006cf8 <WSSendStr>
	else
	{
		HTTPSendStr(pS, 200, "Reset");
	}
//	DEBUG_LOG("Restart\n");
}
 8005fec:	e005      	b.n	8005ffa <onReset+0x2a>
		HTTPSendStr(pS, 200, "Reset");
 8005fee:	4a05      	ldr	r2, [pc, #20]	; (8006004 <onReset+0x34>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	21c8      	movs	r1, #200	; 0xc8
 8005ff4:	0018      	movs	r0, r3
 8005ff6:	f000 fccf 	bl	8006998 <HTTPSendStr>
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b002      	add	sp, #8
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	0800b0d4 	.word	0x0800b0d4
 8006008:	0800b0dc 	.word	0x0800b0dc

0800600c <onSetLabel>:
/* URI: /setlabel
 * METHOD: POST
 * Args: ant1=name&ant2=name&ant3=name&ant4=name&ant5=name&ant6=name
 * Usage: set antenna label*/
void onSetLabel(HTTPRequestParseState* pS)
{
 800600c:	b5b0      	push	{r4, r5, r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	uint8_t i;
	char s_tmp[5] = "ant";
 8006014:	2308      	movs	r3, #8
 8006016:	18fb      	adds	r3, r7, r3
 8006018:	4a33      	ldr	r2, [pc, #204]	; (80060e8 <onSetLabel+0xdc>)
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	2200      	movs	r2, #0
 800601e:	711a      	strb	r2, [r3, #4]

	if(pS->argc == 0)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2248      	movs	r2, #72	; 0x48
 8006024:	5c9b      	ldrb	r3, [r3, r2]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d112      	bne.n	8006050 <onSetLabel+0x44>
	{
		/* Websocket */
		if(pS->connection == UPGRADED_WS)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	791b      	ldrb	r3, [r3, #4]
 800602e:	2b02      	cmp	r3, #2
 8006030:	d106      	bne.n	8006040 <onSetLabel+0x34>
		{
			WSSendStr(pS,"/setlabel", "Bad args");
 8006032:	4a2e      	ldr	r2, [pc, #184]	; (80060ec <onSetLabel+0xe0>)
 8006034:	492e      	ldr	r1, [pc, #184]	; (80060f0 <onSetLabel+0xe4>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f000 fe5d 	bl	8006cf8 <WSSendStr>
		/* plain HTTP */
		else
		{
			HTTPSendStr(pS, 300, "Bad args");
		}
		return;
 800603e:	e04f      	b.n	80060e0 <onSetLabel+0xd4>
			HTTPSendStr(pS, 300, "Bad args");
 8006040:	4a2a      	ldr	r2, [pc, #168]	; (80060ec <onSetLabel+0xe0>)
 8006042:	2396      	movs	r3, #150	; 0x96
 8006044:	0059      	lsls	r1, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0018      	movs	r0, r3
 800604a:	f000 fca5 	bl	8006998 <HTTPSendStr>
 800604e:	e047      	b.n	80060e0 <onSetLabel+0xd4>
	}
	for(i=1; i<=NUM_ANTENNA; ++i)
 8006050:	2317      	movs	r3, #23
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e02c      	b.n	80060b4 <onSetLabel+0xa8>
	{
		u16toa(i, s_tmp+3); //s_tmp = ant[i]
 800605a:	2417      	movs	r4, #23
 800605c:	193b      	adds	r3, r7, r4
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b29a      	uxth	r2, r3
 8006062:	2508      	movs	r5, #8
 8006064:	197b      	adds	r3, r7, r5
 8006066:	3303      	adds	r3, #3
 8006068:	0019      	movs	r1, r3
 800606a:	0010      	movs	r0, r2
 800606c:	f001 fe3e 	bl	8007cec <u16toa>
		const char* s_label;
		if((s_label = getHTTPArg(pS, s_tmp)) != NULL)
 8006070:	197a      	adds	r2, r7, r5
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0011      	movs	r1, r2
 8006076:	0018      	movs	r0, r3
 8006078:	f001 fd62 	bl	8007b40 <getHTTPArg>
 800607c:	0003      	movs	r3, r0
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d010      	beq.n	80060a8 <onSetLabel+0x9c>
		{
			// Multibyte encoding is stored in Big-Endian, first byte at the start of the buffer
			// i.e. 金 -> 0xE9 0x87 0x91 (UTF8)
			strlcpy(cfg.sAntNames[i-1], s_label, MAX_LEN_ANT_LABEL);
 8006086:	193b      	adds	r3, r7, r4
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	3b01      	subs	r3, #1
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	3308      	adds	r3, #8
 8006090:	001a      	movs	r2, r3
 8006092:	4b18      	ldr	r3, [pc, #96]	; (80060f4 <onSetLabel+0xe8>)
 8006094:	18d3      	adds	r3, r2, r3
 8006096:	3302      	adds	r3, #2
 8006098:	6939      	ldr	r1, [r7, #16]
 800609a:	2210      	movs	r2, #16
 800609c:	0018      	movs	r0, r3
 800609e:	f004 fea3 	bl	800ade8 <strlcpy>
			isModified = true;
 80060a2:	4b15      	ldr	r3, [pc, #84]	; (80060f8 <onSetLabel+0xec>)
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
	for(i=1; i<=NUM_ANTENNA; ++i)
 80060a8:	2217      	movs	r2, #23
 80060aa:	18bb      	adds	r3, r7, r2
 80060ac:	18ba      	adds	r2, r7, r2
 80060ae:	7812      	ldrb	r2, [r2, #0]
 80060b0:	3201      	adds	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	2317      	movs	r3, #23
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b06      	cmp	r3, #6
 80060bc:	d9cd      	bls.n	800605a <onSetLabel+0x4e>
	}

//	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	//HTTPSendStr(pS, 200, "OK");
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	791b      	ldrb	r3, [r3, #4]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d106      	bne.n	80060d4 <onSetLabel+0xc8>
	{

		/* nothing to do */
		WSSendStr(pS, "/setlabel", "response=OK\r\n");
 80060c6:	4a0d      	ldr	r2, [pc, #52]	; (80060fc <onSetLabel+0xf0>)
 80060c8:	4909      	ldr	r1, [pc, #36]	; (80060f0 <onSetLabel+0xe4>)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	0018      	movs	r0, r3
 80060ce:	f000 fe13 	bl	8006cf8 <WSSendStr>
 80060d2:	e005      	b.n	80060e0 <onSetLabel+0xd4>
	}
	/* plain HTTP */
	else
	{
		HTTPredirect(pS, "/");
 80060d4:	4a0a      	ldr	r2, [pc, #40]	; (8006100 <onSetLabel+0xf4>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	0011      	movs	r1, r2
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 fee0 	bl	8006ea0 <HTTPredirect>
	}
}
 80060e0:	46bd      	mov	sp, r7
 80060e2:	b006      	add	sp, #24
 80060e4:	bdb0      	pop	{r4, r5, r7, pc}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	00746e61 	.word	0x00746e61
 80060ec:	0800b0e4 	.word	0x0800b0e4
 80060f0:	0800b0f0 	.word	0x0800b0f0
 80060f4:	2000136c 	.word	0x2000136c
 80060f8:	200006c4 	.word	0x200006c4
 80060fc:	0800b068 	.word	0x0800b068
 8006100:	0800b094 	.word	0x0800b094

08006104 <onGetLabel>:

void onGetLabel(HTTPRequestParseState* pS)
{
 8006104:	b590      	push	{r4, r7, lr}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
	static char s_tmp[(MAX_LEN_ANT_LABEL+5) * NUM_ANTENNA];
	uint8_t i;
	char* s = s_tmp;
 800610c:	4b2d      	ldr	r3, [pc, #180]	; (80061c4 <onGetLabel+0xc0>)
 800610e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8006110:	230f      	movs	r3, #15
 8006112:	18fb      	adds	r3, r7, r3
 8006114:	2200      	movs	r2, #0
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e03a      	b.n	8006190 <onGetLabel+0x8c>
	{
		s = strcpy_f(s, "ant");
 800611a:	4a2b      	ldr	r2, [pc, #172]	; (80061c8 <onGetLabel+0xc4>)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f001 fe56 	bl	8007dd2 <strcpy_f>
 8006126:	0003      	movs	r3, r0
 8006128:	60bb      	str	r3, [r7, #8]
		*s = i + '1';
 800612a:	210f      	movs	r1, #15
 800612c:	187b      	adds	r3, r7, r1
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	3331      	adds	r3, #49	; 0x31
 8006132:	b2da      	uxtb	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	701a      	strb	r2, [r3, #0]
		s++;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	3301      	adds	r3, #1
 800613c:	60bb      	str	r3, [r7, #8]
		*s = '=';
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	223d      	movs	r2, #61	; 0x3d
 8006142:	701a      	strb	r2, [r3, #0]
		s++;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	3301      	adds	r3, #1
 8006148:	60bb      	str	r3, [r7, #8]
		s = strncpy_f(s, cfg.sAntNames[i], MAX_LEN_ANT_LABEL);
 800614a:	000c      	movs	r4, r1
 800614c:	187b      	adds	r3, r7, r1
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	3308      	adds	r3, #8
 8006154:	001a      	movs	r2, r3
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <onGetLabel+0xc8>)
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	1c99      	adds	r1, r3, #2
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2210      	movs	r2, #16
 8006160:	0018      	movs	r0, r3
 8006162:	f001 fe52 	bl	8007e0a <strncpy_f>
 8006166:	0003      	movs	r3, r0
 8006168:	60bb      	str	r3, [r7, #8]
		isModified = true;
 800616a:	4b19      	ldr	r3, [pc, #100]	; (80061d0 <onGetLabel+0xcc>)
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
		if(i != NUM_ANTENNA-1)
 8006170:	193b      	adds	r3, r7, r4
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b05      	cmp	r3, #5
 8006176:	d005      	beq.n	8006184 <onGetLabel+0x80>
		{
			*s = '&';
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2226      	movs	r2, #38	; 0x26
 800617c:	701a      	strb	r2, [r3, #0]
			s++;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3301      	adds	r3, #1
 8006182:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8006184:	220f      	movs	r2, #15
 8006186:	18bb      	adds	r3, r7, r2
 8006188:	18ba      	adds	r2, r7, r2
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	3201      	adds	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	230f      	movs	r3, #15
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b05      	cmp	r3, #5
 8006198:	d9bf      	bls.n	800611a <onGetLabel+0x16>
		}
	}
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	791b      	ldrb	r3, [r3, #4]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d106      	bne.n	80061b0 <onGetLabel+0xac>
	{
		/* nothing to do */
		WSSendStr(pS, "/getlabel", s_tmp);
 80061a2:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <onGetLabel+0xc0>)
 80061a4:	490b      	ldr	r1, [pc, #44]	; (80061d4 <onGetLabel+0xd0>)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	0018      	movs	r0, r3
 80061aa:	f000 fda5 	bl	8006cf8 <WSSendStr>
	/* plain HTTP */
	else
	{
		HTTPSendStr(pS, 200, s_tmp);
	}
}
 80061ae:	e005      	b.n	80061bc <onGetLabel+0xb8>
		HTTPSendStr(pS, 200, s_tmp);
 80061b0:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <onGetLabel+0xc0>)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	21c8      	movs	r1, #200	; 0xc8
 80061b6:	0018      	movs	r0, r3
 80061b8:	f000 fbee 	bl	8006998 <HTTPSendStr>
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b005      	add	sp, #20
 80061c2:	bd90      	pop	{r4, r7, pc}
 80061c4:	20000820 	.word	0x20000820
 80061c8:	0800b0fc 	.word	0x0800b0fc
 80061cc:	2000136c 	.word	0x2000136c
 80061d0:	200006c4 	.word	0x200006c4
 80061d4:	0800b100 	.word	0x0800b100

080061d8 <onSetPort>:
/* URI: /setport
 * METHOD: POST
 * Args: portHTTP=80&portTCP=502
 * Usage: switch antenna */
void onSetPort(HTTPRequestParseState* pS)
{
 80061d8:	b5b0      	push	{r4, r5, r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	const uint8_t MAXLEN = 5;
 80061e0:	2315      	movs	r3, #21
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	2205      	movs	r2, #5
 80061e6:	701a      	strb	r2, [r3, #0]
	if(pS->argc < 2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2248      	movs	r2, #72	; 0x48
 80061ec:	5c9b      	ldrb	r3, [r3, r2]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d812      	bhi.n	8006218 <onSetPort+0x40>
	{
		/* Websocket */
		if(pS->connection == UPGRADED_WS)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	791b      	ldrb	r3, [r3, #4]
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d106      	bne.n	8006208 <onSetPort+0x30>
			/* nothing to do */
			WSSendStr(pS, "/setport", "Bad args" );
 80061fa:	4a5c      	ldr	r2, [pc, #368]	; (800636c <onSetPort+0x194>)
 80061fc:	495c      	ldr	r1, [pc, #368]	; (8006370 <onSetPort+0x198>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	0018      	movs	r0, r3
 8006202:	f000 fd79 	bl	8006cf8 <WSSendStr>
		/* plain HTTP */
		else
			HTTPSendStr(pS, 300, "Bad args");
		return;
 8006206:	e0ad      	b.n	8006364 <onSetPort+0x18c>
			HTTPSendStr(pS, 300, "Bad args");
 8006208:	4a58      	ldr	r2, [pc, #352]	; (800636c <onSetPort+0x194>)
 800620a:	2396      	movs	r3, #150	; 0x96
 800620c:	0059      	lsls	r1, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	0018      	movs	r0, r3
 8006212:	f000 fbc1 	bl	8006998 <HTTPSendStr>
		return;
 8006216:	e0a5      	b.n	8006364 <onSetPort+0x18c>
	}

	const char* s;
	uint16_t v = 0;
 8006218:	2416      	movs	r4, #22
 800621a:	193b      	adds	r3, r7, r4
 800621c:	2200      	movs	r2, #0
 800621e:	801a      	strh	r2, [r3, #0]
	s = getHTTPArg(pS, "portHTTP");
 8006220:	4a54      	ldr	r2, [pc, #336]	; (8006374 <onSetPort+0x19c>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0011      	movs	r1, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f001 fc8a 	bl	8007b40 <getHTTPArg>
 800622c:	0003      	movs	r3, r0
 800622e:	613b      	str	r3, [r7, #16]
	if (s)
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01d      	beq.n	8006272 <onSetPort+0x9a>
	{
		uint16_t len = strnlen(s, MAXLEN);
 8006236:	2515      	movs	r5, #21
 8006238:	197b      	adds	r3, r7, r5
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	0011      	movs	r1, r2
 8006240:	0018      	movs	r0, r3
 8006242:	f004 fe32 	bl	800aeaa <strnlen>
 8006246:	0002      	movs	r2, r0
 8006248:	210e      	movs	r1, #14
 800624a:	187b      	adds	r3, r7, r1
 800624c:	801a      	strh	r2, [r3, #0]
		if(len <= MAXLEN && len > 0)
 800624e:	197b      	adds	r3, r7, r5
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	187a      	adds	r2, r7, r1
 8006256:	8812      	ldrh	r2, [r2, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d80a      	bhi.n	8006272 <onSetPort+0x9a>
 800625c:	187b      	adds	r3, r7, r1
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d006      	beq.n	8006272 <onSetPort+0x9a>
		{
			v = atou16(s);
 8006264:	193c      	adds	r4, r7, r4
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	0018      	movs	r0, r3
 800626a:	f001 fcf9 	bl	8007c60 <atou16>
 800626e:	0003      	movs	r3, r0
 8006270:	8023      	strh	r3, [r4, #0]
		}
	}
	if(v)
 8006272:	2016      	movs	r0, #22
 8006274:	183b      	adds	r3, r7, r0
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d016      	beq.n	80062aa <onSetPort+0xd2>
	{
		cfg.portHTTP = (uint16_t)v;
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <onSetPort+0x1a0>)
 800627e:	183a      	adds	r2, r7, r0
 8006280:	216a      	movs	r1, #106	; 0x6a
 8006282:	8812      	ldrh	r2, [r2, #0]
 8006284:	525a      	strh	r2, [r3, r1]
		isModified = true;
 8006286:	4b3d      	ldr	r3, [pc, #244]	; (800637c <onSetPort+0x1a4>)
 8006288:	2201      	movs	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
		else
			HTTPSendStr(pS, 300, "Bad HTTP port number");
		return;
	}

	v = 0;
 800628c:	183b      	adds	r3, r7, r0
 800628e:	2200      	movs	r2, #0
 8006290:	801a      	strh	r2, [r3, #0]
	s = getHTTPArg(pS, "portTCP");
 8006292:	4a3b      	ldr	r2, [pc, #236]	; (8006380 <onSetPort+0x1a8>)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	0011      	movs	r1, r2
 8006298:	0018      	movs	r0, r3
 800629a:	f001 fc51 	bl	8007b40 <getHTTPArg>
 800629e:	0003      	movs	r3, r0
 80062a0:	613b      	str	r3, [r7, #16]
	if (s)
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d032      	beq.n	800630e <onSetPort+0x136>
 80062a8:	e012      	b.n	80062d0 <onSetPort+0xf8>
		if(pS->connection == UPGRADED_WS)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	791b      	ldrb	r3, [r3, #4]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d106      	bne.n	80062c0 <onSetPort+0xe8>
			WSSendStr(pS, "/setport", "Bad HTTP port number");
 80062b2:	4a34      	ldr	r2, [pc, #208]	; (8006384 <onSetPort+0x1ac>)
 80062b4:	492e      	ldr	r1, [pc, #184]	; (8006370 <onSetPort+0x198>)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f000 fd1d 	bl	8006cf8 <WSSendStr>
		return;
 80062be:	e051      	b.n	8006364 <onSetPort+0x18c>
			HTTPSendStr(pS, 300, "Bad HTTP port number");
 80062c0:	4a30      	ldr	r2, [pc, #192]	; (8006384 <onSetPort+0x1ac>)
 80062c2:	2396      	movs	r3, #150	; 0x96
 80062c4:	0059      	lsls	r1, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	0018      	movs	r0, r3
 80062ca:	f000 fb65 	bl	8006998 <HTTPSendStr>
		return;
 80062ce:	e049      	b.n	8006364 <onSetPort+0x18c>
	{
		uint16_t len = strnlen(s, MAXLEN);
 80062d0:	2415      	movs	r4, #21
 80062d2:	193b      	adds	r3, r7, r4
 80062d4:	781a      	ldrb	r2, [r3, #0]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	0011      	movs	r1, r2
 80062da:	0018      	movs	r0, r3
 80062dc:	f004 fde5 	bl	800aeaa <strnlen>
 80062e0:	0002      	movs	r2, r0
 80062e2:	210c      	movs	r1, #12
 80062e4:	187b      	adds	r3, r7, r1
 80062e6:	801a      	strh	r2, [r3, #0]
		if(len <= MAXLEN && len > 0)
 80062e8:	193b      	adds	r3, r7, r4
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	187a      	adds	r2, r7, r1
 80062f0:	8812      	ldrh	r2, [r2, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d80b      	bhi.n	800630e <onSetPort+0x136>
 80062f6:	187b      	adds	r3, r7, r1
 80062f8:	881b      	ldrh	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <onSetPort+0x136>
		{
			v = atou16(s);
 80062fe:	2316      	movs	r3, #22
 8006300:	18fc      	adds	r4, r7, r3
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	0018      	movs	r0, r3
 8006306:	f001 fcab 	bl	8007c60 <atou16>
 800630a:	0003      	movs	r3, r0
 800630c:	8023      	strh	r3, [r4, #0]
		}
	}
	if(v)
 800630e:	2216      	movs	r2, #22
 8006310:	18bb      	adds	r3, r7, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00c      	beq.n	8006332 <onSetPort+0x15a>
	{
		cfg.portTCP = (uint16_t)v;
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <onSetPort+0x1a0>)
 800631a:	18ba      	adds	r2, r7, r2
 800631c:	216c      	movs	r1, #108	; 0x6c
 800631e:	8812      	ldrh	r2, [r2, #0]
 8006320:	525a      	strh	r2, [r3, r1]
		isModified = true;
 8006322:	4b16      	ldr	r3, [pc, #88]	; (800637c <onSetPort+0x1a4>)
 8006324:	2201      	movs	r2, #1
 8006326:	701a      	strb	r2, [r3, #0]
		else
			HTTPSendStr(pS, 300, "Bad HTTP port number");
		return;
	}
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	791b      	ldrb	r3, [r3, #4]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d113      	bne.n	8006358 <onSetPort+0x180>
		/*nothing*/
		return;
 8006330:	e018      	b.n	8006364 <onSetPort+0x18c>
		if(pS->connection == UPGRADED_WS)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	791b      	ldrb	r3, [r3, #4]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d106      	bne.n	8006348 <onSetPort+0x170>
			WSSendStr(pS, "/setport","Bad HTTP port number");
 800633a:	4a12      	ldr	r2, [pc, #72]	; (8006384 <onSetPort+0x1ac>)
 800633c:	490c      	ldr	r1, [pc, #48]	; (8006370 <onSetPort+0x198>)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f000 fcd9 	bl	8006cf8 <WSSendStr>
		return;
 8006346:	e00d      	b.n	8006364 <onSetPort+0x18c>
			HTTPSendStr(pS, 300, "Bad HTTP port number");
 8006348:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <onSetPort+0x1ac>)
 800634a:	2396      	movs	r3, #150	; 0x96
 800634c:	0059      	lsls	r1, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 fb21 	bl	8006998 <HTTPSendStr>
		return;
 8006356:	e005      	b.n	8006364 <onSetPort+0x18c>
	/* plain HTTP */
	else
		HTTPredirect(pS, "/");
 8006358:	4a0b      	ldr	r2, [pc, #44]	; (8006388 <onSetPort+0x1b0>)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0011      	movs	r1, r2
 800635e:	0018      	movs	r0, r3
 8006360:	f000 fd9e 	bl	8006ea0 <HTTPredirect>

//	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	//HTTPSendStr(pS, 200, "OK");

}
 8006364:	46bd      	mov	sp, r7
 8006366:	b006      	add	sp, #24
 8006368:	bdb0      	pop	{r4, r5, r7, pc}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	0800b0e4 	.word	0x0800b0e4
 8006370:	0800b10c 	.word	0x0800b10c
 8006374:	0800b118 	.word	0x0800b118
 8006378:	2000136c 	.word	0x2000136c
 800637c:	200006c4 	.word	0x200006c4
 8006380:	0800b13c 	.word	0x0800b13c
 8006384:	0800b124 	.word	0x0800b124
 8006388:	0800b094 	.word	0x0800b094

0800638c <onGetPort>:


void onGetPort(HTTPRequestParseState* pS)
{
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
	static char s_tmp[9+5+9+5+1]; // portHTTP=65535&portTCP=65535
	char* s = s_tmp;
 8006394:	4b29      	ldr	r3, [pc, #164]	; (800643c <onGetPort+0xb0>)
 8006396:	60fb      	str	r3, [r7, #12]
	uint16_t port;

	// MAXLEN = 9 + 5
	strcpy(s, "portHTTP=");
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4b29      	ldr	r3, [pc, #164]	; (8006440 <onGetPort+0xb4>)
 800639c:	0010      	movs	r0, r2
 800639e:	0019      	movs	r1, r3
 80063a0:	230a      	movs	r3, #10
 80063a2:	001a      	movs	r2, r3
 80063a4:	f004 fcec 	bl	800ad80 <memcpy>
	s += 9;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3309      	adds	r3, #9
 80063ac:	60fb      	str	r3, [r7, #12]
	port = cfg.portHTTP;
 80063ae:	240a      	movs	r4, #10
 80063b0:	193b      	adds	r3, r7, r4
 80063b2:	4a24      	ldr	r2, [pc, #144]	; (8006444 <onGetPort+0xb8>)
 80063b4:	216a      	movs	r1, #106	; 0x6a
 80063b6:	5a52      	ldrh	r2, [r2, r1]
 80063b8:	801a      	strh	r2, [r3, #0]
	s += u16toa(port, s);
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	193b      	adds	r3, r7, r4
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	0011      	movs	r1, r2
 80063c2:	0018      	movs	r0, r3
 80063c4:	f001 fc92 	bl	8007cec <u16toa>
 80063c8:	0003      	movs	r3, r0
 80063ca:	001a      	movs	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	189b      	adds	r3, r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]

	// MAXLEN = 9 + 5
	strcpy(s, "&portTCP=");
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4b1c      	ldr	r3, [pc, #112]	; (8006448 <onGetPort+0xbc>)
 80063d6:	0010      	movs	r0, r2
 80063d8:	0019      	movs	r1, r3
 80063da:	230a      	movs	r3, #10
 80063dc:	001a      	movs	r2, r3
 80063de:	f004 fccf 	bl	800ad80 <memcpy>
	s += 9;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3309      	adds	r3, #9
 80063e6:	60fb      	str	r3, [r7, #12]
	port = cfg.portTCP;
 80063e8:	193b      	adds	r3, r7, r4
 80063ea:	4a16      	ldr	r2, [pc, #88]	; (8006444 <onGetPort+0xb8>)
 80063ec:	216c      	movs	r1, #108	; 0x6c
 80063ee:	5a52      	ldrh	r2, [r2, r1]
 80063f0:	801a      	strh	r2, [r3, #0]
	s += u16toa(port, s);
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	193b      	adds	r3, r7, r4
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	0011      	movs	r1, r2
 80063fa:	0018      	movs	r0, r3
 80063fc:	f001 fc76 	bl	8007cec <u16toa>
 8006400:	0003      	movs	r3, r0
 8006402:	001a      	movs	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	189b      	adds	r3, r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

	*s = '\0';
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
	/* Websocket */
	if(pS->connection == UPGRADED_WS)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	791b      	ldrb	r3, [r3, #4]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d106      	bne.n	8006426 <onGetPort+0x9a>
		WSSendStr(pS, "/getport", s_tmp);
 8006418:	4a08      	ldr	r2, [pc, #32]	; (800643c <onGetPort+0xb0>)
 800641a:	490c      	ldr	r1, [pc, #48]	; (800644c <onGetPort+0xc0>)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	0018      	movs	r0, r3
 8006420:	f000 fc6a 	bl	8006cf8 <WSSendStr>
	/* plain HTTP */
	else
		HTTPSendStr(pS, 200, s_tmp);
}
 8006424:	e005      	b.n	8006432 <onGetPort+0xa6>
		HTTPSendStr(pS, 200, s_tmp);
 8006426:	4a05      	ldr	r2, [pc, #20]	; (800643c <onGetPort+0xb0>)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	21c8      	movs	r1, #200	; 0xc8
 800642c:	0018      	movs	r0, r3
 800642e:	f000 fab3 	bl	8006998 <HTTPSendStr>
}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	46bd      	mov	sp, r7
 8006436:	b005      	add	sp, #20
 8006438:	bd90      	pop	{r4, r7, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	200008a0 	.word	0x200008a0
 8006440:	0800b144 	.word	0x0800b144
 8006444:	2000136c 	.word	0x2000136c
 8006448:	0800b150 	.word	0x0800b150
 800644c:	0800b15c 	.word	0x0800b15c

08006450 <resetHTTPParseState>:
	.method = HTTP_GET,
	.ready_for_making_response = false}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
	pS->state = 0;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
	pS->argc = 0;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2248      	movs	r2, #72	; 0x48
 8006462:	2100      	movs	r1, #0
 8006464:	5499      	strb	r1, [r3, r2]
	pS->connection = CLOSED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	711a      	strb	r2, [r3, #4]
	pS->method = HTTP_GET;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	70da      	strb	r2, [r3, #3]
	pS->ready_for_making_response = false;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	228c      	movs	r2, #140	; 0x8c
 8006476:	2100      	movs	r1, #0
 8006478:	5499      	strb	r1, [r3, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	227c      	movs	r2, #124	; 0x7c
 800647e:	2100      	movs	r1, #0
 8006480:	5499      	strb	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2284      	movs	r2, #132	; 0x84
 8006486:	2100      	movs	r1, #0
 8006488:	5299      	strh	r1, [r3, r2]
	pS->response_header = response_header_shared_buffer; // use shared buffer
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	4a07      	ldr	r2, [pc, #28]	; (80064ac <resetHTTPParseState+0x5c>)
 8006490:	505a      	str	r2, [r3, r1]
	pS->ws_handshaked = WS_WAIT_FOR_HANDSHAKE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	228e      	movs	r2, #142	; 0x8e
 8006496:	2100      	movs	r1, #0
 8006498:	5499      	strb	r1, [r3, r2]
	activateHTTPParseState(pS);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	0018      	movs	r0, r3
 800649e:	f000 f829 	bl	80064f4 <activateHTTPParseState>
}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	b002      	add	sp, #8
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	20001408 	.word	0x20001408

080064b0 <resetHTTPParseState_for_long_connection>:

void resetHTTPParseState_for_long_connection(HTTPRequestParseState *pS)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	// information to preserve: pS->connection
	pS->state = 0;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
	pS->argc = 0;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2248      	movs	r2, #72	; 0x48
 80064c2:	2100      	movs	r1, #0
 80064c4:	5499      	strb	r1, [r3, r2]
//	pS->method = HTTP_GET;
	pS->ready_for_making_response = false;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	228c      	movs	r2, #140	; 0x8c
 80064ca:	2100      	movs	r1, #0
 80064cc:	5499      	strb	r1, [r3, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	227c      	movs	r2, #124	; 0x7c
 80064d2:	2100      	movs	r1, #0
 80064d4:	5499      	strb	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2284      	movs	r2, #132	; 0x84
 80064da:	2100      	movs	r1, #0
 80064dc:	5299      	strh	r1, [r3, r2]
	pS->response_header = response_header_shared_buffer; // use shared buffer
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2180      	movs	r1, #128	; 0x80
 80064e2:	4a03      	ldr	r2, [pc, #12]	; (80064f0 <resetHTTPParseState_for_long_connection+0x40>)
 80064e4:	505a      	str	r2, [r3, r1]
}
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b002      	add	sp, #8
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	20001408 	.word	0x20001408

080064f4 <activateHTTPParseState>:


void activateHTTPParseState(HTTPRequestParseState *pS)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	pS->last_active_tick = TICK_NOW();
 80064fc:	f7fa faba 	bl	8000a74 <HAL_GetTick>
 8006500:	0002      	movs	r2, r0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	21a0      	movs	r1, #160	; 0xa0
 8006506:	505a      	str	r2, [r3, r1]
}
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	b002      	add	sp, #8
 800650e:	bd80      	pop	{r7, pc}

08006510 <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	if(strlen(filename) > 3)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0018      	movs	r0, r3
 800651c:	f7f9 fdfe 	bl	800011c <strlen>
 8006520:	0003      	movs	r3, r0
 8006522:	2b03      	cmp	r3, #3
 8006524:	d800      	bhi.n	8006528 <HTTPGetContentType+0x18>
 8006526:	e087      	b.n	8006638 <HTTPGetContentType+0x128>
	{
		if(ENDSWITH(filename, ".html"))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	0018      	movs	r0, r3
 800652c:	f7f9 fdf6 	bl	800011c <strlen>
 8006530:	0003      	movs	r3, r0
 8006532:	3b05      	subs	r3, #5
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	18d3      	adds	r3, r2, r3
 8006538:	4a42      	ldr	r2, [pc, #264]	; (8006644 <HTTPGetContentType+0x134>)
 800653a:	0011      	movs	r1, r2
 800653c:	0018      	movs	r0, r3
 800653e:	f7f9 fde3 	bl	8000108 <strcmp>
 8006542:	1e03      	subs	r3, r0, #0
 8006544:	d101      	bne.n	800654a <HTTPGetContentType+0x3a>
			return HTTP_CONTENT_TYPE_HTML;
 8006546:	4b40      	ldr	r3, [pc, #256]	; (8006648 <HTTPGetContentType+0x138>)
 8006548:	e077      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".htm"))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	0018      	movs	r0, r3
 800654e:	f7f9 fde5 	bl	800011c <strlen>
 8006552:	0003      	movs	r3, r0
 8006554:	3b04      	subs	r3, #4
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	18d3      	adds	r3, r2, r3
 800655a:	4a3c      	ldr	r2, [pc, #240]	; (800664c <HTTPGetContentType+0x13c>)
 800655c:	0011      	movs	r1, r2
 800655e:	0018      	movs	r0, r3
 8006560:	f7f9 fdd2 	bl	8000108 <strcmp>
 8006564:	1e03      	subs	r3, r0, #0
 8006566:	d101      	bne.n	800656c <HTTPGetContentType+0x5c>
			return HTTP_CONTENT_TYPE_HTML;
 8006568:	4b37      	ldr	r3, [pc, #220]	; (8006648 <HTTPGetContentType+0x138>)
 800656a:	e066      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".css"))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	0018      	movs	r0, r3
 8006570:	f7f9 fdd4 	bl	800011c <strlen>
 8006574:	0003      	movs	r3, r0
 8006576:	3b04      	subs	r3, #4
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	18d3      	adds	r3, r2, r3
 800657c:	4a34      	ldr	r2, [pc, #208]	; (8006650 <HTTPGetContentType+0x140>)
 800657e:	0011      	movs	r1, r2
 8006580:	0018      	movs	r0, r3
 8006582:	f7f9 fdc1 	bl	8000108 <strcmp>
 8006586:	1e03      	subs	r3, r0, #0
 8006588:	d101      	bne.n	800658e <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 800658a:	4b32      	ldr	r3, [pc, #200]	; (8006654 <HTTPGetContentType+0x144>)
 800658c:	e055      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".js"))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0018      	movs	r0, r3
 8006592:	f7f9 fdc3 	bl	800011c <strlen>
 8006596:	0003      	movs	r3, r0
 8006598:	3b03      	subs	r3, #3
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	18d3      	adds	r3, r2, r3
 800659e:	4a2e      	ldr	r2, [pc, #184]	; (8006658 <HTTPGetContentType+0x148>)
 80065a0:	0011      	movs	r1, r2
 80065a2:	0018      	movs	r0, r3
 80065a4:	f7f9 fdb0 	bl	8000108 <strcmp>
 80065a8:	1e03      	subs	r3, r0, #0
 80065aa:	d101      	bne.n	80065b0 <HTTPGetContentType+0xa0>
			return HTTP_CONTENT_TYPE_JS;
 80065ac:	4b2b      	ldr	r3, [pc, #172]	; (800665c <HTTPGetContentType+0x14c>)
 80065ae:	e044      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".png"))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	0018      	movs	r0, r3
 80065b4:	f7f9 fdb2 	bl	800011c <strlen>
 80065b8:	0003      	movs	r3, r0
 80065ba:	3b04      	subs	r3, #4
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	18d3      	adds	r3, r2, r3
 80065c0:	4a27      	ldr	r2, [pc, #156]	; (8006660 <HTTPGetContentType+0x150>)
 80065c2:	0011      	movs	r1, r2
 80065c4:	0018      	movs	r0, r3
 80065c6:	f7f9 fd9f 	bl	8000108 <strcmp>
 80065ca:	1e03      	subs	r3, r0, #0
 80065cc:	d101      	bne.n	80065d2 <HTTPGetContentType+0xc2>
			return HTTP_CONTENT_TYPE_PNG;
 80065ce:	4b25      	ldr	r3, [pc, #148]	; (8006664 <HTTPGetContentType+0x154>)
 80065d0:	e033      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpg"))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	0018      	movs	r0, r3
 80065d6:	f7f9 fda1 	bl	800011c <strlen>
 80065da:	0003      	movs	r3, r0
 80065dc:	3b04      	subs	r3, #4
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	18d3      	adds	r3, r2, r3
 80065e2:	4a21      	ldr	r2, [pc, #132]	; (8006668 <HTTPGetContentType+0x158>)
 80065e4:	0011      	movs	r1, r2
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7f9 fd8e 	bl	8000108 <strcmp>
 80065ec:	1e03      	subs	r3, r0, #0
 80065ee:	d101      	bne.n	80065f4 <HTTPGetContentType+0xe4>
			return HTTP_CONTENT_TYPE_JPEG;
 80065f0:	4b1e      	ldr	r3, [pc, #120]	; (800666c <HTTPGetContentType+0x15c>)
 80065f2:	e022      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpeg"))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7f9 fd90 	bl	800011c <strlen>
 80065fc:	0003      	movs	r3, r0
 80065fe:	3b05      	subs	r3, #5
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	18d3      	adds	r3, r2, r3
 8006604:	4a1a      	ldr	r2, [pc, #104]	; (8006670 <HTTPGetContentType+0x160>)
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f7f9 fd7d 	bl	8000108 <strcmp>
 800660e:	1e03      	subs	r3, r0, #0
 8006610:	d101      	bne.n	8006616 <HTTPGetContentType+0x106>
			return HTTP_CONTENT_TYPE_JPEG;
 8006612:	4b16      	ldr	r3, [pc, #88]	; (800666c <HTTPGetContentType+0x15c>)
 8006614:	e011      	b.n	800663a <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".gif"))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f7f9 fd7f 	bl	800011c <strlen>
 800661e:	0003      	movs	r3, r0
 8006620:	3b04      	subs	r3, #4
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	18d3      	adds	r3, r2, r3
 8006626:	4a13      	ldr	r2, [pc, #76]	; (8006674 <HTTPGetContentType+0x164>)
 8006628:	0011      	movs	r1, r2
 800662a:	0018      	movs	r0, r3
 800662c:	f7f9 fd6c 	bl	8000108 <strcmp>
 8006630:	1e03      	subs	r3, r0, #0
 8006632:	d101      	bne.n	8006638 <HTTPGetContentType+0x128>
			return HTTP_CONTENT_TYPE_GIF;
 8006634:	4b10      	ldr	r3, [pc, #64]	; (8006678 <HTTPGetContentType+0x168>)
 8006636:	e000      	b.n	800663a <HTTPGetContentType+0x12a>
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <HTTPGetContentType+0x16c>)
}
 800663a:	0018      	movs	r0, r3
 800663c:	46bd      	mov	sp, r7
 800663e:	b002      	add	sp, #8
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	0800b168 	.word	0x0800b168
 8006648:	0800b478 	.word	0x0800b478
 800664c:	0800b170 	.word	0x0800b170
 8006650:	0800b178 	.word	0x0800b178
 8006654:	0800b484 	.word	0x0800b484
 8006658:	0800b180 	.word	0x0800b180
 800665c:	0800b490 	.word	0x0800b490
 8006660:	0800b184 	.word	0x0800b184
 8006664:	0800b4a8 	.word	0x0800b4a8
 8006668:	0800b18c 	.word	0x0800b18c
 800666c:	0800b4b4 	.word	0x0800b4b4
 8006670:	0800b194 	.word	0x0800b194
 8006674:	0800b19c 	.word	0x0800b19c
 8006678:	0800b4c0 	.word	0x0800b4c0
 800667c:	0800b46c 	.word	0x0800b46c

08006680 <HTTPSendFile>:

#ifdef __ON_BOARD_
void HTTPSendFile(HTTPRequestParseState *pS, int code, FSfile_typedef file)
{
 8006680:	b082      	sub	sp, #8
 8006682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006684:	b08f      	sub	sp, #60	; 0x3c
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
 800668c:	2548      	movs	r5, #72	; 0x48
 800668e:	2008      	movs	r0, #8
 8006690:	1839      	adds	r1, r7, r0
 8006692:	1949      	adds	r1, r1, r5
 8006694:	600a      	str	r2, [r1, #0]
 8006696:	604b      	str	r3, [r1, #4]
	char s_tmp[32];
	const char* content_type;
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2280      	movs	r2, #128	; 0x80
 800669c:	589b      	ldr	r3, [r3, r2]
 800669e:	633b      	str	r3, [r7, #48]	; 0x30
	BOOL is_gzip = false;
 80066a0:	262f      	movs	r6, #47	; 0x2f
 80066a2:	19bb      	adds	r3, r7, r6
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]
	/* preprocessing */
	if(ENDSWITH(file.path, ".gz"))
 80066a8:	183b      	adds	r3, r7, r0
 80066aa:	195b      	adds	r3, r3, r5
 80066ac:	681c      	ldr	r4, [r3, #0]
 80066ae:	183b      	adds	r3, r7, r0
 80066b0:	195b      	adds	r3, r3, r5
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7f9 fd31 	bl	800011c <strlen>
 80066ba:	0003      	movs	r3, r0
 80066bc:	3b03      	subs	r3, #3
 80066be:	18e3      	adds	r3, r4, r3
 80066c0:	4aaa      	ldr	r2, [pc, #680]	; (800696c <HTTPSendFile+0x2ec>)
 80066c2:	0011      	movs	r1, r2
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7f9 fd1f 	bl	8000108 <strcmp>
 80066ca:	1e03      	subs	r3, r0, #0
 80066cc:	d11c      	bne.n	8006708 <HTTPSendFile+0x88>
	{
		is_gzip = true;
 80066ce:	19bb      	adds	r3, r7, r6
 80066d0:	2201      	movs	r2, #1
 80066d2:	701a      	strb	r2, [r3, #0]
		strcpy(s_tmp, file.path);
 80066d4:	2008      	movs	r0, #8
 80066d6:	183b      	adds	r3, r7, r0
 80066d8:	195b      	adds	r3, r3, r5
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	240c      	movs	r4, #12
 80066de:	193b      	adds	r3, r7, r4
 80066e0:	0011      	movs	r1, r2
 80066e2:	0018      	movs	r0, r3
 80066e4:	f004 fb78 	bl	800add8 <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 80066e8:	193b      	adds	r3, r7, r4
 80066ea:	0018      	movs	r0, r3
 80066ec:	f7f9 fd16 	bl	800011c <strlen>
 80066f0:	0003      	movs	r3, r0
 80066f2:	3b03      	subs	r3, #3
 80066f4:	193a      	adds	r2, r7, r4
 80066f6:	2100      	movs	r1, #0
 80066f8:	54d1      	strb	r1, [r2, r3]
		content_type = HTTPGetContentType(s_tmp);
 80066fa:	193b      	adds	r3, r7, r4
 80066fc:	0018      	movs	r0, r3
 80066fe:	f7ff ff07 	bl	8006510 <HTTPGetContentType>
 8006702:	0003      	movs	r3, r0
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
 8006706:	e00a      	b.n	800671e <HTTPSendFile+0x9e>
	}
	else
	{
		content_type = HTTPGetContentType(file.path);
 8006708:	2348      	movs	r3, #72	; 0x48
 800670a:	2208      	movs	r2, #8
 800670c:	4694      	mov	ip, r2
 800670e:	44bc      	add	ip, r7
 8006710:	4463      	add	r3, ip
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	0018      	movs	r0, r3
 8006716:	f7ff fefb 	bl	8006510 <HTTPGetContentType>
 800671a:	0003      	movs	r3, r0
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
	}
	// construct header
	*buf = 0; // clear buffer
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
	// Line 1
	// HTTP/1.1
	strcat(buf, HTTP_STR_VERSION);
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	0018      	movs	r0, r3
 8006728:	f7f9 fcf8 	bl	800011c <strlen>
 800672c:	0003      	movs	r3, r0
 800672e:	001a      	movs	r2, r3
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	189a      	adds	r2, r3, r2
 8006734:	4b8e      	ldr	r3, [pc, #568]	; (8006970 <HTTPSendFile+0x2f0>)
 8006736:	0010      	movs	r0, r2
 8006738:	0019      	movs	r1, r3
 800673a:	2309      	movs	r3, #9
 800673c:	001a      	movs	r2, r3
 800673e:	f004 fb1f 	bl	800ad80 <memcpy>
	buf += strlen(HTTP_STR_VERSION); // HTTP/1.1
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	3308      	adds	r3, #8
 8006746:	633b      	str	r3, [r7, #48]	; 0x30
	*buf = ' '; // HTTP/1.1_
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	2220      	movs	r2, #32
 800674c:	701a      	strb	r2, [r3, #0]
	buf++;
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	3301      	adds	r3, #1
 8006752:	633b      	str	r3, [r7, #48]	; 0x30
	// CODE
	buf += u16toa(code, buf);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800675a:	0011      	movs	r1, r2
 800675c:	0018      	movs	r0, r3
 800675e:	f001 fac5 	bl	8007cec <u16toa>
 8006762:	0003      	movs	r3, r0
 8006764:	001a      	movs	r2, r3
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	189b      	adds	r3, r3, r2
 800676a:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, " OK\r\n");
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	0018      	movs	r0, r3
 8006770:	f7f9 fcd4 	bl	800011c <strlen>
 8006774:	0003      	movs	r3, r0
 8006776:	001a      	movs	r2, r3
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	189a      	adds	r2, r3, r2
 800677c:	4b7d      	ldr	r3, [pc, #500]	; (8006974 <HTTPSendFile+0x2f4>)
 800677e:	0010      	movs	r0, r2
 8006780:	0019      	movs	r1, r3
 8006782:	2306      	movs	r3, #6
 8006784:	001a      	movs	r2, r3
 8006786:	f004 fafb 	bl	800ad80 <memcpy>
	buf += 5;	// 200 OK\r\n
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	3305      	adds	r3, #5
 800678e:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 2: Connection
	strcat(buf, "Connection: ");
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	0018      	movs	r0, r3
 8006794:	f7f9 fcc2 	bl	800011c <strlen>
 8006798:	0003      	movs	r3, r0
 800679a:	001a      	movs	r2, r3
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	189a      	adds	r2, r3, r2
 80067a0:	4b75      	ldr	r3, [pc, #468]	; (8006978 <HTTPSendFile+0x2f8>)
 80067a2:	0010      	movs	r0, r2
 80067a4:	0019      	movs	r1, r3
 80067a6:	230d      	movs	r3, #13
 80067a8:	001a      	movs	r2, r3
 80067aa:	f004 fae9 	bl	800ad80 <memcpy>
	buf += 12;
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	330c      	adds	r3, #12
 80067b2:	633b      	str	r3, [r7, #48]	; 0x30
	if(pS->connection == CLOSED)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	791b      	ldrb	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d112      	bne.n	80067e2 <HTTPSendFile+0x162>
	{
		strcat(buf, "Closed\r\n");
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	0018      	movs	r0, r3
 80067c0:	f7f9 fcac 	bl	800011c <strlen>
 80067c4:	0003      	movs	r3, r0
 80067c6:	001a      	movs	r2, r3
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	189a      	adds	r2, r3, r2
 80067cc:	4b6b      	ldr	r3, [pc, #428]	; (800697c <HTTPSendFile+0x2fc>)
 80067ce:	0010      	movs	r0, r2
 80067d0:	0019      	movs	r1, r3
 80067d2:	2309      	movs	r3, #9
 80067d4:	001a      	movs	r2, r3
 80067d6:	f004 fad3 	bl	800ad80 <memcpy>
		buf += 8;
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	3308      	adds	r3, #8
 80067de:	633b      	str	r3, [r7, #48]	; 0x30
 80067e0:	e011      	b.n	8006806 <HTTPSendFile+0x186>
	}
	else
	{
		strcat(buf, "Keep-Alive\r\n");
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	0018      	movs	r0, r3
 80067e6:	f7f9 fc99 	bl	800011c <strlen>
 80067ea:	0003      	movs	r3, r0
 80067ec:	001a      	movs	r2, r3
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	189a      	adds	r2, r3, r2
 80067f2:	4b63      	ldr	r3, [pc, #396]	; (8006980 <HTTPSendFile+0x300>)
 80067f4:	0010      	movs	r0, r2
 80067f6:	0019      	movs	r1, r3
 80067f8:	230d      	movs	r3, #13
 80067fa:	001a      	movs	r2, r3
 80067fc:	f004 fac0 	bl	800ad80 <memcpy>
		buf += 12;
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	330c      	adds	r3, #12
 8006804:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 3: Content-Encoding
	if(is_gzip)
 8006806:	232f      	movs	r3, #47	; 0x2f
 8006808:	18fb      	adds	r3, r7, r3
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d011      	beq.n	8006834 <HTTPSendFile+0x1b4>
	{
		strcat(buf, "Content-Encoding: gzip\r\n");
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	0018      	movs	r0, r3
 8006814:	f7f9 fc82 	bl	800011c <strlen>
 8006818:	0003      	movs	r3, r0
 800681a:	001a      	movs	r2, r3
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	189a      	adds	r2, r3, r2
 8006820:	4b58      	ldr	r3, [pc, #352]	; (8006984 <HTTPSendFile+0x304>)
 8006822:	0010      	movs	r0, r2
 8006824:	0019      	movs	r1, r3
 8006826:	2319      	movs	r3, #25
 8006828:	001a      	movs	r2, r3
 800682a:	f004 faa9 	bl	800ad80 <memcpy>
		buf += 24;
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	3318      	adds	r3, #24
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 4: Content-Type
	strcat(buf, "Content-Type: ");
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	0018      	movs	r0, r3
 8006838:	f7f9 fc70 	bl	800011c <strlen>
 800683c:	0003      	movs	r3, r0
 800683e:	001a      	movs	r2, r3
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	189a      	adds	r2, r3, r2
 8006844:	4b50      	ldr	r3, [pc, #320]	; (8006988 <HTTPSendFile+0x308>)
 8006846:	0010      	movs	r0, r2
 8006848:	0019      	movs	r1, r3
 800684a:	230f      	movs	r3, #15
 800684c:	001a      	movs	r2, r3
 800684e:	f004 fa97 	bl	800ad80 <memcpy>
	buf += 14;
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	330e      	adds	r3, #14
 8006856:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, content_type);
 8006858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	0011      	movs	r1, r2
 800685e:	0018      	movs	r0, r3
 8006860:	f004 fa9f 	bl	800ada2 <strcat>
	buf += strlen(content_type);
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	0018      	movs	r0, r3
 8006868:	f7f9 fc58 	bl	800011c <strlen>
 800686c:	0002      	movs	r2, r0
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	189b      	adds	r3, r3, r2
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, "\r\n");
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	0018      	movs	r0, r3
 8006878:	f7f9 fc50 	bl	800011c <strlen>
 800687c:	0003      	movs	r3, r0
 800687e:	001a      	movs	r2, r3
 8006880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006882:	189a      	adds	r2, r3, r2
 8006884:	4b41      	ldr	r3, [pc, #260]	; (800698c <HTTPSendFile+0x30c>)
 8006886:	0010      	movs	r0, r2
 8006888:	0019      	movs	r1, r3
 800688a:	2303      	movs	r3, #3
 800688c:	001a      	movs	r2, r3
 800688e:	f004 fa77 	bl	800ad80 <memcpy>
	buf += 2;
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	3302      	adds	r3, #2
 8006896:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 5: Content-Length
	strcat(buf, "Content-Length: ");
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	0018      	movs	r0, r3
 800689c:	f7f9 fc3e 	bl	800011c <strlen>
 80068a0:	0003      	movs	r3, r0
 80068a2:	001a      	movs	r2, r3
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	189a      	adds	r2, r3, r2
 80068a8:	4b39      	ldr	r3, [pc, #228]	; (8006990 <HTTPSendFile+0x310>)
 80068aa:	0010      	movs	r0, r2
 80068ac:	0019      	movs	r1, r3
 80068ae:	2311      	movs	r3, #17
 80068b0:	001a      	movs	r2, r3
 80068b2:	f004 fa65 	bl	800ad80 <memcpy>
	buf += 16;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	3310      	adds	r3, #16
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 80068bc:	2448      	movs	r4, #72	; 0x48
 80068be:	2508      	movs	r5, #8
 80068c0:	197b      	adds	r3, r7, r5
 80068c2:	191b      	adds	r3, r3, r4
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	0011      	movs	r1, r2
 80068cc:	0018      	movs	r0, r3
 80068ce:	f001 fa0d 	bl	8007cec <u16toa>
 80068d2:	0003      	movs	r3, r0
 80068d4:	001a      	movs	r2, r3
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	189b      	adds	r3, r3, r2
 80068da:	633b      	str	r3, [r7, #48]	; 0x30
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 80068dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068de:	0018      	movs	r0, r3
 80068e0:	f7f9 fc1c 	bl	800011c <strlen>
 80068e4:	0003      	movs	r3, r0
 80068e6:	001a      	movs	r2, r3
 80068e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ea:	189a      	adds	r2, r3, r2
 80068ec:	4b29      	ldr	r3, [pc, #164]	; (8006994 <HTTPSendFile+0x314>)
 80068ee:	0010      	movs	r0, r2
 80068f0:	0019      	movs	r1, r3
 80068f2:	2303      	movs	r3, #3
 80068f4:	001a      	movs	r2, r3
 80068f6:	f004 fa43 	bl	800ad80 <memcpy>
	buf += 2;
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	3302      	adds	r3, #2
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 6: end of header
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	0018      	movs	r0, r3
 8006904:	f7f9 fc0a 	bl	800011c <strlen>
 8006908:	0003      	movs	r3, r0
 800690a:	001a      	movs	r2, r3
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	189a      	adds	r2, r3, r2
 8006910:	4b20      	ldr	r3, [pc, #128]	; (8006994 <HTTPSendFile+0x314>)
 8006912:	0010      	movs	r0, r2
 8006914:	0019      	movs	r1, r3
 8006916:	2303      	movs	r3, #3
 8006918:	001a      	movs	r2, r3
 800691a:	f004 fa31 	bl	800ad80 <memcpy>
	buf += 2;
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	3302      	adds	r3, #2
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
	pS->len_response_header = strlen(pS->response_header);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2280      	movs	r2, #128	; 0x80
 8006928:	589b      	ldr	r3, [r3, r2]
 800692a:	0018      	movs	r0, r3
 800692c:	f7f9 fbf6 	bl	800011c <strlen>
 8006930:	0003      	movs	r3, r0
 8006932:	b299      	uxth	r1, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	227e      	movs	r2, #126	; 0x7e
 8006938:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = (uint16_t)file.size;
 800693a:	197b      	adds	r3, r7, r5
 800693c:	191b      	adds	r3, r3, r4
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	b299      	uxth	r1, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2284      	movs	r2, #132	; 0x84
 8006946:	5299      	strh	r1, [r3, r2]
	pS->response_content = file.p_content;
 8006948:	197b      	adds	r3, r7, r5
 800694a:	191b      	adds	r3, r3, r4
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2188      	movs	r1, #136	; 0x88
 8006952:	505a      	str	r2, [r3, r1]
	pS->response_stage = RESPONSE_PREPARED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	227c      	movs	r2, #124	; 0x7c
 8006958:	2101      	movs	r1, #1
 800695a:	5499      	strb	r1, [r3, r2]

}
 800695c:	46c0      	nop			; (mov r8, r8)
 800695e:	46bd      	mov	sp, r7
 8006960:	b00f      	add	sp, #60	; 0x3c
 8006962:	bcf0      	pop	{r4, r5, r6, r7}
 8006964:	bc08      	pop	{r3}
 8006966:	b002      	add	sp, #8
 8006968:	4718      	bx	r3
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	0800b1a4 	.word	0x0800b1a4
 8006970:	0800b460 	.word	0x0800b460
 8006974:	0800b1a8 	.word	0x0800b1a8
 8006978:	0800b1b0 	.word	0x0800b1b0
 800697c:	0800b1c0 	.word	0x0800b1c0
 8006980:	0800b1cc 	.word	0x0800b1cc
 8006984:	0800b1dc 	.word	0x0800b1dc
 8006988:	0800b1f8 	.word	0x0800b1f8
 800698c:	0800b208 	.word	0x0800b208
 8006990:	0800b20c 	.word	0x0800b20c
 8006994:	0800b454 	.word	0x0800b454

08006998 <HTTPSendStr>:

void HTTPSendStr(HTTPRequestParseState* pS, int code, const char* content)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
	// construct header
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	589b      	ldr	r3, [r3, r2]
 80069aa:	61fb      	str	r3, [r7, #28]
	*buf = 0; // clear buffer
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2200      	movs	r2, #0
 80069b0:	701a      	strb	r2, [r3, #0]
	strcat(buf, HTTP_STR_VERSION);
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f7f9 fbb1 	bl	800011c <strlen>
 80069ba:	0003      	movs	r3, r0
 80069bc:	001a      	movs	r2, r3
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	189a      	adds	r2, r3, r2
 80069c2:	4b94      	ldr	r3, [pc, #592]	; (8006c14 <HTTPSendStr+0x27c>)
 80069c4:	0010      	movs	r0, r2
 80069c6:	0019      	movs	r1, r3
 80069c8:	2309      	movs	r3, #9
 80069ca:	001a      	movs	r2, r3
 80069cc:	f004 f9d8 	bl	800ad80 <memcpy>
	// Line 1
	// HTTP/1.1
	buf += strlen(HTTP_STR_VERSION);
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	3308      	adds	r3, #8
 80069d4:	61fb      	str	r3, [r7, #28]
	*buf = ' '; // HTTP/1.1_
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	2220      	movs	r2, #32
 80069da:	701a      	strb	r2, [r3, #0]
	buf++;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	3301      	adds	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
	// CODE
	buf += u16toa(code, buf);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	0011      	movs	r1, r2
 80069ea:	0018      	movs	r0, r3
 80069ec:	f001 f97e 	bl	8007cec <u16toa>
 80069f0:	0003      	movs	r3, r0
 80069f2:	001a      	movs	r2, r3
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	61fb      	str	r3, [r7, #28]
	switch(code)
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2bc8      	cmp	r3, #200	; 0xc8
 80069fe:	d005      	beq.n	8006a0c <HTTPSendStr+0x74>
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	23c8      	movs	r3, #200	; 0xc8
 8006a04:	005b      	lsls	r3, r3, #1
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d013      	beq.n	8006a32 <HTTPSendStr+0x9a>
 8006a0a:	e025      	b.n	8006a58 <HTTPSendStr+0xc0>
	{
	case 200:
		strcat(buf, " OK\r\n");
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7f9 fb84 	bl	800011c <strlen>
 8006a14:	0003      	movs	r3, r0
 8006a16:	001a      	movs	r2, r3
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	189a      	adds	r2, r3, r2
 8006a1c:	4b7e      	ldr	r3, [pc, #504]	; (8006c18 <HTTPSendStr+0x280>)
 8006a1e:	0010      	movs	r0, r2
 8006a20:	0019      	movs	r1, r3
 8006a22:	2306      	movs	r3, #6
 8006a24:	001a      	movs	r2, r3
 8006a26:	f004 f9ab 	bl	800ad80 <memcpy>
		buf += 5;	// 200 OK\r\n;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3305      	adds	r3, #5
 8006a2e:	61fb      	str	r3, [r7, #28]
		break;
 8006a30:	e012      	b.n	8006a58 <HTTPSendStr+0xc0>
	case 400:
		strcat(buf, " Error\r\n");
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f7f9 fb71 	bl	800011c <strlen>
 8006a3a:	0003      	movs	r3, r0
 8006a3c:	001a      	movs	r2, r3
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	189a      	adds	r2, r3, r2
 8006a42:	4b76      	ldr	r3, [pc, #472]	; (8006c1c <HTTPSendStr+0x284>)
 8006a44:	0010      	movs	r0, r2
 8006a46:	0019      	movs	r1, r3
 8006a48:	2309      	movs	r3, #9
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	f004 f998 	bl	800ad80 <memcpy>
		buf += 8; // 400 Error\r\n
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3308      	adds	r3, #8
 8006a54:	61fb      	str	r3, [r7, #28]
		break;
 8006a56:	46c0      	nop			; (mov r8, r8)
	}

	// Line 2: Connection
	strcat(buf, "Connection: ");
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f7f9 fb5e 	bl	800011c <strlen>
 8006a60:	0003      	movs	r3, r0
 8006a62:	001a      	movs	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	189a      	adds	r2, r3, r2
 8006a68:	4b6d      	ldr	r3, [pc, #436]	; (8006c20 <HTTPSendStr+0x288>)
 8006a6a:	0010      	movs	r0, r2
 8006a6c:	0019      	movs	r1, r3
 8006a6e:	230d      	movs	r3, #13
 8006a70:	001a      	movs	r2, r3
 8006a72:	f004 f985 	bl	800ad80 <memcpy>
	buf += 12;
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	330c      	adds	r3, #12
 8006a7a:	61fb      	str	r3, [r7, #28]
	if(pS->connection == CLOSED)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	791b      	ldrb	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d112      	bne.n	8006aaa <HTTPSendStr+0x112>
	{
		strcat(buf, "Closed\r\n");
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	0018      	movs	r0, r3
 8006a88:	f7f9 fb48 	bl	800011c <strlen>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	001a      	movs	r2, r3
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	189a      	adds	r2, r3, r2
 8006a94:	4b63      	ldr	r3, [pc, #396]	; (8006c24 <HTTPSendStr+0x28c>)
 8006a96:	0010      	movs	r0, r2
 8006a98:	0019      	movs	r1, r3
 8006a9a:	2309      	movs	r3, #9
 8006a9c:	001a      	movs	r2, r3
 8006a9e:	f004 f96f 	bl	800ad80 <memcpy>
		buf += 8;
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	61fb      	str	r3, [r7, #28]
 8006aa8:	e011      	b.n	8006ace <HTTPSendStr+0x136>
	}
	else
	{
		strcat(buf, "Keep-Alive\r\n");
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7f9 fb35 	bl	800011c <strlen>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	001a      	movs	r2, r3
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	189a      	adds	r2, r3, r2
 8006aba:	4b5b      	ldr	r3, [pc, #364]	; (8006c28 <HTTPSendStr+0x290>)
 8006abc:	0010      	movs	r0, r2
 8006abe:	0019      	movs	r1, r3
 8006ac0:	230d      	movs	r3, #13
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	f004 f95c 	bl	800ad80 <memcpy>
		buf += 12;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	330c      	adds	r3, #12
 8006acc:	61fb      	str	r3, [r7, #28]
	}
	// Line 3: Content-Type
	const char* content_type = HTTPGetContentType(pS->URI);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3305      	adds	r3, #5
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f7ff fd1c 	bl	8006510 <HTTPGetContentType>
 8006ad8:	0003      	movs	r3, r0
 8006ada:	61bb      	str	r3, [r7, #24]
	strcat(buf, "Content-Type: ");
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	0018      	movs	r0, r3
 8006ae0:	f7f9 fb1c 	bl	800011c <strlen>
 8006ae4:	0003      	movs	r3, r0
 8006ae6:	001a      	movs	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	189a      	adds	r2, r3, r2
 8006aec:	4b4f      	ldr	r3, [pc, #316]	; (8006c2c <HTTPSendStr+0x294>)
 8006aee:	0010      	movs	r0, r2
 8006af0:	0019      	movs	r1, r3
 8006af2:	230f      	movs	r3, #15
 8006af4:	001a      	movs	r2, r3
 8006af6:	f004 f943 	bl	800ad80 <memcpy>
	buf += 14;
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	330e      	adds	r3, #14
 8006afe:	61fb      	str	r3, [r7, #28]
	strcat(buf, content_type);
 8006b00:	69ba      	ldr	r2, [r7, #24]
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f004 f94b 	bl	800ada2 <strcat>
	buf += strlen(content_type);
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f7f9 fb04 	bl	800011c <strlen>
 8006b14:	0002      	movs	r2, r0
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	189b      	adds	r3, r3, r2
 8006b1a:	61fb      	str	r3, [r7, #28]
	strcat(buf, "\r\n");
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7f9 fafc 	bl	800011c <strlen>
 8006b24:	0003      	movs	r3, r0
 8006b26:	001a      	movs	r2, r3
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	189a      	adds	r2, r3, r2
 8006b2c:	4b40      	ldr	r3, [pc, #256]	; (8006c30 <HTTPSendStr+0x298>)
 8006b2e:	0010      	movs	r0, r2
 8006b30:	0019      	movs	r1, r3
 8006b32:	2303      	movs	r3, #3
 8006b34:	001a      	movs	r2, r3
 8006b36:	f004 f923 	bl	800ad80 <memcpy>
	buf += 2;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	3302      	adds	r3, #2
 8006b3e:	61fb      	str	r3, [r7, #28]
	// Line 4: Content-Length
	strcat(buf, "Content-Length: ");
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	0018      	movs	r0, r3
 8006b44:	f7f9 faea 	bl	800011c <strlen>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	001a      	movs	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	189a      	adds	r2, r3, r2
 8006b50:	4b38      	ldr	r3, [pc, #224]	; (8006c34 <HTTPSendStr+0x29c>)
 8006b52:	0010      	movs	r0, r2
 8006b54:	0019      	movs	r1, r3
 8006b56:	2311      	movs	r3, #17
 8006b58:	001a      	movs	r2, r3
 8006b5a:	f004 f911 	bl	800ad80 <memcpy>
	buf += 16;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	3310      	adds	r3, #16
 8006b62:	61fb      	str	r3, [r7, #28]
	uint16_t len_content = strlen(content);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	0018      	movs	r0, r3
 8006b68:	f7f9 fad8 	bl	800011c <strlen>
 8006b6c:	0002      	movs	r2, r0
 8006b6e:	2116      	movs	r1, #22
 8006b70:	187b      	adds	r3, r7, r1
 8006b72:	801a      	strh	r2, [r3, #0]
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	0011      	movs	r1, r2
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	f001 f8b5 	bl	8007cec <u16toa>
 8006b82:	0003      	movs	r3, r0
 8006b84:	001a      	movs	r2, r3
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	189b      	adds	r3, r3, r2
 8006b8a:	61fb      	str	r3, [r7, #28]
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f7f9 fac4 	bl	800011c <strlen>
 8006b94:	0003      	movs	r3, r0
 8006b96:	001a      	movs	r2, r3
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	189a      	adds	r2, r3, r2
 8006b9c:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <HTTPSendStr+0x2a0>)
 8006b9e:	0010      	movs	r0, r2
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	001a      	movs	r2, r3
 8006ba6:	f004 f8eb 	bl	800ad80 <memcpy>
	buf += 2;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	3302      	adds	r3, #2
 8006bae:	61fb      	str	r3, [r7, #28]
	// Line 5: End of header
	strcat(buf, HTTP_LINE_DELIM);
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f7f9 fab2 	bl	800011c <strlen>
 8006bb8:	0003      	movs	r3, r0
 8006bba:	001a      	movs	r2, r3
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	189a      	adds	r2, r3, r2
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <HTTPSendStr+0x2a0>)
 8006bc2:	0010      	movs	r0, r2
 8006bc4:	0019      	movs	r1, r3
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	001a      	movs	r2, r3
 8006bca:	f004 f8d9 	bl	800ad80 <memcpy>
	buf += 2;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	61fb      	str	r3, [r7, #28]
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2280      	movs	r2, #128	; 0x80
 8006bd8:	589b      	ldr	r3, [r3, r2]
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f7f9 fa9e 	bl	800011c <strlen>
 8006be0:	0003      	movs	r3, r0
 8006be2:	b299      	uxth	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	227e      	movs	r2, #126	; 0x7e
 8006be8:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = strlen(content);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f7f9 fa95 	bl	800011c <strlen>
 8006bf2:	0003      	movs	r3, r0
 8006bf4:	b299      	uxth	r1, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2284      	movs	r2, #132	; 0x84
 8006bfa:	5299      	strh	r1, [r3, r2]
	pS->response_content = (uint8_t*)content;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2188      	movs	r1, #136	; 0x88
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	505a      	str	r2, [r3, r1]
	pS->response_stage = RESPONSE_PREPARED;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	227c      	movs	r2, #124	; 0x7c
 8006c08:	2101      	movs	r1, #1
 8006c0a:	5499      	strb	r1, [r3, r2]
}
 8006c0c:	46c0      	nop			; (mov r8, r8)
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b008      	add	sp, #32
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	0800b460 	.word	0x0800b460
 8006c18:	0800b1a8 	.word	0x0800b1a8
 8006c1c:	0800b220 	.word	0x0800b220
 8006c20:	0800b1b0 	.word	0x0800b1b0
 8006c24:	0800b1c0 	.word	0x0800b1c0
 8006c28:	0800b1cc 	.word	0x0800b1cc
 8006c2c:	0800b1f8 	.word	0x0800b1f8
 8006c30:	0800b208 	.word	0x0800b208
 8006c34:	0800b20c 	.word	0x0800b20c
 8006c38:	0800b454 	.word	0x0800b454

08006c3c <WSMakeStrOriginal>:
 * response is content
 * if URI
 * response is: "URI=@URI&@content"
 * */
int WSMakeStrOriginal(char* buf, size_t lenbuf, const char* URI, const char* content)
{
 8006c3c:	b590      	push	{r4, r7, lr}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	uint16_t n = 0;
 8006c4a:	2416      	movs	r4, #22
 8006c4c:	193b      	adds	r3, r7, r4
 8006c4e:	2200      	movs	r2, #0
 8006c50:	801a      	strh	r2, [r3, #0]
	if(URI)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d023      	beq.n	8006ca0 <WSMakeStrOriginal+0x64>
	{
		strcpy(buf, "URI=");
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4b25      	ldr	r3, [pc, #148]	; (8006cf0 <WSMakeStrOriginal+0xb4>)
 8006c5c:	0010      	movs	r0, r2
 8006c5e:	0019      	movs	r1, r3
 8006c60:	2305      	movs	r3, #5
 8006c62:	001a      	movs	r2, r3
 8006c64:	f004 f88c 	bl	800ad80 <memcpy>
		n = strnlen(URI, 128);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2180      	movs	r1, #128	; 0x80
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f004 f91c 	bl	800aeaa <strnlen>
 8006c72:	0002      	movs	r2, r0
 8006c74:	193b      	adds	r3, r7, r4
 8006c76:	801a      	strh	r2, [r3, #0]
		// use strlcpy at any possible places to replace strncpy
		strlcpy(buf+4, URI, lenbuf - 5);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	1d18      	adds	r0, r3, #4
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	1f5a      	subs	r2, r3, #5
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	0019      	movs	r1, r3
 8006c84:	f004 f8b0 	bl	800ade8 <strlcpy>
		buf[n+4] = '&';
 8006c88:	193b      	adds	r3, r7, r4
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	3304      	adds	r3, #4
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	18d3      	adds	r3, r2, r3
 8006c92:	2226      	movs	r2, #38	; 0x26
 8006c94:	701a      	strb	r2, [r3, #0]
		n += 5;
 8006c96:	193b      	adds	r3, r7, r4
 8006c98:	193a      	adds	r2, r7, r4
 8006c9a:	8812      	ldrh	r2, [r2, #0]
 8006c9c:	3205      	adds	r2, #5
 8006c9e:	801a      	strh	r2, [r3, #0]
	}
	strlcpy(buf + n, content, lenbuf - n - 1);
 8006ca0:	2416      	movs	r4, #22
 8006ca2:	193b      	adds	r3, r7, r4
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	18d0      	adds	r0, r2, r3
 8006caa:	193b      	adds	r3, r7, r4
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	1e5a      	subs	r2, r3, #1
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	0019      	movs	r1, r3
 8006cb8:	f004 f896 	bl	800ade8 <strlcpy>
	n += strnlen(content, MAX_LEN_RESPONSE_HEADER - 1);
 8006cbc:	4a0d      	ldr	r2, [pc, #52]	; (8006cf4 <WSMakeStrOriginal+0xb8>)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	0011      	movs	r1, r2
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	f004 f8f1 	bl	800aeaa <strnlen>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	b299      	uxth	r1, r3
 8006ccc:	193b      	adds	r3, r7, r4
 8006cce:	193a      	adds	r2, r7, r4
 8006cd0:	8812      	ldrh	r2, [r2, #0]
 8006cd2:	188a      	adds	r2, r1, r2
 8006cd4:	801a      	strh	r2, [r3, #0]
	buf[n] = 0;
 8006cd6:	193b      	adds	r3, r7, r4
 8006cd8:	881b      	ldrh	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	18d3      	adds	r3, r2, r3
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
	return n;
 8006ce2:	193b      	adds	r3, r7, r4
 8006ce4:	881b      	ldrh	r3, [r3, #0]
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b007      	add	sp, #28
 8006cec:	bd90      	pop	{r4, r7, pc}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	0800b22c 	.word	0x0800b22c
 8006cf4:	000001ff 	.word	0x000001ff

08006cf8 <WSSendStr>:


void WSSendStr(HTTPRequestParseState* pS, const char* URI, const char* content)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
	static uint8_t websocket_frame_shared_buffer[256];
	int n = WSMakeStrOriginal(websocket_frame_shared_buffer, sizeof(websocket_frame_shared_buffer),  URI, content);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	0049      	lsls	r1, r1, #1
 8006d0c:	4810      	ldr	r0, [pc, #64]	; (8006d50 <WSSendStr+0x58>)
 8006d0e:	f7ff ff95 	bl	8006c3c <WSMakeStrOriginal>
 8006d12:	0003      	movs	r3, r0
 8006d14:	617b      	str	r3, [r7, #20]
	char* buf = pS->response_header;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2280      	movs	r2, #128	; 0x80
 8006d1a:	589b      	ldr	r3, [r3, r2]
 8006d1c:	613b      	str	r3, [r7, #16]
	n = ws_make_text_frame(buf, MAX_LEN_RESPONSE_HEADER- 1, websocket_frame_shared_buffer, n);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	4a0b      	ldr	r2, [pc, #44]	; (8006d50 <WSSendStr+0x58>)
 8006d22:	490c      	ldr	r1, [pc, #48]	; (8006d54 <WSSendStr+0x5c>)
 8006d24:	6938      	ldr	r0, [r7, #16]
 8006d26:	f003 fdbb 	bl	800a8a0 <ws_make_text_frame>
 8006d2a:	0003      	movs	r3, r0
 8006d2c:	617b      	str	r3, [r7, #20]
	// Start Sending
	pS->len_response_header = n;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	b299      	uxth	r1, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	227e      	movs	r2, #126	; 0x7e
 8006d36:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2284      	movs	r2, #132	; 0x84
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	5299      	strh	r1, [r3, r2]
	pS->response_stage = RESPONSE_PREPARED;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	227c      	movs	r2, #124	; 0x7c
 8006d44:	2101      	movs	r1, #1
 8006d46:	5499      	strb	r1, [r3, r2]
}
 8006d48:	46c0      	nop			; (mov r8, r8)
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	b006      	add	sp, #24
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	20000d3c 	.word	0x20000d3c
 8006d54:	000001ff 	.word	0x000001ff

08006d58 <HTTPSendWebSocketHandshakeResponse>:

int HTTPSendWebSocketHandshakeResponse(HTTPRequestParseState* pS, char* client_key, size_t lenKey)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
	// construct header
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2280      	movs	r2, #128	; 0x80
 8006d68:	589b      	ldr	r3, [r3, r2]
 8006d6a:	617b      	str	r3, [r7, #20]
	*buf = 0; // clear buffer
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	701a      	strb	r2, [r3, #0]
	strcpy(buf, HTTP_STR_VERSION);
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4b43      	ldr	r3, [pc, #268]	; (8006e84 <HTTPSendWebSocketHandshakeResponse+0x12c>)
 8006d76:	0010      	movs	r0, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	2309      	movs	r3, #9
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	f003 ffff 	bl	800ad80 <memcpy>
	// Line 1
	// HTTP/1.1
	buf += strlen(HTTP_STR_VERSION);
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	3308      	adds	r3, #8
 8006d86:	617b      	str	r3, [r7, #20]
	*buf = ' '; // HTTP/1.1_
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2220      	movs	r2, #32
 8006d8c:	701a      	strb	r2, [r3, #0]
	buf++;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	3301      	adds	r3, #1
 8006d92:	617b      	str	r3, [r7, #20]
	// CODE 101 Switching Protocols
	buf += u16toa(101, buf);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	0019      	movs	r1, r3
 8006d98:	2065      	movs	r0, #101	; 0x65
 8006d9a:	f000 ffa7 	bl	8007cec <u16toa>
 8006d9e:	0003      	movs	r3, r0
 8006da0:	001a      	movs	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	189b      	adds	r3, r3, r2
 8006da6:	617b      	str	r3, [r7, #20]
	strcpy(buf, " Switching Protocols\r\n"); // NOTE: leading space is necessary
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4b37      	ldr	r3, [pc, #220]	; (8006e88 <HTTPSendWebSocketHandshakeResponse+0x130>)
 8006dac:	0010      	movs	r0, r2
 8006dae:	0019      	movs	r1, r3
 8006db0:	2317      	movs	r3, #23
 8006db2:	001a      	movs	r2, r3
 8006db4:	f003 ffe4 	bl	800ad80 <memcpy>
	buf += 22;	// _Switching Protocols\r\n
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3316      	adds	r3, #22
 8006dbc:	617b      	str	r3, [r7, #20]
	// Line 2: Upgrade: websocket
	strcpy(buf, "Upgrade: websocket\r\n");
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4b32      	ldr	r3, [pc, #200]	; (8006e8c <HTTPSendWebSocketHandshakeResponse+0x134>)
 8006dc2:	0010      	movs	r0, r2
 8006dc4:	0019      	movs	r1, r3
 8006dc6:	2315      	movs	r3, #21
 8006dc8:	001a      	movs	r2, r3
 8006dca:	f003 ffd9 	bl	800ad80 <memcpy>
	buf += 20;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	3314      	adds	r3, #20
 8006dd2:	617b      	str	r3, [r7, #20]
	// Line 3: Connection: Upgrade
	strcpy(buf, "Connection: Upgrade\r\n");
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4b2e      	ldr	r3, [pc, #184]	; (8006e90 <HTTPSendWebSocketHandshakeResponse+0x138>)
 8006dd8:	0010      	movs	r0, r2
 8006dda:	0019      	movs	r1, r3
 8006ddc:	2316      	movs	r3, #22
 8006dde:	001a      	movs	r2, r3
 8006de0:	f003 ffce 	bl	800ad80 <memcpy>
	buf += 21;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3315      	adds	r3, #21
 8006de8:	617b      	str	r3, [r7, #20]
	// Line 4: Sec-WebSocket-Accept: ?????????
	strcpy(buf, "Sec-WebSocket-Accept: ");
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <HTTPSendWebSocketHandshakeResponse+0x13c>)
 8006dee:	0010      	movs	r0, r2
 8006df0:	0019      	movs	r1, r3
 8006df2:	2317      	movs	r3, #23
 8006df4:	001a      	movs	r2, r3
 8006df6:	f003 ffc3 	bl	800ad80 <memcpy>
	buf += 22;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	3316      	adds	r3, #22
 8006dfe:	617b      	str	r3, [r7, #20]
	// generate WS key
	int lenOut = ws_handshake_response(client_key, lenKey, buf, 48);
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	68b8      	ldr	r0, [r7, #8]
 8006e06:	2330      	movs	r3, #48	; 0x30
 8006e08:	f003 fc50 	bl	800a6ac <ws_handshake_response>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	613b      	str	r3, [r7, #16]
	buf += lenOut;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	18d3      	adds	r3, r2, r3
 8006e16:	617b      	str	r3, [r7, #20]
	if(lenOut > 0) // key generation OK
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd24      	ble.n	8006e68 <HTTPSendWebSocketHandshakeResponse+0x110>
	{
		strcpy(buf, "\r\n\r\n");
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <HTTPSendWebSocketHandshakeResponse+0x140>)
 8006e22:	0010      	movs	r0, r2
 8006e24:	0019      	movs	r1, r3
 8006e26:	2305      	movs	r3, #5
 8006e28:	001a      	movs	r2, r3
 8006e2a:	f003 ffa9 	bl	800ad80 <memcpy>
		buf += 4;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3304      	adds	r3, #4
 8006e32:	617b      	str	r3, [r7, #20]
		*buf = 0; // terminate
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
		// Start Sending
		pS->len_response_header = buf - pS->response_header;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2280      	movs	r2, #128	; 0x80
 8006e3e:	589b      	ldr	r3, [r3, r2]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	b299      	uxth	r1, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	227e      	movs	r2, #126	; 0x7e
 8006e4a:	5299      	strh	r1, [r3, r2]
		pS->len_response_content_remain = 0;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2284      	movs	r2, #132	; 0x84
 8006e50:	2100      	movs	r1, #0
 8006e52:	5299      	strh	r1, [r3, r2]
		pS->response_content = NULL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2288      	movs	r2, #136	; 0x88
 8006e58:	2100      	movs	r1, #0
 8006e5a:	5099      	str	r1, [r3, r2]
		pS->response_stage = RESPONSE_PREPARED;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	227c      	movs	r2, #124	; 0x7c
 8006e60:	2101      	movs	r1, #1
 8006e62:	5499      	strb	r1, [r3, r2]
		return 0; // success
 8006e64:	2300      	movs	r3, #0
 8006e66:	e008      	b.n	8006e7a <HTTPSendWebSocketHandshakeResponse+0x122>
	}
	else // key generation failed
	{
		// Start Sending
		HTTPSendStr(pS, 400, "Key Failed");
 8006e68:	4a0c      	ldr	r2, [pc, #48]	; (8006e9c <HTTPSendWebSocketHandshakeResponse+0x144>)
 8006e6a:	23c8      	movs	r3, #200	; 0xc8
 8006e6c:	0059      	lsls	r1, r3, #1
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f7ff fd91 	bl	8006998 <HTTPSendStr>
		return -1; // failed
 8006e76:	2301      	movs	r3, #1
 8006e78:	425b      	negs	r3, r3
	}
}
 8006e7a:	0018      	movs	r0, r3
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b006      	add	sp, #24
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	0800b460 	.word	0x0800b460
 8006e88:	0800b234 	.word	0x0800b234
 8006e8c:	0800b24c 	.word	0x0800b24c
 8006e90:	0800b264 	.word	0x0800b264
 8006e94:	0800b27c 	.word	0x0800b27c
 8006e98:	0800b294 	.word	0x0800b294
 8006e9c:	0800b29c 	.word	0x0800b29c

08006ea0 <HTTPredirect>:

void HTTPredirect(HTTPRequestParseState *pS, const char* URI)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	char* buf = pS->response_header;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2280      	movs	r2, #128	; 0x80
 8006eae:	589b      	ldr	r3, [r3, r2]
 8006eb0:	60fb      	str	r3, [r7, #12]
	*buf = 0; // clear buffer
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	701a      	strb	r2, [r3, #0]
	// HTTP/1.1 302 Found
	// Location: /
	strcat(buf, HTTP_STR_VERSION);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	0018      	movs	r0, r3
 8006ebc:	f7f9 f92e 	bl	800011c <strlen>
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	001a      	movs	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	189a      	adds	r2, r3, r2
 8006ec8:	4b87      	ldr	r3, [pc, #540]	; (80070e8 <HTTPredirect+0x248>)
 8006eca:	0010      	movs	r0, r2
 8006ecc:	0019      	movs	r1, r3
 8006ece:	2309      	movs	r3, #9
 8006ed0:	001a      	movs	r2, r3
 8006ed2:	f003 ff55 	bl	800ad80 <memcpy>
	buf += strlen(HTTP_STR_VERSION);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	60fb      	str	r3, [r7, #12]
	strcat(buf, " 302");
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f7f9 f91c 	bl	800011c <strlen>
 8006ee4:	0003      	movs	r3, r0
 8006ee6:	001a      	movs	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	189a      	adds	r2, r3, r2
 8006eec:	4b7f      	ldr	r3, [pc, #508]	; (80070ec <HTTPredirect+0x24c>)
 8006eee:	0010      	movs	r0, r2
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	2305      	movs	r3, #5
 8006ef4:	001a      	movs	r2, r3
 8006ef6:	f003 ff43 	bl	800ad80 <memcpy>
	buf += 4;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	3304      	adds	r3, #4
 8006efe:	60fb      	str	r3, [r7, #12]
	strcat(buf, " Found");
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7f9 f90a 	bl	800011c <strlen>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	001a      	movs	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	189a      	adds	r2, r3, r2
 8006f10:	4b77      	ldr	r3, [pc, #476]	; (80070f0 <HTTPredirect+0x250>)
 8006f12:	0010      	movs	r0, r2
 8006f14:	0019      	movs	r1, r3
 8006f16:	2307      	movs	r3, #7
 8006f18:	001a      	movs	r2, r3
 8006f1a:	f003 ff31 	bl	800ad80 <memcpy>
	buf += 6;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3306      	adds	r3, #6
 8006f22:	60fb      	str	r3, [r7, #12]
	strcat(buf,HTTP_LINE_DELIM);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	0018      	movs	r0, r3
 8006f28:	f7f9 f8f8 	bl	800011c <strlen>
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	001a      	movs	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	189a      	adds	r2, r3, r2
 8006f34:	4b6f      	ldr	r3, [pc, #444]	; (80070f4 <HTTPredirect+0x254>)
 8006f36:	0010      	movs	r0, r2
 8006f38:	0019      	movs	r1, r3
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	001a      	movs	r2, r3
 8006f3e:	f003 ff1f 	bl	800ad80 <memcpy>
	buf +=2 ;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3302      	adds	r3, #2
 8006f46:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Connection: ");
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	0018      	movs	r0, r3
 8006f4c:	f7f9 f8e6 	bl	800011c <strlen>
 8006f50:	0003      	movs	r3, r0
 8006f52:	001a      	movs	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	189a      	adds	r2, r3, r2
 8006f58:	4b67      	ldr	r3, [pc, #412]	; (80070f8 <HTTPredirect+0x258>)
 8006f5a:	0010      	movs	r0, r2
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	230d      	movs	r3, #13
 8006f60:	001a      	movs	r2, r3
 8006f62:	f003 ff0d 	bl	800ad80 <memcpy>
	buf += 12;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	60fb      	str	r3, [r7, #12]
	if(pS->connection == CLOSED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	791b      	ldrb	r3, [r3, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d112      	bne.n	8006f9a <HTTPredirect+0xfa>
	{
		strcat(buf, "Closed");
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	0018      	movs	r0, r3
 8006f78:	f7f9 f8d0 	bl	800011c <strlen>
 8006f7c:	0003      	movs	r3, r0
 8006f7e:	001a      	movs	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	189a      	adds	r2, r3, r2
 8006f84:	4b5d      	ldr	r3, [pc, #372]	; (80070fc <HTTPredirect+0x25c>)
 8006f86:	0010      	movs	r0, r2
 8006f88:	0019      	movs	r1, r3
 8006f8a:	2307      	movs	r3, #7
 8006f8c:	001a      	movs	r2, r3
 8006f8e:	f003 fef7 	bl	800ad80 <memcpy>
		buf += 6;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3306      	adds	r3, #6
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	e011      	b.n	8006fbe <HTTPredirect+0x11e>
	}
	else
	{
		strcat(buf, "Keep-Alive");
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f7f9 f8bd 	bl	800011c <strlen>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	001a      	movs	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	189a      	adds	r2, r3, r2
 8006faa:	4b55      	ldr	r3, [pc, #340]	; (8007100 <HTTPredirect+0x260>)
 8006fac:	0010      	movs	r0, r2
 8006fae:	0019      	movs	r1, r3
 8006fb0:	230b      	movs	r3, #11
 8006fb2:	001a      	movs	r2, r3
 8006fb4:	f003 fee4 	bl	800ad80 <memcpy>
		buf += 10;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	330a      	adds	r3, #10
 8006fbc:	60fb      	str	r3, [r7, #12]
	}
	strcat(buf, HTTP_LINE_DELIM);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7f9 f8ab 	bl	800011c <strlen>
 8006fc6:	0003      	movs	r3, r0
 8006fc8:	001a      	movs	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	189a      	adds	r2, r3, r2
 8006fce:	4b49      	ldr	r3, [pc, #292]	; (80070f4 <HTTPredirect+0x254>)
 8006fd0:	0010      	movs	r0, r2
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	f003 fed2 	bl	800ad80 <memcpy>
	buf += 2;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3302      	adds	r3, #2
 8006fe0:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Content-Length: ");
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f7f9 f899 	bl	800011c <strlen>
 8006fea:	0003      	movs	r3, r0
 8006fec:	001a      	movs	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	189a      	adds	r2, r3, r2
 8006ff2:	4b44      	ldr	r3, [pc, #272]	; (8007104 <HTTPredirect+0x264>)
 8006ff4:	0010      	movs	r0, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	2311      	movs	r3, #17
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	f003 fec0 	bl	800ad80 <memcpy>
	buf += 16;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3310      	adds	r3, #16
 8007004:	60fb      	str	r3, [r7, #12]
	strcat(buf, "0");
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	0018      	movs	r0, r3
 800700a:	f7f9 f887 	bl	800011c <strlen>
 800700e:	0003      	movs	r3, r0
 8007010:	001a      	movs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	189a      	adds	r2, r3, r2
 8007016:	4b3c      	ldr	r3, [pc, #240]	; (8007108 <HTTPredirect+0x268>)
 8007018:	0010      	movs	r0, r2
 800701a:	0019      	movs	r1, r3
 800701c:	2302      	movs	r3, #2
 800701e:	001a      	movs	r2, r3
 8007020:	f003 feae 	bl	800ad80 <memcpy>
	buf += 1;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3301      	adds	r3, #1
 8007028:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	0018      	movs	r0, r3
 800702e:	f7f9 f875 	bl	800011c <strlen>
 8007032:	0003      	movs	r3, r0
 8007034:	001a      	movs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	189a      	adds	r2, r3, r2
 800703a:	4b2e      	ldr	r3, [pc, #184]	; (80070f4 <HTTPredirect+0x254>)
 800703c:	0010      	movs	r0, r2
 800703e:	0019      	movs	r1, r3
 8007040:	2303      	movs	r3, #3
 8007042:	001a      	movs	r2, r3
 8007044:	f003 fe9c 	bl	800ad80 <memcpy>
	buf += 2;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3302      	adds	r3, #2
 800704c:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Location: ");
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	0018      	movs	r0, r3
 8007052:	f7f9 f863 	bl	800011c <strlen>
 8007056:	0003      	movs	r3, r0
 8007058:	001a      	movs	r2, r3
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	189a      	adds	r2, r3, r2
 800705e:	4b2b      	ldr	r3, [pc, #172]	; (800710c <HTTPredirect+0x26c>)
 8007060:	0010      	movs	r0, r2
 8007062:	0019      	movs	r1, r3
 8007064:	230b      	movs	r3, #11
 8007066:	001a      	movs	r2, r3
 8007068:	f003 fe8a 	bl	800ad80 <memcpy>
	buf+= 10;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	330a      	adds	r3, #10
 8007070:	60fb      	str	r3, [r7, #12]
	strcat(buf, URI);
 8007072:	683a      	ldr	r2, [r7, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	0011      	movs	r1, r2
 8007078:	0018      	movs	r0, r3
 800707a:	f003 fe92 	bl	800ada2 <strcat>
	strcat(buf, HTTP_LINE_DELIM);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	0018      	movs	r0, r3
 8007082:	f7f9 f84b 	bl	800011c <strlen>
 8007086:	0003      	movs	r3, r0
 8007088:	001a      	movs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	189a      	adds	r2, r3, r2
 800708e:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <HTTPredirect+0x254>)
 8007090:	0010      	movs	r0, r2
 8007092:	0019      	movs	r1, r3
 8007094:	2303      	movs	r3, #3
 8007096:	001a      	movs	r2, r3
 8007098:	f003 fe72 	bl	800ad80 <memcpy>
	strcat(buf, HTTP_LINE_DELIM);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	0018      	movs	r0, r3
 80070a0:	f7f9 f83c 	bl	800011c <strlen>
 80070a4:	0003      	movs	r3, r0
 80070a6:	001a      	movs	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	189a      	adds	r2, r3, r2
 80070ac:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <HTTPredirect+0x254>)
 80070ae:	0010      	movs	r0, r2
 80070b0:	0019      	movs	r1, r3
 80070b2:	2303      	movs	r3, #3
 80070b4:	001a      	movs	r2, r3
 80070b6:	f003 fe63 	bl	800ad80 <memcpy>
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2280      	movs	r2, #128	; 0x80
 80070be:	589b      	ldr	r3, [r3, r2]
 80070c0:	0018      	movs	r0, r3
 80070c2:	f7f9 f82b 	bl	800011c <strlen>
 80070c6:	0003      	movs	r3, r0
 80070c8:	b299      	uxth	r1, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	227e      	movs	r2, #126	; 0x7e
 80070ce:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2284      	movs	r2, #132	; 0x84
 80070d4:	2100      	movs	r1, #0
 80070d6:	5299      	strh	r1, [r3, r2]
	pS->response_stage = RESPONSE_PREPARED;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	227c      	movs	r2, #124	; 0x7c
 80070dc:	2101      	movs	r1, #1
 80070de:	5499      	strb	r1, [r3, r2]
}
 80070e0:	46c0      	nop			; (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b004      	add	sp, #16
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	0800b460 	.word	0x0800b460
 80070ec:	0800b2a8 	.word	0x0800b2a8
 80070f0:	0800b2b0 	.word	0x0800b2b0
 80070f4:	0800b454 	.word	0x0800b454
 80070f8:	0800b1b0 	.word	0x0800b1b0
 80070fc:	0800b2b8 	.word	0x0800b2b8
 8007100:	0800b2c0 	.word	0x0800b2c0
 8007104:	0800b20c 	.word	0x0800b20c
 8007108:	0800b2cc 	.word	0x0800b2cc
 800710c:	0800b2d0 	.word	0x0800b2d0

08007110 <HTTPonNotFound>:


void HTTPonNotFound(HTTPRequestParseState *pS)
{
 8007110:	b5b0      	push	{r4, r5, r7, lr}
 8007112:	b0a2      	sub	sp, #136	; 0x88
 8007114:	af02      	add	r7, sp, #8
 8007116:	6078      	str	r0, [r7, #4]
	char s_tmp[MAX_LEN_URI + 4];
	static char s_notfound[MAX_LEN_URI+16];
	// look for file
	if(FS_exists(&FS, pS->URI))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	1d5a      	adds	r2, r3, #5
 800711c:	4b42      	ldr	r3, [pc, #264]	; (8007228 <HTTPonNotFound+0x118>)
 800711e:	0011      	movs	r1, r2
 8007120:	0018      	movs	r0, r3
 8007122:	f7fe fdeb 	bl	8005cfc <FS_exists>
 8007126:	1e03      	subs	r3, r0, #0
 8007128:	d01e      	beq.n	8007168 <HTTPonNotFound+0x58>
	{
		FSfile_typedef file = FS_open(&FS, pS->URI);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	1d5a      	adds	r2, r3, #5
 800712e:	2418      	movs	r4, #24
 8007130:	193b      	adds	r3, r7, r4
 8007132:	493d      	ldr	r1, [pc, #244]	; (8007228 <HTTPonNotFound+0x118>)
 8007134:	0018      	movs	r0, r3
 8007136:	f7fe fd91 	bl	8005c5c <FS_open>
		if(file.path)
 800713a:	193b      	adds	r3, r7, r4
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d04e      	beq.n	80071e0 <HTTPonNotFound+0xd0>
		{
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	1d5a      	adds	r2, r3, #5
 8007146:	2468      	movs	r4, #104	; 0x68
 8007148:	193b      	adds	r3, r7, r4
 800714a:	4937      	ldr	r1, [pc, #220]	; (8007228 <HTTPonNotFound+0x118>)
 800714c:	0018      	movs	r0, r3
 800714e:	f7fe fd85 	bl	8005c5c <FS_open>
 8007152:	193b      	adds	r3, r7, r4
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	466a      	mov	r2, sp
 8007158:	6899      	ldr	r1, [r3, #8]
 800715a:	6011      	str	r1, [r2, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	21c8      	movs	r1, #200	; 0xc8
 8007162:	f7ff fa8d 	bl	8006680 <HTTPSendFile>
 8007166:	e05c      	b.n	8007222 <HTTPonNotFound+0x112>
			return;
		}
	}
	else
	{
		strcpy(s_tmp, pS->URI);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	1d5a      	adds	r2, r3, #5
 800716c:	2424      	movs	r4, #36	; 0x24
 800716e:	193b      	adds	r3, r7, r4
 8007170:	0011      	movs	r1, r2
 8007172:	0018      	movs	r0, r3
 8007174:	f003 fe30 	bl	800add8 <strcpy>
		strcat(s_tmp, ".gz");
 8007178:	193b      	adds	r3, r7, r4
 800717a:	0018      	movs	r0, r3
 800717c:	f7f8 ffce 	bl	800011c <strlen>
 8007180:	0003      	movs	r3, r0
 8007182:	001a      	movs	r2, r3
 8007184:	193b      	adds	r3, r7, r4
 8007186:	189a      	adds	r2, r3, r2
 8007188:	4b28      	ldr	r3, [pc, #160]	; (800722c <HTTPonNotFound+0x11c>)
 800718a:	0010      	movs	r0, r2
 800718c:	0019      	movs	r1, r3
 800718e:	2304      	movs	r3, #4
 8007190:	001a      	movs	r2, r3
 8007192:	f003 fdf5 	bl	800ad80 <memcpy>
		if(FS_exists(&FS, s_tmp))
 8007196:	193a      	adds	r2, r7, r4
 8007198:	4b23      	ldr	r3, [pc, #140]	; (8007228 <HTTPonNotFound+0x118>)
 800719a:	0011      	movs	r1, r2
 800719c:	0018      	movs	r0, r3
 800719e:	f7fe fdad 	bl	8005cfc <FS_exists>
 80071a2:	1e03      	subs	r3, r0, #0
 80071a4:	d01c      	beq.n	80071e0 <HTTPonNotFound+0xd0>
		{
			FSfile_typedef file = FS_open(&FS, s_tmp);
 80071a6:	250c      	movs	r5, #12
 80071a8:	197b      	adds	r3, r7, r5
 80071aa:	193a      	adds	r2, r7, r4
 80071ac:	491e      	ldr	r1, [pc, #120]	; (8007228 <HTTPonNotFound+0x118>)
 80071ae:	0018      	movs	r0, r3
 80071b0:	f7fe fd54 	bl	8005c5c <FS_open>
			if(file.path)
 80071b4:	197b      	adds	r3, r7, r5
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d011      	beq.n	80071e0 <HTTPonNotFound+0xd0>
			{
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 80071bc:	2574      	movs	r5, #116	; 0x74
 80071be:	197b      	adds	r3, r7, r5
 80071c0:	193a      	adds	r2, r7, r4
 80071c2:	4919      	ldr	r1, [pc, #100]	; (8007228 <HTTPonNotFound+0x118>)
 80071c4:	0018      	movs	r0, r3
 80071c6:	f7fe fd49 	bl	8005c5c <FS_open>
 80071ca:	197b      	adds	r3, r7, r5
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	466a      	mov	r2, sp
 80071d0:	6899      	ldr	r1, [r3, #8]
 80071d2:	6011      	str	r1, [r2, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	21c8      	movs	r1, #200	; 0xc8
 80071da:	f7ff fa51 	bl	8006680 <HTTPSendFile>
 80071de:	e020      	b.n	8007222 <HTTPonNotFound+0x112>
				return;
			}
		}
	}
	strcpy(s_notfound, "Not Found: ");
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <HTTPonNotFound+0x120>)
 80071e2:	4a14      	ldr	r2, [pc, #80]	; (8007234 <HTTPonNotFound+0x124>)
 80071e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80071e6:	c313      	stmia	r3!, {r0, r1, r4}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	1d59      	adds	r1, r3, #5
 80071ec:	4b10      	ldr	r3, [pc, #64]	; (8007230 <HTTPonNotFound+0x120>)
 80071ee:	2240      	movs	r2, #64	; 0x40
 80071f0:	0018      	movs	r0, r3
 80071f2:	f003 fe1f 	bl	800ae34 <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 80071f6:	4b0e      	ldr	r3, [pc, #56]	; (8007230 <HTTPonNotFound+0x120>)
 80071f8:	0018      	movs	r0, r3
 80071fa:	f7f8 ff8f 	bl	800011c <strlen>
 80071fe:	0003      	movs	r3, r0
 8007200:	001a      	movs	r2, r3
 8007202:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <HTTPonNotFound+0x120>)
 8007204:	18d2      	adds	r2, r2, r3
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <HTTPonNotFound+0x128>)
 8007208:	0010      	movs	r0, r2
 800720a:	0019      	movs	r1, r3
 800720c:	2303      	movs	r3, #3
 800720e:	001a      	movs	r2, r3
 8007210:	f003 fdb6 	bl	800ad80 <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 8007214:	4a06      	ldr	r2, [pc, #24]	; (8007230 <HTTPonNotFound+0x120>)
 8007216:	23ca      	movs	r3, #202	; 0xca
 8007218:	0059      	lsls	r1, r3, #1
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	0018      	movs	r0, r3
 800721e:	f7ff fbbb 	bl	8006998 <HTTPSendStr>
}
 8007222:	46bd      	mov	sp, r7
 8007224:	b020      	add	sp, #128	; 0x80
 8007226:	bdb0      	pop	{r4, r5, r7, pc}
 8007228:	20001400 	.word	0x20001400
 800722c:	0800b1a4 	.word	0x0800b1a4
 8007230:	20000e3c 	.word	0x20000e3c
 8007234:	0800b2dc 	.word	0x0800b2dc
 8007238:	0800b454 	.word	0x0800b454

0800723c <HTTPHandle>:



void HTTPHandle(CH395_TypeDef *pch395) // call on interrupt
{
 800723c:	b5b0      	push	{r4, r5, r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]

	int8_t i = pch395->SOCK_responding; // NOTE: number:i begins from 1
 8007244:	211b      	movs	r1, #27
 8007246:	187b      	adds	r3, r7, r1
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	7e92      	ldrb	r2, [r2, #26]
 800724c:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	if(i > 0)
 800724e:	000a      	movs	r2, r1
 8007250:	18bb      	adds	r3, r7, r2
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b25b      	sxtb	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	dc00      	bgt.n	800725c <HTTPHandle+0x20>
 800725a:	e1b3      	b.n	80075c4 <HTTPHandle+0x388>
	{
		HTTPRequestParseState *pS = &parseStates[i-1];
 800725c:	18bb      	adds	r3, r7, r2
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b25b      	sxtb	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	22a4      	movs	r2, #164	; 0xa4
 8007266:	435a      	muls	r2, r3
 8007268:	4bb4      	ldr	r3, [pc, #720]	; (800753c <HTTPHandle+0x300>)
 800726a:	18d3      	adds	r3, r2, r3
 800726c:	617b      	str	r3, [r7, #20]
		activateHTTPParseState(pS); // renew the timeout counter when data received
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	0018      	movs	r0, r3
 8007272:	f7ff f93f 	bl	80064f4 <activateHTTPParseState>
		// STAGE 0: Socket recv has a request, but no response under preparation, can prepare a new response
		if(pS->ready_for_making_response  && pS->response_stage == RESPONSE_NOT_PREPARED)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	228c      	movs	r2, #140	; 0x8c
 800727a:	5c9b      	ldrb	r3, [r3, r2]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d054      	beq.n	800732a <HTTPHandle+0xee>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	227c      	movs	r2, #124	; 0x7c
 8007284:	5c9b      	ldrb	r3, [r3, r2]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d14f      	bne.n	800732a <HTTPHandle+0xee>
		{
			// CASE 0: handshake to Websocket upgrade request,
			if((pS->connection == UPGRADED_WS) && (pS->ws_handshaked == WS_WAIT_FOR_HANDSHAKE))
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	791b      	ldrb	r3, [r3, #4]
 800728e:	2b02      	cmp	r3, #2
 8007290:	d119      	bne.n	80072c6 <HTTPHandle+0x8a>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	228e      	movs	r2, #142	; 0x8e
 8007296:	5c9b      	ldrb	r3, [r3, r2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d114      	bne.n	80072c6 <HTTPHandle+0x8a>
			{
				// client key is stored in cookies buffer
				int r = HTTPSendWebSocketHandshakeResponse(pS, pS->cookies, strlen(pS->cookies));
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	335c      	adds	r3, #92	; 0x5c
 80072a0:	001c      	movs	r4, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	335c      	adds	r3, #92	; 0x5c
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7f8 ff38 	bl	800011c <strlen>
 80072ac:	0002      	movs	r2, r0
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0021      	movs	r1, r4
 80072b2:	0018      	movs	r0, r3
 80072b4:	f7ff fd50 	bl	8006d58 <HTTPSendWebSocketHandshakeResponse>
 80072b8:	0003      	movs	r3, r0
 80072ba:	613b      	str	r3, [r7, #16]
				pS->ws_handshaked = WS_HANDSHAKED;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	228e      	movs	r2, #142	; 0x8e
 80072c0:	2101      	movs	r1, #1
 80072c2:	5499      	strb	r1, [r3, r2]
			{
 80072c4:	e031      	b.n	800732a <HTTPHandle+0xee>
			}
			// CASE 1: respond to normal HTTP request
			// or WS requests after handshake
			else
			{
				for(j=0; j < NUM_HTTP_RESPONDERS; ++j)
 80072c6:	231f      	movs	r3, #31
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	e01e      	b.n	800730e <HTTPHandle+0xd2>
				{
					if(strncmp(pS->URI, HTTPWSResponders[j].uri, MAX_LEN_URI) == 0) // matches
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1d58      	adds	r0, r3, #5
 80072d4:	241f      	movs	r4, #31
 80072d6:	193b      	adds	r3, r7, r4
 80072d8:	781a      	ldrb	r2, [r3, #0]
 80072da:	4b99      	ldr	r3, [pc, #612]	; (8007540 <HTTPHandle+0x304>)
 80072dc:	00d2      	lsls	r2, r2, #3
 80072de:	58d3      	ldr	r3, [r2, r3]
 80072e0:	2240      	movs	r2, #64	; 0x40
 80072e2:	0019      	movs	r1, r3
 80072e4:	f003 fdbc 	bl	800ae60 <strncmp>
 80072e8:	1e03      	subs	r3, r0, #0
 80072ea:	d10a      	bne.n	8007302 <HTTPHandle+0xc6>
					{
						(HTTPWSResponders[j].func)(pS); // call HTTPResponder service function
 80072ec:	193b      	adds	r3, r7, r4
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	4a93      	ldr	r2, [pc, #588]	; (8007540 <HTTPHandle+0x304>)
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	18d3      	adds	r3, r2, r3
 80072f6:	3304      	adds	r3, #4
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	0010      	movs	r0, r2
 80072fe:	4798      	blx	r3
						break;
 8007300:	e00a      	b.n	8007318 <HTTPHandle+0xdc>
				for(j=0; j < NUM_HTTP_RESPONDERS; ++j)
 8007302:	221f      	movs	r2, #31
 8007304:	18bb      	adds	r3, r7, r2
 8007306:	18ba      	adds	r2, r7, r2
 8007308:	7812      	ldrb	r2, [r2, #0]
 800730a:	3201      	adds	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	231f      	movs	r3, #31
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d9db      	bls.n	80072d0 <HTTPHandle+0x94>
					}
				}
				if(j >= NUM_HTTP_RESPONDERS) // Resource not found
 8007318:	231f      	movs	r3, #31
 800731a:	18fb      	adds	r3, r7, r3
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d903      	bls.n	800732a <HTTPHandle+0xee>
				{
					HTTPonNotFound(pS);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	0018      	movs	r0, r3
 8007326:	f7ff fef3 	bl	8007110 <HTTPonNotFound>

		// STAGE 1 : CH395 chip is free for transmission,
		// judge if response has been prepared for transmission
		// if the CHIP is free, set off the transmission
		// otherwise next time
		if(((pch395->TX_available & (1 << i)) != 0) && (pS->ready_for_making_response))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7edb      	ldrb	r3, [r3, #27]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	001a      	movs	r2, r3
 8007332:	231b      	movs	r3, #27
 8007334:	18fb      	adds	r3, r7, r3
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	b25b      	sxtb	r3, r3
 800733a:	411a      	asrs	r2, r3
 800733c:	0013      	movs	r3, r2
 800733e:	2201      	movs	r2, #1
 8007340:	4013      	ands	r3, r2
 8007342:	d100      	bne.n	8007346 <HTTPHandle+0x10a>
 8007344:	e114      	b.n	8007570 <HTTPHandle+0x334>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	228c      	movs	r2, #140	; 0x8c
 800734a:	5c9b      	ldrb	r3, [r3, r2]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d100      	bne.n	8007352 <HTTPHandle+0x116>
 8007350:	e10e      	b.n	8007570 <HTTPHandle+0x334>
		{
			// CASE 1: parser has prepared the response content,
			// start the process of data transmission immediately
			if(pS->response_stage == RESPONSE_PREPARED)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	227c      	movs	r2, #124	; 0x7c
 8007356:	5c9b      	ldrb	r3, [r3, r2]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d000      	beq.n	800735e <HTTPHandle+0x122>
 800735c:	e091      	b.n	8007482 <HTTPHandle+0x246>
			{
				uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	227e      	movs	r2, #126	; 0x7e
 8007362:	5a9a      	ldrh	r2, [r3, r2]
 8007364:	200e      	movs	r0, #14
 8007366:	183b      	adds	r3, r7, r0
 8007368:	4976      	ldr	r1, [pc, #472]	; (8007544 <HTTPHandle+0x308>)
 800736a:	1a8a      	subs	r2, r1, r2
 800736c:	801a      	strh	r2, [r3, #0]
				uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2284      	movs	r2, #132	; 0x84
 8007372:	5a99      	ldrh	r1, [r3, r2]
 8007374:	230c      	movs	r3, #12
 8007376:	18fa      	adds	r2, r7, r3
 8007378:	183b      	adds	r3, r7, r0
 800737a:	1c0c      	adds	r4, r1, #0
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b298      	uxth	r0, r3
 8007380:	b2a1      	uxth	r1, r4
 8007382:	4288      	cmp	r0, r1
 8007384:	d900      	bls.n	8007388 <HTTPHandle+0x14c>
 8007386:	1c23      	adds	r3, r4, #0
 8007388:	8013      	strh	r3, [r2, #0]
						? (pS->len_response_content_remain)
								: (max_len_content));
				CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 800738a:	251b      	movs	r5, #27
 800738c:	197b      	adds	r3, r7, r5
 800738e:	7818      	ldrb	r0, [r3, #0]
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	227e      	movs	r2, #126	; 0x7e
 8007394:	5a9a      	ldrh	r2, [r3, r2]
 8007396:	240c      	movs	r4, #12
 8007398:	193b      	adds	r3, r7, r4
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	0019      	movs	r1, r3
 80073a2:	f7fe f8a1 	bl	80054e8 <CH395StartSendingData>
				CH395ContinueSendingData((const uint8_t*)pS->response_header, pS->len_response_header);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2280      	movs	r2, #128	; 0x80
 80073aa:	589a      	ldr	r2, [r3, r2]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	217e      	movs	r1, #126	; 0x7e
 80073b0:	5a5b      	ldrh	r3, [r3, r1]
 80073b2:	0019      	movs	r1, r3
 80073b4:	0010      	movs	r0, r2
 80073b6:	f7fe f8bd 	bl	8005534 <CH395ContinueSendingData>
				CH395ContinueSendingData((const uint8_t*)pS->response_content, len_content_this_time);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2288      	movs	r2, #136	; 0x88
 80073be:	589a      	ldr	r2, [r3, r2]
 80073c0:	193b      	adds	r3, r7, r4
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	0019      	movs	r1, r3
 80073c6:	0010      	movs	r0, r2
 80073c8:	f7fe f8b4 	bl	8005534 <CH395ContinueSendingData>
				CH395Complete();
 80073cc:	f7fe f8d8 	bl	8005580 <CH395Complete>
				ch395.TX_available &= ~(1<<i); // invalidate TX flag, will be validated again when TX DONE interrupt
 80073d0:	4b5d      	ldr	r3, [pc, #372]	; (8007548 <HTTPHandle+0x30c>)
 80073d2:	7edb      	ldrb	r3, [r3, #27]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	0028      	movs	r0, r5
 80073da:	183a      	adds	r2, r7, r0
 80073dc:	7812      	ldrb	r2, [r2, #0]
 80073de:	b252      	sxtb	r2, r2
 80073e0:	2101      	movs	r1, #1
 80073e2:	4091      	lsls	r1, r2
 80073e4:	000a      	movs	r2, r1
 80073e6:	b252      	sxtb	r2, r2
 80073e8:	43d2      	mvns	r2, r2
 80073ea:	b252      	sxtb	r2, r2
 80073ec:	4013      	ands	r3, r2
 80073ee:	b25b      	sxtb	r3, r3
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	4b55      	ldr	r3, [pc, #340]	; (8007548 <HTTPHandle+0x30c>)
 80073f4:	76da      	strb	r2, [r3, #27]
				pS->len_response_content_remain -= len_content_this_time;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2284      	movs	r2, #132	; 0x84
 80073fa:	5a9a      	ldrh	r2, [r3, r2]
 80073fc:	193b      	adds	r3, r7, r4
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	b299      	uxth	r1, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2284      	movs	r2, #132	; 0x84
 8007408:	5299      	strh	r1, [r3, r2]
				pS->response_content += len_content_this_time;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2288      	movs	r2, #136	; 0x88
 800740e:	589a      	ldr	r2, [r3, r2]
 8007410:	193b      	adds	r3, r7, r4
 8007412:	881b      	ldrh	r3, [r3, #0]
 8007414:	18d2      	adds	r2, r2, r3
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2188      	movs	r1, #136	; 0x88
 800741a:	505a      	str	r2, [r3, r1]
				if(pS->len_response_content_remain == 0) // all content completely sent this time
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2284      	movs	r2, #132	; 0x84
 8007420:	5a9b      	ldrh	r3, [r3, r2]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d128      	bne.n	8007478 <HTTPHandle+0x23c>
				{
					if(pS->connection == CLOSED)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	791b      	ldrb	r3, [r3, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <HTTPHandle+0x206>
					{
						HTTPclose(i);
 800742e:	183b      	adds	r3, r7, r0
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	0018      	movs	r0, r3
 8007434:	f000 f906 	bl	8007644 <HTTPclose>
						resetHTTPParseState(pS);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	0018      	movs	r0, r3
 800743c:	f7ff f808 	bl	8006450 <resetHTTPParseState>
 8007440:	e013      	b.n	800746a <HTTPHandle+0x22e>
					}
					else if(pS->ws_handshaked == WS_TO_CLOSE)
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	228e      	movs	r2, #142	; 0x8e
 8007446:	5c9b      	ldrb	r3, [r3, r2]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d104      	bne.n	8007456 <HTTPHandle+0x21a>
					{
						pS->ws_handshaked = WS_CLOSED;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	228e      	movs	r2, #142	; 0x8e
 8007450:	2103      	movs	r1, #3
 8007452:	5499      	strb	r1, [r3, r2]
 8007454:	e009      	b.n	800746a <HTTPHandle+0x22e>
					}
					else
					{
						HTTPclose_for_long_connection(i);
 8007456:	231b      	movs	r3, #27
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	0018      	movs	r0, r3
 800745e:	f000 f92f 	bl	80076c0 <HTTPclose_for_long_connection>
						resetHTTPParseState_for_long_connection(pS);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	0018      	movs	r0, r3
 8007466:	f7ff f823 	bl	80064b0 <resetHTTPParseState_for_long_connection>
					}
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 800746a:	f000 f8b1 	bl	80075d0 <getNextSock>
 800746e:	0003      	movs	r3, r0
 8007470:	001a      	movs	r2, r3
 8007472:	4b35      	ldr	r3, [pc, #212]	; (8007548 <HTTPHandle+0x30c>)
 8007474:	769a      	strb	r2, [r3, #26]
 8007476:	e07b      	b.n	8007570 <HTTPHandle+0x334>
				}
				else // content remained to be sent next time
				{
					pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	227c      	movs	r2, #124	; 0x7c
 800747c:	2102      	movs	r1, #2
 800747e:	5499      	strb	r1, [r3, r2]
 8007480:	e076      	b.n	8007570 <HTTPHandle+0x334>
				}
			}
			// CASE2: previous response has remaining parts to be done, continue the sending process
			else if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	227c      	movs	r2, #124	; 0x7c
 8007486:	5c9b      	ldrb	r3, [r3, r2]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d000      	beq.n	800748e <HTTPHandle+0x252>
 800748c:	e070      	b.n	8007570 <HTTPHandle+0x334>
			{
				uint16_t len = pS->len_response_content_remain;
 800748e:	241c      	movs	r4, #28
 8007490:	193b      	adds	r3, r7, r4
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	2184      	movs	r1, #132	; 0x84
 8007496:	5a52      	ldrh	r2, [r2, r1]
 8007498:	801a      	strh	r2, [r3, #0]
				CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 800749a:	231b      	movs	r3, #27
 800749c:	18fb      	adds	r3, r7, r3
 800749e:	7818      	ldrb	r0, [r3, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	2288      	movs	r2, #136	; 0x88
 80074a4:	5899      	ldr	r1, [r3, r2]
 80074a6:	193b      	adds	r3, r7, r4
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	4a28      	ldr	r2, [pc, #160]	; (800754c <HTTPHandle+0x310>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d904      	bls.n	80074ba <HTTPHandle+0x27e>
 80074b0:	193b      	adds	r3, r7, r4
 80074b2:	4a24      	ldr	r2, [pc, #144]	; (8007544 <HTTPHandle+0x308>)
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <HTTPHandle+0x308>)
 80074b8:	e002      	b.n	80074c0 <HTTPHandle+0x284>
 80074ba:	231c      	movs	r3, #28
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	001a      	movs	r2, r3
 80074c2:	f7fd ff9f 	bl	8005404 <CH395SendData>
				ch395.TX_available &= ~(1<<i); // invalidate TX flag, will be validated again when TX DONE interrupt
 80074c6:	4b20      	ldr	r3, [pc, #128]	; (8007548 <HTTPHandle+0x30c>)
 80074c8:	7edb      	ldrb	r3, [r3, #27]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	b25b      	sxtb	r3, r3
 80074ce:	201b      	movs	r0, #27
 80074d0:	183a      	adds	r2, r7, r0
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	b252      	sxtb	r2, r2
 80074d6:	2101      	movs	r1, #1
 80074d8:	4091      	lsls	r1, r2
 80074da:	000a      	movs	r2, r1
 80074dc:	b252      	sxtb	r2, r2
 80074de:	43d2      	mvns	r2, r2
 80074e0:	b252      	sxtb	r2, r2
 80074e2:	4013      	ands	r3, r2
 80074e4:	b25b      	sxtb	r3, r3
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	4b17      	ldr	r3, [pc, #92]	; (8007548 <HTTPHandle+0x30c>)
 80074ea:	76da      	strb	r2, [r3, #27]
				// move the cursor to record how much content has been transmitted
				pS->len_response_content_remain -= len;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	2284      	movs	r2, #132	; 0x84
 80074f0:	5a9a      	ldrh	r2, [r3, r2]
 80074f2:	241c      	movs	r4, #28
 80074f4:	193b      	adds	r3, r7, r4
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	b299      	uxth	r1, r3
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2284      	movs	r2, #132	; 0x84
 8007500:	5299      	strh	r1, [r3, r2]
				pS->response_content += len; // move the cursor
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2288      	movs	r2, #136	; 0x88
 8007506:	589a      	ldr	r2, [r3, r2]
 8007508:	193b      	adds	r3, r7, r4
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	18d2      	adds	r2, r2, r3
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	2188      	movs	r1, #136	; 0x88
 8007512:	505a      	str	r2, [r3, r1]
				// judge if transmission has finished
				if(pS->len_response_content_remain == 0)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2284      	movs	r2, #132	; 0x84
 8007518:	5a9b      	ldrh	r3, [r3, r2]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d128      	bne.n	8007570 <HTTPHandle+0x334>
				{
					if(pS->connection == CLOSED)
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	791b      	ldrb	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d114      	bne.n	8007550 <HTTPHandle+0x314>
					{
						HTTPclose(i);
 8007526:	183b      	adds	r3, r7, r0
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	0018      	movs	r0, r3
 800752c:	f000 f88a 	bl	8007644 <HTTPclose>
						resetHTTPParseState(pS);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	0018      	movs	r0, r3
 8007534:	f7fe ff8c 	bl	8006450 <resetHTTPParseState>
 8007538:	e014      	b.n	8007564 <HTTPHandle+0x328>
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	200008c0 	.word	0x200008c0
 8007540:	20000638 	.word	0x20000638
 8007544:	00000546 	.word	0x00000546
 8007548:	20000010 	.word	0x20000010
 800754c:	00000545 	.word	0x00000545
					}
					else
					{
						HTTPclose_for_long_connection(i);
 8007550:	231b      	movs	r3, #27
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	0018      	movs	r0, r3
 8007558:	f000 f8b2 	bl	80076c0 <HTTPclose_for_long_connection>
						resetHTTPParseState_for_long_connection(pS);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	0018      	movs	r0, r3
 8007560:	f7fe ffa6 	bl	80064b0 <resetHTTPParseState_for_long_connection>
					}
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 8007564:	f000 f834 	bl	80075d0 <getNextSock>
 8007568:	0003      	movs	r3, r0
 800756a:	001a      	movs	r2, r3
 800756c:	4b17      	ldr	r3, [pc, #92]	; (80075cc <HTTPHandle+0x390>)
 800756e:	769a      	strb	r2, [r3, #26]
				}
			}
		}

		// Iterate the next socket
		if((pS->sock_index == i) && (!pS->ready_for_making_response))
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	228d      	movs	r2, #141	; 0x8d
 8007574:	5c9b      	ldrb	r3, [r3, r2]
 8007576:	001a      	movs	r2, r3
 8007578:	241b      	movs	r4, #27
 800757a:	193b      	adds	r3, r7, r4
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b25b      	sxtb	r3, r3
 8007580:	429a      	cmp	r2, r3
 8007582:	d11f      	bne.n	80075c4 <HTTPHandle+0x388>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	228c      	movs	r2, #140	; 0x8c
 8007588:	5c9b      	ldrb	r3, [r3, r2]
 800758a:	2201      	movs	r2, #1
 800758c:	4053      	eors	r3, r2
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d017      	beq.n	80075c4 <HTTPHandle+0x388>
		{
			ch395.SOCK_responding = getNextSock();
 8007594:	f000 f81c 	bl	80075d0 <getNextSock>
 8007598:	0003      	movs	r3, r0
 800759a:	001a      	movs	r2, r3
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <HTTPHandle+0x390>)
 800759e:	769a      	strb	r2, [r3, #26]
			// close the connection if the HTTP request is not long-lasting

			if((pS->connection == CLOSED))
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	791b      	ldrb	r3, [r3, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10d      	bne.n	80075c4 <HTTPHandle+0x388>
			{
				CH395TCPDisconnect(i);
 80075a8:	193b      	adds	r3, r7, r4
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	0018      	movs	r0, r3
 80075ae:	f7fe f919 	bl	80057e4 <CH395TCPDisconnect>
				HTTPclose(i);
 80075b2:	193b      	adds	r3, r7, r4
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	0018      	movs	r0, r3
 80075b8:	f000 f844 	bl	8007644 <HTTPclose>
				resetHTTPParseState(pS);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	0018      	movs	r0, r3
 80075c0:	f7fe ff46 	bl	8006450 <resetHTTPParseState>
			}


		}
	}
}
 80075c4:	46c0      	nop			; (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	b008      	add	sp, #32
 80075ca:	bdb0      	pop	{r4, r5, r7, pc}
 80075cc:	20000010 	.word	0x20000010

080075d0 <getNextSock>:
#endif


int8_t getNextSock()
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
	int8_t j;
	for(j=1; j < NUM_SOCKETS; ++j)
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	2201      	movs	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	e022      	b.n	8007624 <getNextSock+0x54>
	{
		if(parseStates[j-1].ready_for_making_response && (ch395.socket_connected & (1 << j)))
 80075de:	1dfb      	adds	r3, r7, #7
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4a15      	ldr	r2, [pc, #84]	; (800763c <getNextSock+0x6c>)
 80075e8:	218c      	movs	r1, #140	; 0x8c
 80075ea:	20a4      	movs	r0, #164	; 0xa4
 80075ec:	4343      	muls	r3, r0
 80075ee:	18d3      	adds	r3, r2, r3
 80075f0:	185b      	adds	r3, r3, r1
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00f      	beq.n	8007618 <getNextSock+0x48>
 80075f8:	4b11      	ldr	r3, [pc, #68]	; (8007640 <getNextSock+0x70>)
 80075fa:	7e1b      	ldrb	r3, [r3, #24]
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	001a      	movs	r2, r3
 8007600:	1dfb      	adds	r3, r7, #7
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	b25b      	sxtb	r3, r3
 8007606:	411a      	asrs	r2, r3
 8007608:	0013      	movs	r3, r2
 800760a:	2201      	movs	r2, #1
 800760c:	4013      	ands	r3, r2
 800760e:	d003      	beq.n	8007618 <getNextSock+0x48>
		{
			return j;
 8007610:	1dfb      	adds	r3, r7, #7
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	b25b      	sxtb	r3, r3
 8007616:	e00c      	b.n	8007632 <getNextSock+0x62>
	for(j=1; j < NUM_SOCKETS; ++j)
 8007618:	1dfb      	adds	r3, r7, #7
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	b2da      	uxtb	r2, r3
 8007620:	1dfb      	adds	r3, r7, #7
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	1dfb      	adds	r3, r7, #7
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b25b      	sxtb	r3, r3
 800762a:	2b07      	cmp	r3, #7
 800762c:	ddd7      	ble.n	80075de <getNextSock+0xe>
		}
	}
	return -1;
 800762e:	2301      	movs	r3, #1
 8007630:	425b      	negs	r3, r3
}
 8007632:	0018      	movs	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	b002      	add	sp, #8
 8007638:	bd80      	pop	{r7, pc}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	200008c0 	.word	0x200008c0
 8007640:	20000010 	.word	0x20000010

08007644 <HTTPclose>:

void HTTPclose(uint8_t i) // Sock Index to disconnect starting from 1
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	0002      	movs	r2, r0
 800764c:	1dfb      	adds	r3, r7, #7
 800764e:	701a      	strb	r2, [r3, #0]
	ch395.RX_received &= ~(1 << i);
 8007650:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <HTTPclose+0x74>)
 8007652:	7e5b      	ldrb	r3, [r3, #25]
 8007654:	b2db      	uxtb	r3, r3
 8007656:	b25b      	sxtb	r3, r3
 8007658:	1dfa      	adds	r2, r7, #7
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	2101      	movs	r1, #1
 800765e:	4091      	lsls	r1, r2
 8007660:	000a      	movs	r2, r1
 8007662:	b252      	sxtb	r2, r2
 8007664:	43d2      	mvns	r2, r2
 8007666:	b252      	sxtb	r2, r2
 8007668:	4013      	ands	r3, r2
 800766a:	b25b      	sxtb	r3, r3
 800766c:	b2da      	uxtb	r2, r3
 800766e:	4b12      	ldr	r3, [pc, #72]	; (80076b8 <HTTPclose+0x74>)
 8007670:	765a      	strb	r2, [r3, #25]
	ch395.socket_connected &= ~(1 << i);
 8007672:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <HTTPclose+0x74>)
 8007674:	7e1b      	ldrb	r3, [r3, #24]
 8007676:	b2db      	uxtb	r3, r3
 8007678:	b25b      	sxtb	r3, r3
 800767a:	1dfa      	adds	r2, r7, #7
 800767c:	7812      	ldrb	r2, [r2, #0]
 800767e:	2101      	movs	r1, #1
 8007680:	4091      	lsls	r1, r2
 8007682:	000a      	movs	r2, r1
 8007684:	b252      	sxtb	r2, r2
 8007686:	43d2      	mvns	r2, r2
 8007688:	b252      	sxtb	r2, r2
 800768a:	4013      	ands	r3, r2
 800768c:	b25b      	sxtb	r3, r3
 800768e:	b2da      	uxtb	r2, r3
 8007690:	4b09      	ldr	r3, [pc, #36]	; (80076b8 <HTTPclose+0x74>)
 8007692:	761a      	strb	r2, [r3, #24]
	ch395.SOCK_responding = -1;
 8007694:	4b08      	ldr	r3, [pc, #32]	; (80076b8 <HTTPclose+0x74>)
 8007696:	22ff      	movs	r2, #255	; 0xff
 8007698:	769a      	strb	r2, [r3, #26]
	parseStates[i - 1].connection = CLOSED;
 800769a:	1dfb      	adds	r3, r7, #7
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	3b01      	subs	r3, #1
 80076a0:	4a06      	ldr	r2, [pc, #24]	; (80076bc <HTTPclose+0x78>)
 80076a2:	21a4      	movs	r1, #164	; 0xa4
 80076a4:	434b      	muls	r3, r1
 80076a6:	18d3      	adds	r3, r2, r3
 80076a8:	3304      	adds	r3, #4
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]
}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b002      	add	sp, #8
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	46c0      	nop			; (mov r8, r8)
 80076b8:	20000010 	.word	0x20000010
 80076bc:	200008c0 	.word	0x200008c0

080076c0 <HTTPclose_for_long_connection>:

void HTTPclose_for_long_connection(uint8_t i)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	0002      	movs	r2, r0
 80076c8:	1dfb      	adds	r3, r7, #7
 80076ca:	701a      	strb	r2, [r3, #0]
	ch395.RX_received &= ~(1 << i);
 80076cc:	4b0b      	ldr	r3, [pc, #44]	; (80076fc <HTTPclose_for_long_connection+0x3c>)
 80076ce:	7e5b      	ldrb	r3, [r3, #25]
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	b25b      	sxtb	r3, r3
 80076d4:	1dfa      	adds	r2, r7, #7
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	2101      	movs	r1, #1
 80076da:	4091      	lsls	r1, r2
 80076dc:	000a      	movs	r2, r1
 80076de:	b252      	sxtb	r2, r2
 80076e0:	43d2      	mvns	r2, r2
 80076e2:	b252      	sxtb	r2, r2
 80076e4:	4013      	ands	r3, r2
 80076e6:	b25b      	sxtb	r3, r3
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	4b04      	ldr	r3, [pc, #16]	; (80076fc <HTTPclose_for_long_connection+0x3c>)
 80076ec:	765a      	strb	r2, [r3, #25]
	ch395.SOCK_responding = -1;
 80076ee:	4b03      	ldr	r3, [pc, #12]	; (80076fc <HTTPclose_for_long_connection+0x3c>)
 80076f0:	22ff      	movs	r2, #255	; 0xff
 80076f2:	769a      	strb	r2, [r3, #26]
}
 80076f4:	46c0      	nop			; (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b002      	add	sp, #8
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000010 	.word	0x20000010

08007700 <strsepstr>:

char* strsepstr(char** stringp, const char* delim)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
	int len_delim = strlen(delim);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	0018      	movs	r0, r3
 800770e:	f7f8 fd05 	bl	800011c <strlen>
 8007712:	0003      	movs	r3, r0
 8007714:	617b      	str	r3, [r7, #20]
	char* loc_head = *stringp;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]
	if(loc_head != NULL)
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d019      	beq.n	8007756 <strsepstr+0x56>
	{
		char* loc_delim = strstr(loc_head, delim);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	0011      	movs	r1, r2
 8007728:	0018      	movs	r0, r3
 800772a:	f003 fbe9 	bl	800af00 <strstr>
 800772e:	0003      	movs	r3, r0
 8007730:	60fb      	str	r3, [r7, #12]
		if(loc_delim != NULL)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <strsepstr+0x50>
		{
			memset(loc_delim, 0, len_delim);
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2100      	movs	r1, #0
 800773e:	0018      	movs	r0, r3
 8007740:	f003 fb27 	bl	800ad92 <memset>
			*stringp = loc_delim + len_delim;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	18d2      	adds	r2, r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e002      	b.n	8007756 <strsepstr+0x56>
		}
		else
		{
			*stringp = NULL;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
		}
	}
	return loc_head;
 8007756:	693b      	ldr	r3, [r7, #16]
}
 8007758:	0018      	movs	r0, r3
 800775a:	46bd      	mov	sp, r7
 800775c:	b006      	add	sp, #24
 800775e:	bd80      	pop	{r7, pc}

08007760 <parse_http>:



BOOL parse_http(HTTPRequestParseState *pS, char* buffer)

{
 8007760:	b590      	push	{r4, r7, lr}
 8007762:	b08b      	sub	sp, #44	; 0x2c
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b04      	cmp	r3, #4
 8007770:	d100      	bne.n	8007774 <parse_http+0x14>
 8007772:	e1a8      	b.n	8007ac6 <parse_http+0x366>
 8007774:	dd00      	ble.n	8007778 <parse_http+0x18>
 8007776:	e1aa      	b.n	8007ace <parse_http+0x36e>
 8007778:	2b03      	cmp	r3, #3
 800777a:	d100      	bne.n	800777e <parse_http+0x1e>
 800777c:	e167      	b.n	8007a4e <parse_http+0x2ee>
 800777e:	dd00      	ble.n	8007782 <parse_http+0x22>
 8007780:	e1a5      	b.n	8007ace <parse_http+0x36e>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <parse_http+0x2e>
 8007786:	2b01      	cmp	r3, #1
 8007788:	d100      	bne.n	800778c <parse_http+0x2c>
 800778a:	e0ad      	b.n	80078e8 <parse_http+0x188>
 800778c:	e19f      	b.n	8007ace <parse_http+0x36e>
	{
	// start: parse request line
	// example:
	// GET /socket HTTP/1.1
	case 0:
		line_tok_saveptr = buffer;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	617b      	str	r3, [r7, #20]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8007792:	4ad6      	ldr	r2, [pc, #856]	; (8007aec <parse_http+0x38c>)
 8007794:	2314      	movs	r3, #20
 8007796:	18fb      	adds	r3, r7, r3
 8007798:	0011      	movs	r1, r2
 800779a:	0018      	movs	r0, r3
 800779c:	f7ff ffb0 	bl	8007700 <strsepstr>
 80077a0:	0003      	movs	r3, r0
 80077a2:	627b      	str	r3, [r7, #36]	; 0x24
		if(line)
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d100      	bne.n	80077ac <parse_http+0x4c>
 80077aa:	e192      	b.n	8007ad2 <parse_http+0x372>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 80077ac:	46c0      	nop			; (mov r8, r8)
			// check if received info obeys HTTP protocols
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 80077ae:	23c0      	movs	r3, #192	; 0xc0
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	49cf      	ldr	r1, [pc, #828]	; (8007af0 <parse_http+0x390>)
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	0018      	movs	r0, r3
 80077b8:	f003 fb82 	bl	800aec0 <strnstr>
 80077bc:	1e03      	subs	r3, r0, #0
 80077be:	d101      	bne.n	80077c4 <parse_http+0x64>
			{
				DEBUG_LOG("ERROR: NOT HTTP\n");
 80077c0:	46c0      	nop			; (mov r8, r8)
				goto HTTP_PARSE_ERROR;
 80077c2:	e1b0      	b.n	8007b26 <parse_http+0x3c6>
			}
			// 1: method
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 80077c4:	2310      	movs	r3, #16
 80077c6:	18fa      	adds	r2, r7, r3
 80077c8:	49ca      	ldr	r1, [pc, #808]	; (8007af4 <parse_http+0x394>)
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	0018      	movs	r0, r3
 80077ce:	f003 fbdc 	bl	800af8a <strtok_r>
 80077d2:	0003      	movs	r3, r0
 80077d4:	61fb      	str	r3, [r7, #28]
			if(tok)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d100      	bne.n	80077de <parse_http+0x7e>
 80077dc:	e17b      	b.n	8007ad6 <parse_http+0x376>
			{
				DEBUG_LOG("Method: %s\r\n", tok);
 80077de:	46c0      	nop			; (mov r8, r8)
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 80077e0:	4ac5      	ldr	r2, [pc, #788]	; (8007af8 <parse_http+0x398>)
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	0011      	movs	r1, r2
 80077e6:	0018      	movs	r0, r3
 80077e8:	f7f8 fc8e 	bl	8000108 <strcmp>
 80077ec:	1e03      	subs	r3, r0, #0
 80077ee:	d103      	bne.n	80077f8 <parse_http+0x98>
					pS->method = HTTP_GET;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	70da      	strb	r2, [r3, #3]
 80077f6:	e00e      	b.n	8007816 <parse_http+0xb6>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 80077f8:	4ac0      	ldr	r2, [pc, #768]	; (8007afc <parse_http+0x39c>)
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	0011      	movs	r1, r2
 80077fe:	0018      	movs	r0, r3
 8007800:	f7f8 fc82 	bl	8000108 <strcmp>
 8007804:	1e03      	subs	r3, r0, #0
 8007806:	d103      	bne.n	8007810 <parse_http+0xb0>
					pS->method = HTTP_POST;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	70da      	strb	r2, [r3, #3]
 800780e:	e002      	b.n	8007816 <parse_http+0xb6>
				else
					pS->method = HTTP_GET;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	70da      	strb	r2, [r3, #3]
			}
			else
				goto HTTP_PARSE_ERROR;
			// 2: URI
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8007816:	2310      	movs	r3, #16
 8007818:	18fa      	adds	r2, r7, r3
 800781a:	4bb6      	ldr	r3, [pc, #728]	; (8007af4 <parse_http+0x394>)
 800781c:	0019      	movs	r1, r3
 800781e:	2000      	movs	r0, #0
 8007820:	f003 fbb3 	bl	800af8a <strtok_r>
 8007824:	0003      	movs	r3, r0
 8007826:	61fb      	str	r3, [r7, #28]
			if(tok)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d100      	bne.n	8007830 <parse_http+0xd0>
 800782e:	e154      	b.n	8007ada <parse_http+0x37a>
			{
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3305      	adds	r3, #5
 8007834:	69f9      	ldr	r1, [r7, #28]
 8007836:	2240      	movs	r2, #64	; 0x40
 8007838:	0018      	movs	r0, r3
 800783a:	f003 fb22 	bl	800ae82 <strncpy>
				DEBUG_LOG("URI: %s\r\n", pS->URI);
 800783e:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			char* s_args = strchr(pS->URI, '?');
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3305      	adds	r3, #5
 8007844:	213f      	movs	r1, #63	; 0x3f
 8007846:	0018      	movs	r0, r3
 8007848:	f003 fab8 	bl	800adbc <strchr>
 800784c:	0003      	movs	r3, r0
 800784e:	61bb      	str	r3, [r7, #24]
			if(pS->method == HTTP_GET && s_args != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	78db      	ldrb	r3, [r3, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d133      	bne.n	80078c0 <parse_http+0x160>
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d030      	beq.n	80078c0 <parse_http+0x160>
			{
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
				DEBUG_LOG("Path: %s\r\n", pS->URI);
 8007864:	46c0      	nop			; (mov r8, r8)
				s_args++; // move to the char next to ?
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	3301      	adds	r3, #1
 800786a:	61bb      	str	r3, [r7, #24]
				if(*s_args)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d025      	beq.n	80078c0 <parse_http+0x160>
				{
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 8007874:	230c      	movs	r3, #12
 8007876:	18fa      	adds	r2, r7, r3
 8007878:	49a1      	ldr	r1, [pc, #644]	; (8007b00 <parse_http+0x3a0>)
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	0018      	movs	r0, r3
 800787e:	f003 fb84 	bl	800af8a <strtok_r>
 8007882:	0003      	movs	r3, r0
 8007884:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 8007886:	e018      	b.n	80078ba <parse_http+0x15a>
					{
						DEBUG_LOG("Arg: %s\r\n", tok_arg);
 8007888:	46c0      	nop			; (mov r8, r8)
						pS->argv[pS->argc++] = tok_arg; // tok_arg: "arg=xxx\0"
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2248      	movs	r2, #72	; 0x48
 800788e:	5c9b      	ldrb	r3, [r3, r2]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	b2d0      	uxtb	r0, r2
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	2148      	movs	r1, #72	; 0x48
 8007898:	5450      	strb	r0, [r2, r1]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	3312      	adds	r3, #18
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	18d3      	adds	r3, r2, r3
 80078a2:	3304      	adds	r3, #4
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	601a      	str	r2, [r3, #0]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 80078a8:	230c      	movs	r3, #12
 80078aa:	18fa      	adds	r2, r7, r3
 80078ac:	4b94      	ldr	r3, [pc, #592]	; (8007b00 <parse_http+0x3a0>)
 80078ae:	0019      	movs	r1, r3
 80078b0:	2000      	movs	r0, #0
 80078b2:	f003 fb6a 	bl	800af8a <strtok_r>
 80078b6:	0003      	movs	r3, r0
 80078b8:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e3      	bne.n	8007888 <parse_http+0x128>
					}
				}
			}
			// 3: version
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 80078c0:	2310      	movs	r3, #16
 80078c2:	18fa      	adds	r2, r7, r3
 80078c4:	4b8b      	ldr	r3, [pc, #556]	; (8007af4 <parse_http+0x394>)
 80078c6:	0019      	movs	r1, r3
 80078c8:	2000      	movs	r0, #0
 80078ca:	f003 fb5e 	bl	800af8a <strtok_r>
 80078ce:	0003      	movs	r3, r0
 80078d0:	61fb      	str	r3, [r7, #28]
			if(tok)
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d100      	bne.n	80078da <parse_http+0x17a>
 80078d8:	e101      	b.n	8007ade <parse_http+0x37e>
			{
				DEBUG_LOG("VERSION: %s\r\n", tok);
 80078da:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			pS->state ++;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	3301      	adds	r3, #1
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	701a      	strb	r2, [r3, #0]
	//		Host: example.com
	//		Upgrade: websocket
	//		Connection: Upgrade
	//		Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
	//		Sec-WebSocket-Version: 13
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80078e8:	4a80      	ldr	r2, [pc, #512]	; (8007aec <parse_http+0x38c>)
 80078ea:	2314      	movs	r3, #20
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	0011      	movs	r1, r2
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7ff ff05 	bl	8007700 <strsepstr>
 80078f6:	0003      	movs	r3, r0
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 80078fa:	e09e      	b.n	8007a3a <parse_http+0x2da>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 80078fc:	46c0      	nop			; (mov r8, r8)
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80078fe:	2410      	movs	r4, #16
 8007900:	193a      	adds	r2, r7, r4
 8007902:	4980      	ldr	r1, [pc, #512]	; (8007b04 <parse_http+0x3a4>)
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	0018      	movs	r0, r3
 8007908:	f003 fb3f 	bl	800af8a <strtok_r>
 800790c:	0003      	movs	r3, r0
 800790e:	61fb      	str	r3, [r7, #28]
			if(tok == NULL || *tok == 0)
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d100      	bne.n	8007918 <parse_http+0x1b8>
 8007916:	e094      	b.n	8007a42 <parse_http+0x2e2>
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d100      	bne.n	8007922 <parse_http+0x1c2>
 8007920:	e08f      	b.n	8007a42 <parse_http+0x2e2>
				break;
			if(tok)
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d100      	bne.n	800792a <parse_http+0x1ca>
 8007928:	e07e      	b.n	8007a28 <parse_http+0x2c8>
			{
				DEBUG_LOG("Header: %s\r\n", tok);
 800792a:	46c0      	nop			; (mov r8, r8)
				// Header: Connection
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 800792c:	4a76      	ldr	r2, [pc, #472]	; (8007b08 <parse_http+0x3a8>)
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	0011      	movs	r1, r2
 8007932:	0018      	movs	r0, r3
 8007934:	f7f8 fbe8 	bl	8000108 <strcmp>
 8007938:	1e03      	subs	r3, r0, #0
 800793a:	d138      	bne.n	80079ae <parse_http+0x24e>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 800793c:	193a      	adds	r2, r7, r4
 800793e:	4b71      	ldr	r3, [pc, #452]	; (8007b04 <parse_http+0x3a4>)
 8007940:	0019      	movs	r1, r3
 8007942:	2000      	movs	r0, #0
 8007944:	f003 fb21 	bl	800af8a <strtok_r>
 8007948:	0003      	movs	r3, r0
 800794a:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d100      	bne.n	8007954 <parse_http+0x1f4>
 8007952:	e0c6      	b.n	8007ae2 <parse_http+0x382>
					DEBUG_LOG("Value: %s\r\n", tok);
 8007954:	46c0      	nop			; (mov r8, r8)
					// CASE 1: keep alive connection
					if((strstr(tok, "Keep") != NULL) || (strstr(tok, "keep") != NULL))
 8007956:	4a6d      	ldr	r2, [pc, #436]	; (8007b0c <parse_http+0x3ac>)
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	0011      	movs	r1, r2
 800795c:	0018      	movs	r0, r3
 800795e:	f003 facf 	bl	800af00 <strstr>
 8007962:	1e03      	subs	r3, r0, #0
 8007964:	d107      	bne.n	8007976 <parse_http+0x216>
 8007966:	4a6a      	ldr	r2, [pc, #424]	; (8007b10 <parse_http+0x3b0>)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	0011      	movs	r1, r2
 800796c:	0018      	movs	r0, r3
 800796e:	f003 fac7 	bl	800af00 <strstr>
 8007972:	1e03      	subs	r3, r0, #0
 8007974:	d003      	beq.n	800797e <parse_http+0x21e>
						pS->connection = KEEP_ALIVE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	711a      	strb	r2, [r3, #4]
 800797c:	e054      	b.n	8007a28 <parse_http+0x2c8>
					// CASE 2: upgrade to WebSocket
					else if((strstr(tok, "Upgrade") != NULL) || (strstr(tok, "upgrade") != NULL))
 800797e:	4a65      	ldr	r2, [pc, #404]	; (8007b14 <parse_http+0x3b4>)
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	0011      	movs	r1, r2
 8007984:	0018      	movs	r0, r3
 8007986:	f003 fabb 	bl	800af00 <strstr>
 800798a:	1e03      	subs	r3, r0, #0
 800798c:	d107      	bne.n	800799e <parse_http+0x23e>
 800798e:	4a62      	ldr	r2, [pc, #392]	; (8007b18 <parse_http+0x3b8>)
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	0011      	movs	r1, r2
 8007994:	0018      	movs	r0, r3
 8007996:	f003 fab3 	bl	800af00 <strstr>
 800799a:	1e03      	subs	r3, r0, #0
 800799c:	d044      	beq.n	8007a28 <parse_http+0x2c8>
					{
						pS->ws_handshaked = WS_WAIT_FOR_HANDSHAKE; // urge to handshake
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	228e      	movs	r2, #142	; 0x8e
 80079a2:	2100      	movs	r1, #0
 80079a4:	5499      	strb	r1, [r3, r2]
						pS->connection = UPGRADED_WS;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2202      	movs	r2, #2
 80079aa:	711a      	strb	r2, [r3, #4]
 80079ac:	e03c      	b.n	8007a28 <parse_http+0x2c8>
					}

				}
				// Header: Sec-WebSocket-Key
				// websocket safety key store in cookies buffer
				else if(strcmp(tok, "Sec-WebSocket-Key") == 0)
 80079ae:	4a5b      	ldr	r2, [pc, #364]	; (8007b1c <parse_http+0x3bc>)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	0011      	movs	r1, r2
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7f8 fba7 	bl	8000108 <strcmp>
 80079ba:	1e03      	subs	r3, r0, #0
 80079bc:	d114      	bne.n	80079e8 <parse_http+0x288>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80079be:	2310      	movs	r3, #16
 80079c0:	18fa      	adds	r2, r7, r3
 80079c2:	4b50      	ldr	r3, [pc, #320]	; (8007b04 <parse_http+0x3a4>)
 80079c4:	0019      	movs	r1, r3
 80079c6:	2000      	movs	r0, #0
 80079c8:	f003 fadf 	bl	800af8a <strtok_r>
 80079cc:	0003      	movs	r3, r0
 80079ce:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d100      	bne.n	80079d8 <parse_http+0x278>
 80079d6:	e086      	b.n	8007ae6 <parse_http+0x386>
					// temporarily store client key in coolies
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	335c      	adds	r3, #92	; 0x5c
 80079dc:	69f9      	ldr	r1, [r7, #28]
 80079de:	2220      	movs	r2, #32
 80079e0:	0018      	movs	r0, r3
 80079e2:	f003 fa4e 	bl	800ae82 <strncpy>
 80079e6:	e01f      	b.n	8007a28 <parse_http+0x2c8>

				}
				// Header: Cookie
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 80079e8:	4a4d      	ldr	r2, [pc, #308]	; (8007b20 <parse_http+0x3c0>)
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	0011      	movs	r1, r2
 80079ee:	0018      	movs	r0, r3
 80079f0:	f7f8 fb8a 	bl	8000108 <strcmp>
 80079f4:	1e03      	subs	r3, r0, #0
 80079f6:	d117      	bne.n	8007a28 <parse_http+0x2c8>
				{
					if(pS->connection != UPGRADED_WS)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	791b      	ldrb	r3, [r3, #4]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d013      	beq.n	8007a28 <parse_http+0x2c8>
					{
						tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8007a00:	2310      	movs	r3, #16
 8007a02:	18fa      	adds	r2, r7, r3
 8007a04:	4b3f      	ldr	r3, [pc, #252]	; (8007b04 <parse_http+0x3a4>)
 8007a06:	0019      	movs	r1, r3
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f003 fabe 	bl	800af8a <strtok_r>
 8007a0e:	0003      	movs	r3, r0
 8007a10:	61fb      	str	r3, [r7, #28]
						if(tok == NULL) goto HTTP_PARSE_ERROR;
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d100      	bne.n	8007a1a <parse_http+0x2ba>
 8007a18:	e084      	b.n	8007b24 <parse_http+0x3c4>
						strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	335c      	adds	r3, #92	; 0x5c
 8007a1e:	69f9      	ldr	r1, [r7, #28]
 8007a20:	2220      	movs	r2, #32
 8007a22:	0018      	movs	r0, r3
 8007a24:	f003 fa2d 	bl	800ae82 <strncpy>
					}
				}

			}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8007a28:	4a30      	ldr	r2, [pc, #192]	; (8007aec <parse_http+0x38c>)
 8007a2a:	2314      	movs	r3, #20
 8007a2c:	18fb      	adds	r3, r7, r3
 8007a2e:	0011      	movs	r1, r2
 8007a30:	0018      	movs	r0, r3
 8007a32:	f7ff fe65 	bl	8007700 <strsepstr>
 8007a36:	0003      	movs	r3, r0
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d000      	beq.n	8007a42 <parse_http+0x2e2>
 8007a40:	e75c      	b.n	80078fc <parse_http+0x19c>
		}
		pS->state++;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	701a      	strb	r2, [r3, #0]
		/* no break */
		// do not break, let the following execute
	case 3:
		// parse payload
		if(pS->method == HTTP_POST)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	78db      	ldrb	r3, [r3, #3]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d131      	bne.n	8007aba <parse_http+0x35a>
		{
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8007a56:	4a25      	ldr	r2, [pc, #148]	; (8007aec <parse_http+0x38c>)
 8007a58:	2314      	movs	r3, #20
 8007a5a:	18fb      	adds	r3, r7, r3
 8007a5c:	0011      	movs	r1, r2
 8007a5e:	0018      	movs	r0, r3
 8007a60:	f7ff fe4e 	bl	8007700 <strsepstr>
 8007a64:	0003      	movs	r3, r0
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
			if(line)
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d025      	beq.n	8007aba <parse_http+0x35a>
			{
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 8007a6e:	230c      	movs	r3, #12
 8007a70:	18fa      	adds	r2, r7, r3
 8007a72:	4923      	ldr	r1, [pc, #140]	; (8007b00 <parse_http+0x3a0>)
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	0018      	movs	r0, r3
 8007a78:	f003 fa87 	bl	800af8a <strtok_r>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 8007a80:	e018      	b.n	8007ab4 <parse_http+0x354>
				{
					DEBUG_LOG("Arg: %s\r\n", tok_arg);
 8007a82:	46c0      	nop			; (mov r8, r8)
					pS->argv[pS->argc++] = tok_arg;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2248      	movs	r2, #72	; 0x48
 8007a88:	5c9b      	ldrb	r3, [r3, r2]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	b2d0      	uxtb	r0, r2
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	2148      	movs	r1, #72	; 0x48
 8007a92:	5450      	strb	r0, [r2, r1]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	3312      	adds	r3, #18
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	18d3      	adds	r3, r2, r3
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	6a3a      	ldr	r2, [r7, #32]
 8007aa0:	601a      	str	r2, [r3, #0]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8007aa2:	230c      	movs	r3, #12
 8007aa4:	18fa      	adds	r2, r7, r3
 8007aa6:	4b16      	ldr	r3, [pc, #88]	; (8007b00 <parse_http+0x3a0>)
 8007aa8:	0019      	movs	r1, r3
 8007aaa:	2000      	movs	r0, #0
 8007aac:	f003 fa6d 	bl	800af8a <strtok_r>
 8007ab0:	0003      	movs	r3, r0
 8007ab2:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e3      	bne.n	8007a82 <parse_http+0x322>
				}
			}
		}
		pS->state++;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	701a      	strb	r2, [r3, #0]
		/* no break */
		// do not break, let the following execute
	case 4: // finished
		pS->ready_for_making_response = true;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	228c      	movs	r2, #140	; 0x8c
 8007aca:	2101      	movs	r1, #1
 8007acc:	5499      	strb	r1, [r3, r2]
		/* no break */
		// do not break, let the following execute
	}
	return true;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e031      	b.n	8007b36 <parse_http+0x3d6>
			goto HTTP_PARSE_ERROR;
 8007ad2:	46c0      	nop			; (mov r8, r8)
 8007ad4:	e027      	b.n	8007b26 <parse_http+0x3c6>
				goto HTTP_PARSE_ERROR;
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	e025      	b.n	8007b26 <parse_http+0x3c6>
				goto HTTP_PARSE_ERROR;
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	e023      	b.n	8007b26 <parse_http+0x3c6>
				goto HTTP_PARSE_ERROR;
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	e021      	b.n	8007b26 <parse_http+0x3c6>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	e01f      	b.n	8007b26 <parse_http+0x3c6>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8007ae6:	46c0      	nop			; (mov r8, r8)
 8007ae8:	e01d      	b.n	8007b26 <parse_http+0x3c6>
 8007aea:	46c0      	nop			; (mov r8, r8)
 8007aec:	0800b454 	.word	0x0800b454
 8007af0:	0800b2e8 	.word	0x0800b2e8
 8007af4:	0800b458 	.word	0x0800b458
 8007af8:	0800b450 	.word	0x0800b450
 8007afc:	0800b448 	.word	0x0800b448
 8007b00:	0800b2f0 	.word	0x0800b2f0
 8007b04:	0800b45c 	.word	0x0800b45c
 8007b08:	0800b434 	.word	0x0800b434
 8007b0c:	0800b2f4 	.word	0x0800b2f4
 8007b10:	0800b2fc 	.word	0x0800b2fc
 8007b14:	0800b304 	.word	0x0800b304
 8007b18:	0800b30c 	.word	0x0800b30c
 8007b1c:	0800b314 	.word	0x0800b314
 8007b20:	0800b440 	.word	0x0800b440
						if(tok == NULL) goto HTTP_PARSE_ERROR;
 8007b24:	46c0      	nop			; (mov r8, r8)
	HTTP_PARSE_ERROR:
		pS->state = 0;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
		pS->ready_for_making_response = false;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	228c      	movs	r2, #140	; 0x8c
 8007b30:	2100      	movs	r1, #0
 8007b32:	5499      	strb	r1, [r3, r2]
		return false;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	0018      	movs	r0, r3
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	b00b      	add	sp, #44	; 0x2c
 8007b3c:	bd90      	pop	{r4, r7, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)

08007b40 <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	if(pS->argc == 0)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2248      	movs	r2, #72	; 0x48
 8007b4e:	5c9b      	ldrb	r3, [r3, r2]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <getHTTPArg+0x18>
		return NULL;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e03b      	b.n	8007bd0 <getHTTPArg+0x90>
	int i;
	const char* cur_s; 
	const char* cur_name = name;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e02e      	b.n	8007bc0 <getHTTPArg+0x80>
	{
		// compare until '='
		cur_s = pS->argv[i];
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	3312      	adds	r3, #18
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	18d3      	adds	r3, r2, r3
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8007b72:	e00b      	b.n	8007b8c <getHTTPArg+0x4c>
		{
			if(*cur_s != *cur_name)
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d10e      	bne.n	8007b9e <getHTTPArg+0x5e>
			{
				break;
			}
			cur_name++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
			cur_s++;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <getHTTPArg+0x60>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1eb      	bne.n	8007b74 <getHTTPArg+0x34>
 8007b9c:	e000      	b.n	8007ba0 <getHTTPArg+0x60>
				break;
 8007b9e:	46c0      	nop			; (mov r8, r8)
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d106      	bne.n	8007bb6 <getHTTPArg+0x76>
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b3d      	cmp	r3, #61	; 0x3d
 8007bae:	d102      	bne.n	8007bb6 <getHTTPArg+0x76>
		{
			return cur_s+1;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	e00c      	b.n	8007bd0 <getHTTPArg+0x90>
		}
		cur_name = name;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2248      	movs	r2, #72	; 0x48
 8007bc4:	5c9b      	ldrb	r3, [r3, r2]
 8007bc6:	001a      	movs	r2, r3
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	dbc9      	blt.n	8007b62 <getHTTPArg+0x22>
	}
	return NULL;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b006      	add	sp, #24
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <atou8>:



uint8_t atou8(const char* s)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t sum = 0;
 8007be0:	230e      	movs	r3, #14
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8007be8:	230f      	movs	r3, #15
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	2200      	movs	r2, #0
 8007bee:	701a      	strb	r2, [r3, #0]
 8007bf0:	e025      	b.n	8007c3e <atou8+0x66>
	{
		if(*s >= '0' && *s <= '9')
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b2f      	cmp	r3, #47	; 0x2f
 8007bf8:	d91f      	bls.n	8007c3a <atou8+0x62>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b39      	cmp	r3, #57	; 0x39
 8007c00:	d81b      	bhi.n	8007c3a <atou8+0x62>
		{
			sum *= 10;
 8007c02:	200e      	movs	r0, #14
 8007c04:	183a      	adds	r2, r7, r0
 8007c06:	183b      	adds	r3, r7, r0
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	1c19      	adds	r1, r3, #0
 8007c0c:	0089      	lsls	r1, r1, #2
 8007c0e:	18cb      	adds	r3, r1, r3
 8007c10:	18db      	adds	r3, r3, r3
 8007c12:	7013      	strb	r3, [r2, #0]
			sum += *s - '0';
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	183b      	adds	r3, r7, r0
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	183b      	adds	r3, r7, r0
 8007c22:	3a30      	subs	r2, #48	; 0x30
 8007c24:	701a      	strb	r2, [r3, #0]
			s++;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	607b      	str	r3, [r7, #4]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8007c2c:	220f      	movs	r2, #15
 8007c2e:	18bb      	adds	r3, r7, r2
 8007c30:	18ba      	adds	r2, r7, r2
 8007c32:	7812      	ldrb	r2, [r2, #0]
 8007c34:	3201      	adds	r2, #1
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	e001      	b.n	8007c3e <atou8+0x66>
		}
		else
			return 255; // error
 8007c3a:	23ff      	movs	r3, #255	; 0xff
 8007c3c:	e00b      	b.n	8007c56 <atou8+0x7e>
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8007c3e:	230f      	movs	r3, #15
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d803      	bhi.n	8007c50 <atou8+0x78>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1d0      	bne.n	8007bf2 <atou8+0x1a>
	}
	return sum;
 8007c50:	230e      	movs	r3, #14
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	781b      	ldrb	r3, [r3, #0]
}
 8007c56:	0018      	movs	r0, r3
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b004      	add	sp, #16
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <atou16>:
uint16_t atou16(const char* s)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t sum = 0;
 8007c68:	230e      	movs	r3, #14
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<5 && *s; ++i) // at most 5 digits
 8007c70:	230f      	movs	r3, #15
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e025      	b.n	8007cc6 <atou16+0x66>
	{
		if(*s >= '0' && *s <= '9')
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b2f      	cmp	r3, #47	; 0x2f
 8007c80:	d91f      	bls.n	8007cc2 <atou16+0x62>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b39      	cmp	r3, #57	; 0x39
 8007c88:	d81b      	bhi.n	8007cc2 <atou16+0x62>
		{
			sum *= 10;
 8007c8a:	200e      	movs	r0, #14
 8007c8c:	183a      	adds	r2, r7, r0
 8007c8e:	183b      	adds	r3, r7, r0
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	1c19      	adds	r1, r3, #0
 8007c94:	0089      	lsls	r1, r1, #2
 8007c96:	18cb      	adds	r3, r1, r3
 8007c98:	18db      	adds	r3, r3, r3
 8007c9a:	7013      	strb	r3, [r2, #0]
			sum += *s - '0';
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	183b      	adds	r3, r7, r0
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	18d3      	adds	r3, r2, r3
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	183b      	adds	r3, r7, r0
 8007caa:	3a30      	subs	r2, #48	; 0x30
 8007cac:	701a      	strb	r2, [r3, #0]
			s++;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	607b      	str	r3, [r7, #4]
	for(i=0; i<5 && *s; ++i) // at most 5 digits
 8007cb4:	220f      	movs	r2, #15
 8007cb6:	18bb      	adds	r3, r7, r2
 8007cb8:	18ba      	adds	r2, r7, r2
 8007cba:	7812      	ldrb	r2, [r2, #0]
 8007cbc:	3201      	adds	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]
 8007cc0:	e001      	b.n	8007cc6 <atou16+0x66>
		}
		else
			return 65535; // error
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <atou16+0x88>)
 8007cc4:	e00c      	b.n	8007ce0 <atou16+0x80>
	for(i=0; i<5 && *s; ++i) // at most 5 digits
 8007cc6:	230f      	movs	r3, #15
 8007cc8:	18fb      	adds	r3, r7, r3
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b04      	cmp	r3, #4
 8007cce:	d803      	bhi.n	8007cd8 <atou16+0x78>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1d0      	bne.n	8007c7a <atou16+0x1a>
	}
	return sum;
 8007cd8:	230e      	movs	r3, #14
 8007cda:	18fb      	adds	r3, r7, r3
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
}
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b004      	add	sp, #16
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	0000ffff 	.word	0x0000ffff

08007cec <u16toa>:

uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 8007cec:	b5b0      	push	{r4, r5, r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	0002      	movs	r2, r0
 8007cf4:	6039      	str	r1, [r7, #0]
 8007cf6:	1dbb      	adds	r3, r7, #6
 8007cf8:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0, j;
 8007cfa:	230f      	movs	r3, #15
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	2200      	movs	r2, #0
 8007d00:	701a      	strb	r2, [r3, #0]
	while(d)
 8007d02:	e01d      	b.n	8007d40 <u16toa+0x54>
	{
		buf[i++] = (d % 10) + '0';
 8007d04:	1dbb      	adds	r3, r7, #6
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	210a      	movs	r1, #10
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f7f8 fa94 	bl	8000238 <__aeabi_uidivmod>
 8007d10:	000b      	movs	r3, r1
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	210f      	movs	r1, #15
 8007d18:	187b      	adds	r3, r7, r1
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	1879      	adds	r1, r7, r1
 8007d1e:	1c58      	adds	r0, r3, #1
 8007d20:	7008      	strb	r0, [r1, #0]
 8007d22:	0019      	movs	r1, r3
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	185b      	adds	r3, r3, r1
 8007d28:	3230      	adds	r2, #48	; 0x30
 8007d2a:	b2d2      	uxtb	r2, r2
 8007d2c:	701a      	strb	r2, [r3, #0]
		d /= 10;
 8007d2e:	1dbc      	adds	r4, r7, #6
 8007d30:	1dbb      	adds	r3, r7, #6
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	210a      	movs	r1, #10
 8007d36:	0018      	movs	r0, r3
 8007d38:	f7f8 f9f8 	bl	800012c <__udivsi3>
 8007d3c:	0003      	movs	r3, r0
 8007d3e:	8023      	strh	r3, [r4, #0]
	while(d)
 8007d40:	1dbb      	adds	r3, r7, #6
 8007d42:	881b      	ldrh	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1dd      	bne.n	8007d04 <u16toa+0x18>
	}
	buf[i] = 0;
 8007d48:	230f      	movs	r3, #15
 8007d4a:	18fb      	adds	r3, r7, r3
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	18d3      	adds	r3, r2, r3
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 8007d56:	230e      	movs	r3, #14
 8007d58:	18fb      	adds	r3, r7, r3
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
 8007d5e:	e028      	b.n	8007db2 <u16toa+0xc6>
	{
		char tmp;
		tmp = buf[j];
 8007d60:	200e      	movs	r0, #14
 8007d62:	183b      	adds	r3, r7, r0
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	18d2      	adds	r2, r2, r3
 8007d6a:	240d      	movs	r4, #13
 8007d6c:	193b      	adds	r3, r7, r4
 8007d6e:	7812      	ldrb	r2, [r2, #0]
 8007d70:	701a      	strb	r2, [r3, #0]
		buf[j] = buf[i-j-1];
 8007d72:	250f      	movs	r5, #15
 8007d74:	197b      	adds	r3, r7, r5
 8007d76:	781a      	ldrb	r2, [r3, #0]
 8007d78:	183b      	adds	r3, r7, r0
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	683a      	ldr	r2, [r7, #0]
 8007d82:	18d2      	adds	r2, r2, r3
 8007d84:	183b      	adds	r3, r7, r0
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	18cb      	adds	r3, r1, r3
 8007d8c:	7812      	ldrb	r2, [r2, #0]
 8007d8e:	701a      	strb	r2, [r3, #0]
		buf[i-j-1] = tmp; // swap
 8007d90:	197b      	adds	r3, r7, r5
 8007d92:	781a      	ldrb	r2, [r3, #0]
 8007d94:	0001      	movs	r1, r0
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	18d3      	adds	r3, r2, r3
 8007da2:	193a      	adds	r2, r7, r4
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 8007da8:	187b      	adds	r3, r7, r1
 8007daa:	187a      	adds	r2, r7, r1
 8007dac:	7812      	ldrb	r2, [r2, #0]
 8007dae:	3201      	adds	r2, #1
 8007db0:	701a      	strb	r2, [r3, #0]
 8007db2:	210f      	movs	r1, #15
 8007db4:	187b      	adds	r3, r7, r1
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	085b      	lsrs	r3, r3, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	220e      	movs	r2, #14
 8007dbe:	18ba      	adds	r2, r7, r2
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d3cc      	bcc.n	8007d60 <u16toa+0x74>
	}
	return i;
 8007dc6:	187b      	adds	r3, r7, r1
 8007dc8:	781b      	ldrb	r3, [r3, #0]
}
 8007dca:	0018      	movs	r0, r3
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	b004      	add	sp, #16
 8007dd0:	bdb0      	pop	{r4, r5, r7, pc}

08007dd2 <strcpy_f>:

// Fast strcpy
// Return: pointer to the end of dest + src
char* strcpy_f(char* dest, const char* src)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
	while(*src)
 8007ddc:	e009      	b.n	8007df2 <strcpy_f+0x20>
	{
		*dest = *src;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	701a      	strb	r2, [r3, #0]
		src++;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	603b      	str	r3, [r7, #0]
		dest++;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3301      	adds	r3, #1
 8007df0:	607b      	str	r3, [r7, #4]
	while(*src)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1f1      	bne.n	8007dde <strcpy_f+0xc>
	}
	*dest = 0;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
	return dest;
 8007e00:	687b      	ldr	r3, [r7, #4]
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b002      	add	sp, #8
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <strncpy_f>:

char* strncpy_f(char* dest, const char* src, uint16_t len)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	60f8      	str	r0, [r7, #12]
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	1dbb      	adds	r3, r7, #6
 8007e16:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 8007e18:	e00e      	b.n	8007e38 <strncpy_f+0x2e>
	{
		*dest = *src;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	781a      	ldrb	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	701a      	strb	r2, [r3, #0]
		src++;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	3301      	adds	r3, #1
 8007e26:	60bb      	str	r3, [r7, #8]
		dest++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
		len--;
 8007e2e:	1dbb      	adds	r3, r7, #6
 8007e30:	881a      	ldrh	r2, [r3, #0]
 8007e32:	1dbb      	adds	r3, r7, #6
 8007e34:	3a01      	subs	r2, #1
 8007e36:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d003      	beq.n	8007e48 <strncpy_f+0x3e>
 8007e40:	1dbb      	adds	r3, r7, #6
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e8      	bne.n	8007e1a <strncpy_f+0x10>
	}
	*dest = 0;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
	return dest;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
}
 8007e50:	0018      	movs	r0, r3
 8007e52:	46bd      	mov	sp, r7
 8007e54:	b004      	add	sp, #16
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <IPv4_to_s>:

uint8_t IPv4_to_s(char* __restrict s ,const  uint8_t* __restrict IP)
{
 8007e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  	uint8_t n = 0;
 8007e62:	230a      	movs	r3, #10
 8007e64:	18fb      	adds	r3, r7, r3
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8007e6a:	230f      	movs	r3, #15
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; ++i)
 8007e72:	230e      	movs	r3, #14
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	e0ad      	b.n	8007fd8 <IPv4_to_s+0x180>
  {
	uint8_t d = IP[i];
 8007e7c:	230e      	movs	r3, #14
 8007e7e:	18fb      	adds	r3, r7, r3
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	18d2      	adds	r2, r2, r3
 8007e86:	210d      	movs	r1, #13
 8007e88:	187b      	adds	r3, r7, r1
 8007e8a:	7812      	ldrb	r2, [r2, #0]
 8007e8c:	701a      	strb	r2, [r3, #0]
	uint8_t nd = 0;
 8007e8e:	230c      	movs	r3, #12
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
	if(d > 0)
 8007e96:	187b      	adds	r3, r7, r1
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d02b      	beq.n	8007ef6 <IPv4_to_s+0x9e>
	{
		while(d)
 8007e9e:	e024      	b.n	8007eea <IPv4_to_s+0x92>
		{
			s[idx++] = (d % 10) + '0';
 8007ea0:	240d      	movs	r4, #13
 8007ea2:	193b      	adds	r3, r7, r4
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	210a      	movs	r1, #10
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7f8 f9c5 	bl	8000238 <__aeabi_uidivmod>
 8007eae:	000b      	movs	r3, r1
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	210f      	movs	r1, #15
 8007eb4:	187b      	adds	r3, r7, r1
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	1879      	adds	r1, r7, r1
 8007eba:	1c58      	adds	r0, r3, #1
 8007ebc:	7008      	strb	r0, [r1, #0]
 8007ebe:	0019      	movs	r1, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	185b      	adds	r3, r3, r1
 8007ec4:	3230      	adds	r2, #48	; 0x30
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	701a      	strb	r2, [r3, #0]
			d /= 10;
 8007eca:	0023      	movs	r3, r4
 8007ecc:	18fc      	adds	r4, r7, r3
 8007ece:	18fb      	adds	r3, r7, r3
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	210a      	movs	r1, #10
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f7f8 f929 	bl	800012c <__udivsi3>
 8007eda:	0003      	movs	r3, r0
 8007edc:	7023      	strb	r3, [r4, #0]
			++nd;
 8007ede:	220c      	movs	r2, #12
 8007ee0:	18bb      	adds	r3, r7, r2
 8007ee2:	18ba      	adds	r2, r7, r2
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	3201      	adds	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
		while(d)
 8007eea:	230d      	movs	r3, #13
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1d5      	bne.n	8007ea0 <IPv4_to_s+0x48>
 8007ef4:	e00a      	b.n	8007f0c <IPv4_to_s+0xb4>
		}
	}
	else
	{
		s[idx++] = '0';
 8007ef6:	220f      	movs	r2, #15
 8007ef8:	18bb      	adds	r3, r7, r2
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	18ba      	adds	r2, r7, r2
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	7011      	strb	r1, [r2, #0]
 8007f02:	001a      	movs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	189b      	adds	r3, r3, r2
 8007f08:	2230      	movs	r2, #48	; 0x30
 8007f0a:	701a      	strb	r2, [r3, #0]
	}
	// reverse
	for(uint8_t j = 0; j < nd / 2; ++j)
 8007f0c:	230b      	movs	r3, #11
 8007f0e:	18fb      	adds	r3, r7, r3
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e038      	b.n	8007f88 <IPv4_to_s+0x130>
	{
		char c;
		c = s[idx - 1 - j];
 8007f16:	240f      	movs	r4, #15
 8007f18:	193b      	adds	r3, r7, r4
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	1e5a      	subs	r2, r3, #1
 8007f1e:	200b      	movs	r0, #11
 8007f20:	183b      	adds	r3, r7, r0
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	001a      	movs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	189a      	adds	r2, r3, r2
 8007f2c:	2509      	movs	r5, #9
 8007f2e:	197b      	adds	r3, r7, r5
 8007f30:	7812      	ldrb	r2, [r2, #0]
 8007f32:	701a      	strb	r2, [r3, #0]
		s[idx - 1 - j] = s[idx - nd + j];
 8007f34:	193b      	adds	r3, r7, r4
 8007f36:	781a      	ldrb	r2, [r3, #0]
 8007f38:	260c      	movs	r6, #12
 8007f3a:	19bb      	adds	r3, r7, r6
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	183b      	adds	r3, r7, r0
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	18d3      	adds	r3, r2, r3
 8007f46:	001a      	movs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	189a      	adds	r2, r3, r2
 8007f4c:	193b      	adds	r3, r7, r4
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	1e59      	subs	r1, r3, #1
 8007f52:	183b      	adds	r3, r7, r0
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	1acb      	subs	r3, r1, r3
 8007f58:	0019      	movs	r1, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	185b      	adds	r3, r3, r1
 8007f5e:	7812      	ldrb	r2, [r2, #0]
 8007f60:	701a      	strb	r2, [r3, #0]
		s[idx - nd + j] = c;
 8007f62:	193b      	adds	r3, r7, r4
 8007f64:	781a      	ldrb	r2, [r3, #0]
 8007f66:	19bb      	adds	r3, r7, r6
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	1ad2      	subs	r2, r2, r3
 8007f6c:	183b      	adds	r3, r7, r0
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	18d3      	adds	r3, r2, r3
 8007f72:	001a      	movs	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	189b      	adds	r3, r3, r2
 8007f78:	197a      	adds	r2, r7, r5
 8007f7a:	7812      	ldrb	r2, [r2, #0]
 8007f7c:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < nd / 2; ++j)
 8007f7e:	183b      	adds	r3, r7, r0
 8007f80:	183a      	adds	r2, r7, r0
 8007f82:	7812      	ldrb	r2, [r2, #0]
 8007f84:	3201      	adds	r2, #1
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	230c      	movs	r3, #12
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	220b      	movs	r2, #11
 8007f94:	18ba      	adds	r2, r7, r2
 8007f96:	7812      	ldrb	r2, [r2, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d3bc      	bcc.n	8007f16 <IPv4_to_s+0xbe>
	}
	// add dot
	if(i < 3)
 8007f9c:	230e      	movs	r3, #14
 8007f9e:	18fb      	adds	r3, r7, r3
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b02      	cmp	r3, #2
 8007fa4:	d80b      	bhi.n	8007fbe <IPv4_to_s+0x166>
	{
		s[idx++] = '.';
 8007fa6:	220f      	movs	r2, #15
 8007fa8:	18bb      	adds	r3, r7, r2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	18ba      	adds	r2, r7, r2
 8007fae:	1c59      	adds	r1, r3, #1
 8007fb0:	7011      	strb	r1, [r2, #0]
 8007fb2:	001a      	movs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	189b      	adds	r3, r3, r2
 8007fb8:	222e      	movs	r2, #46	; 0x2e
 8007fba:	701a      	strb	r2, [r3, #0]
 8007fbc:	e006      	b.n	8007fcc <IPv4_to_s+0x174>
	}
	else
	{
		s[idx] = 0;
 8007fbe:	230f      	movs	r3, #15
 8007fc0:	18fb      	adds	r3, r7, r3
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	18d3      	adds	r3, r2, r3
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; ++i)
 8007fcc:	220e      	movs	r2, #14
 8007fce:	18bb      	adds	r3, r7, r2
 8007fd0:	18ba      	adds	r2, r7, r2
 8007fd2:	7812      	ldrb	r2, [r2, #0]
 8007fd4:	3201      	adds	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	230e      	movs	r3, #14
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d800      	bhi.n	8007fe4 <IPv4_to_s+0x18c>
 8007fe2:	e74b      	b.n	8007e7c <IPv4_to_s+0x24>
	}
  }
	return idx;
 8007fe4:	230f      	movs	r3, #15
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	781b      	ldrb	r3, [r3, #0]
}
 8007fea:	0018      	movs	r0, r3
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b005      	add	sp, #20
 8007ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ff2 <start_receive_DMA>:

#define MIN(x,y) ((x < y)?(x):(y))


void start_receive_DMA(Serial485 *p485)
{
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b082      	sub	sp, #8
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
	set_direction_serial485(p485, DIR_RX);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	0018      	movs	r0, r3
 8008000:	f000 f868 	bl	80080d4 <set_direction_serial485>
    if(p485->rx_buffer_id == 0)
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	23c0      	movs	r3, #192	; 0xc0
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	5cd3      	ldrb	r3, [r2, r3]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <start_receive_DMA+0x34>
    {
		// start DMA
		HAL_UARTEx_ReceiveToIdle_DMA(p485->cfg.pSerial, p485->rx_dma_bufferA, LIB485_DMA_BUFFER_SIZE);
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	23c1      	movs	r3, #193	; 0xc1
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	58d3      	ldr	r3, [r2, r3]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	2280      	movs	r2, #128	; 0x80
 800801c:	0052      	lsls	r2, r2, #1
 800801e:	0018      	movs	r0, r3
 8008020:	f7fc fc89 	bl	8004936 <HAL_UARTEx_ReceiveToIdle_DMA>
    else
    {
		// start DMA
		HAL_UARTEx_ReceiveToIdle_DMA(p485->cfg.pSerial, p485->rx_dma_bufferB, LIB485_DMA_BUFFER_SIZE);
    }
}
 8008024:	e00b      	b.n	800803e <start_receive_DMA+0x4c>
		HAL_UARTEx_ReceiveToIdle_DMA(p485->cfg.pSerial, p485->rx_dma_bufferB, LIB485_DMA_BUFFER_SIZE);
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	23c1      	movs	r3, #193	; 0xc1
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	58d0      	ldr	r0, [r2, r3]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3301      	adds	r3, #1
 8008032:	33ff      	adds	r3, #255	; 0xff
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	0052      	lsls	r2, r2, #1
 8008038:	0019      	movs	r1, r3
 800803a:	f7fc fc7c 	bl	8004936 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	46bd      	mov	sp, r7
 8008042:	b002      	add	sp, #8
 8008044:	bd80      	pop	{r7, pc}
	...

08008048 <begin_serial485>:

void begin_serial485(Serial485 *p485, const Serial485_cfg_t* pCfg)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
	memcpy(&p485->cfg, pCfg, sizeof(Serial485_cfg_t));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	22c1      	movs	r2, #193	; 0xc1
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	4694      	mov	ip, r2
 800805a:	4463      	add	r3, ip
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	2214      	movs	r2, #20
 8008060:	0018      	movs	r0, r3
 8008062:	f002 fe8d 	bl	800ad80 <memcpy>
    p485->busy = 0;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <begin_serial485+0x80>)
 800806a:	2100      	movs	r1, #0
 800806c:	5499      	strb	r1, [r3, r2]

    // TRICK: store Serial485 pointer in AdvFeatureInit(uint32_t) member
	p485->cfg.pSerial->AdvancedInit.AdvFeatureInit = (uint32_t)(p485);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	23c1      	movs	r3, #193	; 0xc1
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	58d3      	ldr	r3, [r2, r3]
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	625a      	str	r2, [r3, #36]	; 0x24

    // init RX fifo
    kfifo_DMA_static_init(&p485->rx_ring_fifo, pCfg->rx_fifo_buf, pCfg->fifo_size, 0);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	22c6      	movs	r2, #198	; 0xc6
 800807e:	0092      	lsls	r2, r2, #2
 8008080:	1898      	adds	r0, r3, r2
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68d9      	ldr	r1, [r3, #12]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	8a1b      	ldrh	r3, [r3, #16]
 800808a:	001a      	movs	r2, r3
 800808c:	2300      	movs	r3, #0
 800808e:	f7fc fdf2 	bl	8004c76 <kfifo_DMA_static_init>

    // init command heads and sizes
    p485->command_in = 0;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a0d      	ldr	r2, [pc, #52]	; (80080cc <begin_serial485+0x84>)
 8008096:	2100      	movs	r1, #0
 8008098:	5499      	strb	r1, [r3, r2]
    p485->command_out = 0;
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	23d2      	movs	r3, #210	; 0xd2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	2100      	movs	r1, #0
 80080a2:	54d1      	strb	r1, [r2, r3]

	// for later IRQ use
    p485->dir = DIR_RX; // keep on RX
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <begin_serial485+0x88>)
 80080a8:	2100      	movs	r1, #0
 80080aa:	5499      	strb	r1, [r3, r2]
    set_direction_serial485(p485, DIR_RX);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2100      	movs	r1, #0
 80080b0:	0018      	movs	r0, r3
 80080b2:	f000 f80f 	bl	80080d4 <set_direction_serial485>
    p485->rx_buffer_id = 0;
 80080b6:	687a      	ldr	r2, [r7, #4]
 80080b8:	23c0      	movs	r3, #192	; 0xc0
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	2100      	movs	r1, #0
 80080be:	54d1      	strb	r1, [r2, r3]
    // start IDLE interrupt
//    __HAL_UART_ENABLE_IT(p485->cfg.pSerial, UART_IT_IDLE);
//    start_receive_DMA(p485);
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b002      	add	sp, #8
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	0000034a 	.word	0x0000034a
 80080cc:	00000349 	.word	0x00000349
 80080d0:	0000034b 	.word	0x0000034b

080080d4 <set_direction_serial485>:

void set_direction_serial485(Serial485 *p485, Serial485_direction_t dir)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	000a      	movs	r2, r1
 80080de:	1cfb      	adds	r3, r7, #3
 80080e0:	701a      	strb	r2, [r3, #0]
	//RE: receive; DE: write
	p485->dir = dir;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	1cfa      	adds	r2, r7, #3
 80080e6:	491a      	ldr	r1, [pc, #104]	; (8008150 <set_direction_serial485+0x7c>)
 80080e8:	7812      	ldrb	r2, [r2, #0]
 80080ea:	545a      	strb	r2, [r3, r1]
	switch(dir)
 80080ec:	1cfb      	adds	r3, r7, #3
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <set_direction_serial485+0x26>
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d00d      	beq.n	8008114 <set_direction_serial485+0x40>
 80080f8:	e019      	b.n	800812e <set_direction_serial485+0x5a>
	{
	case DIR_RX:
		HAL_GPIO_WritePin(p485->cfg.pin_RW.group, p485->cfg.pin_RW.pin, RE);
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	23c2      	movs	r3, #194	; 0xc2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	58d0      	ldr	r0, [r2, r3]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	23c3      	movs	r3, #195	; 0xc3
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	5ad3      	ldrh	r3, [r2, r3]
 800810a:	2200      	movs	r2, #0
 800810c:	0019      	movs	r1, r3
 800810e:	f7f9 fb62 	bl	80017d6 <HAL_GPIO_WritePin>
		break;
 8008112:	e019      	b.n	8008148 <set_direction_serial485+0x74>
	case DIR_TX:
		HAL_GPIO_WritePin(p485->cfg.pin_RW.group, p485->cfg.pin_RW.pin, DE);
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	23c2      	movs	r3, #194	; 0xc2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	58d0      	ldr	r0, [r2, r3]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	23c3      	movs	r3, #195	; 0xc3
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	5ad3      	ldrh	r3, [r2, r3]
 8008124:	2201      	movs	r2, #1
 8008126:	0019      	movs	r1, r3
 8008128:	f7f9 fb55 	bl	80017d6 <HAL_GPIO_WritePin>
		break;
 800812c:	e00c      	b.n	8008148 <set_direction_serial485+0x74>
	default:
		HAL_GPIO_WritePin(p485->cfg.pin_RW.group, p485->cfg.pin_RW.pin, RE);
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	23c2      	movs	r3, #194	; 0xc2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	58d0      	ldr	r0, [r2, r3]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	23c3      	movs	r3, #195	; 0xc3
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	5ad3      	ldrh	r3, [r2, r3]
 800813e:	2200      	movs	r2, #0
 8008140:	0019      	movs	r1, r3
 8008142:	f7f9 fb48 	bl	80017d6 <HAL_GPIO_WritePin>
		break;
 8008146:	46c0      	nop			; (mov r8, r8)
	}
}
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}
 8008150:	0000034b 	.word	0x0000034b

08008154 <send_serial485>:

void send_serial485(Serial485 *p485, const char *buffer_send, uint16_t len)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	1dbb      	adds	r3, r7, #6
 8008160:	801a      	strh	r2, [r3, #0]
	if(len == 0)
 8008162:	1dbb      	adds	r3, r7, #6
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <send_serial485+0x2a>
		len = strnlen(buffer_send, sizeof(p485->tx_dma_buffer));
 800816a:	2380      	movs	r3, #128	; 0x80
 800816c:	005a      	lsls	r2, r3, #1
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	0011      	movs	r1, r2
 8008172:	0018      	movs	r0, r3
 8008174:	f002 fe99 	bl	800aeaa <strnlen>
 8008178:	0002      	movs	r2, r0
 800817a:	1dbb      	adds	r3, r7, #6
 800817c:	801a      	strh	r2, [r3, #0]
	if(len == 0) return;
 800817e:	1dbb      	adds	r3, r7, #6
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d031      	beq.n	80081ea <send_serial485+0x96>

	set_direction_serial485(p485, DIR_TX);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2101      	movs	r1, #1
 800818a:	0018      	movs	r0, r3
 800818c:	f7ff ffa2 	bl	80080d4 <set_direction_serial485>
	memcpy(p485->tx_dma_buffer, buffer_send, len);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2280      	movs	r2, #128	; 0x80
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	1898      	adds	r0, r3, r2
 8008198:	1dbb      	adds	r3, r7, #6
 800819a:	881a      	ldrh	r2, [r3, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	0019      	movs	r1, r3
 80081a0:	f002 fdee 	bl	800ad80 <memcpy>
	uint32_t tickNow = HAL_GetTick();
 80081a4:	f7f8 fc66 	bl	8000a74 <HAL_GetTick>
 80081a8:	0003      	movs	r3, r0
 80081aa:	617b      	str	r3, [r7, #20]
	while((p485->busy == 1) && (HAL_GetTick() - tickNow < 100)); // at most wait for 100ms
 80081ac:	46c0      	nop			; (mov r8, r8)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4a10      	ldr	r2, [pc, #64]	; (80081f4 <send_serial485+0xa0>)
 80081b2:	5c9b      	ldrb	r3, [r3, r2]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d106      	bne.n	80081c6 <send_serial485+0x72>
 80081b8:	f7f8 fc5c 	bl	8000a74 <HAL_GetTick>
 80081bc:	0002      	movs	r2, r0
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	2b63      	cmp	r3, #99	; 0x63
 80081c4:	d9f3      	bls.n	80081ae <send_serial485+0x5a>
	p485->busy = 1; // clear this flag in TXE interrupt
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4a0a      	ldr	r2, [pc, #40]	; (80081f4 <send_serial485+0xa0>)
 80081ca:	2101      	movs	r1, #1
 80081cc:	5499      	strb	r1, [r3, r2]
    HAL_UART_Transmit_DMA(p485->cfg.pSerial, p485->tx_dma_buffer, (uint16_t)len);
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	23c1      	movs	r3, #193	; 0xc1
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	58d0      	ldr	r0, [r2, r3]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2280      	movs	r2, #128	; 0x80
 80081da:	0092      	lsls	r2, r2, #2
 80081dc:	1899      	adds	r1, r3, r2
 80081de:	1dbb      	adds	r3, r7, #6
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	001a      	movs	r2, r3
 80081e4:	f7fb fa6e 	bl	80036c4 <HAL_UART_Transmit_DMA>
 80081e8:	e000      	b.n	80081ec <send_serial485+0x98>
	if(len == 0) return;
 80081ea:	46c0      	nop			; (mov r8, r8)
    // when DMA interrupts, clear busy flags
}
 80081ec:	46bd      	mov	sp, r7
 80081ee:	b006      	add	sp, #24
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	0000034a 	.word	0x0000034a

080081f8 <read_command_from_serial485>:

int read_command_from_serial485(Serial485 *p485, char* buf, uint16_t bufsize)
{
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	1dbb      	adds	r3, r7, #6
 8008204:	801a      	strh	r2, [r3, #0]

	if(p485->command_in == p485->command_out)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4a2c      	ldr	r2, [pc, #176]	; (80082bc <read_command_from_serial485+0xc4>)
 800820a:	5c9a      	ldrb	r2, [r3, r2]
 800820c:	68f9      	ldr	r1, [r7, #12]
 800820e:	23d2      	movs	r3, #210	; 0xd2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	429a      	cmp	r2, r3
 8008216:	d049      	beq.n	80082ac <read_command_from_serial485+0xb4>
		goto NO_COMMAND;

//	uint8_t in = p485->command_in & LIB485_COMMAND_BUFFER_MASK;
	uint8_t out =  p485->command_out & LIB485_COMMAND_BUFFER_MASK;
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	23d2      	movs	r3, #210	; 0xd2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	5cd2      	ldrb	r2, [r2, r3]
 8008220:	2017      	movs	r0, #23
 8008222:	183b      	adds	r3, r7, r0
 8008224:	2107      	movs	r1, #7
 8008226:	400a      	ands	r2, r1
 8008228:	701a      	strb	r2, [r3, #0]
	uint16_t cmd_size = p485->command_sizes[out];
 800822a:	183b      	adds	r3, r7, r0
 800822c:	7819      	ldrb	r1, [r3, #0]
 800822e:	2414      	movs	r4, #20
 8008230:	193b      	adds	r3, r7, r4
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	319d      	adds	r1, #157	; 0x9d
 8008236:	31ff      	adds	r1, #255	; 0xff
 8008238:	0049      	lsls	r1, r1, #1
 800823a:	5a8a      	ldrh	r2, [r1, r2]
 800823c:	801a      	strh	r2, [r3, #0]
	++p485->command_out;
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	23d2      	movs	r3, #210	; 0xd2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	5cd3      	ldrb	r3, [r2, r3]
 8008246:	3301      	adds	r3, #1
 8008248:	b2d9      	uxtb	r1, r3
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	23d2      	movs	r3, #210	; 0xd2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	54d1      	strb	r1, [r2, r3]

	kfifo_get(&p485->rx_ring_fifo, buf, MIN(bufsize, cmd_size));
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	22c6      	movs	r2, #198	; 0xc6
 8008256:	0092      	lsls	r2, r2, #2
 8008258:	1898      	adds	r0, r3, r2
 800825a:	193b      	adds	r3, r7, r4
 800825c:	1dba      	adds	r2, r7, #6
 800825e:	8814      	ldrh	r4, [r2, #0]
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b299      	uxth	r1, r3
 8008264:	b2a2      	uxth	r2, r4
 8008266:	4291      	cmp	r1, r2
 8008268:	d900      	bls.n	800826c <read_command_from_serial485+0x74>
 800826a:	1c23      	adds	r3, r4, #0
 800826c:	b29b      	uxth	r3, r3
 800826e:	001a      	movs	r2, r3
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	0019      	movs	r1, r3
 8008274:	f7fc fd8f 	bl	8004d96 <__kfifo_get>
	// the buffer is too small
	if(bufsize < cmd_size)
 8008278:	1dba      	adds	r2, r7, #6
 800827a:	2114      	movs	r1, #20
 800827c:	187b      	adds	r3, r7, r1
 800827e:	8812      	ldrh	r2, [r2, #0]
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d20e      	bcs.n	80082a4 <read_command_from_serial485+0xac>
	{
		p485->rx_ring_fifo.out += cmd_size - bufsize; // force the ring buffer to drop oversize messages
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	23cb      	movs	r3, #203	; 0xcb
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	58d3      	ldr	r3, [r2, r3]
 800828e:	187a      	adds	r2, r7, r1
 8008290:	8811      	ldrh	r1, [r2, #0]
 8008292:	1dba      	adds	r2, r7, #6
 8008294:	8812      	ldrh	r2, [r2, #0]
 8008296:	1a8a      	subs	r2, r1, r2
 8008298:	1899      	adds	r1, r3, r2
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	23cb      	movs	r3, #203	; 0xcb
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	50d1      	str	r1, [r2, r3]
		goto NO_COMMAND;
 80082a2:	e004      	b.n	80082ae <read_command_from_serial485+0xb6>
	}

	// return size of the command
	return cmd_size;
 80082a4:	2314      	movs	r3, #20
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <read_command_from_serial485+0xba>
		goto NO_COMMAND;
 80082ac:	46c0      	nop			; (mov r8, r8)
NO_COMMAND:
	//return < 0 when error
	return -1;
 80082ae:	2301      	movs	r3, #1
 80082b0:	425b      	negs	r3, r3
}
 80082b2:	0018      	movs	r0, r3
 80082b4:	46bd      	mov	sp, r7
 80082b6:	b007      	add	sp, #28
 80082b8:	bd90      	pop	{r4, r7, pc}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	00000349 	.word	0x00000349

080082c0 <HAL_UARTEx_RxEventCallback>:
  *               reception buffer until which, data are available)
  * @retval None
  */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	000a      	movs	r2, r1
 80082ca:	1cbb      	adds	r3, r7, #2
 80082cc:	801a      	strh	r2, [r3, #0]
	Serial485* p485_ = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	60bb      	str	r3, [r7, #8]
	if(p485_ == p485)
 80082d4:	4b26      	ldr	r3, [pc, #152]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d144      	bne.n	8008368 <HAL_UARTEx_RxEventCallback+0xa8>
	{
		uint8_t* recved_buf = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
		// restart DMA
		if(p485->rx_buffer_id == 0)
 80082e2:	4b23      	ldr	r3, [pc, #140]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	23c0      	movs	r3, #192	; 0xc0
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	5cd3      	ldrb	r3, [r2, r3]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d109      	bne.n	8008304 <HAL_UARTEx_RxEventCallback+0x44>
		{
			recved_buf = p485->rx_dma_bufferA;
 80082f0:	4b1f      	ldr	r3, [pc, #124]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
			p485->rx_buffer_id = 1;
 80082f6:	4b1e      	ldr	r3, [pc, #120]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	23c0      	movs	r3, #192	; 0xc0
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	2101      	movs	r1, #1
 8008300:	54d1      	strb	r1, [r2, r3]
 8008302:	e00a      	b.n	800831a <HAL_UARTEx_RxEventCallback+0x5a>
		}
		else
		{
			recved_buf = p485->rx_dma_bufferB;
 8008304:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	33ff      	adds	r3, #255	; 0xff
 800830c:	60fb      	str	r3, [r7, #12]
			p485->rx_buffer_id = 0;
 800830e:	4b18      	ldr	r3, [pc, #96]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	23c0      	movs	r3, #192	; 0xc0
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	2100      	movs	r1, #0
 8008318:	54d1      	strb	r1, [r2, r3]
		}
		start_receive_DMA(p485);
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	0018      	movs	r0, r3
 8008320:	f7ff fe67 	bl	8007ff2 <start_receive_DMA>

		p485->command_sizes[(p485->command_in & LIB485_COMMAND_BUFFER_MASK)] = Size;
 8008324:	4b12      	ldr	r3, [pc, #72]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4911      	ldr	r1, [pc, #68]	; (8008374 <HAL_UARTEx_RxEventCallback+0xb4>)
 800832e:	5c5b      	ldrb	r3, [r3, r1]
 8008330:	0019      	movs	r1, r3
 8008332:	2307      	movs	r3, #7
 8008334:	400b      	ands	r3, r1
 8008336:	339d      	adds	r3, #157	; 0x9d
 8008338:	33ff      	adds	r3, #255	; 0xff
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	1cb9      	adds	r1, r7, #2
 800833e:	8809      	ldrh	r1, [r1, #0]
 8008340:	5299      	strh	r1, [r3, r2]
		++p485->command_in;
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a0b      	ldr	r2, [pc, #44]	; (8008374 <HAL_UARTEx_RxEventCallback+0xb4>)
 8008348:	5c9a      	ldrb	r2, [r3, r2]
 800834a:	3201      	adds	r2, #1
 800834c:	b2d1      	uxtb	r1, r2
 800834e:	4a09      	ldr	r2, [pc, #36]	; (8008374 <HAL_UARTEx_RxEventCallback+0xb4>)
 8008350:	5499      	strb	r1, [r3, r2]

		// copy to kfifo
		kfifo_put(&p485->rx_ring_fifo, recved_buf, Size);
 8008352:	4b07      	ldr	r3, [pc, #28]	; (8008370 <HAL_UARTEx_RxEventCallback+0xb0>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	22c6      	movs	r2, #198	; 0xc6
 8008358:	0092      	lsls	r2, r2, #2
 800835a:	1898      	adds	r0, r3, r2
 800835c:	1cbb      	adds	r3, r7, #2
 800835e:	881a      	ldrh	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	0019      	movs	r1, r3
 8008364:	f7fc fcc5 	bl	8004cf2 <__kfifo_put>

		// mark command ends

	}
}
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	b004      	add	sp, #16
 800836e:	bd80      	pop	{r7, pc}
 8008370:	20000680 	.word	0x20000680
 8008374:	00000349 	.word	0x00000349

08008378 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	Serial485* p485_ = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008384:	60fb      	str	r3, [r7, #12]
	if(p485_ == p485)
 8008386:	4b0a      	ldr	r3, [pc, #40]	; (80083b0 <HAL_UART_TxCpltCallback+0x38>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	429a      	cmp	r2, r3
 800838e:	d10a      	bne.n	80083a6 <HAL_UART_TxCpltCallback+0x2e>
	{
		p485->busy = 0;
 8008390:	4b07      	ldr	r3, [pc, #28]	; (80083b0 <HAL_UART_TxCpltCallback+0x38>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a07      	ldr	r2, [pc, #28]	; (80083b4 <HAL_UART_TxCpltCallback+0x3c>)
 8008396:	2100      	movs	r1, #0
 8008398:	5499      	strb	r1, [r3, r2]
		set_direction_serial485(p485, DIR_RX); //switch back to listen mode
 800839a:	4b05      	ldr	r3, [pc, #20]	; (80083b0 <HAL_UART_TxCpltCallback+0x38>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2100      	movs	r1, #0
 80083a0:	0018      	movs	r0, r3
 80083a2:	f7ff fe97 	bl	80080d4 <set_direction_serial485>
	}
}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	46bd      	mov	sp, r7
 80083aa:	b004      	add	sp, #16
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	46c0      	nop			; (mov r8, r8)
 80083b0:	20000680 	.word	0x20000680
 80083b4:	0000034a 	.word	0x0000034a

080083b8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	// restart DMA receiving when error occures
	// restart DMA
	Serial485* p485_ = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	60fb      	str	r3, [r7, #12]
	if(p485 == p485_)
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <HAL_UART_ErrorCallback+0x34>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d109      	bne.n	80083e4 <HAL_UART_ErrorCallback+0x2c>
	{
		p485->busy = 0;
 80083d0:	4b06      	ldr	r3, [pc, #24]	; (80083ec <HAL_UART_ErrorCallback+0x34>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a06      	ldr	r2, [pc, #24]	; (80083f0 <HAL_UART_ErrorCallback+0x38>)
 80083d6:	2100      	movs	r1, #0
 80083d8:	5499      	strb	r1, [r3, r2]
		start_receive_DMA(p485);
 80083da:	4b04      	ldr	r3, [pc, #16]	; (80083ec <HAL_UART_ErrorCallback+0x34>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	0018      	movs	r0, r3
 80083e0:	f7ff fe07 	bl	8007ff2 <start_receive_DMA>
	}
}
 80083e4:	46c0      	nop			; (mov r8, r8)
 80083e6:	46bd      	mov	sp, r7
 80083e8:	b004      	add	sp, #16
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20000680 	.word	0x20000680
 80083f0:	0000034a 	.word	0x0000034a

080083f4 <fn_ping>:




int fn_ping(uint8_t argc, char** argv, char* ret)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
 80083fe:	230f      	movs	r3, #15
 8008400:	18fb      	adds	r3, r7, r3
 8008402:	1c02      	adds	r2, r0, #0
 8008404:	701a      	strb	r2, [r3, #0]
	ret[0] = '?';
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	223f      	movs	r2, #63	; 0x3f
 800840a:	701a      	strb	r2, [r3, #0]
	ret[1] = '\r';
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3301      	adds	r3, #1
 8008410:	220d      	movs	r2, #13
 8008412:	701a      	strb	r2, [r3, #0]
	ret[2] = 0;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3302      	adds	r3, #2
 8008418:	2200      	movs	r2, #0
 800841a:	701a      	strb	r2, [r3, #0]
	return 0;
 800841c:	2300      	movs	r3, #0
}
 800841e:	0018      	movs	r0, r3
 8008420:	46bd      	mov	sp, r7
 8008422:	b004      	add	sp, #16
 8008424:	bd80      	pop	{r7, pc}
	...

08008428 <fn_get_ant_assignment>:


int fn_get_ant_assignment(uint8_t argc, char** argv, char* ret)
{
 8008428:	b5b0      	push	{r4, r5, r7, lr}
 800842a:	b088      	sub	sp, #32
 800842c:	af00      	add	r7, sp, #0
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
 8008432:	210f      	movs	r1, #15
 8008434:	187b      	adds	r3, r7, r1
 8008436:	1c02      	adds	r2, r0, #0
 8008438:	701a      	strb	r2, [r3, #0]
	if(argc < 2) goto error;
 800843a:	187b      	adds	r3, r7, r1
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d93f      	bls.n	80084c2 <fn_get_ant_assignment+0x9a>
	uint32_t radionum;
	err_t err;
	err = my_atou(argv[1], 1, &radionum);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	3304      	adds	r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	251f      	movs	r5, #31
 800844a:	197c      	adds	r4, r7, r5
 800844c:	2218      	movs	r2, #24
 800844e:	18ba      	adds	r2, r7, r2
 8008450:	2101      	movs	r1, #1
 8008452:	0018      	movs	r0, r3
 8008454:	f000 fab4 	bl	80089c0 <my_atou>
 8008458:	0003      	movs	r3, r0
 800845a:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 800845c:	197b      	adds	r3, r7, r5
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b25b      	sxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d12f      	bne.n	80084c6 <fn_get_ant_assignment+0x9e>
	if(radionum >= 1 && radionum <= N_SELECTORS)
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d02e      	beq.n	80084ca <fn_get_ant_assignment+0xa2>
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	2b02      	cmp	r3, #2
 8008470:	d82b      	bhi.n	80084ca <fn_get_ant_assignment+0xa2>
	{
		uint8_t antnums[N_SELECTORS];
		get_Antenna_real_BCDs(antnums, N_SELECTORS);
 8008472:	2414      	movs	r4, #20
 8008474:	193b      	adds	r3, r7, r4
 8008476:	2102      	movs	r1, #2
 8008478:	0018      	movs	r0, r3
 800847a:	f001 fe9b 	bl	800a1b4 <get_Antenna_real_BCDs>
		strcpy(ret, "AUX");
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <fn_get_ant_assignment+0xb0>)
 8008482:	0010      	movs	r0, r2
 8008484:	0019      	movs	r1, r3
 8008486:	2304      	movs	r3, #4
 8008488:	001a      	movs	r2, r3
 800848a:	f002 fc79 	bl	800ad80 <memcpy>
		ret[3] = '0' + radionum;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	b2da      	uxtb	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3303      	adds	r3, #3
 8008496:	3230      	adds	r2, #48	; 0x30
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]
		ret[4] = '0' + antnums[radionum-1];
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	3b01      	subs	r3, #1
 80084a0:	193a      	adds	r2, r7, r4
 80084a2:	5cd2      	ldrb	r2, [r2, r3]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	3304      	adds	r3, #4
 80084a8:	3230      	adds	r2, #48	; 0x30
 80084aa:	b2d2      	uxtb	r2, r2
 80084ac:	701a      	strb	r2, [r3, #0]
		ret[5] = '\r';
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3305      	adds	r3, #5
 80084b2:	220d      	movs	r2, #13
 80084b4:	701a      	strb	r2, [r3, #0]
		ret[6] = 0;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3306      	adds	r3, #6
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
		return 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	e005      	b.n	80084ce <fn_get_ant_assignment+0xa6>
	if(argc < 2) goto error;
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	e002      	b.n	80084cc <fn_get_ant_assignment+0xa4>
	if(err != ERR_OK) goto error;
 80084c6:	46c0      	nop			; (mov r8, r8)
 80084c8:	e000      	b.n	80084cc <fn_get_ant_assignment+0xa4>
	}

error:
 80084ca:	46c0      	nop			; (mov r8, r8)
	return 1;
 80084cc:	2301      	movs	r3, #1
}
 80084ce:	0018      	movs	r0, r3
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b008      	add	sp, #32
 80084d4:	bdb0      	pop	{r4, r5, r7, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	0800b328 	.word	0x0800b328

080084dc <fn_set_ant_assignment>:



int fn_set_ant_assignment(uint8_t argc, char** argv, char* ret)
{
 80084dc:	b5b0      	push	{r4, r5, r7, lr}
 80084de:	b088      	sub	sp, #32
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
 80084e6:	210f      	movs	r1, #15
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	1c02      	adds	r2, r0, #0
 80084ec:	701a      	strb	r2, [r3, #0]
	if(argc < 3) goto error;
 80084ee:	187b      	adds	r3, r7, r1
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d800      	bhi.n	80084f8 <fn_set_ant_assignment+0x1c>
 80084f6:	e078      	b.n	80085ea <fn_set_ant_assignment+0x10e>
	uint32_t radionum;
	uint32_t antnum = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &radionum);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3304      	adds	r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	251e      	movs	r5, #30
 8008504:	197c      	adds	r4, r7, r5
 8008506:	2218      	movs	r2, #24
 8008508:	18ba      	adds	r2, r7, r2
 800850a:	2101      	movs	r1, #1
 800850c:	0018      	movs	r0, r3
 800850e:	f000 fa57 	bl	80089c0 <my_atou>
 8008512:	0003      	movs	r3, r0
 8008514:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8008516:	002a      	movs	r2, r5
 8008518:	18bb      	adds	r3, r7, r2
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	b25b      	sxtb	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d165      	bne.n	80085ee <fn_set_ant_assignment+0x112>
	err = my_atou(argv[2], 2, &antnum);
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	3308      	adds	r3, #8
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	18bc      	adds	r4, r7, r2
 800852a:	2214      	movs	r2, #20
 800852c:	18ba      	adds	r2, r7, r2
 800852e:	2102      	movs	r1, #2
 8008530:	0018      	movs	r0, r3
 8008532:	f000 fa45 	bl	80089c0 <my_atou>
 8008536:	0003      	movs	r3, r0
 8008538:	7023      	strb	r3, [r4, #0]
	if(radionum >= 1 && radionum <= N_SELECTORS && antnum <= N_ANTENNAS)
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d058      	beq.n	80085f2 <fn_set_ant_assignment+0x116>
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d855      	bhi.n	80085f2 <fn_set_ant_assignment+0x116>
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2b06      	cmp	r3, #6
 800854a:	d852      	bhi.n	80085f2 <fn_set_ant_assignment+0x116>
	{
		/* send set request */
		uint8_t antnums[N_SELECTORS] = {0};
 800854c:	2310      	movs	r3, #16
 800854e:	18fb      	adds	r3, r7, r3
 8008550:	2200      	movs	r2, #0
 8008552:	801a      	strh	r2, [r3, #0]
		for(uint8_t iRadio = 0; iRadio < N_SELECTORS; ++iRadio)
 8008554:	231f      	movs	r3, #31
 8008556:	18fb      	adds	r3, r7, r3
 8008558:	2200      	movs	r2, #0
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e014      	b.n	8008588 <fn_set_ant_assignment+0xac>
		{
			antnums[iRadio] = Selector[iRadio].sel;
 800855e:	241f      	movs	r4, #31
 8008560:	193b      	adds	r3, r7, r4
 8008562:	781a      	ldrb	r2, [r3, #0]
 8008564:	193b      	adds	r3, r7, r4
 8008566:	7819      	ldrb	r1, [r3, #0]
 8008568:	4825      	ldr	r0, [pc, #148]	; (8008600 <fn_set_ant_assignment+0x124>)
 800856a:	0013      	movs	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	18c3      	adds	r3, r0, r3
 8008574:	3318      	adds	r3, #24
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	2310      	movs	r3, #16
 800857a:	18fb      	adds	r3, r7, r3
 800857c:	545a      	strb	r2, [r3, r1]
		for(uint8_t iRadio = 0; iRadio < N_SELECTORS; ++iRadio)
 800857e:	193b      	adds	r3, r7, r4
 8008580:	193a      	adds	r2, r7, r4
 8008582:	7812      	ldrb	r2, [r2, #0]
 8008584:	3201      	adds	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	231f      	movs	r3, #31
 800858a:	18fb      	adds	r3, r7, r3
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d9e5      	bls.n	800855e <fn_set_ant_assignment+0x82>
		}
		antnums[radionum - 1] = antnum;
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	3b01      	subs	r3, #1
 8008598:	b2d1      	uxtb	r1, r2
 800859a:	2010      	movs	r0, #16
 800859c:	183a      	adds	r2, r7, r0
 800859e:	54d1      	strb	r1, [r2, r3]
		switch_Antenna(antnums, N_SELECTORS);
 80085a0:	183b      	adds	r3, r7, r0
 80085a2:	2102      	movs	r1, #2
 80085a4:	0018      	movs	r0, r3
 80085a6:	f001 fd3b 	bl	800a020 <switch_Antenna>

		// print antnum to bufCMDRet
		strcpy(ret, "AUX");
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	4b15      	ldr	r3, [pc, #84]	; (8008604 <fn_set_ant_assignment+0x128>)
 80085ae:	0010      	movs	r0, r2
 80085b0:	0019      	movs	r1, r3
 80085b2:	2304      	movs	r3, #4
 80085b4:	001a      	movs	r2, r3
 80085b6:	f002 fbe3 	bl	800ad80 <memcpy>
		ret[3] = '0' + radionum;
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3303      	adds	r3, #3
 80085c2:	3230      	adds	r2, #48	; 0x30
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	701a      	strb	r2, [r3, #0]
		ret[4] = '0' + antnum;
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3304      	adds	r3, #4
 80085d0:	3230      	adds	r2, #48	; 0x30
 80085d2:	b2d2      	uxtb	r2, r2
 80085d4:	701a      	strb	r2, [r3, #0]
		ret[5] = '\r';
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	3305      	adds	r3, #5
 80085da:	220d      	movs	r2, #13
 80085dc:	701a      	strb	r2, [r3, #0]
		ret[6] = 0;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3306      	adds	r3, #6
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]
		return 0;
 80085e6:	2300      	movs	r3, #0
 80085e8:	e005      	b.n	80085f6 <fn_set_ant_assignment+0x11a>
	if(argc < 3) goto error;
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	e002      	b.n	80085f4 <fn_set_ant_assignment+0x118>
	if(err != ERR_OK) goto error;
 80085ee:	46c0      	nop			; (mov r8, r8)
 80085f0:	e000      	b.n	80085f4 <fn_set_ant_assignment+0x118>
	}

error:
 80085f2:	46c0      	nop			; (mov r8, r8)
	return 1;
 80085f4:	2301      	movs	r3, #1
}
 80085f6:	0018      	movs	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	b008      	add	sp, #32
 80085fc:	bdb0      	pop	{r4, r5, r7, pc}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	200019c4 	.word	0x200019c4
 8008604:	0800b328 	.word	0x0800b328

08008608 <fn_set_ant_name>:


int fn_set_ant_name(uint8_t argc, char** argv, char* ret)
{
 8008608:	b5b0      	push	{r4, r5, r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af00      	add	r7, sp, #0
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	210f      	movs	r1, #15
 8008614:	187b      	adds	r3, r7, r1
 8008616:	1c02      	adds	r2, r0, #0
 8008618:	701a      	strb	r2, [r3, #0]
	if(argc < 3) goto error;
 800861a:	187b      	adds	r3, r7, r1
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d955      	bls.n	80086ce <fn_set_ant_name+0xc6>
	uint32_t antnum = 0;
 8008622:	2300      	movs	r3, #0
 8008624:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &antnum);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3304      	adds	r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	251f      	movs	r5, #31
 800862e:	197c      	adds	r4, r7, r5
 8008630:	2214      	movs	r2, #20
 8008632:	18ba      	adds	r2, r7, r2
 8008634:	2101      	movs	r1, #1
 8008636:	0018      	movs	r0, r3
 8008638:	f000 f9c2 	bl	80089c0 <my_atou>
 800863c:	0003      	movs	r3, r0
 800863e:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8008640:	197b      	adds	r3, r7, r5
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	b25b      	sxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d143      	bne.n	80086d2 <fn_set_ant_name+0xca>

	if(antnum > 0 && antnum <= N_ANTENNAS)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d042      	beq.n	80086d6 <fn_set_ant_name+0xce>
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b06      	cmp	r3, #6
 8008654:	d83f      	bhi.n	80086d6 <fn_set_ant_name+0xce>
	{
		// capture target ant name
		char* sLabelSaved = cfg.sAntNames[antnum-1];
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	3b01      	subs	r3, #1
 800865a:	011b      	lsls	r3, r3, #4
 800865c:	3308      	adds	r3, #8
 800865e:	001a      	movs	r2, r3
 8008660:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <fn_set_ant_name+0xdc>)
 8008662:	18d3      	adds	r3, r2, r3
 8008664:	3302      	adds	r3, #2
 8008666:	61bb      	str	r3, [r7, #24]
		strlcpy(sLabelSaved, argv[2], MAX_LEN_ANT_LABEL);
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	3308      	adds	r3, #8
 800866c:	6819      	ldr	r1, [r3, #0]
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2210      	movs	r2, #16
 8008672:	0018      	movs	r0, r3
 8008674:	f002 fbb8 	bl	800ade8 <strlcpy>
		sLabelSaved[MAX_LEN_ANT_LABEL - 1] = 0; // terminate the string
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	330f      	adds	r3, #15
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]
		// print antnum to bufCMDRet
		strcpy(ret, "NAME");
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	4b19      	ldr	r3, [pc, #100]	; (80086e8 <fn_set_ant_name+0xe0>)
 8008684:	0010      	movs	r0, r2
 8008686:	0019      	movs	r1, r3
 8008688:	2305      	movs	r3, #5
 800868a:	001a      	movs	r2, r3
 800868c:	f002 fb78 	bl	800ad80 <memcpy>
		ret[4] = '0' + antnum;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	b2da      	uxtb	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	3230      	adds	r2, #48	; 0x30
 800869a:	b2d2      	uxtb	r2, r2
 800869c:	701a      	strb	r2, [r3, #0]
		strcpy(ret + 5, sLabelSaved);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	3305      	adds	r3, #5
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	0011      	movs	r1, r2
 80086a6:	0018      	movs	r0, r3
 80086a8:	f002 fb96 	bl	800add8 <strcpy>
		strcat(ret, "\r");
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	0018      	movs	r0, r3
 80086b0:	f7f7 fd34 	bl	800011c <strlen>
 80086b4:	0003      	movs	r3, r0
 80086b6:	001a      	movs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	189a      	adds	r2, r3, r2
 80086bc:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <fn_set_ant_name+0xe4>)
 80086be:	0010      	movs	r0, r2
 80086c0:	0019      	movs	r1, r3
 80086c2:	2302      	movs	r3, #2
 80086c4:	001a      	movs	r2, r3
 80086c6:	f002 fb5b 	bl	800ad80 <memcpy>
		return 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	e005      	b.n	80086da <fn_set_ant_name+0xd2>
	if(argc < 3) goto error;
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	e002      	b.n	80086d8 <fn_set_ant_name+0xd0>
	if(err != ERR_OK) goto error;
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	e000      	b.n	80086d8 <fn_set_ant_name+0xd0>
	}

error:
 80086d6:	46c0      	nop			; (mov r8, r8)
	return 1;
 80086d8:	2301      	movs	r3, #1
}
 80086da:	0018      	movs	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	b008      	add	sp, #32
 80086e0:	bdb0      	pop	{r4, r5, r7, pc}
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	2000136c 	.word	0x2000136c
 80086e8:	0800b32c 	.word	0x0800b32c
 80086ec:	0800b334 	.word	0x0800b334

080086f0 <fn_get_ant_name>:

int fn_get_ant_name(uint8_t argc, char** argv, char* ret)
{
 80086f0:	b5b0      	push	{r4, r5, r7, lr}
 80086f2:	b088      	sub	sp, #32
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60b9      	str	r1, [r7, #8]
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	210f      	movs	r1, #15
 80086fc:	187b      	adds	r3, r7, r1
 80086fe:	1c02      	adds	r2, r0, #0
 8008700:	701a      	strb	r2, [r3, #0]
	if(argc < 2) goto error;
 8008702:	187b      	adds	r3, r7, r1
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d94d      	bls.n	80087a6 <fn_get_ant_name+0xb6>
	uint32_t antnum = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &antnum);
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	3304      	adds	r3, #4
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	251f      	movs	r5, #31
 8008716:	197c      	adds	r4, r7, r5
 8008718:	2214      	movs	r2, #20
 800871a:	18ba      	adds	r2, r7, r2
 800871c:	2101      	movs	r1, #1
 800871e:	0018      	movs	r0, r3
 8008720:	f000 f94e 	bl	80089c0 <my_atou>
 8008724:	0003      	movs	r3, r0
 8008726:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8008728:	197b      	adds	r3, r7, r5
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	b25b      	sxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d13b      	bne.n	80087aa <fn_get_ant_name+0xba>

	if(antnum > 0 && antnum <= N_ANTENNAS)
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d03a      	beq.n	80087ae <fn_get_ant_name+0xbe>
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b06      	cmp	r3, #6
 800873c:	d837      	bhi.n	80087ae <fn_get_ant_name+0xbe>
	{
		// capture target ant name
		char* sLabelSaved = cfg.sAntNames[antnum-1];
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	3b01      	subs	r3, #1
 8008742:	011b      	lsls	r3, r3, #4
 8008744:	3308      	adds	r3, #8
 8008746:	001a      	movs	r2, r3
 8008748:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <fn_get_ant_name+0xcc>)
 800874a:	18d3      	adds	r3, r2, r3
 800874c:	3302      	adds	r3, #2
 800874e:	61bb      	str	r3, [r7, #24]
//		strlcpy(sLabelSaved, argv[2], MAX_LEN_ANT_LABEL);
		sLabelSaved[MAX_LEN_ANT_LABEL - 1] = 0; // terminate the string
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	330f      	adds	r3, #15
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
		// print antnum to bufCMDRet
		strcpy(ret, "NAME");
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	4b19      	ldr	r3, [pc, #100]	; (80087c0 <fn_get_ant_name+0xd0>)
 800875c:	0010      	movs	r0, r2
 800875e:	0019      	movs	r1, r3
 8008760:	2305      	movs	r3, #5
 8008762:	001a      	movs	r2, r3
 8008764:	f002 fb0c 	bl	800ad80 <memcpy>
		ret[4] = '0' + antnum;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	3230      	adds	r2, #48	; 0x30
 8008772:	b2d2      	uxtb	r2, r2
 8008774:	701a      	strb	r2, [r3, #0]
		strcpy(ret + 5, sLabelSaved);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	3305      	adds	r3, #5
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	0011      	movs	r1, r2
 800877e:	0018      	movs	r0, r3
 8008780:	f002 fb2a 	bl	800add8 <strcpy>
		strcat(ret, "\r");
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	0018      	movs	r0, r3
 8008788:	f7f7 fcc8 	bl	800011c <strlen>
 800878c:	0003      	movs	r3, r0
 800878e:	001a      	movs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	189a      	adds	r2, r3, r2
 8008794:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <fn_get_ant_name+0xd4>)
 8008796:	0010      	movs	r0, r2
 8008798:	0019      	movs	r1, r3
 800879a:	2302      	movs	r3, #2
 800879c:	001a      	movs	r2, r3
 800879e:	f002 faef 	bl	800ad80 <memcpy>
		return 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e005      	b.n	80087b2 <fn_get_ant_name+0xc2>
	if(argc < 2) goto error;
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	e002      	b.n	80087b0 <fn_get_ant_name+0xc0>
	if(err != ERR_OK) goto error;
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	e000      	b.n	80087b0 <fn_get_ant_name+0xc0>
	}

error:
 80087ae:	46c0      	nop			; (mov r8, r8)
	return 1;
 80087b0:	2301      	movs	r3, #1
}
 80087b2:	0018      	movs	r0, r3
 80087b4:	46bd      	mov	sp, r7
 80087b6:	b008      	add	sp, #32
 80087b8:	bdb0      	pop	{r4, r5, r7, pc}
 80087ba:	46c0      	nop			; (mov r8, r8)
 80087bc:	2000136c 	.word	0x2000136c
 80087c0:	0800b32c 	.word	0x0800b32c
 80087c4:	0800b334 	.word	0x0800b334

080087c8 <parse_command_OTRSP>:
};



int parse_command_OTRSP(const char* s, uint16_t len, char* ret)
{
 80087c8:	b590      	push	{r4, r7, lr}
 80087ca:	b08b      	sub	sp, #44	; 0x2c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	200a      	movs	r0, #10
 80087d4:	183b      	adds	r3, r7, r0
 80087d6:	1c0a      	adds	r2, r1, #0
 80087d8:	801a      	strh	r2, [r3, #0]

    uint32_t i  = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	627b      	str	r3, [r7, #36]	; 0x24

    static char buf[16] = {0};
    char* pbuf = buf;
 80087de:	4b74      	ldr	r3, [pc, #464]	; (80089b0 <parse_command_OTRSP+0x1e8>)
 80087e0:	623b      	str	r3, [r7, #32]

    size_t argc = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	61fb      	str	r3, [r7, #28]
    static char* argv[4];

    if(len == 0)
 80087e6:	0004      	movs	r4, r0
 80087e8:	183b      	adds	r3, r7, r0
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d110      	bne.n	8008812 <parse_command_OTRSP+0x4a>
    	len = strlen(s);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	0018      	movs	r0, r3
 80087f4:	f7f7 fc92 	bl	800011c <strlen>
 80087f8:	0002      	movs	r2, r0
 80087fa:	193b      	adds	r3, r7, r4
 80087fc:	801a      	strh	r2, [r3, #0]

    // skip first invalid chars
    while((len > 0)
 80087fe:	e008      	b.n	8008812 <parse_command_OTRSP+0x4a>
    				(*s >= 'A'  && *s <= 'Z')
					|| (*s == '?')
				)
		 )
    {
        ++s;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3301      	adds	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]
        --len;
 8008806:	220a      	movs	r2, #10
 8008808:	18bb      	adds	r3, r7, r2
 800880a:	18ba      	adds	r2, r7, r2
 800880c:	8812      	ldrh	r2, [r2, #0]
 800880e:	3a01      	subs	r2, #1
 8008810:	801a      	strh	r2, [r3, #0]
    while((len > 0)
 8008812:	230a      	movs	r3, #10
 8008814:	18fb      	adds	r3, r7, r3
 8008816:	881b      	ldrh	r3, [r3, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00b      	beq.n	8008834 <parse_command_OTRSP+0x6c>
    				(*s >= 'A'  && *s <= 'Z')
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	781b      	ldrb	r3, [r3, #0]
    		&& !(
 8008820:	2b40      	cmp	r3, #64	; 0x40
 8008822:	d903      	bls.n	800882c <parse_command_OTRSP+0x64>
    				(*s >= 'A'  && *s <= 'Z')
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b5a      	cmp	r3, #90	; 0x5a
 800882a:	d903      	bls.n	8008834 <parse_command_OTRSP+0x6c>
					|| (*s == '?')
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	781b      	ldrb	r3, [r3, #0]
    		&& !(
 8008830:	2b3f      	cmp	r3, #63	; 0x3f
 8008832:	d1e5      	bne.n	8008800 <parse_command_OTRSP+0x38>
    }
    if(len == 0)
 8008834:	230a      	movs	r3, #10
 8008836:	18fb      	adds	r3, r7, r3
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d100      	bne.n	8008840 <parse_command_OTRSP+0x78>
 800883e:	e0aa      	b.n	8008996 <parse_command_OTRSP+0x1ce>


    /* build argv string */
    // 1.read command body
    // detect ? and alphabets
    argv[0] = buf;
 8008840:	4b5c      	ldr	r3, [pc, #368]	; (80089b4 <parse_command_OTRSP+0x1ec>)
 8008842:	4a5b      	ldr	r2, [pc, #364]	; (80089b0 <parse_command_OTRSP+0x1e8>)
 8008844:	601a      	str	r2, [r3, #0]
    while((len > 0)
 8008846:	e00e      	b.n	8008866 <parse_command_OTRSP+0x9e>
    				(*s >= 'A'  && *s <= 'Z')
					|| (*s == '?')
				)
		  )
    {
    	--len;
 8008848:	220a      	movs	r2, #10
 800884a:	18bb      	adds	r3, r7, r2
 800884c:	18ba      	adds	r2, r7, r2
 800884e:	8812      	ldrh	r2, [r2, #0]
 8008850:	3a01      	subs	r2, #1
 8008852:	801a      	strh	r2, [r3, #0]
    	*(pbuf++) = *s;
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	623a      	str	r2, [r7, #32]
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	7812      	ldrb	r2, [r2, #0]
 800885e:	701a      	strb	r2, [r3, #0]
    	++s;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
    while((len > 0)
 8008866:	230a      	movs	r3, #10
 8008868:	18fb      	adds	r3, r7, r3
 800886a:	881b      	ldrh	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <parse_command_OTRSP+0xc0>
    				(*s >= 'A'  && *s <= 'Z')
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	781b      	ldrb	r3, [r3, #0]
    		&& (
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d903      	bls.n	8008880 <parse_command_OTRSP+0xb8>
    				(*s >= 'A'  && *s <= 'Z')
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b5a      	cmp	r3, #90	; 0x5a
 800887e:	d9e3      	bls.n	8008848 <parse_command_OTRSP+0x80>
					|| (*s == '?')
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	2b3f      	cmp	r3, #63	; 0x3f
 8008886:	d0df      	beq.n	8008848 <parse_command_OTRSP+0x80>
    }
    if(pbuf == buf)
 8008888:	6a3a      	ldr	r2, [r7, #32]
 800888a:	4b49      	ldr	r3, [pc, #292]	; (80089b0 <parse_command_OTRSP+0x1e8>)
 800888c:	429a      	cmp	r2, r3
 800888e:	d100      	bne.n	8008892 <parse_command_OTRSP+0xca>
 8008890:	e083      	b.n	800899a <parse_command_OTRSP+0x1d2>
    	goto bad_command;
    *(pbuf++)= 0; // terminate the command
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	1c5a      	adds	r2, r3, #1
 8008896:	623a      	str	r2, [r7, #32]
 8008898:	2200      	movs	r2, #0
 800889a:	701a      	strb	r2, [r3, #0]
    ++argc;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3301      	adds	r3, #1
 80088a0:	61fb      	str	r3, [r7, #28]
    // detect number arguments, each digit takes as 1 argument (if exists)
    while(len > 0 && argc < 4)
 80088a2:	e040      	b.n	8008926 <parse_command_OTRSP+0x15e>
    {
    	// skip spaces between command and oprands
		while((len > 0) && (*s == ' ' || *s == ',' || *s == '\t'))
		{
			--len;
 80088a4:	220a      	movs	r2, #10
 80088a6:	18bb      	adds	r3, r7, r2
 80088a8:	18ba      	adds	r2, r7, r2
 80088aa:	8812      	ldrh	r2, [r2, #0]
 80088ac:	3a01      	subs	r2, #1
 80088ae:	801a      	strh	r2, [r3, #0]
			++s;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
		while((len > 0) && (*s == ' ' || *s == ',' || *s == '\t'))
 80088b6:	230a      	movs	r3, #10
 80088b8:	18fb      	adds	r3, r7, r3
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <parse_command_OTRSP+0x110>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b20      	cmp	r3, #32
 80088c6:	d0ed      	beq.n	80088a4 <parse_command_OTRSP+0xdc>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b2c      	cmp	r3, #44	; 0x2c
 80088ce:	d0e9      	beq.n	80088a4 <parse_command_OTRSP+0xdc>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d0e5      	beq.n	80088a4 <parse_command_OTRSP+0xdc>
		}
		if(len > 0 && *s >= '0' && *s <= '9')
 80088d8:	200a      	movs	r0, #10
 80088da:	183b      	adds	r3, r7, r0
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d02a      	beq.n	8008938 <parse_command_OTRSP+0x170>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	2b2f      	cmp	r3, #47	; 0x2f
 80088e8:	d926      	bls.n	8008938 <parse_command_OTRSP+0x170>
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b39      	cmp	r3, #57	; 0x39
 80088f0:	d822      	bhi.n	8008938 <parse_command_OTRSP+0x170>
		{
			*pbuf = *s;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	701a      	strb	r2, [r3, #0]
			argv[argc] = pbuf;
 80088fa:	4b2e      	ldr	r3, [pc, #184]	; (80089b4 <parse_command_OTRSP+0x1ec>)
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	0092      	lsls	r2, r2, #2
 8008900:	6a39      	ldr	r1, [r7, #32]
 8008902:	50d1      	str	r1, [r2, r3]

			++argc;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3301      	adds	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
			++s;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3301      	adds	r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
			--len;
 8008910:	183b      	adds	r3, r7, r0
 8008912:	183a      	adds	r2, r7, r0
 8008914:	8812      	ldrh	r2, [r2, #0]
 8008916:	3a01      	subs	r2, #1
 8008918:	801a      	strh	r2, [r3, #0]
			*(++pbuf) = 0; // move forward AND terminate the 1st number argument
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	3301      	adds	r3, #1
 800891e:	623b      	str	r3, [r7, #32]
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
    while(len > 0 && argc < 4)
 8008926:	230a      	movs	r3, #10
 8008928:	18fb      	adds	r3, r7, r3
 800892a:	881b      	ldrh	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <parse_command_OTRSP+0x174>
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	2b03      	cmp	r3, #3
 8008934:	d9bf      	bls.n	80088b6 <parse_command_OTRSP+0xee>
			goto end_parse;
		}
    }


end_parse:
 8008936:	e001      	b.n	800893c <parse_command_OTRSP+0x174>
			goto end_parse;
 8008938:	46c0      	nop			; (mov r8, r8)
 800893a:	e000      	b.n	800893e <parse_command_OTRSP+0x176>
end_parse:
 800893c:	46c0      	nop			; (mov r8, r8)
    i = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
    // match a command
    while((i < N_commands_OTRSP) && (strcmp(argv[0], commands_OTRSP[i]) != 0)) i++;
 8008942:	e002      	b.n	800894a <parse_command_OTRSP+0x182>
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	3301      	adds	r3, #1
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	2b04      	cmp	r3, #4
 800894e:	d80a      	bhi.n	8008966 <parse_command_OTRSP+0x19e>
 8008950:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <parse_command_OTRSP+0x1ec>)
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <parse_command_OTRSP+0x1f0>)
 8008956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008958:	0092      	lsls	r2, r2, #2
 800895a:	58d3      	ldr	r3, [r2, r3]
 800895c:	0019      	movs	r1, r3
 800895e:	f7f7 fbd3 	bl	8000108 <strcmp>
 8008962:	1e03      	subs	r3, r0, #0
 8008964:	d1ee      	bne.n	8008944 <parse_command_OTRSP+0x17c>
    // command found
    if(i < N_commands_OTRSP)
 8008966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008968:	2b04      	cmp	r3, #4
 800896a:	d818      	bhi.n	800899e <parse_command_OTRSP+0x1d6>
    {
        cmd_executer_func_t fn = command_executers_OTRSP[i];
 800896c:	4b13      	ldr	r3, [pc, #76]	; (80089bc <parse_command_OTRSP+0x1f4>)
 800896e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008970:	0092      	lsls	r2, r2, #2
 8008972:	58d3      	ldr	r3, [r2, r3]
 8008974:	61bb      	str	r3, [r7, #24]
        if(fn)
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <parse_command_OTRSP+0x1ca>
        {
        	int r = fn(argc, argv, ret); // execute command
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	b2d8      	uxtb	r0, r3
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	490c      	ldr	r1, [pc, #48]	; (80089b4 <parse_command_OTRSP+0x1ec>)
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	4798      	blx	r3
 8008988:	0003      	movs	r3, r0
 800898a:	617b      	str	r3, [r7, #20]
        	if(r != 0) goto bad_command;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d107      	bne.n	80089a2 <parse_command_OTRSP+0x1da>
    else
    {
        goto bad_command;
    }
    // return the index of parsed command
    return i;
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	e008      	b.n	80089a8 <parse_command_OTRSP+0x1e0>
        goto bad_command;
 8008996:	46c0      	nop			; (mov r8, r8)
 8008998:	e004      	b.n	80089a4 <parse_command_OTRSP+0x1dc>
    	goto bad_command;
 800899a:	46c0      	nop			; (mov r8, r8)
 800899c:	e002      	b.n	80089a4 <parse_command_OTRSP+0x1dc>
        goto bad_command;
 800899e:	46c0      	nop			; (mov r8, r8)
 80089a0:	e000      	b.n	80089a4 <parse_command_OTRSP+0x1dc>
        	if(r != 0) goto bad_command;
 80089a2:	46c0      	nop			; (mov r8, r8)
bad_command:
    return -1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	425b      	negs	r3, r3
}
 80089a8:	0018      	movs	r0, r3
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b00b      	add	sp, #44	; 0x2c
 80089ae:	bd90      	pop	{r4, r7, pc}
 80089b0:	20000e8c 	.word	0x20000e8c
 80089b4:	20000e9c 	.word	0x20000e9c
 80089b8:	20000684 	.word	0x20000684
 80089bc:	0800b4cc 	.word	0x0800b4cc

080089c0 <my_atou>:
	buf[i] = 0;
	return i;
}

err_t my_atou(const char* buf, int8_t nMaxLen, uint32_t* retval)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	230b      	movs	r3, #11
 80089cc:	18fb      	adds	r3, r7, r3
 80089ce:	1c0a      	adds	r2, r1, #0
 80089d0:	701a      	strb	r2, [r3, #0]
	const char* p = buf;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	61fb      	str	r3, [r7, #28]
	uint32_t v = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	61bb      	str	r3, [r7, #24]
	while(*p && (nMaxLen > 0))
 80089da:	e020      	b.n	8008a1e <my_atou+0x5e>
	{
        uint8_t d = *p - '0';
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	781a      	ldrb	r2, [r3, #0]
 80089e0:	2117      	movs	r1, #23
 80089e2:	187b      	adds	r3, r7, r1
 80089e4:	3a30      	subs	r2, #48	; 0x30
 80089e6:	701a      	strb	r2, [r3, #0]
        if(d > 9) goto failed;
 80089e8:	187b      	adds	r3, r7, r1
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d825      	bhi.n	8008a3c <my_atou+0x7c>
		v = v * 10 + (*p - '0');
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	0013      	movs	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	189b      	adds	r3, r3, r2
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	001a      	movs	r2, r3
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	18d3      	adds	r3, r2, r3
 8008a02:	3b30      	subs	r3, #48	; 0x30
 8008a04:	61bb      	str	r3, [r7, #24]
		p++;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	61fb      	str	r3, [r7, #28]
		nMaxLen--;
 8008a0c:	210b      	movs	r1, #11
 8008a0e:	187b      	adds	r3, r7, r1
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	b25b      	sxtb	r3, r3
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	3b01      	subs	r3, #1
 8008a18:	b2da      	uxtb	r2, r3
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	701a      	strb	r2, [r3, #0]
	while(*p && (nMaxLen > 0))
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <my_atou+0x72>
 8008a26:	230b      	movs	r3, #11
 8008a28:	18fb      	adds	r3, r7, r3
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	dcd4      	bgt.n	80089dc <my_atou+0x1c>
	}
    *retval = v;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69ba      	ldr	r2, [r7, #24]
 8008a36:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e002      	b.n	8008a42 <my_atou+0x82>
        if(d > 9) goto failed;
 8008a3c:	46c0      	nop			; (mov r8, r8)
failed:
    return ERR_FAILED;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	425b      	negs	r3, r3
}
 8008a42:	0018      	movs	r0, r3
 8008a44:	46bd      	mov	sp, r7
 8008a46:	b008      	add	sp, #32
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <execute_command_string>:




int execute_command_string(CommandParser_t* pParser, const char* s, size_t len)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
    int r = -1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	425b      	negs	r3, r3
 8008a5a:	617b      	str	r3, [r7, #20]
    switch(pParser->protocol)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d11e      	bne.n	8008aa2 <execute_command_string+0x58>
    {
    case COMMAND_PROTOCOL_OTRSP:
    	pParser->bufRet[0] = 0;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	711a      	strb	r2, [r3, #4]
    	r = parse_command_OTRSP(s, len, pParser->bufRet);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	b299      	uxth	r1, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1d1a      	adds	r2, r3, #4
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	0018      	movs	r0, r3
 8008a76:	f7ff fea7 	bl	80087c8 <parse_command_OTRSP>
 8008a7a:	0003      	movs	r3, r0
 8008a7c:	617b      	str	r3, [r7, #20]
    	if((r >= 0) && (pParser->bufRet[0])) // parsed is valid
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	db10      	blt.n	8008aa6 <execute_command_string+0x5c>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	791b      	ldrb	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00c      	beq.n	8008aa6 <execute_command_string+0x5c>
    		pParser->hasResponse = strnlen(pParser->bufRet, sizeof(pParser->bufRet));
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3304      	adds	r3, #4
 8008a90:	2118      	movs	r1, #24
 8008a92:	0018      	movs	r0, r3
 8008a94:	f002 fa09 	bl	800aeaa <strnlen>
 8008a98:	0003      	movs	r3, r0
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	805a      	strh	r2, [r3, #2]
    	break;
 8008aa0:	e001      	b.n	8008aa6 <execute_command_string+0x5c>
    default:
    	break;
 8008aa2:	46c0      	nop			; (mov r8, r8)
 8008aa4:	e000      	b.n	8008aa8 <execute_command_string+0x5e>
    	break;
 8008aa6:	46c0      	nop			; (mov r8, r8)
    }
    return r;
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	0018      	movs	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	b006      	add	sp, #24
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ab6:	b095      	sub	sp, #84	; 0x54
 8008ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	Selector[0].PIN_BCDs[0] = BCD1_0;
 8008aba:	4bd6      	ldr	r3, [pc, #856]	; (8008e14 <main+0x360>)
 8008abc:	4ad6      	ldr	r2, [pc, #856]	; (8008e18 <main+0x364>)
 8008abe:	ca03      	ldmia	r2!, {r0, r1}
 8008ac0:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCDs[1] = BCD1_1;
 8008ac2:	4bd4      	ldr	r3, [pc, #848]	; (8008e14 <main+0x360>)
 8008ac4:	4ad5      	ldr	r2, [pc, #852]	; (8008e1c <main+0x368>)
 8008ac6:	3308      	adds	r3, #8
 8008ac8:	ca03      	ldmia	r2!, {r0, r1}
 8008aca:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCDs[2] = BCD1_2;
 8008acc:	4bd1      	ldr	r3, [pc, #836]	; (8008e14 <main+0x360>)
 8008ace:	4ad4      	ldr	r2, [pc, #848]	; (8008e20 <main+0x36c>)
 8008ad0:	3310      	adds	r3, #16
 8008ad2:	ca03      	ldmia	r2!, {r0, r1}
 8008ad4:	c303      	stmia	r3!, {r0, r1}
	Selector[0].sel = 0;
 8008ad6:	4bcf      	ldr	r3, [pc, #828]	; (8008e14 <main+0x360>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCDs[0] = BCD2_0;
 8008adc:	4bcd      	ldr	r3, [pc, #820]	; (8008e14 <main+0x360>)
 8008ade:	4ad1      	ldr	r2, [pc, #836]	; (8008e24 <main+0x370>)
 8008ae0:	331c      	adds	r3, #28
 8008ae2:	ca03      	ldmia	r2!, {r0, r1}
 8008ae4:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCDs[1] = BCD2_1;
 8008ae6:	4bcb      	ldr	r3, [pc, #812]	; (8008e14 <main+0x360>)
 8008ae8:	4acf      	ldr	r2, [pc, #828]	; (8008e28 <main+0x374>)
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	ca03      	ldmia	r2!, {r0, r1}
 8008aee:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCDs[2] = BCD2_2;
 8008af0:	4bc8      	ldr	r3, [pc, #800]	; (8008e14 <main+0x360>)
 8008af2:	4ace      	ldr	r2, [pc, #824]	; (8008e2c <main+0x378>)
 8008af4:	332c      	adds	r3, #44	; 0x2c
 8008af6:	ca03      	ldmia	r2!, {r0, r1}
 8008af8:	c303      	stmia	r3!, {r0, r1}
	Selector[1].sel = 0;
 8008afa:	4bc6      	ldr	r3, [pc, #792]	; (8008e14 <main+0x360>)
 8008afc:	2234      	movs	r2, #52	; 0x34
 8008afe:	2100      	movs	r1, #0
 8008b00:	5499      	strb	r1, [r3, r2]

	SelectorM[0].PIN_BCDs[0] = BCDM1_0;
 8008b02:	4bcb      	ldr	r3, [pc, #812]	; (8008e30 <main+0x37c>)
 8008b04:	4acb      	ldr	r2, [pc, #812]	; (8008e34 <main+0x380>)
 8008b06:	ca03      	ldmia	r2!, {r0, r1}
 8008b08:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].PIN_BCDs[1] = BCDM1_1;
 8008b0a:	4bc9      	ldr	r3, [pc, #804]	; (8008e30 <main+0x37c>)
 8008b0c:	4aca      	ldr	r2, [pc, #808]	; (8008e38 <main+0x384>)
 8008b0e:	3308      	adds	r3, #8
 8008b10:	ca03      	ldmia	r2!, {r0, r1}
 8008b12:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].PIN_BCDs[2] = BCDM1_2;
 8008b14:	4bc6      	ldr	r3, [pc, #792]	; (8008e30 <main+0x37c>)
 8008b16:	4ac9      	ldr	r2, [pc, #804]	; (8008e3c <main+0x388>)
 8008b18:	3310      	adds	r3, #16
 8008b1a:	ca03      	ldmia	r2!, {r0, r1}
 8008b1c:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].sel = 0;
 8008b1e:	4bc4      	ldr	r3, [pc, #784]	; (8008e30 <main+0x37c>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	761a      	strb	r2, [r3, #24]
	SelectorM[1].PIN_BCDs[0] = BCDM2_0;
 8008b24:	4bc2      	ldr	r3, [pc, #776]	; (8008e30 <main+0x37c>)
 8008b26:	4ac6      	ldr	r2, [pc, #792]	; (8008e40 <main+0x38c>)
 8008b28:	331c      	adds	r3, #28
 8008b2a:	ca03      	ldmia	r2!, {r0, r1}
 8008b2c:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].PIN_BCDs[1] = BCDM2_1;
 8008b2e:	4bc0      	ldr	r3, [pc, #768]	; (8008e30 <main+0x37c>)
 8008b30:	4ac4      	ldr	r2, [pc, #784]	; (8008e44 <main+0x390>)
 8008b32:	3324      	adds	r3, #36	; 0x24
 8008b34:	ca03      	ldmia	r2!, {r0, r1}
 8008b36:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].PIN_BCDs[2] = BCDM2_2;
 8008b38:	4bbd      	ldr	r3, [pc, #756]	; (8008e30 <main+0x37c>)
 8008b3a:	4ac3      	ldr	r2, [pc, #780]	; (8008e48 <main+0x394>)
 8008b3c:	332c      	adds	r3, #44	; 0x2c
 8008b3e:	ca03      	ldmia	r2!, {r0, r1}
 8008b40:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].sel = 0;
 8008b42:	4bbb      	ldr	r3, [pc, #748]	; (8008e30 <main+0x37c>)
 8008b44:	2234      	movs	r2, #52	; 0x34
 8008b46:	2100      	movs	r1, #0
 8008b48:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008b4a:	f7f7 ff39 	bl	80009c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008b4e:	f000 fb35 	bl	80091bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008b52:	f000 fc35 	bl	80093c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8008b56:	f000 fb85 	bl	8009264 <MX_SPI1_Init>
  MX_DMA_Init();
 8008b5a:	f000 fc13 	bl	8009384 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8008b5e:	f000 fbe1 	bl	8009324 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8008b62:	f000 fb79 	bl	8009258 <MX_IWDG_Init>
  MX_TIM6_Init();
 8008b66:	f000 fbbb 	bl	80092e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	// Check EEPROM
	 EEPROM.base_addr = (uint32_t*)EEPROM_BASE_ADDR;
 8008b6a:	4bb8      	ldr	r3, [pc, #736]	; (8008e4c <main+0x398>)
 8008b6c:	4ab8      	ldr	r2, [pc, #736]	; (8008e50 <main+0x39c>)
 8008b6e:	601a      	str	r2, [r3, #0]
	 EEPROM.size = 400;
 8008b70:	4bb6      	ldr	r3, [pc, #728]	; (8008e4c <main+0x398>)
 8008b72:	22c8      	movs	r2, #200	; 0xc8
 8008b74:	0052      	lsls	r2, r2, #1
 8008b76:	809a      	strh	r2, [r3, #4]

	/* init: config */
	load_config(&cfg);
 8008b78:	4bb6      	ldr	r3, [pc, #728]	; (8008e54 <main+0x3a0>)
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	f7f7 fb80 	bl	8000280 <load_config>
	if (!config_check_valid(&cfg))
 8008b80:	4bb4      	ldr	r3, [pc, #720]	; (8008e54 <main+0x3a0>)
 8008b82:	0018      	movs	r0, r3
 8008b84:	f7f7 fba2 	bl	80002cc <config_check_valid>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	001a      	movs	r2, r3
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4053      	eors	r3, r2
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d01f      	beq.n	8008bd6 <main+0x122>
	{
		// invalid config data, erase the flash page
		uint32_t PageError = 0;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b9a:	b672      	cpsid	i
}
 8008b9c:	46c0      	nop			; (mov r8, r8)
		__disable_irq();
		HAL_FLASH_Unlock();
 8008b9e:	f7f8 fb21 	bl	80011e4 <HAL_FLASH_Unlock>
		FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=(uint32_t)EEPROM.base_addr, .NbPages=1};
 8008ba2:	003b      	movs	r3, r7
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	4ba8      	ldr	r3, [pc, #672]	; (8008e4c <main+0x398>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	001a      	movs	r2, r3
 8008bae:	003b      	movs	r3, r7
 8008bb0:	605a      	str	r2, [r3, #4]
 8008bb2:	003b      	movs	r3, r7
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	609a      	str	r2, [r3, #8]
		HAL_FLASHEx_Erase(&fe, &PageError);
 8008bb8:	230c      	movs	r3, #12
 8008bba:	18fa      	adds	r2, r7, r3
 8008bbc:	003b      	movs	r3, r7
 8008bbe:	0011      	movs	r1, r2
 8008bc0:	0018      	movs	r0, r3
 8008bc2:	f7f8 fbcf 	bl	8001364 <HAL_FLASHEx_Erase>
		HAL_FLASH_Lock();
 8008bc6:	f7f8 fb33 	bl	8001230 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8008bca:	b662      	cpsie	i
}
 8008bcc:	46c0      	nop			; (mov r8, r8)
		__enable_irq();
		init_config(&cfg);
 8008bce:	4ba1      	ldr	r3, [pc, #644]	; (8008e54 <main+0x3a0>)
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f7fc ffdb 	bl	8005b8c <init_config>
	}


	/* init: antenna selections */
	uint8_t antnums[N_SELECTORS];
	for (i = 0; i < N_SELECTORS; ++i)
 8008bd6:	234f      	movs	r3, #79	; 0x4f
 8008bd8:	18fb      	adds	r3, r7, r3
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]
 8008bde:	e00f      	b.n	8008c00 <main+0x14c>
	{
		antnums[i] = cfg.nRadioToAntNums[i];
 8008be0:	204f      	movs	r0, #79	; 0x4f
 8008be2:	183b      	adds	r3, r7, r0
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	183b      	adds	r3, r7, r0
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	499a      	ldr	r1, [pc, #616]	; (8008e54 <main+0x3a0>)
 8008bec:	188a      	adds	r2, r1, r2
 8008bee:	7a11      	ldrb	r1, [r2, #8]
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	18ba      	adds	r2, r7, r2
 8008bf4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < N_SELECTORS; ++i)
 8008bf6:	183b      	adds	r3, r7, r0
 8008bf8:	183a      	adds	r2, r7, r0
 8008bfa:	7812      	ldrb	r2, [r2, #0]
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	244f      	movs	r4, #79	; 0x4f
 8008c02:	193b      	adds	r3, r7, r4
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d9ea      	bls.n	8008be0 <main+0x12c>
	}
	switch_Antenna(antnums, N_SELECTORS);
 8008c0a:	2310      	movs	r3, #16
 8008c0c:	18fb      	adds	r3, r7, r3
 8008c0e:	2102      	movs	r1, #2
 8008c10:	0018      	movs	r0, r3
 8008c12:	f001 fa05 	bl	800a020 <switch_Antenna>



	// init 485
	begin_serial485(p485, &cfg485);
 8008c16:	4b90      	ldr	r3, [pc, #576]	; (8008e58 <main+0x3a4>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a90      	ldr	r2, [pc, #576]	; (8008e5c <main+0x3a8>)
 8008c1c:	0011      	movs	r1, r2
 8008c1e:	0018      	movs	r0, r3
 8008c20:	f7ff fa12 	bl	8008048 <begin_serial485>
	#ifdef DEBUG
//	  test_485_blockmode(p485);
	#endif
    start_receive_DMA(p485);
 8008c24:	4b8c      	ldr	r3, [pc, #560]	; (8008e58 <main+0x3a4>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	0018      	movs	r0, r3
 8008c2a:	f7ff f9e2 	bl	8007ff2 <start_receive_DMA>

	/* init: File System for webpages*/
	FS_begin(&FS, (uint32_t*) FS_BASE_ADDR);
 8008c2e:	4a8c      	ldr	r2, [pc, #560]	; (8008e60 <main+0x3ac>)
 8008c30:	4b8c      	ldr	r3, [pc, #560]	; (8008e64 <main+0x3b0>)
 8008c32:	0011      	movs	r1, r2
 8008c34:	0018      	movs	r0, r3
 8008c36:	f7fc fff3 	bl	8005c20 <FS_begin>
#ifndef DEBUG
	HAL_IWDG_Refresh(&hiwdg); // feed dog
#endif

	/* init: Ethernet chip */
	HAL_Delay(200); // wait for CH395 being ready from power on
 8008c3a:	20c8      	movs	r0, #200	; 0xc8
 8008c3c:	f7f7 ff24 	bl	8000a88 <HAL_Delay>
	for (i = 5; i < 0xff; ++i)
 8008c40:	193b      	adds	r3, r7, r4
 8008c42:	2205      	movs	r2, #5
 8008c44:	701a      	strb	r2, [r3, #0]
 8008c46:	e016      	b.n	8008c76 <main+0x1c2>
	{
		if (CH395CMDCheckExist(i) != (uint8_t) ~i)
 8008c48:	244f      	movs	r4, #79	; 0x4f
 8008c4a:	193b      	adds	r3, r7, r4
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f7fc fa34 	bl	80050bc <CH395CMDCheckExist>
 8008c54:	0003      	movs	r3, r0
 8008c56:	001a      	movs	r2, r3
 8008c58:	193b      	adds	r3, r7, r4
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d00e      	beq.n	8008c82 <main+0x1ce>
		{
			DEBUG_LOG("CH395 self check error!\n");
 8008c64:	46c0      	nop			; (mov r8, r8)
			HAL_Delay(50);
 8008c66:	2032      	movs	r0, #50	; 0x32
 8008c68:	f7f7 ff0e 	bl	8000a88 <HAL_Delay>
	for (i = 5; i < 0xff; ++i)
 8008c6c:	193b      	adds	r3, r7, r4
 8008c6e:	193a      	adds	r2, r7, r4
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	3201      	adds	r2, #1
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	234f      	movs	r3, #79	; 0x4f
 8008c78:	18fb      	adds	r3, r7, r3
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	2bff      	cmp	r3, #255	; 0xff
 8008c7e:	d1e3      	bne.n	8008c48 <main+0x194>
		}
		else
			break;
	}

	RESET_CH395: reset_CH395();
 8008c80:	e000      	b.n	8008c84 <main+0x1d0>
			break;
 8008c82:	46c0      	nop			; (mov r8, r8)
	RESET_CH395: reset_CH395();
 8008c84:	f000 fc72 	bl	800956c <reset_CH395>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	static uint32_t lastWakeupTime;
	lastWakeupTime = HAL_GetTick();
 8008c88:	f7f7 fef4 	bl	8000a74 <HAL_GetTick>
 8008c8c:	0002      	movs	r2, r0
 8008c8e:	4b76      	ldr	r3, [pc, #472]	; (8008e68 <main+0x3b4>)
 8008c90:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg); // feed dog
#endif
		/* TASK0: handle CH395 interrupt flags */
		{
			// CASE1: PHY disconnected, need to reconnect, use up the reconn flag to avoid reentrance
			if (flag_PHY_reconn && !flag_CH395_ready)
 8008c92:	4b76      	ldr	r3, [pc, #472]	; (8008e6c <main+0x3b8>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <main+0x200>
 8008c9c:	4b74      	ldr	r3, [pc, #464]	; (8008e70 <main+0x3bc>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4053      	eors	r3, r2
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <main+0x200>
			{
				flag_PHY_reconn = false;
 8008cac:	4b6f      	ldr	r3, [pc, #444]	; (8008e6c <main+0x3b8>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	701a      	strb	r2, [r3, #0]
				goto RESET_CH395;
 8008cb2:	e7e7      	b.n	8008c84 <main+0x1d0>
			}
			/*** polling task: execute command and transmit response to the client in HTTPHandle ***/
			if (flag_CH395_ready && ch395.RX_received)
 8008cb4:	4b6e      	ldr	r3, [pc, #440]	; (8008e70 <main+0x3bc>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <main+0x21c>
 8008cbe:	4b6d      	ldr	r3, [pc, #436]	; (8008e74 <main+0x3c0>)
 8008cc0:	7e5b      	ldrb	r3, [r3, #25]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <main+0x21c>
			{
				// prepare respond to stocking requests
				HTTPHandle(&ch395);
 8008cc8:	4b6a      	ldr	r3, [pc, #424]	; (8008e74 <main+0x3c0>)
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f7fe fab6 	bl	800723c <HTTPHandle>
			}
			/*** polling task: close timed out (long time no received data) connections to avoid deadlock ***/
			uint32_t nowTick = HAL_GetTick();
 8008cd0:	f7f7 fed0 	bl	8000a74 <HAL_GetTick>
 8008cd4:	0003      	movs	r3, r0
 8008cd6:	63bb      	str	r3, [r7, #56]	; 0x38
			for (int i = 0; i < NUM_SOCKETS; ++i)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cdc:	e027      	b.n	8008d2e <main+0x27a>
			{
				HTTPRequestParseState *pS = &parseStates[i];
 8008cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ce0:	22a4      	movs	r2, #164	; 0xa4
 8008ce2:	435a      	muls	r2, r3
 8008ce4:	4b64      	ldr	r3, [pc, #400]	; (8008e78 <main+0x3c4>)
 8008ce6:	18d3      	adds	r3, r2, r3
 8008ce8:	617b      	str	r3, [r7, #20]
				if ((nowTick - pS->last_active_tick >= MAX_HTTP_TICK_IDLE))
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	22a0      	movs	r2, #160	; 0xa0
 8008cee:	589b      	ldr	r3, [r3, r2]
 8008cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cf2:	1ad2      	subs	r2, r2, r3
 8008cf4:	23fa      	movs	r3, #250	; 0xfa
 8008cf6:	01db      	lsls	r3, r3, #7
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d315      	bcc.n	8008d28 <main+0x274>
				{
					// timeout, close the connection
					if (pS->connection != CLOSED)
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	791b      	ldrb	r3, [r3, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d011      	beq.n	8008d28 <main+0x274>
					{
						HTTPclose(i+1);
 8008d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	3301      	adds	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f7fe fc99 	bl	8007644 <HTTPclose>
						resetHTTPParseState(pS);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	0018      	movs	r0, r3
 8008d16:	f7fd fb9b 	bl	8006450 <resetHTTPParseState>
						CH395TCPDisconnect(i+1); // disconnnect the connection
 8008d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	3301      	adds	r3, #1
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	0018      	movs	r0, r3
 8008d24:	f7fc fd5e 	bl	80057e4 <CH395TCPDisconnect>
			for (int i = 0; i < NUM_SOCKETS; ++i)
 8008d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	ddd4      	ble.n	8008cde <main+0x22a>
					}
				}
			}
			/*** polling task: close Websocket connections from which a CLOSE frame and been received  ***/
			for(i = 1; i < NUM_SOCKETS; ++i)
 8008d34:	234f      	movs	r3, #79	; 0x4f
 8008d36:	18fb      	adds	r3, r7, r3
 8008d38:	2201      	movs	r2, #1
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	e02d      	b.n	8008d9a <main+0x2e6>
			{
				HTTPRequestParseState *pS = &parseStates[i-1];
 8008d3e:	214f      	movs	r1, #79	; 0x4f
 8008d40:	187b      	adds	r3, r7, r1
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	22a4      	movs	r2, #164	; 0xa4
 8008d48:	435a      	muls	r2, r3
 8008d4a:	4b4b      	ldr	r3, [pc, #300]	; (8008e78 <main+0x3c4>)
 8008d4c:	18d3      	adds	r3, r2, r3
 8008d4e:	61bb      	str	r3, [r7, #24]
				// close the connection if websocket received a CLOSE frame
				// and the response has been transmitted
				if((pS->ws_handshaked == WS_CLOSED) && ((ch395.TX_available & (1 << i)) != 0 ))
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	228e      	movs	r2, #142	; 0x8e
 8008d54:	5c9b      	ldrb	r3, [r3, r2]
 8008d56:	2b03      	cmp	r3, #3
 8008d58:	d119      	bne.n	8008d8e <main+0x2da>
 8008d5a:	4b46      	ldr	r3, [pc, #280]	; (8008e74 <main+0x3c0>)
 8008d5c:	7edb      	ldrb	r3, [r3, #27]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	001a      	movs	r2, r3
 8008d62:	187b      	adds	r3, r7, r1
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	411a      	asrs	r2, r3
 8008d68:	0013      	movs	r3, r2
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	d00e      	beq.n	8008d8e <main+0x2da>
				{
					CH395TCPDisconnect(i);
 8008d70:	000c      	movs	r4, r1
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	0018      	movs	r0, r3
 8008d78:	f7fc fd34 	bl	80057e4 <CH395TCPDisconnect>
					HTTPclose(i);
 8008d7c:	193b      	adds	r3, r7, r4
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	0018      	movs	r0, r3
 8008d82:	f7fe fc5f 	bl	8007644 <HTTPclose>
					resetHTTPParseState(pS);
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f7fd fb61 	bl	8006450 <resetHTTPParseState>
			for(i = 1; i < NUM_SOCKETS; ++i)
 8008d8e:	224f      	movs	r2, #79	; 0x4f
 8008d90:	18bb      	adds	r3, r7, r2
 8008d92:	18ba      	adds	r2, r7, r2
 8008d94:	7812      	ldrb	r2, [r2, #0]
 8008d96:	3201      	adds	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	234f      	movs	r3, #79	; 0x4f
 8008d9c:	18fb      	adds	r3, r7, r3
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b07      	cmp	r3, #7
 8008da2:	d9cc      	bls.n	8008d3e <main+0x28a>
				}
			}

			/*** polling task: broadcast updates to the clients proactively ***/
			static uint8_t websocket_frame_shared_buffer[128], websocket_frame_shared_buffer_2[128];
			if(needUpdate || (needUpdateFlagForEachSocket != 0))
 8008da4:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <main+0x3c8>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d104      	bne.n	8008db6 <main+0x302>
 8008dac:	4b34      	ldr	r3, [pc, #208]	; (8008e80 <main+0x3cc>)
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d100      	bne.n	8008db6 <main+0x302>
 8008db4:	e11f      	b.n	8008ff6 <main+0x542>
			{
				// set all flags for all the sockets
				if(needUpdate)
 8008db6:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <main+0x3c8>)
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d100      	bne.n	8008dc0 <main+0x30c>
 8008dbe:	e089      	b.n	8008ed4 <main+0x420>
				{
					for(i = 1; i < NUM_SOCKETS; ++i)
 8008dc0:	234f      	movs	r3, #79	; 0x4f
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	e07b      	b.n	8008ec2 <main+0x40e>
					{
						HTTPRequestParseState *pS = parseStates +i - 1;
 8008dca:	214f      	movs	r1, #79	; 0x4f
 8008dcc:	187b      	adds	r3, r7, r1
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	22a4      	movs	r2, #164	; 0xa4
 8008dd2:	4353      	muls	r3, r2
 8008dd4:	3ba4      	subs	r3, #164	; 0xa4
 8008dd6:	001a      	movs	r2, r3
 8008dd8:	4b27      	ldr	r3, [pc, #156]	; (8008e78 <main+0x3c4>)
 8008dda:	18d3      	adds	r3, r2, r3
 8008ddc:	637b      	str	r3, [r7, #52]	; 0x34
						if((ch395.socket_connected & (1U << i)) == 0)
 8008dde:	4b25      	ldr	r3, [pc, #148]	; (8008e74 <main+0x3c0>)
 8008de0:	7e1b      	ldrb	r3, [r3, #24]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	001a      	movs	r2, r3
 8008de6:	187b      	adds	r3, r7, r1
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	40da      	lsrs	r2, r3
 8008dec:	0013      	movs	r3, r2
 8008dee:	2201      	movs	r2, #1
 8008df0:	4013      	ands	r3, r2
 8008df2:	d147      	bne.n	8008e84 <main+0x3d0>
							needUpdateFlagForEachSocket &= ~(1U << i); // clear flag if socket not connected
 8008df4:	187b      	adds	r3, r7, r1
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	409a      	lsls	r2, r3
 8008dfc:	0013      	movs	r3, r2
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	43db      	mvns	r3, r3
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <main+0x3cc>)
 8008e06:	8812      	ldrh	r2, [r2, #0]
 8008e08:	4013      	ands	r3, r2
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	4b1c      	ldr	r3, [pc, #112]	; (8008e80 <main+0x3cc>)
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e051      	b.n	8008eb6 <main+0x402>
 8008e12:	46c0      	nop			; (mov r8, r8)
 8008e14:	200019c4 	.word	0x200019c4
 8008e18:	0800b4e0 	.word	0x0800b4e0
 8008e1c:	0800b4e8 	.word	0x0800b4e8
 8008e20:	0800b4f0 	.word	0x0800b4f0
 8008e24:	0800b4f8 	.word	0x0800b4f8
 8008e28:	0800b500 	.word	0x0800b500
 8008e2c:	0800b508 	.word	0x0800b508
 8008e30:	20001aec 	.word	0x20001aec
 8008e34:	0800b510 	.word	0x0800b510
 8008e38:	0800b518 	.word	0x0800b518
 8008e3c:	0800b520 	.word	0x0800b520
 8008e40:	0800b528 	.word	0x0800b528
 8008e44:	0800b530 	.word	0x0800b530
 8008e48:	0800b538 	.word	0x0800b538
 8008e4c:	20000000 	.word	0x20000000
 8008e50:	0800f000 	.word	0x0800f000
 8008e54:	2000136c 	.word	0x2000136c
 8008e58:	20000680 	.word	0x20000680
 8008e5c:	0800b540 	.word	0x0800b540
 8008e60:	0800c000 	.word	0x0800c000
 8008e64:	20001400 	.word	0x20001400
 8008e68:	200010d4 	.word	0x200010d4
 8008e6c:	200010ca 	.word	0x200010ca
 8008e70:	200010cc 	.word	0x200010cc
 8008e74:	20000010 	.word	0x20000010
 8008e78:	200008c0 	.word	0x200008c0
 8008e7c:	200010cf 	.word	0x200010cf
 8008e80:	200010d0 	.word	0x200010d0
						else if(
							(pS->connection == UPGRADED_WS)
 8008e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e86:	791b      	ldrb	r3, [r3, #4]
						else if(
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d007      	beq.n	8008e9c <main+0x3e8>
							||
							(ch395.cfg.protocols[i] == CH395_PROTOCOL_TCP)
 8008e8c:	234f      	movs	r3, #79	; 0x4f
 8008e8e:	18fb      	adds	r3, r7, r3
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4ab9      	ldr	r2, [pc, #740]	; (8009178 <main+0x6c4>)
 8008e94:	18d3      	adds	r3, r2, r3
 8008e96:	7c1b      	ldrb	r3, [r3, #16]
							||
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d10c      	bne.n	8008eb6 <main+0x402>
						)
							needUpdateFlagForEachSocket |= (1U << i); // set the flag if the protocol is TCP or WebSocket
 8008e9c:	234f      	movs	r3, #79	; 0x4f
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	409a      	lsls	r2, r3
 8008ea6:	0013      	movs	r3, r2
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	4bb4      	ldr	r3, [pc, #720]	; (800917c <main+0x6c8>)
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	4bb2      	ldr	r3, [pc, #712]	; (800917c <main+0x6c8>)
 8008eb4:	801a      	strh	r2, [r3, #0]
					for(i = 1; i < NUM_SOCKETS; ++i)
 8008eb6:	224f      	movs	r2, #79	; 0x4f
 8008eb8:	18bb      	adds	r3, r7, r2
 8008eba:	18ba      	adds	r2, r7, r2
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	3201      	adds	r2, #1
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	234f      	movs	r3, #79	; 0x4f
 8008ec4:	18fb      	adds	r3, r7, r3
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	2b07      	cmp	r3, #7
 8008eca:	d800      	bhi.n	8008ece <main+0x41a>
 8008ecc:	e77d      	b.n	8008dca <main+0x316>
					}
					needUpdate = false;
 8008ece:	4bac      	ldr	r3, [pc, #688]	; (8009180 <main+0x6cc>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
				}
				/* try to transmit updates proactively */
				for(i = 1; i < NUM_SOCKETS; ++i)
 8008ed4:	234f      	movs	r3, #79	; 0x4f
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	2201      	movs	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
 8008edc:	e082      	b.n	8008fe4 <main+0x530>
				{
					if((needUpdateFlagForEachSocket & (1U << i)) == 0)
 8008ede:	4ba7      	ldr	r3, [pc, #668]	; (800917c <main+0x6c8>)
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	001a      	movs	r2, r3
 8008ee4:	214f      	movs	r1, #79	; 0x4f
 8008ee6:	187b      	adds	r3, r7, r1
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	40da      	lsrs	r2, r3
 8008eec:	0013      	movs	r3, r2
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	d070      	beq.n	8008fd6 <main+0x522>
						continue;
					uint8_t* buf_to_transmit = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	647b      	str	r3, [r7, #68]	; 0x44
					uint16_t len_to_transmit = 0;
 8008ef8:	2442      	movs	r4, #66	; 0x42
 8008efa:	193b      	adds	r3, r7, r4
 8008efc:	2200      	movs	r2, #0
 8008efe:	801a      	strh	r2, [r3, #0]
					// transmit only if the CH395 chip is not busy
					if((ch395.TX_available & (1U << i)) != 0)
 8008f00:	4b9d      	ldr	r3, [pc, #628]	; (8009178 <main+0x6c4>)
 8008f02:	7edb      	ldrb	r3, [r3, #27]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	001a      	movs	r2, r3
 8008f08:	187b      	adds	r3, r7, r1
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	40da      	lsrs	r2, r3
 8008f0e:	0013      	movs	r3, r2
 8008f10:	2201      	movs	r2, #1
 8008f12:	4013      	ands	r3, r2
 8008f14:	d060      	beq.n	8008fd8 <main+0x524>
					{
						HTTPRequestParseState *pS = parseStates +i - 1;
 8008f16:	187b      	adds	r3, r7, r1
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	22a4      	movs	r2, #164	; 0xa4
 8008f1c:	4353      	muls	r3, r2
 8008f1e:	3ba4      	subs	r3, #164	; 0xa4
 8008f20:	001a      	movs	r2, r3
 8008f22:	4b98      	ldr	r3, [pc, #608]	; (8009184 <main+0x6d0>)
 8008f24:	18d3      	adds	r3, r2, r3
 8008f26:	633b      	str	r3, [r7, #48]	; 0x30
						// make payload
						if(pS->connection == UPGRADED_WS)
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	791b      	ldrb	r3, [r3, #4]
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d118      	bne.n	8008f62 <main+0x4ae>
						{
							// make content
							int len_content = make_ant_alloc_str((char*)websocket_frame_shared_buffer);
 8008f30:	4b95      	ldr	r3, [pc, #596]	; (8009188 <main+0x6d4>)
 8008f32:	0018      	movs	r0, r3
 8008f34:	f7fc ffba 	bl	8005eac <make_ant_alloc_str>
 8008f38:	0003      	movs	r3, r0
 8008f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
							size_t lenOrig = WSMakeStrOriginal(websocket_frame_shared_buffer_2, sizeof(websocket_frame_shared_buffer_2), "/getalloc", (char*)websocket_frame_shared_buffer);
 8008f3c:	4b92      	ldr	r3, [pc, #584]	; (8009188 <main+0x6d4>)
 8008f3e:	4a93      	ldr	r2, [pc, #588]	; (800918c <main+0x6d8>)
 8008f40:	4893      	ldr	r0, [pc, #588]	; (8009190 <main+0x6dc>)
 8008f42:	2180      	movs	r1, #128	; 0x80
 8008f44:	f7fd fe7a 	bl	8006c3c <WSMakeStrOriginal>
 8008f48:	0003      	movs	r3, r0
 8008f4a:	62bb      	str	r3, [r7, #40]	; 0x28
							len_to_transmit = ws_make_text_frame(websocket_frame_shared_buffer, sizeof(websocket_frame_shared_buffer), websocket_frame_shared_buffer_2, lenOrig);
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	4a90      	ldr	r2, [pc, #576]	; (8009190 <main+0x6dc>)
 8008f50:	488d      	ldr	r0, [pc, #564]	; (8009188 <main+0x6d4>)
 8008f52:	2180      	movs	r1, #128	; 0x80
 8008f54:	f001 fca4 	bl	800a8a0 <ws_make_text_frame>
 8008f58:	0002      	movs	r2, r0
 8008f5a:	193b      	adds	r3, r7, r4
 8008f5c:	801a      	strh	r2, [r3, #0]
							buf_to_transmit = (uint8_t*)websocket_frame_shared_buffer;
 8008f5e:	4b8a      	ldr	r3, [pc, #552]	; (8009188 <main+0x6d4>)
 8008f60:	647b      	str	r3, [r7, #68]	; 0x44
						{
							// TODO: prepare content for TCP

						}
						// transmit
						if(len_to_transmit)
 8008f62:	2442      	movs	r4, #66	; 0x42
 8008f64:	193b      	adds	r3, r7, r4
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d011      	beq.n	8008f90 <main+0x4dc>
						{
							CH395StartSendingData(i, len_to_transmit);
 8008f6c:	193b      	adds	r3, r7, r4
 8008f6e:	881a      	ldrh	r2, [r3, #0]
 8008f70:	234f      	movs	r3, #79	; 0x4f
 8008f72:	18fb      	adds	r3, r7, r3
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	0011      	movs	r1, r2
 8008f78:	0018      	movs	r0, r3
 8008f7a:	f7fc fab5 	bl	80054e8 <CH395StartSendingData>
							CH395ContinueSendingData(buf_to_transmit, len_to_transmit);
 8008f7e:	193b      	adds	r3, r7, r4
 8008f80:	881a      	ldrh	r2, [r3, #0]
 8008f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f84:	0011      	movs	r1, r2
 8008f86:	0018      	movs	r0, r3
 8008f88:	f7fc fad4 	bl	8005534 <CH395ContinueSendingData>
							CH395Complete();
 8008f8c:	f7fc faf8 	bl	8005580 <CH395Complete>
						}
						// update flags
						ch395.TX_available &= ~(1<<i); // invalidate TX flag, will be validated again when TX DONE interrupt
 8008f90:	4b79      	ldr	r3, [pc, #484]	; (8009178 <main+0x6c4>)
 8008f92:	7edb      	ldrb	r3, [r3, #27]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	b25b      	sxtb	r3, r3
 8008f98:	204f      	movs	r0, #79	; 0x4f
 8008f9a:	183a      	adds	r2, r7, r0
 8008f9c:	7812      	ldrb	r2, [r2, #0]
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	4091      	lsls	r1, r2
 8008fa2:	000a      	movs	r2, r1
 8008fa4:	b252      	sxtb	r2, r2
 8008fa6:	43d2      	mvns	r2, r2
 8008fa8:	b252      	sxtb	r2, r2
 8008faa:	4013      	ands	r3, r2
 8008fac:	b25b      	sxtb	r3, r3
 8008fae:	b2da      	uxtb	r2, r3
 8008fb0:	4b71      	ldr	r3, [pc, #452]	; (8009178 <main+0x6c4>)
 8008fb2:	76da      	strb	r2, [r3, #27]
						needUpdateFlagForEachSocket &= ~(1 << i);
 8008fb4:	183b      	adds	r3, r7, r0
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	409a      	lsls	r2, r3
 8008fbc:	0013      	movs	r3, r2
 8008fbe:	b21b      	sxth	r3, r3
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	4a6d      	ldr	r2, [pc, #436]	; (800917c <main+0x6c8>)
 8008fc6:	8812      	ldrh	r2, [r2, #0]
 8008fc8:	b212      	sxth	r2, r2
 8008fca:	4013      	ands	r3, r2
 8008fcc:	b21b      	sxth	r3, r3
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	4b6a      	ldr	r3, [pc, #424]	; (800917c <main+0x6c8>)
 8008fd2:	801a      	strh	r2, [r3, #0]
 8008fd4:	e000      	b.n	8008fd8 <main+0x524>
						continue;
 8008fd6:	46c0      	nop			; (mov r8, r8)
				for(i = 1; i < NUM_SOCKETS; ++i)
 8008fd8:	224f      	movs	r2, #79	; 0x4f
 8008fda:	18bb      	adds	r3, r7, r2
 8008fdc:	18ba      	adds	r2, r7, r2
 8008fde:	7812      	ldrb	r2, [r2, #0]
 8008fe0:	3201      	adds	r2, #1
 8008fe2:	701a      	strb	r2, [r3, #0]
 8008fe4:	234f      	movs	r3, #79	; 0x4f
 8008fe6:	18fb      	adds	r3, r7, r3
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b07      	cmp	r3, #7
 8008fec:	d800      	bhi.n	8008ff0 <main+0x53c>
 8008fee:	e776      	b.n	8008ede <main+0x42a>
					}
				}
			}
			/*** polling task: monitoring the interrupt Pin and trigger the interrupt ***/
			while (HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin)
 8008ff0:	e001      	b.n	8008ff6 <main+0x542>
					== GPIO_PIN_RESET)
			{
				/* parse incoming packet, extract arguments and URI in the ISR*/
				interrupt_CH395();
 8008ff2:	f000 fb33 	bl	800965c <interrupt_CH395>
			while (HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin)
 8008ff6:	2390      	movs	r3, #144	; 0x90
 8008ff8:	05db      	lsls	r3, r3, #23
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	0018      	movs	r0, r3
 8008ffe:	f7f8 fbcd 	bl	800179c <HAL_GPIO_ReadPin>
 8009002:	1e03      	subs	r3, r0, #0
 8009004:	d0f5      	beq.n	8008ff2 <main+0x53e>

		// TASK0.5: handle 485
		// parse received content
		{
			static uint8_t cmd_buf_485[LIB485_COMM_BUFFER_SIZE];
			int sizeCmd = read_command_from_serial485(p485, cmd_buf_485, sizeof(cmd_buf_485));
 8009006:	4b63      	ldr	r3, [pc, #396]	; (8009194 <main+0x6e0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2280      	movs	r2, #128	; 0x80
 800900c:	0052      	lsls	r2, r2, #1
 800900e:	4962      	ldr	r1, [pc, #392]	; (8009198 <main+0x6e4>)
 8009010:	0018      	movs	r0, r3
 8009012:	f7ff f8f1 	bl	80081f8 <read_command_from_serial485>
 8009016:	0003      	movs	r3, r0
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
			if ((sizeCmd > 0) && (execute_command_string(&CommandParser, cmd_buf_485, sizeCmd) >= 0))
 800901a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901c:	2b00      	cmp	r3, #0
 800901e:	dd15      	ble.n	800904c <main+0x598>
 8009020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009022:	495d      	ldr	r1, [pc, #372]	; (8009198 <main+0x6e4>)
 8009024:	4b5d      	ldr	r3, [pc, #372]	; (800919c <main+0x6e8>)
 8009026:	0018      	movs	r0, r3
 8009028:	f7ff fd0f 	bl	8008a4a <execute_command_string>
 800902c:	1e03      	subs	r3, r0, #0
 800902e:	db0d      	blt.n	800904c <main+0x598>
			{
				// if the command has response to the client, the send
				// hasResponse stores the length of the response content
				if (CommandParser.hasResponse > 0)
 8009030:	4b5a      	ldr	r3, [pc, #360]	; (800919c <main+0x6e8>)
 8009032:	885b      	ldrh	r3, [r3, #2]
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d008      	beq.n	800904c <main+0x598>
				{
					send_serial485(p485,  CommandParser.bufRet, CommandParser.hasResponse);
 800903a:	4b56      	ldr	r3, [pc, #344]	; (8009194 <main+0x6e0>)
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	4b57      	ldr	r3, [pc, #348]	; (800919c <main+0x6e8>)
 8009040:	885b      	ldrh	r3, [r3, #2]
 8009042:	b29a      	uxth	r2, r3
 8009044:	4b56      	ldr	r3, [pc, #344]	; (80091a0 <main+0x6ec>)
 8009046:	0019      	movs	r1, r3
 8009048:	f7ff f884 	bl	8008154 <send_serial485>
				}
			}
		}
		// TASK1: handle EEPROM save
		uint32_t nowTick = HAL_GetTick();
 800904c:	f7f7 fd12 	bl	8000a74 <HAL_GetTick>
 8009050:	0003      	movs	r3, r0
 8009052:	623b      	str	r3, [r7, #32]
		{
			// save each 5 seconds
			if (nowTick - lastWakeupTime >= 3000)
 8009054:	4b53      	ldr	r3, [pc, #332]	; (80091a4 <main+0x6f0>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6a3a      	ldr	r2, [r7, #32]
 800905a:	1ad3      	subs	r3, r2, r3
 800905c:	4a52      	ldr	r2, [pc, #328]	; (80091a8 <main+0x6f4>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d90d      	bls.n	800907e <main+0x5ca>
			{
				if (isModified)
 8009062:	4b52      	ldr	r3, [pc, #328]	; (80091ac <main+0x6f8>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <main+0x5ca>
				{
					save_config(&cfg);
 800906a:	4b51      	ldr	r3, [pc, #324]	; (80091b0 <main+0x6fc>)
 800906c:	0018      	movs	r0, r3
 800906e:	f7f7 f917 	bl	80002a0 <save_config>
					isModified = false;
 8009072:	4b4e      	ldr	r3, [pc, #312]	; (80091ac <main+0x6f8>)
 8009074:	2200      	movs	r2, #0
 8009076:	701a      	strb	r2, [r3, #0]
					lastWakeupTime = nowTick;
 8009078:	4b4a      	ldr	r3, [pc, #296]	; (80091a4 <main+0x6f0>)
 800907a:	6a3a      	ldr	r2, [r7, #32]
 800907c:	601a      	str	r2, [r3, #0]
		}

		/* TASK2: check if CPLD sends IP request */
		{
			// when SelectorM1&2 all pins are activated(LOW), means requesting IP display
			bool activated = true;
 800907e:	2341      	movs	r3, #65	; 0x41
 8009080:	18fb      	adds	r3, r7, r3
 8009082:	2201      	movs	r2, #1
 8009084:	701a      	strb	r2, [r3, #0]
			for (uint8_t iSel = 0; iSel < N_SELECTORS; ++iSel)
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	18fb      	adds	r3, r7, r3
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	e04a      	b.n	8009126 <main+0x672>
			{

				for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8009090:	233f      	movs	r3, #63	; 0x3f
 8009092:	18fb      	adds	r3, r7, r3
 8009094:	2200      	movs	r2, #0
 8009096:	701a      	strb	r2, [r3, #0]
 8009098:	e032      	b.n	8009100 <main+0x64c>
				{
					uint8_t d = HAL_GPIO_ReadPin(
 800909a:	2440      	movs	r4, #64	; 0x40
 800909c:	193b      	adds	r3, r7, r4
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	263f      	movs	r6, #63	; 0x3f
 80090a2:	19bb      	adds	r3, r7, r6
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	4943      	ldr	r1, [pc, #268]	; (80091b4 <main+0x700>)
 80090a8:	00d8      	lsls	r0, r3, #3
 80090aa:	0013      	movs	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	18c3      	adds	r3, r0, r3
 80090b4:	585d      	ldr	r5, [r3, r1]
 80090b6:	193b      	adds	r3, r7, r4
 80090b8:	781a      	ldrb	r2, [r3, #0]
 80090ba:	19bb      	adds	r3, r7, r6
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	493d      	ldr	r1, [pc, #244]	; (80091b4 <main+0x700>)
 80090c0:	00d8      	lsls	r0, r3, #3
 80090c2:	0013      	movs	r3, r2
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	1a9b      	subs	r3, r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	18c3      	adds	r3, r0, r3
 80090cc:	18cb      	adds	r3, r1, r3
 80090ce:	3304      	adds	r3, #4
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	261f      	movs	r6, #31
 80090d4:	19bc      	adds	r4, r7, r6
 80090d6:	0019      	movs	r1, r3
 80090d8:	0028      	movs	r0, r5
 80090da:	f7f8 fb5f 	bl	800179c <HAL_GPIO_ReadPin>
 80090de:	0003      	movs	r3, r0
 80090e0:	7023      	strb	r3, [r4, #0]
							SelectorM[iSel].PIN_BCDs[iBCD].group,
							SelectorM[iSel].PIN_BCDs[iBCD].pin);
					if (d != GPIO_PIN_RESET)
 80090e2:	19bb      	adds	r3, r7, r6
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <main+0x640>
					{
						activated = false;
 80090ea:	2341      	movs	r3, #65	; 0x41
 80090ec:	18fb      	adds	r3, r7, r3
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
						break;
 80090f2:	e00a      	b.n	800910a <main+0x656>
				for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 80090f4:	223f      	movs	r2, #63	; 0x3f
 80090f6:	18bb      	adds	r3, r7, r2
 80090f8:	18ba      	adds	r2, r7, r2
 80090fa:	7812      	ldrb	r2, [r2, #0]
 80090fc:	3201      	adds	r2, #1
 80090fe:	701a      	strb	r2, [r3, #0]
 8009100:	233f      	movs	r3, #63	; 0x3f
 8009102:	18fb      	adds	r3, r7, r3
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d9c7      	bls.n	800909a <main+0x5e6>
					}
				}
				if (!activated)
 800910a:	2341      	movs	r3, #65	; 0x41
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	2201      	movs	r2, #1
 8009112:	4053      	eors	r3, r2
 8009114:	b2db      	uxtb	r3, r3
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10b      	bne.n	8009132 <main+0x67e>
			for (uint8_t iSel = 0; iSel < N_SELECTORS; ++iSel)
 800911a:	2240      	movs	r2, #64	; 0x40
 800911c:	18bb      	adds	r3, r7, r2
 800911e:	18ba      	adds	r2, r7, r2
 8009120:	7812      	ldrb	r2, [r2, #0]
 8009122:	3201      	adds	r2, #1
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	2340      	movs	r3, #64	; 0x40
 8009128:	18fb      	adds	r3, r7, r3
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d9af      	bls.n	8009090 <main+0x5dc>
 8009130:	e000      	b.n	8009134 <main+0x680>
					break;
 8009132:	46c0      	nop			; (mov r8, r8)
			}
			if (idxDisplayIP < 0 && activated)
 8009134:	4b20      	ldr	r3, [pc, #128]	; (80091b8 <main+0x704>)
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	b25b      	sxtb	r3, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	da08      	bge.n	8009150 <main+0x69c>
 800913e:	2341      	movs	r3, #65	; 0x41
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <main+0x69c>
				display_IP(true);
 8009148:	2001      	movs	r0, #1
 800914a:	f001 f8a5 	bl	800a298 <display_IP>
 800914e:	e011      	b.n	8009174 <main+0x6c0>
			else if (idxDisplayIP >= 0 && !activated)
 8009150:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <main+0x704>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	b25b      	sxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	da00      	bge.n	800915c <main+0x6a8>
 800915a:	e59a      	b.n	8008c92 <main+0x1de>
 800915c:	2341      	movs	r3, #65	; 0x41
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2201      	movs	r2, #1
 8009164:	4053      	eors	r3, r2
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b00      	cmp	r3, #0
 800916a:	d100      	bne.n	800916e <main+0x6ba>
 800916c:	e591      	b.n	8008c92 <main+0x1de>
				display_IP(false);
 800916e:	2000      	movs	r0, #0
 8009170:	f001 f892 	bl	800a298 <display_IP>
	{
 8009174:	e58d      	b.n	8008c92 <main+0x1de>
 8009176:	46c0      	nop			; (mov r8, r8)
 8009178:	20000010 	.word	0x20000010
 800917c:	200010d0 	.word	0x200010d0
 8009180:	200010cf 	.word	0x200010cf
 8009184:	200008c0 	.word	0x200008c0
 8009188:	200010d8 	.word	0x200010d8
 800918c:	0800b34c 	.word	0x0800b34c
 8009190:	20001158 	.word	0x20001158
 8009194:	20000680 	.word	0x20000680
 8009198:	200011d8 	.word	0x200011d8
 800919c:	20001954 	.word	0x20001954
 80091a0:	20001958 	.word	0x20001958
 80091a4:	200010d4 	.word	0x200010d4
 80091a8:	00000bb7 	.word	0x00000bb7
 80091ac:	200006c4 	.word	0x200006c4
 80091b0:	2000136c 	.word	0x2000136c
 80091b4:	20001aec 	.word	0x20001aec
 80091b8:	2000069c 	.word	0x2000069c

080091bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091bc:	b590      	push	{r4, r7, lr}
 80091be:	b091      	sub	sp, #68	; 0x44
 80091c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091c2:	2410      	movs	r4, #16
 80091c4:	193b      	adds	r3, r7, r4
 80091c6:	0018      	movs	r0, r3
 80091c8:	2330      	movs	r3, #48	; 0x30
 80091ca:	001a      	movs	r2, r3
 80091cc:	2100      	movs	r1, #0
 80091ce:	f001 fde0 	bl	800ad92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091d2:	003b      	movs	r3, r7
 80091d4:	0018      	movs	r0, r3
 80091d6:	2310      	movs	r3, #16
 80091d8:	001a      	movs	r2, r3
 80091da:	2100      	movs	r1, #0
 80091dc:	f001 fdd9 	bl	800ad92 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80091e0:	0021      	movs	r1, r4
 80091e2:	187b      	adds	r3, r7, r1
 80091e4:	220a      	movs	r2, #10
 80091e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80091e8:	187b      	adds	r3, r7, r1
 80091ea:	2201      	movs	r2, #1
 80091ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80091ee:	187b      	adds	r3, r7, r1
 80091f0:	2210      	movs	r2, #16
 80091f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80091f4:	187b      	adds	r3, r7, r1
 80091f6:	2201      	movs	r2, #1
 80091f8:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	2202      	movs	r2, #2
 80091fe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8009200:	187b      	adds	r3, r7, r1
 8009202:	2200      	movs	r2, #0
 8009204:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8009206:	187b      	adds	r3, r7, r1
 8009208:	22a0      	movs	r2, #160	; 0xa0
 800920a:	0392      	lsls	r2, r2, #14
 800920c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800920e:	187b      	adds	r3, r7, r1
 8009210:	2200      	movs	r2, #0
 8009212:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009214:	187b      	adds	r3, r7, r1
 8009216:	0018      	movs	r0, r3
 8009218:	f7f8 fafa 	bl	8001810 <HAL_RCC_OscConfig>
 800921c:	1e03      	subs	r3, r0, #0
 800921e:	d001      	beq.n	8009224 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8009220:	f001 f994 	bl	800a54c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009224:	003b      	movs	r3, r7
 8009226:	2207      	movs	r2, #7
 8009228:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800922a:	003b      	movs	r3, r7
 800922c:	2202      	movs	r2, #2
 800922e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009230:	003b      	movs	r3, r7
 8009232:	2200      	movs	r2, #0
 8009234:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009236:	003b      	movs	r3, r7
 8009238:	2280      	movs	r2, #128	; 0x80
 800923a:	00d2      	lsls	r2, r2, #3
 800923c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800923e:	003b      	movs	r3, r7
 8009240:	2101      	movs	r1, #1
 8009242:	0018      	movs	r0, r3
 8009244:	f7f8 fdfe 	bl	8001e44 <HAL_RCC_ClockConfig>
 8009248:	1e03      	subs	r3, r0, #0
 800924a:	d001      	beq.n	8009250 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800924c:	f001 f97e 	bl	800a54c <Error_Handler>
  }
}
 8009250:	46c0      	nop			; (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	b011      	add	sp, #68	; 0x44
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN IWDG_Init 2 */
#endif
  /* USER CODE END IWDG_Init 2 */

}
 800925c:	46c0      	nop			; (mov r8, r8)
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009268:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <MX_SPI1_Init+0x74>)
 800926a:	4a1c      	ldr	r2, [pc, #112]	; (80092dc <MX_SPI1_Init+0x78>)
 800926c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800926e:	4b1a      	ldr	r3, [pc, #104]	; (80092d8 <MX_SPI1_Init+0x74>)
 8009270:	2282      	movs	r2, #130	; 0x82
 8009272:	0052      	lsls	r2, r2, #1
 8009274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009276:	4b18      	ldr	r3, [pc, #96]	; (80092d8 <MX_SPI1_Init+0x74>)
 8009278:	2200      	movs	r2, #0
 800927a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800927c:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <MX_SPI1_Init+0x74>)
 800927e:	22e0      	movs	r2, #224	; 0xe0
 8009280:	00d2      	lsls	r2, r2, #3
 8009282:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009284:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <MX_SPI1_Init+0x74>)
 8009286:	2202      	movs	r2, #2
 8009288:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800928a:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <MX_SPI1_Init+0x74>)
 800928c:	2201      	movs	r2, #1
 800928e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009290:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <MX_SPI1_Init+0x74>)
 8009292:	2280      	movs	r2, #128	; 0x80
 8009294:	0092      	lsls	r2, r2, #2
 8009296:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009298:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <MX_SPI1_Init+0x74>)
 800929a:	2200      	movs	r2, #0
 800929c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092a6:	2200      	movs	r2, #0
 80092a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092aa:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80092b0:	4b09      	ldr	r3, [pc, #36]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092b2:	2207      	movs	r2, #7
 80092b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80092b6:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092b8:	2200      	movs	r2, #0
 80092ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092be:	2200      	movs	r2, #0
 80092c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <MX_SPI1_Init+0x74>)
 80092c4:	0018      	movs	r0, r3
 80092c6:	f7f8 ff01 	bl	80020cc <HAL_SPI_Init>
 80092ca:	1e03      	subs	r3, r0, #0
 80092cc:	d001      	beq.n	80092d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80092ce:	f001 f93d 	bl	800a54c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80092d2:	46c0      	nop			; (mov r8, r8)
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	20001a88 	.word	0x20001a88
 80092dc:	40013000 	.word	0x40013000

080092e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80092e4:	4b0d      	ldr	r3, [pc, #52]	; (800931c <MX_TIM6_Init+0x3c>)
 80092e6:	4a0e      	ldr	r2, [pc, #56]	; (8009320 <MX_TIM6_Init+0x40>)
 80092e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <MX_TIM6_Init+0x3c>)
 80092ec:	22fa      	movs	r2, #250	; 0xfa
 80092ee:	0192      	lsls	r2, r2, #6
 80092f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092f2:	4b0a      	ldr	r3, [pc, #40]	; (800931c <MX_TIM6_Init+0x3c>)
 80092f4:	2200      	movs	r2, #0
 80092f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80092f8:	4b08      	ldr	r3, [pc, #32]	; (800931c <MX_TIM6_Init+0x3c>)
 80092fa:	22fa      	movs	r2, #250	; 0xfa
 80092fc:	0092      	lsls	r2, r2, #2
 80092fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <MX_TIM6_Init+0x3c>)
 8009302:	2280      	movs	r2, #128	; 0x80
 8009304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8009306:	4b05      	ldr	r3, [pc, #20]	; (800931c <MX_TIM6_Init+0x3c>)
 8009308:	0018      	movs	r0, r3
 800930a:	f7f9 ff1b 	bl	8003144 <HAL_TIM_Base_Init>
 800930e:	1e03      	subs	r3, r0, #0
 8009310:	d001      	beq.n	8009316 <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 8009312:	f001 f91b 	bl	800a54c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}
 800931c:	20001a40 	.word	0x20001a40
 8009320:	40001000 	.word	0x40001000

08009324 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009328:	4b14      	ldr	r3, [pc, #80]	; (800937c <MX_USART2_UART_Init+0x58>)
 800932a:	4a15      	ldr	r2, [pc, #84]	; (8009380 <MX_USART2_UART_Init+0x5c>)
 800932c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009330:	2296      	movs	r2, #150	; 0x96
 8009332:	0192      	lsls	r2, r2, #6
 8009334:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009338:	2200      	movs	r2, #0
 800933a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800933c:	4b0f      	ldr	r3, [pc, #60]	; (800937c <MX_USART2_UART_Init+0x58>)
 800933e:	2200      	movs	r2, #0
 8009340:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009344:	2200      	movs	r2, #0
 8009346:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009348:	4b0c      	ldr	r3, [pc, #48]	; (800937c <MX_USART2_UART_Init+0x58>)
 800934a:	220c      	movs	r2, #12
 800934c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009350:	2200      	movs	r2, #0
 8009352:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009354:	4b09      	ldr	r3, [pc, #36]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009356:	2200      	movs	r2, #0
 8009358:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800935a:	4b08      	ldr	r3, [pc, #32]	; (800937c <MX_USART2_UART_Init+0x58>)
 800935c:	2200      	movs	r2, #0
 800935e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009360:	4b06      	ldr	r3, [pc, #24]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009362:	2200      	movs	r2, #0
 8009364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009366:	4b05      	ldr	r3, [pc, #20]	; (800937c <MX_USART2_UART_Init+0x58>)
 8009368:	0018      	movs	r0, r3
 800936a:	f7fa f957 	bl	800361c <HAL_UART_Init>
 800936e:	1e03      	subs	r3, r0, #0
 8009370:	d001      	beq.n	8009376 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009372:	f001 f8eb 	bl	800a54c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009376:	46c0      	nop			; (mov r8, r8)
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20001b24 	.word	0x20001b24
 8009380:	40004400 	.word	0x40004400

08009384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800938a:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <MX_DMA_Init+0x38>)
 800938c:	695a      	ldr	r2, [r3, #20]
 800938e:	4b0b      	ldr	r3, [pc, #44]	; (80093bc <MX_DMA_Init+0x38>)
 8009390:	2101      	movs	r1, #1
 8009392:	430a      	orrs	r2, r1
 8009394:	615a      	str	r2, [r3, #20]
 8009396:	4b09      	ldr	r3, [pc, #36]	; (80093bc <MX_DMA_Init+0x38>)
 8009398:	695b      	ldr	r3, [r3, #20]
 800939a:	2201      	movs	r2, #1
 800939c:	4013      	ands	r3, r2
 800939e:	607b      	str	r3, [r7, #4]
 80093a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 1, 0);
 80093a2:	2200      	movs	r2, #0
 80093a4:	2101      	movs	r1, #1
 80093a6:	200b      	movs	r0, #11
 80093a8:	f7f7 fc3e 	bl	8000c28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 80093ac:	200b      	movs	r0, #11
 80093ae:	f7f7 fc50 	bl	8000c52 <HAL_NVIC_EnableIRQ>

}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	46bd      	mov	sp, r7
 80093b6:	b002      	add	sp, #8
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	46c0      	nop			; (mov r8, r8)
 80093bc:	40021000 	.word	0x40021000

080093c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80093c0:	b590      	push	{r4, r7, lr}
 80093c2:	b089      	sub	sp, #36	; 0x24
 80093c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093c6:	240c      	movs	r4, #12
 80093c8:	193b      	adds	r3, r7, r4
 80093ca:	0018      	movs	r0, r3
 80093cc:	2314      	movs	r3, #20
 80093ce:	001a      	movs	r2, r3
 80093d0:	2100      	movs	r1, #0
 80093d2:	f001 fcde 	bl	800ad92 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80093d6:	4b60      	ldr	r3, [pc, #384]	; (8009558 <MX_GPIO_Init+0x198>)
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	4b5f      	ldr	r3, [pc, #380]	; (8009558 <MX_GPIO_Init+0x198>)
 80093dc:	2180      	movs	r1, #128	; 0x80
 80093de:	03c9      	lsls	r1, r1, #15
 80093e0:	430a      	orrs	r2, r1
 80093e2:	615a      	str	r2, [r3, #20]
 80093e4:	4b5c      	ldr	r3, [pc, #368]	; (8009558 <MX_GPIO_Init+0x198>)
 80093e6:	695a      	ldr	r2, [r3, #20]
 80093e8:	2380      	movs	r3, #128	; 0x80
 80093ea:	03db      	lsls	r3, r3, #15
 80093ec:	4013      	ands	r3, r2
 80093ee:	60bb      	str	r3, [r7, #8]
 80093f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80093f2:	4b59      	ldr	r3, [pc, #356]	; (8009558 <MX_GPIO_Init+0x198>)
 80093f4:	695a      	ldr	r2, [r3, #20]
 80093f6:	4b58      	ldr	r3, [pc, #352]	; (8009558 <MX_GPIO_Init+0x198>)
 80093f8:	2180      	movs	r1, #128	; 0x80
 80093fa:	0289      	lsls	r1, r1, #10
 80093fc:	430a      	orrs	r2, r1
 80093fe:	615a      	str	r2, [r3, #20]
 8009400:	4b55      	ldr	r3, [pc, #340]	; (8009558 <MX_GPIO_Init+0x198>)
 8009402:	695a      	ldr	r2, [r3, #20]
 8009404:	2380      	movs	r3, #128	; 0x80
 8009406:	029b      	lsls	r3, r3, #10
 8009408:	4013      	ands	r3, r2
 800940a:	607b      	str	r3, [r7, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800940e:	4b52      	ldr	r3, [pc, #328]	; (8009558 <MX_GPIO_Init+0x198>)
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	4b51      	ldr	r3, [pc, #324]	; (8009558 <MX_GPIO_Init+0x198>)
 8009414:	2180      	movs	r1, #128	; 0x80
 8009416:	02c9      	lsls	r1, r1, #11
 8009418:	430a      	orrs	r2, r1
 800941a:	615a      	str	r2, [r3, #20]
 800941c:	4b4e      	ldr	r3, [pc, #312]	; (8009558 <MX_GPIO_Init+0x198>)
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	2380      	movs	r3, #128	; 0x80
 8009422:	02db      	lsls	r3, r3, #11
 8009424:	4013      	ands	r3, r2
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin
 800942a:	494c      	ldr	r1, [pc, #304]	; (800955c <MX_GPIO_Init+0x19c>)
 800942c:	2390      	movs	r3, #144	; 0x90
 800942e:	05db      	lsls	r3, r3, #23
 8009430:	2201      	movs	r2, #1
 8009432:	0018      	movs	r0, r3
 8009434:	f7f8 f9cf 	bl	80017d6 <HAL_GPIO_WritePin>
                          |BCD1_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XDISPLAY_Pin|BCDM2_2_Pin|BCDM2_1_Pin|BCDM2_0_Pin
 8009438:	4949      	ldr	r1, [pc, #292]	; (8009560 <MX_GPIO_Init+0x1a0>)
 800943a:	4b4a      	ldr	r3, [pc, #296]	; (8009564 <MX_GPIO_Init+0x1a4>)
 800943c:	2201      	movs	r2, #1
 800943e:	0018      	movs	r0, r3
 8009440:	f7f8 f9c9 	bl	80017d6 <HAL_GPIO_WritePin>
                          |BCD1_1_Pin|BCD1_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RW485_GPIO_Port, RW485_Pin, GPIO_PIN_RESET);
 8009444:	2380      	movs	r3, #128	; 0x80
 8009446:	011b      	lsls	r3, r3, #4
 8009448:	4846      	ldr	r0, [pc, #280]	; (8009564 <MX_GPIO_Init+0x1a4>)
 800944a:	2200      	movs	r2, #0
 800944c:	0019      	movs	r1, r3
 800944e:	f7f8 f9c2 	bl	80017d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009452:	193b      	adds	r3, r7, r4
 8009454:	2203      	movs	r2, #3
 8009456:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009458:	193b      	adds	r3, r7, r4
 800945a:	2200      	movs	r2, #0
 800945c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800945e:	193b      	adds	r3, r7, r4
 8009460:	2200      	movs	r2, #0
 8009462:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009464:	193b      	adds	r3, r7, r4
 8009466:	4a40      	ldr	r2, [pc, #256]	; (8009568 <MX_GPIO_Init+0x1a8>)
 8009468:	0019      	movs	r1, r3
 800946a:	0010      	movs	r0, r2
 800946c:	f7f8 f826 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8009470:	193b      	adds	r3, r7, r4
 8009472:	2202      	movs	r2, #2
 8009474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009476:	193b      	adds	r3, r7, r4
 8009478:	2284      	movs	r2, #132	; 0x84
 800947a:	0392      	lsls	r2, r2, #14
 800947c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800947e:	193b      	adds	r3, r7, r4
 8009480:	2201      	movs	r2, #1
 8009482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 8009484:	193a      	adds	r2, r7, r4
 8009486:	2390      	movs	r3, #144	; 0x90
 8009488:	05db      	lsls	r3, r3, #23
 800948a:	0011      	movs	r1, r2
 800948c:	0018      	movs	r0, r3
 800948e:	f7f8 f815 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin BCD2_2_Pin BCD2_1_Pin BCD2_0_Pin
                           BCD1_2_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin
 8009492:	193b      	adds	r3, r7, r4
 8009494:	4a31      	ldr	r2, [pc, #196]	; (800955c <MX_GPIO_Init+0x19c>)
 8009496:	601a      	str	r2, [r3, #0]
                          |BCD1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8009498:	193b      	adds	r3, r7, r4
 800949a:	2211      	movs	r2, #17
 800949c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800949e:	193b      	adds	r3, r7, r4
 80094a0:	2201      	movs	r2, #1
 80094a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094a4:	193b      	adds	r3, r7, r4
 80094a6:	2200      	movs	r2, #0
 80094a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094aa:	193a      	adds	r2, r7, r4
 80094ac:	2390      	movs	r3, #144	; 0x90
 80094ae:	05db      	lsls	r3, r3, #23
 80094b0:	0011      	movs	r1, r2
 80094b2:	0018      	movs	r0, r3
 80094b4:	f7f8 f802 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : XDISPLAY_Pin BCDM2_2_Pin BCDM2_1_Pin BCDM2_0_Pin
                           BCD1_1_Pin BCD1_0_Pin */
  GPIO_InitStruct.Pin = XDISPLAY_Pin|BCDM2_2_Pin|BCDM2_1_Pin|BCDM2_0_Pin
 80094b8:	193b      	adds	r3, r7, r4
 80094ba:	4a29      	ldr	r2, [pc, #164]	; (8009560 <MX_GPIO_Init+0x1a0>)
 80094bc:	601a      	str	r2, [r3, #0]
                          |BCD1_1_Pin|BCD1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80094be:	193b      	adds	r3, r7, r4
 80094c0:	2211      	movs	r2, #17
 80094c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094c4:	193b      	adds	r3, r7, r4
 80094c6:	2201      	movs	r2, #1
 80094c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ca:	193b      	adds	r3, r7, r4
 80094cc:	2200      	movs	r2, #0
 80094ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094d0:	193b      	adds	r3, r7, r4
 80094d2:	4a24      	ldr	r2, [pc, #144]	; (8009564 <MX_GPIO_Init+0x1a4>)
 80094d4:	0019      	movs	r1, r3
 80094d6:	0010      	movs	r0, r2
 80094d8:	f7f7 fff0 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RW485_Pin */
  GPIO_InitStruct.Pin = RW485_Pin;
 80094dc:	0021      	movs	r1, r4
 80094de:	187b      	adds	r3, r7, r1
 80094e0:	2280      	movs	r2, #128	; 0x80
 80094e2:	0112      	lsls	r2, r2, #4
 80094e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094e6:	000c      	movs	r4, r1
 80094e8:	193b      	adds	r3, r7, r4
 80094ea:	2201      	movs	r2, #1
 80094ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ee:	193b      	adds	r3, r7, r4
 80094f0:	2200      	movs	r2, #0
 80094f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094f4:	193b      	adds	r3, r7, r4
 80094f6:	2200      	movs	r2, #0
 80094f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RW485_GPIO_Port, &GPIO_InitStruct);
 80094fa:	193b      	adds	r3, r7, r4
 80094fc:	4a19      	ldr	r2, [pc, #100]	; (8009564 <MX_GPIO_Init+0x1a4>)
 80094fe:	0019      	movs	r1, r3
 8009500:	0010      	movs	r0, r2
 8009502:	f7f7 ffdb 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BCDM1_2_Pin */
  GPIO_InitStruct.Pin = BCDM1_2_Pin;
 8009506:	0021      	movs	r1, r4
 8009508:	187b      	adds	r3, r7, r1
 800950a:	2280      	movs	r2, #128	; 0x80
 800950c:	0212      	lsls	r2, r2, #8
 800950e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009510:	000c      	movs	r4, r1
 8009512:	193b      	adds	r3, r7, r4
 8009514:	2200      	movs	r2, #0
 8009516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009518:	193b      	adds	r3, r7, r4
 800951a:	2201      	movs	r2, #1
 800951c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BCDM1_2_GPIO_Port, &GPIO_InitStruct);
 800951e:	193b      	adds	r3, r7, r4
 8009520:	4a10      	ldr	r2, [pc, #64]	; (8009564 <MX_GPIO_Init+0x1a4>)
 8009522:	0019      	movs	r1, r3
 8009524:	0010      	movs	r0, r2
 8009526:	f7f7 ffc9 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BCDM1_1_Pin BCDM1_0_Pin */
  GPIO_InitStruct.Pin = BCDM1_1_Pin|BCDM1_0_Pin;
 800952a:	0021      	movs	r1, r4
 800952c:	187b      	adds	r3, r7, r1
 800952e:	22c0      	movs	r2, #192	; 0xc0
 8009530:	0092      	lsls	r2, r2, #2
 8009532:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009534:	187b      	adds	r3, r7, r1
 8009536:	2200      	movs	r2, #0
 8009538:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800953a:	187b      	adds	r3, r7, r1
 800953c:	2201      	movs	r2, #1
 800953e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009540:	187a      	adds	r2, r7, r1
 8009542:	2390      	movs	r3, #144	; 0x90
 8009544:	05db      	lsls	r3, r3, #23
 8009546:	0011      	movs	r1, r2
 8009548:	0018      	movs	r0, r3
 800954a:	f7f7 ffb7 	bl	80014bc <HAL_GPIO_Init>

}
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	46bd      	mov	sp, r7
 8009552:	b009      	add	sp, #36	; 0x24
 8009554:	bd90      	pop	{r4, r7, pc}
 8009556:	46c0      	nop			; (mov r8, r8)
 8009558:	40021000 	.word	0x40021000
 800955c:	00009c10 	.word	0x00009c10
 8009560:	00007418 	.word	0x00007418
 8009564:	48000400 	.word	0x48000400
 8009568:	48001400 	.word	0x48001400

0800956c <reset_CH395>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	onReceived_serial485(p485);
//}
void reset_CH395()
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
	uint8_t i ;
	flag_CH395_ready = false;
 8009572:	4b31      	ldr	r3, [pc, #196]	; (8009638 <reset_CH395+0xcc>)
 8009574:	2200      	movs	r2, #0
 8009576:	701a      	strb	r2, [r3, #0]
	ch395.RX_received = 0;
 8009578:	4b30      	ldr	r3, [pc, #192]	; (800963c <reset_CH395+0xd0>)
 800957a:	2200      	movs	r2, #0
 800957c:	765a      	strb	r2, [r3, #25]
	ch395.SOCK_responding = -1;
 800957e:	4b2f      	ldr	r3, [pc, #188]	; (800963c <reset_CH395+0xd0>)
 8009580:	22ff      	movs	r2, #255	; 0xff
 8009582:	769a      	strb	r2, [r3, #26]
	ch395.TX_available = 0xff;
 8009584:	4b2d      	ldr	r3, [pc, #180]	; (800963c <reset_CH395+0xd0>)
 8009586:	22ff      	movs	r2, #255	; 0xff
 8009588:	76da      	strb	r2, [r3, #27]
	ch395.socket_connected = 0;
 800958a:	4b2c      	ldr	r3, [pc, #176]	; (800963c <reset_CH395+0xd0>)
 800958c:	2200      	movs	r2, #0
 800958e:	761a      	strb	r2, [r3, #24]

	// setting HTTP sockets, 0, 1,2,3,4,5,6
	for ( i = 0; i < CH395_UDP_LISTEN_SOCK; i++)
 8009590:	1dfb      	adds	r3, r7, #7
 8009592:	2200      	movs	r2, #0
 8009594:	701a      	strb	r2, [r3, #0]
 8009596:	e012      	b.n	80095be <reset_CH395+0x52>
	{
		ch395.cfg.protocols[i] = CH395_PROTOCOL_HTTP;
 8009598:	1dfb      	adds	r3, r7, #7
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	4a27      	ldr	r2, [pc, #156]	; (800963c <reset_CH395+0xd0>)
 800959e:	18d3      	adds	r3, r2, r3
 80095a0:	2203      	movs	r2, #3
 80095a2:	741a      	strb	r2, [r3, #16]
		ch395.cfg.ports[i] = cfg.portHTTP;
 80095a4:	1dfb      	adds	r3, r7, #7
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <reset_CH395+0xd4>)
 80095aa:	216a      	movs	r1, #106	; 0x6a
 80095ac:	5a59      	ldrh	r1, [r3, r1]
 80095ae:	4b23      	ldr	r3, [pc, #140]	; (800963c <reset_CH395+0xd0>)
 80095b0:	0052      	lsls	r2, r2, #1
 80095b2:	52d1      	strh	r1, [r2, r3]
	for ( i = 0; i < CH395_UDP_LISTEN_SOCK; i++)
 80095b4:	1dfb      	adds	r3, r7, #7
 80095b6:	781a      	ldrb	r2, [r3, #0]
 80095b8:	1dfb      	adds	r3, r7, #7
 80095ba:	3201      	adds	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	1dfb      	adds	r3, r7, #7
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b06      	cmp	r3, #6
 80095c4:	d9e8      	bls.n	8009598 <reset_CH395+0x2c>
//	{
//		ch395.cfg.protocols[i] = CH395_PROTOCOL_TCP;
//		ch395.cfg.ports[i] = cfg.portTCP;
//	}
	// setting primitive UDP socket 7
	i = CH395_UDP_LISTEN_SOCK;
 80095c6:	1dfb      	adds	r3, r7, #7
 80095c8:	2207      	movs	r2, #7
 80095ca:	701a      	strb	r2, [r3, #0]
	ch395.cfg.protocols[i] = CH395_PROTOCOL_UDP;
 80095cc:	1dfb      	adds	r3, r7, #7
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	4a1a      	ldr	r2, [pc, #104]	; (800963c <reset_CH395+0xd0>)
 80095d2:	18d3      	adds	r3, r2, r3
 80095d4:	2201      	movs	r2, #1
 80095d6:	741a      	strb	r2, [r3, #16]
	ch395.cfg.ports[i] = cfg.portUDP;
 80095d8:	1dfb      	adds	r3, r7, #7
 80095da:	781a      	ldrb	r2, [r3, #0]
 80095dc:	4b18      	ldr	r3, [pc, #96]	; (8009640 <reset_CH395+0xd4>)
 80095de:	216e      	movs	r1, #110	; 0x6e
 80095e0:	5a59      	ldrh	r1, [r3, r1]
 80095e2:	4b16      	ldr	r3, [pc, #88]	; (800963c <reset_CH395+0xd0>)
 80095e4:	0052      	lsls	r2, r2, #1
 80095e6:	52d1      	strh	r1, [r2, r3]
	CH395CMDReset();
 80095e8:	f7fb fd56 	bl	8005098 <CH395CMDReset>
	Delay_ms(100); // wait for CH395 being ready from power on
 80095ec:	4b15      	ldr	r3, [pc, #84]	; (8009644 <reset_CH395+0xd8>)
 80095ee:	0018      	movs	r0, r3
 80095f0:	f7fc fb00 	bl	8005bf4 <Delay_us>
	// get CH395 chip MAC address
	CH395CMDGetMACAddr(MAC);
 80095f4:	4b14      	ldr	r3, [pc, #80]	; (8009648 <reset_CH395+0xdc>)
 80095f6:	0018      	movs	r0, r3
 80095f8:	f7fb fdf2 	bl	80051e0 <CH395CMDGetMACAddr>
	// initialize CH395 GPIO settings to INPUT/PULL DOWN
//	CH395WriteGPIOAddr(GPIO_DIR_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PU_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PD_REG, 0xff);
	CH395SetBuffer();
 80095fc:	f7fb fc3e 	bl	8004e7c <CH395SetBuffer>
	// initialize TCP server
	flag_CH395_ready = CH395TCPServerStart(*(uint32_t*) IP, cfg.portHTTP, cfg.portTCP);
 8009600:	4b12      	ldr	r3, [pc, #72]	; (800964c <reset_CH395+0xe0>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	4b0e      	ldr	r3, [pc, #56]	; (8009640 <reset_CH395+0xd4>)
 8009606:	226a      	movs	r2, #106	; 0x6a
 8009608:	5a99      	ldrh	r1, [r3, r2]
 800960a:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <reset_CH395+0xd4>)
 800960c:	226c      	movs	r2, #108	; 0x6c
 800960e:	5a9b      	ldrh	r3, [r3, r2]
 8009610:	001a      	movs	r2, r3
 8009612:	f7fb fc65 	bl	8004ee0 <CH395TCPServerStart>
 8009616:	0003      	movs	r3, r0
 8009618:	001a      	movs	r2, r3
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <reset_CH395+0xcc>)
 800961c:	701a      	strb	r2, [r3, #0]
	//CH395SetBuffer();
	flag_PHY_reconn = false;
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <reset_CH395+0xe4>)
 8009620:	2200      	movs	r2, #0
 8009622:	701a      	strb	r2, [r3, #0]
	flag_IP_conflict = false;
 8009624:	4b0b      	ldr	r3, [pc, #44]	; (8009654 <reset_CH395+0xe8>)
 8009626:	2200      	movs	r2, #0
 8009628:	701a      	strb	r2, [r3, #0]
	flag_CH395_DHCP_ready = false;
 800962a:	4b0b      	ldr	r3, [pc, #44]	; (8009658 <reset_CH395+0xec>)
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
}
 8009630:	46c0      	nop			; (mov r8, r8)
 8009632:	46bd      	mov	sp, r7
 8009634:	b002      	add	sp, #8
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200010cc 	.word	0x200010cc
 800963c:	20000010 	.word	0x20000010
 8009640:	2000136c 	.word	0x2000136c
 8009644:	000186a0 	.word	0x000186a0
 8009648:	200010c4 	.word	0x200010c4
 800964c:	200010ac 	.word	0x200010ac
 8009650:	200010ca 	.word	0x200010ca
 8009654:	200010cb 	.word	0x200010cb
 8009658:	200010cd 	.word	0x200010cd

0800965c <interrupt_CH395>:
 * ************************************************************
 * Very Important: The main funcion for Ethernet activities
 * ************************************************************
 * */
void interrupt_CH395()
{
 800965c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965e:	b09f      	sub	sp, #124	; 0x7c
 8009660:	af00      	add	r7, sp, #0
	// process interrupt requests from CH395
	uint8_t sock_int_status, i;
	uint16_t glob_int_status;
	//BEGIN_INT_CH395:
	// read global int status
	glob_int_status = CH395CMDGetGlobIntStatus_ALL();
 8009662:	2570      	movs	r5, #112	; 0x70
 8009664:	197c      	adds	r4, r7, r5
 8009666:	f7fc fa1b 	bl	8005aa0 <CH395CMDGetGlobIntStatus_ALL>
 800966a:	0003      	movs	r3, r0
 800966c:	8023      	strh	r3, [r4, #0]

	// CASE: TCP unreach error
	if (glob_int_status & GINT_STAT_UNREACH)
 800966e:	197b      	adds	r3, r7, r5
 8009670:	881b      	ldrh	r3, [r3, #0]
 8009672:	2201      	movs	r2, #1
 8009674:	4013      	ands	r3, r2
 8009676:	d037      	beq.n	80096e8 <interrupt_CH395+0x8c>
	{
		uint8_t unreach[8];
		CH395CMDGetUnreachIPPT(unreach);
 8009678:	2440      	movs	r4, #64	; 0x40
 800967a:	193b      	adds	r3, r7, r4
 800967c:	0018      	movs	r0, r3
 800967e:	f7fb fddb 	bl	8005238 <CH395CMDGetUnreachIPPT>
		// invalidate all Parsers
		// unreach byte 3, byte 2 combine to be port number
		uint16_t port = ((uint16_t)unreach[3] << 8) | unreach[2];
 8009682:	0021      	movs	r1, r4
 8009684:	187b      	adds	r3, r7, r1
 8009686:	78db      	ldrb	r3, [r3, #3]
 8009688:	021b      	lsls	r3, r3, #8
 800968a:	b21a      	sxth	r2, r3
 800968c:	187b      	adds	r3, r7, r1
 800968e:	789b      	ldrb	r3, [r3, #2]
 8009690:	b21b      	sxth	r3, r3
 8009692:	4313      	orrs	r3, r2
 8009694:	b21a      	sxth	r2, r3
 8009696:	2368      	movs	r3, #104	; 0x68
 8009698:	18fb      	adds	r3, r7, r3
 800969a:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 1; i < NUM_SOCKETS; ++i)
 800969c:	236f      	movs	r3, #111	; 0x6f
 800969e:	18fb      	adds	r3, r7, r3
 80096a0:	2201      	movs	r2, #1
 80096a2:	701a      	strb	r2, [r3, #0]
 80096a4:	e01b      	b.n	80096de <interrupt_CH395+0x82>
		{
			HTTPRequestParseState *pS = parseStates + i - 1;
 80096a6:	236f      	movs	r3, #111	; 0x6f
 80096a8:	18fb      	adds	r3, r7, r3
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	22a4      	movs	r2, #164	; 0xa4
 80096ae:	4353      	muls	r3, r2
 80096b0:	3ba4      	subs	r3, #164	; 0xa4
 80096b2:	001a      	movs	r2, r3
 80096b4:	4bcd      	ldr	r3, [pc, #820]	; (80099ec <interrupt_CH395+0x390>)
 80096b6:	18d3      	adds	r3, r2, r3
 80096b8:	667b      	str	r3, [r7, #100]	; 0x64
			if(pS->port == port) resetHTTPParseState(pS);
 80096ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096bc:	2246      	movs	r2, #70	; 0x46
 80096be:	5a9b      	ldrh	r3, [r3, r2]
 80096c0:	2268      	movs	r2, #104	; 0x68
 80096c2:	18ba      	adds	r2, r7, r2
 80096c4:	8812      	ldrh	r2, [r2, #0]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d103      	bne.n	80096d2 <interrupt_CH395+0x76>
 80096ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096cc:	0018      	movs	r0, r3
 80096ce:	f7fc febf 	bl	8006450 <resetHTTPParseState>
		for(uint8_t i = 1; i < NUM_SOCKETS; ++i)
 80096d2:	226f      	movs	r2, #111	; 0x6f
 80096d4:	18bb      	adds	r3, r7, r2
 80096d6:	18ba      	adds	r2, r7, r2
 80096d8:	7812      	ldrb	r2, [r2, #0]
 80096da:	3201      	adds	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	236f      	movs	r3, #111	; 0x6f
 80096e0:	18fb      	adds	r3, r7, r3
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b07      	cmp	r3, #7
 80096e6:	d9de      	bls.n	80096a6 <interrupt_CH395+0x4a>
		}
	}

	// CASE: DHCP
	if (glob_int_status & GINT_STAT_DHCP)
 80096e8:	2370      	movs	r3, #112	; 0x70
 80096ea:	18fb      	adds	r3, r7, r3
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	2208      	movs	r2, #8
 80096f0:	4013      	ands	r3, r2
 80096f2:	d02a      	beq.n	800974a <interrupt_CH395+0xee>
	{
		if(CH395GetDHCPStatus() == 0)
 80096f4:	f7fc f91e 	bl	8005934 <CH395GetDHCPStatus>
 80096f8:	1e03      	subs	r3, r0, #0
 80096fa:	d123      	bne.n	8009744 <interrupt_CH395+0xe8>
		{
			flag_CH395_DHCP_ready = true;
 80096fc:	4bbc      	ldr	r3, [pc, #752]	; (80099f0 <interrupt_CH395+0x394>)
 80096fe:	2201      	movs	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
			// get IP info from CH395
			uint8_t IPv4_Gateway_info[20];
			if(flag_CH395_DHCP_ready)
 8009702:	4bbb      	ldr	r3, [pc, #748]	; (80099f0 <interrupt_CH395+0x394>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01e      	beq.n	800974a <interrupt_CH395+0xee>
			{
				CH395GetIPInf(IPv4_Gateway_info); // BIG endian
 800970c:	242c      	movs	r4, #44	; 0x2c
 800970e:	193b      	adds	r3, r7, r4
 8009710:	0018      	movs	r0, r3
 8009712:	f7fc f92b 	bl	800596c <CH395GetIPInf>
				memcpy(IP, IPv4_Gateway_info, 4); // in CH395, the byte order of IPs and MACs are reversed (IP and MAC are Big-endian, others are little-endian)
 8009716:	4bb7      	ldr	r3, [pc, #732]	; (80099f4 <interrupt_CH395+0x398>)
 8009718:	193a      	adds	r2, r7, r4
 800971a:	6812      	ldr	r2, [r2, #0]
 800971c:	601a      	str	r2, [r3, #0]
				memcpy(IP_gateway, IPv4_Gateway_info + 4, 4); //
 800971e:	193b      	adds	r3, r7, r4
 8009720:	3304      	adds	r3, #4
 8009722:	4ab5      	ldr	r2, [pc, #724]	; (80099f8 <interrupt_CH395+0x39c>)
 8009724:	0010      	movs	r0, r2
 8009726:	0019      	movs	r1, r3
 8009728:	2304      	movs	r3, #4
 800972a:	001a      	movs	r2, r3
 800972c:	f001 fb28 	bl	800ad80 <memcpy>
				memcpy(IP_mask, IPv4_Gateway_info + 8, 4); //
 8009730:	193b      	adds	r3, r7, r4
 8009732:	3308      	adds	r3, #8
 8009734:	4ab1      	ldr	r2, [pc, #708]	; (80099fc <interrupt_CH395+0x3a0>)
 8009736:	0010      	movs	r0, r2
 8009738:	0019      	movs	r1, r3
 800973a:	2304      	movs	r3, #4
 800973c:	001a      	movs	r2, r3
 800973e:	f001 fb1f 	bl	800ad80 <memcpy>
 8009742:	e002      	b.n	800974a <interrupt_CH395+0xee>
			}
		}
		else
		{
			flag_CH395_DHCP_ready = false;
 8009744:	4baa      	ldr	r3, [pc, #680]	; (80099f0 <interrupt_CH395+0x394>)
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
		}
	}
	// CASE: Phy change
	if (glob_int_status & GINT_STAT_PHY_CHANGE)
 800974a:	2370      	movs	r3, #112	; 0x70
 800974c:	18fb      	adds	r3, r7, r3
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	2204      	movs	r2, #4
 8009752:	4013      	ands	r3, r2
 8009754:	d017      	beq.n	8009786 <interrupt_CH395+0x12a>
	{
		uint8_t phy_status = (CH395CMDGetPHYStatus());
 8009756:	2563      	movs	r5, #99	; 0x63
 8009758:	197c      	adds	r4, r7, r5
 800975a:	f7fb fcd3 	bl	8005104 <CH395CMDGetPHYStatus>
 800975e:	0003      	movs	r3, r0
 8009760:	7023      	strb	r3, [r4, #0]
		switch (phy_status)
 8009762:	197b      	adds	r3, r7, r5
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d106      	bne.n	8009778 <interrupt_CH395+0x11c>
		{
		case PHY_DISCONN:
			flag_CH395_ready = false;
 800976a:	4ba5      	ldr	r3, [pc, #660]	; (8009a00 <interrupt_CH395+0x3a4>)
 800976c:	2200      	movs	r2, #0
 800976e:	701a      	strb	r2, [r3, #0]
			flag_PHY_reconn = true;
 8009770:	4ba4      	ldr	r3, [pc, #656]	; (8009a04 <interrupt_CH395+0x3a8>)
 8009772:	2201      	movs	r2, #1
 8009774:	701a      	strb	r2, [r3, #0]
			break;
 8009776:	e007      	b.n	8009788 <interrupt_CH395+0x12c>
		default:
			flag_CH395_ready = true;
 8009778:	4ba1      	ldr	r3, [pc, #644]	; (8009a00 <interrupt_CH395+0x3a4>)
 800977a:	2201      	movs	r2, #1
 800977c:	701a      	strb	r2, [r3, #0]
			flag_PHY_reconn = false;
 800977e:	4ba1      	ldr	r3, [pc, #644]	; (8009a04 <interrupt_CH395+0x3a8>)
 8009780:	2200      	movs	r2, #0
 8009782:	701a      	strb	r2, [r3, #0]
			break;
 8009784:	e000      	b.n	8009788 <interrupt_CH395+0x12c>
		}
	}
 8009786:	46c0      	nop			; (mov r8, r8)

	// get socket interrupt status
	glob_int_status >>= 4;
 8009788:	2170      	movs	r1, #112	; 0x70
 800978a:	187b      	adds	r3, r7, r1
 800978c:	187a      	adds	r2, r7, r1
 800978e:	8812      	ldrh	r2, [r2, #0]
 8009790:	0912      	lsrs	r2, r2, #4
 8009792:	801a      	strh	r2, [r3, #0]
	// exit if no socket event occured
	if (!glob_int_status)
 8009794:	187b      	adds	r3, r7, r1
 8009796:	881b      	ldrh	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d101      	bne.n	80097a0 <interrupt_CH395+0x144>
 800979c:	f000 fbce 	bl	8009f3c <interrupt_CH395+0x8e0>
		goto END_INT_CH395;
	// handle SOCKET events
	for (i = 1; (i < NUM_SOCKETS) && (glob_int_status > 0); ++i)
 80097a0:	2373      	movs	r3, #115	; 0x73
 80097a2:	18fb      	adds	r3, r7, r3
 80097a4:	2201      	movs	r2, #1
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	f000 fbbc 	bl	8009f24 <interrupt_CH395+0x8c8>
	{
		glob_int_status >>= 1;
 80097ac:	2170      	movs	r1, #112	; 0x70
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	187a      	adds	r2, r7, r1
 80097b2:	8812      	ldrh	r2, [r2, #0]
 80097b4:	0852      	lsrs	r2, r2, #1
 80097b6:	801a      	strh	r2, [r3, #0]
		if (glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 80097b8:	187b      	adds	r3, r7, r1
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	2201      	movs	r2, #1
 80097be:	4013      	ands	r3, r2
 80097c0:	d101      	bne.n	80097c6 <interrupt_CH395+0x16a>
 80097c2:	f000 fba9 	bl	8009f18 <interrupt_CH395+0x8bc>
		{
			sock_int_status = CH395GetSocketInt(i);
 80097c6:	2562      	movs	r5, #98	; 0x62
 80097c8:	197c      	adds	r4, r7, r5
 80097ca:	2673      	movs	r6, #115	; 0x73
 80097cc:	19bb      	adds	r3, r7, r6
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	0018      	movs	r0, r3
 80097d2:	f7fc f849 	bl	8005868 <CH395GetSocketInt>
 80097d6:	0003      	movs	r3, r0
 80097d8:	7023      	strb	r3, [r4, #0]
			// CASE 1: Send buffer free
			if (sock_int_status & SINT_STAT_SENBUF_FREE)
 80097da:	197b      	adds	r3, r7, r5
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2201      	movs	r2, #1
 80097e0:	4013      	ands	r3, r2
 80097e2:	d00e      	beq.n	8009802 <interrupt_CH395+0x1a6>
			{
				ch395.TX_available |= (1 << i);
 80097e4:	4b88      	ldr	r3, [pc, #544]	; (8009a08 <interrupt_CH395+0x3ac>)
 80097e6:	7edb      	ldrb	r3, [r3, #27]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	b25a      	sxtb	r2, r3
 80097ec:	19bb      	adds	r3, r7, r6
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	2101      	movs	r1, #1
 80097f2:	4099      	lsls	r1, r3
 80097f4:	000b      	movs	r3, r1
 80097f6:	b25b      	sxtb	r3, r3
 80097f8:	4313      	orrs	r3, r2
 80097fa:	b25b      	sxtb	r3, r3
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	4b82      	ldr	r3, [pc, #520]	; (8009a08 <interrupt_CH395+0x3ac>)
 8009800:	76da      	strb	r2, [r3, #27]
			}
			// CASE 2: data received on SOCK i
			if (sock_int_status & SINT_STAT_RECV)
 8009802:	2362      	movs	r3, #98	; 0x62
 8009804:	18fb      	adds	r3, r7, r3
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	2204      	movs	r2, #4
 800980a:	4013      	ands	r3, r2
 800980c:	d100      	bne.n	8009810 <interrupt_CH395+0x1b4>
 800980e:	e30d      	b.n	8009e2c <interrupt_CH395+0x7d0>
			{
				/*
				 * This section of code reads at most CH395_SIZE_BUFFER-1 bytes from PHY buffer
				 * and discards the rest of the received data
				 */
				flag_CH395_ready = true; // force the chip to be active if anything is received
 8009810:	4b7b      	ldr	r3, [pc, #492]	; (8009a00 <interrupt_CH395+0x3a4>)
 8009812:	2201      	movs	r2, #1
 8009814:	701a      	strb	r2, [r3, #0]
				HTTPRequestParseState *pS = parseStates + i - 1;
 8009816:	2673      	movs	r6, #115	; 0x73
 8009818:	19bb      	adds	r3, r7, r6
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	22a4      	movs	r2, #164	; 0xa4
 800981e:	4353      	muls	r3, r2
 8009820:	3ba4      	subs	r3, #164	; 0xa4
 8009822:	001a      	movs	r2, r3
 8009824:	4b71      	ldr	r3, [pc, #452]	; (80099ec <interrupt_CH395+0x390>)
 8009826:	18d3      	adds	r3, r2, r3
 8009828:	65fb      	str	r3, [r7, #92]	; 0x5c
				activateHTTPParseState(pS); // renew the timeout counter when data received
 800982a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800982c:	0018      	movs	r0, r3
 800982e:	f7fc fe61 	bl	80064f4 <activateHTTPParseState>
				// get length of received data
				uint16_t len = CH395GetRecvLength(i);
 8009832:	256c      	movs	r5, #108	; 0x6c
 8009834:	197c      	adds	r4, r7, r5
 8009836:	19bb      	adds	r3, r7, r6
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	0018      	movs	r0, r3
 800983c:	f7fb feb0 	bl	80055a0 <CH395GetRecvLength>
 8009840:	0003      	movs	r3, r0
 8009842:	8023      	strh	r3, [r4, #0]
				// WARNING: avoid multiple access to the CH395 buffer, not thread safe
				CH395GetRecvData(
 8009844:	197b      	adds	r3, r7, r5
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	4a70      	ldr	r2, [pc, #448]	; (8009a0c <interrupt_CH395+0x3b0>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d904      	bls.n	8009858 <interrupt_CH395+0x1fc>
						i,
						(len < CH395_SIZE_BUFFER - 1) ? (len) : (len = CH395_SIZE_BUFFER - 1),
 800984e:	197b      	adds	r3, r7, r5
 8009850:	4a6f      	ldr	r2, [pc, #444]	; (8009a10 <interrupt_CH395+0x3b4>)
 8009852:	801a      	strh	r2, [r3, #0]
				CH395GetRecvData(
 8009854:	4b6e      	ldr	r3, [pc, #440]	; (8009a10 <interrupt_CH395+0x3b4>)
 8009856:	e002      	b.n	800985e <interrupt_CH395+0x202>
 8009858:	236c      	movs	r3, #108	; 0x6c
 800985a:	18fb      	adds	r3, r7, r3
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	496d      	ldr	r1, [pc, #436]	; (8009a14 <interrupt_CH395+0x3b8>)
 8009860:	2473      	movs	r4, #115	; 0x73
 8009862:	193a      	adds	r2, r7, r4
 8009864:	7810      	ldrb	r0, [r2, #0]
 8009866:	000a      	movs	r2, r1
 8009868:	0019      	movs	r1, r3
 800986a:	f7fb fee5 	bl	8005638 <CH395GetRecvData>
						(uint8_t*) ch395.buffer
							);
				ch395.buffer[len] = 0; // terminate the recved text stream
 800986e:	236c      	movs	r3, #108	; 0x6c
 8009870:	18fb      	adds	r3, r7, r3
 8009872:	881b      	ldrh	r3, [r3, #0]
 8009874:	4a64      	ldr	r2, [pc, #400]	; (8009a08 <interrupt_CH395+0x3ac>)
 8009876:	18d3      	adds	r3, r2, r3
 8009878:	2200      	movs	r2, #0
 800987a:	771a      	strb	r2, [r3, #28]
				/* Distinguish between different protocols
				 * Either HTTP,
				 * or TCP (for UART over IP gateway )
				 */
 				switch (ch395.cfg.protocols[i])
 800987c:	193b      	adds	r3, r7, r4
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	4a61      	ldr	r2, [pc, #388]	; (8009a08 <interrupt_CH395+0x3ac>)
 8009882:	18d3      	adds	r3, r2, r3
 8009884:	7c1b      	ldrb	r3, [r3, #16]
 8009886:	2b03      	cmp	r3, #3
 8009888:	d008      	beq.n	800989c <interrupt_CH395+0x240>
 800988a:	dd00      	ble.n	800988e <interrupt_CH395+0x232>
 800988c:	e2c1      	b.n	8009e12 <interrupt_CH395+0x7b6>
 800988e:	2b01      	cmp	r3, #1
 8009890:	d100      	bne.n	8009894 <interrupt_CH395+0x238>
 8009892:	e1f1      	b.n	8009c78 <interrupt_CH395+0x61c>
 8009894:	2b02      	cmp	r3, #2
 8009896:	d100      	bne.n	800989a <interrupt_CH395+0x23e>
 8009898:	e181      	b.n	8009b9e <interrupt_CH395+0x542>
						}
					}
					break;
				default:
					// protocol not assigned to the socket
					break;
 800989a:	e2ba      	b.n	8009e12 <interrupt_CH395+0x7b6>
					if(pS->connection == CLOSED)
 800989c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <interrupt_CH395+0x252>
						resetHTTPParseState(pS);
 80098a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098a6:	0018      	movs	r0, r3
 80098a8:	f7fc fdd2 	bl	8006450 <resetHTTPParseState>
 80098ac:	e003      	b.n	80098b6 <interrupt_CH395+0x25a>
						resetHTTPParseState_for_long_connection(pS);
 80098ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098b0:	0018      	movs	r0, r3
 80098b2:	f7fc fdfd 	bl	80064b0 <resetHTTPParseState_for_long_connection>
					pS->sock_index = i;
 80098b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098b8:	2273      	movs	r2, #115	; 0x73
 80098ba:	18ba      	adds	r2, r7, r2
 80098bc:	218d      	movs	r1, #141	; 0x8d
 80098be:	7812      	ldrb	r2, [r2, #0]
 80098c0:	545a      	strb	r2, [r3, r1]
					uint8_t sReqType = REQUEST_TYPE_HTTP;
 80098c2:	246b      	movs	r4, #107	; 0x6b
 80098c4:	193b      	adds	r3, r7, r4
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
					if(strnstr(ch395.buffer, "HTTP", len))
 80098ca:	236c      	movs	r3, #108	; 0x6c
 80098cc:	18fb      	adds	r3, r7, r3
 80098ce:	881a      	ldrh	r2, [r3, #0]
 80098d0:	4951      	ldr	r1, [pc, #324]	; (8009a18 <interrupt_CH395+0x3bc>)
 80098d2:	4b50      	ldr	r3, [pc, #320]	; (8009a14 <interrupt_CH395+0x3b8>)
 80098d4:	0018      	movs	r0, r3
 80098d6:	f001 faf3 	bl	800aec0 <strnstr>
 80098da:	1e03      	subs	r3, r0, #0
 80098dc:	d003      	beq.n	80098e6 <interrupt_CH395+0x28a>
						sReqType = REQUEST_TYPE_HTTP;
 80098de:	193b      	adds	r3, r7, r4
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e008      	b.n	80098f8 <interrupt_CH395+0x29c>
					else if(len > 0)
 80098e6:	236c      	movs	r3, #108	; 0x6c
 80098e8:	18fb      	adds	r3, r7, r3
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <interrupt_CH395+0x29c>
						sReqType = REQUEST_TYPE_WS_MSG;
 80098f0:	236b      	movs	r3, #107	; 0x6b
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	2201      	movs	r2, #1
 80098f6:	701a      	strb	r2, [r3, #0]
					if(((pS->connection == UPGRADED_WS) && (pS->ws_handshaked == WS_HANDSHAKED)) || (sReqType == REQUEST_TYPE_WS_MSG))
 80098f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098fa:	791b      	ldrb	r3, [r3, #4]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d104      	bne.n	800990a <interrupt_CH395+0x2ae>
 8009900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009902:	228e      	movs	r2, #142	; 0x8e
 8009904:	5c9b      	ldrb	r3, [r3, r2]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d005      	beq.n	8009916 <interrupt_CH395+0x2ba>
 800990a:	236b      	movs	r3, #107	; 0x6b
 800990c:	18fb      	adds	r3, r7, r3
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d000      	beq.n	8009916 <interrupt_CH395+0x2ba>
 8009914:	e11c      	b.n	8009b50 <interrupt_CH395+0x4f4>
						if((pS->connection != UPGRADED_WS) || (pS->ws_handshaked != WS_HANDSHAKED))
 8009916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009918:	791b      	ldrb	r3, [r3, #4]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d104      	bne.n	8009928 <interrupt_CH395+0x2cc>
 800991e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009920:	228e      	movs	r2, #142	; 0x8e
 8009922:	5c9b      	ldrb	r3, [r3, r2]
 8009924:	2b01      	cmp	r3, #1
 8009926:	d006      	beq.n	8009936 <interrupt_CH395+0x2da>
							pS->connection = UPGRADED_WS;
 8009928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800992a:	2202      	movs	r2, #2
 800992c:	711a      	strb	r2, [r3, #4]
							pS->ws_handshaked = WS_HANDSHAKED;
 800992e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009930:	228e      	movs	r2, #142	; 0x8e
 8009932:	2101      	movs	r1, #1
 8009934:	5499      	strb	r1, [r3, r2]
						if(ws_parse_frame(ch395.buffer, (size_t)len, &pS->ws) > 0)
 8009936:	236c      	movs	r3, #108	; 0x6c
 8009938:	18fb      	adds	r3, r7, r3
 800993a:	8819      	ldrh	r1, [r3, #0]
 800993c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800993e:	3390      	adds	r3, #144	; 0x90
 8009940:	001a      	movs	r2, r3
 8009942:	4b34      	ldr	r3, [pc, #208]	; (8009a14 <interrupt_CH395+0x3b8>)
 8009944:	0018      	movs	r0, r3
 8009946:	f000 feeb 	bl	800a720 <ws_parse_frame>
 800994a:	1e03      	subs	r3, r0, #0
 800994c:	dc00      	bgt.n	8009950 <interrupt_CH395+0x2f4>
 800994e:	e124      	b.n	8009b9a <interrupt_CH395+0x53e>
							pS->ready_for_making_response = true;
 8009950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009952:	228c      	movs	r2, #140	; 0x8c
 8009954:	2101      	movs	r1, #1
 8009956:	5499      	strb	r1, [r3, r2]
							switch(pS->ws.opcode)
 8009958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800995a:	2291      	movs	r2, #145	; 0x91
 800995c:	5c9b      	ldrb	r3, [r3, r2]
 800995e:	2b09      	cmp	r3, #9
 8009960:	d100      	bne.n	8009964 <interrupt_CH395+0x308>
 8009962:	e0a7      	b.n	8009ab4 <interrupt_CH395+0x458>
 8009964:	dd00      	ble.n	8009968 <interrupt_CH395+0x30c>
 8009966:	e0d3      	b.n	8009b10 <interrupt_CH395+0x4b4>
 8009968:	2b01      	cmp	r3, #1
 800996a:	d003      	beq.n	8009974 <interrupt_CH395+0x318>
 800996c:	2b08      	cmp	r3, #8
 800996e:	d100      	bne.n	8009972 <interrupt_CH395+0x316>
 8009970:	e0b4      	b.n	8009adc <interrupt_CH395+0x480>
 8009972:	e0cd      	b.n	8009b10 <interrupt_CH395+0x4b4>
								if(pS->ws.payload_len < MAX_LEN_RESPONSE_HEADER - 1)
 8009974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009976:	2298      	movs	r2, #152	; 0x98
 8009978:	589a      	ldr	r2, [r3, r2]
 800997a:	23ff      	movs	r3, #255	; 0xff
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	429a      	cmp	r2, r3
 8009980:	d900      	bls.n	8009984 <interrupt_CH395+0x328>
 8009982:	e0c4      	b.n	8009b0e <interrupt_CH395+0x4b2>
									memcpy(pS->response_header, pS->ws.payload, pS->ws.payload_len);
 8009984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009986:	2280      	movs	r2, #128	; 0x80
 8009988:	5898      	ldr	r0, [r3, r2]
 800998a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800998c:	2294      	movs	r2, #148	; 0x94
 800998e:	5899      	ldr	r1, [r3, r2]
 8009990:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009992:	2298      	movs	r2, #152	; 0x98
 8009994:	589b      	ldr	r3, [r3, r2]
 8009996:	001a      	movs	r2, r3
 8009998:	f001 f9f2 	bl	800ad80 <memcpy>
									pS->response_header[pS->ws.payload_len] = 0; // terminate the payload
 800999c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999e:	2280      	movs	r2, #128	; 0x80
 80099a0:	589a      	ldr	r2, [r3, r2]
 80099a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099a4:	2198      	movs	r1, #152	; 0x98
 80099a6:	585b      	ldr	r3, [r3, r1]
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	2200      	movs	r2, #0
 80099ac:	701a      	strb	r2, [r3, #0]
									ws_unmask_payload(pS->response_header, (size_t)(pS->ws.payload_len), pS->ws.masking_key);
 80099ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b0:	2280      	movs	r2, #128	; 0x80
 80099b2:	5898      	ldr	r0, [r3, r2]
 80099b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b6:	2298      	movs	r2, #152	; 0x98
 80099b8:	5899      	ldr	r1, [r3, r2]
 80099ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099bc:	339c      	adds	r3, #156	; 0x9c
 80099be:	001a      	movs	r2, r3
 80099c0:	f000 ff04 	bl	800a7cc <ws_unmask_payload>
									if(strnstr(pS->response_header, "ping",  pS->ws.payload_len))
 80099c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099c6:	2280      	movs	r2, #128	; 0x80
 80099c8:	5898      	ldr	r0, [r3, r2]
 80099ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099cc:	2298      	movs	r2, #152	; 0x98
 80099ce:	589a      	ldr	r2, [r3, r2]
 80099d0:	4b12      	ldr	r3, [pc, #72]	; (8009a1c <interrupt_CH395+0x3c0>)
 80099d2:	0019      	movs	r1, r3
 80099d4:	f001 fa74 	bl	800aec0 <strnstr>
 80099d8:	1e03      	subs	r3, r0, #0
 80099da:	d023      	beq.n	8009a24 <interrupt_CH395+0x3c8>
										WSSendStr(pS, NULL, "pong");
 80099dc:	4a10      	ldr	r2, [pc, #64]	; (8009a20 <interrupt_CH395+0x3c4>)
 80099de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099e0:	2100      	movs	r1, #0
 80099e2:	0018      	movs	r0, r3
 80099e4:	f7fd f988 	bl	8006cf8 <WSSendStr>
								break;
 80099e8:	e091      	b.n	8009b0e <interrupt_CH395+0x4b2>
 80099ea:	46c0      	nop			; (mov r8, r8)
 80099ec:	200008c0 	.word	0x200008c0
 80099f0:	200010cd 	.word	0x200010cd
 80099f4:	200010ac 	.word	0x200010ac
 80099f8:	200010c0 	.word	0x200010c0
 80099fc:	20000698 	.word	0x20000698
 8009a00:	200010cc 	.word	0x200010cc
 8009a04:	200010ca 	.word	0x200010ca
 8009a08:	20000010 	.word	0x20000010
 8009a0c:	000005fe 	.word	0x000005fe
 8009a10:	000005ff 	.word	0x000005ff
 8009a14:	2000002c 	.word	0x2000002c
 8009a18:	0800b358 	.word	0x0800b358
 8009a1c:	0800b360 	.word	0x0800b360
 8009a20:	0800b368 	.word	0x0800b368
										line_tok_saveptr = pS->response_header;
 8009a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a26:	2280      	movs	r2, #128	; 0x80
 8009a28:	589b      	ldr	r3, [r3, r2]
 8009a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
										line = strsepstr(&line_tok_saveptr, "\r\n");
 8009a2c:	4a8b      	ldr	r2, [pc, #556]	; (8009c5c <interrupt_CH395+0x600>)
 8009a2e:	234c      	movs	r3, #76	; 0x4c
 8009a30:	18fb      	adds	r3, r7, r3
 8009a32:	0011      	movs	r1, r2
 8009a34:	0018      	movs	r0, r3
 8009a36:	f7fd fe63 	bl	8007700 <strsepstr>
 8009a3a:	0003      	movs	r3, r0
 8009a3c:	65bb      	str	r3, [r7, #88]	; 0x58
										if(line)
 8009a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d064      	beq.n	8009b0e <interrupt_CH395+0x4b2>
											tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 8009a44:	2348      	movs	r3, #72	; 0x48
 8009a46:	18fa      	adds	r2, r7, r3
 8009a48:	4985      	ldr	r1, [pc, #532]	; (8009c60 <interrupt_CH395+0x604>)
 8009a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a4c:	0018      	movs	r0, r3
 8009a4e:	f001 fa9c 	bl	800af8a <strtok_r>
 8009a52:	0003      	movs	r3, r0
 8009a54:	677b      	str	r3, [r7, #116]	; 0x74
											while(tok_arg)
 8009a56:	e029      	b.n	8009aac <interrupt_CH395+0x450>
												DEBUG_LOG("Arg: %s\r\n", tok_arg);
 8009a58:	46c0      	nop			; (mov r8, r8)
												if(strncmp(tok_arg, "URI", 3) == 0)
 8009a5a:	4982      	ldr	r1, [pc, #520]	; (8009c64 <interrupt_CH395+0x608>)
 8009a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a5e:	2203      	movs	r2, #3
 8009a60:	0018      	movs	r0, r3
 8009a62:	f001 f9fd 	bl	800ae60 <strncmp>
 8009a66:	1e03      	subs	r3, r0, #0
 8009a68:	d108      	bne.n	8009a7c <interrupt_CH395+0x420>
													strncpy(pS->URI, tok_arg + 4, MAX_LEN_URI); // copy content after =
 8009a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a6c:	1d58      	adds	r0, r3, #5
 8009a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a70:	3304      	adds	r3, #4
 8009a72:	2240      	movs	r2, #64	; 0x40
 8009a74:	0019      	movs	r1, r3
 8009a76:	f001 fa04 	bl	800ae82 <strncpy>
 8009a7a:	e00e      	b.n	8009a9a <interrupt_CH395+0x43e>
													pS->argv[pS->argc++] = tok_arg; // tok_arg: "arg=xxx\0"
 8009a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a7e:	2248      	movs	r2, #72	; 0x48
 8009a80:	5c9b      	ldrb	r3, [r3, r2]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	b2d0      	uxtb	r0, r2
 8009a86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a88:	2148      	movs	r1, #72	; 0x48
 8009a8a:	5450      	strb	r0, [r2, r1]
 8009a8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a8e:	3312      	adds	r3, #18
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	18d3      	adds	r3, r2, r3
 8009a94:	3304      	adds	r3, #4
 8009a96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009a98:	601a      	str	r2, [r3, #0]
												tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8009a9a:	2348      	movs	r3, #72	; 0x48
 8009a9c:	18fa      	adds	r2, r7, r3
 8009a9e:	4b70      	ldr	r3, [pc, #448]	; (8009c60 <interrupt_CH395+0x604>)
 8009aa0:	0019      	movs	r1, r3
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	f001 fa71 	bl	800af8a <strtok_r>
 8009aa8:	0003      	movs	r3, r0
 8009aaa:	677b      	str	r3, [r7, #116]	; 0x74
											while(tok_arg)
 8009aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1d2      	bne.n	8009a58 <interrupt_CH395+0x3fc>
								break;
 8009ab2:	e02c      	b.n	8009b0e <interrupt_CH395+0x4b2>
								pS->len_response_header = ws_make_pong_frame((uint8_t*)pS->response_header);
 8009ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ab6:	2280      	movs	r2, #128	; 0x80
 8009ab8:	589b      	ldr	r3, [r3, r2]
 8009aba:	0018      	movs	r0, r3
 8009abc:	f000 feb4 	bl	800a828 <ws_make_pong_frame>
 8009ac0:	0003      	movs	r3, r0
 8009ac2:	b299      	uxth	r1, r3
 8009ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ac6:	227e      	movs	r2, #126	; 0x7e
 8009ac8:	5299      	strh	r1, [r3, r2]
								pS->len_response_content_remain = 0;
 8009aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009acc:	2284      	movs	r2, #132	; 0x84
 8009ace:	2100      	movs	r1, #0
 8009ad0:	5299      	strh	r1, [r3, r2]
								pS->response_stage = RESPONSE_PREPARED;
 8009ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ad4:	227c      	movs	r2, #124	; 0x7c
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	5499      	strb	r1, [r3, r2]
								break;
 8009ada:	e019      	b.n	8009b10 <interrupt_CH395+0x4b4>
								pS->len_response_header =  ws_make_close_frame((uint8_t*)pS->response_header, WS_CLOSE_REASON_BY_PEER);
 8009adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ade:	2280      	movs	r2, #128	; 0x80
 8009ae0:	589b      	ldr	r3, [r3, r2]
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 feaf 	bl	800a848 <ws_make_close_frame>
 8009aea:	0003      	movs	r3, r0
 8009aec:	b299      	uxth	r1, r3
 8009aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009af0:	227e      	movs	r2, #126	; 0x7e
 8009af2:	5299      	strh	r1, [r3, r2]
								pS->len_response_content_remain = 0;
 8009af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009af6:	2284      	movs	r2, #132	; 0x84
 8009af8:	2100      	movs	r1, #0
 8009afa:	5299      	strh	r1, [r3, r2]
								pS->response_stage = RESPONSE_PREPARED;
 8009afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009afe:	227c      	movs	r2, #124	; 0x7c
 8009b00:	2101      	movs	r1, #1
 8009b02:	5499      	strb	r1, [r3, r2]
								pS->ws_handshaked = WS_TO_CLOSE; // mark close here, will be closed in main loop after responded
 8009b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b06:	228e      	movs	r2, #142	; 0x8e
 8009b08:	2102      	movs	r1, #2
 8009b0a:	5499      	strb	r1, [r3, r2]
								break;
 8009b0c:	e000      	b.n	8009b10 <interrupt_CH395+0x4b4>
								break;
 8009b0e:	46c0      	nop			; (mov r8, r8)
							if(pS->ready_for_making_response)
 8009b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b12:	228c      	movs	r2, #140	; 0x8c
 8009b14:	5c9b      	ldrb	r3, [r3, r2]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d03f      	beq.n	8009b9a <interrupt_CH395+0x53e>
								ch395.RX_received |= (1 << i);
 8009b1a:	4b53      	ldr	r3, [pc, #332]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b1c:	7e5b      	ldrb	r3, [r3, #25]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	b25a      	sxtb	r2, r3
 8009b22:	2073      	movs	r0, #115	; 0x73
 8009b24:	183b      	adds	r3, r7, r0
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2101      	movs	r1, #1
 8009b2a:	4099      	lsls	r1, r3
 8009b2c:	000b      	movs	r3, r1
 8009b2e:	b25b      	sxtb	r3, r3
 8009b30:	4313      	orrs	r3, r2
 8009b32:	b25b      	sxtb	r3, r3
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	4b4c      	ldr	r3, [pc, #304]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b38:	765a      	strb	r2, [r3, #25]
								if (ch395.SOCK_responding < 0)
 8009b3a:	4b4b      	ldr	r3, [pc, #300]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b3c:	7e9b      	ldrb	r3, [r3, #26]
 8009b3e:	b25b      	sxtb	r3, r3
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	da2a      	bge.n	8009b9a <interrupt_CH395+0x53e>
									ch395.SOCK_responding = i;
 8009b44:	183b      	adds	r3, r7, r0
 8009b46:	2200      	movs	r2, #0
 8009b48:	569a      	ldrsb	r2, [r3, r2]
 8009b4a:	4b47      	ldr	r3, [pc, #284]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b4c:	769a      	strb	r2, [r3, #26]
						if(ws_parse_frame(ch395.buffer, (size_t)len, &pS->ws) > 0)
 8009b4e:	e024      	b.n	8009b9a <interrupt_CH395+0x53e>
						if (parse_http(pS, ch395.buffer))
 8009b50:	4a46      	ldr	r2, [pc, #280]	; (8009c6c <interrupt_CH395+0x610>)
 8009b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b54:	0011      	movs	r1, r2
 8009b56:	0018      	movs	r0, r3
 8009b58:	f7fd fe02 	bl	8007760 <parse_http>
 8009b5c:	1e03      	subs	r3, r0, #0
 8009b5e:	d100      	bne.n	8009b62 <interrupt_CH395+0x506>
 8009b60:	e159      	b.n	8009e16 <interrupt_CH395+0x7ba>
							ch395.RX_received |= (1 << i); // mark received flag
 8009b62:	4b41      	ldr	r3, [pc, #260]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b64:	7e5b      	ldrb	r3, [r3, #25]
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	b25a      	sxtb	r2, r3
 8009b6a:	2073      	movs	r0, #115	; 0x73
 8009b6c:	183b      	adds	r3, r7, r0
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2101      	movs	r1, #1
 8009b72:	4099      	lsls	r1, r3
 8009b74:	000b      	movs	r3, r1
 8009b76:	b25b      	sxtb	r3, r3
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	b25b      	sxtb	r3, r3
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	4b3a      	ldr	r3, [pc, #232]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b80:	765a      	strb	r2, [r3, #25]
							if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8009b82:	4b39      	ldr	r3, [pc, #228]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b84:	7e9b      	ldrb	r3, [r3, #26]
 8009b86:	b25b      	sxtb	r3, r3
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	db00      	blt.n	8009b8e <interrupt_CH395+0x532>
 8009b8c:	e143      	b.n	8009e16 <interrupt_CH395+0x7ba>
								ch395.SOCK_responding = i;
 8009b8e:	183b      	adds	r3, r7, r0
 8009b90:	2200      	movs	r2, #0
 8009b92:	569a      	ldrsb	r2, [r3, r2]
 8009b94:	4b34      	ldr	r3, [pc, #208]	; (8009c68 <interrupt_CH395+0x60c>)
 8009b96:	769a      	strb	r2, [r3, #26]
					break;
 8009b98:	e13d      	b.n	8009e16 <interrupt_CH395+0x7ba>
						if(ws_parse_frame(ch395.buffer, (size_t)len, &pS->ws) > 0)
 8009b9a:	46c0      	nop			; (mov r8, r8)
					break;
 8009b9c:	e13b      	b.n	8009e16 <interrupt_CH395+0x7ba>
					if(pS->connection == CLOSED)
 8009b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba0:	791b      	ldrb	r3, [r3, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d104      	bne.n	8009bb0 <interrupt_CH395+0x554>
						resetHTTPParseState(pS);
 8009ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f7fc fc51 	bl	8006450 <resetHTTPParseState>
 8009bae:	e003      	b.n	8009bb8 <interrupt_CH395+0x55c>
						resetHTTPParseState_for_long_connection(pS);
 8009bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bb2:	0018      	movs	r0, r3
 8009bb4:	f7fc fc7c 	bl	80064b0 <resetHTTPParseState_for_long_connection>
					pS->sock_index = i;
 8009bb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bba:	2473      	movs	r4, #115	; 0x73
 8009bbc:	193a      	adds	r2, r7, r4
 8009bbe:	218d      	movs	r1, #141	; 0x8d
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	545a      	strb	r2, [r3, r1]
					if (execute_command_string(&CommandParser, ch395.buffer,len) >= 0)
 8009bc4:	236c      	movs	r3, #108	; 0x6c
 8009bc6:	18fb      	adds	r3, r7, r3
 8009bc8:	881a      	ldrh	r2, [r3, #0]
 8009bca:	4928      	ldr	r1, [pc, #160]	; (8009c6c <interrupt_CH395+0x610>)
 8009bcc:	4b28      	ldr	r3, [pc, #160]	; (8009c70 <interrupt_CH395+0x614>)
 8009bce:	0018      	movs	r0, r3
 8009bd0:	f7fe ff3b 	bl	8008a4a <execute_command_string>
 8009bd4:	1e03      	subs	r3, r0, #0
 8009bd6:	da00      	bge.n	8009bda <interrupt_CH395+0x57e>
 8009bd8:	e11f      	b.n	8009e1a <interrupt_CH395+0x7be>
						if (CommandParser.hasResponse > 0)
 8009bda:	4b25      	ldr	r3, [pc, #148]	; (8009c70 <interrupt_CH395+0x614>)
 8009bdc:	885b      	ldrh	r3, [r3, #2]
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d100      	bne.n	8009be6 <interrupt_CH395+0x58a>
 8009be4:	e119      	b.n	8009e1a <interrupt_CH395+0x7be>
							pS->ready_for_making_response = true;
 8009be6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009be8:	228c      	movs	r2, #140	; 0x8c
 8009bea:	2101      	movs	r1, #1
 8009bec:	5499      	strb	r1, [r3, r2]
							strncpy(pS->response_header, CommandParser.bufRet,
 8009bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bf0:	2280      	movs	r2, #128	; 0x80
 8009bf2:	5898      	ldr	r0, [r3, r2]
									CommandParser.hasResponse);
 8009bf4:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <interrupt_CH395+0x614>)
 8009bf6:	885b      	ldrh	r3, [r3, #2]
 8009bf8:	b29b      	uxth	r3, r3
							strncpy(pS->response_header, CommandParser.bufRet,
 8009bfa:	001a      	movs	r2, r3
 8009bfc:	4b1d      	ldr	r3, [pc, #116]	; (8009c74 <interrupt_CH395+0x618>)
 8009bfe:	0019      	movs	r1, r3
 8009c00:	f001 f93f 	bl	800ae82 <strncpy>
							pS->len_response_header = CommandParser.hasResponse;
 8009c04:	4b1a      	ldr	r3, [pc, #104]	; (8009c70 <interrupt_CH395+0x614>)
 8009c06:	885b      	ldrh	r3, [r3, #2]
 8009c08:	b299      	uxth	r1, r3
 8009c0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c0c:	227e      	movs	r2, #126	; 0x7e
 8009c0e:	5299      	strh	r1, [r3, r2]
							pS->len_response_content_remain = 0;
 8009c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c12:	2284      	movs	r2, #132	; 0x84
 8009c14:	2100      	movs	r1, #0
 8009c16:	5299      	strh	r1, [r3, r2]
							pS->response_stage = RESPONSE_PREPARED;
 8009c18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c1a:	227c      	movs	r2, #124	; 0x7c
 8009c1c:	2101      	movs	r1, #1
 8009c1e:	5499      	strb	r1, [r3, r2]
							ch395.RX_received |= (1 << i);
 8009c20:	4b11      	ldr	r3, [pc, #68]	; (8009c68 <interrupt_CH395+0x60c>)
 8009c22:	7e5b      	ldrb	r3, [r3, #25]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	b25a      	sxtb	r2, r3
 8009c28:	193b      	adds	r3, r7, r4
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	4099      	lsls	r1, r3
 8009c30:	000b      	movs	r3, r1
 8009c32:	b25b      	sxtb	r3, r3
 8009c34:	4313      	orrs	r3, r2
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	b2da      	uxtb	r2, r3
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <interrupt_CH395+0x60c>)
 8009c3c:	765a      	strb	r2, [r3, #25]
							if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8009c3e:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <interrupt_CH395+0x60c>)
 8009c40:	7e9b      	ldrb	r3, [r3, #26]
 8009c42:	b25b      	sxtb	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da04      	bge.n	8009c52 <interrupt_CH395+0x5f6>
								ch395.SOCK_responding = i;
 8009c48:	193b      	adds	r3, r7, r4
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	569a      	ldrsb	r2, [r3, r2]
 8009c4e:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <interrupt_CH395+0x60c>)
 8009c50:	769a      	strb	r2, [r3, #26]
							CommandParser.hasResponse = 0;
 8009c52:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <interrupt_CH395+0x614>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	805a      	strh	r2, [r3, #2]
					break;
 8009c58:	e0df      	b.n	8009e1a <interrupt_CH395+0x7be>
 8009c5a:	46c0      	nop			; (mov r8, r8)
 8009c5c:	0800b370 	.word	0x0800b370
 8009c60:	0800b374 	.word	0x0800b374
 8009c64:	0800b378 	.word	0x0800b378
 8009c68:	20000010 	.word	0x20000010
 8009c6c:	2000002c 	.word	0x2000002c
 8009c70:	20001954 	.word	0x20001954
 8009c74:	20001958 	.word	0x20001958
					resetHTTPParseState(pS);
 8009c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c7a:	0018      	movs	r0, r3
 8009c7c:	f7fc fbe8 	bl	8006450 <resetHTTPParseState>
					pS->sock_index = i;
 8009c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c82:	2473      	movs	r4, #115	; 0x73
 8009c84:	193a      	adds	r2, r7, r4
 8009c86:	218d      	movs	r1, #141	; 0x8d
 8009c88:	7812      	ldrb	r2, [r2, #0]
 8009c8a:	545a      	strb	r2, [r3, r1]
					if(len > 8)
 8009c8c:	236c      	movs	r3, #108	; 0x6c
 8009c8e:	18fb      	adds	r3, r7, r3
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	2b08      	cmp	r3, #8
 8009c94:	d800      	bhi.n	8009c98 <interrupt_CH395+0x63c>
 8009c96:	e0c2      	b.n	8009e1e <interrupt_CH395+0x7c2>
						uint16_t len_UDP_data = 0;
 8009c98:	2556      	movs	r5, #86	; 0x56
 8009c9a:	197b      	adds	r3, r7, r5
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	801a      	strh	r2, [r3, #0]
						len_UDP_data = (uint16_t)(ch395.buffer[1] << 8) | (uint16_t)ch395.buffer[0]; // little-endian
 8009ca0:	4baa      	ldr	r3, [pc, #680]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ca2:	7f5b      	ldrb	r3, [r3, #29]
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	b299      	uxth	r1, r3
 8009caa:	4ba8      	ldr	r3, [pc, #672]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009cac:	7f1b      	ldrb	r3, [r3, #28]
 8009cae:	b29a      	uxth	r2, r3
 8009cb0:	197b      	adds	r3, r7, r5
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	801a      	strh	r2, [r3, #0]
						port_dest_UDP = (uint16_t)(ch395.buffer[3] << 8) | (uint16_t)ch395.buffer[2];
 8009cb6:	4ba5      	ldr	r3, [pc, #660]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009cb8:	7fdb      	ldrb	r3, [r3, #31]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	021b      	lsls	r3, r3, #8
 8009cbe:	b299      	uxth	r1, r3
 8009cc0:	4ba2      	ldr	r3, [pc, #648]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009cc2:	7f9b      	ldrb	r3, [r3, #30]
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	2354      	movs	r3, #84	; 0x54
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	430a      	orrs	r2, r1
 8009ccc:	801a      	strh	r2, [r3, #0]
						memcpy(IP_dst_UDP, ch395.buffer+4, 4);
 8009cce:	4ba0      	ldr	r3, [pc, #640]	; (8009f50 <interrupt_CH395+0x8f4>)
 8009cd0:	2228      	movs	r2, #40	; 0x28
 8009cd2:	18ba      	adds	r2, r7, r2
 8009cd4:	0010      	movs	r0, r2
 8009cd6:	0019      	movs	r1, r3
 8009cd8:	2304      	movs	r3, #4
 8009cda:	001a      	movs	r2, r3
 8009cdc:	f001 f850 	bl	800ad80 <memcpy>
						if((len_UDP_data - 8 >= LEN_USR_DETECTION_MSG) &&
 8009ce0:	197b      	adds	r3, r7, r5
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	3b08      	subs	r3, #8
 8009ce6:	2b27      	cmp	r3, #39	; 0x27
 8009ce8:	d800      	bhi.n	8009cec <interrupt_CH395+0x690>
 8009cea:	e098      	b.n	8009e1e <interrupt_CH395+0x7c2>
								strncmp(ch395.buffer + 8, USR_DETECTION_MSG, LEN_USR_DETECTION_MSG) == 0)
 8009cec:	4b99      	ldr	r3, [pc, #612]	; (8009f54 <interrupt_CH395+0x8f8>)
 8009cee:	499a      	ldr	r1, [pc, #616]	; (8009f58 <interrupt_CH395+0x8fc>)
 8009cf0:	2228      	movs	r2, #40	; 0x28
 8009cf2:	0018      	movs	r0, r3
 8009cf4:	f001 f8b4 	bl	800ae60 <strncmp>
 8009cf8:	1e03      	subs	r3, r0, #0
						if((len_UDP_data - 8 >= LEN_USR_DETECTION_MSG) &&
 8009cfa:	d000      	beq.n	8009cfe <interrupt_CH395+0x6a2>
 8009cfc:	e08f      	b.n	8009e1e <interrupt_CH395+0x7c2>
							pS->ready_for_making_response = true;
 8009cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d00:	228c      	movs	r2, #140	; 0x8c
 8009d02:	2101      	movs	r1, #1
 8009d04:	5499      	strb	r1, [r3, r2]
							USR_response_t USR = {
 8009d06:	003b      	movs	r3, r7
 8009d08:	4a94      	ldr	r2, [pc, #592]	; (8009f5c <interrupt_CH395+0x900>)
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	003b      	movs	r3, r7
 8009d0e:	4a94      	ldr	r2, [pc, #592]	; (8009f60 <interrupt_CH395+0x904>)
 8009d10:	605a      	str	r2, [r3, #4]
 8009d12:	003b      	movs	r3, r7
 8009d14:	4a93      	ldr	r2, [pc, #588]	; (8009f64 <interrupt_CH395+0x908>)
 8009d16:	609a      	str	r2, [r3, #8]
									.port_target = cfg.portTCP,
 8009d18:	4b93      	ldr	r3, [pc, #588]	; (8009f68 <interrupt_CH395+0x90c>)
 8009d1a:	226c      	movs	r2, #108	; 0x6c
 8009d1c:	5a9a      	ldrh	r2, [r3, r2]
							USR_response_t USR = {
 8009d1e:	003b      	movs	r3, r7
 8009d20:	819a      	strh	r2, [r3, #12]
 8009d22:	003b      	movs	r3, r7
 8009d24:	4a91      	ldr	r2, [pc, #580]	; (8009f6c <interrupt_CH395+0x910>)
 8009d26:	611a      	str	r2, [r3, #16]
									.port_self = cfg.portTCP,
 8009d28:	4b8f      	ldr	r3, [pc, #572]	; (8009f68 <interrupt_CH395+0x90c>)
 8009d2a:	226c      	movs	r2, #108	; 0x6c
 8009d2c:	5a9a      	ldrh	r2, [r3, r2]
							USR_response_t USR = {
 8009d2e:	003b      	movs	r3, r7
 8009d30:	829a      	strh	r2, [r3, #20]
 8009d32:	003b      	movs	r3, r7
 8009d34:	4a8b      	ldr	r2, [pc, #556]	; (8009f64 <interrupt_CH395+0x908>)
 8009d36:	619a      	str	r2, [r3, #24]
 8009d38:	003b      	movs	r3, r7
 8009d3a:	2203      	movs	r2, #3
 8009d3c:	771a      	strb	r2, [r3, #28]
 8009d3e:	003b      	movs	r3, r7
 8009d40:	22e1      	movs	r2, #225	; 0xe1
 8009d42:	0252      	lsls	r2, r2, #9
 8009d44:	621a      	str	r2, [r3, #32]
 8009d46:	003b      	movs	r3, r7
 8009d48:	2224      	movs	r2, #36	; 0x24
 8009d4a:	2103      	movs	r1, #3
 8009d4c:	5499      	strb	r1, [r3, r2]
							len_UDP_data = (uint16_t)prepare_USR_response_msg(&USR, pS->response_header);
 8009d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d50:	2280      	movs	r2, #128	; 0x80
 8009d52:	589a      	ldr	r2, [r3, r2]
 8009d54:	003b      	movs	r3, r7
 8009d56:	0011      	movs	r1, r2
 8009d58:	0018      	movs	r0, r3
 8009d5a:	f7fa fe54 	bl	8004a06 <prepare_USR_response_msg>
 8009d5e:	0002      	movs	r2, r0
 8009d60:	197b      	adds	r3, r7, r5
 8009d62:	801a      	strh	r2, [r3, #0]
							pS->len_response_header = len_UDP_data;
 8009d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d66:	197a      	adds	r2, r7, r5
 8009d68:	217e      	movs	r1, #126	; 0x7e
 8009d6a:	8812      	ldrh	r2, [r2, #0]
 8009d6c:	525a      	strh	r2, [r3, r1]
							pS->len_response_content_remain = 0;
 8009d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d70:	2284      	movs	r2, #132	; 0x84
 8009d72:	2100      	movs	r1, #0
 8009d74:	5299      	strh	r1, [r3, r2]
							pS->response_stage = RESPONSE_PREPARED;
 8009d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d78:	227c      	movs	r2, #124	; 0x7c
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	5499      	strb	r1, [r3, r2]
							ch395.socket_connected |= (1<<i); // UDP has no connection state, so mark it as always connected
 8009d7e:	4b73      	ldr	r3, [pc, #460]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009d80:	7e1b      	ldrb	r3, [r3, #24]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	b25a      	sxtb	r2, r3
 8009d86:	193b      	adds	r3, r7, r4
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4099      	lsls	r1, r3
 8009d8e:	000b      	movs	r3, r1
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	4313      	orrs	r3, r2
 8009d94:	b25b      	sxtb	r3, r3
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	4b6c      	ldr	r3, [pc, #432]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009d9a:	761a      	strb	r2, [r3, #24]
							ch395.TX_available |= (1 << i);
 8009d9c:	4b6b      	ldr	r3, [pc, #428]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009d9e:	7edb      	ldrb	r3, [r3, #27]
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	b25a      	sxtb	r2, r3
 8009da4:	193b      	adds	r3, r7, r4
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2101      	movs	r1, #1
 8009daa:	4099      	lsls	r1, r3
 8009dac:	000b      	movs	r3, r1
 8009dae:	b25b      	sxtb	r3, r3
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b25b      	sxtb	r3, r3
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	4b65      	ldr	r3, [pc, #404]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009db8:	76da      	strb	r2, [r3, #27]
							ch395.RX_received |= (1 << i);
 8009dba:	4b64      	ldr	r3, [pc, #400]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009dbc:	7e5b      	ldrb	r3, [r3, #25]
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	b25a      	sxtb	r2, r3
 8009dc2:	193b      	adds	r3, r7, r4
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	4099      	lsls	r1, r3
 8009dca:	000b      	movs	r3, r1
 8009dcc:	b25b      	sxtb	r3, r3
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	b25b      	sxtb	r3, r3
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	4b5d      	ldr	r3, [pc, #372]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009dd6:	765a      	strb	r2, [r3, #25]
							if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8009dd8:	4b5c      	ldr	r3, [pc, #368]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009dda:	7e9b      	ldrb	r3, [r3, #26]
 8009ddc:	b25b      	sxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	da04      	bge.n	8009dec <interrupt_CH395+0x790>
								ch395.SOCK_responding = i;
 8009de2:	193b      	adds	r3, r7, r4
 8009de4:	2200      	movs	r2, #0
 8009de6:	569a      	ldrsb	r2, [r3, r2]
 8009de8:	4b58      	ldr	r3, [pc, #352]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009dea:	769a      	strb	r2, [r3, #26]
							CH395SetSocketDesIP(i, IP_dst_UDP);
 8009dec:	2328      	movs	r3, #40	; 0x28
 8009dee:	18fa      	adds	r2, r7, r3
 8009df0:	2473      	movs	r4, #115	; 0x73
 8009df2:	193b      	adds	r3, r7, r4
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	0011      	movs	r1, r2
 8009df8:	0018      	movs	r0, r3
 8009dfa:	f7fb fa49 	bl	8005290 <CH395SetSocketDesIP>
							CH395SetSocketDesPort(i, port_dest_UDP);
 8009dfe:	2354      	movs	r3, #84	; 0x54
 8009e00:	18fb      	adds	r3, r7, r3
 8009e02:	881a      	ldrh	r2, [r3, #0]
 8009e04:	193b      	adds	r3, r7, r4
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	0011      	movs	r1, r2
 8009e0a:	0018      	movs	r0, r3
 8009e0c:	f7fb fa9e 	bl	800534c <CH395SetSocketDesPort>
					break;
 8009e10:	e005      	b.n	8009e1e <interrupt_CH395+0x7c2>
					break;
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	e004      	b.n	8009e20 <interrupt_CH395+0x7c4>
					break;
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	e002      	b.n	8009e20 <interrupt_CH395+0x7c4>
					break;
 8009e1a:	46c0      	nop			; (mov r8, r8)
 8009e1c:	e000      	b.n	8009e20 <interrupt_CH395+0x7c4>
					break;
 8009e1e:	46c0      	nop			; (mov r8, r8)
				}
				CH395ClearRecvBuf(i);
 8009e20:	2373      	movs	r3, #115	; 0x73
 8009e22:	18fb      	adds	r3, r7, r3
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	0018      	movs	r0, r3
 8009e28:	f7fb fbea 	bl	8005600 <CH395ClearRecvBuf>
			}
			// CASE 3: SOCK i connected
			if (sock_int_status & SINT_STAT_CONNECT)
 8009e2c:	2362      	movs	r3, #98	; 0x62
 8009e2e:	18fb      	adds	r3, r7, r3
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	2208      	movs	r2, #8
 8009e34:	4013      	ands	r3, r2
 8009e36:	d01e      	beq.n	8009e76 <interrupt_CH395+0x81a>
			{
				ch395.socket_connected |= (1 << i);
 8009e38:	4b44      	ldr	r3, [pc, #272]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009e3a:	7e1b      	ldrb	r3, [r3, #24]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	b25a      	sxtb	r2, r3
 8009e40:	2073      	movs	r0, #115	; 0x73
 8009e42:	183b      	adds	r3, r7, r0
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2101      	movs	r1, #1
 8009e48:	4099      	lsls	r1, r3
 8009e4a:	000b      	movs	r3, r1
 8009e4c:	b25b      	sxtb	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b25b      	sxtb	r3, r3
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	4b3d      	ldr	r3, [pc, #244]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009e56:	761a      	strb	r2, [r3, #24]
				ch395.TX_available |= (1 << i);
 8009e58:	4b3c      	ldr	r3, [pc, #240]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009e5a:	7edb      	ldrb	r3, [r3, #27]
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	b25a      	sxtb	r2, r3
 8009e60:	183b      	adds	r3, r7, r0
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	2101      	movs	r1, #1
 8009e66:	4099      	lsls	r1, r3
 8009e68:	000b      	movs	r3, r1
 8009e6a:	b25b      	sxtb	r3, r3
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	b25b      	sxtb	r3, r3
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	4b36      	ldr	r3, [pc, #216]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009e74:	76da      	strb	r2, [r3, #27]
			}
			// CASE 4: SOCK i disconnected
			if (sock_int_status & SINT_STAT_DISCONNECT) // SOCK i disconnected
 8009e76:	2362      	movs	r3, #98	; 0x62
 8009e78:	18fb      	adds	r3, r7, r3
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2210      	movs	r2, #16
 8009e7e:	4013      	ands	r3, r2
 8009e80:	d04a      	beq.n	8009f18 <interrupt_CH395+0x8bc>
			{
				ch395.socket_connected &= ~(1 << i);
 8009e82:	4b32      	ldr	r3, [pc, #200]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009e84:	7e1b      	ldrb	r3, [r3, #24]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	b25b      	sxtb	r3, r3
 8009e8a:	2073      	movs	r0, #115	; 0x73
 8009e8c:	183a      	adds	r2, r7, r0
 8009e8e:	7812      	ldrb	r2, [r2, #0]
 8009e90:	2101      	movs	r1, #1
 8009e92:	4091      	lsls	r1, r2
 8009e94:	000a      	movs	r2, r1
 8009e96:	b252      	sxtb	r2, r2
 8009e98:	43d2      	mvns	r2, r2
 8009e9a:	b252      	sxtb	r2, r2
 8009e9c:	4013      	ands	r3, r2
 8009e9e:	b25b      	sxtb	r3, r3
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	4b2a      	ldr	r3, [pc, #168]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ea4:	761a      	strb	r2, [r3, #24]
				ch395.RX_received &= ~(1 << i);
 8009ea6:	4b29      	ldr	r3, [pc, #164]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ea8:	7e5b      	ldrb	r3, [r3, #25]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	b25b      	sxtb	r3, r3
 8009eae:	183a      	adds	r2, r7, r0
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	4091      	lsls	r1, r2
 8009eb6:	000a      	movs	r2, r1
 8009eb8:	b252      	sxtb	r2, r2
 8009eba:	43d2      	mvns	r2, r2
 8009ebc:	b252      	sxtb	r2, r2
 8009ebe:	4013      	ands	r3, r2
 8009ec0:	b25b      	sxtb	r3, r3
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	4b21      	ldr	r3, [pc, #132]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ec6:	765a      	strb	r2, [r3, #25]
				ch395.TX_available |= (1 << i);
 8009ec8:	4b20      	ldr	r3, [pc, #128]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009eca:	7edb      	ldrb	r3, [r3, #27]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	b25a      	sxtb	r2, r3
 8009ed0:	183b      	adds	r3, r7, r0
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	4099      	lsls	r1, r3
 8009ed8:	000b      	movs	r3, r1
 8009eda:	b25b      	sxtb	r3, r3
 8009edc:	4313      	orrs	r3, r2
 8009ede:	b25b      	sxtb	r3, r3
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ee4:	76da      	strb	r2, [r3, #27]
				if (ch395.SOCK_responding == i)
 8009ee6:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ee8:	7e9b      	ldrb	r3, [r3, #26]
 8009eea:	b25b      	sxtb	r3, r3
 8009eec:	001a      	movs	r2, r3
 8009eee:	183b      	adds	r3, r7, r0
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d102      	bne.n	8009efc <interrupt_CH395+0x8a0>
					ch395.SOCK_responding = -1; // release the responding socket flag
 8009ef6:	4b15      	ldr	r3, [pc, #84]	; (8009f4c <interrupt_CH395+0x8f0>)
 8009ef8:	22ff      	movs	r2, #255	; 0xff
 8009efa:	769a      	strb	r2, [r3, #26]
				HTTPRequestParseState *pS = parseStates + i - 1;
 8009efc:	2373      	movs	r3, #115	; 0x73
 8009efe:	18fb      	adds	r3, r7, r3
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	22a4      	movs	r2, #164	; 0xa4
 8009f04:	4353      	muls	r3, r2
 8009f06:	3ba4      	subs	r3, #164	; 0xa4
 8009f08:	001a      	movs	r2, r3
 8009f0a:	4b19      	ldr	r3, [pc, #100]	; (8009f70 <interrupt_CH395+0x914>)
 8009f0c:	18d3      	adds	r3, r2, r3
 8009f0e:	653b      	str	r3, [r7, #80]	; 0x50
				resetHTTPParseState(pS);
 8009f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f12:	0018      	movs	r0, r3
 8009f14:	f7fc fa9c 	bl	8006450 <resetHTTPParseState>
	for (i = 1; (i < NUM_SOCKETS) && (glob_int_status > 0); ++i)
 8009f18:	2273      	movs	r2, #115	; 0x73
 8009f1a:	18bb      	adds	r3, r7, r2
 8009f1c:	18ba      	adds	r2, r7, r2
 8009f1e:	7812      	ldrb	r2, [r2, #0]
 8009f20:	3201      	adds	r2, #1
 8009f22:	701a      	strb	r2, [r3, #0]
 8009f24:	2373      	movs	r3, #115	; 0x73
 8009f26:	18fb      	adds	r3, r7, r3
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b07      	cmp	r3, #7
 8009f2c:	d808      	bhi.n	8009f40 <interrupt_CH395+0x8e4>
 8009f2e:	2370      	movs	r3, #112	; 0x70
 8009f30:	18fb      	adds	r3, r7, r3
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d000      	beq.n	8009f3a <interrupt_CH395+0x8de>
 8009f38:	e438      	b.n	80097ac <interrupt_CH395+0x150>
			}
		}
	}
END_INT_CH395:
 8009f3a:	e001      	b.n	8009f40 <interrupt_CH395+0x8e4>
		goto END_INT_CH395;
 8009f3c:	46c0      	nop			; (mov r8, r8)
 8009f3e:	e000      	b.n	8009f42 <interrupt_CH395+0x8e6>
END_INT_CH395:
 8009f40:	46c0      	nop			; (mov r8, r8)
	return;
 8009f42:	46c0      	nop			; (mov r8, r8)
}
 8009f44:	46bd      	mov	sp, r7
 8009f46:	b01f      	add	sp, #124	; 0x7c
 8009f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f4a:	46c0      	nop			; (mov r8, r8)
 8009f4c:	20000010 	.word	0x20000010
 8009f50:	20000030 	.word	0x20000030
 8009f54:	20000034 	.word	0x20000034
 8009f58:	0800b408 	.word	0x0800b408
 8009f5c:	200010c4 	.word	0x200010c4
 8009f60:	20000698 	.word	0x20000698
 8009f64:	200010c0 	.word	0x200010c0
 8009f68:	2000136c 	.word	0x2000136c
 8009f6c:	200010ac 	.word	0x200010ac
 8009f70:	200008c0 	.word	0x200008c0

08009f74 <check_conflict>:


static bool check_conflict(uint8_t *antnums, uint8_t n)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	000a      	movs	r2, r1
 8009f7e:	1cfb      	adds	r3, r7, #3
 8009f80:	701a      	strb	r2, [r3, #0]
	bool conflict = false;
 8009f82:	2317      	movs	r3, #23
 8009f84:	18fb      	adds	r3, r7, r3
 8009f86:	2200      	movs	r2, #0
 8009f88:	701a      	strb	r2, [r3, #0]
	uint32_t detector = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	613b      	str	r3, [r7, #16]
	for(uint8_t i= 0; i < n; ++i)
 8009f8e:	230f      	movs	r3, #15
 8009f90:	18fb      	adds	r3, r7, r3
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e032      	b.n	8009ffe <check_conflict+0x8a>
	{
		uint8_t sel = antnums[i];
 8009f98:	200f      	movs	r0, #15
 8009f9a:	183b      	adds	r3, r7, r0
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	18d2      	adds	r2, r2, r3
 8009fa2:	210e      	movs	r1, #14
 8009fa4:	187b      	adds	r3, r7, r1
 8009fa6:	7812      	ldrb	r2, [r2, #0]
 8009fa8:	701a      	strb	r2, [r3, #0]
		// replace 0xff by current selected antnum,
		if(sel == 0xff)
 8009faa:	187b      	adds	r3, r7, r1
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2bff      	cmp	r3, #255	; 0xff
 8009fb0:	d10b      	bne.n	8009fca <check_conflict+0x56>
			sel = Selector[i].sel;
 8009fb2:	183b      	adds	r3, r7, r0
 8009fb4:	781a      	ldrb	r2, [r3, #0]
 8009fb6:	1879      	adds	r1, r7, r1
 8009fb8:	4818      	ldr	r0, [pc, #96]	; (800a01c <check_conflict+0xa8>)
 8009fba:	0013      	movs	r3, r2
 8009fbc:	00db      	lsls	r3, r3, #3
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	18c3      	adds	r3, r0, r3
 8009fc4:	3318      	adds	r3, #24
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	700b      	strb	r3, [r1, #0]

		uint32_t mask = 1U << sel; // cannot exceed 31
 8009fca:	230e      	movs	r3, #14
 8009fcc:	18fb      	adds	r3, r7, r3
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	409a      	lsls	r2, r3
 8009fd4:	0013      	movs	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]
		// already set to 1, means conflict
		if((detector & mask) != 0U)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	4013      	ands	r3, r2
 8009fde:	d004      	beq.n	8009fea <check_conflict+0x76>
		{
			conflict =true;
 8009fe0:	2317      	movs	r3, #23
 8009fe2:	18fb      	adds	r3, r7, r3
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	701a      	strb	r2, [r3, #0]
			break;
 8009fe8:	e010      	b.n	800a00c <check_conflict+0x98>
		}
		detector |= mask;
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
	for(uint8_t i= 0; i < n; ++i)
 8009ff2:	220f      	movs	r2, #15
 8009ff4:	18bb      	adds	r3, r7, r2
 8009ff6:	18ba      	adds	r2, r7, r2
 8009ff8:	7812      	ldrb	r2, [r2, #0]
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	230f      	movs	r3, #15
 800a000:	18fa      	adds	r2, r7, r3
 800a002:	1cfb      	adds	r3, r7, #3
 800a004:	7812      	ldrb	r2, [r2, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d3c5      	bcc.n	8009f98 <check_conflict+0x24>
	}
	return conflict;
 800a00c:	2317      	movs	r3, #23
 800a00e:	18fb      	adds	r3, r7, r3
 800a010:	781b      	ldrb	r3, [r3, #0]
}
 800a012:	0018      	movs	r0, r3
 800a014:	46bd      	mov	sp, r7
 800a016:	b006      	add	sp, #24
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	200019c4 	.word	0x200019c4

0800a020 <switch_Antenna>:


// @params:
// @antnums: array of selecte ant numbers. NULL: For display IP: When set to NULL, write output pins only and leave all state variables unchanged.
int8_t switch_Antenna(uint8_t *antnums, uint8_t n)
{
 800a020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	000a      	movs	r2, r1
 800a02a:	1cfb      	adds	r3, r7, #3
 800a02c:	701a      	strb	r2, [r3, #0]
	int8_t r = 0;
 800a02e:	2417      	movs	r4, #23
 800a030:	193b      	adds	r3, r7, r4
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
	// when antnums is NULL, just keep the state of each selector and update output pins
	uint8_t i;

	// check conflict
	if(check_conflict(antnums, n))
 800a036:	1cfb      	adds	r3, r7, #3
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	0011      	movs	r1, r2
 800a03e:	0018      	movs	r0, r3
 800a040:	f7ff ff98 	bl	8009f74 <check_conflict>
 800a044:	1e03      	subs	r3, r0, #0
 800a046:	d003      	beq.n	800a050 <switch_Antenna+0x30>
	{
		r = -1; // conflict
 800a048:	193b      	adds	r3, r7, r4
 800a04a:	22ff      	movs	r2, #255	; 0xff
 800a04c:	701a      	strb	r2, [r3, #0]
		goto EXIT_SWITCH_ANTENNA;
 800a04e:	e0a0      	b.n	800a192 <switch_Antenna+0x172>
	}

	uint8_t vNew;
	for (i = 0; i < MIN(n, N_SELECTORS); ++i)
 800a050:	2316      	movs	r3, #22
 800a052:	18fb      	adds	r3, r7, r3
 800a054:	2200      	movs	r2, #0
 800a056:	701a      	strb	r2, [r3, #0]
 800a058:	e08d      	b.n	800a176 <switch_Antenna+0x156>
	{
		// parse input
		if(antnums != NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d009      	beq.n	800a074 <switch_Antenna+0x54>
		{
			vNew = antnums[i];
 800a060:	2316      	movs	r3, #22
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	18d2      	adds	r2, r2, r3
 800a06a:	2315      	movs	r3, #21
 800a06c:	18fb      	adds	r3, r7, r3
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	e00d      	b.n	800a090 <switch_Antenna+0x70>
		}
		// WARNING: IP address display function multiplex with selector GPIOs,
		// resume previous results before displaying IP
		else
		{
			vNew = Selector[i].sel;
 800a074:	2316      	movs	r3, #22
 800a076:	18fb      	adds	r3, r7, r3
 800a078:	781a      	ldrb	r2, [r3, #0]
 800a07a:	2315      	movs	r3, #21
 800a07c:	18f9      	adds	r1, r7, r3
 800a07e:	4849      	ldr	r0, [pc, #292]	; (800a1a4 <switch_Antenna+0x184>)
 800a080:	0013      	movs	r3, r2
 800a082:	00db      	lsls	r3, r3, #3
 800a084:	1a9b      	subs	r3, r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	18c3      	adds	r3, r0, r3
 800a08a:	3318      	adds	r3, #24
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	700b      	strb	r3, [r1, #0]
		}


		if(vNew != 0xff) // 0xff means do not change
 800a090:	2015      	movs	r0, #21
 800a092:	183b      	adds	r3, r7, r0
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2bff      	cmp	r3, #255	; 0xff
 800a098:	d067      	beq.n	800a16a <switch_Antenna+0x14a>
		{
			// write pins
			Selector[i].sel = vNew;
 800a09a:	2416      	movs	r4, #22
 800a09c:	193b      	adds	r3, r7, r4
 800a09e:	781a      	ldrb	r2, [r3, #0]
 800a0a0:	4940      	ldr	r1, [pc, #256]	; (800a1a4 <switch_Antenna+0x184>)
 800a0a2:	0013      	movs	r3, r2
 800a0a4:	00db      	lsls	r3, r3, #3
 800a0a6:	1a9b      	subs	r3, r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	18cb      	adds	r3, r1, r3
 800a0ac:	3318      	adds	r3, #24
 800a0ae:	183a      	adds	r2, r7, r0
 800a0b0:	7812      	ldrb	r2, [r2, #0]
 800a0b2:	701a      	strb	r2, [r3, #0]
			uint8_t val = ~Selector[i].sel;
 800a0b4:	193b      	adds	r3, r7, r4
 800a0b6:	781a      	ldrb	r2, [r3, #0]
 800a0b8:	493a      	ldr	r1, [pc, #232]	; (800a1a4 <switch_Antenna+0x184>)
 800a0ba:	0013      	movs	r3, r2
 800a0bc:	00db      	lsls	r3, r3, #3
 800a0be:	1a9b      	subs	r3, r3, r2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	18cb      	adds	r3, r1, r3
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	781a      	ldrb	r2, [r3, #0]
 800a0c8:	2313      	movs	r3, #19
 800a0ca:	18fb      	adds	r3, r7, r3
 800a0cc:	43d2      	mvns	r2, r2
 800a0ce:	701a      	strb	r2, [r3, #0]
			for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 800a0d0:	2314      	movs	r3, #20
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e029      	b.n	800a12e <switch_Antenna+0x10e>
			{
				PIN_typedef pin = Selector[i].PIN_BCDs[iBCD];
 800a0da:	2316      	movs	r3, #22
 800a0dc:	18fb      	adds	r3, r7, r3
 800a0de:	781a      	ldrb	r2, [r3, #0]
 800a0e0:	2514      	movs	r5, #20
 800a0e2:	197b      	adds	r3, r7, r5
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2608      	movs	r6, #8
 800a0e8:	19bc      	adds	r4, r7, r6
 800a0ea:	492e      	ldr	r1, [pc, #184]	; (800a1a4 <switch_Antenna+0x184>)
 800a0ec:	00d8      	lsls	r0, r3, #3
 800a0ee:	0013      	movs	r3, r2
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	1a9b      	subs	r3, r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	18c3      	adds	r3, r0, r3
 800a0f8:	0022      	movs	r2, r4
 800a0fa:	18cb      	adds	r3, r1, r3
 800a0fc:	cb03      	ldmia	r3!, {r0, r1}
 800a0fe:	c203      	stmia	r2!, {r0, r1}
				HAL_GPIO_WritePin(pin.group, pin.pin, (val >> iBCD) & 0x01);
 800a100:	19bb      	adds	r3, r7, r6
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	19bb      	adds	r3, r7, r6
 800a106:	8899      	ldrh	r1, [r3, #4]
 800a108:	2313      	movs	r3, #19
 800a10a:	18fb      	adds	r3, r7, r3
 800a10c:	781a      	ldrb	r2, [r3, #0]
 800a10e:	197b      	adds	r3, r7, r5
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	411a      	asrs	r2, r3
 800a114:	0013      	movs	r3, r2
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2201      	movs	r2, #1
 800a11a:	4013      	ands	r3, r2
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	001a      	movs	r2, r3
 800a120:	f7f7 fb59 	bl	80017d6 <HAL_GPIO_WritePin>
			for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 800a124:	197b      	adds	r3, r7, r5
 800a126:	197a      	adds	r2, r7, r5
 800a128:	7812      	ldrb	r2, [r2, #0]
 800a12a:	3201      	adds	r2, #1
 800a12c:	701a      	strb	r2, [r3, #0]
 800a12e:	2314      	movs	r3, #20
 800a130:	18fb      	adds	r3, r7, r3
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b02      	cmp	r3, #2
 800a136:	d9d0      	bls.n	800a0da <switch_Antenna+0xba>
			}

			// store configurations
			if(antnums)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d015      	beq.n	800a16a <switch_Antenna+0x14a>
			{
				cfg.nRadioToAntNums[i] = Selector[i].sel;
 800a13e:	2116      	movs	r1, #22
 800a140:	187b      	adds	r3, r7, r1
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	187b      	adds	r3, r7, r1
 800a146:	7819      	ldrb	r1, [r3, #0]
 800a148:	4816      	ldr	r0, [pc, #88]	; (800a1a4 <switch_Antenna+0x184>)
 800a14a:	0013      	movs	r3, r2
 800a14c:	00db      	lsls	r3, r3, #3
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	18c3      	adds	r3, r0, r3
 800a154:	3318      	adds	r3, #24
 800a156:	781a      	ldrb	r2, [r3, #0]
 800a158:	4b13      	ldr	r3, [pc, #76]	; (800a1a8 <switch_Antenna+0x188>)
 800a15a:	185b      	adds	r3, r3, r1
 800a15c:	721a      	strb	r2, [r3, #8]
				isModified = true;
 800a15e:	4b13      	ldr	r3, [pc, #76]	; (800a1ac <switch_Antenna+0x18c>)
 800a160:	2201      	movs	r2, #1
 800a162:	701a      	strb	r2, [r3, #0]
				needUpdate = true;
 800a164:	4b12      	ldr	r3, [pc, #72]	; (800a1b0 <switch_Antenna+0x190>)
 800a166:	2201      	movs	r2, #1
 800a168:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MIN(n, N_SELECTORS); ++i)
 800a16a:	2216      	movs	r2, #22
 800a16c:	18bb      	adds	r3, r7, r2
 800a16e:	18ba      	adds	r2, r7, r2
 800a170:	7812      	ldrb	r2, [r2, #0]
 800a172:	3201      	adds	r2, #1
 800a174:	701a      	strb	r2, [r3, #0]
 800a176:	1cfb      	adds	r3, r7, #3
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	2a02      	cmp	r2, #2
 800a17e:	d900      	bls.n	800a182 <switch_Antenna+0x162>
 800a180:	2302      	movs	r3, #2
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2216      	movs	r2, #22
 800a186:	18ba      	adds	r2, r7, r2
 800a188:	7812      	ldrb	r2, [r2, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d200      	bcs.n	800a190 <switch_Antenna+0x170>
 800a18e:	e764      	b.n	800a05a <switch_Antenna+0x3a>
			}
		}

	}
EXIT_SWITCH_ANTENNA:
 800a190:	46c0      	nop			; (mov r8, r8)
	return r;
 800a192:	2317      	movs	r3, #23
 800a194:	18fb      	adds	r3, r7, r3
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	b25b      	sxtb	r3, r3
}
 800a19a:	0018      	movs	r0, r3
 800a19c:	46bd      	mov	sp, r7
 800a19e:	b007      	add	sp, #28
 800a1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a2:	46c0      	nop			; (mov r8, r8)
 800a1a4:	200019c4 	.word	0x200019c4
 800a1a8:	2000136c 	.word	0x2000136c
 800a1ac:	200006c4 	.word	0x200006c4
 800a1b0:	200010cf 	.word	0x200010cf

0800a1b4 <get_Antenna_real_BCDs>:


void get_Antenna_real_BCDs(uint8_t *antnums, uint8_t n) //3-0:SEL1[2:0] 7-4:SEL2[2:0] GPIOs are Low Effective
{
 800a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b6:	b085      	sub	sp, #20
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	000a      	movs	r2, r1
 800a1be:	1cfb      	adds	r3, r7, #3
 800a1c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MIN(n, N_SELECTORS); ++i)
 800a1c2:	230f      	movs	r3, #15
 800a1c4:	18fb      	adds	r3, r7, r3
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	e052      	b.n	800a272 <get_Antenna_real_BCDs+0xbe>
	{
		uint8_t res = 0;
 800a1cc:	230e      	movs	r3, #14
 800a1ce:	18fb      	adds	r3, r7, r3
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
		res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
		res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
		res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
		res |= ((d >> BCDM2_2) & 1) << 6;// bit 2: BCDM1_1
#else
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 800a1d4:	230d      	movs	r3, #13
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	2200      	movs	r2, #0
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e036      	b.n	800a24c <get_Antenna_real_BCDs+0x98>
		{
			res |= (((!HAL_GPIO_ReadPin(SelectorM[i].PIN_BCDs[iBCD].group,
 800a1de:	260f      	movs	r6, #15
 800a1e0:	19bb      	adds	r3, r7, r6
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	250d      	movs	r5, #13
 800a1e6:	197b      	adds	r3, r7, r5
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	492a      	ldr	r1, [pc, #168]	; (800a294 <get_Antenna_real_BCDs+0xe0>)
 800a1ec:	00d8      	lsls	r0, r3, #3
 800a1ee:	0013      	movs	r3, r2
 800a1f0:	00db      	lsls	r3, r3, #3
 800a1f2:	1a9b      	subs	r3, r3, r2
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	18c3      	adds	r3, r0, r3
 800a1f8:	585c      	ldr	r4, [r3, r1]
 800a1fa:	19bb      	adds	r3, r7, r6
 800a1fc:	781a      	ldrb	r2, [r3, #0]
 800a1fe:	197b      	adds	r3, r7, r5
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	4924      	ldr	r1, [pc, #144]	; (800a294 <get_Antenna_real_BCDs+0xe0>)
 800a204:	00d8      	lsls	r0, r3, #3
 800a206:	0013      	movs	r3, r2
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	1a9b      	subs	r3, r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	18c3      	adds	r3, r0, r3
 800a210:	18cb      	adds	r3, r1, r3
 800a212:	3304      	adds	r3, #4
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	0019      	movs	r1, r3
 800a218:	0020      	movs	r0, r4
 800a21a:	f7f7 fabf 	bl	800179c <HAL_GPIO_ReadPin>
 800a21e:	0003      	movs	r3, r0
					SelectorM[i].PIN_BCDs[iBCD].pin)) & 0x01) << iBCD); // BCDM1[0]
 800a220:	425a      	negs	r2, r3
 800a222:	4153      	adcs	r3, r2
 800a224:	b2db      	uxtb	r3, r3
 800a226:	001a      	movs	r2, r3
 800a228:	197b      	adds	r3, r7, r5
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	409a      	lsls	r2, r3
 800a22e:	0013      	movs	r3, r2
			res |= (((!HAL_GPIO_ReadPin(SelectorM[i].PIN_BCDs[iBCD].group,
 800a230:	b25a      	sxtb	r2, r3
 800a232:	210e      	movs	r1, #14
 800a234:	187b      	adds	r3, r7, r1
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	4313      	orrs	r3, r2
 800a23c:	b25a      	sxtb	r2, r3
 800a23e:	187b      	adds	r3, r7, r1
 800a240:	701a      	strb	r2, [r3, #0]
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 800a242:	197b      	adds	r3, r7, r5
 800a244:	197a      	adds	r2, r7, r5
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	3201      	adds	r2, #1
 800a24a:	701a      	strb	r2, [r3, #0]
 800a24c:	230d      	movs	r3, #13
 800a24e:	18fb      	adds	r3, r7, r3
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d9c3      	bls.n	800a1de <get_Antenna_real_BCDs+0x2a>
		}
#endif
		antnums[i] = res;
 800a256:	210f      	movs	r1, #15
 800a258:	187b      	adds	r3, r7, r1
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	18d3      	adds	r3, r2, r3
 800a260:	220e      	movs	r2, #14
 800a262:	18ba      	adds	r2, r7, r2
 800a264:	7812      	ldrb	r2, [r2, #0]
 800a266:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MIN(n, N_SELECTORS); ++i)
 800a268:	187b      	adds	r3, r7, r1
 800a26a:	187a      	adds	r2, r7, r1
 800a26c:	7812      	ldrb	r2, [r2, #0]
 800a26e:	3201      	adds	r2, #1
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	1cfb      	adds	r3, r7, #3
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b2da      	uxtb	r2, r3
 800a278:	2a02      	cmp	r2, #2
 800a27a:	d900      	bls.n	800a27e <get_Antenna_real_BCDs+0xca>
 800a27c:	2302      	movs	r3, #2
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	220f      	movs	r2, #15
 800a282:	18ba      	adds	r2, r7, r2
 800a284:	7812      	ldrb	r2, [r2, #0]
 800a286:	429a      	cmp	r2, r3
 800a288:	d3a0      	bcc.n	800a1cc <get_Antenna_real_BCDs+0x18>
	}

}
 800a28a:	46c0      	nop			; (mov r8, r8)
 800a28c:	46c0      	nop			; (mov r8, r8)
 800a28e:	46bd      	mov	sp, r7
 800a290:	b005      	add	sp, #20
 800a292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a294:	20001aec 	.word	0x20001aec

0800a298 <display_IP>:

/* Display IP functions BEGIN */

// USE BCD1_0, BCD1_1, BCD1_2, BCD2_0 for transferring "0~9" and "-" digits
void display_IP(bool start)
{
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b085      	sub	sp, #20
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	0002      	movs	r2, r0
 800a2a0:	1dfb      	adds	r3, r7, #7
 800a2a2:	701a      	strb	r2, [r3, #0]
	if (start) // start == true, start the timer
 800a2a4:	1dfb      	adds	r3, r7, #7
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d04b      	beq.n	800a344 <display_IP+0xac>
	{
		idxDisplayIP = 0;
 800a2ac:	4b2d      	ldr	r3, [pc, #180]	; (800a364 <display_IP+0xcc>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]

		//  HAL_GPIO_WritePin(XDISPLAY_GPIO_Port, XDISPLAY_Pin, 0);
		// turn off display
		uint8_t d = ~(0x0e);
 800a2b2:	240f      	movs	r4, #15
 800a2b4:	193b      	adds	r3, r7, r4
 800a2b6:	22f1      	movs	r2, #241	; 0xf1
 800a2b8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800a2ba:	4b2b      	ldr	r3, [pc, #172]	; (800a368 <display_IP+0xd0>)
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	4b2a      	ldr	r3, [pc, #168]	; (800a368 <display_IP+0xd0>)
 800a2c0:	8899      	ldrh	r1, [r3, #4]
				Selector[0].PIN_BCDs[0].pin, d & 0x01);
 800a2c2:	193b      	adds	r3, r7, r4
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800a2cc:	001a      	movs	r2, r3
 800a2ce:	f7f7 fa82 	bl	80017d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800a2d2:	4b25      	ldr	r3, [pc, #148]	; (800a368 <display_IP+0xd0>)
 800a2d4:	6898      	ldr	r0, [r3, #8]
 800a2d6:	4b24      	ldr	r3, [pc, #144]	; (800a368 <display_IP+0xd0>)
 800a2d8:	8999      	ldrh	r1, [r3, #12]
 800a2da:	193b      	adds	r3, r7, r4
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	b2db      	uxtb	r3, r3
				Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800a2e8:	001a      	movs	r2, r3
 800a2ea:	f7f7 fa74 	bl	80017d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800a2ee:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <display_IP+0xd0>)
 800a2f0:	6918      	ldr	r0, [r3, #16]
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	; (800a368 <display_IP+0xd0>)
 800a2f4:	8a99      	ldrh	r1, [r3, #20]
 800a2f6:	193b      	adds	r3, r7, r4
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	089b      	lsrs	r3, r3, #2
 800a2fc:	b2db      	uxtb	r3, r3
				Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 800a2fe:	2201      	movs	r2, #1
 800a300:	4013      	ands	r3, r2
 800a302:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800a304:	001a      	movs	r2, r3
 800a306:	f7f7 fa66 	bl	80017d6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800a30a:	4b17      	ldr	r3, [pc, #92]	; (800a368 <display_IP+0xd0>)
 800a30c:	69d8      	ldr	r0, [r3, #28]
 800a30e:	4b16      	ldr	r3, [pc, #88]	; (800a368 <display_IP+0xd0>)
 800a310:	8c19      	ldrh	r1, [r3, #32]
 800a312:	193b      	adds	r3, r7, r4
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	08db      	lsrs	r3, r3, #3
 800a318:	b2db      	uxtb	r3, r3
				Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 800a31a:	2201      	movs	r2, #1
 800a31c:	4013      	ands	r3, r2
 800a31e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800a320:	001a      	movs	r2, r3
 800a322:	f7f7 fa58 	bl	80017d6 <HAL_GPIO_WritePin>

		// transform IP to string, and get the length of the string
		lenDisplayIP = IPv4_to_s(sIP_dec ,IP);
 800a326:	4a11      	ldr	r2, [pc, #68]	; (800a36c <display_IP+0xd4>)
 800a328:	4b11      	ldr	r3, [pc, #68]	; (800a370 <display_IP+0xd8>)
 800a32a:	0011      	movs	r1, r2
 800a32c:	0018      	movs	r0, r3
 800a32e:	f7fd fd93 	bl	8007e58 <IPv4_to_s>
 800a332:	0003      	movs	r3, r0
 800a334:	001a      	movs	r2, r3
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <display_IP+0xdc>)
 800a338:	701a      	strb	r2, [r3, #0]
		// start the timer
		HAL_TIM_Base_Start_IT(&htim6);
 800a33a:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <display_IP+0xe0>)
 800a33c:	0018      	movs	r0, r3
 800a33e:	f7f8 ff51 	bl	80031e4 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim6);
		idxDisplayIP = -1;
		// resume GPIO outputs
		switch_Antenna(NULL, N_SELECTORS);
	}
}
 800a342:	e00a      	b.n	800a35a <display_IP+0xc2>
		HAL_TIM_Base_Stop_IT(&htim6);
 800a344:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <display_IP+0xe0>)
 800a346:	0018      	movs	r0, r3
 800a348:	f7f8 ff98 	bl	800327c <HAL_TIM_Base_Stop_IT>
		idxDisplayIP = -1;
 800a34c:	4b05      	ldr	r3, [pc, #20]	; (800a364 <display_IP+0xcc>)
 800a34e:	22ff      	movs	r2, #255	; 0xff
 800a350:	701a      	strb	r2, [r3, #0]
		switch_Antenna(NULL, N_SELECTORS);
 800a352:	2102      	movs	r1, #2
 800a354:	2000      	movs	r0, #0
 800a356:	f7ff fe63 	bl	800a020 <switch_Antenna>
}
 800a35a:	46c0      	nop			; (mov r8, r8)
 800a35c:	46bd      	mov	sp, r7
 800a35e:	b005      	add	sp, #20
 800a360:	bd90      	pop	{r4, r7, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	2000069c 	.word	0x2000069c
 800a368:	200019c4 	.word	0x200019c4
 800a36c:	200010ac 	.word	0x200010ac
 800a370:	200010b0 	.word	0x200010b0
 800a374:	200010ce 	.word	0x200010ce
 800a378:	20001a40 	.word	0x20001a40

0800a37c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
	/* display IP address */
	if (htim == &htim6)
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	4b6c      	ldr	r3, [pc, #432]	; (800a538 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800a388:	429a      	cmp	r2, r3
 800a38a:	d000      	beq.n	800a38e <HAL_TIM_PeriodElapsedCallback+0x12>
 800a38c:	e0d1      	b.n	800a532 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	{
		uint8_t d;

		// termination conditon
		if(idxDisplayIP < 0)
 800a38e:	4b6b      	ldr	r3, [pc, #428]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b25b      	sxtb	r3, r3
 800a394:	2b00      	cmp	r3, #0
 800a396:	da04      	bge.n	800a3a2 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			HAL_TIM_Base_Stop_IT(htim);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	0018      	movs	r0, r3
 800a39c:	f7f8 ff6e 	bl	800327c <HAL_TIM_Base_Stop_IT>
			return;
 800a3a0:	e0c7      	b.n	800a532 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}

		// display
		if (idxDisplayIP < lenDisplayIP)
 800a3a2:	4b66      	ldr	r3, [pc, #408]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b25b      	sxtb	r3, r3
 800a3a8:	001a      	movs	r2, r3
 800a3aa:	4b65      	ldr	r3, [pc, #404]	; (800a540 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	da6c      	bge.n	800a48c <HAL_TIM_PeriodElapsedCallback+0x110>
		{
			char s = sIP_dec[idxDisplayIP];
 800a3b2:	4b62      	ldr	r3, [pc, #392]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	b25b      	sxtb	r3, r3
 800a3b8:	0019      	movs	r1, r3
 800a3ba:	200e      	movs	r0, #14
 800a3bc:	183b      	adds	r3, r7, r0
 800a3be:	4a61      	ldr	r2, [pc, #388]	; (800a544 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800a3c0:	5c52      	ldrb	r2, [r2, r1]
 800a3c2:	701a      	strb	r2, [r3, #0]
			if (s >= '0' && s <= '9')
 800a3c4:	0002      	movs	r2, r0
 800a3c6:	18bb      	adds	r3, r7, r2
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b2f      	cmp	r3, #47	; 0x2f
 800a3cc:	d90f      	bls.n	800a3ee <HAL_TIM_PeriodElapsedCallback+0x72>
 800a3ce:	18bb      	adds	r3, r7, r2
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b39      	cmp	r3, #57	; 0x39
 800a3d4:	d80b      	bhi.n	800a3ee <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				d = (s - '0');
 800a3d6:	210f      	movs	r1, #15
 800a3d8:	187b      	adds	r3, r7, r1
 800a3da:	18ba      	adds	r2, r7, r2
 800a3dc:	7812      	ldrb	r2, [r2, #0]
 800a3de:	3a30      	subs	r2, #48	; 0x30
 800a3e0:	701a      	strb	r2, [r3, #0]
				d = ~d;
 800a3e2:	187b      	adds	r3, r7, r1
 800a3e4:	187a      	adds	r2, r7, r1
 800a3e6:	7812      	ldrb	r2, [r2, #0]
 800a3e8:	43d2      	mvns	r2, r2
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e00d      	b.n	800a40a <HAL_TIM_PeriodElapsedCallback+0x8e>

			}
			else if(s == '.') // display "-" instead of '.', activate all 4 pins
 800a3ee:	230e      	movs	r3, #14
 800a3f0:	18fb      	adds	r3, r7, r3
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f6:	d104      	bne.n	800a402 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				d = ~(0x0f);
 800a3f8:	230f      	movs	r3, #15
 800a3fa:	18fb      	adds	r3, r7, r3
 800a3fc:	22f0      	movs	r2, #240	; 0xf0
 800a3fe:	701a      	strb	r2, [r3, #0]
 800a400:	e003      	b.n	800a40a <HAL_TIM_PeriodElapsedCallback+0x8e>
			}
			else
			{
				d = ~(0x0e); // no display
 800a402:	230f      	movs	r3, #15
 800a404:	18fb      	adds	r3, r7, r3
 800a406:	22f1      	movs	r2, #241	; 0xf1
 800a408:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800a40a:	4b4f      	ldr	r3, [pc, #316]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	4b4e      	ldr	r3, [pc, #312]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a410:	8899      	ldrh	r1, [r3, #4]
					Selector[0].PIN_BCDs[0].pin, d & 0x01);
 800a412:	240f      	movs	r4, #15
 800a414:	193b      	adds	r3, r7, r4
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2201      	movs	r2, #1
 800a41a:	4013      	ands	r3, r2
 800a41c:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800a41e:	001a      	movs	r2, r3
 800a420:	f7f7 f9d9 	bl	80017d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800a424:	4b48      	ldr	r3, [pc, #288]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a426:	6898      	ldr	r0, [r3, #8]
 800a428:	4b47      	ldr	r3, [pc, #284]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a42a:	8999      	ldrh	r1, [r3, #12]
 800a42c:	193b      	adds	r3, r7, r4
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	085b      	lsrs	r3, r3, #1
 800a432:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 800a434:	2201      	movs	r2, #1
 800a436:	4013      	ands	r3, r2
 800a438:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800a43a:	001a      	movs	r2, r3
 800a43c:	f7f7 f9cb 	bl	80017d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800a440:	4b41      	ldr	r3, [pc, #260]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a442:	6918      	ldr	r0, [r3, #16]
 800a444:	4b40      	ldr	r3, [pc, #256]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a446:	8a99      	ldrh	r1, [r3, #20]
 800a448:	193b      	adds	r3, r7, r4
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	089b      	lsrs	r3, r3, #2
 800a44e:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 800a450:	2201      	movs	r2, #1
 800a452:	4013      	ands	r3, r2
 800a454:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800a456:	001a      	movs	r2, r3
 800a458:	f7f7 f9bd 	bl	80017d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800a45c:	4b3a      	ldr	r3, [pc, #232]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a45e:	69d8      	ldr	r0, [r3, #28]
 800a460:	4b39      	ldr	r3, [pc, #228]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a462:	8c19      	ldrh	r1, [r3, #32]
 800a464:	193b      	adds	r3, r7, r4
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	08db      	lsrs	r3, r3, #3
 800a46a:	b2db      	uxtb	r3, r3
					Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 800a46c:	2201      	movs	r2, #1
 800a46e:	4013      	ands	r3, r2
 800a470:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800a472:	001a      	movs	r2, r3
 800a474:	f7f7 f9af 	bl	80017d6 <HAL_GPIO_WritePin>
			++idxDisplayIP;
 800a478:	4b30      	ldr	r3, [pc, #192]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	b2db      	uxtb	r3, r3
 800a480:	3301      	adds	r3, #1
 800a482:	b2db      	uxtb	r3, r3
 800a484:	b25a      	sxtb	r2, r3
 800a486:	4b2d      	ldr	r3, [pc, #180]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a488:	701a      	strb	r2, [r3, #0]
 800a48a:	e052      	b.n	800a532 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}
		// at the end of transmission, pause for a while
		else if(idxDisplayIP < lenDisplayIP + 3)
 800a48c:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	3302      	adds	r3, #2
 800a492:	4a2a      	ldr	r2, [pc, #168]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a494:	7812      	ldrb	r2, [r2, #0]
 800a496:	b252      	sxtb	r2, r2
 800a498:	4293      	cmp	r3, r2
 800a49a:	db43      	blt.n	800a524 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		{
			d = ~(0x0e); // no display
 800a49c:	240f      	movs	r4, #15
 800a49e:	193b      	adds	r3, r7, r4
 800a4a0:	22f1      	movs	r2, #241	; 0xf1
 800a4a2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800a4a4:	4b28      	ldr	r3, [pc, #160]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4a6:	6818      	ldr	r0, [r3, #0]
 800a4a8:	4b27      	ldr	r3, [pc, #156]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4aa:	8899      	ldrh	r1, [r3, #4]
					Selector[0].PIN_BCDs[0].pin, d & 0x01);
 800a4ac:	193b      	adds	r3, r7, r4
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800a4b6:	001a      	movs	r2, r3
 800a4b8:	f7f7 f98d 	bl	80017d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800a4bc:	4b22      	ldr	r3, [pc, #136]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4be:	6898      	ldr	r0, [r3, #8]
 800a4c0:	4b21      	ldr	r3, [pc, #132]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4c2:	8999      	ldrh	r1, [r3, #12]
 800a4c4:	193b      	adds	r3, r7, r4
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	085b      	lsrs	r3, r3, #1
 800a4ca:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800a4d2:	001a      	movs	r2, r3
 800a4d4:	f7f7 f97f 	bl	80017d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800a4d8:	4b1b      	ldr	r3, [pc, #108]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4da:	6918      	ldr	r0, [r3, #16]
 800a4dc:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4de:	8a99      	ldrh	r1, [r3, #20]
 800a4e0:	193b      	adds	r3, r7, r4
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	089b      	lsrs	r3, r3, #2
 800a4e6:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	4013      	ands	r3, r2
 800a4ec:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800a4ee:	001a      	movs	r2, r3
 800a4f0:	f7f7 f971 	bl	80017d6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800a4f4:	4b14      	ldr	r3, [pc, #80]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4f6:	69d8      	ldr	r0, [r3, #28]
 800a4f8:	4b13      	ldr	r3, [pc, #76]	; (800a548 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800a4fa:	8c19      	ldrh	r1, [r3, #32]
 800a4fc:	193b      	adds	r3, r7, r4
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	08db      	lsrs	r3, r3, #3
 800a502:	b2db      	uxtb	r3, r3
					Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 800a504:	2201      	movs	r2, #1
 800a506:	4013      	ands	r3, r2
 800a508:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800a50a:	001a      	movs	r2, r3
 800a50c:	f7f7 f963 	bl	80017d6 <HAL_GPIO_WritePin>
			++idxDisplayIP;
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b25b      	sxtb	r3, r3
 800a516:	b2db      	uxtb	r3, r3
 800a518:	3301      	adds	r3, #1
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	b25a      	sxtb	r2, r3
 800a51e:	4b07      	ldr	r3, [pc, #28]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	e006      	b.n	800a532 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}
		else
		{
			idxDisplayIP = -1;
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800a526:	22ff      	movs	r2, #255	; 0xff
 800a528:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	0018      	movs	r0, r3
 800a52e:	f7f8 fea5 	bl	800327c <HAL_TIM_Base_Stop_IT>
		}
	}
}
 800a532:	46bd      	mov	sp, r7
 800a534:	b005      	add	sp, #20
 800a536:	bd90      	pop	{r4, r7, pc}
 800a538:	20001a40 	.word	0x20001a40
 800a53c:	2000069c 	.word	0x2000069c
 800a540:	200010ce 	.word	0x200010ce
 800a544:	200010b0 	.word	0x200010b0
 800a548:	200019c4 	.word	0x200019c4

0800a54c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a550:	46c0      	nop			; (mov r8, r8)
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <base64_expect_output_length>:
#define MIN(x,y) (((x) > (y)) ? (y) : (x))
/***************************************************************************
 *                 BASE64                                            *
 ***********************************************************************/
size_t base64_expect_output_length(size_t len)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b082      	sub	sp, #8
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
	return 4*((len + 2) / 3 + 1);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3302      	adds	r3, #2
 800a562:	2103      	movs	r1, #3
 800a564:	0018      	movs	r0, r3
 800a566:	f7f5 fde1 	bl	800012c <__udivsi3>
 800a56a:	0003      	movs	r3, r0
 800a56c:	3301      	adds	r3, #1
 800a56e:	009b      	lsls	r3, r3, #2
}
 800a570:	0018      	movs	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	b002      	add	sp, #8
 800a576:	bd80      	pop	{r7, pc}

0800a578 <base64_encode>:
 * @param len: Length of input data in bytes
 * @param output: Pre-allocated buffer for Base64 result (min size: 4*((len+2)/3)+1)
 * @param retval: >=0 : length, <0 : error
 * @note Uses static lookup table for efficiency. Handles padding dynamically.
 */
int base64_encode(uint8_t *input, size_t len, char *output, size_t capacity) {
 800a578:	b580      	push	{r7, lr}
 800a57a:	b09a      	sub	sp, #104	; 0x68
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
    uint32_t i = 0, j = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	667b      	str	r3, [r7, #100]	; 0x64
 800a58a:	2300      	movs	r3, #0
 800a58c:	663b      	str	r3, [r7, #96]	; 0x60
    const char base64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"; // RFC 4648 alphabet
 800a58e:	2314      	movs	r3, #20
 800a590:	18fa      	adds	r2, r7, r3
 800a592:	4b45      	ldr	r3, [pc, #276]	; (800a6a8 <base64_encode+0x130>)
 800a594:	0010      	movs	r0, r2
 800a596:	0019      	movs	r1, r3
 800a598:	2341      	movs	r3, #65	; 0x41
 800a59a:	001a      	movs	r2, r3
 800a59c:	f000 fbf0 	bl	800ad80 <memcpy>
    size_t expected_len = base64_expect_output_length(len);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	0018      	movs	r0, r3
 800a5a4:	f7ff ffd7 	bl	800a556 <base64_expect_output_length>
 800a5a8:	0003      	movs	r3, r0
 800a5aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    // return -1 if not enough space
    if(expected_len >= capacity)
 800a5ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d302      	bcc.n	800a5ba <base64_encode+0x42>
    	return -1;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	425b      	negs	r3, r3
 800a5b8:	e071      	b.n	800a69e <base64_encode+0x126>
    for (i = 0; i < len; i += 3) {
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a5be:	e064      	b.n	800a68a <base64_encode+0x112>
        // Combine 3 bytes into a 24-bit triplet
        uint32_t triplet = (input[i] << 16) |
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5c4:	18d3      	adds	r3, r2, r3
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	041a      	lsls	r2, r3, #16
                          (i+1 < len ? input[i+1] << 8 : 0) |
 800a5ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	68b9      	ldr	r1, [r7, #8]
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d906      	bls.n	800a5e2 <base64_encode+0x6a>
 800a5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	18cb      	adds	r3, r1, r3
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	e000      	b.n	800a5e4 <base64_encode+0x6c>
 800a5e2:	2300      	movs	r3, #0
        uint32_t triplet = (input[i] << 16) |
 800a5e4:	4313      	orrs	r3, r2
                          (i+2 < len ? input[i+2] : 0);
 800a5e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a5e8:	3202      	adds	r2, #2
 800a5ea:	68b9      	ldr	r1, [r7, #8]
 800a5ec:	4291      	cmp	r1, r2
 800a5ee:	d905      	bls.n	800a5fc <base64_encode+0x84>
 800a5f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a5f2:	3202      	adds	r2, #2
 800a5f4:	68f9      	ldr	r1, [r7, #12]
 800a5f6:	188a      	adds	r2, r1, r2
 800a5f8:	7812      	ldrb	r2, [r2, #0]
 800a5fa:	e000      	b.n	800a5fe <base64_encode+0x86>
 800a5fc:	2200      	movs	r2, #0
                          (i+1 < len ? input[i+1] << 8 : 0) |
 800a5fe:	4313      	orrs	r3, r2
        uint32_t triplet = (input[i] << 16) |
 800a600:	65bb      	str	r3, [r7, #88]	; 0x58

        // Split triplet into four 6-bit indices
        output[j++] = base64_table[(triplet >> 18) & 0x3F];
 800a602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a604:	0c9b      	lsrs	r3, r3, #18
 800a606:	223f      	movs	r2, #63	; 0x3f
 800a608:	401a      	ands	r2, r3
 800a60a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a60c:	1c59      	adds	r1, r3, #1
 800a60e:	6639      	str	r1, [r7, #96]	; 0x60
 800a610:	6879      	ldr	r1, [r7, #4]
 800a612:	18cb      	adds	r3, r1, r3
 800a614:	2014      	movs	r0, #20
 800a616:	1839      	adds	r1, r7, r0
 800a618:	5c8a      	ldrb	r2, [r1, r2]
 800a61a:	701a      	strb	r2, [r3, #0]
        output[j++] = base64_table[(triplet >> 12) & 0x3F];
 800a61c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a61e:	0b1b      	lsrs	r3, r3, #12
 800a620:	223f      	movs	r2, #63	; 0x3f
 800a622:	401a      	ands	r2, r3
 800a624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a626:	1c59      	adds	r1, r3, #1
 800a628:	6639      	str	r1, [r7, #96]	; 0x60
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	18cb      	adds	r3, r1, r3
 800a62e:	1839      	adds	r1, r7, r0
 800a630:	5c8a      	ldrb	r2, [r1, r2]
 800a632:	701a      	strb	r2, [r3, #0]
        // Add padding if input length not divisible by 3
        output[j++] = i+1 < len ? base64_table[(triplet >> 6) & 0x3F] : '=';
 800a634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a636:	3301      	adds	r3, #1
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d906      	bls.n	800a64c <base64_encode+0xd4>
 800a63e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a640:	099b      	lsrs	r3, r3, #6
 800a642:	223f      	movs	r2, #63	; 0x3f
 800a644:	4013      	ands	r3, r2
 800a646:	183a      	adds	r2, r7, r0
 800a648:	5cd1      	ldrb	r1, [r2, r3]
 800a64a:	e000      	b.n	800a64e <base64_encode+0xd6>
 800a64c:	213d      	movs	r1, #61	; 0x3d
 800a64e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a650:	1c5a      	adds	r2, r3, #1
 800a652:	663a      	str	r2, [r7, #96]	; 0x60
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	18d3      	adds	r3, r2, r3
 800a658:	1c0a      	adds	r2, r1, #0
 800a65a:	701a      	strb	r2, [r3, #0]
        output[j++] = i+2 < len ? base64_table[triplet & 0x3F] : '=';
 800a65c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a65e:	3302      	adds	r3, #2
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	d906      	bls.n	800a674 <base64_encode+0xfc>
 800a666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a668:	223f      	movs	r2, #63	; 0x3f
 800a66a:	4013      	ands	r3, r2
 800a66c:	2214      	movs	r2, #20
 800a66e:	18ba      	adds	r2, r7, r2
 800a670:	5cd1      	ldrb	r1, [r2, r3]
 800a672:	e000      	b.n	800a676 <base64_encode+0xfe>
 800a674:	213d      	movs	r1, #61	; 0x3d
 800a676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	663a      	str	r2, [r7, #96]	; 0x60
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	18d3      	adds	r3, r2, r3
 800a680:	1c0a      	adds	r2, r1, #0
 800a682:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i += 3) {
 800a684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a686:	3303      	adds	r3, #3
 800a688:	667b      	str	r3, [r7, #100]	; 0x64
 800a68a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d396      	bcc.n	800a5c0 <base64_encode+0x48>
    }
    output[j] = '\0'; // Null-terminate string
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a696:	18d3      	adds	r3, r2, r3
 800a698:	2200      	movs	r2, #0
 800a69a:	701a      	strb	r2, [r3, #0]
    return j;
 800a69c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 800a69e:	0018      	movs	r0, r3
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	b01a      	add	sp, #104	; 0x68
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	46c0      	nop			; (mov r8, r8)
 800a6a8:	0800b37c 	.word	0x0800b37c

0800a6ac <ws_handshake_response>:
 * @param client_key: Client's Sec-WebSocket-Key header value
 * @param output: Buffer for Base64-encoded response key
 * @note Computes SHA-1(client_key + GUID) then Base64 encodes
 */
int ws_handshake_response(char *client_key, size_t lenin, char *output, size_t lenout)
{
 800a6ac:	b590      	push	{r4, r7, lr}
 800a6ae:	b09d      	sub	sp, #116	; 0x74
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
    static char combined[128];
    static uint8_t sha1_digest[20];
    SHA1_CTX ctx;

    // Concatenate client key with GUID
    strncpy(combined, client_key, lenin);
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	68f9      	ldr	r1, [r7, #12]
 800a6be:	4b15      	ldr	r3, [pc, #84]	; (800a714 <ws_handshake_response+0x68>)
 800a6c0:	0018      	movs	r0, r3
 800a6c2:	f000 fbde 	bl	800ae82 <strncpy>
    strncpy(combined + lenin, WS_GUID, 128 - lenin);
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	4b12      	ldr	r3, [pc, #72]	; (800a714 <ws_handshake_response+0x68>)
 800a6ca:	18d0      	adds	r0, r2, r3
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	2280      	movs	r2, #128	; 0x80
 800a6d0:	1ad2      	subs	r2, r2, r3
 800a6d2:	4b11      	ldr	r3, [pc, #68]	; (800a718 <ws_handshake_response+0x6c>)
 800a6d4:	0019      	movs	r1, r3
 800a6d6:	f000 fbd4 	bl	800ae82 <strncpy>

    sha1_init(&ctx);
 800a6da:	2414      	movs	r4, #20
 800a6dc:	193b      	adds	r3, r7, r4
 800a6de:	0018      	movs	r0, r3
 800a6e0:	f7f5 ff80 	bl	80005e4 <sha1_init>

    // Compute hash and encode
    sha1_encode(&ctx, (uint8_t*)combined, strlen(combined), sha1_digest);
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <ws_handshake_response+0x68>)
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	f7f5 fd18 	bl	800011c <strlen>
 800a6ec:	0002      	movs	r2, r0
 800a6ee:	4b0b      	ldr	r3, [pc, #44]	; (800a71c <ws_handshake_response+0x70>)
 800a6f0:	4908      	ldr	r1, [pc, #32]	; (800a714 <ws_handshake_response+0x68>)
 800a6f2:	1938      	adds	r0, r7, r4
 800a6f4:	f7f6 f94d 	bl	8000992 <sha1_encode>
    int r = base64_encode(sha1_digest, 20, output, lenout);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	4807      	ldr	r0, [pc, #28]	; (800a71c <ws_handshake_response+0x70>)
 800a6fe:	2114      	movs	r1, #20
 800a700:	f7ff ff3a 	bl	800a578 <base64_encode>
 800a704:	0003      	movs	r3, r0
 800a706:	66fb      	str	r3, [r7, #108]	; 0x6c
    return r;
 800a708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 800a70a:	0018      	movs	r0, r3
 800a70c:	46bd      	mov	sp, r7
 800a70e:	b01d      	add	sp, #116	; 0x74
 800a710:	bd90      	pop	{r4, r7, pc}
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	200012d8 	.word	0x200012d8
 800a718:	0800b3c0 	.word	0x0800b3c0
 800a71c:	20001358 	.word	0x20001358

0800a720 <ws_parse_frame>:
 * @param data: Input buffer starting with frame header
 * @param frame: Output parsed frame metadata
 * @return Header length in bytes, -1 if error
 * @note Supports payload lengths ≤64KB (no 64-bit length)
 */
int ws_parse_frame(uint8_t *data, size_t len, WS_Frame *frame) {
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	607a      	str	r2, [r7, #4]
    // Byte 0: FIN[7] + Opcode[3:0]
    frame->fin = (data[0] >> 7) & 0x01;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	09db      	lsrs	r3, r3, #7
 800a732:	b2da      	uxtb	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	701a      	strb	r2, [r3, #0]
    frame->opcode = data[0] & 0x0F;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	220f      	movs	r2, #15
 800a73e:	4013      	ands	r3, r2
 800a740:	b2da      	uxtb	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	705a      	strb	r2, [r3, #1]
    // Byte 1: MASK[7] + Payload length[6:0]
    frame->mask = (data[1] >> 7) & 0x01;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	3301      	adds	r3, #1
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	09db      	lsrs	r3, r3, #7
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	709a      	strb	r2, [r3, #2]
    frame->payload_len = data[1] & 0x7F;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3301      	adds	r3, #1
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	001a      	movs	r2, r3
 800a75c:	237f      	movs	r3, #127	; 0x7f
 800a75e:	401a      	ands	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	609a      	str	r2, [r3, #8]
    uint8_t *ptr = data + 2;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	3302      	adds	r3, #2
 800a768:	617b      	str	r3, [r7, #20]
    // payload_len==126, parse extended length from next 2 bytes
    if(frame->payload_len == 126)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	2b7e      	cmp	r3, #126	; 0x7e
 800a770:	d10d      	bne.n	800a78e <ws_parse_frame+0x6e>
    {
    	frame->payload_len = (((uint16_t)(ptr[0])) << 8) | (ptr[1]);
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	021b      	lsls	r3, r3, #8
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	3201      	adds	r2, #1
 800a77c:	7812      	ldrb	r2, [r2, #0]
 800a77e:	4313      	orrs	r3, r2
 800a780:	001a      	movs	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	609a      	str	r2, [r3, #8]
    	ptr += 2;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	3302      	adds	r3, #2
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e006      	b.n	800a79c <ws_parse_frame+0x7c>
    }
    // NOT IMPLEMENTED : payload_len==127, parse extended length from next 4 bytes
    else if(frame->payload_len == 127)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	2b7f      	cmp	r3, #127	; 0x7f
 800a794:	d102      	bne.n	800a79c <ws_parse_frame+0x7c>
    {
    	// too long for this device
//    	frame->payload_len = 0;
//    	ptr += 8;
    	return -1;
 800a796:	2301      	movs	r3, #1
 800a798:	425b      	negs	r3, r3
 800a79a:	e013      	b.n	800a7c4 <ws_parse_frame+0xa4>
    }

    // Read masking key if present
    if (frame->mask) {
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	789b      	ldrb	r3, [r3, #2]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d009      	beq.n	800a7b8 <ws_parse_frame+0x98>
        memcpy(frame->masking_key, ptr, 4);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	330c      	adds	r3, #12
 800a7a8:	6979      	ldr	r1, [r7, #20]
 800a7aa:	2204      	movs	r2, #4
 800a7ac:	0018      	movs	r0, r3
 800a7ae:	f000 fae7 	bl	800ad80 <memcpy>
        ptr += 4;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	617b      	str	r3, [r7, #20]
    }
    // record a pointer to the payload's head
    frame->payload = ptr;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	605a      	str	r2, [r3, #4]
    return ptr - data; // Header length
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	1ad3      	subs	r3, r2, r3
}
 800a7c4:	0018      	movs	r0, r3
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	b006      	add	sp, #24
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <ws_unmask_payload>:
 * @param len: Payload length
 * @param masking_key: 4-byte XOR key
 * @note RFC 6455 requires masking for client→server frames
 */
void ws_unmask_payload(uint8_t *payload, size_t len, uint8_t *masking_key)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; ++i)
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	e019      	b.n	800a812 <ws_unmask_payload+0x46>
        payload[i] ^= masking_key[i % 4]; // Cyclic XOR with key
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	18d3      	adds	r3, r2, r3
 800a7e4:	7819      	ldrb	r1, [r3, #0]
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	4a0e      	ldr	r2, [pc, #56]	; (800a824 <ws_unmask_payload+0x58>)
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	d504      	bpl.n	800a7f8 <ws_unmask_payload+0x2c>
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	2204      	movs	r2, #4
 800a7f2:	4252      	negs	r2, r2
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	001a      	movs	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	189b      	adds	r3, r3, r2
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	18c3      	adds	r3, r0, r3
 800a806:	404a      	eors	r2, r1
 800a808:	b2d2      	uxtb	r2, r2
 800a80a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < len; ++i)
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3301      	adds	r3, #1
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	d8e1      	bhi.n	800a7de <ws_unmask_payload+0x12>
}
 800a81a:	46c0      	nop			; (mov r8, r8)
 800a81c:	46c0      	nop			; (mov r8, r8)
 800a81e:	46bd      	mov	sp, r7
 800a820:	b006      	add	sp, #24
 800a822:	bd80      	pop	{r7, pc}
 800a824:	80000003 	.word	0x80000003

0800a828 <ws_make_pong_frame>:


int ws_make_pong_frame(uint8_t* buf)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	buf[0] = 0x80U | WS_OPCODE_PONG;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	228a      	movs	r2, #138	; 0x8a
 800a834:	701a      	strb	r2, [r3, #0]
	buf[1] = 0;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3301      	adds	r3, #1
 800a83a:	2200      	movs	r2, #0
 800a83c:	701a      	strb	r2, [r3, #0]
	return 2;
 800a83e:	2302      	movs	r3, #2
}
 800a840:	0018      	movs	r0, r3
 800a842:	46bd      	mov	sp, r7
 800a844:	b002      	add	sp, #8
 800a846:	bd80      	pop	{r7, pc}

0800a848 <ws_make_close_frame>:

int ws_make_close_frame(uint8_t* buf, ws_close_reason_t reason)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	000a      	movs	r2, r1
 800a852:	1cfb      	adds	r3, r7, #3
 800a854:	701a      	strb	r2, [r3, #0]
	buf[0] = 0x80U | WS_OPCODE_CLOSE;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2288      	movs	r2, #136	; 0x88
 800a85a:	701a      	strb	r2, [r3, #0]
	buf[1] = 2;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	3301      	adds	r3, #1
 800a860:	2202      	movs	r2, #2
 800a862:	701a      	strb	r2, [r3, #0]
	// reasons:
	// 0x03eb = 1000, normal close
	// 0x03ee = 1006, closed by peer
	buf[2] = 0x03;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3302      	adds	r3, #2
 800a868:	2203      	movs	r2, #3
 800a86a:	701a      	strb	r2, [r3, #0]
	switch(reason)
 800a86c:	1cfb      	adds	r3, r7, #3
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <ws_make_close_frame+0x32>
 800a874:	2b01      	cmp	r3, #1
 800a876:	d005      	beq.n	800a884 <ws_make_close_frame+0x3c>
 800a878:	e009      	b.n	800a88e <ws_make_close_frame+0x46>
	{
	case WS_CLOSE_REASON_NORMAL:
		buf[3] = 0xeb;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	3303      	adds	r3, #3
 800a87e:	22eb      	movs	r2, #235	; 0xeb
 800a880:	701a      	strb	r2, [r3, #0]
		break;
 800a882:	e008      	b.n	800a896 <ws_make_close_frame+0x4e>
	case WS_CLOSE_REASON_BY_PEER:
		buf[3] = 0xee;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3303      	adds	r3, #3
 800a888:	22ee      	movs	r2, #238	; 0xee
 800a88a:	701a      	strb	r2, [r3, #0]
		break;
 800a88c:	e003      	b.n	800a896 <ws_make_close_frame+0x4e>
	default:
		buf[3] = 0xeb;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	3303      	adds	r3, #3
 800a892:	22eb      	movs	r2, #235	; 0xeb
 800a894:	701a      	strb	r2, [r3, #0]
	}
	return 4;
 800a896:	2304      	movs	r3, #4
}
 800a898:	0018      	movs	r0, r3
 800a89a:	46bd      	mov	sp, r7
 800a89c:	b002      	add	sp, #8
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <ws_make_text_frame>:

int ws_make_text_frame(uint8_t* buf, size_t lenbuf, const uint8_t* in, size_t lenin)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
	/* the content cannot be longer than 65535 bytes */
	// not enough space in buffer
	if(lenbuf < lenin + 5)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	3305      	adds	r3, #5
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d202      	bcs.n	800a8be <ws_make_text_frame+0x1e>
		return -1;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	425b      	negs	r3, r3
 800a8bc:	e032      	b.n	800a924 <ws_make_text_frame+0x84>

	uint8_t* p = buf;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	617b      	str	r3, [r7, #20]

	// OPCODE, FIN=1
	*(p++) = 0x80U | WS_OPCODE_TEXT;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	617a      	str	r2, [r7, #20]
 800a8c8:	2281      	movs	r2, #129	; 0x81
 800a8ca:	701a      	strb	r2, [r3, #0]

	// payload length
	if(lenin <= 125)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b7d      	cmp	r3, #125	; 0x7d
 800a8d0:	d806      	bhi.n	800a8e0 <ws_make_text_frame+0x40>
		*(p++) = lenin;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	1c5a      	adds	r2, r3, #1
 800a8d6:	617a      	str	r2, [r7, #20]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	b2d2      	uxtb	r2, r2
 800a8dc:	701a      	strb	r2, [r3, #0]
 800a8de:	e010      	b.n	800a902 <ws_make_text_frame+0x62>
	else
	{
		p[0] = 126U;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	227e      	movs	r2, #126	; 0x7e
 800a8e4:	701a      	strb	r2, [r3, #0]
		// 2bytes for length, but big-endian
		p[1] = (lenin >> 8U) & 0xffU; // High
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	0a1a      	lsrs	r2, r3, #8
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	b2d2      	uxtb	r2, r2
 800a8f0:	701a      	strb	r2, [r3, #0]
		p[2] = lenin & 0xffU; // Low
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	3302      	adds	r3, #2
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	b2d2      	uxtb	r2, r2
 800a8fa:	701a      	strb	r2, [r3, #0]
		p += 3;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	3303      	adds	r3, #3
 800a900:	617b      	str	r3, [r7, #20]
	}

	// payload data
	memcpy(p, in, lenin);
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	6879      	ldr	r1, [r7, #4]
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	0018      	movs	r0, r3
 800a90a:	f000 fa39 	bl	800ad80 <memcpy>
	// terminate
	*(p+lenin) = 0;
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	18d3      	adds	r3, r2, r3
 800a914:	2200      	movs	r2, #0
 800a916:	701a      	strb	r2, [r3, #0]
	return p - buf + lenin;
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	001a      	movs	r2, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	18d3      	adds	r3, r2, r3
}
 800a924:	0018      	movs	r0, r3
 800a926:	46bd      	mov	sp, r7
 800a928:	b006      	add	sp, #24
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a932:	4b0f      	ldr	r3, [pc, #60]	; (800a970 <HAL_MspInit+0x44>)
 800a934:	699a      	ldr	r2, [r3, #24]
 800a936:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <HAL_MspInit+0x44>)
 800a938:	2101      	movs	r1, #1
 800a93a:	430a      	orrs	r2, r1
 800a93c:	619a      	str	r2, [r3, #24]
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <HAL_MspInit+0x44>)
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	2201      	movs	r2, #1
 800a944:	4013      	ands	r3, r2
 800a946:	607b      	str	r3, [r7, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <HAL_MspInit+0x44>)
 800a94c:	69da      	ldr	r2, [r3, #28]
 800a94e:	4b08      	ldr	r3, [pc, #32]	; (800a970 <HAL_MspInit+0x44>)
 800a950:	2180      	movs	r1, #128	; 0x80
 800a952:	0549      	lsls	r1, r1, #21
 800a954:	430a      	orrs	r2, r1
 800a956:	61da      	str	r2, [r3, #28]
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <HAL_MspInit+0x44>)
 800a95a:	69da      	ldr	r2, [r3, #28]
 800a95c:	2380      	movs	r3, #128	; 0x80
 800a95e:	055b      	lsls	r3, r3, #21
 800a960:	4013      	ands	r3, r2
 800a962:	603b      	str	r3, [r7, #0]
 800a964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a966:	46c0      	nop			; (mov r8, r8)
 800a968:	46bd      	mov	sp, r7
 800a96a:	b002      	add	sp, #8
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	46c0      	nop			; (mov r8, r8)
 800a970:	40021000 	.word	0x40021000

0800a974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a974:	b590      	push	{r4, r7, lr}
 800a976:	b08b      	sub	sp, #44	; 0x2c
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a97c:	2414      	movs	r4, #20
 800a97e:	193b      	adds	r3, r7, r4
 800a980:	0018      	movs	r0, r3
 800a982:	2314      	movs	r3, #20
 800a984:	001a      	movs	r2, r3
 800a986:	2100      	movs	r1, #0
 800a988:	f000 fa03 	bl	800ad92 <memset>
  if(hspi->Instance==SPI1)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a20      	ldr	r2, [pc, #128]	; (800aa14 <HAL_SPI_MspInit+0xa0>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d13a      	bne.n	800aa0c <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a996:	4b20      	ldr	r3, [pc, #128]	; (800aa18 <HAL_SPI_MspInit+0xa4>)
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	4b1f      	ldr	r3, [pc, #124]	; (800aa18 <HAL_SPI_MspInit+0xa4>)
 800a99c:	2180      	movs	r1, #128	; 0x80
 800a99e:	0149      	lsls	r1, r1, #5
 800a9a0:	430a      	orrs	r2, r1
 800a9a2:	619a      	str	r2, [r3, #24]
 800a9a4:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <HAL_SPI_MspInit+0xa4>)
 800a9a6:	699a      	ldr	r2, [r3, #24]
 800a9a8:	2380      	movs	r3, #128	; 0x80
 800a9aa:	015b      	lsls	r3, r3, #5
 800a9ac:	4013      	ands	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]
 800a9b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b2:	4b19      	ldr	r3, [pc, #100]	; (800aa18 <HAL_SPI_MspInit+0xa4>)
 800a9b4:	695a      	ldr	r2, [r3, #20]
 800a9b6:	4b18      	ldr	r3, [pc, #96]	; (800aa18 <HAL_SPI_MspInit+0xa4>)
 800a9b8:	2180      	movs	r1, #128	; 0x80
 800a9ba:	0289      	lsls	r1, r1, #10
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	615a      	str	r2, [r3, #20]
 800a9c0:	4b15      	ldr	r3, [pc, #84]	; (800aa18 <HAL_SPI_MspInit+0xa4>)
 800a9c2:	695a      	ldr	r2, [r3, #20]
 800a9c4:	2380      	movs	r3, #128	; 0x80
 800a9c6:	029b      	lsls	r3, r3, #10
 800a9c8:	4013      	ands	r3, r2
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a9ce:	0021      	movs	r1, r4
 800a9d0:	187b      	adds	r3, r7, r1
 800a9d2:	22e0      	movs	r2, #224	; 0xe0
 800a9d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d6:	187b      	adds	r3, r7, r1
 800a9d8:	2202      	movs	r2, #2
 800a9da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a9dc:	187b      	adds	r3, r7, r1
 800a9de:	2201      	movs	r2, #1
 800a9e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a9e2:	187b      	adds	r3, r7, r1
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800a9e8:	187b      	adds	r3, r7, r1
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ee:	187a      	adds	r2, r7, r1
 800a9f0:	2390      	movs	r3, #144	; 0x90
 800a9f2:	05db      	lsls	r3, r3, #23
 800a9f4:	0011      	movs	r1, r2
 800a9f6:	0018      	movs	r0, r3
 800a9f8:	f7f6 fd60 	bl	80014bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	2100      	movs	r1, #0
 800aa00:	2019      	movs	r0, #25
 800aa02:	f7f6 f911 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800aa06:	2019      	movs	r0, #25
 800aa08:	f7f6 f923 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800aa0c:	46c0      	nop			; (mov r8, r8)
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	b00b      	add	sp, #44	; 0x2c
 800aa12:	bd90      	pop	{r4, r7, pc}
 800aa14:	40013000 	.word	0x40013000
 800aa18:	40021000 	.word	0x40021000

0800aa1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a0d      	ldr	r2, [pc, #52]	; (800aa60 <HAL_TIM_Base_MspInit+0x44>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d113      	bne.n	800aa56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800aa2e:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <HAL_TIM_Base_MspInit+0x48>)
 800aa30:	69da      	ldr	r2, [r3, #28]
 800aa32:	4b0c      	ldr	r3, [pc, #48]	; (800aa64 <HAL_TIM_Base_MspInit+0x48>)
 800aa34:	2110      	movs	r1, #16
 800aa36:	430a      	orrs	r2, r1
 800aa38:	61da      	str	r2, [r3, #28]
 800aa3a:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <HAL_TIM_Base_MspInit+0x48>)
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	2210      	movs	r2, #16
 800aa40:	4013      	ands	r3, r2
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800aa46:	2200      	movs	r2, #0
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2011      	movs	r0, #17
 800aa4c:	f7f6 f8ec 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800aa50:	2011      	movs	r0, #17
 800aa52:	f7f6 f8fe 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800aa56:	46c0      	nop			; (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	b004      	add	sp, #16
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	40001000 	.word	0x40001000
 800aa64:	40021000 	.word	0x40021000

0800aa68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b08b      	sub	sp, #44	; 0x2c
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa70:	2414      	movs	r4, #20
 800aa72:	193b      	adds	r3, r7, r4
 800aa74:	0018      	movs	r0, r3
 800aa76:	2314      	movs	r3, #20
 800aa78:	001a      	movs	r2, r3
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	f000 f989 	bl	800ad92 <memset>
  if(huart->Instance==USART2)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a47      	ldr	r2, [pc, #284]	; (800aba4 <HAL_UART_MspInit+0x13c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d000      	beq.n	800aa8c <HAL_UART_MspInit+0x24>
 800aa8a:	e087      	b.n	800ab9c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa8c:	4b46      	ldr	r3, [pc, #280]	; (800aba8 <HAL_UART_MspInit+0x140>)
 800aa8e:	69da      	ldr	r2, [r3, #28]
 800aa90:	4b45      	ldr	r3, [pc, #276]	; (800aba8 <HAL_UART_MspInit+0x140>)
 800aa92:	2180      	movs	r1, #128	; 0x80
 800aa94:	0289      	lsls	r1, r1, #10
 800aa96:	430a      	orrs	r2, r1
 800aa98:	61da      	str	r2, [r3, #28]
 800aa9a:	4b43      	ldr	r3, [pc, #268]	; (800aba8 <HAL_UART_MspInit+0x140>)
 800aa9c:	69da      	ldr	r2, [r3, #28]
 800aa9e:	2380      	movs	r3, #128	; 0x80
 800aaa0:	029b      	lsls	r3, r3, #10
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaa8:	4b3f      	ldr	r3, [pc, #252]	; (800aba8 <HAL_UART_MspInit+0x140>)
 800aaaa:	695a      	ldr	r2, [r3, #20]
 800aaac:	4b3e      	ldr	r3, [pc, #248]	; (800aba8 <HAL_UART_MspInit+0x140>)
 800aaae:	2180      	movs	r1, #128	; 0x80
 800aab0:	0289      	lsls	r1, r1, #10
 800aab2:	430a      	orrs	r2, r1
 800aab4:	615a      	str	r2, [r3, #20]
 800aab6:	4b3c      	ldr	r3, [pc, #240]	; (800aba8 <HAL_UART_MspInit+0x140>)
 800aab8:	695a      	ldr	r2, [r3, #20]
 800aaba:	2380      	movs	r3, #128	; 0x80
 800aabc:	029b      	lsls	r3, r3, #10
 800aabe:	4013      	ands	r3, r2
 800aac0:	60fb      	str	r3, [r7, #12]
 800aac2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800aac4:	0021      	movs	r1, r4
 800aac6:	187b      	adds	r3, r7, r1
 800aac8:	220c      	movs	r2, #12
 800aaca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aacc:	187b      	adds	r3, r7, r1
 800aace:	2202      	movs	r2, #2
 800aad0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aad2:	187b      	adds	r3, r7, r1
 800aad4:	2201      	movs	r2, #1
 800aad6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800aad8:	187b      	adds	r3, r7, r1
 800aada:	2203      	movs	r2, #3
 800aadc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800aade:	187b      	adds	r3, r7, r1
 800aae0:	2201      	movs	r2, #1
 800aae2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aae4:	187a      	adds	r2, r7, r1
 800aae6:	2390      	movs	r3, #144	; 0x90
 800aae8:	05db      	lsls	r3, r3, #23
 800aaea:	0011      	movs	r1, r2
 800aaec:	0018      	movs	r0, r3
 800aaee:	f7f6 fce5 	bl	80014bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800aaf2:	4b2e      	ldr	r3, [pc, #184]	; (800abac <HAL_UART_MspInit+0x144>)
 800aaf4:	4a2e      	ldr	r2, [pc, #184]	; (800abb0 <HAL_UART_MspInit+0x148>)
 800aaf6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800aaf8:	4b2c      	ldr	r3, [pc, #176]	; (800abac <HAL_UART_MspInit+0x144>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800aafe:	4b2b      	ldr	r3, [pc, #172]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab04:	4b29      	ldr	r3, [pc, #164]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab06:	2280      	movs	r2, #128	; 0x80
 800ab08:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab0a:	4b28      	ldr	r3, [pc, #160]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab10:	4b26      	ldr	r3, [pc, #152]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab12:	2200      	movs	r2, #0
 800ab14:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800ab16:	4b25      	ldr	r3, [pc, #148]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800ab1c:	4b23      	ldr	r3, [pc, #140]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab1e:	2280      	movs	r2, #128	; 0x80
 800ab20:	0152      	lsls	r2, r2, #5
 800ab22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ab24:	4b21      	ldr	r3, [pc, #132]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab26:	0018      	movs	r0, r3
 800ab28:	f7f6 f8b0 	bl	8000c8c <HAL_DMA_Init>
 800ab2c:	1e03      	subs	r3, r0, #0
 800ab2e:	d001      	beq.n	800ab34 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800ab30:	f7ff fd0c 	bl	800a54c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a1d      	ldr	r2, [pc, #116]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab38:	675a      	str	r2, [r3, #116]	; 0x74
 800ab3a:	4b1c      	ldr	r3, [pc, #112]	; (800abac <HAL_UART_MspInit+0x144>)
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 800ab40:	4b1c      	ldr	r3, [pc, #112]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab42:	4a1d      	ldr	r2, [pc, #116]	; (800abb8 <HAL_UART_MspInit+0x150>)
 800ab44:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab46:	4b1b      	ldr	r3, [pc, #108]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab48:	2210      	movs	r2, #16
 800ab4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab4c:	4b19      	ldr	r3, [pc, #100]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ab52:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab54:	2280      	movs	r2, #128	; 0x80
 800ab56:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab58:	4b16      	ldr	r3, [pc, #88]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab5e:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ab64:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab66:	2200      	movs	r2, #0
 800ab68:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ab70:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab72:	0018      	movs	r0, r3
 800ab74:	f7f6 f88a 	bl	8000c8c <HAL_DMA_Init>
 800ab78:	1e03      	subs	r3, r0, #0
 800ab7a:	d001      	beq.n	800ab80 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 800ab7c:	f7ff fce6 	bl	800a54c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a0c      	ldr	r2, [pc, #48]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab84:	671a      	str	r2, [r3, #112]	; 0x70
 800ab86:	4b0b      	ldr	r3, [pc, #44]	; (800abb4 <HAL_UART_MspInit+0x14c>)
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2101      	movs	r1, #1
 800ab90:	201c      	movs	r0, #28
 800ab92:	f7f6 f849 	bl	8000c28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ab96:	201c      	movs	r0, #28
 800ab98:	f7f6 f85b 	bl	8000c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ab9c:	46c0      	nop			; (mov r8, r8)
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	b00b      	add	sp, #44	; 0x2c
 800aba2:	bd90      	pop	{r4, r7, pc}
 800aba4:	40004400 	.word	0x40004400
 800aba8:	40021000 	.word	0x40021000
 800abac:	20001970 	.word	0x20001970
 800abb0:	40020058 	.word	0x40020058
 800abb4:	200019fc 	.word	0x200019fc
 800abb8:	40020044 	.word	0x40020044

0800abbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800abc0:	46c0      	nop			; (mov r8, r8)
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800abca:	e7fe      	b.n	800abca <HardFault_Handler+0x4>

0800abcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800abd0:	46c0      	nop			; (mov r8, r8)
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800abda:	46c0      	nop			; (mov r8, r8)
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800abe4:	f7f5 ff34 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 800abe8:	46c0      	nop			; (mov r8, r8)
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800abf4:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <DMA1_Channel4_5_IRQHandler+0x1c>)
 800abf6:	0018      	movs	r0, r3
 800abf8:	f7f6 f973 	bl	8000ee2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800abfc:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <DMA1_Channel4_5_IRQHandler+0x20>)
 800abfe:	0018      	movs	r0, r3
 800ac00:	f7f6 f96f 	bl	8000ee2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800ac04:	46c0      	nop			; (mov r8, r8)
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	200019fc 	.word	0x200019fc
 800ac10:	20001970 	.word	0x20001970

0800ac14 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ac18:	4b03      	ldr	r3, [pc, #12]	; (800ac28 <TIM6_IRQHandler+0x14>)
 800ac1a:	0018      	movs	r0, r3
 800ac1c:	f7f8 fb5c 	bl	80032d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800ac20:	46c0      	nop			; (mov r8, r8)
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	46c0      	nop			; (mov r8, r8)
 800ac28:	20001a40 	.word	0x20001a40

0800ac2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800ac30:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <SPI1_IRQHandler+0x14>)
 800ac32:	0018      	movs	r0, r3
 800ac34:	f7f7 ff96 	bl	8002b64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800ac38:	46c0      	nop			; (mov r8, r8)
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	46c0      	nop			; (mov r8, r8)
 800ac40:	20001a88 	.word	0x20001a88

0800ac44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ac48:	4b03      	ldr	r3, [pc, #12]	; (800ac58 <USART2_IRQHandler+0x14>)
 800ac4a:	0018      	movs	r0, r3
 800ac4c:	f7f8 fdca 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800ac50:	46c0      	nop			; (mov r8, r8)
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	46c0      	nop			; (mov r8, r8)
 800ac58:	20001b24 	.word	0x20001b24

0800ac5c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800ac60:	4b1a      	ldr	r3, [pc, #104]	; (800accc <SystemInit+0x70>)
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	4b19      	ldr	r3, [pc, #100]	; (800accc <SystemInit+0x70>)
 800ac66:	2101      	movs	r1, #1
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800ac6c:	4b17      	ldr	r3, [pc, #92]	; (800accc <SystemInit+0x70>)
 800ac6e:	685a      	ldr	r2, [r3, #4]
 800ac70:	4b16      	ldr	r3, [pc, #88]	; (800accc <SystemInit+0x70>)
 800ac72:	4917      	ldr	r1, [pc, #92]	; (800acd0 <SystemInit+0x74>)
 800ac74:	400a      	ands	r2, r1
 800ac76:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800ac78:	4b14      	ldr	r3, [pc, #80]	; (800accc <SystemInit+0x70>)
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	4b13      	ldr	r3, [pc, #76]	; (800accc <SystemInit+0x70>)
 800ac7e:	4915      	ldr	r1, [pc, #84]	; (800acd4 <SystemInit+0x78>)
 800ac80:	400a      	ands	r2, r1
 800ac82:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800ac84:	4b11      	ldr	r3, [pc, #68]	; (800accc <SystemInit+0x70>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	4b10      	ldr	r3, [pc, #64]	; (800accc <SystemInit+0x70>)
 800ac8a:	4913      	ldr	r1, [pc, #76]	; (800acd8 <SystemInit+0x7c>)
 800ac8c:	400a      	ands	r2, r1
 800ac8e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800ac90:	4b0e      	ldr	r3, [pc, #56]	; (800accc <SystemInit+0x70>)
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	4b0d      	ldr	r3, [pc, #52]	; (800accc <SystemInit+0x70>)
 800ac96:	4911      	ldr	r1, [pc, #68]	; (800acdc <SystemInit+0x80>)
 800ac98:	400a      	ands	r2, r1
 800ac9a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <SystemInit+0x70>)
 800ac9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <SystemInit+0x70>)
 800aca2:	210f      	movs	r1, #15
 800aca4:	438a      	bics	r2, r1
 800aca6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800aca8:	4b08      	ldr	r3, [pc, #32]	; (800accc <SystemInit+0x70>)
 800acaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <SystemInit+0x70>)
 800acae:	490c      	ldr	r1, [pc, #48]	; (800ace0 <SystemInit+0x84>)
 800acb0:	400a      	ands	r2, r1
 800acb2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <SystemInit+0x70>)
 800acb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acb8:	4b04      	ldr	r3, [pc, #16]	; (800accc <SystemInit+0x70>)
 800acba:	2101      	movs	r1, #1
 800acbc:	438a      	bics	r2, r1
 800acbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800acc0:	4b02      	ldr	r3, [pc, #8]	; (800accc <SystemInit+0x70>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	609a      	str	r2, [r3, #8]

}
 800acc6:	46c0      	nop			; (mov r8, r8)
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	40021000 	.word	0x40021000
 800acd0:	08ffb80c 	.word	0x08ffb80c
 800acd4:	fef6ffff 	.word	0xfef6ffff
 800acd8:	fffbffff 	.word	0xfffbffff
 800acdc:	ffc0ffff 	.word	0xffc0ffff
 800ace0:	fffffeec 	.word	0xfffffeec

0800ace4 <Reset_Handler>:
 800ace4:	480d      	ldr	r0, [pc, #52]	; (800ad1c <LoopForever+0x2>)
 800ace6:	4685      	mov	sp, r0
 800ace8:	480d      	ldr	r0, [pc, #52]	; (800ad20 <LoopForever+0x6>)
 800acea:	490e      	ldr	r1, [pc, #56]	; (800ad24 <LoopForever+0xa>)
 800acec:	4a0e      	ldr	r2, [pc, #56]	; (800ad28 <LoopForever+0xe>)
 800acee:	2300      	movs	r3, #0
 800acf0:	e002      	b.n	800acf8 <LoopCopyDataInit>

0800acf2 <CopyDataInit>:
 800acf2:	58d4      	ldr	r4, [r2, r3]
 800acf4:	50c4      	str	r4, [r0, r3]
 800acf6:	3304      	adds	r3, #4

0800acf8 <LoopCopyDataInit>:
 800acf8:	18c4      	adds	r4, r0, r3
 800acfa:	428c      	cmp	r4, r1
 800acfc:	d3f9      	bcc.n	800acf2 <CopyDataInit>
 800acfe:	4a0b      	ldr	r2, [pc, #44]	; (800ad2c <LoopForever+0x12>)
 800ad00:	4c0b      	ldr	r4, [pc, #44]	; (800ad30 <LoopForever+0x16>)
 800ad02:	2300      	movs	r3, #0
 800ad04:	e001      	b.n	800ad0a <LoopFillZerobss>

0800ad06 <FillZerobss>:
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	3204      	adds	r2, #4

0800ad0a <LoopFillZerobss>:
 800ad0a:	42a2      	cmp	r2, r4
 800ad0c:	d3fb      	bcc.n	800ad06 <FillZerobss>
 800ad0e:	f7ff ffa5 	bl	800ac5c <SystemInit>
 800ad12:	f000 f811 	bl	800ad38 <__libc_init_array>
 800ad16:	f7fd fecd 	bl	8008ab4 <main>

0800ad1a <LoopForever>:
 800ad1a:	e7fe      	b.n	800ad1a <LoopForever>
 800ad1c:	20002000 	.word	0x20002000
 800ad20:	20000000 	.word	0x20000000
 800ad24:	200006a4 	.word	0x200006a4
 800ad28:	0800b574 	.word	0x0800b574
 800ad2c:	200006a8 	.word	0x200006a8
 800ad30:	20001bac 	.word	0x20001bac

0800ad34 <ADC1_IRQHandler>:
 800ad34:	e7fe      	b.n	800ad34 <ADC1_IRQHandler>
	...

0800ad38 <__libc_init_array>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	2600      	movs	r6, #0
 800ad3c:	4d0c      	ldr	r5, [pc, #48]	; (800ad70 <__libc_init_array+0x38>)
 800ad3e:	4c0d      	ldr	r4, [pc, #52]	; (800ad74 <__libc_init_array+0x3c>)
 800ad40:	1b64      	subs	r4, r4, r5
 800ad42:	10a4      	asrs	r4, r4, #2
 800ad44:	42a6      	cmp	r6, r4
 800ad46:	d109      	bne.n	800ad5c <__libc_init_array+0x24>
 800ad48:	2600      	movs	r6, #0
 800ad4a:	f000 f947 	bl	800afdc <_init>
 800ad4e:	4d0a      	ldr	r5, [pc, #40]	; (800ad78 <__libc_init_array+0x40>)
 800ad50:	4c0a      	ldr	r4, [pc, #40]	; (800ad7c <__libc_init_array+0x44>)
 800ad52:	1b64      	subs	r4, r4, r5
 800ad54:	10a4      	asrs	r4, r4, #2
 800ad56:	42a6      	cmp	r6, r4
 800ad58:	d105      	bne.n	800ad66 <__libc_init_array+0x2e>
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	00b3      	lsls	r3, r6, #2
 800ad5e:	58eb      	ldr	r3, [r5, r3]
 800ad60:	4798      	blx	r3
 800ad62:	3601      	adds	r6, #1
 800ad64:	e7ee      	b.n	800ad44 <__libc_init_array+0xc>
 800ad66:	00b3      	lsls	r3, r6, #2
 800ad68:	58eb      	ldr	r3, [r5, r3]
 800ad6a:	4798      	blx	r3
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	e7f2      	b.n	800ad56 <__libc_init_array+0x1e>
 800ad70:	0800b56c 	.word	0x0800b56c
 800ad74:	0800b56c 	.word	0x0800b56c
 800ad78:	0800b56c 	.word	0x0800b56c
 800ad7c:	0800b570 	.word	0x0800b570

0800ad80 <memcpy>:
 800ad80:	2300      	movs	r3, #0
 800ad82:	b510      	push	{r4, lr}
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d100      	bne.n	800ad8a <memcpy+0xa>
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	5ccc      	ldrb	r4, [r1, r3]
 800ad8c:	54c4      	strb	r4, [r0, r3]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	e7f8      	b.n	800ad84 <memcpy+0x4>

0800ad92 <memset>:
 800ad92:	0003      	movs	r3, r0
 800ad94:	1882      	adds	r2, r0, r2
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d100      	bne.n	800ad9c <memset+0xa>
 800ad9a:	4770      	bx	lr
 800ad9c:	7019      	strb	r1, [r3, #0]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	e7f9      	b.n	800ad96 <memset+0x4>

0800ada2 <strcat>:
 800ada2:	0002      	movs	r2, r0
 800ada4:	b510      	push	{r4, lr}
 800ada6:	7813      	ldrb	r3, [r2, #0]
 800ada8:	0014      	movs	r4, r2
 800adaa:	3201      	adds	r2, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d1fa      	bne.n	800ada6 <strcat+0x4>
 800adb0:	5cca      	ldrb	r2, [r1, r3]
 800adb2:	54e2      	strb	r2, [r4, r3]
 800adb4:	3301      	adds	r3, #1
 800adb6:	2a00      	cmp	r2, #0
 800adb8:	d1fa      	bne.n	800adb0 <strcat+0xe>
 800adba:	bd10      	pop	{r4, pc}

0800adbc <strchr>:
 800adbc:	b2c9      	uxtb	r1, r1
 800adbe:	7803      	ldrb	r3, [r0, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <strchr+0x12>
 800adc4:	428b      	cmp	r3, r1
 800adc6:	d100      	bne.n	800adca <strchr+0xe>
 800adc8:	4770      	bx	lr
 800adca:	3001      	adds	r0, #1
 800adcc:	e7f7      	b.n	800adbe <strchr+0x2>
 800adce:	424b      	negs	r3, r1
 800add0:	4159      	adcs	r1, r3
 800add2:	4249      	negs	r1, r1
 800add4:	4008      	ands	r0, r1
 800add6:	e7f7      	b.n	800adc8 <strchr+0xc>

0800add8 <strcpy>:
 800add8:	0003      	movs	r3, r0
 800adda:	780a      	ldrb	r2, [r1, #0]
 800addc:	3101      	adds	r1, #1
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	3301      	adds	r3, #1
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	d1f9      	bne.n	800adda <strcpy+0x2>
 800ade6:	4770      	bx	lr

0800ade8 <strlcpy>:
 800ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adea:	0005      	movs	r5, r0
 800adec:	2a00      	cmp	r2, #0
 800adee:	d014      	beq.n	800ae1a <strlcpy+0x32>
 800adf0:	1e50      	subs	r0, r2, #1
 800adf2:	2a01      	cmp	r2, #1
 800adf4:	d01c      	beq.n	800ae30 <strlcpy+0x48>
 800adf6:	002c      	movs	r4, r5
 800adf8:	000a      	movs	r2, r1
 800adfa:	0016      	movs	r6, r2
 800adfc:	0027      	movs	r7, r4
 800adfe:	7836      	ldrb	r6, [r6, #0]
 800ae00:	3201      	adds	r2, #1
 800ae02:	3401      	adds	r4, #1
 800ae04:	0013      	movs	r3, r2
 800ae06:	0025      	movs	r5, r4
 800ae08:	703e      	strb	r6, [r7, #0]
 800ae0a:	2e00      	cmp	r6, #0
 800ae0c:	d00d      	beq.n	800ae2a <strlcpy+0x42>
 800ae0e:	3801      	subs	r0, #1
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d1f2      	bne.n	800adfa <strlcpy+0x12>
 800ae14:	2200      	movs	r2, #0
 800ae16:	702a      	strb	r2, [r5, #0]
 800ae18:	e000      	b.n	800ae1c <strlcpy+0x34>
 800ae1a:	000b      	movs	r3, r1
 800ae1c:	001a      	movs	r2, r3
 800ae1e:	3201      	adds	r2, #1
 800ae20:	1e50      	subs	r0, r2, #1
 800ae22:	7800      	ldrb	r0, [r0, #0]
 800ae24:	0013      	movs	r3, r2
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d1f9      	bne.n	800ae1e <strlcpy+0x36>
 800ae2a:	1a58      	subs	r0, r3, r1
 800ae2c:	3801      	subs	r0, #1
 800ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae30:	000b      	movs	r3, r1
 800ae32:	e7ef      	b.n	800ae14 <strlcpy+0x2c>

0800ae34 <strncat>:
 800ae34:	0003      	movs	r3, r0
 800ae36:	b530      	push	{r4, r5, lr}
 800ae38:	781c      	ldrb	r4, [r3, #0]
 800ae3a:	2c00      	cmp	r4, #0
 800ae3c:	d108      	bne.n	800ae50 <strncat+0x1c>
 800ae3e:	1889      	adds	r1, r1, r2
 800ae40:	2a00      	cmp	r2, #0
 800ae42:	d004      	beq.n	800ae4e <strncat+0x1a>
 800ae44:	4255      	negs	r5, r2
 800ae46:	5d4d      	ldrb	r5, [r1, r5]
 800ae48:	701d      	strb	r5, [r3, #0]
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	d102      	bne.n	800ae54 <strncat+0x20>
 800ae4e:	bd30      	pop	{r4, r5, pc}
 800ae50:	3301      	adds	r3, #1
 800ae52:	e7f1      	b.n	800ae38 <strncat+0x4>
 800ae54:	2a01      	cmp	r2, #1
 800ae56:	d100      	bne.n	800ae5a <strncat+0x26>
 800ae58:	705c      	strb	r4, [r3, #1]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	3a01      	subs	r2, #1
 800ae5e:	e7ef      	b.n	800ae40 <strncat+0xc>

0800ae60 <strncmp>:
 800ae60:	b530      	push	{r4, r5, lr}
 800ae62:	0005      	movs	r5, r0
 800ae64:	1e10      	subs	r0, r2, #0
 800ae66:	d00b      	beq.n	800ae80 <strncmp+0x20>
 800ae68:	2400      	movs	r4, #0
 800ae6a:	3a01      	subs	r2, #1
 800ae6c:	5d2b      	ldrb	r3, [r5, r4]
 800ae6e:	5d08      	ldrb	r0, [r1, r4]
 800ae70:	4283      	cmp	r3, r0
 800ae72:	d104      	bne.n	800ae7e <strncmp+0x1e>
 800ae74:	4294      	cmp	r4, r2
 800ae76:	d002      	beq.n	800ae7e <strncmp+0x1e>
 800ae78:	3401      	adds	r4, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1f6      	bne.n	800ae6c <strncmp+0xc>
 800ae7e:	1a18      	subs	r0, r3, r0
 800ae80:	bd30      	pop	{r4, r5, pc}

0800ae82 <strncpy>:
 800ae82:	0003      	movs	r3, r0
 800ae84:	b530      	push	{r4, r5, lr}
 800ae86:	001d      	movs	r5, r3
 800ae88:	2a00      	cmp	r2, #0
 800ae8a:	d006      	beq.n	800ae9a <strncpy+0x18>
 800ae8c:	780c      	ldrb	r4, [r1, #0]
 800ae8e:	3a01      	subs	r2, #1
 800ae90:	3301      	adds	r3, #1
 800ae92:	702c      	strb	r4, [r5, #0]
 800ae94:	3101      	adds	r1, #1
 800ae96:	2c00      	cmp	r4, #0
 800ae98:	d1f5      	bne.n	800ae86 <strncpy+0x4>
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	189a      	adds	r2, r3, r2
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d100      	bne.n	800aea4 <strncpy+0x22>
 800aea2:	bd30      	pop	{r4, r5, pc}
 800aea4:	7019      	strb	r1, [r3, #0]
 800aea6:	3301      	adds	r3, #1
 800aea8:	e7f9      	b.n	800ae9e <strncpy+0x1c>

0800aeaa <strnlen>:
 800aeaa:	0003      	movs	r3, r0
 800aeac:	1841      	adds	r1, r0, r1
 800aeae:	428b      	cmp	r3, r1
 800aeb0:	d101      	bne.n	800aeb6 <strnlen+0xc>
 800aeb2:	1a18      	subs	r0, r3, r0
 800aeb4:	4770      	bx	lr
 800aeb6:	781a      	ldrb	r2, [r3, #0]
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	d0fa      	beq.n	800aeb2 <strnlen+0x8>
 800aebc:	3301      	adds	r3, #1
 800aebe:	e7f6      	b.n	800aeae <strnlen+0x4>

0800aec0 <strnstr>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	000e      	movs	r6, r1
 800aec4:	0005      	movs	r5, r0
 800aec6:	0011      	movs	r1, r2
 800aec8:	0030      	movs	r0, r6
 800aeca:	0014      	movs	r4, r2
 800aecc:	f7ff ffed 	bl	800aeaa <strnlen>
 800aed0:	0003      	movs	r3, r0
 800aed2:	4284      	cmp	r4, r0
 800aed4:	d805      	bhi.n	800aee2 <strnstr+0x22>
 800aed6:	5c32      	ldrb	r2, [r6, r0]
 800aed8:	2a00      	cmp	r2, #0
 800aeda:	d002      	beq.n	800aee2 <strnstr+0x22>
 800aedc:	2400      	movs	r4, #0
 800aede:	0020      	movs	r0, r4
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	0021      	movs	r1, r4
 800aee4:	0032      	movs	r2, r6
 800aee6:	0028      	movs	r0, r5
 800aee8:	f000 f85f 	bl	800afaa <memmem>
 800aeec:	1e04      	subs	r4, r0, #0
 800aeee:	d0f5      	beq.n	800aedc <strnstr+0x1c>
 800aef0:	1b42      	subs	r2, r0, r5
 800aef2:	2100      	movs	r1, #0
 800aef4:	0028      	movs	r0, r5
 800aef6:	f000 f84d 	bl	800af94 <memchr>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	d1ee      	bne.n	800aedc <strnstr+0x1c>
 800aefe:	e7ee      	b.n	800aede <strnstr+0x1e>

0800af00 <strstr>:
 800af00:	780a      	ldrb	r2, [r1, #0]
 800af02:	b530      	push	{r4, r5, lr}
 800af04:	2a00      	cmp	r2, #0
 800af06:	d10c      	bne.n	800af22 <strstr+0x22>
 800af08:	bd30      	pop	{r4, r5, pc}
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d108      	bne.n	800af20 <strstr+0x20>
 800af0e:	2301      	movs	r3, #1
 800af10:	5ccc      	ldrb	r4, [r1, r3]
 800af12:	2c00      	cmp	r4, #0
 800af14:	d0f8      	beq.n	800af08 <strstr+0x8>
 800af16:	5cc5      	ldrb	r5, [r0, r3]
 800af18:	42a5      	cmp	r5, r4
 800af1a:	d101      	bne.n	800af20 <strstr+0x20>
 800af1c:	3301      	adds	r3, #1
 800af1e:	e7f7      	b.n	800af10 <strstr+0x10>
 800af20:	3001      	adds	r0, #1
 800af22:	7803      	ldrb	r3, [r0, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1f0      	bne.n	800af0a <strstr+0xa>
 800af28:	0018      	movs	r0, r3
 800af2a:	e7ed      	b.n	800af08 <strstr+0x8>

0800af2c <__strtok_r>:
 800af2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2e:	2800      	cmp	r0, #0
 800af30:	d102      	bne.n	800af38 <__strtok_r+0xc>
 800af32:	6810      	ldr	r0, [r2, #0]
 800af34:	2800      	cmp	r0, #0
 800af36:	d013      	beq.n	800af60 <__strtok_r+0x34>
 800af38:	0004      	movs	r4, r0
 800af3a:	0020      	movs	r0, r4
 800af3c:	000e      	movs	r6, r1
 800af3e:	7805      	ldrb	r5, [r0, #0]
 800af40:	3401      	adds	r4, #1
 800af42:	7837      	ldrb	r7, [r6, #0]
 800af44:	2f00      	cmp	r7, #0
 800af46:	d104      	bne.n	800af52 <__strtok_r+0x26>
 800af48:	2d00      	cmp	r5, #0
 800af4a:	d10f      	bne.n	800af6c <__strtok_r+0x40>
 800af4c:	0028      	movs	r0, r5
 800af4e:	6015      	str	r5, [r2, #0]
 800af50:	e006      	b.n	800af60 <__strtok_r+0x34>
 800af52:	3601      	adds	r6, #1
 800af54:	42bd      	cmp	r5, r7
 800af56:	d1f4      	bne.n	800af42 <__strtok_r+0x16>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1ee      	bne.n	800af3a <__strtok_r+0xe>
 800af5c:	6014      	str	r4, [r2, #0]
 800af5e:	7003      	strb	r3, [r0, #0]
 800af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af62:	002f      	movs	r7, r5
 800af64:	e00f      	b.n	800af86 <__strtok_r+0x5a>
 800af66:	3301      	adds	r3, #1
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d104      	bne.n	800af76 <__strtok_r+0x4a>
 800af6c:	0023      	movs	r3, r4
 800af6e:	3401      	adds	r4, #1
 800af70:	781d      	ldrb	r5, [r3, #0]
 800af72:	0027      	movs	r7, r4
 800af74:	000b      	movs	r3, r1
 800af76:	781e      	ldrb	r6, [r3, #0]
 800af78:	42b5      	cmp	r5, r6
 800af7a:	d1f4      	bne.n	800af66 <__strtok_r+0x3a>
 800af7c:	2d00      	cmp	r5, #0
 800af7e:	d0f0      	beq.n	800af62 <__strtok_r+0x36>
 800af80:	2300      	movs	r3, #0
 800af82:	3c01      	subs	r4, #1
 800af84:	7023      	strb	r3, [r4, #0]
 800af86:	6017      	str	r7, [r2, #0]
 800af88:	e7ea      	b.n	800af60 <__strtok_r+0x34>

0800af8a <strtok_r>:
 800af8a:	b510      	push	{r4, lr}
 800af8c:	2301      	movs	r3, #1
 800af8e:	f7ff ffcd 	bl	800af2c <__strtok_r>
 800af92:	bd10      	pop	{r4, pc}

0800af94 <memchr>:
 800af94:	b2c9      	uxtb	r1, r1
 800af96:	1882      	adds	r2, r0, r2
 800af98:	4290      	cmp	r0, r2
 800af9a:	d101      	bne.n	800afa0 <memchr+0xc>
 800af9c:	2000      	movs	r0, #0
 800af9e:	4770      	bx	lr
 800afa0:	7803      	ldrb	r3, [r0, #0]
 800afa2:	428b      	cmp	r3, r1
 800afa4:	d0fb      	beq.n	800af9e <memchr+0xa>
 800afa6:	3001      	adds	r0, #1
 800afa8:	e7f6      	b.n	800af98 <memchr+0x4>

0800afaa <memmem>:
 800afaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afac:	2b00      	cmp	r3, #0
 800afae:	d00c      	beq.n	800afca <memmem+0x20>
 800afb0:	1ac9      	subs	r1, r1, r3
 800afb2:	7815      	ldrb	r5, [r2, #0]
 800afb4:	1841      	adds	r1, r0, r1
 800afb6:	4288      	cmp	r0, r1
 800afb8:	d901      	bls.n	800afbe <memmem+0x14>
 800afba:	2000      	movs	r0, #0
 800afbc:	e005      	b.n	800afca <memmem+0x20>
 800afbe:	7804      	ldrb	r4, [r0, #0]
 800afc0:	42ac      	cmp	r4, r5
 800afc2:	d109      	bne.n	800afd8 <memmem+0x2e>
 800afc4:	1e5c      	subs	r4, r3, #1
 800afc6:	2c00      	cmp	r4, #0
 800afc8:	d100      	bne.n	800afcc <memmem+0x22>
 800afca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afcc:	5d07      	ldrb	r7, [r0, r4]
 800afce:	5d16      	ldrb	r6, [r2, r4]
 800afd0:	42b7      	cmp	r7, r6
 800afd2:	d101      	bne.n	800afd8 <memmem+0x2e>
 800afd4:	3c01      	subs	r4, #1
 800afd6:	e7f6      	b.n	800afc6 <memmem+0x1c>
 800afd8:	3001      	adds	r0, #1
 800afda:	e7ec      	b.n	800afb6 <memmem+0xc>

0800afdc <_init>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr

0800afe8 <_fini>:
 800afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afee:	bc08      	pop	{r3}
 800aff0:	469e      	mov	lr, r3
 800aff2:	4770      	bx	lr
