
Antenna Switch 6x2 New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008650  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa4  08008aa4  00020698  2**0
                  CONTENTS
  4 .ARM          00000000  08008aa4  08008aa4  00020698  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008aa4  08008aa4  00020698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa4  08008aa4  00018aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000698  20000000  08008aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c24  20000698  08009144  00020698  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  200012bc  08009144  000212bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020698  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002392c  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000436f  00000000  00000000  00043fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0004835b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  00049763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012ca3  00000000  00000000  0004aa13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005ad5  00000000  00000000  0005d6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0006318b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000049a0  00000000  00000000  000631e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000698 	.word	0x20000698
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080086f8 	.word	0x080086f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000069c 	.word	0x2000069c
 8000104:	080086f8 	.word	0x080086f8

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <load_config>:
// flash wear levelling handle
#ifdef ESP32
static wl_handle_t wlHandle = WL_INVALID_HANDLE;
#endif
void load_config(Config* p_cfg)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    if(mtxConfig == NULL) mtxConfig = xSemaphoreCreateMutex();
    #endif

    #if defined(USE_STM32_FLASH_EEPROM)
    EEPROM_ReadBytes(&EEPROM, (uint8_t*)p_cfg, sizeof(Config));
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <load_config+0x1c>)
 8000250:	226a      	movs	r2, #106	; 0x6a
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f8ec 	bl	8000430 <EEPROM_ReadBytes>
        ESP_LOGD(tag, "cfg.validstring = %s", p_cfg->body.sValid);
    }
    esp_vfs_fat_spiflash_unmount(FS_BASE_PATH_CONFIG, wlHandle);    
    ESP_LOGD(tag, "FS unmounted");
    #endif
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000000 	.word	0x20000000

08000264 <save_config>:


void save_config(Config* p_cfg)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreTake(mtxConfig, portMAX_DELAY);
    #endif

    #if defined(USE_STM32_FLASH_EEPROM)
    EEPROM_WriteBytes(&EEPROM, (uint8_t*)p_cfg, sizeof(Config));
 800026c:	6879      	ldr	r1, [r7, #4]
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <save_config+0x24>)
 8000270:	226a      	movs	r2, #106	; 0x6a
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f826 	bl	80002c4 <EEPROM_WriteBytes>
    }
    esp_vfs_fat_spiflash_unmount(FS_BASE_PATH_CONFIG, wlHandle);    
    ESP_LOGD(tag, "FS unmounted");
    #endif

    isModified=false;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <save_config+0x28>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]

SAVE_CONFIG_FAILED:
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreGive(mtxConfig);
    #endif
    return;
 800027e:	46c0      	nop			; (mov r8, r8)
}
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000
 800028c:	200006b4 	.word	0x200006b4

08000290 <config_check_valid>:


bool config_check_valid(Config* p)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    uint8_t check = strncmp(p->sValid, VALID_STRING, sizeof(p->sValid));
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <config_check_valid+0x30>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2208      	movs	r2, #8
 80002a0:	0019      	movs	r1, r3
 80002a2:	f008 f96b 	bl	800857c <strncmp>
 80002a6:	0002      	movs	r2, r0
 80002a8:	210f      	movs	r1, #15
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	701a      	strb	r2, [r3, #0]
    return (check == 0);
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	425a      	negs	r2, r3
 80002b4:	4153      	adcs	r3, r2
 80002b6:	b2db      	uxtb	r3, r3

}
 80002b8:	0018      	movs	r0, r3
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b004      	add	sp, #16
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	20000634 	.word	0x20000634

080002c4 <EEPROM_WriteBytes>:
} Quadbyte;


// Notice: 4-byte alignment
void EEPROM_WriteBytes(EEPROM_typedef *pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b090      	sub	sp, #64	; 0x40
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	1dbb      	adds	r3, r7, #6
 80002d0:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint32_t* addr = (uint32_t*)pEEPROM->base_addr;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* addrPageEnd =(addr + (PAGE_SIZE >> 2));
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	011b      	lsls	r3, r3, #4
 80002dc:	089b      	lsrs	r3, r3, #2
 80002de:	b29b      	uxth	r3, r3
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002e4:	18d3      	adds	r3, r2, r3
 80002e6:	627b      	str	r3, [r7, #36]	; 0x24
	Quadbyte quadbyte;

	uint32_t* addrOldContentBegin = addr;
 80002e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ea:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t* addrOldContentEnd;
	uint32_t* addrNewContentBegin = addr;
 80002ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002ee:	633b      	str	r3, [r7, #48]	; 0x30
#if ENABLE_WEAR_LEVELING
	/* detect range of old content, non-zero non-0xff range */
	// find the head
	while((addrOldContentBegin < addrPageEnd) && (*addrOldContentBegin == 0x00000000U))
 80002f0:	e002      	b.n	80002f8 <EEPROM_WriteBytes+0x34>
		addrOldContentBegin++;
 80002f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80002f4:	3304      	adds	r3, #4
 80002f6:	63bb      	str	r3, [r7, #56]	; 0x38
	while((addrOldContentBegin < addrPageEnd) && (*addrOldContentBegin == 0x00000000U))
 80002f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80002fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d203      	bcs.n	8000308 <EEPROM_WriteBytes+0x44>
 8000300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f4      	beq.n	80002f2 <EEPROM_WriteBytes+0x2e>
	// find the tail
	addrOldContentEnd = addrOldContentBegin;
 8000308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
	while((addrOldContentEnd < addrPageEnd) && (*addrOldContentEnd != 0xFFFFFFFFU))
 800030c:	e002      	b.n	8000314 <EEPROM_WriteBytes+0x50>
		addrOldContentEnd++;
 800030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000310:	3304      	adds	r3, #4
 8000312:	637b      	str	r3, [r7, #52]	; 0x34
	while((addrOldContentEnd < addrPageEnd) && (*addrOldContentEnd != 0xFFFFFFFFU))
 8000314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000318:	429a      	cmp	r2, r3
 800031a:	d203      	bcs.n	8000324 <EEPROM_WriteBytes+0x60>
 800031c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	d1f4      	bne.n	800030e <EEPROM_WriteBytes+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000324:	b672      	cpsid	i
}
 8000326:	46c0      	nop			; (mov r8, r8)


#endif
    __disable_irq();
    HAL_FLASH_Unlock();
 8000328:	f000 fcfc 	bl	8000d24 <HAL_FLASH_Unlock>

#if defined(STM32F4)
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
		FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
#endif
	uint32_t PageError = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_SECTORS,
			.Sector = addr_to_sector(addr),
			.NbSectors=1,
			.VoltageRange=FLASH_VOLTAGE_RANGE_3};
#else
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=(uint32_t)addr, .NbPages=1};
 8000330:	2110      	movs	r1, #16
 8000332:	187b      	adds	r3, r7, r1
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800033a:	187b      	adds	r3, r7, r1
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	187b      	adds	r3, r7, r1
 8000340:	2201      	movs	r2, #1
 8000342:	609a      	str	r2, [r3, #8]


#if ENABLE_WEAR_LEVELING
	// if the remaining length cannot fit the new content, erase the full page
	// add 4bytes to leave room for header
	if(addrOldContentEnd + (Length >> 2) + 1 > addrPageEnd)
 8000344:	1dbb      	adds	r3, r7, #6
 8000346:	881b      	ldrh	r3, [r3, #0]
 8000348:	089b      	lsrs	r3, r3, #2
 800034a:	b29b      	uxth	r3, r3
 800034c:	3301      	adds	r3, #1
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000352:	18d3      	adds	r3, r2, r3
 8000354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000356:	429a      	cmp	r2, r3
 8000358:	d209      	bcs.n	800036e <EEPROM_WriteBytes+0xaa>
	{
		HAL_FLASHEx_Erase(&fe, &PageError);
 800035a:	231c      	movs	r3, #28
 800035c:	18fa      	adds	r2, r7, r3
 800035e:	187b      	adds	r3, r7, r1
 8000360:	0011      	movs	r1, r2
 8000362:	0018      	movs	r0, r3
 8000364:	f000 fd9e 	bl	8000ea4 <HAL_FLASHEx_Erase>
		addrNewContentBegin = addr;
 8000368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036a:	633b      	str	r3, [r7, #48]	; 0x30
 800036c:	e011      	b.n	8000392 <EEPROM_WriteBytes+0xce>
	}
	/* SET EXISTING DATA TO ALL 0 TO MARK USAGE */
	else
	{
		for(uint32_t* addrToErase = addrOldContentBegin; addrToErase < addrOldContentEnd; addrToErase++)
 800036e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000372:	e008      	b.n	8000386 <EEPROM_WriteBytes+0xc2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrToErase, 0x00000000U);
 8000374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000376:	2200      	movs	r2, #0
 8000378:	2300      	movs	r3, #0
 800037a:	2002      	movs	r0, #2
 800037c:	f000 fc3c 	bl	8000bf8 <HAL_FLASH_Program>
		for(uint32_t* addrToErase = addrOldContentBegin; addrToErase < addrOldContentEnd; addrToErase++)
 8000380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000382:	3304      	adds	r3, #4
 8000384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800038a:	429a      	cmp	r2, r3
 800038c:	d3f2      	bcc.n	8000374 <EEPROM_WriteBytes+0xb0>
		addrNewContentBegin = addrOldContentEnd;
 800038e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000390:	633b      	str	r3, [r7, #48]	; 0x30
	/* If Wear Leveling is disabled, erase the full page each time before writing*/
	HAL_FLASHEx_Erase(&fe, &PageError);
#endif

	/* WRITE HEADER */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrNewContentBegin++, EEPROM_SYMBOL_HEADER);
 8000392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000394:	1d1a      	adds	r2, r3, #4
 8000396:	633a      	str	r2, [r7, #48]	; 0x30
 8000398:	0019      	movs	r1, r3
 800039a:	4a24      	ldr	r2, [pc, #144]	; (800042c <EEPROM_WriteBytes+0x168>)
 800039c:	2300      	movs	r3, #0
 800039e:	2002      	movs	r0, #2
 80003a0:	f000 fc2a 	bl	8000bf8 <HAL_FLASH_Program>
	/* WRITE CONTENT BEGIN */
    while(Length)
 80003a4:	e036      	b.n	8000414 <EEPROM_WriteBytes+0x150>
    {
    	memset(quadbyte.bytes, 0, 4);
 80003a6:	2320      	movs	r3, #32
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	2204      	movs	r2, #4
 80003ac:	2100      	movs	r1, #0
 80003ae:	0018      	movs	r0, r3
 80003b0:	f008 f8a3 	bl	80084fa <memset>
    	for(i=0; i<4 && Length; ++i)
 80003b4:	233e      	movs	r3, #62	; 0x3e
 80003b6:	18fb      	adds	r3, r7, r3
 80003b8:	2200      	movs	r2, #0
 80003ba:	801a      	strh	r2, [r3, #0]
 80003bc:	e014      	b.n	80003e8 <EEPROM_WriteBytes+0x124>
    	{
    		quadbyte.bytes[i] = *Buffer;
 80003be:	203e      	movs	r0, #62	; 0x3e
 80003c0:	183b      	adds	r3, r7, r0
 80003c2:	881b      	ldrh	r3, [r3, #0]
 80003c4:	68ba      	ldr	r2, [r7, #8]
 80003c6:	7811      	ldrb	r1, [r2, #0]
 80003c8:	2220      	movs	r2, #32
 80003ca:	18ba      	adds	r2, r7, r2
 80003cc:	54d1      	strb	r1, [r2, r3]
    		Length--;
 80003ce:	1dbb      	adds	r3, r7, #6
 80003d0:	881a      	ldrh	r2, [r3, #0]
 80003d2:	1dbb      	adds	r3, r7, #6
 80003d4:	3a01      	subs	r2, #1
 80003d6:	801a      	strh	r2, [r3, #0]
    		Buffer++;
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	3301      	adds	r3, #1
 80003dc:	60bb      	str	r3, [r7, #8]
    	for(i=0; i<4 && Length; ++i)
 80003de:	183b      	adds	r3, r7, r0
 80003e0:	183a      	adds	r2, r7, r0
 80003e2:	8812      	ldrh	r2, [r2, #0]
 80003e4:	3201      	adds	r2, #1
 80003e6:	801a      	strh	r2, [r3, #0]
 80003e8:	233e      	movs	r3, #62	; 0x3e
 80003ea:	18fb      	adds	r3, r7, r3
 80003ec:	881b      	ldrh	r3, [r3, #0]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d803      	bhi.n	80003fa <EEPROM_WriteBytes+0x136>
 80003f2:	1dbb      	adds	r3, r7, #6
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d1e1      	bne.n	80003be <EEPROM_WriteBytes+0xfa>
    	}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrNewContentBegin++, quadbyte.word);
 80003fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003fc:	1d1a      	adds	r2, r3, #4
 80003fe:	633a      	str	r2, [r7, #48]	; 0x30
 8000400:	0019      	movs	r1, r3
 8000402:	6a3b      	ldr	r3, [r7, #32]
 8000404:	001c      	movs	r4, r3
 8000406:	2300      	movs	r3, #0
 8000408:	001d      	movs	r5, r3
 800040a:	0022      	movs	r2, r4
 800040c:	002b      	movs	r3, r5
 800040e:	2002      	movs	r0, #2
 8000410:	f000 fbf2 	bl	8000bf8 <HAL_FLASH_Program>
    while(Length)
 8000414:	1dbb      	adds	r3, r7, #6
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d1c4      	bne.n	80003a6 <EEPROM_WriteBytes+0xe2>
    }
    /* WRITE CONTENT END */
    HAL_FLASH_Lock();
 800041c:	f000 fca8 	bl	8000d70 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000420:	b662      	cpsie	i
}
 8000422:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b010      	add	sp, #64	; 0x40
 800042a:	bdb0      	pop	{r4, r5, r7, pc}
 800042c:	07cb020a 	.word	0x07cb020a

08000430 <EEPROM_ReadBytes>:


void EEPROM_ReadBytes(EEPROM_typedef* pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08a      	sub	sp, #40	; 0x28
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	801a      	strh	r2, [r3, #0]
//	uint8_t* ad = pEEPROM->base_addr;
//	uint8_t* addr_end = addr + Length;
	Quadbyte quadbyte;
	uint32_t* addrBase= (uint32_t*)pEEPROM->base_addr;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	61bb      	str	r3, [r7, #24]
	uint32_t* addrPageEnd = addrBase + (PAGE_SIZE >> 2);
 8000444:	2380      	movs	r3, #128	; 0x80
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	089b      	lsrs	r3, r3, #2
 800044a:	b29b      	uxth	r3, r3
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	69ba      	ldr	r2, [r7, #24]
 8000450:	18d3      	adds	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
	uint32_t* addrContentBegin = addrBase;
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	627b      	str	r3, [r7, #36]	; 0x24
#if ENABLE_WEAR_LEVELING
	memset(Buffer, 0, Length);
 8000458:	1dbb      	adds	r3, r7, #6
 800045a:	881a      	ldrh	r2, [r3, #0]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	2100      	movs	r1, #0
 8000460:	0018      	movs	r0, r3
 8000462:	f008 f84a 	bl	80084fa <memset>
	// read 4-bytes each
	// find header, header
	while(addrContentBegin < addrPageEnd && *addrContentBegin == 0x00000000U)
 8000466:	e002      	b.n	800046e <EEPROM_ReadBytes+0x3e>
		addrContentBegin++;
 8000468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800046a:	3304      	adds	r3, #4
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
	while(addrContentBegin < addrPageEnd && *addrContentBegin == 0x00000000U)
 800046e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	429a      	cmp	r2, r3
 8000474:	d203      	bcs.n	800047e <EEPROM_ReadBytes+0x4e>
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f4      	beq.n	8000468 <EEPROM_ReadBytes+0x38>
	// skip the header
	if(addrContentBegin < addrPageEnd - 1)
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3b04      	subs	r3, #4
 8000482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000484:	429a      	cmp	r2, r3
 8000486:	d202      	bcs.n	800048e <EEPROM_ReadBytes+0x5e>
		addrContentBegin += 1;
 8000488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048a:	3304      	adds	r3, #4
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
#else
	addrContentBegin = addrBase + 1; // skip HEAD
	addrContentEnd = addrContentBegin + Length;
#endif
	uint32_t* addr = addrContentBegin;
 800048e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000490:	623b      	str	r3, [r7, #32]
	while(Length && (addr < addrPageEnd))
 8000492:	e028      	b.n	80004e6 <EEPROM_ReadBytes+0xb6>
	{
		quadbyte.word = *addr;
 8000494:	6a3b      	ldr	r3, [r7, #32]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	613b      	str	r3, [r7, #16]
		for(uint8_t i=0; i<4 && Length; ++i)
 800049a:	231f      	movs	r3, #31
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	2200      	movs	r2, #0
 80004a0:	701a      	strb	r2, [r3, #0]
 80004a2:	e014      	b.n	80004ce <EEPROM_ReadBytes+0x9e>
		{
			*Buffer = quadbyte.bytes[i];
 80004a4:	211f      	movs	r1, #31
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2210      	movs	r2, #16
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	5cd2      	ldrb	r2, [r2, r3]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	701a      	strb	r2, [r3, #0]
			Buffer++;
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	3301      	adds	r3, #1
 80004b8:	60bb      	str	r3, [r7, #8]
			Length--;
 80004ba:	1dbb      	adds	r3, r7, #6
 80004bc:	881a      	ldrh	r2, [r3, #0]
 80004be:	1dbb      	adds	r3, r7, #6
 80004c0:	3a01      	subs	r2, #1
 80004c2:	801a      	strh	r2, [r3, #0]
		for(uint8_t i=0; i<4 && Length; ++i)
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	187a      	adds	r2, r7, r1
 80004c8:	7812      	ldrb	r2, [r2, #0]
 80004ca:	3201      	adds	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
 80004ce:	231f      	movs	r3, #31
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d803      	bhi.n	80004e0 <EEPROM_ReadBytes+0xb0>
 80004d8:	1dbb      	adds	r3, r7, #6
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1e1      	bne.n	80004a4 <EEPROM_ReadBytes+0x74>
		}
		addr++;
 80004e0:	6a3b      	ldr	r3, [r7, #32]
 80004e2:	3304      	adds	r3, #4
 80004e4:	623b      	str	r3, [r7, #32]
	while(Length && (addr < addrPageEnd))
 80004e6:	1dbb      	adds	r3, r7, #6
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d003      	beq.n	80004f6 <EEPROM_ReadBytes+0xc6>
 80004ee:	6a3a      	ldr	r2, [r7, #32]
 80004f0:	697b      	ldr	r3, [r7, #20]
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d3ce      	bcc.n	8000494 <EEPROM_ReadBytes+0x64>
	}
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b00a      	add	sp, #40	; 0x28
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000504:	4b07      	ldr	r3, [pc, #28]	; (8000524 <HAL_Init+0x24>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_Init+0x24>)
 800050a:	2110      	movs	r1, #16
 800050c:	430a      	orrs	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f809 	bl	8000528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000516:	f007 fdd1 	bl	80080bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800051a:	2300      	movs	r3, #0
}
 800051c:	0018      	movs	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	40022000 	.word	0x40022000

08000528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <HAL_InitTick+0x5c>)
 8000532:	681c      	ldr	r4, [r3, #0]
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <HAL_InitTick+0x60>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	0019      	movs	r1, r3
 800053a:	23fa      	movs	r3, #250	; 0xfa
 800053c:	0098      	lsls	r0, r3, #2
 800053e:	f7ff fdf5 	bl	800012c <__udivsi3>
 8000542:	0003      	movs	r3, r0
 8000544:	0019      	movs	r1, r3
 8000546:	0020      	movs	r0, r4
 8000548:	f7ff fdf0 	bl	800012c <__udivsi3>
 800054c:	0003      	movs	r3, r0
 800054e:	0018      	movs	r0, r3
 8000550:	f000 f92f 	bl	80007b2 <HAL_SYSTICK_Config>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000558:	2301      	movs	r3, #1
 800055a:	e00f      	b.n	800057c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b03      	cmp	r3, #3
 8000560:	d80b      	bhi.n	800057a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	2200      	movs	r2, #0
 800056a:	0018      	movs	r0, r3
 800056c:	f000 f8fc 	bl	8000768 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_InitTick+0x64>)
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	0018      	movs	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	b003      	add	sp, #12
 8000582:	bd90      	pop	{r4, r7, pc}
 8000584:	20000694 	.word	0x20000694
 8000588:	2000000c 	.word	0x2000000c
 800058c:	20000008 	.word	0x20000008

08000590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x1c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	001a      	movs	r2, r3
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x20>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	18d2      	adds	r2, r2, r3
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <HAL_IncTick+0x20>)
 80005a2:	601a      	str	r2, [r3, #0]
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	20000dc0 	.word	0x20000dc0

080005b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  return uwTick;
 80005b8:	4b02      	ldr	r3, [pc, #8]	; (80005c4 <HAL_GetTick+0x10>)
 80005ba:	681b      	ldr	r3, [r3, #0]
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	20000dc0 	.word	0x20000dc0

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff fff0 	bl	80005b4 <HAL_GetTick>
 80005d4:	0003      	movs	r3, r0
 80005d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	d005      	beq.n	80005ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_Delay+0x44>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	001a      	movs	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	189b      	adds	r3, r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	f7ff ffe0 	bl	80005b4 <HAL_GetTick>
 80005f4:	0002      	movs	r2, r0
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d8f7      	bhi.n	80005f0 <HAL_Delay+0x28>
  {
  }
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	46bd      	mov	sp, r7
 8000606:	b004      	add	sp, #16
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	2000000c 	.word	0x2000000c

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	0002      	movs	r2, r0
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b7f      	cmp	r3, #127	; 0x7f
 8000622:	d809      	bhi.n	8000638 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	001a      	movs	r2, r3
 800062a:	231f      	movs	r3, #31
 800062c:	401a      	ands	r2, r3
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__NVIC_EnableIRQ+0x30>)
 8000630:	2101      	movs	r1, #1
 8000632:	4091      	lsls	r1, r2
 8000634:	000a      	movs	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
  }
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}
 8000640:	e000e100 	.word	0xe000e100

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	0002      	movs	r2, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000652:	1dfb      	adds	r3, r7, #7
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b7f      	cmp	r3, #127	; 0x7f
 8000658:	d828      	bhi.n	80006ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800065a:	4a2f      	ldr	r2, [pc, #188]	; (8000718 <__NVIC_SetPriority+0xd4>)
 800065c:	1dfb      	adds	r3, r7, #7
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	089b      	lsrs	r3, r3, #2
 8000664:	33c0      	adds	r3, #192	; 0xc0
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	589b      	ldr	r3, [r3, r2]
 800066a:	1dfa      	adds	r2, r7, #7
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	0011      	movs	r1, r2
 8000670:	2203      	movs	r2, #3
 8000672:	400a      	ands	r2, r1
 8000674:	00d2      	lsls	r2, r2, #3
 8000676:	21ff      	movs	r1, #255	; 0xff
 8000678:	4091      	lsls	r1, r2
 800067a:	000a      	movs	r2, r1
 800067c:	43d2      	mvns	r2, r2
 800067e:	401a      	ands	r2, r3
 8000680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	019b      	lsls	r3, r3, #6
 8000686:	22ff      	movs	r2, #255	; 0xff
 8000688:	401a      	ands	r2, r3
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	0018      	movs	r0, r3
 8000690:	2303      	movs	r3, #3
 8000692:	4003      	ands	r3, r0
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000698:	481f      	ldr	r0, [pc, #124]	; (8000718 <__NVIC_SetPriority+0xd4>)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	b25b      	sxtb	r3, r3
 80006a0:	089b      	lsrs	r3, r3, #2
 80006a2:	430a      	orrs	r2, r1
 80006a4:	33c0      	adds	r3, #192	; 0xc0
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006aa:	e031      	b.n	8000710 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <__NVIC_SetPriority+0xd8>)
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	0019      	movs	r1, r3
 80006b4:	230f      	movs	r3, #15
 80006b6:	400b      	ands	r3, r1
 80006b8:	3b08      	subs	r3, #8
 80006ba:	089b      	lsrs	r3, r3, #2
 80006bc:	3306      	adds	r3, #6
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	18d3      	adds	r3, r2, r3
 80006c2:	3304      	adds	r3, #4
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	1dfa      	adds	r2, r7, #7
 80006c8:	7812      	ldrb	r2, [r2, #0]
 80006ca:	0011      	movs	r1, r2
 80006cc:	2203      	movs	r2, #3
 80006ce:	400a      	ands	r2, r1
 80006d0:	00d2      	lsls	r2, r2, #3
 80006d2:	21ff      	movs	r1, #255	; 0xff
 80006d4:	4091      	lsls	r1, r2
 80006d6:	000a      	movs	r2, r1
 80006d8:	43d2      	mvns	r2, r2
 80006da:	401a      	ands	r2, r3
 80006dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	019b      	lsls	r3, r3, #6
 80006e2:	22ff      	movs	r2, #255	; 0xff
 80006e4:	401a      	ands	r2, r3
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	0018      	movs	r0, r3
 80006ec:	2303      	movs	r3, #3
 80006ee:	4003      	ands	r3, r0
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <__NVIC_SetPriority+0xd8>)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	001c      	movs	r4, r3
 80006fc:	230f      	movs	r3, #15
 80006fe:	4023      	ands	r3, r4
 8000700:	3b08      	subs	r3, #8
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	430a      	orrs	r2, r1
 8000706:	3306      	adds	r3, #6
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	18c3      	adds	r3, r0, r3
 800070c:	3304      	adds	r3, #4
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b003      	add	sp, #12
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	045b      	lsls	r3, r3, #17
 8000730:	429a      	cmp	r2, r3
 8000732:	d301      	bcc.n	8000738 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000734:	2301      	movs	r3, #1
 8000736:	e010      	b.n	800075a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <SysTick_Config+0x44>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	3a01      	subs	r2, #1
 800073e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000740:	2301      	movs	r3, #1
 8000742:	425b      	negs	r3, r3
 8000744:	2103      	movs	r1, #3
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff ff7c 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SysTick_Config+0x44>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SysTick_Config+0x44>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	e000e010 	.word	0xe000e010

08000768 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	607a      	str	r2, [r7, #4]
 8000772:	210f      	movs	r1, #15
 8000774:	187b      	adds	r3, r7, r1
 8000776:	1c02      	adds	r2, r0, #0
 8000778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	187b      	adds	r3, r7, r1
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f7ff ff5d 	bl	8000644 <__NVIC_SetPriority>
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b004      	add	sp, #16
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	0002      	movs	r2, r0
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800079e:	1dfb      	adds	r3, r7, #7
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ff33 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ffaf 	bl	8000720 <SysTick_Config>
 80007c2:	0003      	movs	r3, r0
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b002      	add	sp, #8
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	e036      	b.n	8000850 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2221      	movs	r2, #33	; 0x21
 80007e6:	2102      	movs	r1, #2
 80007e8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	4a18      	ldr	r2, [pc, #96]	; (8000858 <HAL_DMA_Init+0x8c>)
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000802:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800080e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	695b      	ldr	r3, [r3, #20]
 8000814:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800081a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	4313      	orrs	r3, r2
 8000826:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	68fa      	ldr	r2, [r7, #12]
 800082e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	0018      	movs	r0, r3
 8000834:	f000 f9c4 	bl	8000bc0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2200      	movs	r2, #0
 800083c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2221      	movs	r2, #33	; 0x21
 8000842:	2101      	movs	r1, #1
 8000844:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2220      	movs	r2, #32
 800084a:	2100      	movs	r1, #0
 800084c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	b004      	add	sp, #16
 8000856:	bd80      	pop	{r7, pc}
 8000858:	ffffc00f 	.word	0xffffc00f

0800085c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800086a:	2317      	movs	r3, #23
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2220      	movs	r2, #32
 8000876:	5c9b      	ldrb	r3, [r3, r2]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d101      	bne.n	8000880 <HAL_DMA_Start_IT+0x24>
 800087c:	2302      	movs	r3, #2
 800087e:	e04f      	b.n	8000920 <HAL_DMA_Start_IT+0xc4>
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2220      	movs	r2, #32
 8000884:	2101      	movs	r1, #1
 8000886:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2221      	movs	r2, #33	; 0x21
 800088c:	5c9b      	ldrb	r3, [r3, r2]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b01      	cmp	r3, #1
 8000892:	d13a      	bne.n	800090a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2221      	movs	r2, #33	; 0x21
 8000898:	2102      	movs	r1, #2
 800089a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2200      	movs	r2, #0
 80008a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2101      	movs	r1, #1
 80008ae:	438a      	bics	r2, r1
 80008b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	68b9      	ldr	r1, [r7, #8]
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f000 f954 	bl	8000b66 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d008      	beq.n	80008d8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	210e      	movs	r1, #14
 80008d2:	430a      	orrs	r2, r1
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e00f      	b.n	80008f8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	210a      	movs	r1, #10
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2104      	movs	r1, #4
 80008f4:	438a      	bics	r2, r1
 80008f6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2101      	movs	r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	e007      	b.n	800091a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2220      	movs	r2, #32
 800090e:	2100      	movs	r1, #0
 8000910:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000912:	2317      	movs	r3, #23
 8000914:	18fb      	adds	r3, r7, r3
 8000916:	2202      	movs	r2, #2
 8000918:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800091a:	2317      	movs	r3, #23
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	781b      	ldrb	r3, [r3, #0]
}
 8000920:	0018      	movs	r0, r3
 8000922:	46bd      	mov	sp, r7
 8000924:	b006      	add	sp, #24
 8000926:	bd80      	pop	{r7, pc}

08000928 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2221      	movs	r2, #33	; 0x21
 8000934:	5c9b      	ldrb	r3, [r3, r2]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d008      	beq.n	800094e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2204      	movs	r2, #4
 8000940:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2220      	movs	r2, #32
 8000946:	2100      	movs	r1, #0
 8000948:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e020      	b.n	8000990 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	210e      	movs	r1, #14
 800095a:	438a      	bics	r2, r1
 800095c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	438a      	bics	r2, r1
 800096c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000976:	2101      	movs	r1, #1
 8000978:	4091      	lsls	r1, r2
 800097a:	000a      	movs	r2, r1
 800097c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2221      	movs	r2, #33	; 0x21
 8000982:	2101      	movs	r1, #1
 8000984:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2220      	movs	r2, #32
 800098a:	2100      	movs	r1, #0
 800098c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800098e:	2300      	movs	r3, #0
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}

08000998 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a0:	210f      	movs	r1, #15
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2221      	movs	r2, #33	; 0x21
 80009ac:	5c9b      	ldrb	r3, [r3, r2]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d006      	beq.n	80009c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2204      	movs	r2, #4
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	e028      	b.n	8000a14 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	210e      	movs	r1, #14
 80009ce:	438a      	bics	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	438a      	bics	r2, r1
 80009e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ea:	2101      	movs	r1, #1
 80009ec:	4091      	lsls	r1, r2
 80009ee:	000a      	movs	r2, r1
 80009f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2221      	movs	r2, #33	; 0x21
 80009f6:	2101      	movs	r1, #1
 80009f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2220      	movs	r2, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	0010      	movs	r0, r2
 8000a12:	4798      	blx	r3
    }
  }
  return status;
 8000a14:	230f      	movs	r3, #15
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	781b      	ldrb	r3, [r3, #0]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b084      	sub	sp, #16
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	2204      	movs	r2, #4
 8000a40:	409a      	lsls	r2, r3
 8000a42:	0013      	movs	r3, r2
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	4013      	ands	r3, r2
 8000a48:	d024      	beq.n	8000a94 <HAL_DMA_IRQHandler+0x72>
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	4013      	ands	r3, r2
 8000a50:	d020      	beq.n	8000a94 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2220      	movs	r2, #32
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d107      	bne.n	8000a6e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2104      	movs	r1, #4
 8000a6a:	438a      	bics	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a76:	2104      	movs	r1, #4
 8000a78:	4091      	lsls	r1, r2
 8000a7a:	000a      	movs	r2, r1
 8000a7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <HAL_DMA_IRQHandler+0x66>
 8000a86:	e06a      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	0010      	movs	r0, r2
 8000a90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000a92:	e064      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a98:	2202      	movs	r2, #2
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	d02b      	beq.n	8000afc <HAL_DMA_IRQHandler+0xda>
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d027      	beq.n	8000afc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	210a      	movs	r1, #10
 8000ac4:	438a      	bics	r2, r1
 8000ac6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2221      	movs	r2, #33	; 0x21
 8000acc:	2101      	movs	r1, #1
 8000ace:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4091      	lsls	r1, r2
 8000adc:	000a      	movs	r2, r1
 8000ade:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d036      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	0010      	movs	r0, r2
 8000af8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000afa:	e030      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	2208      	movs	r2, #8
 8000b02:	409a      	lsls	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d028      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2208      	movs	r2, #8
 8000b10:	4013      	ands	r3, r2
 8000b12:	d024      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	210e      	movs	r1, #14
 8000b20:	438a      	bics	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	4091      	lsls	r1, r2
 8000b30:	000a      	movs	r2, r1
 8000b32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2221      	movs	r2, #33	; 0x21
 8000b3e:	2101      	movs	r1, #1
 8000b40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2220      	movs	r2, #32
 8000b46:	2100      	movs	r1, #0
 8000b48:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d005      	beq.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	0010      	movs	r0, r2
 8000b5a:	4798      	blx	r3
    }
  }
}
 8000b5c:	e7ff      	b.n	8000b5e <HAL_DMA_IRQHandler+0x13c>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b004      	add	sp, #16
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b084      	sub	sp, #16
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	4091      	lsls	r1, r2
 8000b80:	000a      	movs	r2, r1
 8000b82:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	2b10      	cmp	r3, #16
 8000b92:	d108      	bne.n	8000ba6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000ba4:	e007      	b.n	8000bb6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	60da      	str	r2, [r3, #12]
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <DMA_CalcBaseAndBitshift+0x30>)
 8000bce:	4694      	mov	ip, r2
 8000bd0:	4463      	add	r3, ip
 8000bd2:	2114      	movs	r1, #20
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff faa9 	bl	800012c <__udivsi3>
 8000bda:	0003      	movs	r3, r0
 8000bdc:	009a      	lsls	r2, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a03      	ldr	r2, [pc, #12]	; (8000bf4 <DMA_CalcBaseAndBitshift+0x34>)
 8000be6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	bffdfff8 	.word	0xbffdfff8
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	603a      	str	r2, [r7, #0]
 8000c04:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c06:	2317      	movs	r3, #23
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000c0e:	2316      	movs	r3, #22
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000c16:	2315      	movs	r3, #21
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c1e:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <HAL_FLASH_Program+0x120>)
 8000c20:	7e1b      	ldrb	r3, [r3, #24]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d101      	bne.n	8000c2a <HAL_FLASH_Program+0x32>
 8000c26:	2302      	movs	r3, #2
 8000c28:	e072      	b.n	8000d10 <HAL_FLASH_Program+0x118>
 8000c2a:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <HAL_FLASH_Program+0x120>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c30:	2317      	movs	r3, #23
 8000c32:	18fe      	adds	r6, r7, r3
 8000c34:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <HAL_FLASH_Program+0x124>)
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f8c4 	bl	8000dc4 <FLASH_WaitForLastOperation>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000c40:	2317      	movs	r3, #23
 8000c42:	18fb      	adds	r3, r7, r3
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d15c      	bne.n	8000d04 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d104      	bne.n	8000c5a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c50:	2315      	movs	r3, #21
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e00b      	b.n	8000c72 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d104      	bne.n	8000c6a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c60:	2315      	movs	r3, #21
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	2202      	movs	r2, #2
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e003      	b.n	8000c72 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c6a:	2315      	movs	r3, #21
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2204      	movs	r2, #4
 8000c70:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c72:	2316      	movs	r3, #22
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e039      	b.n	8000cf0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c7c:	2116      	movs	r1, #22
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	005a      	lsls	r2, r3, #1
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	18d0      	adds	r0, r2, r3
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	011b      	lsls	r3, r3, #4
 8000c8e:	001a      	movs	r2, r3
 8000c90:	3a20      	subs	r2, #32
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	db03      	blt.n	8000c9e <HAL_FLASH_Program+0xa6>
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	40d1      	lsrs	r1, r2
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	e008      	b.n	8000cb0 <HAL_FLASH_Program+0xb8>
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	000a      	movs	r2, r1
 8000ca8:	6839      	ldr	r1, [r7, #0]
 8000caa:	40d9      	lsrs	r1, r3
 8000cac:	000c      	movs	r4, r1
 8000cae:	4314      	orrs	r4, r2
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	40da      	lsrs	r2, r3
 8000cb4:	0015      	movs	r5, r2
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	0019      	movs	r1, r3
 8000cba:	f000 f867 	bl	8000d8c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cbe:	2317      	movs	r3, #23
 8000cc0:	18fe      	adds	r6, r7, r3
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <HAL_FLASH_Program+0x124>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 f87d 	bl	8000dc4 <FLASH_WaitForLastOperation>
 8000cca:	0003      	movs	r3, r0
 8000ccc:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_FLASH_Program+0x128>)
 8000cd0:	691a      	ldr	r2, [r3, #16]
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HAL_FLASH_Program+0x128>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000cda:	2317      	movs	r3, #23
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10e      	bne.n	8000d02 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000ce4:	2116      	movs	r1, #22
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	3201      	adds	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	2316      	movs	r3, #22
 8000cf2:	18fa      	adds	r2, r7, r3
 8000cf4:	2315      	movs	r3, #21
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	7812      	ldrb	r2, [r2, #0]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d3bd      	bcc.n	8000c7c <HAL_FLASH_Program+0x84>
 8000d00:	e000      	b.n	8000d04 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000d02:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <HAL_FLASH_Program+0x120>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	761a      	strb	r2, [r3, #24]

  return status;
 8000d0a:	2317      	movs	r3, #23
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	781b      	ldrb	r3, [r3, #0]
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b007      	add	sp, #28
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d18:	20000dc8 	.word	0x20000dc8
 8000d1c:	0000c350 	.word	0x0000c350
 8000d20:	40022000 	.word	0x40022000

08000d24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_FLASH_Unlock+0x40>)
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	4013      	ands	r3, r2
 8000d38:	d00d      	beq.n	8000d56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_FLASH_Unlock+0x40>)
 8000d3c:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <HAL_FLASH_Unlock+0x44>)
 8000d3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_FLASH_Unlock+0x40>)
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_FLASH_Unlock+0x48>)
 8000d44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <HAL_FLASH_Unlock+0x40>)
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	d002      	beq.n	8000d56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	2201      	movs	r2, #1
 8000d54:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	781b      	ldrb	r3, [r3, #0]
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40022000 	.word	0x40022000
 8000d68:	45670123 	.word	0x45670123
 8000d6c:	cdef89ab 	.word	0xcdef89ab

08000d70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <HAL_FLASH_Lock+0x18>)
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <HAL_FLASH_Lock+0x18>)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	0018      	movs	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40022000 	.word	0x40022000

08000d8c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	000a      	movs	r2, r1
 8000d96:	1cbb      	adds	r3, r7, #2
 8000d98:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <FLASH_Program_HalfWord+0x30>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <FLASH_Program_HalfWord+0x34>)
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <FLASH_Program_HalfWord+0x34>)
 8000da6:	2101      	movs	r1, #1
 8000da8:	430a      	orrs	r2, r1
 8000daa:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1cba      	adds	r2, r7, #2
 8000db0:	8812      	ldrh	r2, [r2, #0]
 8000db2:	801a      	strh	r2, [r3, #0]
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000dc8 	.word	0x20000dc8
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000dcc:	f7ff fbf2 	bl	80005b4 <HAL_GetTick>
 8000dd0:	0003      	movs	r3, r0
 8000dd2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dd4:	e00f      	b.n	8000df6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	d00c      	beq.n	8000df6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <FLASH_WaitForLastOperation+0x2e>
 8000de2:	f7ff fbe7 	bl	80005b4 <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d201      	bcs.n	8000df6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000df2:	2303      	movs	r3, #3
 8000df4:	e01f      	b.n	8000e36 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000df6:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <FLASH_WaitForLastOperation+0x7c>)
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d0e9      	beq.n	8000dd6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <FLASH_WaitForLastOperation+0x7c>)
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2220      	movs	r2, #32
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b20      	cmp	r3, #32
 8000e0c:	d102      	bne.n	8000e14 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <FLASH_WaitForLastOperation+0x7c>)
 8000e10:	2220      	movs	r2, #32
 8000e12:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <FLASH_WaitForLastOperation+0x7c>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	2210      	movs	r2, #16
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b10      	cmp	r3, #16
 8000e1e:	d005      	beq.n	8000e2c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <FLASH_WaitForLastOperation+0x7c>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2204      	movs	r2, #4
 8000e26:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d103      	bne.n	8000e34 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e2c:	f000 f80a 	bl	8000e44 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e000      	b.n	8000e36 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b004      	add	sp, #16
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	40022000 	.word	0x40022000

08000e44 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <FLASH_SetErrorCode+0x58>)
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2210      	movs	r2, #16
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b10      	cmp	r3, #16
 8000e58:	d109      	bne.n	8000e6e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <FLASH_SetErrorCode+0x5c>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	2202      	movs	r2, #2
 8000e60:	431a      	orrs	r2, r3
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <FLASH_SetErrorCode+0x5c>)
 8000e64:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2210      	movs	r2, #16
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <FLASH_SetErrorCode+0x58>)
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2204      	movs	r2, #4
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b04      	cmp	r3, #4
 8000e78:	d109      	bne.n	8000e8e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <FLASH_SetErrorCode+0x5c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	431a      	orrs	r2, r3
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <FLASH_SetErrorCode+0x5c>)
 8000e84:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e8e:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <FLASH_SetErrorCode+0x58>)
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	60da      	str	r2, [r3, #12]
}  
 8000e94:	46c0      	nop			; (mov r8, r8)
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	20000dc8 	.word	0x20000dc8

08000ea4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ea4:	b5b0      	push	{r4, r5, r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000eae:	230f      	movs	r3, #15
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eba:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <HAL_FLASHEx_Erase+0xe0>)
 8000ebc:	7e1b      	ldrb	r3, [r3, #24]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_FLASHEx_Erase+0x22>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e05a      	b.n	8000f7c <HAL_FLASHEx_Erase+0xd8>
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <HAL_FLASHEx_Erase+0xe0>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d116      	bne.n	8000f02 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <HAL_FLASHEx_Erase+0xe4>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff ff74 	bl	8000dc4 <FLASH_WaitForLastOperation>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d147      	bne.n	8000f70 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000ee0:	f000 f856 	bl	8000f90 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ee4:	230f      	movs	r3, #15
 8000ee6:	18fc      	adds	r4, r7, r3
 8000ee8:	4b27      	ldr	r3, [pc, #156]	; (8000f88 <HAL_FLASHEx_Erase+0xe4>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f7ff ff6a 	bl	8000dc4 <FLASH_WaitForLastOperation>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <HAL_FLASHEx_Erase+0xe8>)
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <HAL_FLASHEx_Erase+0xe8>)
 8000efa:	2104      	movs	r1, #4
 8000efc:	438a      	bics	r2, r1
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	e036      	b.n	8000f70 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f02:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <HAL_FLASHEx_Erase+0xe4>)
 8000f04:	0018      	movs	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <FLASH_WaitForLastOperation>
 8000f0a:	1e03      	subs	r3, r0, #0
 8000f0c:	d130      	bne.n	8000f70 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2201      	movs	r2, #1
 8000f12:	4252      	negs	r2, r2
 8000f14:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	e01f      	b.n	8000f5e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 f84d 	bl	8000fc0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f26:	250f      	movs	r5, #15
 8000f28:	197c      	adds	r4, r7, r5
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_FLASHEx_Erase+0xe4>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ff49 	bl	8000dc4 <FLASH_WaitForLastOperation>
 8000f32:	0003      	movs	r3, r0
 8000f34:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_FLASHEx_Erase+0xe8>)
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_FLASHEx_Erase+0xe8>)
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	438a      	bics	r2, r1
 8000f40:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000f42:	197b      	adds	r3, r7, r5
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	601a      	str	r2, [r3, #0]
            break;
 8000f50:	e00e      	b.n	8000f70 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	00d2      	lsls	r2, r2, #3
 8000f58:	4694      	mov	ip, r2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	029a      	lsls	r2, r3, #10
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3d6      	bcc.n	8000f1e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f70:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <HAL_FLASHEx_Erase+0xe0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	761a      	strb	r2, [r3, #24]

  return status;
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b004      	add	sp, #16
 8000f82:	bdb0      	pop	{r4, r5, r7, pc}
 8000f84:	20000dc8 	.word	0x20000dc8
 8000f88:	0000c350 	.word	0x0000c350
 8000f8c:	40022000 	.word	0x40022000

08000f90 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <FLASH_MassErase+0x28>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <FLASH_MassErase+0x2c>)
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <FLASH_MassErase+0x2c>)
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fa6:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <FLASH_MassErase+0x2c>)
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <FLASH_MassErase+0x2c>)
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	611a      	str	r2, [r3, #16]
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000dc8 	.word	0x20000dc8
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <FLASH_PageErase+0x34>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <FLASH_PageErase+0x38>)
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <FLASH_PageErase+0x38>)
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <FLASH_PageErase+0x38>)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <FLASH_PageErase+0x38>)
 8000fe2:	691a      	ldr	r2, [r3, #16]
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <FLASH_PageErase+0x38>)
 8000fe6:	2140      	movs	r1, #64	; 0x40
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	611a      	str	r2, [r3, #16]
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000dc8 	.word	0x20000dc8
 8000ff8:	40022000 	.word	0x40022000

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800100a:	e14f      	b.n	80012ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2101      	movs	r1, #1
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	4013      	ands	r3, r2
 800101a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d100      	bne.n	8001024 <HAL_GPIO_Init+0x28>
 8001022:	e140      	b.n	80012a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2203      	movs	r2, #3
 800102a:	4013      	ands	r3, r2
 800102c:	2b01      	cmp	r3, #1
 800102e:	d005      	beq.n	800103c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001038:	2b02      	cmp	r3, #2
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	409a      	lsls	r2, r3
 800104a:	0013      	movs	r3, r2
 800104c:	43da      	mvns	r2, r3
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	409a      	lsls	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	43da      	mvns	r2, r3
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	2201      	movs	r2, #1
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
 8001090:	0013      	movs	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2203      	movs	r2, #3
 80010a4:	4013      	ands	r3, r2
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d017      	beq.n	80010da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	689a      	ldr	r2, [r3, #8]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	409a      	lsls	r2, r3
 80010cc:	0013      	movs	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2203      	movs	r2, #3
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d123      	bne.n	800112e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	58d3      	ldr	r3, [r2, r3]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2207      	movs	r2, #7
 80010f8:	4013      	ands	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	691a      	ldr	r2, [r3, #16]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2107      	movs	r1, #7
 8001112:	400b      	ands	r3, r1
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	6939      	ldr	r1, [r7, #16]
 800112c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	2203      	movs	r2, #3
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	43da      	mvns	r2, r3
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2203      	movs	r2, #3
 800114c:	401a      	ands	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	23c0      	movs	r3, #192	; 0xc0
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	4013      	ands	r3, r2
 800116c:	d100      	bne.n	8001170 <HAL_GPIO_Init+0x174>
 800116e:	e09a      	b.n	80012a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001170:	4b54      	ldr	r3, [pc, #336]	; (80012c4 <HAL_GPIO_Init+0x2c8>)
 8001172:	699a      	ldr	r2, [r3, #24]
 8001174:	4b53      	ldr	r3, [pc, #332]	; (80012c4 <HAL_GPIO_Init+0x2c8>)
 8001176:	2101      	movs	r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	4b51      	ldr	r3, [pc, #324]	; (80012c4 <HAL_GPIO_Init+0x2c8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	2201      	movs	r2, #1
 8001182:	4013      	ands	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001188:	4a4f      	ldr	r2, [pc, #316]	; (80012c8 <HAL_GPIO_Init+0x2cc>)
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	589b      	ldr	r3, [r3, r2]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2203      	movs	r2, #3
 800119a:	4013      	ands	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	409a      	lsls	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	43da      	mvns	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	2390      	movs	r3, #144	; 0x90
 80011b0:	05db      	lsls	r3, r3, #23
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0x1e2>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a44      	ldr	r2, [pc, #272]	; (80012cc <HAL_GPIO_Init+0x2d0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d00d      	beq.n	80011da <HAL_GPIO_Init+0x1de>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a43      	ldr	r2, [pc, #268]	; (80012d0 <HAL_GPIO_Init+0x2d4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d007      	beq.n	80011d6 <HAL_GPIO_Init+0x1da>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a42      	ldr	r2, [pc, #264]	; (80012d4 <HAL_GPIO_Init+0x2d8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d101      	bne.n	80011d2 <HAL_GPIO_Init+0x1d6>
 80011ce:	2303      	movs	r3, #3
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x1e4>
 80011de:	2300      	movs	r3, #0
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	2103      	movs	r1, #3
 80011e4:	400a      	ands	r2, r1
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_GPIO_Init+0x2cc>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	035b      	lsls	r3, r3, #13
 8001216:	4013      	ands	r3, r2
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001228:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	43da      	mvns	r2, r3
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	039b      	lsls	r3, r3, #14
 8001240:	4013      	ands	r3, r2
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001252:	4b21      	ldr	r3, [pc, #132]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	029b      	lsls	r3, r3, #10
 800126a:	4013      	ands	r3, r2
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	4013      	ands	r3, r2
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_GPIO_Init+0x2dc>)
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	40da      	lsrs	r2, r3
 80012b4:	1e13      	subs	r3, r2, #0
 80012b6:	d000      	beq.n	80012ba <HAL_GPIO_Init+0x2be>
 80012b8:	e6a8      	b.n	800100c <HAL_GPIO_Init+0x10>
  } 
}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	40010400 	.word	0x40010400

080012dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	000a      	movs	r2, r1
 80012e6:	1cbb      	adds	r3, r7, #2
 80012e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	1cba      	adds	r2, r7, #2
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	4013      	ands	r3, r2
 80012f4:	d004      	beq.n	8001300 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e003      	b.n	8001308 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
  }
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b004      	add	sp, #16
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	0008      	movs	r0, r1
 8001320:	0011      	movs	r1, r2
 8001322:	1cbb      	adds	r3, r7, #2
 8001324:	1c02      	adds	r2, r0, #0
 8001326:	801a      	strh	r2, [r3, #0]
 8001328:	1c7b      	adds	r3, r7, #1
 800132a:	1c0a      	adds	r2, r1, #0
 800132c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800132e:	1c7b      	adds	r3, r7, #1
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d004      	beq.n	8001340 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001336:	1cbb      	adds	r3, r7, #2
 8001338:	881a      	ldrh	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800133e:	e003      	b.n	8001348 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001340:	1cbb      	adds	r3, r7, #2
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b002      	add	sp, #8
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e301      	b.n	8001966 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	4013      	ands	r3, r2
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x1e>
 800136c:	e08d      	b.n	800148a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800136e:	4bc3      	ldr	r3, [pc, #780]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	220c      	movs	r2, #12
 8001374:	4013      	ands	r3, r2
 8001376:	2b04      	cmp	r3, #4
 8001378:	d00e      	beq.n	8001398 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800137a:	4bc0      	ldr	r3, [pc, #768]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	220c      	movs	r2, #12
 8001380:	4013      	ands	r3, r2
 8001382:	2b08      	cmp	r3, #8
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x64>
 8001386:	4bbd      	ldr	r3, [pc, #756]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	401a      	ands	r2, r3
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	025b      	lsls	r3, r3, #9
 8001394:	429a      	cmp	r2, r3
 8001396:	d10d      	bne.n	80013b4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	4bb8      	ldr	r3, [pc, #736]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	029b      	lsls	r3, r3, #10
 80013a0:	4013      	ands	r3, r2
 80013a2:	d100      	bne.n	80013a6 <HAL_RCC_OscConfig+0x56>
 80013a4:	e070      	b.n	8001488 <HAL_RCC_OscConfig+0x138>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d000      	beq.n	80013b0 <HAL_RCC_OscConfig+0x60>
 80013ae:	e06b      	b.n	8001488 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e2d8      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_RCC_OscConfig+0x7c>
 80013bc:	4baf      	ldr	r3, [pc, #700]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4bae      	ldr	r3, [pc, #696]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013c2:	2180      	movs	r1, #128	; 0x80
 80013c4:	0249      	lsls	r1, r1, #9
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e02f      	b.n	800142c <HAL_RCC_OscConfig+0xdc>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10c      	bne.n	80013ee <HAL_RCC_OscConfig+0x9e>
 80013d4:	4ba9      	ldr	r3, [pc, #676]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4ba8      	ldr	r3, [pc, #672]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013da:	49a9      	ldr	r1, [pc, #676]	; (8001680 <HAL_RCC_OscConfig+0x330>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4ba6      	ldr	r3, [pc, #664]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4ba5      	ldr	r3, [pc, #660]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013e6:	49a7      	ldr	r1, [pc, #668]	; (8001684 <HAL_RCC_OscConfig+0x334>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e01e      	b.n	800142c <HAL_RCC_OscConfig+0xdc>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10e      	bne.n	8001414 <HAL_RCC_OscConfig+0xc4>
 80013f6:	4ba1      	ldr	r3, [pc, #644]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4ba0      	ldr	r3, [pc, #640]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80013fc:	2180      	movs	r1, #128	; 0x80
 80013fe:	02c9      	lsls	r1, r1, #11
 8001400:	430a      	orrs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	4b9d      	ldr	r3, [pc, #628]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b9c      	ldr	r3, [pc, #624]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0249      	lsls	r1, r1, #9
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xdc>
 8001414:	4b99      	ldr	r3, [pc, #612]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b98      	ldr	r3, [pc, #608]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800141a:	4999      	ldr	r1, [pc, #612]	; (8001680 <HAL_RCC_OscConfig+0x330>)
 800141c:	400a      	ands	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	4b96      	ldr	r3, [pc, #600]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b95      	ldr	r3, [pc, #596]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001426:	4997      	ldr	r1, [pc, #604]	; (8001684 <HAL_RCC_OscConfig+0x334>)
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d014      	beq.n	800145e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff f8be 	bl	80005b4 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143e:	f7ff f8b9 	bl	80005b4 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b64      	cmp	r3, #100	; 0x64
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e28a      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001450:	4b8a      	ldr	r3, [pc, #552]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	2380      	movs	r3, #128	; 0x80
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	4013      	ands	r3, r2
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0xee>
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145e:	f7ff f8a9 	bl	80005b4 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff f8a4 	bl	80005b4 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e275      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	4b80      	ldr	r3, [pc, #512]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	029b      	lsls	r3, r3, #10
 8001482:	4013      	ands	r3, r2
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x118>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2202      	movs	r2, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x146>
 8001494:	e069      	b.n	800156a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001496:	4b79      	ldr	r3, [pc, #484]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	220c      	movs	r2, #12
 800149c:	4013      	ands	r3, r2
 800149e:	d00b      	beq.n	80014b8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014a0:	4b76      	ldr	r3, [pc, #472]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	220c      	movs	r2, #12
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d11c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x196>
 80014ac:	4b73      	ldr	r3, [pc, #460]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	4013      	ands	r3, r2
 80014b6:	d116      	bne.n	80014e6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b8:	4b70      	ldr	r3, [pc, #448]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2202      	movs	r2, #2
 80014be:	4013      	ands	r3, r2
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x17e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e24b      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b6b      	ldr	r3, [pc, #428]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	22f8      	movs	r2, #248	; 0xf8
 80014d4:	4393      	bics	r3, r2
 80014d6:	0019      	movs	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	00da      	lsls	r2, r3, #3
 80014de:	4b67      	ldr	r3, [pc, #412]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e4:	e041      	b.n	800156a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d024      	beq.n	8001538 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ee:	4b63      	ldr	r3, [pc, #396]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80014f4:	2101      	movs	r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff f85b 	bl	80005b4 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff f856 	bl	80005b4 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e227      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b59      	ldr	r3, [pc, #356]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2202      	movs	r2, #2
 800151c:	4013      	ands	r3, r2
 800151e:	d0f1      	beq.n	8001504 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001520:	4b56      	ldr	r3, [pc, #344]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	22f8      	movs	r2, #248	; 0xf8
 8001526:	4393      	bics	r3, r2
 8001528:	0019      	movs	r1, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00da      	lsls	r2, r3, #3
 8001530:	4b52      	ldr	r3, [pc, #328]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b50      	ldr	r3, [pc, #320]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b4f      	ldr	r3, [pc, #316]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800153e:	2101      	movs	r1, #1
 8001540:	438a      	bics	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff f836 	bl	80005b4 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff f831 	bl	80005b4 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e202      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001560:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d1f1      	bne.n	800154e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2208      	movs	r2, #8
 8001570:	4013      	ands	r3, r2
 8001572:	d036      	beq.n	80015e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d019      	beq.n	80015b0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001580:	4b3e      	ldr	r3, [pc, #248]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001582:	2101      	movs	r1, #1
 8001584:	430a      	orrs	r2, r1
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001588:	f7ff f814 	bl	80005b4 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff f80f 	bl	80005b4 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1e0      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a4:	4b35      	ldr	r3, [pc, #212]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d0f1      	beq.n	8001592 <HAL_RCC_OscConfig+0x242>
 80015ae:	e018      	b.n	80015e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80015b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b4:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80015b6:	2101      	movs	r1, #1
 80015b8:	438a      	bics	r2, r1
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015bc:	f7fe fffa 	bl	80005b4 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015c6:	f7fe fff5 	bl	80005b4 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1c6      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	2202      	movs	r2, #2
 80015de:	4013      	ands	r3, r2
 80015e0:	d1f1      	bne.n	80015c6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2204      	movs	r2, #4
 80015e8:	4013      	ands	r3, r2
 80015ea:	d100      	bne.n	80015ee <HAL_RCC_OscConfig+0x29e>
 80015ec:	e0b4      	b.n	8001758 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	201f      	movs	r0, #31
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	2200      	movs	r2, #0
 80015f4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	055b      	lsls	r3, r3, #21
 80015fe:	4013      	ands	r3, r2
 8001600:	d110      	bne.n	8001624 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0549      	lsls	r1, r1, #21
 800160c:	430a      	orrs	r2, r1
 800160e:	61da      	str	r2, [r3, #28]
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	055b      	lsls	r3, r3, #21
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800161e:	183b      	adds	r3, r7, r0
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_RCC_OscConfig+0x338>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4013      	ands	r3, r2
 800162e:	d11a      	bne.n	8001666 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_RCC_OscConfig+0x338>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_RCC_OscConfig+0x338>)
 8001636:	2180      	movs	r1, #128	; 0x80
 8001638:	0049      	lsls	r1, r1, #1
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7fe ffb9 	bl	80005b4 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001648:	f7fe ffb4 	bl	80005b4 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e185      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x338>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4013      	ands	r3, r2
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d10e      	bne.n	800168c <HAL_RCC_OscConfig+0x33c>
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	4b02      	ldr	r3, [pc, #8]	; (800167c <HAL_RCC_OscConfig+0x32c>)
 8001674:	2101      	movs	r1, #1
 8001676:	430a      	orrs	r2, r1
 8001678:	621a      	str	r2, [r3, #32]
 800167a:	e035      	b.n	80016e8 <HAL_RCC_OscConfig+0x398>
 800167c:	40021000 	.word	0x40021000
 8001680:	fffeffff 	.word	0xfffeffff
 8001684:	fffbffff 	.word	0xfffbffff
 8001688:	40007000 	.word	0x40007000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10c      	bne.n	80016ae <HAL_RCC_OscConfig+0x35e>
 8001694:	4bb6      	ldr	r3, [pc, #728]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001696:	6a1a      	ldr	r2, [r3, #32]
 8001698:	4bb5      	ldr	r3, [pc, #724]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800169a:	2101      	movs	r1, #1
 800169c:	438a      	bics	r2, r1
 800169e:	621a      	str	r2, [r3, #32]
 80016a0:	4bb3      	ldr	r3, [pc, #716]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016a2:	6a1a      	ldr	r2, [r3, #32]
 80016a4:	4bb2      	ldr	r3, [pc, #712]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016a6:	2104      	movs	r1, #4
 80016a8:	438a      	bics	r2, r1
 80016aa:	621a      	str	r2, [r3, #32]
 80016ac:	e01c      	b.n	80016e8 <HAL_RCC_OscConfig+0x398>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x380>
 80016b6:	4bae      	ldr	r3, [pc, #696]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	4bad      	ldr	r3, [pc, #692]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016bc:	2104      	movs	r1, #4
 80016be:	430a      	orrs	r2, r1
 80016c0:	621a      	str	r2, [r3, #32]
 80016c2:	4bab      	ldr	r3, [pc, #684]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	4baa      	ldr	r3, [pc, #680]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016c8:	2101      	movs	r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	621a      	str	r2, [r3, #32]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0x398>
 80016d0:	4ba7      	ldr	r3, [pc, #668]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	4ba6      	ldr	r3, [pc, #664]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016d6:	2101      	movs	r1, #1
 80016d8:	438a      	bics	r2, r1
 80016da:	621a      	str	r2, [r3, #32]
 80016dc:	4ba4      	ldr	r3, [pc, #656]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	4ba3      	ldr	r3, [pc, #652]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80016e2:	2104      	movs	r1, #4
 80016e4:	438a      	bics	r2, r1
 80016e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d014      	beq.n	800171a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7fe ff60 	bl	80005b4 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	e009      	b.n	800170e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7fe ff5b 	bl	80005b4 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a9b      	ldr	r2, [pc, #620]	; (8001974 <HAL_RCC_OscConfig+0x624>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e12b      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	4b98      	ldr	r3, [pc, #608]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d0f0      	beq.n	80016fa <HAL_RCC_OscConfig+0x3aa>
 8001718:	e013      	b.n	8001742 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7fe ff4b 	bl	80005b4 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001722:	e009      	b.n	8001738 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7fe ff46 	bl	80005b4 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a91      	ldr	r2, [pc, #580]	; (8001974 <HAL_RCC_OscConfig+0x624>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e116      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001738:	4b8d      	ldr	r3, [pc, #564]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	2202      	movs	r2, #2
 800173e:	4013      	ands	r3, r2
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001742:	231f      	movs	r3, #31
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d105      	bne.n	8001758 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800174c:	4b88      	ldr	r3, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800174e:	69da      	ldr	r2, [r3, #28]
 8001750:	4b87      	ldr	r3, [pc, #540]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001752:	4989      	ldr	r1, [pc, #548]	; (8001978 <HAL_RCC_OscConfig+0x628>)
 8001754:	400a      	ands	r2, r1
 8001756:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2210      	movs	r2, #16
 800175e:	4013      	ands	r3, r2
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d12a      	bne.n	80017c0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800176a:	4b81      	ldr	r3, [pc, #516]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800176c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176e:	4b80      	ldr	r3, [pc, #512]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001770:	2104      	movs	r1, #4
 8001772:	430a      	orrs	r2, r1
 8001774:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001776:	4b7e      	ldr	r3, [pc, #504]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800177a:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7fe ff17 	bl	80005b4 <HAL_GetTick>
 8001786:	0003      	movs	r3, r0
 8001788:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800178c:	f7fe ff12 	bl	80005b4 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0e3      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	2202      	movs	r2, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d0f1      	beq.n	800178c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017a8:	4b71      	ldr	r3, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	22f8      	movs	r2, #248	; 0xf8
 80017ae:	4393      	bics	r3, r2
 80017b0:	0019      	movs	r1, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	00da      	lsls	r2, r3, #3
 80017b8:	4b6d      	ldr	r3, [pc, #436]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
 80017be:	e034      	b.n	800182a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	3305      	adds	r3, #5
 80017c6:	d111      	bne.n	80017ec <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80017c8:	4b69      	ldr	r3, [pc, #420]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017ce:	2104      	movs	r1, #4
 80017d0:	438a      	bics	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017d4:	4b66      	ldr	r3, [pc, #408]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	22f8      	movs	r2, #248	; 0xf8
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	00da      	lsls	r2, r3, #3
 80017e4:	4b62      	ldr	r3, [pc, #392]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	e01e      	b.n	800182a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017ec:	4b60      	ldr	r3, [pc, #384]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017f2:	2104      	movs	r1, #4
 80017f4:	430a      	orrs	r2, r1
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017f8:	4b5d      	ldr	r3, [pc, #372]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017fc:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80017fe:	2101      	movs	r1, #1
 8001800:	438a      	bics	r2, r1
 8001802:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7fe fed6 	bl	80005b4 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800180e:	f7fe fed1 	bl	80005b4 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0a2      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d1f1      	bne.n	800180e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d100      	bne.n	8001834 <HAL_RCC_OscConfig+0x4e4>
 8001832:	e097      	b.n	8001964 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	220c      	movs	r2, #12
 800183a:	4013      	ands	r3, r2
 800183c:	2b08      	cmp	r3, #8
 800183e:	d100      	bne.n	8001842 <HAL_RCC_OscConfig+0x4f2>
 8001840:	e06b      	b.n	800191a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d14c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b48      	ldr	r3, [pc, #288]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001850:	494a      	ldr	r1, [pc, #296]	; (800197c <HAL_RCC_OscConfig+0x62c>)
 8001852:	400a      	ands	r2, r1
 8001854:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001856:	f7fe fead 	bl	80005b4 <HAL_GetTick>
 800185a:	0003      	movs	r3, r0
 800185c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7fe fea8 	bl	80005b4 <HAL_GetTick>
 8001864:	0002      	movs	r2, r0
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e079      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	049b      	lsls	r3, r3, #18
 800187a:	4013      	ands	r3, r2
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187e:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	220f      	movs	r2, #15
 8001884:	4393      	bics	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800188c:	4b38      	ldr	r3, [pc, #224]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800188e:	430a      	orrs	r2, r1
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4a3a      	ldr	r2, [pc, #232]	; (8001980 <HAL_RCC_OscConfig+0x630>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	431a      	orrs	r2, r3
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80018a8:	430a      	orrs	r2, r1
 80018aa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ac:	4b30      	ldr	r3, [pc, #192]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0449      	lsls	r1, r1, #17
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ba:	f7fe fe7b 	bl	80005b4 <HAL_GetTick>
 80018be:	0003      	movs	r3, r0
 80018c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7fe fe76 	bl	80005b4 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e047      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d6:	4b26      	ldr	r3, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	049b      	lsls	r3, r3, #18
 80018de:	4013      	ands	r3, r2
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x574>
 80018e2:	e03f      	b.n	8001964 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 80018ea:	4924      	ldr	r1, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x62c>)
 80018ec:	400a      	ands	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe fe60 	bl	80005b4 <HAL_GetTick>
 80018f4:	0003      	movs	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fa:	f7fe fe5b 	bl	80005b4 <HAL_GetTick>
 80018fe:	0002      	movs	r2, r0
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e02c      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	4b18      	ldr	r3, [pc, #96]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	049b      	lsls	r3, r3, #18
 8001914:	4013      	ands	r3, r2
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x5aa>
 8001918:	e024      	b.n	8001964 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e01f      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x620>)
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	429a      	cmp	r2, r3
 8001940:	d10e      	bne.n	8001960 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	220f      	movs	r2, #15
 8001946:	401a      	ands	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	23f0      	movs	r3, #240	; 0xf0
 8001954:	039b      	lsls	r3, r3, #14
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b008      	add	sp, #32
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40021000 	.word	0x40021000
 8001974:	00001388 	.word	0x00001388
 8001978:	efffffff 	.word	0xefffffff
 800197c:	feffffff 	.word	0xfeffffff
 8001980:	ffc2ffff 	.word	0xffc2ffff

08001984 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0b3      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d911      	bls.n	80019ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e09a      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d015      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2204      	movs	r2, #4
 80019da:	4013      	ands	r3, r2
 80019dc:	d006      	beq.n	80019ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019de:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	4b4a      	ldr	r3, [pc, #296]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 80019e4:	21e0      	movs	r1, #224	; 0xe0
 80019e6:	00c9      	lsls	r1, r1, #3
 80019e8:	430a      	orrs	r2, r1
 80019ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	22f0      	movs	r2, #240	; 0xf0
 80019f2:	4393      	bics	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d040      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b3e      	ldr	r3, [pc, #248]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d114      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06e      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	049b      	lsls	r3, r3, #18
 8001a32:	4013      	ands	r3, r2
 8001a34:	d108      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e062      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e05b      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	4393      	bics	r3, r2
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a5c:	f7fe fdaa 	bl	80005b4 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a64:	e009      	b.n	8001a7a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7fe fda5 	bl	80005b4 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_RCC_ClockConfig+0x18c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e042      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	220c      	movs	r2, #12
 8001a80:	401a      	ands	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d1ec      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d211      	bcs.n	8001abe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x184>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e020      	b.n	8001b00 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d009      	beq.n	8001adc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_RCC_ClockConfig+0x190>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001adc:	f000 f820 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 8001ae0:	0001      	movs	r1, r0
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x188>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	220f      	movs	r2, #15
 8001aea:	4013      	ands	r3, r2
 8001aec:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <HAL_RCC_ClockConfig+0x194>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	000a      	movs	r2, r1
 8001af2:	40da      	lsrs	r2, r3
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_RCC_ClockConfig+0x198>)
 8001af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7fe fd15 	bl	8000528 <HAL_InitTick>
  
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	0018      	movs	r0, r3
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b004      	add	sp, #16
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	00001388 	.word	0x00001388
 8001b14:	fffff8ff 	.word	0xfffff8ff
 8001b18:	08008a8c 	.word	0x08008a8c
 8001b1c:	20000694 	.word	0x20000694

08001b20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
 8001b32:	2300      	movs	r3, #0
 8001b34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	220c      	movs	r2, #12
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d002      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x30>
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d003      	beq.n	8001b56 <HAL_RCC_GetSysClockFreq+0x36>
 8001b4e:	e02c      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b52:	613b      	str	r3, [r7, #16]
      break;
 8001b54:	e02c      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0c9b      	lsrs	r3, r3, #18
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b60:	5cd3      	ldrb	r3, [r2, r3]
 8001b62:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	220f      	movs	r2, #15
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	4a16      	ldr	r2, [pc, #88]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	025b      	lsls	r3, r3, #9
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b7c:	68b9      	ldr	r1, [r7, #8]
 8001b7e:	4810      	ldr	r0, [pc, #64]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b80:	f7fe fad4 	bl	800012c <__udivsi3>
 8001b84:	0003      	movs	r3, r0
 8001b86:	001a      	movs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4353      	muls	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	000a      	movs	r2, r1
 8001b94:	0152      	lsls	r2, r2, #5
 8001b96:	1a52      	subs	r2, r2, r1
 8001b98:	0193      	lsls	r3, r2, #6
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	185b      	adds	r3, r3, r1
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
      break;
 8001ba8:	e002      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bac:	613b      	str	r3, [r7, #16]
      break;
 8001bae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bb0:	693b      	ldr	r3, [r7, #16]
}
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b006      	add	sp, #24
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	08008960 	.word	0x08008960
 8001bc8:	08008970 	.word	0x08008970

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	20000694 	.word	0x20000694

08001be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001be4:	f7ff fff2 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001be8:	0001      	movs	r1, r0
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bf6:	5cd3      	ldrb	r3, [r2, r3]
 8001bf8:	40d9      	lsrs	r1, r3
 8001bfa:	000b      	movs	r3, r1
}    
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40021000 	.word	0x40021000
 8001c08:	08008a9c 	.word	0x08008a9c

08001c0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e0a8      	b.n	8001d70 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	2382      	movs	r3, #130	; 0x82
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d009      	beq.n	8001c46 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
 8001c38:	e005      	b.n	8001c46 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	225d      	movs	r2, #93	; 0x5d
 8001c50:	5c9b      	ldrb	r3, [r3, r2]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d107      	bne.n	8001c68 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	225c      	movs	r2, #92	; 0x5c
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f006 fa4e 	bl	8008104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	225d      	movs	r2, #93	; 0x5d
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2140      	movs	r1, #64	; 0x40
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	23e0      	movs	r3, #224	; 0xe0
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d902      	bls.n	8001c92 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e002      	b.n	8001c98 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	015b      	lsls	r3, r3, #5
 8001c96:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	23f0      	movs	r3, #240	; 0xf0
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d008      	beq.n	8001cb6 <HAL_SPI_Init+0xaa>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	23e0      	movs	r3, #224	; 0xe0
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d002      	beq.n	8001cb6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	2382      	movs	r3, #130	; 0x82
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6899      	ldr	r1, [r3, #8]
 8001cc4:	2384      	movs	r3, #132	; 0x84
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	400b      	ands	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	400b      	ands	r3, r1
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6999      	ldr	r1, [r3, #24]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	400b      	ands	r3, r1
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	2138      	movs	r1, #56	; 0x38
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	2180      	movs	r1, #128	; 0x80
 8001cfc:	400b      	ands	r3, r1
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	0011      	movs	r1, r2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	019b      	lsls	r3, r3, #6
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	2110      	movs	r1, #16
 8001d24:	400b      	ands	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	2108      	movs	r1, #8
 8001d2e:	400b      	ands	r3, r1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68d9      	ldr	r1, [r3, #12]
 8001d36:	23f0      	movs	r3, #240	; 0xf0
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	0011      	movs	r1, r2
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	015b      	lsls	r3, r3, #5
 8001d46:	401a      	ands	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69da      	ldr	r2, [r3, #28]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4907      	ldr	r1, [pc, #28]	; (8001d78 <HAL_SPI_Init+0x16c>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	225d      	movs	r2, #93	; 0x5d
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b004      	add	sp, #16
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	fffff7ff 	.word	0xfffff7ff

08001d7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d8c:	231f      	movs	r3, #31
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	225c      	movs	r2, #92	; 0x5c
 8001d98:	5c9b      	ldrb	r3, [r3, r2]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_SPI_Transmit+0x26>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e147      	b.n	8002032 <HAL_SPI_Transmit+0x2b6>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	225c      	movs	r2, #92	; 0x5c
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001daa:	f7fe fc03 	bl	80005b4 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001db2:	2316      	movs	r3, #22
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	1dba      	adds	r2, r7, #6
 8001db8:	8812      	ldrh	r2, [r2, #0]
 8001dba:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	225d      	movs	r2, #93	; 0x5d
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d004      	beq.n	8001dd2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001dc8:	231f      	movs	r3, #31
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	2202      	movs	r2, #2
 8001dce:	701a      	strb	r2, [r3, #0]
    goto error;
 8001dd0:	e128      	b.n	8002024 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_SPI_Transmit+0x64>
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001de0:	231f      	movs	r3, #31
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
    goto error;
 8001de8:	e11c      	b.n	8002024 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	225d      	movs	r2, #93	; 0x5d
 8001dee:	2103      	movs	r1, #3
 8001df0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1dba      	adds	r2, r7, #6
 8001e02:	8812      	ldrh	r2, [r2, #0]
 8001e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1dba      	adds	r2, r7, #6
 8001e0a:	8812      	ldrh	r2, [r2, #0]
 8001e0c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2244      	movs	r2, #68	; 0x44
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2246      	movs	r2, #70	; 0x46
 8001e20:	2100      	movs	r1, #0
 8001e22:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d110      	bne.n	8001e5e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	438a      	bics	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	01c9      	lsls	r1, r1, #7
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	4013      	ands	r3, r2
 8001e68:	2b40      	cmp	r3, #64	; 0x40
 8001e6a:	d007      	beq.n	8001e7c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	23e0      	movs	r3, #224	; 0xe0
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d952      	bls.n	8001f2e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_SPI_Transmit+0x11e>
 8001e90:	2316      	movs	r3, #22
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d143      	bne.n	8001f22 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	881a      	ldrh	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	1c9a      	adds	r2, r3, #2
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001ebe:	e030      	b.n	8001f22 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d112      	bne.n	8001ef4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	881a      	ldrh	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	1c9a      	adds	r2, r3, #2
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ef2:	e016      	b.n	8001f22 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ef4:	f7fe fb5e 	bl	80005b4 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d802      	bhi.n	8001f0a <HAL_SPI_Transmit+0x18e>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_SPI_Transmit+0x194>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d108      	bne.n	8001f22 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001f10:	231f      	movs	r3, #31
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2203      	movs	r2, #3
 8001f16:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	225d      	movs	r2, #93	; 0x5d
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f20:	e080      	b.n	8002024 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1c9      	bne.n	8001ec0 <HAL_SPI_Transmit+0x144>
 8001f2c:	e053      	b.n	8001fd6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <HAL_SPI_Transmit+0x1c4>
 8001f36:	2316      	movs	r3, #22
 8001f38:	18fb      	adds	r3, r7, r3
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d145      	bne.n	8001fcc <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	330c      	adds	r3, #12
 8001f4a:	7812      	ldrb	r2, [r2, #0]
 8001f4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001f66:	e031      	b.n	8001fcc <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d113      	bne.n	8001f9e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	330c      	adds	r3, #12
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f9c:	e016      	b.n	8001fcc <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f9e:	f7fe fb09 	bl	80005b4 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d802      	bhi.n	8001fb4 <HAL_SPI_Transmit+0x238>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	d102      	bne.n	8001fba <HAL_SPI_Transmit+0x23e>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d108      	bne.n	8001fcc <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001fba:	231f      	movs	r3, #31
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	225d      	movs	r2, #93	; 0x5d
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	5499      	strb	r1, [r3, r2]
          goto error;
 8001fca:	e02b      	b.n	8002024 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1c8      	bne.n	8001f68 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fcef 	bl	80029c0 <SPI_EndRxTxTransaction>
 8001fe2:	1e03      	subs	r3, r0, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002012:	231f      	movs	r3, #31
 8002014:	18fb      	adds	r3, r7, r3
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	e003      	b.n	8002024 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	225d      	movs	r2, #93	; 0x5d
 8002020:	2101      	movs	r1, #1
 8002022:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	225c      	movs	r2, #92	; 0x5c
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800202c:	231f      	movs	r3, #31
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	781b      	ldrb	r3, [r3, #0]
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b008      	add	sp, #32
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b089      	sub	sp, #36	; 0x24
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	1dbb      	adds	r3, r7, #6
 800204a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800204c:	2117      	movs	r1, #23
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	225d      	movs	r2, #93	; 0x5d
 8002058:	5c9b      	ldrb	r3, [r3, r2]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d003      	beq.n	8002068 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
    goto error;
 8002066:	e12b      	b.n	80022c0 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	2382      	movs	r3, #130	; 0x82
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	429a      	cmp	r2, r3
 8002072:	d113      	bne.n	800209c <HAL_SPI_Receive+0x60>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10f      	bne.n	800209c <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	225d      	movs	r2, #93	; 0x5d
 8002080:	2104      	movs	r1, #4
 8002082:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002084:	1dbb      	adds	r3, r7, #6
 8002086:	881c      	ldrh	r4, [r3, #0]
 8002088:	68ba      	ldr	r2, [r7, #8]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	0023      	movs	r3, r4
 8002094:	f000 f924 	bl	80022e0 <HAL_SPI_TransmitReceive>
 8002098:	0003      	movs	r3, r0
 800209a:	e118      	b.n	80022ce <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	225c      	movs	r2, #92	; 0x5c
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_SPI_Receive+0x6e>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e111      	b.n	80022ce <HAL_SPI_Receive+0x292>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	225c      	movs	r2, #92	; 0x5c
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020b2:	f7fe fa7f 	bl	80005b4 <HAL_GetTick>
 80020b6:	0003      	movs	r3, r0
 80020b8:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_SPI_Receive+0x8c>
 80020c0:	1dbb      	adds	r3, r7, #6
 80020c2:	881b      	ldrh	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d104      	bne.n	80020d2 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 80020c8:	2317      	movs	r3, #23
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80020d0:	e0f6      	b.n	80022c0 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	225d      	movs	r2, #93	; 0x5d
 80020d6:	2104      	movs	r1, #4
 80020d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1dba      	adds	r2, r7, #6
 80020ea:	2144      	movs	r1, #68	; 0x44
 80020ec:	8812      	ldrh	r2, [r2, #0]
 80020ee:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1dba      	adds	r2, r7, #6
 80020f4:	2146      	movs	r1, #70	; 0x46
 80020f6:	8812      	ldrh	r2, [r2, #0]
 80020f8:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	23e0      	movs	r3, #224	; 0xe0
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	429a      	cmp	r2, r3
 8002122:	d908      	bls.n	8002136 <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	496a      	ldr	r1, [pc, #424]	; (80022d8 <HAL_SPI_Receive+0x29c>)
 8002130:	400a      	ands	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	e008      	b.n	8002148 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0149      	lsls	r1, r1, #5
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	429a      	cmp	r2, r3
 8002152:	d10f      	bne.n	8002174 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2140      	movs	r1, #64	; 0x40
 8002160:	438a      	bics	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	495b      	ldr	r1, [pc, #364]	; (80022dc <HAL_SPI_Receive+0x2a0>)
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2240      	movs	r2, #64	; 0x40
 800217c:	4013      	ands	r3, r2
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d007      	beq.n	8002192 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	23e0      	movs	r3, #224	; 0xe0
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	429a      	cmp	r2, r3
 800219c:	d900      	bls.n	80021a0 <HAL_SPI_Receive+0x164>
 800219e:	e071      	b.n	8002284 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021a0:	e035      	b.n	800220e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2201      	movs	r2, #1
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d117      	bne.n	80021e0 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	001a      	movs	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2246      	movs	r2, #70	; 0x46
 80021d0:	5a9b      	ldrh	r3, [r3, r2]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b299      	uxth	r1, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2246      	movs	r2, #70	; 0x46
 80021dc:	5299      	strh	r1, [r3, r2]
 80021de:	e016      	b.n	800220e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e0:	f7fe f9e8 	bl	80005b4 <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d802      	bhi.n	80021f6 <HAL_SPI_Receive+0x1ba>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	d102      	bne.n	80021fc <HAL_SPI_Receive+0x1c0>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 80021fc:	2317      	movs	r3, #23
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2203      	movs	r2, #3
 8002202:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	225d      	movs	r2, #93	; 0x5d
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]
          goto error;
 800220c:	e058      	b.n	80022c0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2246      	movs	r2, #70	; 0x46
 8002212:	5a9b      	ldrh	r3, [r3, r2]
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1c3      	bne.n	80021a2 <HAL_SPI_Receive+0x166>
 800221a:	e039      	b.n	8002290 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2201      	movs	r2, #1
 8002224:	4013      	ands	r3, r2
 8002226:	2b01      	cmp	r3, #1
 8002228:	d115      	bne.n	8002256 <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	b292      	uxth	r2, r2
 8002236:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	1c9a      	adds	r2, r3, #2
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2246      	movs	r2, #70	; 0x46
 8002246:	5a9b      	ldrh	r3, [r3, r2]
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b299      	uxth	r1, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2246      	movs	r2, #70	; 0x46
 8002252:	5299      	strh	r1, [r3, r2]
 8002254:	e016      	b.n	8002284 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002256:	f7fe f9ad 	bl	80005b4 <HAL_GetTick>
 800225a:	0002      	movs	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	d802      	bhi.n	800226c <HAL_SPI_Receive+0x230>
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	d102      	bne.n	8002272 <HAL_SPI_Receive+0x236>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d108      	bne.n	8002284 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002272:	2317      	movs	r3, #23
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	225d      	movs	r2, #93	; 0x5d
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
          goto error;
 8002282:	e01d      	b.n	80022c0 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2246      	movs	r2, #70	; 0x46
 8002288:	5a9b      	ldrh	r3, [r3, r2]
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1c5      	bne.n	800221c <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	0018      	movs	r0, r3
 8002298:	f000 fb34 	bl	8002904 <SPI_EndRxTransaction>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d002      	beq.n	80022a6 <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d004      	beq.n	80022b8 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80022ae:	2317      	movs	r3, #23
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e003      	b.n	80022c0 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	225d      	movs	r2, #93	; 0x5d
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	225c      	movs	r2, #92	; 0x5c
 80022c4:	2100      	movs	r1, #0
 80022c6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022c8:	2317      	movs	r3, #23
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	781b      	ldrb	r3, [r3, #0]
}
 80022ce:	0018      	movs	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b007      	add	sp, #28
 80022d4:	bd90      	pop	{r4, r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	ffffefff 	.word	0xffffefff
 80022dc:	ffffbfff 	.word	0xffffbfff

080022e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	001a      	movs	r2, r3
 80022ee:	1cbb      	adds	r3, r7, #2
 80022f0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022f2:	2301      	movs	r3, #1
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022f6:	2323      	movs	r3, #35	; 0x23
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	225c      	movs	r2, #92	; 0x5c
 8002302:	5c9b      	ldrb	r3, [r3, r2]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_SPI_TransmitReceive+0x2c>
 8002308:	2302      	movs	r3, #2
 800230a:	e1c4      	b.n	8002696 <HAL_SPI_TransmitReceive+0x3b6>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	225c      	movs	r2, #92	; 0x5c
 8002310:	2101      	movs	r1, #1
 8002312:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002314:	f7fe f94e 	bl	80005b4 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800231c:	201b      	movs	r0, #27
 800231e:	183b      	adds	r3, r7, r0
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	215d      	movs	r1, #93	; 0x5d
 8002324:	5c52      	ldrb	r2, [r2, r1]
 8002326:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800232e:	2312      	movs	r3, #18
 8002330:	18fb      	adds	r3, r7, r3
 8002332:	1cba      	adds	r2, r7, #2
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002338:	183b      	adds	r3, r7, r0
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d011      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x84>
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	2382      	movs	r3, #130	; 0x82
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	429a      	cmp	r2, r3
 8002348:	d107      	bne.n	800235a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d103      	bne.n	800235a <HAL_SPI_TransmitReceive+0x7a>
 8002352:	183b      	adds	r3, r7, r0
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b04      	cmp	r3, #4
 8002358:	d004      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800235a:	2323      	movs	r3, #35	; 0x23
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
    goto error;
 8002362:	e191      	b.n	8002688 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x98>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x98>
 8002370:	1cbb      	adds	r3, r7, #2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002378:	2323      	movs	r3, #35	; 0x23
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002380:	e182      	b.n	8002688 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	225d      	movs	r2, #93	; 0x5d
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b04      	cmp	r3, #4
 800238c:	d003      	beq.n	8002396 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	225d      	movs	r2, #93	; 0x5d
 8002392:	2105      	movs	r1, #5
 8002394:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1cba      	adds	r2, r7, #2
 80023a6:	2146      	movs	r1, #70	; 0x46
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1cba      	adds	r2, r7, #2
 80023b0:	2144      	movs	r1, #68	; 0x44
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1cba      	adds	r2, r7, #2
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1cba      	adds	r2, r7, #2
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	23e0      	movs	r3, #224	; 0xe0
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d908      	bls.n	80023f6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	49ac      	ldr	r1, [pc, #688]	; (80026a0 <HAL_SPI_TransmitReceive+0x3c0>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	e008      	b.n	8002408 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0149      	lsls	r1, r1, #5
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2240      	movs	r2, #64	; 0x40
 8002410:	4013      	ands	r3, r2
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d007      	beq.n	8002426 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2140      	movs	r1, #64	; 0x40
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	23e0      	movs	r3, #224	; 0xe0
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	429a      	cmp	r2, r3
 8002430:	d800      	bhi.n	8002434 <HAL_SPI_TransmitReceive+0x154>
 8002432:	e083      	b.n	800253c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x168>
 800243c:	2312      	movs	r3, #18
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d000      	beq.n	8002448 <HAL_SPI_TransmitReceive+0x168>
 8002446:	e06d      	b.n	8002524 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	881a      	ldrh	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	1c9a      	adds	r2, r3, #2
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800246c:	e05a      	b.n	8002524 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	2202      	movs	r2, #2
 8002476:	4013      	ands	r3, r2
 8002478:	2b02      	cmp	r3, #2
 800247a:	d11b      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x1d4>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002480:	b29b      	uxth	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_SPI_TransmitReceive+0x1d4>
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	2b01      	cmp	r3, #1
 800248a:	d113      	bne.n	80024b4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249c:	1c9a      	adds	r2, r3, #2
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2201      	movs	r2, #1
 80024bc:	4013      	ands	r3, r2
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d11c      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x21c>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2246      	movs	r2, #70	; 0x46
 80024c6:	5a9b      	ldrh	r3, [r3, r2]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	b292      	uxth	r2, r2
 80024da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	1c9a      	adds	r2, r3, #2
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2246      	movs	r2, #70	; 0x46
 80024ea:	5a9b      	ldrh	r3, [r3, r2]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b299      	uxth	r1, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2246      	movs	r2, #70	; 0x46
 80024f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024f8:	2301      	movs	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024fc:	f7fe f85a 	bl	80005b4 <HAL_GetTick>
 8002500:	0002      	movs	r2, r0
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002508:	429a      	cmp	r2, r3
 800250a:	d80b      	bhi.n	8002524 <HAL_SPI_TransmitReceive+0x244>
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	3301      	adds	r3, #1
 8002510:	d008      	beq.n	8002524 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002512:	2323      	movs	r3, #35	; 0x23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2203      	movs	r2, #3
 8002518:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	225d      	movs	r2, #93	; 0x5d
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
        goto error;
 8002522:	e0b1      	b.n	8002688 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d19f      	bne.n	800246e <HAL_SPI_TransmitReceive+0x18e>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2246      	movs	r2, #70	; 0x46
 8002532:	5a9b      	ldrh	r3, [r3, r2]
 8002534:	b29b      	uxth	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d199      	bne.n	800246e <HAL_SPI_TransmitReceive+0x18e>
 800253a:	e089      	b.n	8002650 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x270>
 8002544:	2312      	movs	r3, #18
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d000      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x270>
 800254e:	e074      	b.n	800263a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002576:	e060      	b.n	800263a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2202      	movs	r2, #2
 8002580:	4013      	ands	r3, r2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d11c      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x2e0>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_SPI_TransmitReceive+0x2e0>
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	2b01      	cmp	r3, #1
 8002594:	d114      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	7812      	ldrb	r2, [r2, #0]
 80025a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d11e      	bne.n	800260c <HAL_SPI_TransmitReceive+0x32c>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2246      	movs	r2, #70	; 0x46
 80025d2:	5a9b      	ldrh	r3, [r3, r2]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d018      	beq.n	800260c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	001a      	movs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2246      	movs	r2, #70	; 0x46
 80025fa:	5a9b      	ldrh	r3, [r3, r2]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b299      	uxth	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2246      	movs	r2, #70	; 0x46
 8002606:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002608:	2301      	movs	r3, #1
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800260c:	f7fd ffd2 	bl	80005b4 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002618:	429a      	cmp	r2, r3
 800261a:	d802      	bhi.n	8002622 <HAL_SPI_TransmitReceive+0x342>
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	3301      	adds	r3, #1
 8002620:	d102      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x348>
 8002622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002624:	2b00      	cmp	r3, #0
 8002626:	d108      	bne.n	800263a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002628:	2323      	movs	r3, #35	; 0x23
 800262a:	18fb      	adds	r3, r7, r3
 800262c:	2203      	movs	r2, #3
 800262e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	225d      	movs	r2, #93	; 0x5d
 8002634:	2101      	movs	r1, #1
 8002636:	5499      	strb	r1, [r3, r2]
        goto error;
 8002638:	e026      	b.n	8002688 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d199      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x298>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2246      	movs	r2, #70	; 0x46
 8002648:	5a9b      	ldrh	r3, [r3, r2]
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d193      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0018      	movs	r0, r3
 8002658:	f000 f9b2 	bl	80029c0 <SPI_EndRxTxTransaction>
 800265c:	1e03      	subs	r3, r0, #0
 800265e:	d006      	beq.n	800266e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002660:	2323      	movs	r3, #35	; 0x23
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2220      	movs	r2, #32
 800266c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	2b00      	cmp	r3, #0
 8002674:	d004      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8002676:	2323      	movs	r3, #35	; 0x23
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
 800267e:	e003      	b.n	8002688 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	225d      	movs	r2, #93	; 0x5d
 8002684:	2101      	movs	r1, #1
 8002686:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	225c      	movs	r2, #92	; 0x5c
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002690:	2323      	movs	r3, #35	; 0x23
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b00a      	add	sp, #40	; 0x28
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	ffffefff 	.word	0xffffefff

080026a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	1dfb      	adds	r3, r7, #7
 80026b2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026b4:	f7fd ff7e 	bl	80005b4 <HAL_GetTick>
 80026b8:	0002      	movs	r2, r0
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	18d3      	adds	r3, r2, r3
 80026c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026c4:	f7fd ff76 	bl	80005b4 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026cc:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	015b      	lsls	r3, r3, #5
 80026d2:	0d1b      	lsrs	r3, r3, #20
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	4353      	muls	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026da:	e058      	b.n	800278e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	d055      	beq.n	800278e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026e2:	f7fd ff67 	bl	80005b4 <HAL_GetTick>
 80026e6:	0002      	movs	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d902      	bls.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d142      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	21e0      	movs	r1, #224	; 0xe0
 8002704:	438a      	bics	r2, r1
 8002706:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	2382      	movs	r3, #130	; 0x82
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	429a      	cmp	r2, r3
 8002712:	d113      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	021b      	lsls	r3, r3, #8
 800271c:	429a      	cmp	r2, r3
 800271e:	d005      	beq.n	800272c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	429a      	cmp	r2, r3
 800272a:	d107      	bne.n	800273c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2140      	movs	r1, #64	; 0x40
 8002738:	438a      	bics	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	019b      	lsls	r3, r3, #6
 8002744:	429a      	cmp	r2, r3
 8002746:	d110      	bne.n	800276a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	491a      	ldr	r1, [pc, #104]	; (80027bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002754:	400a      	ands	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	0189      	lsls	r1, r1, #6
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	225d      	movs	r2, #93	; 0x5d
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	225c      	movs	r2, #92	; 0x5c
 8002776:	2100      	movs	r1, #0
 8002778:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e017      	b.n	80027ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3b01      	subs	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	425a      	negs	r2, r3
 800279e:	4153      	adcs	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	001a      	movs	r2, r3
 80027a4:	1dfb      	adds	r3, r7, #7
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d197      	bne.n	80026dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b008      	add	sp, #32
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000694 	.word	0x20000694
 80027bc:	ffffdfff 	.word	0xffffdfff

080027c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80027ce:	2317      	movs	r3, #23
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027d6:	f7fd feed 	bl	80005b4 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	1a9b      	subs	r3, r3, r2
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	18d3      	adds	r3, r2, r3
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80027e6:	f7fd fee5 	bl	80005b4 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	0013      	movs	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	00da      	lsls	r2, r3, #3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	0d1b      	lsrs	r3, r3, #20
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	4353      	muls	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800280c:	e068      	b.n	80028e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	23c0      	movs	r3, #192	; 0xc0
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	429a      	cmp	r2, r3
 8002816:	d10a      	bne.n	800282e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d107      	bne.n	800282e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	2117      	movs	r1, #23
 8002826:	187b      	adds	r3, r7, r1
 8002828:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800282a:	187b      	adds	r3, r7, r1
 800282c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	3301      	adds	r3, #1
 8002832:	d055      	beq.n	80028e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002834:	f7fd febe 	bl	80005b4 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	429a      	cmp	r2, r3
 8002842:	d902      	bls.n	800284a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	d142      	bne.n	80028d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	21e0      	movs	r1, #224	; 0xe0
 8002856:	438a      	bics	r2, r1
 8002858:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	2382      	movs	r3, #130	; 0x82
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	429a      	cmp	r2, r3
 8002864:	d113      	bne.n	800288e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	429a      	cmp	r2, r3
 8002870:	d005      	beq.n	800287e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	429a      	cmp	r2, r3
 800287c:	d107      	bne.n	800288e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	438a      	bics	r2, r1
 800288c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	429a      	cmp	r2, r3
 8002898:	d110      	bne.n	80028bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4916      	ldr	r1, [pc, #88]	; (8002900 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	0189      	lsls	r1, r1, #6
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	225d      	movs	r2, #93	; 0x5d
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	225c      	movs	r2, #92	; 0x5c
 80028c8:	2100      	movs	r1, #0
 80028ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e010      	b.n	80028f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	3b01      	subs	r3, #1
 80028de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d18e      	bne.n	800280e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b00a      	add	sp, #40	; 0x28
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	20000694 	.word	0x20000694
 8002900:	ffffdfff 	.word	0xffffdfff

08002904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af02      	add	r7, sp, #8
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	2382      	movs	r3, #130	; 0x82
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	429a      	cmp	r2, r3
 800291a:	d113      	bne.n	8002944 <SPI_EndRxTransaction+0x40>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	429a      	cmp	r2, r3
 8002926:	d005      	beq.n	8002934 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2140      	movs	r1, #64	; 0x40
 8002940:	438a      	bics	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	0013      	movs	r3, r2
 800294e:	2200      	movs	r2, #0
 8002950:	2180      	movs	r1, #128	; 0x80
 8002952:	f7ff fea7 	bl	80026a4 <SPI_WaitFlagStateUntilTimeout>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d007      	beq.n	800296a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	2220      	movs	r2, #32
 8002960:	431a      	orrs	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e026      	b.n	80029b8 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	2382      	movs	r3, #130	; 0x82
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	429a      	cmp	r2, r3
 8002974:	d11f      	bne.n	80029b6 <SPI_EndRxTransaction+0xb2>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	429a      	cmp	r2, r3
 8002980:	d005      	beq.n	800298e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	2380      	movs	r3, #128	; 0x80
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	429a      	cmp	r2, r3
 800298c:	d113      	bne.n	80029b6 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	23c0      	movs	r3, #192	; 0xc0
 8002992:	00d9      	lsls	r1, r3, #3
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	0013      	movs	r3, r2
 800299c:	2200      	movs	r2, #0
 800299e:	f7ff ff0f 	bl	80027c0 <SPI_WaitFifoStateUntilTimeout>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d007      	beq.n	80029b6 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	2220      	movs	r2, #32
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e000      	b.n	80029b8 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bd80      	pop	{r7, pc}

080029c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	0159      	lsls	r1, r3, #5
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	0013      	movs	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	f7ff fef0 	bl	80027c0 <SPI_WaitFifoStateUntilTimeout>
 80029e0:	1e03      	subs	r3, r0, #0
 80029e2:	d007      	beq.n	80029f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e8:	2220      	movs	r2, #32
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e027      	b.n	8002a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	0013      	movs	r3, r2
 80029fe:	2200      	movs	r2, #0
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	f7ff fe4f 	bl	80026a4 <SPI_WaitFlagStateUntilTimeout>
 8002a06:	1e03      	subs	r3, r0, #0
 8002a08:	d007      	beq.n	8002a1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	2220      	movs	r2, #32
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e014      	b.n	8002a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	23c0      	movs	r3, #192	; 0xc0
 8002a1e:	00d9      	lsls	r1, r3, #3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	0013      	movs	r3, r2
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f7ff fec9 	bl	80027c0 <SPI_WaitFifoStateUntilTimeout>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d007      	beq.n	8002a42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	2220      	movs	r2, #32
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e000      	b.n	8002a44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	0018      	movs	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b004      	add	sp, #16
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e042      	b.n	8002ae4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223d      	movs	r2, #61	; 0x3d
 8002a62:	5c9b      	ldrb	r3, [r3, r2]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	223c      	movs	r2, #60	; 0x3c
 8002a6e:	2100      	movs	r1, #0
 8002a70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f005 fb91 	bl	800819c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	223d      	movs	r2, #61	; 0x3d
 8002a7e:	2102      	movs	r1, #2
 8002a80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	0010      	movs	r0, r2
 8002a8e:	f000 f9dd 	bl	8002e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2246      	movs	r2, #70	; 0x46
 8002a96:	2101      	movs	r1, #1
 8002a98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223e      	movs	r2, #62	; 0x3e
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	5499      	strb	r1, [r3, r2]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223f      	movs	r2, #63	; 0x3f
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	5499      	strb	r1, [r3, r2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2240      	movs	r2, #64	; 0x40
 8002aae:	2101      	movs	r1, #1
 8002ab0:	5499      	strb	r1, [r3, r2]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2241      	movs	r2, #65	; 0x41
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2242      	movs	r2, #66	; 0x42
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2243      	movs	r2, #67	; 0x43
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5499      	strb	r1, [r3, r2]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2244      	movs	r2, #68	; 0x44
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2245      	movs	r2, #69	; 0x45
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223d      	movs	r2, #61	; 0x3d
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	223d      	movs	r2, #61	; 0x3d
 8002af8:	5c9b      	ldrb	r3, [r3, r2]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d001      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e035      	b.n	8002b70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	223d      	movs	r2, #61	; 0x3d
 8002b08:	2102      	movs	r1, #2
 8002b0a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2101      	movs	r1, #1
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a15      	ldr	r2, [pc, #84]	; (8002b78 <HAL_TIM_Base_Start_IT+0x8c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d009      	beq.n	8002b3a <HAL_TIM_Base_Start_IT+0x4e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_TIM_Base_Start_IT+0x90>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d004      	beq.n	8002b3a <HAL_TIM_Base_Start_IT+0x4e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <HAL_TIM_Base_Start_IT+0x94>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d111      	bne.n	8002b5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2207      	movs	r2, #7
 8002b42:	4013      	ands	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b06      	cmp	r3, #6
 8002b4a:	d010      	beq.n	8002b6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5c:	e007      	b.n	8002b6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2101      	movs	r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	0018      	movs	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40014000 	.word	0x40014000

08002b84 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2101      	movs	r1, #1
 8002b98:	438a      	bics	r2, r1
 8002b9a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_TIM_Base_Stop_IT+0x54>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_TIM_Base_Stop_IT+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a0b      	ldr	r2, [pc, #44]	; (8002bdc <HAL_TIM_Base_Stop_IT+0x58>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_Base_Stop_IT+0x40>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	223d      	movs	r2, #61	; 0x3d
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	00001111 	.word	0x00001111
 8002bdc:	00000444 	.word	0x00000444

08002be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d124      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d11d      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4252      	negs	r2, r2
 8002c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 f8fa 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002c28:	e007      	b.n	8002c3a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f000 f8ed 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	0018      	movs	r0, r3
 8002c36:	f000 f8f9 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2204      	movs	r2, #4
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d125      	bne.n	8002c9a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2204      	movs	r2, #4
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d11e      	bne.n	8002c9a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2205      	movs	r2, #5
 8002c62:	4252      	negs	r2, r2
 8002c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	23c0      	movs	r3, #192	; 0xc0
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f8cd 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 f8c0 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f8cc 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d124      	bne.n	8002cf2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2208      	movs	r2, #8
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d11d      	bne.n	8002cf2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2209      	movs	r2, #9
 8002cbc:	4252      	negs	r2, r2
 8002cbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f000 f8a1 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002cda:	e007      	b.n	8002cec <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f894 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f8a0 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2210      	movs	r2, #16
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d125      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2210      	movs	r2, #16
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d11e      	bne.n	8002d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2211      	movs	r2, #17
 8002d14:	4252      	negs	r2, r2
 8002d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2208      	movs	r2, #8
 8002d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69da      	ldr	r2, [r3, #28]
 8002d24:	23c0      	movs	r3, #192	; 0xc0
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d004      	beq.n	8002d36 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f874 	bl	8002e1c <HAL_TIM_IC_CaptureCallback>
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f867 	bl	8002e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 f873 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10f      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	4252      	negs	r2, r2
 8002d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f005 f8b3 	bl	8007ee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b80      	cmp	r3, #128	; 0x80
 8002d86:	d10f      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d108      	bne.n	8002da8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2281      	movs	r2, #129	; 0x81
 8002d9c:	4252      	negs	r2, r2
 8002d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f8d0 	bl	8002f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	4013      	ands	r3, r2
 8002db2:	2b40      	cmp	r3, #64	; 0x40
 8002db4:	d10f      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2240      	movs	r2, #64	; 0x40
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d108      	bne.n	8002dd6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2241      	movs	r2, #65	; 0x41
 8002dca:	4252      	negs	r2, r2
 8002dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 f833 	bl	8002e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d10f      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d108      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2221      	movs	r2, #33	; 0x21
 8002df8:	4252      	negs	r2, r2
 8002dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f89a 	bl	8002f38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e24:	46c0      	nop			; (mov r8, r8)
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b002      	add	sp, #8
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a2f      	ldr	r2, [pc, #188]	; (8002f1c <TIM_Base_SetConfig+0xd0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_Base_SetConfig+0x20>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a2e      	ldr	r2, [pc, #184]	; (8002f20 <TIM_Base_SetConfig+0xd4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d108      	bne.n	8002e7e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2270      	movs	r2, #112	; 0x70
 8002e70:	4393      	bics	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a26      	ldr	r2, [pc, #152]	; (8002f1c <TIM_Base_SetConfig+0xd0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <TIM_Base_SetConfig+0x62>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <TIM_Base_SetConfig+0xd4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00f      	beq.n	8002eae <TIM_Base_SetConfig+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a24      	ldr	r2, [pc, #144]	; (8002f24 <TIM_Base_SetConfig+0xd8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d00b      	beq.n	8002eae <TIM_Base_SetConfig+0x62>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <TIM_Base_SetConfig+0xdc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d007      	beq.n	8002eae <TIM_Base_SetConfig+0x62>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <TIM_Base_SetConfig+0xe0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d003      	beq.n	8002eae <TIM_Base_SetConfig+0x62>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <TIM_Base_SetConfig+0xe4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d108      	bne.n	8002ec0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <TIM_Base_SetConfig+0xe8>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a0c      	ldr	r2, [pc, #48]	; (8002f1c <TIM_Base_SetConfig+0xd0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00b      	beq.n	8002f06 <TIM_Base_SetConfig+0xba>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <TIM_Base_SetConfig+0xdc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d007      	beq.n	8002f06 <TIM_Base_SetConfig+0xba>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <TIM_Base_SetConfig+0xe0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0xba>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <TIM_Base_SetConfig+0xe4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d103      	bne.n	8002f0e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	615a      	str	r2, [r3, #20]
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40002000 	.word	0x40002000
 8002f28:	40014000 	.word	0x40014000
 8002f2c:	40014400 	.word	0x40014400
 8002f30:	40014800 	.word	0x40014800
 8002f34:	fffffcff 	.word	0xfffffcff

08002f38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e044      	b.n	8002ff4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d107      	bne.n	8002f82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2278      	movs	r2, #120	; 0x78
 8002f76:	2100      	movs	r1, #0
 8002f78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f005 f933 	bl	80081e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2224      	movs	r2, #36	; 0x24
 8002f86:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2101      	movs	r1, #1
 8002f94:	438a      	bics	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fb10 	bl	80035c0 <UART_SetConfig>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e024      	b.n	8002ff4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fc43 	bl	8003840 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	490d      	ldr	r1, [pc, #52]	; (8002ffc <HAL_UART_Init+0xa4>)
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2108      	movs	r1, #8
 8002fd6:	438a      	bics	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	0018      	movs	r0, r3
 8002fee:	f000 fcdb 	bl	80039a8 <UART_CheckIdleState>
 8002ff2:	0003      	movs	r3, r0
}
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	fffff7ff 	.word	0xfffff7ff

08003000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b0ab      	sub	sp, #172	; 0xac
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	22a4      	movs	r2, #164	; 0xa4
 8003010:	18b9      	adds	r1, r7, r2
 8003012:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	20a0      	movs	r0, #160	; 0xa0
 800301c:	1839      	adds	r1, r7, r0
 800301e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	219c      	movs	r1, #156	; 0x9c
 8003028:	1879      	adds	r1, r7, r1
 800302a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800302c:	0011      	movs	r1, r2
 800302e:	18bb      	adds	r3, r7, r2
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a99      	ldr	r2, [pc, #612]	; (8003298 <HAL_UART_IRQHandler+0x298>)
 8003034:	4013      	ands	r3, r2
 8003036:	2298      	movs	r2, #152	; 0x98
 8003038:	18bc      	adds	r4, r7, r2
 800303a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800303c:	18bb      	adds	r3, r7, r2
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d114      	bne.n	800306e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003044:	187b      	adds	r3, r7, r1
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2220      	movs	r2, #32
 800304a:	4013      	ands	r3, r2
 800304c:	d00f      	beq.n	800306e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800304e:	183b      	adds	r3, r7, r0
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2220      	movs	r2, #32
 8003054:	4013      	ands	r3, r2
 8003056:	d00a      	beq.n	800306e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800305c:	2b00      	cmp	r3, #0
 800305e:	d100      	bne.n	8003062 <HAL_UART_IRQHandler+0x62>
 8003060:	e286      	b.n	8003570 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	0010      	movs	r0, r2
 800306a:	4798      	blx	r3
      }
      return;
 800306c:	e280      	b.n	8003570 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800306e:	2398      	movs	r3, #152	; 0x98
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d100      	bne.n	800307a <HAL_UART_IRQHandler+0x7a>
 8003078:	e114      	b.n	80032a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800307a:	239c      	movs	r3, #156	; 0x9c
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2201      	movs	r2, #1
 8003082:	4013      	ands	r3, r2
 8003084:	d106      	bne.n	8003094 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003086:	23a0      	movs	r3, #160	; 0xa0
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a83      	ldr	r2, [pc, #524]	; (800329c <HAL_UART_IRQHandler+0x29c>)
 800308e:	4013      	ands	r3, r2
 8003090:	d100      	bne.n	8003094 <HAL_UART_IRQHandler+0x94>
 8003092:	e107      	b.n	80032a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003094:	23a4      	movs	r3, #164	; 0xa4
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d012      	beq.n	80030c6 <HAL_UART_IRQHandler+0xc6>
 80030a0:	23a0      	movs	r3, #160	; 0xa0
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2201      	movs	r2, #1
 80030b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2284      	movs	r2, #132	; 0x84
 80030ba:	589b      	ldr	r3, [r3, r2]
 80030bc:	2201      	movs	r2, #1
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2184      	movs	r1, #132	; 0x84
 80030c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030c6:	23a4      	movs	r3, #164	; 0xa4
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2202      	movs	r2, #2
 80030ce:	4013      	ands	r3, r2
 80030d0:	d011      	beq.n	80030f6 <HAL_UART_IRQHandler+0xf6>
 80030d2:	239c      	movs	r3, #156	; 0x9c
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2202      	movs	r2, #2
 80030e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2284      	movs	r2, #132	; 0x84
 80030ea:	589b      	ldr	r3, [r3, r2]
 80030ec:	2204      	movs	r2, #4
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2184      	movs	r1, #132	; 0x84
 80030f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f6:	23a4      	movs	r3, #164	; 0xa4
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2204      	movs	r2, #4
 80030fe:	4013      	ands	r3, r2
 8003100:	d011      	beq.n	8003126 <HAL_UART_IRQHandler+0x126>
 8003102:	239c      	movs	r3, #156	; 0x9c
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	4013      	ands	r3, r2
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2204      	movs	r2, #4
 8003114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2284      	movs	r2, #132	; 0x84
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2202      	movs	r2, #2
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2184      	movs	r1, #132	; 0x84
 8003124:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003126:	23a4      	movs	r3, #164	; 0xa4
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	4013      	ands	r3, r2
 8003130:	d017      	beq.n	8003162 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003132:	23a0      	movs	r3, #160	; 0xa0
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	d105      	bne.n	800314a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800313e:	239c      	movs	r3, #156	; 0x9c
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003148:	d00b      	beq.n	8003162 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2208      	movs	r2, #8
 8003150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2284      	movs	r2, #132	; 0x84
 8003156:	589b      	ldr	r3, [r3, r2]
 8003158:	2208      	movs	r2, #8
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2184      	movs	r1, #132	; 0x84
 8003160:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003162:	23a4      	movs	r3, #164	; 0xa4
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	4013      	ands	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_UART_IRQHandler+0x198>
 8003170:	23a0      	movs	r3, #160	; 0xa0
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	04db      	lsls	r3, r3, #19
 800317a:	4013      	ands	r3, r2
 800317c:	d00c      	beq.n	8003198 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2284      	movs	r2, #132	; 0x84
 800318c:	589b      	ldr	r3, [r3, r2]
 800318e:	2220      	movs	r2, #32
 8003190:	431a      	orrs	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2184      	movs	r1, #132	; 0x84
 8003196:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2284      	movs	r2, #132	; 0x84
 800319c:	589b      	ldr	r3, [r3, r2]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d100      	bne.n	80031a4 <HAL_UART_IRQHandler+0x1a4>
 80031a2:	e1e7      	b.n	8003574 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031a4:	23a4      	movs	r3, #164	; 0xa4
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2220      	movs	r2, #32
 80031ac:	4013      	ands	r3, r2
 80031ae:	d00e      	beq.n	80031ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031b0:	23a0      	movs	r3, #160	; 0xa0
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2220      	movs	r2, #32
 80031b8:	4013      	ands	r3, r2
 80031ba:	d008      	beq.n	80031ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	0010      	movs	r0, r2
 80031cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2284      	movs	r2, #132	; 0x84
 80031d2:	589b      	ldr	r3, [r3, r2]
 80031d4:	2194      	movs	r1, #148	; 0x94
 80031d6:	187a      	adds	r2, r7, r1
 80031d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2240      	movs	r2, #64	; 0x40
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d004      	beq.n	80031f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2228      	movs	r2, #40	; 0x28
 80031ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f0:	d047      	beq.n	8003282 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	0018      	movs	r0, r3
 80031f6:	f000 fdad 	bl	8003d54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2240      	movs	r2, #64	; 0x40
 8003202:	4013      	ands	r3, r2
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d137      	bne.n	8003278 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003208:	f3ef 8310 	mrs	r3, PRIMASK
 800320c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800320e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003210:	2090      	movs	r0, #144	; 0x90
 8003212:	183a      	adds	r2, r7, r0
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	2301      	movs	r3, #1
 8003218:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	438a      	bics	r2, r1
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	183b      	adds	r3, r7, r0
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_UART_IRQHandler+0x2a0>)
 800324e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003254:	0018      	movs	r0, r3
 8003256:	f7fd fb9f 	bl	8000998 <HAL_DMA_Abort_IT>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d01a      	beq.n	8003294 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003268:	0018      	movs	r0, r3
 800326a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	e012      	b.n	8003294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f003 fb49 	bl	8006908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003276:	e00d      	b.n	8003294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0018      	movs	r0, r3
 800327c:	f003 fb44 	bl	8006908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	e008      	b.n	8003294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f003 fb3f 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2284      	movs	r2, #132	; 0x84
 800328e:	2100      	movs	r1, #0
 8003290:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003292:	e16f      	b.n	8003574 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	46c0      	nop			; (mov r8, r8)
    return;
 8003296:	e16d      	b.n	8003574 <HAL_UART_IRQHandler+0x574>
 8003298:	0000080f 	.word	0x0000080f
 800329c:	04000120 	.word	0x04000120
 80032a0:	0800400f 	.word	0x0800400f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d000      	beq.n	80032ae <HAL_UART_IRQHandler+0x2ae>
 80032ac:	e139      	b.n	8003522 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ae:	23a4      	movs	r3, #164	; 0xa4
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2210      	movs	r2, #16
 80032b6:	4013      	ands	r3, r2
 80032b8:	d100      	bne.n	80032bc <HAL_UART_IRQHandler+0x2bc>
 80032ba:	e132      	b.n	8003522 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032bc:	23a0      	movs	r3, #160	; 0xa0
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2210      	movs	r2, #16
 80032c4:	4013      	ands	r3, r2
 80032c6:	d100      	bne.n	80032ca <HAL_UART_IRQHandler+0x2ca>
 80032c8:	e12b      	b.n	8003522 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2210      	movs	r2, #16
 80032d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	4013      	ands	r3, r2
 80032dc:	2b40      	cmp	r3, #64	; 0x40
 80032de:	d000      	beq.n	80032e2 <HAL_UART_IRQHandler+0x2e2>
 80032e0:	e09f      	b.n	8003422 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	217e      	movs	r1, #126	; 0x7e
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d100      	bne.n	80032fa <HAL_UART_IRQHandler+0x2fa>
 80032f8:	e13e      	b.n	8003578 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2258      	movs	r2, #88	; 0x58
 80032fe:	5a9b      	ldrh	r3, [r3, r2]
 8003300:	187a      	adds	r2, r7, r1
 8003302:	8812      	ldrh	r2, [r2, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d300      	bcc.n	800330a <HAL_UART_IRQHandler+0x30a>
 8003308:	e136      	b.n	8003578 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	187a      	adds	r2, r7, r1
 800330e:	215a      	movs	r1, #90	; 0x5a
 8003310:	8812      	ldrh	r2, [r2, #0]
 8003312:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b20      	cmp	r3, #32
 800331c:	d06f      	beq.n	80033fe <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003326:	67bb      	str	r3, [r7, #120]	; 0x78
 8003328:	2301      	movs	r3, #1
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4992      	ldr	r1, [pc, #584]	; (8003588 <HAL_UART_IRQHandler+0x588>)
 8003340:	400a      	ands	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003350:	f3ef 8310 	mrs	r3, PRIMASK
 8003354:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003358:	677b      	str	r3, [r7, #116]	; 0x74
 800335a:	2301      	movs	r3, #1
 800335c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003360:	f383 8810 	msr	PRIMASK, r3
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	438a      	bics	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
 8003376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003382:	f3ef 8310 	mrs	r3, PRIMASK
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003388:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338a:	673b      	str	r3, [r7, #112]	; 0x70
 800338c:	2301      	movs	r3, #1
 800338e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2140      	movs	r1, #64	; 0x40
 80033a4:	438a      	bics	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	2120      	movs	r1, #32
 80033ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c2:	f3ef 8310 	mrs	r3, PRIMASK
 80033c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033cc:	2301      	movs	r3, #1
 80033ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033d2:	f383 8810 	msr	PRIMASK, r3
}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2110      	movs	r1, #16
 80033e4:	438a      	bics	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7fd fa95 	bl	8000928 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2258      	movs	r2, #88	; 0x58
 8003408:	5a9a      	ldrh	r2, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	215a      	movs	r1, #90	; 0x5a
 800340e:	5a5b      	ldrh	r3, [r3, r1]
 8003410:	b29b      	uxth	r3, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0011      	movs	r1, r2
 800341a:	0018      	movs	r0, r3
 800341c:	f003 fa26 	bl	800686c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003420:	e0aa      	b.n	8003578 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2258      	movs	r2, #88	; 0x58
 8003426:	5a99      	ldrh	r1, [r3, r2]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	225a      	movs	r2, #90	; 0x5a
 800342c:	5a9b      	ldrh	r3, [r3, r2]
 800342e:	b29a      	uxth	r2, r3
 8003430:	208e      	movs	r0, #142	; 0x8e
 8003432:	183b      	adds	r3, r7, r0
 8003434:	1a8a      	subs	r2, r1, r2
 8003436:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	225a      	movs	r2, #90	; 0x5a
 800343c:	5a9b      	ldrh	r3, [r3, r2]
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d100      	bne.n	8003446 <HAL_UART_IRQHandler+0x446>
 8003444:	e09a      	b.n	800357c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003446:	183b      	adds	r3, r7, r0
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d100      	bne.n	8003450 <HAL_UART_IRQHandler+0x450>
 800344e:	e095      	b.n	800357c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003450:	f3ef 8310 	mrs	r3, PRIMASK
 8003454:	60fb      	str	r3, [r7, #12]
  return(result);
 8003456:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003458:	2488      	movs	r4, #136	; 0x88
 800345a:	193a      	adds	r2, r7, r4
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	2301      	movs	r3, #1
 8003460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4945      	ldr	r1, [pc, #276]	; (800358c <HAL_UART_IRQHandler+0x58c>)
 8003476:	400a      	ands	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	193b      	adds	r3, r7, r4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f383 8810 	msr	PRIMASK, r3
}
 8003486:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003488:	f3ef 8310 	mrs	r3, PRIMASK
 800348c:	61bb      	str	r3, [r7, #24]
  return(result);
 800348e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003490:	2484      	movs	r4, #132	; 0x84
 8003492:	193a      	adds	r2, r7, r4
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2101      	movs	r1, #1
 80034ae:	438a      	bics	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	f383 8810 	msr	PRIMASK, r3
}
 80034be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2280      	movs	r2, #128	; 0x80
 80034c4:	2120      	movs	r1, #32
 80034c6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d4:	f3ef 8310 	mrs	r3, PRIMASK
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	2480      	movs	r4, #128	; 0x80
 80034de:	193a      	adds	r2, r7, r4
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	2301      	movs	r3, #1
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2110      	movs	r1, #16
 80034fa:	438a      	bics	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	193b      	adds	r3, r7, r4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003512:	183b      	adds	r3, r7, r0
 8003514:	881a      	ldrh	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0011      	movs	r1, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f003 f9a6 	bl	800686c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003520:	e02c      	b.n	800357c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003522:	23a4      	movs	r3, #164	; 0xa4
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	4013      	ands	r3, r2
 800352c:	d00f      	beq.n	800354e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800352e:	23a0      	movs	r3, #160	; 0xa0
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2280      	movs	r2, #128	; 0x80
 8003536:	4013      	ands	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01e      	beq.n	8003580 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	0010      	movs	r0, r2
 800354a:	4798      	blx	r3
    }
    return;
 800354c:	e018      	b.n	8003580 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800354e:	23a4      	movs	r3, #164	; 0xa4
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	4013      	ands	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_UART_IRQHandler+0x582>
 800355a:	23a0      	movs	r3, #160	; 0xa0
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2240      	movs	r2, #64	; 0x40
 8003562:	4013      	ands	r3, r2
 8003564:	d00d      	beq.n	8003582 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fd67 	bl	800403c <UART_EndTransmit_IT>
    return;
 800356e:	e008      	b.n	8003582 <HAL_UART_IRQHandler+0x582>
      return;
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	e006      	b.n	8003582 <HAL_UART_IRQHandler+0x582>
    return;
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	e004      	b.n	8003582 <HAL_UART_IRQHandler+0x582>
      return;
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	e002      	b.n	8003582 <HAL_UART_IRQHandler+0x582>
      return;
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	e000      	b.n	8003582 <HAL_UART_IRQHandler+0x582>
    return;
 8003580:	46c0      	nop			; (mov r8, r8)
  }

}
 8003582:	46bd      	mov	sp, r7
 8003584:	b02b      	add	sp, #172	; 0xac
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	fffffeff 	.word	0xfffffeff
 800358c:	fffffedf 	.word	0xfffffedf

08003590 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b002      	add	sp, #8
 80035be:	bd80      	pop	{r7, pc}

080035c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c8:	231e      	movs	r3, #30
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a8d      	ldr	r2, [pc, #564]	; (8003824 <UART_SetConfig+0x264>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	0019      	movs	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a88      	ldr	r2, [pc, #544]	; (8003828 <UART_SetConfig+0x268>)
 8003606:	4013      	ands	r3, r2
 8003608:	0019      	movs	r1, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a7f      	ldr	r2, [pc, #508]	; (800382c <UART_SetConfig+0x26c>)
 800362e:	4013      	ands	r3, r2
 8003630:	0019      	movs	r1, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	430a      	orrs	r2, r1
 800363a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7b      	ldr	r2, [pc, #492]	; (8003830 <UART_SetConfig+0x270>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d127      	bne.n	8003696 <UART_SetConfig+0xd6>
 8003646:	4b7b      	ldr	r3, [pc, #492]	; (8003834 <UART_SetConfig+0x274>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	2203      	movs	r2, #3
 800364c:	4013      	ands	r3, r2
 800364e:	2b03      	cmp	r3, #3
 8003650:	d00d      	beq.n	800366e <UART_SetConfig+0xae>
 8003652:	d81b      	bhi.n	800368c <UART_SetConfig+0xcc>
 8003654:	2b02      	cmp	r3, #2
 8003656:	d014      	beq.n	8003682 <UART_SetConfig+0xc2>
 8003658:	d818      	bhi.n	800368c <UART_SetConfig+0xcc>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <UART_SetConfig+0xa4>
 800365e:	2b01      	cmp	r3, #1
 8003660:	d00a      	beq.n	8003678 <UART_SetConfig+0xb8>
 8003662:	e013      	b.n	800368c <UART_SetConfig+0xcc>
 8003664:	231f      	movs	r3, #31
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
 800366c:	e021      	b.n	80036b2 <UART_SetConfig+0xf2>
 800366e:	231f      	movs	r3, #31
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	2202      	movs	r2, #2
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e01c      	b.n	80036b2 <UART_SetConfig+0xf2>
 8003678:	231f      	movs	r3, #31
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2204      	movs	r2, #4
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e017      	b.n	80036b2 <UART_SetConfig+0xf2>
 8003682:	231f      	movs	r3, #31
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	2208      	movs	r2, #8
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e012      	b.n	80036b2 <UART_SetConfig+0xf2>
 800368c:	231f      	movs	r3, #31
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	2210      	movs	r2, #16
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	e00d      	b.n	80036b2 <UART_SetConfig+0xf2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a67      	ldr	r2, [pc, #412]	; (8003838 <UART_SetConfig+0x278>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d104      	bne.n	80036aa <UART_SetConfig+0xea>
 80036a0:	231f      	movs	r3, #31
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e003      	b.n	80036b2 <UART_SetConfig+0xf2>
 80036aa:	231f      	movs	r3, #31
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	2210      	movs	r2, #16
 80036b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	2380      	movs	r3, #128	; 0x80
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d15c      	bne.n	8003778 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80036be:	231f      	movs	r3, #31
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d015      	beq.n	80036f4 <UART_SetConfig+0x134>
 80036c8:	dc18      	bgt.n	80036fc <UART_SetConfig+0x13c>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d00d      	beq.n	80036ea <UART_SetConfig+0x12a>
 80036ce:	dc15      	bgt.n	80036fc <UART_SetConfig+0x13c>
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <UART_SetConfig+0x11a>
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d005      	beq.n	80036e4 <UART_SetConfig+0x124>
 80036d8:	e010      	b.n	80036fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036da:	f7fe fa81 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 80036de:	0003      	movs	r3, r0
 80036e0:	61bb      	str	r3, [r7, #24]
        break;
 80036e2:	e012      	b.n	800370a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036e4:	4b55      	ldr	r3, [pc, #340]	; (800383c <UART_SetConfig+0x27c>)
 80036e6:	61bb      	str	r3, [r7, #24]
        break;
 80036e8:	e00f      	b.n	800370a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ea:	f7fe fa19 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80036ee:	0003      	movs	r3, r0
 80036f0:	61bb      	str	r3, [r7, #24]
        break;
 80036f2:	e00a      	b.n	800370a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	61bb      	str	r3, [r7, #24]
        break;
 80036fa:	e006      	b.n	800370a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003700:	231e      	movs	r3, #30
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
        break;
 8003708:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d100      	bne.n	8003712 <UART_SetConfig+0x152>
 8003710:	e07a      	b.n	8003808 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	18d2      	adds	r2, r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	0019      	movs	r1, r3
 8003724:	0010      	movs	r0, r2
 8003726:	f7fc fd01 	bl	800012c <__udivsi3>
 800372a:	0003      	movs	r3, r0
 800372c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d91c      	bls.n	800376e <UART_SetConfig+0x1ae>
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	2380      	movs	r3, #128	; 0x80
 8003738:	025b      	lsls	r3, r3, #9
 800373a:	429a      	cmp	r2, r3
 800373c:	d217      	bcs.n	800376e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	b29a      	uxth	r2, r3
 8003742:	200e      	movs	r0, #14
 8003744:	183b      	adds	r3, r7, r0
 8003746:	210f      	movs	r1, #15
 8003748:	438a      	bics	r2, r1
 800374a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	b29b      	uxth	r3, r3
 8003752:	2207      	movs	r2, #7
 8003754:	4013      	ands	r3, r2
 8003756:	b299      	uxth	r1, r3
 8003758:	183b      	adds	r3, r7, r0
 800375a:	183a      	adds	r2, r7, r0
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	183a      	adds	r2, r7, r0
 8003768:	8812      	ldrh	r2, [r2, #0]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	e04c      	b.n	8003808 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800376e:	231e      	movs	r3, #30
 8003770:	18fb      	adds	r3, r7, r3
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e047      	b.n	8003808 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003778:	231f      	movs	r3, #31
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d015      	beq.n	80037ae <UART_SetConfig+0x1ee>
 8003782:	dc18      	bgt.n	80037b6 <UART_SetConfig+0x1f6>
 8003784:	2b04      	cmp	r3, #4
 8003786:	d00d      	beq.n	80037a4 <UART_SetConfig+0x1e4>
 8003788:	dc15      	bgt.n	80037b6 <UART_SetConfig+0x1f6>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <UART_SetConfig+0x1d4>
 800378e:	2b02      	cmp	r3, #2
 8003790:	d005      	beq.n	800379e <UART_SetConfig+0x1de>
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7fe fa24 	bl	8001be0 <HAL_RCC_GetPCLK1Freq>
 8003798:	0003      	movs	r3, r0
 800379a:	61bb      	str	r3, [r7, #24]
        break;
 800379c:	e012      	b.n	80037c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800379e:	4b27      	ldr	r3, [pc, #156]	; (800383c <UART_SetConfig+0x27c>)
 80037a0:	61bb      	str	r3, [r7, #24]
        break;
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a4:	f7fe f9bc 	bl	8001b20 <HAL_RCC_GetSysClockFreq>
 80037a8:	0003      	movs	r3, r0
 80037aa:	61bb      	str	r3, [r7, #24]
        break;
 80037ac:	e00a      	b.n	80037c4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	021b      	lsls	r3, r3, #8
 80037b2:	61bb      	str	r3, [r7, #24]
        break;
 80037b4:	e006      	b.n	80037c4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037ba:	231e      	movs	r3, #30
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
        break;
 80037c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01e      	beq.n	8003808 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	085a      	lsrs	r2, r3, #1
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	18d2      	adds	r2, r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	0019      	movs	r1, r3
 80037da:	0010      	movs	r0, r2
 80037dc:	f7fc fca6 	bl	800012c <__udivsi3>
 80037e0:	0003      	movs	r3, r0
 80037e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d90a      	bls.n	8003800 <UART_SetConfig+0x240>
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	025b      	lsls	r3, r3, #9
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d205      	bcs.n	8003800 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60da      	str	r2, [r3, #12]
 80037fe:	e003      	b.n	8003808 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003800:	231e      	movs	r3, #30
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003814:	231e      	movs	r3, #30
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	781b      	ldrb	r3, [r3, #0]
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b008      	add	sp, #32
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	ffff69f3 	.word	0xffff69f3
 8003828:	ffffcfff 	.word	0xffffcfff
 800382c:	fffff4ff 	.word	0xfffff4ff
 8003830:	40013800 	.word	0x40013800
 8003834:	40021000 	.word	0x40021000
 8003838:	40004400 	.word	0x40004400
 800383c:	007a1200 	.word	0x007a1200

08003840 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2201      	movs	r2, #1
 800384e:	4013      	ands	r3, r2
 8003850:	d00b      	beq.n	800386a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a4a      	ldr	r2, [pc, #296]	; (8003984 <UART_AdvFeatureConfig+0x144>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2202      	movs	r2, #2
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a43      	ldr	r2, [pc, #268]	; (8003988 <UART_AdvFeatureConfig+0x148>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	2204      	movs	r2, #4
 8003892:	4013      	ands	r3, r2
 8003894:	d00b      	beq.n	80038ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a3b      	ldr	r2, [pc, #236]	; (800398c <UART_AdvFeatureConfig+0x14c>)
 800389e:	4013      	ands	r3, r2
 80038a0:	0019      	movs	r1, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2208      	movs	r2, #8
 80038b4:	4013      	ands	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <UART_AdvFeatureConfig+0x150>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	2210      	movs	r2, #16
 80038d6:	4013      	ands	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a2c      	ldr	r2, [pc, #176]	; (8003994 <UART_AdvFeatureConfig+0x154>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	0019      	movs	r1, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	2220      	movs	r2, #32
 80038f8:	4013      	ands	r3, r2
 80038fa:	d00b      	beq.n	8003914 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	4a25      	ldr	r2, [pc, #148]	; (8003998 <UART_AdvFeatureConfig+0x158>)
 8003904:	4013      	ands	r3, r2
 8003906:	0019      	movs	r1, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	4013      	ands	r3, r2
 800391c:	d01d      	beq.n	800395a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <UART_AdvFeatureConfig+0x15c>)
 8003926:	4013      	ands	r3, r2
 8003928:	0019      	movs	r1, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	035b      	lsls	r3, r3, #13
 800393e:	429a      	cmp	r2, r3
 8003940:	d10b      	bne.n	800395a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4a15      	ldr	r2, [pc, #84]	; (80039a0 <UART_AdvFeatureConfig+0x160>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	4013      	ands	r3, r2
 8003962:	d00b      	beq.n	800397c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a0e      	ldr	r2, [pc, #56]	; (80039a4 <UART_AdvFeatureConfig+0x164>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b002      	add	sp, #8
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fffdffff 	.word	0xfffdffff
 8003988:	fffeffff 	.word	0xfffeffff
 800398c:	fffbffff 	.word	0xfffbffff
 8003990:	ffff7fff 	.word	0xffff7fff
 8003994:	ffffefff 	.word	0xffffefff
 8003998:	ffffdfff 	.word	0xffffdfff
 800399c:	ffefffff 	.word	0xffefffff
 80039a0:	ff9fffff 	.word	0xff9fffff
 80039a4:	fff7ffff 	.word	0xfff7ffff

080039a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b092      	sub	sp, #72	; 0x48
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2284      	movs	r2, #132	; 0x84
 80039b4:	2100      	movs	r1, #0
 80039b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039b8:	f7fc fdfc 	bl	80005b4 <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2208      	movs	r2, #8
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d12c      	bne.n	8003a28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	2280      	movs	r2, #128	; 0x80
 80039d2:	0391      	lsls	r1, r2, #14
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4a46      	ldr	r2, [pc, #280]	; (8003af0 <UART_CheckIdleState+0x148>)
 80039d8:	9200      	str	r2, [sp, #0]
 80039da:	2200      	movs	r2, #0
 80039dc:	f000 f88c 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d021      	beq.n	8003a28 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ee:	2301      	movs	r3, #1
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2278      	movs	r2, #120	; 0x78
 8003a20:	2100      	movs	r1, #0
 8003a22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e05f      	b.n	8003ae8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d146      	bne.n	8003ac4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	2280      	movs	r2, #128	; 0x80
 8003a3a:	03d1      	lsls	r1, r2, #15
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <UART_CheckIdleState+0x148>)
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f000 f858 	bl	8003af8 <UART_WaitOnFlagUntilTimeout>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d03b      	beq.n	8003ac4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a50:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	637b      	str	r3, [r7, #52]	; 0x34
 8003a56:	2301      	movs	r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4921      	ldr	r1, [pc, #132]	; (8003af4 <UART_CheckIdleState+0x14c>)
 8003a6e:	400a      	ands	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f383 8810 	msr	PRIMASK, r3
}
 8003a7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
 8003a88:	2301      	movs	r3, #1
 8003a8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2278      	movs	r2, #120	; 0x78
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e011      	b.n	8003ae8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	2120      	movs	r1, #32
 8003ad0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2278      	movs	r2, #120	; 0x78
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b010      	add	sp, #64	; 0x40
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	01ffffff 	.word	0x01ffffff
 8003af4:	fffffedf 	.word	0xfffffedf

08003af8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	1dfb      	adds	r3, r7, #7
 8003b06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	e04b      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	d048      	beq.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b10:	f7fc fd50 	bl	80005b4 <HAL_GetTick>
 8003b14:	0002      	movs	r2, r0
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d302      	bcc.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04b      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2204      	movs	r2, #4
 8003b32:	4013      	ands	r3, r2
 8003b34:	d035      	beq.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d111      	bne.n	8003b68 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f900 	bl	8003d54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2284      	movs	r2, #132	; 0x84
 8003b58:	2108      	movs	r1, #8
 8003b5a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2278      	movs	r2, #120	; 0x78
 8003b60:	2100      	movs	r1, #0
 8003b62:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e02c      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	401a      	ands	r2, r3
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d112      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2280      	movs	r2, #128	; 0x80
 8003b82:	0112      	lsls	r2, r2, #4
 8003b84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f8e3 	bl	8003d54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2284      	movs	r2, #132	; 0x84
 8003b92:	2120      	movs	r1, #32
 8003b94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2278      	movs	r2, #120	; 0x78
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e00f      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	425a      	negs	r2, r3
 8003bb2:	4153      	adcs	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	1dfb      	adds	r3, r7, #7
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d0a4      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b004      	add	sp, #16
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b090      	sub	sp, #64	; 0x40
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	1dbb      	adds	r3, r7, #6
 8003bd8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	1dba      	adds	r2, r7, #6
 8003be4:	2158      	movs	r1, #88	; 0x58
 8003be6:	8812      	ldrh	r2, [r2, #0]
 8003be8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2284      	movs	r2, #132	; 0x84
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	2122      	movs	r1, #34	; 0x22
 8003bf8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d028      	beq.n	8003c54 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c06:	4a3e      	ldr	r2, [pc, #248]	; (8003d00 <UART_Start_Receive_DMA+0x134>)
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	4a3d      	ldr	r2, [pc, #244]	; (8003d04 <UART_Start_Receive_DMA+0x138>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c16:	4a3c      	ldr	r2, [pc, #240]	; (8003d08 <UART_Start_Receive_DMA+0x13c>)
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	2200      	movs	r2, #0
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c32:	001a      	movs	r2, r3
 8003c34:	1dbb      	adds	r3, r7, #6
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f7fc fe10 	bl	800085c <HAL_DMA_Start_IT>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d009      	beq.n	8003c54 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2284      	movs	r2, #132	; 0x84
 8003c44:	2110      	movs	r1, #16
 8003c46:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	2120      	movs	r1, #32
 8003c4e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e050      	b.n	8003cf6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d019      	beq.n	8003c90 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c60:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c66:	2301      	movs	r3, #1
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	f383 8810 	msr	PRIMASK, r3
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	0049      	lsls	r1, r1, #1
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c90:	f3ef 8310 	mrs	r3, PRIMASK
 8003c94:	613b      	str	r3, [r7, #16]
  return(result);
 8003c96:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f383 8810 	msr	PRIMASK, r3
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	f383 8810 	msr	PRIMASK, r3
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc6:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cc8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
 8003ccc:	2301      	movs	r3, #1
 8003cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2140      	movs	r1, #64	; 0x40
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b010      	add	sp, #64	; 0x40
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	08003e1d 	.word	0x08003e1d
 8003d04:	08003f49 	.word	0x08003f49
 8003d08:	08003f8b 	.word	0x08003f8b

08003d0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d14:	f3ef 8310 	mrs	r3, PRIMASK
 8003d18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d1a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	2301      	movs	r3, #1
 8003d20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	21c0      	movs	r1, #192	; 0xc0
 8003d36:	438a      	bics	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003d4c:	46c0      	nop			; (mov r8, r8)
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	b006      	add	sp, #24
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08e      	sub	sp, #56	; 0x38
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d60:	617b      	str	r3, [r7, #20]
  return(result);
 8003d62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4926      	ldr	r1, [pc, #152]	; (8003e18 <UART_EndRxTransfer+0xc4>)
 8003d7e:	400a      	ands	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d92:	623b      	str	r3, [r7, #32]
  return(result);
 8003d94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
 8003d98:	2301      	movs	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	f383 8810 	msr	PRIMASK, r3
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d118      	bne.n	8003dfa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003dcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f383 8810 	msr	PRIMASK, r3
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2110      	movs	r1, #16
 8003dea:	438a      	bics	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f383 8810 	msr	PRIMASK, r3
}
 8003df8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	2120      	movs	r1, #32
 8003e00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b00e      	add	sp, #56	; 0x38
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	fffffedf 	.word	0xfffffedf

08003e1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b094      	sub	sp, #80	; 0x50
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d06f      	beq.n	8003f12 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e34:	225a      	movs	r2, #90	; 0x5a
 8003e36:	2100      	movs	r1, #0
 8003e38:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e40:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e44:	2301      	movs	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	493a      	ldr	r1, [pc, #232]	; (8003f44 <UART_DMAReceiveCplt+0x128>)
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f383 8810 	msr	PRIMASK, r3
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e74:	647b      	str	r3, [r7, #68]	; 0x44
 8003e76:	2301      	movs	r3, #1
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	f383 8810 	msr	PRIMASK, r3
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	438a      	bics	r2, r1
 8003e90:	609a      	str	r2, [r3, #8]
 8003e92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e98:	f383 8810 	msr	PRIMASK, r3
}
 8003e9c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	609a      	str	r2, [r3, #8]
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	2280      	movs	r2, #128	; 0x80
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d118      	bne.n	8003f12 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eea:	2301      	movs	r3, #1
 8003eec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2110      	movs	r1, #16
 8003f02:	438a      	bics	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f14:	2200      	movs	r2, #0
 8003f16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d108      	bne.n	8003f32 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	2258      	movs	r2, #88	; 0x58
 8003f24:	5a9a      	ldrh	r2, [r3, r2]
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	0011      	movs	r1, r2
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f002 fc9e 	bl	800686c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f30:	e003      	b.n	8003f3a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff fb33 	bl	80035a0 <HAL_UART_RxCpltCallback>
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b014      	add	sp, #80	; 0x50
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	fffffeff 	.word	0xfffffeff

08003f48 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d10a      	bne.n	8003f7a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2258      	movs	r2, #88	; 0x58
 8003f68:	5a9b      	ldrh	r3, [r3, r2]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f002 fc7a 	bl	800686c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f78:	e003      	b.n	8003f82 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff fb17 	bl	80035b0 <HAL_UART_RxHalfCpltCallback>
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b004      	add	sp, #16
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b086      	sub	sp, #24
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2280      	movs	r2, #128	; 0x80
 8003fa2:	589b      	ldr	r3, [r3, r2]
 8003fa4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b80      	cmp	r3, #128	; 0x80
 8003fb2:	d10a      	bne.n	8003fca <UART_DMAError+0x40>
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b21      	cmp	r3, #33	; 0x21
 8003fb8:	d107      	bne.n	8003fca <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2252      	movs	r2, #82	; 0x52
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fea1 	bl	8003d0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d10a      	bne.n	8003fee <UART_DMAError+0x64>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2b22      	cmp	r3, #34	; 0x22
 8003fdc:	d107      	bne.n	8003fee <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	225a      	movs	r2, #90	; 0x5a
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff feb3 	bl	8003d54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2284      	movs	r2, #132	; 0x84
 8003ff2:	589b      	ldr	r3, [r3, r2]
 8003ff4:	2210      	movs	r2, #16
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2184      	movs	r1, #132	; 0x84
 8003ffc:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	0018      	movs	r0, r3
 8004002:	f002 fc81 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b006      	add	sp, #24
 800400c:	bd80      	pop	{r7, pc}

0800400e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	225a      	movs	r2, #90	; 0x5a
 8004020:	2100      	movs	r1, #0
 8004022:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2252      	movs	r2, #82	; 0x52
 8004028:	2100      	movs	r1, #0
 800402a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	0018      	movs	r0, r3
 8004030:	f002 fc6a 	bl	8006908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004034:	46c0      	nop			; (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b004      	add	sp, #16
 800403a:	bd80      	pop	{r7, pc}

0800403c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004044:	f3ef 8310 	mrs	r3, PRIMASK
 8004048:	60bb      	str	r3, [r7, #8]
  return(result);
 800404a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800404c:	617b      	str	r3, [r7, #20]
 800404e:	2301      	movs	r3, #1
 8004050:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2140      	movs	r1, #64	; 0x40
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0018      	movs	r0, r3
 8004086:	f7ff fa83 	bl	8003590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b006      	add	sp, #24
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004092:	b5b0      	push	{r4, r5, r7, lr}
 8004094:	b08a      	sub	sp, #40	; 0x28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	1dbb      	adds	r3, r7, #6
 800409e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2280      	movs	r2, #128	; 0x80
 80040a4:	589b      	ldr	r3, [r3, r2]
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	d156      	bne.n	8004158 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80040b0:	1dbb      	adds	r3, r7, #6
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e04e      	b.n	800415a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	015b      	lsls	r3, r3, #5
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d109      	bne.n	80040dc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d105      	bne.n	80040dc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2201      	movs	r2, #1
 80040d4:	4013      	ands	r3, r2
 80040d6:	d001      	beq.n	80040dc <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e03e      	b.n	800415a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80040e8:	2527      	movs	r5, #39	; 0x27
 80040ea:	197c      	adds	r4, r7, r5
 80040ec:	1dbb      	adds	r3, r7, #6
 80040ee:	881a      	ldrh	r2, [r3, #0]
 80040f0:	68b9      	ldr	r1, [r7, #8]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f7ff fd69 	bl	8003bcc <UART_Start_Receive_DMA>
 80040fa:	0003      	movs	r3, r0
 80040fc:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80040fe:	197b      	adds	r3, r7, r5
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d124      	bne.n	8004150 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410a:	2b01      	cmp	r3, #1
 800410c:	d11c      	bne.n	8004148 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2210      	movs	r2, #16
 8004114:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004116:	f3ef 8310 	mrs	r3, PRIMASK
 800411a:	617b      	str	r3, [r7, #20]
  return(result);
 800411c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	2301      	movs	r3, #1
 8004122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f383 8810 	msr	PRIMASK, r3
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2110      	movs	r1, #16
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f383 8810 	msr	PRIMASK, r3
}
 8004146:	e003      	b.n	8004150 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004148:	2327      	movs	r3, #39	; 0x27
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	2201      	movs	r2, #1
 800414e:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004150:	2327      	movs	r3, #39	; 0x27
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	e000      	b.n	800415a <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	0018      	movs	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	b00a      	add	sp, #40	; 0x28
 8004160:	bdb0      	pop	{r4, r5, r7, pc}

08004162 <CH395SetBuffer>:

#include <CH395.h>
#include <CH395CMD.h>
#include "Delay.h"
void CH395SetBuffer() // use all 8 sockets, each socket 1.5KB x 2 buffer
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t blk = 0;
 8004168:	1dbb      	adds	r3, r7, #6
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 800416e:	1dfb      	adds	r3, r7, #7
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e01e      	b.n	80041b4 <CH395SetBuffer+0x52>
	{
		CH395SetSocketRecvBuf(i, blk, 3);
 8004176:	1dbb      	adds	r3, r7, #6
 8004178:	7819      	ldrb	r1, [r3, #0]
 800417a:	1dfb      	adds	r3, r7, #7
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2203      	movs	r2, #3
 8004180:	0018      	movs	r0, r3
 8004182:	f000 fcc5 	bl	8004b10 <CH395SetSocketRecvBuf>
		blk += 3;
 8004186:	1dbb      	adds	r3, r7, #6
 8004188:	1dba      	adds	r2, r7, #6
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	3203      	adds	r2, #3
 800418e:	701a      	strb	r2, [r3, #0]
		CH395SetSocketSendBuf(i, blk, 3);
 8004190:	1dbb      	adds	r3, r7, #6
 8004192:	7819      	ldrb	r1, [r3, #0]
 8004194:	1dfb      	adds	r3, r7, #7
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2203      	movs	r2, #3
 800419a:	0018      	movs	r0, r3
 800419c:	f000 fcdd 	bl	8004b5a <CH395SetSocketSendBuf>
		blk += 3;
 80041a0:	1dbb      	adds	r3, r7, #6
 80041a2:	1dba      	adds	r2, r7, #6
 80041a4:	7812      	ldrb	r2, [r2, #0]
 80041a6:	3203      	adds	r2, #3
 80041a8:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	1dfa      	adds	r2, r7, #7
 80041ae:	7812      	ldrb	r2, [r2, #0]
 80041b0:	3201      	adds	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	1dfb      	adds	r3, r7, #7
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	d9dc      	bls.n	8004176 <CH395SetBuffer+0x14>
	}
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b002      	add	sp, #8
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <CH395TCPServerStart>:

BOOL CH395TCPServerStart(uint32_t ip, uint16_t port_http_server, uint16_t port_tcp_server)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	0008      	movs	r0, r1
 80041d2:	0011      	movs	r1, r2
 80041d4:	1cbb      	adds	r3, r7, #2
 80041d6:	1c02      	adds	r2, r0, #0
 80041d8:	801a      	strh	r2, [r3, #0]
 80041da:	003b      	movs	r3, r7
 80041dc:	1c0a      	adds	r2, r1, #0
 80041de:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	// Initialize Stack
	CH395CMDInitCH395();
 80041e0:	f000 f8e6 	bl	80043b0 <CH395CMDInitCH395>
	ch395.RX_received = 0;
 80041e4:	4b48      	ldr	r3, [pc, #288]	; (8004308 <CH395TCPServerStart+0x140>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	765a      	strb	r2, [r3, #25]
	ch395.TX_available= 0;
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <CH395TCPServerStart+0x140>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	76da      	strb	r2, [r3, #27]
	ch395.SOCK_responding = -1;
 80041f0:	4b45      	ldr	r3, [pc, #276]	; (8004308 <CH395TCPServerStart+0x140>)
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	769a      	strb	r2, [r3, #26]
	// Check PHY
	i=0;
 80041f6:	230f      	movs	r3, #15
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
	do
	{
		uint8_t phy = CH395CMDGetPHYStatus();
 80041fe:	250d      	movs	r5, #13
 8004200:	197c      	adds	r4, r7, r5
 8004202:	f000 f8b9 	bl	8004378 <CH395CMDGetPHYStatus>
 8004206:	0003      	movs	r3, r0
 8004208:	7023      	strb	r3, [r4, #0]
		if(phy != PHY_DISCONN) break; // PHY connected
 800420a:	197b      	adds	r3, r7, r5
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d10f      	bne.n	8004232 <CH395TCPServerStart+0x6a>
		++i;
 8004212:	240f      	movs	r4, #15
 8004214:	193b      	adds	r3, r7, r4
 8004216:	193a      	adds	r2, r7, r4
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	3201      	adds	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 800421e:	23fa      	movs	r3, #250	; 0xfa
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	0018      	movs	r0, r3
 8004224:	f7fc f9d0 	bl	80005c8 <HAL_Delay>
	}while(i<20);
 8004228:	193b      	adds	r3, r7, r4
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b13      	cmp	r3, #19
 800422e:	d9e6      	bls.n	80041fe <CH395TCPServerStart+0x36>
 8004230:	e000      	b.n	8004234 <CH395TCPServerStart+0x6c>
		if(phy != PHY_DISCONN) break; // PHY connected
 8004232:	46c0      	nop			; (mov r8, r8)
	if(i >= 20) return false;
 8004234:	230f      	movs	r3, #15
 8004236:	18fb      	adds	r3, r7, r3
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b13      	cmp	r3, #19
 800423c:	d901      	bls.n	8004242 <CH395TCPServerStart+0x7a>
 800423e:	2300      	movs	r3, #0
 8004240:	e05e      	b.n	8004300 <CH395TCPServerStart+0x138>
	// DHCP
	if(CH395DHCPEnable(true) != 0)
 8004242:	2001      	movs	r0, #1
 8004244:	f000 fbde 	bl	8004a04 <CH395DHCPEnable>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d002      	beq.n	8004252 <CH395TCPServerStart+0x8a>
	{
		// DHCP not enabled
//		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
//		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
		HAL_Delay(100);
 800424c:	2064      	movs	r0, #100	; 0x64
 800424e:	f7fc f9bb 	bl	80005c8 <HAL_Delay>
	}
	HAL_Delay(100);
 8004252:	2064      	movs	r0, #100	; 0x64
 8004254:	f7fc f9b8 	bl	80005c8 <HAL_Delay>
	//enable multi connections
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER);
 8004258:	2002      	movs	r0, #2
 800425a:	f000 fca3 	bl	8004ba4 <CH395SetStartPara>
	// set sockets
	uint8_t err = 0;
 800425e:	230e      	movs	r3, #14
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
	if(port_http_server > 0)
 8004266:	1cbb      	adds	r3, r7, #2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d042      	beq.n	80042f4 <CH395TCPServerStart+0x12c>
	{
		for(i=0; i < CH395_SOCKS_AVAIL; ++i)
 800426e:	230f      	movs	r3, #15
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e02e      	b.n	80042d6 <CH395TCPServerStart+0x10e>
		{
			CH395_protocol_t proto = ch395.cfg.protocols[i];
 8004278:	200f      	movs	r0, #15
 800427a:	183b      	adds	r3, r7, r0
 800427c:	781a      	ldrb	r2, [r3, #0]
 800427e:	250c      	movs	r5, #12
 8004280:	197b      	adds	r3, r7, r5
 8004282:	4921      	ldr	r1, [pc, #132]	; (8004308 <CH395TCPServerStart+0x140>)
 8004284:	188a      	adds	r2, r1, r2
 8004286:	7c12      	ldrb	r2, [r2, #16]
 8004288:	701a      	strb	r2, [r3, #0]
			uint16_t port = ch395.cfg.ports[i];
 800428a:	183b      	adds	r3, r7, r0
 800428c:	7819      	ldrb	r1, [r3, #0]
 800428e:	240a      	movs	r4, #10
 8004290:	193b      	adds	r3, r7, r4
 8004292:	4a1d      	ldr	r2, [pc, #116]	; (8004308 <CH395TCPServerStart+0x140>)
 8004294:	0049      	lsls	r1, r1, #1
 8004296:	5a8a      	ldrh	r2, [r1, r2]
 8004298:	801a      	strh	r2, [r3, #0]
			if(proto != CH395_PROTOCOL_NOT_USED && port > 0)
 800429a:	197b      	adds	r3, r7, r5
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d013      	beq.n	80042ca <CH395TCPServerStart+0x102>
 80042a2:	0025      	movs	r5, r4
 80042a4:	193b      	adds	r3, r7, r4
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <CH395TCPServerStart+0x102>
			{
				CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET  to be TCP server
 80042ac:	0004      	movs	r4, r0
 80042ae:	183b      	adds	r3, r7, r0
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2103      	movs	r1, #3
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f8f9 	bl	80044ac <CH395SetSocketProtType>
				CH395SetSocketSourPort(i, port); // listen on HTTP port
 80042ba:	197b      	adds	r3, r7, r5
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	193b      	adds	r3, r7, r4
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	0011      	movs	r1, r2
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 f915 	bl	80044f4 <CH395SetSocketSourPort>
		for(i=0; i < CH395_SOCKS_AVAIL; ++i)
 80042ca:	220f      	movs	r2, #15
 80042cc:	18bb      	adds	r3, r7, r2
 80042ce:	18ba      	adds	r2, r7, r2
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	3201      	adds	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	230f      	movs	r3, #15
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b07      	cmp	r3, #7
 80042de:	d9cb      	bls.n	8004278 <CH395TCPServerStart+0xb0>
			}
		}
		CH395OpenSocket(0); // open socket 0
 80042e0:	2000      	movs	r0, #0
 80042e2:	f000 faa1 	bl	8004828 <CH395OpenSocket>
		err = CH395TCPListen(0); // start lisening
 80042e6:	230e      	movs	r3, #14
 80042e8:	18fc      	adds	r4, r7, r3
 80042ea:	2000      	movs	r0, #0
 80042ec:	f000 fade 	bl	80048ac <CH395TCPListen>
 80042f0:	0003      	movs	r3, r0
 80042f2:	7023      	strb	r3, [r4, #0]
	}

	return (err == 0);
 80042f4:	230e      	movs	r3, #14
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	425a      	negs	r2, r3
 80042fc:	4153      	adcs	r3, r2
 80042fe:	b2db      	uxtb	r3, r3
}
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b004      	add	sp, #16
 8004306:	bdb0      	pop	{r4, r5, r7, pc}
 8004308:	20000010 	.word	0x20000010

0800430c <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
    xWriteCH395Cmd(CMD00_RESET_ALL);
 8004310:	2005      	movs	r0, #5
 8004312:	f000 fc95 	bl	8004c40 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <CH395CMDReset+0x20>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	4b04      	ldr	r3, [pc, #16]	; (800432c <CH395CMDReset+0x20>)
 800431c:	889b      	ldrh	r3, [r3, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	0019      	movs	r1, r3
 8004322:	f7fc fff8 	bl	8001316 <HAL_GPIO_WritePin>
}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	2000062c 	.word	0x2000062c

08004330 <CH395CMDCheckExist>:
* Input          : testdata 1字节测试数据
* Output         : None
* Return         : 硬件OK，返回 testdata按位取反
*******************************************************************************/
uint8_t CH395CMDCheckExist(uint8_t testdata)
{
 8004330:	b5b0      	push	{r4, r5, r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	0002      	movs	r2, r0
 8004338:	1dfb      	adds	r3, r7, #7
 800433a:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    xWriteCH395Cmd(CMD11_CHECK_EXIST);
 800433c:	2006      	movs	r0, #6
 800433e:	f000 fc7f 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(testdata);
 8004342:	1dfb      	adds	r3, r7, #7
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fca2 	bl	8004c90 <xWriteCH395Data>
    i = xReadCH395Data();
 800434c:	250f      	movs	r5, #15
 800434e:	197c      	adds	r4, r7, r5
 8004350:	f000 fcb0 	bl	8004cb4 <xReadCH395Data>
 8004354:	0003      	movs	r3, r0
 8004356:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8004358:	4b06      	ldr	r3, [pc, #24]	; (8004374 <CH395CMDCheckExist+0x44>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <CH395CMDCheckExist+0x44>)
 800435e:	889b      	ldrh	r3, [r3, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	0019      	movs	r1, r3
 8004364:	f7fc ffd7 	bl	8001316 <HAL_GPIO_WritePin>
    return i;
 8004368:	197b      	adds	r3, r7, r5
 800436a:	781b      	ldrb	r3, [r3, #0]
}
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b004      	add	sp, #16
 8004372:	bdb0      	pop	{r4, r5, r7, pc}
 8004374:	2000062c 	.word	0x2000062c

08004378 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 800437e:	2026      	movs	r0, #38	; 0x26
 8004380:	f000 fc5e 	bl	8004c40 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8004384:	1dfc      	adds	r4, r7, #7
 8004386:	f000 fc95 	bl	8004cb4 <xReadCH395Data>
 800438a:	0003      	movs	r3, r0
 800438c:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 800438e:	4b07      	ldr	r3, [pc, #28]	; (80043ac <CH395CMDGetPHYStatus+0x34>)
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <CH395CMDGetPHYStatus+0x34>)
 8004394:	889b      	ldrh	r3, [r3, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	0019      	movs	r1, r3
 800439a:	f7fc ffbc 	bl	8001316 <HAL_GPIO_WritePin>
    return i;
 800439e:	1dfb      	adds	r3, r7, #7
 80043a0:	781b      	ldrb	r3, [r3, #0]
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b003      	add	sp, #12
 80043a8:	bd90      	pop	{r4, r7, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	2000062c 	.word	0x2000062c

080043b0 <CH395CMDInitCH395>:
* Input          : None
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395CMDInitCH395(void)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 80043bc:	1dbb      	adds	r3, r7, #6
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]

    xWriteCH395Cmd(CMD0W_INIT_CH395);
 80043c2:	2027      	movs	r0, #39	; 0x27
 80043c4:	f000 fc3c 	bl	8004c40 <xWriteCH395Cmd>
    xEndCH395Cmd();
 80043c8:	4b12      	ldr	r3, [pc, #72]	; (8004414 <CH395CMDInitCH395+0x64>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4b11      	ldr	r3, [pc, #68]	; (8004414 <CH395CMDInitCH395+0x64>)
 80043ce:	889b      	ldrh	r3, [r3, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	0019      	movs	r1, r3
 80043d4:	f7fc ff9f 	bl	8001316 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <CH395CMDInitCH395+0x68>)
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 fca0 	bl	8004d20 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80043e0:	1dbc      	adds	r4, r7, #6
 80043e2:	f000 f81b 	bl	800441c <CH395GetCmdStatus>
 80043e6:	0003      	movs	r3, r0
 80043e8:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b10      	cmp	r3, #16
 80043f0:	d108      	bne.n	8004404 <CH395CMDInitCH395+0x54>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 80043f2:	1dfb      	adds	r3, r7, #7
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	1dfa      	adds	r2, r7, #7
 80043f8:	1c59      	adds	r1, r3, #1
 80043fa:	7011      	strb	r1, [r2, #0]
 80043fc:	2bc8      	cmp	r3, #200	; 0xc8
 80043fe:	d9eb      	bls.n	80043d8 <CH395CMDInitCH395+0x28>
 8004400:	23fa      	movs	r3, #250	; 0xfa
 8004402:	e002      	b.n	800440a <CH395CMDInitCH395+0x5a>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004404:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004406:	1dbb      	adds	r3, r7, #6
 8004408:	781b      	ldrb	r3, [r3, #0]
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b003      	add	sp, #12
 8004410:	bd90      	pop	{r4, r7, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	2000062c 	.word	0x2000062c
 8004418:	00002710 	.word	0x00002710

0800441c <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 8004422:	202c      	movs	r0, #44	; 0x2c
 8004424:	f000 fc0c 	bl	8004c40 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8004428:	1dfc      	adds	r4, r7, #7
 800442a:	f000 fc43 	bl	8004cb4 <xReadCH395Data>
 800442e:	0003      	movs	r3, r0
 8004430:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <CH395GetCmdStatus+0x34>)
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <CH395GetCmdStatus+0x34>)
 8004438:	889b      	ldrh	r3, [r3, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	0019      	movs	r1, r3
 800443e:	f7fc ff6a 	bl	8001316 <HAL_GPIO_WritePin>
    return i;
 8004442:	1dfb      	adds	r3, r7, #7
 8004444:	781b      	ldrb	r3, [r3, #0]
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b003      	add	sp, #12
 800444c:	bd90      	pop	{r4, r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	2000062c 	.word	0x2000062c

08004454 <CH395CMDGetUnreachIPPT>:
                        第4-8字节为IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDGetUnreachIPPT(uint8_t *list)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD08_GET_UNREACH_IPPORT);
 800445c:	2028      	movs	r0, #40	; 0x28
 800445e:	f000 fbef 	bl	8004c40 <xWriteCH395Cmd>
    for(i = 0; i < 8; i++)
 8004462:	230f      	movs	r3, #15
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e00c      	b.n	8004486 <CH395CMDGetUnreachIPPT+0x32>
    {
        *list++ = xReadCH395Data();
 800446c:	687c      	ldr	r4, [r7, #4]
 800446e:	1c63      	adds	r3, r4, #1
 8004470:	607b      	str	r3, [r7, #4]
 8004472:	f000 fc1f 	bl	8004cb4 <xReadCH395Data>
 8004476:	0003      	movs	r3, r0
 8004478:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 8; i++)
 800447a:	210f      	movs	r1, #15
 800447c:	187b      	adds	r3, r7, r1
 800447e:	781a      	ldrb	r2, [r3, #0]
 8004480:	187b      	adds	r3, r7, r1
 8004482:	3201      	adds	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	230f      	movs	r3, #15
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b07      	cmp	r3, #7
 800448e:	d9ed      	bls.n	800446c <CH395CMDGetUnreachIPPT+0x18>
    }   
    xEndCH395Cmd();
 8004490:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <CH395CMDGetUnreachIPPT+0x54>)
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <CH395CMDGetUnreachIPPT+0x54>)
 8004496:	889b      	ldrh	r3, [r3, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	0019      	movs	r1, r3
 800449c:	f7fc ff3b 	bl	8001316 <HAL_GPIO_WritePin>
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	46bd      	mov	sp, r7
 80044a4:	b005      	add	sp, #20
 80044a6:	bd90      	pop	{r4, r7, pc}
 80044a8:	2000062c 	.word	0x2000062c

080044ac <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	0002      	movs	r2, r0
 80044b4:	1dfb      	adds	r3, r7, #7
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	1dbb      	adds	r3, r7, #6
 80044ba:	1c0a      	adds	r2, r1, #0
 80044bc:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 80044be:	2034      	movs	r0, #52	; 0x34
 80044c0:	f000 fbbe 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80044c4:	1dfb      	adds	r3, r7, #7
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fbe1 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data(prottype);
 80044ce:	1dbb      	adds	r3, r7, #6
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	0018      	movs	r0, r3
 80044d4:	f000 fbdc 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <CH395SetSocketProtType+0x44>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <CH395SetSocketProtType+0x44>)
 80044de:	889b      	ldrh	r3, [r3, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	0019      	movs	r1, r3
 80044e4:	f7fc ff17 	bl	8001316 <HAL_GPIO_WritePin>
}
 80044e8:	46c0      	nop			; (mov r8, r8)
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b002      	add	sp, #8
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	2000062c 	.word	0x2000062c

080044f4 <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	0002      	movs	r2, r0
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	1d3b      	adds	r3, r7, #4
 8004502:	1c0a      	adds	r2, r1, #0
 8004504:	801a      	strh	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 8004506:	2033      	movs	r0, #51	; 0x33
 8004508:	f000 fb9a 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800450c:	1dfb      	adds	r3, r7, #7
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fbbd 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 8004516:	1d3b      	adds	r3, r7, #4
 8004518:	881b      	ldrh	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	0018      	movs	r0, r3
 800451e:	f000 fbb7 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	881b      	ldrh	r3, [r3, #0]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	b29b      	uxth	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	0018      	movs	r0, r3
 800452e:	f000 fbaf 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <CH395SetSocketSourPort+0x58>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <CH395SetSocketSourPort+0x58>)
 8004538:	889b      	ldrh	r3, [r3, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	0019      	movs	r1, r3
 800453e:	f7fc feea 	bl	8001316 <HAL_GPIO_WritePin>
}
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	46bd      	mov	sp, r7
 8004546:	b002      	add	sp, #8
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	2000062c 	.word	0x2000062c

08004550 <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,const uint8_t *databuf,uint16_t len)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	0011      	movs	r1, r2
 800455a:	1dfb      	adds	r3, r7, #7
 800455c:	1c02      	adds	r2, r0, #0
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	1c0a      	adds	r2, r1, #0
 8004564:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 8004566:	e003      	b.n	8004570 <CH395SendData+0x20>
    {
    	Delay_ms(10);
 8004568:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <CH395SendData+0xd8>)
 800456a:	0018      	movs	r0, r3
 800456c:	f000 fbd8 	bl	8004d20 <Delay_us>
    while(!(ch395.TX_available & (1<<sockindex)))
 8004570:	4b2e      	ldr	r3, [pc, #184]	; (800462c <CH395SendData+0xdc>)
 8004572:	7edb      	ldrb	r3, [r3, #27]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	001a      	movs	r2, r3
 8004578:	1dfb      	adds	r3, r7, #7
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	411a      	asrs	r2, r3
 800457e:	0013      	movs	r3, r2
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	d0f0      	beq.n	8004568 <CH395SendData+0x18>
    }
    ch395.TX_available &= ~(1<<sockindex);
 8004586:	4b29      	ldr	r3, [pc, #164]	; (800462c <CH395SendData+0xdc>)
 8004588:	7edb      	ldrb	r3, [r3, #27]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	b25b      	sxtb	r3, r3
 800458e:	1dfa      	adds	r2, r7, #7
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	4091      	lsls	r1, r2
 8004596:	000a      	movs	r2, r1
 8004598:	b252      	sxtb	r2, r2
 800459a:	43d2      	mvns	r2, r2
 800459c:	b252      	sxtb	r2, r2
 800459e:	4013      	ands	r3, r2
 80045a0:	b25b      	sxtb	r3, r3
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	4b21      	ldr	r3, [pc, #132]	; (800462c <CH395SendData+0xdc>)
 80045a6:	76da      	strb	r2, [r3, #27]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 80045a8:	2039      	movs	r0, #57	; 0x39
 80045aa:	f000 fb49 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	0018      	movs	r0, r3
 80045b4:	f000 fb6c 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 80045b8:	1d3b      	adds	r3, r7, #4
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	0018      	movs	r0, r3
 80045c0:	f000 fb66 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 80045c4:	1d3b      	adds	r3, r7, #4
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 fb5e 	bl	8004c90 <xWriteCH395Data>
    Delay_us(2);
 80045d4:	2002      	movs	r0, #2
 80045d6:	f000 fba3 	bl	8004d20 <Delay_us>
    for(i = 0; i < len; i++)
 80045da:	230e      	movs	r3, #14
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2200      	movs	r2, #0
 80045e0:	801a      	strh	r2, [r3, #0]
 80045e2:	e00d      	b.n	8004600 <CH395SendData+0xb0>
    {
        xWriteCH395Data(*databuf);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 fb51 	bl	8004c90 <xWriteCH395Data>
        databuf++;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3301      	adds	r3, #1
 80045f2:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 80045f4:	210e      	movs	r1, #14
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	3201      	adds	r2, #1
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	230e      	movs	r3, #14
 8004602:	18fa      	adds	r2, r7, r3
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	8812      	ldrh	r2, [r2, #0]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d3ea      	bcc.n	80045e4 <CH395SendData+0x94>
    }
    xEndCH395Cmd();
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <CH395SendData+0xe0>)
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <CH395SendData+0xe0>)
 8004614:	889b      	ldrh	r3, [r3, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	0019      	movs	r1, r3
 800461a:	f7fc fe7c 	bl	8001316 <HAL_GPIO_WritePin>
}
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	46bd      	mov	sp, r7
 8004622:	b004      	add	sp, #16
 8004624:	bd80      	pop	{r7, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	00002710 	.word	0x00002710
 800462c:	20000010 	.word	0x20000010
 8004630:	2000062c 	.word	0x2000062c

08004634 <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	0002      	movs	r2, r0
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	1d3b      	adds	r3, r7, #4
 8004642:	1c0a      	adds	r2, r1, #0
 8004644:	801a      	strh	r2, [r3, #0]
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8004646:	2039      	movs	r0, #57	; 0x39
 8004648:	f000 fafa 	bl	8004c40 <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 fb1d 	bl	8004c90 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	0018      	movs	r0, r3
 800465e:	f000 fb17 	bl	8004c90 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 8004662:	1d3b      	adds	r3, r7, #4
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	b29b      	uxth	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	0018      	movs	r0, r3
 800466e:	f000 fb0f 	bl	8004c90 <xWriteCH395Data>
	Delay_us(2);
 8004672:	2002      	movs	r0, #2
 8004674:	f000 fb54 	bl	8004d20 <Delay_us>
}
 8004678:	46c0      	nop			; (mov r8, r8)
 800467a:	46bd      	mov	sp, r7
 800467c:	b002      	add	sp, #8
 800467e:	bd80      	pop	{r7, pc}

08004680 <CH395ContinueSendingData>:

void CH395ContinueSendingData(const uint8_t *databuf, uint16_t len)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	000a      	movs	r2, r1
 800468a:	1cbb      	adds	r3, r7, #2
 800468c:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	for(i=0; i<len; ++i)
 800468e:	230e      	movs	r3, #14
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2200      	movs	r2, #0
 8004694:	801a      	strh	r2, [r3, #0]
 8004696:	e00d      	b.n	80046b4 <CH395ContinueSendingData+0x34>
	{
		xWriteCH395Data(*databuf);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	0018      	movs	r0, r3
 800469e:	f000 faf7 	bl	8004c90 <xWriteCH395Data>
		databuf++;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	3301      	adds	r3, #1
 80046a6:	607b      	str	r3, [r7, #4]
	for(i=0; i<len; ++i)
 80046a8:	220e      	movs	r2, #14
 80046aa:	18bb      	adds	r3, r7, r2
 80046ac:	18ba      	adds	r2, r7, r2
 80046ae:	8812      	ldrh	r2, [r2, #0]
 80046b0:	3201      	adds	r2, #1
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	230e      	movs	r3, #14
 80046b6:	18fa      	adds	r2, r7, r3
 80046b8:	1cbb      	adds	r3, r7, #2
 80046ba:	8812      	ldrh	r2, [r2, #0]
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3ea      	bcc.n	8004698 <CH395ContinueSendingData+0x18>
	}
}
 80046c2:	46c0      	nop			; (mov r8, r8)
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b004      	add	sp, #16
 80046ca:	bd80      	pop	{r7, pc}

080046cc <CH395Complete>:
void CH395Complete()
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
	xEndCH395Cmd();
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <CH395Complete+0x1c>)
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <CH395Complete+0x1c>)
 80046d6:	889b      	ldrh	r3, [r3, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	0019      	movs	r1, r3
 80046dc:	f7fc fe1b 	bl	8001316 <HAL_GPIO_WritePin>
}
 80046e0:	46c0      	nop			; (mov r8, r8)
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	2000062c 	.word	0x2000062c

080046ec <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	0002      	movs	r2, r0
 80046f4:	1dfb      	adds	r3, r7, #7
 80046f6:	701a      	strb	r2, [r3, #0]
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 80046f8:	203b      	movs	r0, #59	; 0x3b
 80046fa:	f000 faa1 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 80046fe:	1dfb      	adds	r3, r7, #7
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 fac4 	bl	8004c90 <xWriteCH395Data>
    i = xReadCH395Data();
 8004708:	f000 fad4 	bl	8004cb4 <xReadCH395Data>
 800470c:	0003      	movs	r3, r0
 800470e:	001a      	movs	r2, r3
 8004710:	240e      	movs	r4, #14
 8004712:	193b      	adds	r3, r7, r4
 8004714:	801a      	strh	r2, [r3, #0]
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 8004716:	f000 facd 	bl	8004cb4 <xReadCH395Data>
 800471a:	0003      	movs	r3, r0
 800471c:	b29b      	uxth	r3, r3
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	b299      	uxth	r1, r3
 8004722:	193b      	adds	r3, r7, r4
 8004724:	193a      	adds	r2, r7, r4
 8004726:	8812      	ldrh	r2, [r2, #0]
 8004728:	188a      	adds	r2, r1, r2
 800472a:	801a      	strh	r2, [r3, #0]
    xEndCH395Cmd();
 800472c:	4b06      	ldr	r3, [pc, #24]	; (8004748 <CH395GetRecvLength+0x5c>)
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <CH395GetRecvLength+0x5c>)
 8004732:	889b      	ldrh	r3, [r3, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	0019      	movs	r1, r3
 8004738:	f7fc fded 	bl	8001316 <HAL_GPIO_WritePin>
    return i;
 800473c:	193b      	adds	r3, r7, r4
 800473e:	881b      	ldrh	r3, [r3, #0]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b005      	add	sp, #20
 8004746:	bd90      	pop	{r4, r7, pc}
 8004748:	2000062c 	.word	0x2000062c

0800474c <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	0002      	movs	r2, r0
 8004754:	1dfb      	adds	r3, r7, #7
 8004756:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 8004758:	202e      	movs	r0, #46	; 0x2e
 800475a:	f000 fa71 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 800475e:	1dfb      	adds	r3, r7, #7
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fa94 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <CH395ClearRecvBuf+0x34>)
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <CH395ClearRecvBuf+0x34>)
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	0019      	movs	r1, r3
 8004774:	f7fc fdcf 	bl	8001316 <HAL_GPIO_WritePin>
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}
 8004780:	2000062c 	.word	0x2000062c

08004784 <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	603a      	str	r2, [r7, #0]
 800478c:	1dfb      	adds	r3, r7, #7
 800478e:	1c02      	adds	r2, r0, #0
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	1c0a      	adds	r2, r1, #0
 8004796:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    if(!len)return;
 8004798:	1d3b      	adds	r3, r7, #4
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d03c      	beq.n	800481a <CH395GetRecvData+0x96>
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 80047a0:	203c      	movs	r0, #60	; 0x3c
 80047a2:	f000 fa4d 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80047a6:	1dfb      	adds	r3, r7, #7
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fa70 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 80047b0:	1d3b      	adds	r3, r7, #4
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fa6a 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 80047bc:	1d3b      	adds	r3, r7, #4
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	0018      	movs	r0, r3
 80047c8:	f000 fa62 	bl	8004c90 <xWriteCH395Data>
    Delay_us(1);
 80047cc:	2001      	movs	r0, #1
 80047ce:	f000 faa7 	bl	8004d20 <Delay_us>
    for(i = 0; i < len; i++)
 80047d2:	230e      	movs	r3, #14
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	2200      	movs	r2, #0
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	e00e      	b.n	80047fa <CH395GetRecvData+0x76>
    {
       *pbuf = xReadCH395Data();
 80047dc:	f000 fa6a 	bl	8004cb4 <xReadCH395Data>
 80047e0:	0003      	movs	r3, r0
 80047e2:	001a      	movs	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
       pbuf++;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	3301      	adds	r3, #1
 80047ec:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 80047ee:	210e      	movs	r1, #14
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	881a      	ldrh	r2, [r3, #0]
 80047f4:	187b      	adds	r3, r7, r1
 80047f6:	3201      	adds	r2, #1
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	230e      	movs	r3, #14
 80047fc:	18fa      	adds	r2, r7, r3
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	8812      	ldrh	r2, [r2, #0]
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d3e9      	bcc.n	80047dc <CH395GetRecvData+0x58>
    }   
    xEndCH395Cmd();
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <CH395GetRecvData+0xa0>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <CH395GetRecvData+0xa0>)
 800480e:	889b      	ldrh	r3, [r3, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	0019      	movs	r1, r3
 8004814:	f7fc fd7f 	bl	8001316 <HAL_GPIO_WritePin>
 8004818:	e000      	b.n	800481c <CH395GetRecvData+0x98>
    if(!len)return;
 800481a:	46c0      	nop			; (mov r8, r8)
}
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	2000062c 	.word	0x2000062c

08004828 <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	0002      	movs	r2, r0
 8004830:	1dfb      	adds	r3, r7, #7
 8004832:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8004834:	230f      	movs	r3, #15
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 800483c:	230e      	movs	r3, #14
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 8004844:	2035      	movs	r0, #53	; 0x35
 8004846:	f000 f9fb 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800484a:	1dfb      	adds	r3, r7, #7
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	0018      	movs	r0, r3
 8004850:	f000 fa1e 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 8004854:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <CH395OpenSocket+0x7c>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <CH395OpenSocket+0x7c>)
 800485a:	889b      	ldrh	r3, [r3, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	0019      	movs	r1, r3
 8004860:	f7fc fd59 	bl	8001316 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <CH395OpenSocket+0x80>)
 8004866:	0018      	movs	r0, r3
 8004868:	f000 fa5a 	bl	8004d20 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 800486c:	250e      	movs	r5, #14
 800486e:	197c      	adds	r4, r7, r5
 8004870:	f7ff fdd4 	bl	800441c <CH395GetCmdStatus>
 8004874:	0003      	movs	r3, r0
 8004876:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004878:	197b      	adds	r3, r7, r5
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b10      	cmp	r3, #16
 800487e:	d109      	bne.n	8004894 <CH395OpenSocket+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004880:	220f      	movs	r2, #15
 8004882:	18bb      	adds	r3, r7, r2
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	18ba      	adds	r2, r7, r2
 8004888:	1c59      	adds	r1, r3, #1
 800488a:	7011      	strb	r1, [r2, #0]
 800488c:	2bc8      	cmp	r3, #200	; 0xc8
 800488e:	d9e9      	bls.n	8004864 <CH395OpenSocket+0x3c>
 8004890:	23fa      	movs	r3, #250	; 0xfa
 8004892:	e003      	b.n	800489c <CH395OpenSocket+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004894:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004896:	230e      	movs	r3, #14
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	781b      	ldrb	r3, [r3, #0]
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bdb0      	pop	{r4, r5, r7, pc}
 80048a4:	2000062c 	.word	0x2000062c
 80048a8:	00001388 	.word	0x00001388

080048ac <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 80048ac:	b5b0      	push	{r4, r5, r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	0002      	movs	r2, r0
 80048b4:	1dfb      	adds	r3, r7, #7
 80048b6:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 80048b8:	230f      	movs	r3, #15
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 80048c0:	230e      	movs	r3, #14
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 80048c8:	2036      	movs	r0, #54	; 0x36
 80048ca:	f000 f9b9 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80048ce:	1dfb      	adds	r3, r7, #7
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	0018      	movs	r0, r3
 80048d4:	f000 f9dc 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <CH395TCPListen+0x7c>)
 80048da:	6818      	ldr	r0, [r3, #0]
 80048dc:	4b12      	ldr	r3, [pc, #72]	; (8004928 <CH395TCPListen+0x7c>)
 80048de:	889b      	ldrh	r3, [r3, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	0019      	movs	r1, r3
 80048e4:	f7fc fd17 	bl	8001316 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 80048e8:	4b10      	ldr	r3, [pc, #64]	; (800492c <CH395TCPListen+0x80>)
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 fa18 	bl	8004d20 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80048f0:	250e      	movs	r5, #14
 80048f2:	197c      	adds	r4, r7, r5
 80048f4:	f7ff fd92 	bl	800441c <CH395GetCmdStatus>
 80048f8:	0003      	movs	r3, r0
 80048fa:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80048fc:	197b      	adds	r3, r7, r5
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b10      	cmp	r3, #16
 8004902:	d109      	bne.n	8004918 <CH395TCPListen+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004904:	220f      	movs	r2, #15
 8004906:	18bb      	adds	r3, r7, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	18ba      	adds	r2, r7, r2
 800490c:	1c59      	adds	r1, r3, #1
 800490e:	7011      	strb	r1, [r2, #0]
 8004910:	2bc8      	cmp	r3, #200	; 0xc8
 8004912:	d9e9      	bls.n	80048e8 <CH395TCPListen+0x3c>
 8004914:	23fa      	movs	r3, #250	; 0xfa
 8004916:	e003      	b.n	8004920 <CH395TCPListen+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004918:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 800491a:	230e      	movs	r3, #14
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	781b      	ldrb	r3, [r3, #0]
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b004      	add	sp, #16
 8004926:	bdb0      	pop	{r4, r5, r7, pc}
 8004928:	2000062c 	.word	0x2000062c
 800492c:	00001388 	.word	0x00001388

08004930 <CH395TCPDisconnect>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
uint8_t CH395TCPDisconnect(uint8_t sockindex)
{
 8004930:	b5b0      	push	{r4, r5, r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	0002      	movs	r2, r0
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 800493c:	230f      	movs	r3, #15
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	2200      	movs	r2, #0
 8004942:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 8004944:	230e      	movs	r3, #14
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_DISNCONNECT_SN);
 800494c:	2038      	movs	r0, #56	; 0x38
 800494e:	f000 f977 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004952:	1dfb      	adds	r3, r7, #7
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	0018      	movs	r0, r3
 8004958:	f000 f99a 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <CH395TCPDisconnect+0x7c>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <CH395TCPDisconnect+0x7c>)
 8004962:	889b      	ldrh	r3, [r3, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	0019      	movs	r1, r3
 8004968:	f7fc fcd5 	bl	8001316 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <CH395TCPDisconnect+0x80>)
 800496e:	0018      	movs	r0, r3
 8004970:	f000 f9d6 	bl	8004d20 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8004974:	250e      	movs	r5, #14
 8004976:	197c      	adds	r4, r7, r5
 8004978:	f7ff fd50 	bl	800441c <CH395GetCmdStatus>
 800497c:	0003      	movs	r3, r0
 800497e:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004980:	197b      	adds	r3, r7, r5
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b10      	cmp	r3, #16
 8004986:	d109      	bne.n	800499c <CH395TCPDisconnect+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004988:	220f      	movs	r2, #15
 800498a:	18bb      	adds	r3, r7, r2
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	18ba      	adds	r2, r7, r2
 8004990:	1c59      	adds	r1, r3, #1
 8004992:	7011      	strb	r1, [r2, #0]
 8004994:	2bc8      	cmp	r3, #200	; 0xc8
 8004996:	d9e9      	bls.n	800496c <CH395TCPDisconnect+0x3c>
 8004998:	23fa      	movs	r3, #250	; 0xfa
 800499a:	e003      	b.n	80049a4 <CH395TCPDisconnect+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 800499c:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 800499e:	230e      	movs	r3, #14
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	781b      	ldrb	r3, [r3, #0]
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	b004      	add	sp, #16
 80049aa:	bdb0      	pop	{r4, r5, r7, pc}
 80049ac:	2000062c 	.word	0x2000062c
 80049b0:	00001388 	.word	0x00001388

080049b4 <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 80049b4:	b5b0      	push	{r4, r5, r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	0002      	movs	r2, r0
 80049bc:	1dfb      	adds	r3, r7, #7
 80049be:	701a      	strb	r2, [r3, #0]
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	f000 f93d 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80049c6:	1dfb      	adds	r3, r7, #7
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	0018      	movs	r0, r3
 80049cc:	f000 f960 	bl	8004c90 <xWriteCH395Data>
    Delay_us(2);
 80049d0:	2002      	movs	r0, #2
 80049d2:	f000 f9a5 	bl	8004d20 <Delay_us>
    intstatus = xReadCH395Data();
 80049d6:	250f      	movs	r5, #15
 80049d8:	197c      	adds	r4, r7, r5
 80049da:	f000 f96b 	bl	8004cb4 <xReadCH395Data>
 80049de:	0003      	movs	r3, r0
 80049e0:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <CH395GetSocketInt+0x4c>)
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <CH395GetSocketInt+0x4c>)
 80049e8:	889b      	ldrh	r3, [r3, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	0019      	movs	r1, r3
 80049ee:	f7fc fc92 	bl	8001316 <HAL_GPIO_WritePin>
    return intstatus;
 80049f2:	197b      	adds	r3, r7, r5
 80049f4:	781b      	ldrb	r3, [r3, #0]
}
 80049f6:	0018      	movs	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b004      	add	sp, #16
 80049fc:	bdb0      	pop	{r4, r5, r7, pc}
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	2000062c 	.word	0x2000062c

08004a04 <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 8004a04:	b5b0      	push	{r4, r5, r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	1dfb      	adds	r3, r7, #7
 8004a0e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8004a10:	230f      	movs	r3, #15
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 8004a18:	2041      	movs	r0, #65	; 0x41
 8004a1a:	f000 f911 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 8004a1e:	1dfb      	adds	r3, r7, #7
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 f934 	bl	8004c90 <xWriteCH395Data>
    xEndCH395Cmd();
 8004a28:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <CH395DHCPEnable+0x74>)
 8004a2a:	6818      	ldr	r0, [r3, #0]
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <CH395DHCPEnable+0x74>)
 8004a2e:	889b      	ldrh	r3, [r3, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	0019      	movs	r1, r3
 8004a34:	f7fc fc6f 	bl	8001316 <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(20);
 8004a38:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <CH395DHCPEnable+0x78>)
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f970 	bl	8004d20 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8004a40:	250e      	movs	r5, #14
 8004a42:	197c      	adds	r4, r7, r5
 8004a44:	f7ff fcea 	bl	800441c <CH395GetCmdStatus>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004a4c:	197b      	adds	r3, r7, r5
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d109      	bne.n	8004a68 <CH395DHCPEnable+0x64>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004a54:	220f      	movs	r2, #15
 8004a56:	18bb      	adds	r3, r7, r2
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	18ba      	adds	r2, r7, r2
 8004a5c:	1c59      	adds	r1, r3, #1
 8004a5e:	7011      	strb	r1, [r2, #0]
 8004a60:	2bc8      	cmp	r3, #200	; 0xc8
 8004a62:	d9e9      	bls.n	8004a38 <CH395DHCPEnable+0x34>
 8004a64:	23fa      	movs	r3, #250	; 0xfa
 8004a66:	e003      	b.n	8004a70 <CH395DHCPEnable+0x6c>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004a68:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004a6a:	230e      	movs	r3, #14
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	781b      	ldrb	r3, [r3, #0]
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b004      	add	sp, #16
 8004a76:	bdb0      	pop	{r4, r5, r7, pc}
 8004a78:	2000062c 	.word	0x2000062c
 8004a7c:	00004e20 	.word	0x00004e20

08004a80 <CH395GetDHCPStatus>:
* Input          : None
* Output         : None
* Return         : DHCP状态，0为成功，其他值表示错误
*******************************************************************************/
uint8_t CH395GetDHCPStatus(void)
{
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
    uint8_t status;
    xWriteCH395Cmd(CMD01_GET_DHCP_STATUS);
 8004a86:	2042      	movs	r0, #66	; 0x42
 8004a88:	f000 f8da 	bl	8004c40 <xWriteCH395Cmd>
    status = xReadCH395Data();
 8004a8c:	1dfc      	adds	r4, r7, #7
 8004a8e:	f000 f911 	bl	8004cb4 <xReadCH395Data>
 8004a92:	0003      	movs	r3, r0
 8004a94:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <CH395GetDHCPStatus+0x34>)
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <CH395GetDHCPStatus+0x34>)
 8004a9c:	889b      	ldrh	r3, [r3, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	f7fc fc38 	bl	8001316 <HAL_GPIO_WritePin>
    return status;
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b003      	add	sp, #12
 8004ab0:	bd90      	pop	{r4, r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	2000062c 	.word	0x2000062c

08004ab8 <CH395GetIPInf>:
* Input          : None
* Output         : 12个字节的IP,子网掩码和网关地址
* Return         : None
*******************************************************************************/
void CH395GetIPInf(uint8_t *addr)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
    uint8_t i;
    xWriteCH395Cmd(CMD014_GET_IP_INF);
 8004ac0:	2043      	movs	r0, #67	; 0x43
 8004ac2:	f000 f8bd 	bl	8004c40 <xWriteCH395Cmd>
    for(i = 0; i < 20; i++)
 8004ac6:	230f      	movs	r3, #15
 8004ac8:	18fb      	adds	r3, r7, r3
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e00c      	b.n	8004aea <CH395GetIPInf+0x32>
    {
     *addr++ = xReadCH395Data();
 8004ad0:	687c      	ldr	r4, [r7, #4]
 8004ad2:	1c63      	adds	r3, r4, #1
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	f000 f8ed 	bl	8004cb4 <xReadCH395Data>
 8004ada:	0003      	movs	r3, r0
 8004adc:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 20; i++)
 8004ade:	210f      	movs	r1, #15
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	781a      	ldrb	r2, [r3, #0]
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	3201      	adds	r2, #1
 8004ae8:	701a      	strb	r2, [r3, #0]
 8004aea:	230f      	movs	r3, #15
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b13      	cmp	r3, #19
 8004af2:	d9ed      	bls.n	8004ad0 <CH395GetIPInf+0x18>
    }
    xEndCH395Cmd();
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <CH395GetIPInf+0x54>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <CH395GetIPInf+0x54>)
 8004afa:	889b      	ldrh	r3, [r3, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	0019      	movs	r1, r3
 8004b00:	f7fc fc09 	bl	8001316 <HAL_GPIO_WritePin>
}
 8004b04:	46c0      	nop			; (mov r8, r8)
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b005      	add	sp, #20
 8004b0a:	bd90      	pop	{r4, r7, pc}
 8004b0c:	2000062c 	.word	0x2000062c

08004b10 <CH395SetSocketRecvBuf>:
                 ：blknum     单位缓冲区个数 ，单位为512字节
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketRecvBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	0004      	movs	r4, r0
 8004b18:	0008      	movs	r0, r1
 8004b1a:	0011      	movs	r1, r2
 8004b1c:	1dfb      	adds	r3, r7, #7
 8004b1e:	1c22      	adds	r2, r4, #0
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	1dbb      	adds	r3, r7, #6
 8004b24:	1c02      	adds	r2, r0, #0
 8004b26:	701a      	strb	r2, [r3, #0]
 8004b28:	1d7b      	adds	r3, r7, #5
 8004b2a:	1c0a      	adds	r2, r1, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_RECV_BUF);
 8004b2e:	2052      	movs	r0, #82	; 0x52
 8004b30:	f000 f886 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004b34:	1dfb      	adds	r3, r7, #7
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 f8a9 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 8004b3e:	1dbb      	adds	r3, r7, #6
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	0018      	movs	r0, r3
 8004b44:	f000 f8a4 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 8004b48:	1d7b      	adds	r3, r7, #5
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f000 f89f 	bl	8004c90 <xWriteCH395Data>
}
 8004b52:	46c0      	nop			; (mov r8, r8)
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b003      	add	sp, #12
 8004b58:	bd90      	pop	{r4, r7, pc}

08004b5a <CH395SetSocketSendBuf>:
                 ：blknum     单位缓冲区个数
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSendBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 8004b5a:	b590      	push	{r4, r7, lr}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	0004      	movs	r4, r0
 8004b62:	0008      	movs	r0, r1
 8004b64:	0011      	movs	r1, r2
 8004b66:	1dfb      	adds	r3, r7, #7
 8004b68:	1c22      	adds	r2, r4, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	1dbb      	adds	r3, r7, #6
 8004b6e:	1c02      	adds	r2, r0, #0
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	1d7b      	adds	r3, r7, #5
 8004b74:	1c0a      	adds	r2, r1, #0
 8004b76:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SEND_BUF);
 8004b78:	2053      	movs	r0, #83	; 0x53
 8004b7a:	f000 f861 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004b7e:	1dfb      	adds	r3, r7, #7
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 f884 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 8004b88:	1dbb      	adds	r3, r7, #6
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 f87f 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 8004b92:	1d7b      	adds	r3, r7, #5
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f87a 	bl	8004c90 <xWriteCH395Data>
}
 8004b9c:	46c0      	nop			; (mov r8, r8)
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	b003      	add	sp, #12
 8004ba2:	bd90      	pop	{r4, r7, pc}

08004ba4 <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 8004bac:	2055      	movs	r0, #85	; 0x55
 8004bae:	f000 f847 	bl	8004c40 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 f86a 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f000 f862 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	0c1b      	lsrs	r3, r3, #16
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 f85c 	bl	8004c90 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0e1b      	lsrs	r3, r3, #24
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 f856 	bl	8004c90 <xWriteCH395Data>
}
 8004be4:	46c0      	nop			; (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	b002      	add	sp, #8
 8004bea:	bd80      	pop	{r7, pc}

08004bec <CH395CMDGetGlobIntStatus_ALL>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint16_t CH395CMDGetGlobIntStatus_ALL(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
		uint16_t init_status;
		xWriteCH395Cmd(CMD02_GET_GLOB_INT_STATUS_ALL);
 8004bf2:	2019      	movs	r0, #25
 8004bf4:	f000 f824 	bl	8004c40 <xWriteCH395Cmd>
		Delay_us(2);
 8004bf8:	2002      	movs	r0, #2
 8004bfa:	f000 f891 	bl	8004d20 <Delay_us>
		init_status = xReadCH395Data();
 8004bfe:	f000 f859 	bl	8004cb4 <xReadCH395Data>
 8004c02:	0003      	movs	r3, r0
 8004c04:	001a      	movs	r2, r3
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	801a      	strh	r2, [r3, #0]
		init_status = (uint16_t)(xReadCH395Data()<<8) + init_status;
 8004c0a:	f000 f853 	bl	8004cb4 <xReadCH395Data>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	b299      	uxth	r1, r3
 8004c16:	1dbb      	adds	r3, r7, #6
 8004c18:	1dba      	adds	r2, r7, #6
 8004c1a:	8812      	ldrh	r2, [r2, #0]
 8004c1c:	188a      	adds	r2, r1, r2
 8004c1e:	801a      	strh	r2, [r3, #0]
		xEndCH395Cmd();
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <CH395CMDGetGlobIntStatus_ALL+0x50>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <CH395CMDGetGlobIntStatus_ALL+0x50>)
 8004c26:	889b      	ldrh	r3, [r3, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	0019      	movs	r1, r3
 8004c2c:	f7fc fb73 	bl	8001316 <HAL_GPIO_WritePin>
		return 	init_status;
 8004c30:	1dbb      	adds	r3, r7, #6
 8004c32:	881b      	ldrh	r3, [r3, #0]
}
 8004c34:	0018      	movs	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	2000062c 	.word	0x2000062c

08004c40 <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	0002      	movs	r2, r0
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	701a      	strb	r2, [r3, #0]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <xWriteCH395Cmd+0x48>)
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <xWriteCH395Cmd+0x48>)
 8004c52:	889b      	ldrh	r3, [r3, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	0019      	movs	r1, r3
 8004c58:	f7fc fb5d 	bl	8001316 <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <xWriteCH395Cmd+0x48>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <xWriteCH395Cmd+0x48>)
 8004c62:	889b      	ldrh	r3, [r3, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	0019      	movs	r1, r3
 8004c68:	f7fc fb55 	bl	8001316 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 8004c6c:	1df9      	adds	r1, r7, #7
 8004c6e:	4807      	ldr	r0, [pc, #28]	; (8004c8c <xWriteCH395Cmd+0x4c>)
 8004c70:	2364      	movs	r3, #100	; 0x64
 8004c72:	2201      	movs	r2, #1
 8004c74:	f7fd f882 	bl	8001d7c <HAL_SPI_Transmit>
    Delay_us(2);
 8004c78:	2002      	movs	r0, #2
 8004c7a:	f000 f851 	bl	8004d20 <Delay_us>
}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b002      	add	sp, #8
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	2000062c 	.word	0x2000062c
 8004c8c:	20001198 	.word	0x20001198

08004c90 <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	0002      	movs	r2, r0
 8004c98:	1dfb      	adds	r3, r7, #7
 8004c9a:	701a      	strb	r2, [r3, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 8004c9c:	1df9      	adds	r1, r7, #7
 8004c9e:	4804      	ldr	r0, [pc, #16]	; (8004cb0 <xWriteCH395Data+0x20>)
 8004ca0:	2364      	movs	r3, #100	; 0x64
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f7fd f86a 	bl	8001d7c <HAL_SPI_Transmit>
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b002      	add	sp, #8
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20001198 	.word	0x20001198

08004cb4 <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 8004cba:	1df9      	adds	r1, r7, #7
 8004cbc:	4805      	ldr	r0, [pc, #20]	; (8004cd4 <xReadCH395Data+0x20>)
 8004cbe:	2364      	movs	r3, #100	; 0x64
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f7fd f9bb 	bl	800203c <HAL_SPI_Receive>
    return i;
 8004cc6:	1dfb      	adds	r3, r7, #7
 8004cc8:	781b      	ldrb	r3, [r3, #0]
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	20001198 	.word	0x20001198

08004cd8 <init_config>:
	{"label.5", &(cfg.sAntNames[4]), CONFIG_VAR_BYTESTRING_LONG},
	{"label.6", &(cfg.sAntNames[5]), CONFIG_VAR_BYTESTRING_LONG},
};

void init_config(Config *p)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    if(mtxConfig == NULL) mtxConfig = xSemaphoreCreateMutex();
    xSemaphoreTake(mtxConfig, portMAX_DELAY);
    #endif
    // set valid string
    strncpy(p->sValid, VALID_STRING, 8);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <init_config+0x40>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	0019      	movs	r1, r3
 8004cea:	f003 fc58 	bl	800859e <strncpy>
    // set config inital values
    memset(p->sAntNames, 0, sizeof(p->sAntNames));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	330a      	adds	r3, #10
 8004cf2:	2260      	movs	r2, #96	; 0x60
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f003 fbff 	bl	80084fa <memset>
    memset(p->nRadioToAntNums, 0, sizeof(p->nRadioToAntNums));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	2202      	movs	r2, #2
 8004d02:	2100      	movs	r1, #0
 8004d04:	0018      	movs	r0, r3
 8004d06:	f003 fbf8 	bl	80084fa <memset>

    isModified = true;
 8004d0a:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <init_config+0x44>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreGive(mtxConfig);
    #endif
}
 8004d10:	46c0      	nop			; (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b002      	add	sp, #8
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20000634 	.word	0x20000634
 8004d1c:	200006b4 	.word	0x200006b4

08004d20 <Delay_us>:
 *      Author: Zening
 */

#include "Delay.h"

void Delay_us(unsigned int n) {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	unsigned int t = n * SysCLK_Freq /2; // 32: MHz
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	015b      	lsls	r3, r3, #5
 8004d2c:	085b      	lsrs	r3, r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]
	while(--t){__NOP();};
 8004d30:	e000      	b.n	8004d34 <Delay_us+0x14>
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f8      	bne.n	8004d32 <Delay_us+0x12>
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b004      	add	sp, #16
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <FS_begin>:
#include <string.h>
#include "FS.h"
FS_typedef FS;

BOOL FS_begin(FS_typedef* pFS, uint32_t* addr_base)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
	if((uint32_t)addr_base < MAX_ADDR && ((pFS->n_files = *(uint32_t*)(addr_base)) != 0xffffffff))
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	; (8004d84 <FS_begin+0x38>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d80c      	bhi.n	8004d78 <FS_begin+0x2c>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	d004      	beq.n	8004d78 <FS_begin+0x2c>
	{
		pFS->addr_base = addr_base;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	601a      	str	r2, [r3, #0]
		return true;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <FS_begin+0x2e>
	}
	else
	{
		return false;
 8004d78:	2300      	movs	r3, #0
	}
}
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b002      	add	sp, #8
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	0800fffe 	.word	0x0800fffe

08004d88 <FS_open>:

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b08d      	sub	sp, #52	; 0x34
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
	int i = pFS->n_files;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t offset = (uint32_t)pFS->addr_base;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24

	FSfile_typedef file;
	file.size = 0;
 8004da6:	2114      	movs	r1, #20
 8004da8:	187b      	adds	r3, r7, r1
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
	file.p_content = NULL;
 8004dae:	187b      	adds	r3, r7, r1
 8004db0:	2200      	movs	r2, #0
 8004db2:	605a      	str	r2, [r3, #4]
	file.path = NULL;
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
	do{
		addr ++;
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
		i--;
 8004dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	18d3      	adds	r3, r2, r3
 8004dce:	3308      	adds	r3, #8
 8004dd0:	623b      	str	r3, [r7, #32]
		if(strcmp(path, _path) == 0) // path matched
 8004dd2:	6a3a      	ldr	r2, [r7, #32]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f7fb f995 	bl	8000108 <strcmp>
 8004dde:	1e03      	subs	r3, r0, #0
 8004de0:	d116      	bne.n	8004e10 <FS_open+0x88>
		{
			file.path = _path;
 8004de2:	2114      	movs	r1, #20
 8004de4:	187b      	adds	r3, r7, r1
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	601a      	str	r2, [r3, #0]
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	18d3      	adds	r3, r2, r3
 8004df2:	3304      	adds	r3, #4
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	18d3      	adds	r3, r2, r3
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	605a      	str	r2, [r3, #4]
			file.size = *(uint32_t*)(*addr + offset);
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	18d3      	adds	r3, r2, r3
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	187b      	adds	r3, r7, r1
 8004e0c:	609a      	str	r2, [r3, #8]
			break;
 8004e0e:	e002      	b.n	8004e16 <FS_open+0x8e>
		}
	}while(i > 0);
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	dcd1      	bgt.n	8004dba <FS_open+0x32>
	return file;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2214      	movs	r2, #20
 8004e1a:	18ba      	adds	r2, r7, r2
 8004e1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e1e:	c313      	stmia	r3!, {r0, r1, r4}
}
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b00d      	add	sp, #52	; 0x34
 8004e26:	bd90      	pop	{r4, r7, pc}

08004e28 <FS_exists>:
	}
	return -1;
}

BOOL FS_exists(FS_typedef* pFS, const char* path)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t)pFS->addr_base;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pFS->n_files; ++i)
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e015      	b.n	8004e70 <FS_exists+0x48>
	{
		addr++;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3304      	adds	r3, #4
 8004e48:	613b      	str	r3, [r7, #16]
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	18d3      	adds	r3, r2, r3
 8004e52:	3308      	adds	r3, #8
 8004e54:	60bb      	str	r3, [r7, #8]
		if(strcmp(path, _path) == 0)
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fb f953 	bl	8000108 <strcmp>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d101      	bne.n	8004e6a <FS_exists+0x42>
		{
			return true;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e008      	b.n	8004e7c <FS_exists+0x54>
	for(i=0; i<pFS->n_files; ++i)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d3e4      	bcc.n	8004e44 <FS_exists+0x1c>
		}
	}
	return false;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b006      	add	sp, #24
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	strcat(pS->URI, "index.html");
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1d5c      	adds	r4, r3, #5
 8004e90:	0020      	movs	r0, r4
 8004e92:	f7fb f943 	bl	800011c <strlen>
 8004e96:	0003      	movs	r3, r0
 8004e98:	18e2      	adds	r2, r4, r3
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <onHome+0x34>)
 8004e9c:	0010      	movs	r0, r2
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	230b      	movs	r3, #11
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	f003 fb20 	bl	80084e8 <memcpy>
	HTTPonNotFound(pS);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 fe46 	bl	8005b3c <HTTPonNotFound>
}
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	b003      	add	sp, #12
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	08008778 	.word	0x08008778

08004ebc <onSwitch>:
/* URI: /switch
 * METHOD: POST
 * Args: sel1=[0-6]&sel2=[0-6]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	const char *A = getHTTPArg(pS, "sel1");
 8004ec4:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <onSwitch+0x94>)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0011      	movs	r1, r2
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f001 fa7a 	bl	80063c4 <getHTTPArg>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	617b      	str	r3, [r7, #20]
	const char *B = getHTTPArg(pS, "sel2");
 8004ed4:	4a1f      	ldr	r2, [pc, #124]	; (8004f54 <onSwitch+0x98>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	0011      	movs	r1, r2
 8004eda:	0018      	movs	r0, r3
 8004edc:	f001 fa72 	bl	80063c4 <getHTTPArg>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	613b      	str	r3, [r7, #16]
	uint8_t antnums[2];
	if(A && B)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d027      	beq.n	8004f3a <onSwitch+0x7e>
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d024      	beq.n	8004f3a <onSwitch+0x7e>
	{
		antnums[0] = atou8(A);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f001 fab2 	bl	800645c <atou8>
 8004ef8:	0003      	movs	r3, r0
 8004efa:	001a      	movs	r2, r3
 8004efc:	240c      	movs	r4, #12
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	701a      	strb	r2, [r3, #0]
		antnums[1] = atou8(B);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	0018      	movs	r0, r3
 8004f06:	f001 faa9 	bl	800645c <atou8>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	001a      	movs	r2, r3
 8004f0e:	193b      	adds	r3, r7, r4
 8004f10:	705a      	strb	r2, [r3, #1]
		if(antnums[0] <= NUM_ANTENNA && antnums[1] <= NUM_ANTENNA)
 8004f12:	193b      	adds	r3, r7, r4
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d80f      	bhi.n	8004f3a <onSwitch+0x7e>
 8004f1a:	193b      	adds	r3, r7, r4
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2b06      	cmp	r3, #6
 8004f20:	d80b      	bhi.n	8004f3a <onSwitch+0x7e>
		{
			switch_Antenna(antnums, 2);
 8004f22:	193b      	adds	r3, r7, r4
 8004f24:	2102      	movs	r1, #2
 8004f26:	0018      	movs	r0, r3
 8004f28:	f002 fe4c 	bl	8007bc4 <switch_Antenna>
			//HTTPSendStr(pS, 200, "OK\r\n");
			HTTPredirect(pS, "/");
 8004f2c:	4a0a      	ldr	r2, [pc, #40]	; (8004f58 <onSwitch+0x9c>)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0011      	movs	r1, r2
 8004f32:	0018      	movs	r0, r3
 8004f34:	f000 fce2 	bl	80058fc <HTTPredirect>
 8004f38:	e006      	b.n	8004f48 <onSwitch+0x8c>
			return;
		}
	}
	HTTPSendStr(pS, 300, "Invalid\r\n");
 8004f3a:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <onSwitch+0xa0>)
 8004f3c:	2396      	movs	r3, #150	; 0x96
 8004f3e:	0059      	lsls	r1, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f000 fba6 	bl	8005694 <HTTPSendStr>
}
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b007      	add	sp, #28
 8004f4c:	bd90      	pop	{r4, r7, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	08008784 	.word	0x08008784
 8004f54:	0800878c 	.word	0x0800878c
 8004f58:	08008794 	.word	0x08008794
 8004f5c:	08008798 	.word	0x08008798

08004f60 <onGetAlloc>:
 * METHOD: GET
 * Args: sel1=%d&sel2=%d
 * Usage: get current antenna allocation
 * */
void onGetAlloc(HTTPRequestParseState* pS)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	static char s_tmp[16];
	uint8_t antnums[N_SELECTORS];
	get_Antenna_real_BCDs(antnums, N_SELECTORS);
 8004f68:	2408      	movs	r4, #8
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f002 feca 	bl	8007d08 <get_Antenna_real_BCDs>
	char *p;
	p = s_tmp;
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <onGetAlloc+0x98>)
 8004f76:	60fb      	str	r3, [r7, #12]
	strcpy(p, "sel1=");
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <onGetAlloc+0x9c>)
 8004f7c:	0010      	movs	r0, r2
 8004f7e:	0019      	movs	r1, r3
 8004f80:	2306      	movs	r3, #6
 8004f82:	001a      	movs	r2, r3
 8004f84:	f003 fab0 	bl	80084e8 <memcpy>
	p+=5;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3305      	adds	r3, #5
 8004f8c:	60fb      	str	r3, [r7, #12]
	*p = (antnums[0]) + '0'; // "sel1=%d"
 8004f8e:	193b      	adds	r3, r7, r4
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	3330      	adds	r3, #48	; 0x30
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	701a      	strb	r2, [r3, #0]
	p++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	60fb      	str	r3, [r7, #12]
	strcpy(p, "&sel2="); // "sel1=%d&sel2="
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4b17      	ldr	r3, [pc, #92]	; (8005000 <onGetAlloc+0xa0>)
 8004fa4:	0010      	movs	r0, r2
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	2307      	movs	r3, #7
 8004faa:	001a      	movs	r2, r3
 8004fac:	f003 fa9c 	bl	80084e8 <memcpy>
	p+=6;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3306      	adds	r3, #6
 8004fb4:	60fb      	str	r3, [r7, #12]
	*p = antnums[1] + '0'; // "sel1=%d&sel2=%d"
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	3330      	adds	r3, #48	; 0x30
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	701a      	strb	r2, [r3, #0]
	p++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
	strcpy(p, "\r\n");
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <onGetAlloc+0xa4>)
 8004fcc:	0010      	movs	r0, r2
 8004fce:	0019      	movs	r1, r3
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	001a      	movs	r2, r3
 8004fd4:	f003 fa88 	bl	80084e8 <memcpy>
	p+=2;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3302      	adds	r3, #2
 8004fdc:	60fb      	str	r3, [r7, #12]
	*p = 0;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
	HTTPSendStr(pS, 200, s_tmp);
 8004fe4:	4a04      	ldr	r2, [pc, #16]	; (8004ff8 <onGetAlloc+0x98>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	21c8      	movs	r1, #200	; 0xc8
 8004fea:	0018      	movs	r0, r3
 8004fec:	f000 fb52 	bl	8005694 <HTTPSendStr>
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b005      	add	sp, #20
 8004ff6:	bd90      	pop	{r4, r7, pc}
 8004ff8:	200006b8 	.word	0x200006b8
 8004ffc:	080087a4 	.word	0x080087a4
 8005000:	080087ac 	.word	0x080087ac
 8005004:	080087b4 	.word	0x080087b4

08005008 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	HTTPSendStr(pS, 200, "Status\r\n");
 8005010:	4a04      	ldr	r2, [pc, #16]	; (8005024 <onStatus+0x1c>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	21c8      	movs	r1, #200	; 0xc8
 8005016:	0018      	movs	r0, r3
 8005018:	f000 fb3c 	bl	8005694 <HTTPSendStr>
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	46bd      	mov	sp, r7
 8005020:	b002      	add	sp, #8
 8005022:	bd80      	pop	{r7, pc}
 8005024:	080087b8 	.word	0x080087b8

08005028 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
	HTTPSendStr(pS, 200, "Reset\r\n");
 8005030:	4a04      	ldr	r2, [pc, #16]	; (8005044 <onReset+0x1c>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	21c8      	movs	r1, #200	; 0xc8
 8005036:	0018      	movs	r0, r3
 8005038:	f000 fb2c 	bl	8005694 <HTTPSendStr>
//	DEBUG_LOG("Restart\n");
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}
 8005044:	080087c4 	.word	0x080087c4

08005048 <onSetLabel>:
/* URI: /getAlloc
 * METHOD: POST
 * Args: ant1=name&ant2=name&ant3=name&ant4=name&ant5=name&ant6=name
 * Usage: set antenna label*/
void onSetLabel(HTTPRequestParseState* pS)
{
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	char s_tmp[5] = "ant";
 8005050:	2308      	movs	r3, #8
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <onSetLabel+0xa8>)
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	2200      	movs	r2, #0
 800505a:	711a      	strb	r2, [r3, #4]
	if(pS->argc == 0)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2248      	movs	r2, #72	; 0x48
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d107      	bne.n	8005076 <onSetLabel+0x2e>
	{
		HTTPSendStr(pS, 300, "Bad args");
 8005066:	4a23      	ldr	r2, [pc, #140]	; (80050f4 <onSetLabel+0xac>)
 8005068:	2396      	movs	r3, #150	; 0x96
 800506a:	0059      	lsls	r1, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 fb10 	bl	8005694 <HTTPSendStr>
 8005074:	e039      	b.n	80050ea <onSetLabel+0xa2>
		return;
	}
	for(i=1; i<=NUM_ANTENNA; ++i)
 8005076:	2317      	movs	r3, #23
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	2201      	movs	r2, #1
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	e029      	b.n	80050d4 <onSetLabel+0x8c>
	{
		u16toa(i, s_tmp+3); //s_tmp = ant[i]
 8005080:	2417      	movs	r4, #23
 8005082:	193b      	adds	r3, r7, r4
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b29a      	uxth	r2, r3
 8005088:	2508      	movs	r5, #8
 800508a:	197b      	adds	r3, r7, r5
 800508c:	3303      	adds	r3, #3
 800508e:	0019      	movs	r1, r3
 8005090:	0010      	movs	r0, r2
 8005092:	f001 fa26 	bl	80064e2 <u16toa>
		const char* s_label;
		if((s_label = getHTTPArg(pS, s_tmp)) != NULL)
 8005096:	197a      	adds	r2, r7, r5
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f001 f991 	bl	80063c4 <getHTTPArg>
 80050a2:	0003      	movs	r3, r0
 80050a4:	613b      	str	r3, [r7, #16]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <onSetLabel+0x80>
		{
			strncpy(cfg.sAntNames[i-1], s_label, MAX_LEN_ANT_LABEL);
 80050ac:	193b      	adds	r3, r7, r4
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	3308      	adds	r3, #8
 80050b6:	001a      	movs	r2, r3
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <onSetLabel+0xb0>)
 80050ba:	18d3      	adds	r3, r2, r3
 80050bc:	3302      	adds	r3, #2
 80050be:	6939      	ldr	r1, [r7, #16]
 80050c0:	2210      	movs	r2, #16
 80050c2:	0018      	movs	r0, r3
 80050c4:	f003 fa6b 	bl	800859e <strncpy>
	for(i=1; i<=NUM_ANTENNA; ++i)
 80050c8:	2217      	movs	r2, #23
 80050ca:	18bb      	adds	r3, r7, r2
 80050cc:	18ba      	adds	r2, r7, r2
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	3201      	adds	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
 80050d4:	2317      	movs	r3, #23
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b06      	cmp	r3, #6
 80050dc:	d9d0      	bls.n	8005080 <onSetLabel+0x38>
		}
	}
//	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	//HTTPSendStr(pS, 200, "OK");
	HTTPredirect(pS, "/");
 80050de:	4a07      	ldr	r2, [pc, #28]	; (80050fc <onSetLabel+0xb4>)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	0011      	movs	r1, r2
 80050e4:	0018      	movs	r0, r3
 80050e6:	f000 fc09 	bl	80058fc <HTTPredirect>
}
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b006      	add	sp, #24
 80050ee:	bdb0      	pop	{r4, r5, r7, pc}
 80050f0:	00746e61 	.word	0x00746e61
 80050f4:	080087cc 	.word	0x080087cc
 80050f8:	20000d54 	.word	0x20000d54
 80050fc:	08008794 	.word	0x08008794

08005100 <onGetLabel>:

void onGetLabel(HTTPRequestParseState* pS)
{
 8005100:	b590      	push	{r4, r7, lr}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	static char s_tmp[(MAX_LEN_ANT_LABEL+5) * NUM_ANTENNA];
	uint8_t i;
	char* s = s_tmp;
 8005108:	4b28      	ldr	r3, [pc, #160]	; (80051ac <onGetLabel+0xac>)
 800510a:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 800510c:	230f      	movs	r3, #15
 800510e:	18fb      	adds	r3, r7, r3
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e03a      	b.n	800518c <onGetLabel+0x8c>
	{
		s = strcpy_f(s, "ant");
 8005116:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <onGetLabel+0xb0>)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	0011      	movs	r1, r2
 800511c:	0018      	movs	r0, r3
 800511e:	f001 fa53 	bl	80065c8 <strcpy_f>
 8005122:	0003      	movs	r3, r0
 8005124:	60bb      	str	r3, [r7, #8]
		*s = i + '1';
 8005126:	210f      	movs	r1, #15
 8005128:	187b      	adds	r3, r7, r1
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3331      	adds	r3, #49	; 0x31
 800512e:	b2da      	uxtb	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	701a      	strb	r2, [r3, #0]
		s++;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	3301      	adds	r3, #1
 8005138:	60bb      	str	r3, [r7, #8]
		*s = '=';
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	223d      	movs	r2, #61	; 0x3d
 800513e:	701a      	strb	r2, [r3, #0]
		s++;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3301      	adds	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
		s = strncpy_f(s, cfg.sAntNames[i], MAX_LEN_ANT_LABEL);
 8005146:	000c      	movs	r4, r1
 8005148:	187b      	adds	r3, r7, r1
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	3308      	adds	r3, #8
 8005150:	001a      	movs	r2, r3
 8005152:	4b18      	ldr	r3, [pc, #96]	; (80051b4 <onGetLabel+0xb4>)
 8005154:	18d3      	adds	r3, r2, r3
 8005156:	1c99      	adds	r1, r3, #2
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2210      	movs	r2, #16
 800515c:	0018      	movs	r0, r3
 800515e:	f001 fa4f 	bl	8006600 <strncpy_f>
 8005162:	0003      	movs	r3, r0
 8005164:	60bb      	str	r3, [r7, #8]
		isModified = true;
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <onGetLabel+0xb8>)
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]
		if(i != NUM_ANTENNA-1)
 800516c:	193b      	adds	r3, r7, r4
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d005      	beq.n	8005180 <onGetLabel+0x80>
		{
			*s = '&';
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2226      	movs	r2, #38	; 0x26
 8005178:	701a      	strb	r2, [r3, #0]
			s++;
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	3301      	adds	r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8005180:	220f      	movs	r2, #15
 8005182:	18bb      	adds	r3, r7, r2
 8005184:	18ba      	adds	r2, r7, r2
 8005186:	7812      	ldrb	r2, [r2, #0]
 8005188:	3201      	adds	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]
 800518c:	230f      	movs	r3, #15
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b05      	cmp	r3, #5
 8005194:	d9bf      	bls.n	8005116 <onGetLabel+0x16>
		}
	}
	HTTPSendStr(pS, 200, s_tmp);
 8005196:	4a05      	ldr	r2, [pc, #20]	; (80051ac <onGetLabel+0xac>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	21c8      	movs	r1, #200	; 0xc8
 800519c:	0018      	movs	r0, r3
 800519e:	f000 fa79 	bl	8005694 <HTTPSendStr>
}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b005      	add	sp, #20
 80051a8:	bd90      	pop	{r4, r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	200006c8 	.word	0x200006c8
 80051b0:	080087d8 	.word	0x080087d8
 80051b4:	20000d54 	.word	0x20000d54
 80051b8:	200006b4 	.word	0x200006b4

080051bc <resetHTTPParseState>:
	.method = HTTP_GET,
	.ready = false}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
	pS->state = 0;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
	pS->argc = 0;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2248      	movs	r2, #72	; 0x48
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]
	pS->connection = CLOSED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	711a      	strb	r2, [r3, #4]
	pS->method = HTTP_GET;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	70da      	strb	r2, [r3, #3]
	pS->ready = false;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	22ac      	movs	r2, #172	; 0xac
 80051e2:	2100      	movs	r1, #0
 80051e4:	5499      	strb	r1, [r3, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	229c      	movs	r2, #156	; 0x9c
 80051ea:	2100      	movs	r1, #0
 80051ec:	5499      	strb	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	22a4      	movs	r2, #164	; 0xa4
 80051f2:	2100      	movs	r1, #0
 80051f4:	5299      	strh	r1, [r3, r2]
	pS->response_header = response_header_shared_buffer; // use shared buffer
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	21a0      	movs	r1, #160	; 0xa0
 80051fa:	4a03      	ldr	r2, [pc, #12]	; (8005208 <resetHTTPParseState+0x4c>)
 80051fc:	505a      	str	r2, [r3, r1]
}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	b002      	add	sp, #8
 8005204:	bd80      	pop	{r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	20000df0 	.word	0x20000df0

0800520c <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	if(strlen(filename) > 3)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	0018      	movs	r0, r3
 8005218:	f7fa ff80 	bl	800011c <strlen>
 800521c:	0003      	movs	r3, r0
 800521e:	2b03      	cmp	r3, #3
 8005220:	d800      	bhi.n	8005224 <HTTPGetContentType+0x18>
 8005222:	e087      	b.n	8005334 <HTTPGetContentType+0x128>
	{
		if(ENDSWITH(filename, ".html"))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	0018      	movs	r0, r3
 8005228:	f7fa ff78 	bl	800011c <strlen>
 800522c:	0003      	movs	r3, r0
 800522e:	3b05      	subs	r3, #5
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	18d3      	adds	r3, r2, r3
 8005234:	4a42      	ldr	r2, [pc, #264]	; (8005340 <HTTPGetContentType+0x134>)
 8005236:	0011      	movs	r1, r2
 8005238:	0018      	movs	r0, r3
 800523a:	f7fa ff65 	bl	8000108 <strcmp>
 800523e:	1e03      	subs	r3, r0, #0
 8005240:	d101      	bne.n	8005246 <HTTPGetContentType+0x3a>
			return HTTP_CONTENT_TYPE_HTML;
 8005242:	4b40      	ldr	r3, [pc, #256]	; (8005344 <HTTPGetContentType+0x138>)
 8005244:	e077      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".htm"))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	0018      	movs	r0, r3
 800524a:	f7fa ff67 	bl	800011c <strlen>
 800524e:	0003      	movs	r3, r0
 8005250:	3b04      	subs	r3, #4
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <HTTPGetContentType+0x13c>)
 8005258:	0011      	movs	r1, r2
 800525a:	0018      	movs	r0, r3
 800525c:	f7fa ff54 	bl	8000108 <strcmp>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d101      	bne.n	8005268 <HTTPGetContentType+0x5c>
			return HTTP_CONTENT_TYPE_HTML;
 8005264:	4b37      	ldr	r3, [pc, #220]	; (8005344 <HTTPGetContentType+0x138>)
 8005266:	e066      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".css"))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	0018      	movs	r0, r3
 800526c:	f7fa ff56 	bl	800011c <strlen>
 8005270:	0003      	movs	r3, r0
 8005272:	3b04      	subs	r3, #4
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	18d3      	adds	r3, r2, r3
 8005278:	4a34      	ldr	r2, [pc, #208]	; (800534c <HTTPGetContentType+0x140>)
 800527a:	0011      	movs	r1, r2
 800527c:	0018      	movs	r0, r3
 800527e:	f7fa ff43 	bl	8000108 <strcmp>
 8005282:	1e03      	subs	r3, r0, #0
 8005284:	d101      	bne.n	800528a <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 8005286:	4b32      	ldr	r3, [pc, #200]	; (8005350 <HTTPGetContentType+0x144>)
 8005288:	e055      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".js"))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	0018      	movs	r0, r3
 800528e:	f7fa ff45 	bl	800011c <strlen>
 8005292:	0003      	movs	r3, r0
 8005294:	3b03      	subs	r3, #3
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	18d3      	adds	r3, r2, r3
 800529a:	4a2e      	ldr	r2, [pc, #184]	; (8005354 <HTTPGetContentType+0x148>)
 800529c:	0011      	movs	r1, r2
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fa ff32 	bl	8000108 <strcmp>
 80052a4:	1e03      	subs	r3, r0, #0
 80052a6:	d101      	bne.n	80052ac <HTTPGetContentType+0xa0>
			return HTTP_CONTENT_TYPE_JS;
 80052a8:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <HTTPGetContentType+0x14c>)
 80052aa:	e044      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".png"))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7fa ff34 	bl	800011c <strlen>
 80052b4:	0003      	movs	r3, r0
 80052b6:	3b04      	subs	r3, #4
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	4a27      	ldr	r2, [pc, #156]	; (800535c <HTTPGetContentType+0x150>)
 80052be:	0011      	movs	r1, r2
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7fa ff21 	bl	8000108 <strcmp>
 80052c6:	1e03      	subs	r3, r0, #0
 80052c8:	d101      	bne.n	80052ce <HTTPGetContentType+0xc2>
			return HTTP_CONTENT_TYPE_PNG;
 80052ca:	4b25      	ldr	r3, [pc, #148]	; (8005360 <HTTPGetContentType+0x154>)
 80052cc:	e033      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpg"))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fa ff23 	bl	800011c <strlen>
 80052d6:	0003      	movs	r3, r0
 80052d8:	3b04      	subs	r3, #4
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	18d3      	adds	r3, r2, r3
 80052de:	4a21      	ldr	r2, [pc, #132]	; (8005364 <HTTPGetContentType+0x158>)
 80052e0:	0011      	movs	r1, r2
 80052e2:	0018      	movs	r0, r3
 80052e4:	f7fa ff10 	bl	8000108 <strcmp>
 80052e8:	1e03      	subs	r3, r0, #0
 80052ea:	d101      	bne.n	80052f0 <HTTPGetContentType+0xe4>
			return HTTP_CONTENT_TYPE_JPEG;
 80052ec:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <HTTPGetContentType+0x15c>)
 80052ee:	e022      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpeg"))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	0018      	movs	r0, r3
 80052f4:	f7fa ff12 	bl	800011c <strlen>
 80052f8:	0003      	movs	r3, r0
 80052fa:	3b05      	subs	r3, #5
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	4a1a      	ldr	r2, [pc, #104]	; (800536c <HTTPGetContentType+0x160>)
 8005302:	0011      	movs	r1, r2
 8005304:	0018      	movs	r0, r3
 8005306:	f7fa feff 	bl	8000108 <strcmp>
 800530a:	1e03      	subs	r3, r0, #0
 800530c:	d101      	bne.n	8005312 <HTTPGetContentType+0x106>
			return HTTP_CONTENT_TYPE_JPEG;
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <HTTPGetContentType+0x15c>)
 8005310:	e011      	b.n	8005336 <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".gif"))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	0018      	movs	r0, r3
 8005316:	f7fa ff01 	bl	800011c <strlen>
 800531a:	0003      	movs	r3, r0
 800531c:	3b04      	subs	r3, #4
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	18d3      	adds	r3, r2, r3
 8005322:	4a13      	ldr	r2, [pc, #76]	; (8005370 <HTTPGetContentType+0x164>)
 8005324:	0011      	movs	r1, r2
 8005326:	0018      	movs	r0, r3
 8005328:	f7fa feee 	bl	8000108 <strcmp>
 800532c:	1e03      	subs	r3, r0, #0
 800532e:	d101      	bne.n	8005334 <HTTPGetContentType+0x128>
			return HTTP_CONTENT_TYPE_GIF;
 8005330:	4b10      	ldr	r3, [pc, #64]	; (8005374 <HTTPGetContentType+0x168>)
 8005332:	e000      	b.n	8005336 <HTTPGetContentType+0x12a>
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 8005334:	4b10      	ldr	r3, [pc, #64]	; (8005378 <HTTPGetContentType+0x16c>)
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b002      	add	sp, #8
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	08008818 	.word	0x08008818
 8005344:	080089c4 	.word	0x080089c4
 8005348:	08008820 	.word	0x08008820
 800534c:	08008828 	.word	0x08008828
 8005350:	080089d0 	.word	0x080089d0
 8005354:	08008830 	.word	0x08008830
 8005358:	080089dc 	.word	0x080089dc
 800535c:	08008834 	.word	0x08008834
 8005360:	080089f4 	.word	0x080089f4
 8005364:	0800883c 	.word	0x0800883c
 8005368:	08008a00 	.word	0x08008a00
 800536c:	08008844 	.word	0x08008844
 8005370:	0800884c 	.word	0x0800884c
 8005374:	08008a0c 	.word	0x08008a0c
 8005378:	080089b8 	.word	0x080089b8

0800537c <HTTPSendFile>:

#ifdef __ON_BOARD_
void HTTPSendFile(HTTPRequestParseState *pS, int code, FSfile_typedef file)
{
 800537c:	b082      	sub	sp, #8
 800537e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005380:	b08f      	sub	sp, #60	; 0x3c
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
 8005388:	2548      	movs	r5, #72	; 0x48
 800538a:	2008      	movs	r0, #8
 800538c:	1839      	adds	r1, r7, r0
 800538e:	1949      	adds	r1, r1, r5
 8005390:	600a      	str	r2, [r1, #0]
 8005392:	604b      	str	r3, [r1, #4]
	char s_tmp[32];
	const char* content_type;
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	22a0      	movs	r2, #160	; 0xa0
 8005398:	589b      	ldr	r3, [r3, r2]
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
	BOOL is_gzip = false;
 800539c:	262f      	movs	r6, #47	; 0x2f
 800539e:	19bb      	adds	r3, r7, r6
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
	/* preprocessing */
	if(ENDSWITH(file.path, ".gz"))
 80053a4:	183b      	adds	r3, r7, r0
 80053a6:	195b      	adds	r3, r3, r5
 80053a8:	681c      	ldr	r4, [r3, #0]
 80053aa:	183b      	adds	r3, r7, r0
 80053ac:	195b      	adds	r3, r3, r5
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	0018      	movs	r0, r3
 80053b2:	f7fa feb3 	bl	800011c <strlen>
 80053b6:	0003      	movs	r3, r0
 80053b8:	3b03      	subs	r3, #3
 80053ba:	18e3      	adds	r3, r4, r3
 80053bc:	4aaa      	ldr	r2, [pc, #680]	; (8005668 <HTTPSendFile+0x2ec>)
 80053be:	0011      	movs	r1, r2
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7fa fea1 	bl	8000108 <strcmp>
 80053c6:	1e03      	subs	r3, r0, #0
 80053c8:	d11c      	bne.n	8005404 <HTTPSendFile+0x88>
	{
		is_gzip = true;
 80053ca:	19bb      	adds	r3, r7, r6
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
		strcpy(s_tmp, file.path);
 80053d0:	2008      	movs	r0, #8
 80053d2:	183b      	adds	r3, r7, r0
 80053d4:	195b      	adds	r3, r3, r5
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	240c      	movs	r4, #12
 80053da:	193b      	adds	r3, r7, r4
 80053dc:	0011      	movs	r1, r2
 80053de:	0018      	movs	r0, r3
 80053e0:	f003 f8ae 	bl	8008540 <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 80053e4:	193b      	adds	r3, r7, r4
 80053e6:	0018      	movs	r0, r3
 80053e8:	f7fa fe98 	bl	800011c <strlen>
 80053ec:	0003      	movs	r3, r0
 80053ee:	3b03      	subs	r3, #3
 80053f0:	193a      	adds	r2, r7, r4
 80053f2:	2100      	movs	r1, #0
 80053f4:	54d1      	strb	r1, [r2, r3]
		content_type = HTTPGetContentType(s_tmp);
 80053f6:	193b      	adds	r3, r7, r4
 80053f8:	0018      	movs	r0, r3
 80053fa:	f7ff ff07 	bl	800520c <HTTPGetContentType>
 80053fe:	0003      	movs	r3, r0
 8005400:	637b      	str	r3, [r7, #52]	; 0x34
 8005402:	e00a      	b.n	800541a <HTTPSendFile+0x9e>
	}
	else
	{
		content_type = HTTPGetContentType(file.path);
 8005404:	2348      	movs	r3, #72	; 0x48
 8005406:	2208      	movs	r2, #8
 8005408:	4694      	mov	ip, r2
 800540a:	44bc      	add	ip, r7
 800540c:	4463      	add	r3, ip
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	0018      	movs	r0, r3
 8005412:	f7ff fefb 	bl	800520c <HTTPGetContentType>
 8005416:	0003      	movs	r3, r0
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
	}
	// construct header
	*buf = 0; // clear buffer
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
	// Line 1
	// HTTP/1.1
	strcat(buf, HTTP_STR_VERSION);
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	0018      	movs	r0, r3
 8005424:	f7fa fe7a 	bl	800011c <strlen>
 8005428:	0003      	movs	r3, r0
 800542a:	001a      	movs	r2, r3
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	189a      	adds	r2, r3, r2
 8005430:	4b8e      	ldr	r3, [pc, #568]	; (800566c <HTTPSendFile+0x2f0>)
 8005432:	0010      	movs	r0, r2
 8005434:	0019      	movs	r1, r3
 8005436:	2309      	movs	r3, #9
 8005438:	001a      	movs	r2, r3
 800543a:	f003 f855 	bl	80084e8 <memcpy>
	buf += strlen(HTTP_STR_VERSION); // HTTP/1.1
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	3308      	adds	r3, #8
 8005442:	633b      	str	r3, [r7, #48]	; 0x30
	*buf = ' '; // HTTP/1.1_
 8005444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005446:	2220      	movs	r2, #32
 8005448:	701a      	strb	r2, [r3, #0]
	buf++;
 800544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544c:	3301      	adds	r3, #1
 800544e:	633b      	str	r3, [r7, #48]	; 0x30
	// CODE
	buf += u16toa(code, buf);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b29b      	uxth	r3, r3
 8005454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005456:	0011      	movs	r1, r2
 8005458:	0018      	movs	r0, r3
 800545a:	f001 f842 	bl	80064e2 <u16toa>
 800545e:	0003      	movs	r3, r0
 8005460:	001a      	movs	r2, r3
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	189b      	adds	r3, r3, r2
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, " OK\r\n");
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	0018      	movs	r0, r3
 800546c:	f7fa fe56 	bl	800011c <strlen>
 8005470:	0003      	movs	r3, r0
 8005472:	001a      	movs	r2, r3
 8005474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005476:	189a      	adds	r2, r3, r2
 8005478:	4b7d      	ldr	r3, [pc, #500]	; (8005670 <HTTPSendFile+0x2f4>)
 800547a:	0010      	movs	r0, r2
 800547c:	0019      	movs	r1, r3
 800547e:	2306      	movs	r3, #6
 8005480:	001a      	movs	r2, r3
 8005482:	f003 f831 	bl	80084e8 <memcpy>
	buf += 5;	// 200 OK\r\n
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	3305      	adds	r3, #5
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 2: Connection
	strcat(buf, "Connection: ");
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	0018      	movs	r0, r3
 8005490:	f7fa fe44 	bl	800011c <strlen>
 8005494:	0003      	movs	r3, r0
 8005496:	001a      	movs	r2, r3
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	189a      	adds	r2, r3, r2
 800549c:	4b75      	ldr	r3, [pc, #468]	; (8005674 <HTTPSendFile+0x2f8>)
 800549e:	0010      	movs	r0, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	230d      	movs	r3, #13
 80054a4:	001a      	movs	r2, r3
 80054a6:	f003 f81f 	bl	80084e8 <memcpy>
	buf += 12;
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	330c      	adds	r3, #12
 80054ae:	633b      	str	r3, [r7, #48]	; 0x30
	if(pS->connection == KEEP_ALIVE)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	791b      	ldrb	r3, [r3, #4]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d112      	bne.n	80054de <HTTPSendFile+0x162>
	{
		strcat(buf, "Keep-Alive\r\n");
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	0018      	movs	r0, r3
 80054bc:	f7fa fe2e 	bl	800011c <strlen>
 80054c0:	0003      	movs	r3, r0
 80054c2:	001a      	movs	r2, r3
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	189a      	adds	r2, r3, r2
 80054c8:	4b6b      	ldr	r3, [pc, #428]	; (8005678 <HTTPSendFile+0x2fc>)
 80054ca:	0010      	movs	r0, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	230d      	movs	r3, #13
 80054d0:	001a      	movs	r2, r3
 80054d2:	f003 f809 	bl	80084e8 <memcpy>
		buf += 12;
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	330c      	adds	r3, #12
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
 80054dc:	e011      	b.n	8005502 <HTTPSendFile+0x186>
	}
	else
	{
		strcat(buf, "Closed\r\n");
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7fa fe1b 	bl	800011c <strlen>
 80054e6:	0003      	movs	r3, r0
 80054e8:	001a      	movs	r2, r3
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	189a      	adds	r2, r3, r2
 80054ee:	4b63      	ldr	r3, [pc, #396]	; (800567c <HTTPSendFile+0x300>)
 80054f0:	0010      	movs	r0, r2
 80054f2:	0019      	movs	r1, r3
 80054f4:	2309      	movs	r3, #9
 80054f6:	001a      	movs	r2, r3
 80054f8:	f002 fff6 	bl	80084e8 <memcpy>
		buf += 8;
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	3308      	adds	r3, #8
 8005500:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 3: Content-Encoding
	if(is_gzip)
 8005502:	232f      	movs	r3, #47	; 0x2f
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d011      	beq.n	8005530 <HTTPSendFile+0x1b4>
	{
		strcat(buf, "Content-Encoding: gzip\r\n");
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	0018      	movs	r0, r3
 8005510:	f7fa fe04 	bl	800011c <strlen>
 8005514:	0003      	movs	r3, r0
 8005516:	001a      	movs	r2, r3
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	189a      	adds	r2, r3, r2
 800551c:	4b58      	ldr	r3, [pc, #352]	; (8005680 <HTTPSendFile+0x304>)
 800551e:	0010      	movs	r0, r2
 8005520:	0019      	movs	r1, r3
 8005522:	2319      	movs	r3, #25
 8005524:	001a      	movs	r2, r3
 8005526:	f002 ffdf 	bl	80084e8 <memcpy>
		buf += 24;
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	3318      	adds	r3, #24
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 4: Content-Type
	strcat(buf, "Content-Type: ");
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	0018      	movs	r0, r3
 8005534:	f7fa fdf2 	bl	800011c <strlen>
 8005538:	0003      	movs	r3, r0
 800553a:	001a      	movs	r2, r3
 800553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553e:	189a      	adds	r2, r3, r2
 8005540:	4b50      	ldr	r3, [pc, #320]	; (8005684 <HTTPSendFile+0x308>)
 8005542:	0010      	movs	r0, r2
 8005544:	0019      	movs	r1, r3
 8005546:	230f      	movs	r3, #15
 8005548:	001a      	movs	r2, r3
 800554a:	f002 ffcd 	bl	80084e8 <memcpy>
	buf += 14;
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	330e      	adds	r3, #14
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, content_type);
 8005554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	0011      	movs	r1, r2
 800555a:	0018      	movs	r0, r3
 800555c:	f002 ffd5 	bl	800850a <strcat>
	buf += strlen(content_type);
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005562:	0018      	movs	r0, r3
 8005564:	f7fa fdda 	bl	800011c <strlen>
 8005568:	0002      	movs	r2, r0
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	189b      	adds	r3, r3, r2
 800556e:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, "\r\n");
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	0018      	movs	r0, r3
 8005574:	f7fa fdd2 	bl	800011c <strlen>
 8005578:	0003      	movs	r3, r0
 800557a:	001a      	movs	r2, r3
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	189a      	adds	r2, r3, r2
 8005580:	4b41      	ldr	r3, [pc, #260]	; (8005688 <HTTPSendFile+0x30c>)
 8005582:	0010      	movs	r0, r2
 8005584:	0019      	movs	r1, r3
 8005586:	2303      	movs	r3, #3
 8005588:	001a      	movs	r2, r3
 800558a:	f002 ffad 	bl	80084e8 <memcpy>
	buf += 2;
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	3302      	adds	r3, #2
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 5: Content-Length
	strcat(buf, "Content-Length: ");
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	0018      	movs	r0, r3
 8005598:	f7fa fdc0 	bl	800011c <strlen>
 800559c:	0003      	movs	r3, r0
 800559e:	001a      	movs	r2, r3
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	189a      	adds	r2, r3, r2
 80055a4:	4b39      	ldr	r3, [pc, #228]	; (800568c <HTTPSendFile+0x310>)
 80055a6:	0010      	movs	r0, r2
 80055a8:	0019      	movs	r1, r3
 80055aa:	2311      	movs	r3, #17
 80055ac:	001a      	movs	r2, r3
 80055ae:	f002 ff9b 	bl	80084e8 <memcpy>
	buf += 16;
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	3310      	adds	r3, #16
 80055b6:	633b      	str	r3, [r7, #48]	; 0x30
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 80055b8:	2448      	movs	r4, #72	; 0x48
 80055ba:	2508      	movs	r5, #8
 80055bc:	197b      	adds	r3, r7, r5
 80055be:	191b      	adds	r3, r3, r4
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c6:	0011      	movs	r1, r2
 80055c8:	0018      	movs	r0, r3
 80055ca:	f000 ff8a 	bl	80064e2 <u16toa>
 80055ce:	0003      	movs	r3, r0
 80055d0:	001a      	movs	r2, r3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	189b      	adds	r3, r3, r2
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	0018      	movs	r0, r3
 80055dc:	f7fa fd9e 	bl	800011c <strlen>
 80055e0:	0003      	movs	r3, r0
 80055e2:	001a      	movs	r2, r3
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	189a      	adds	r2, r3, r2
 80055e8:	4b29      	ldr	r3, [pc, #164]	; (8005690 <HTTPSendFile+0x314>)
 80055ea:	0010      	movs	r0, r2
 80055ec:	0019      	movs	r1, r3
 80055ee:	2303      	movs	r3, #3
 80055f0:	001a      	movs	r2, r3
 80055f2:	f002 ff79 	bl	80084e8 <memcpy>
	buf += 2;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	3302      	adds	r3, #2
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 6: end of header
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	0018      	movs	r0, r3
 8005600:	f7fa fd8c 	bl	800011c <strlen>
 8005604:	0003      	movs	r3, r0
 8005606:	001a      	movs	r2, r3
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	189a      	adds	r2, r3, r2
 800560c:	4b20      	ldr	r3, [pc, #128]	; (8005690 <HTTPSendFile+0x314>)
 800560e:	0010      	movs	r0, r2
 8005610:	0019      	movs	r1, r3
 8005612:	2303      	movs	r3, #3
 8005614:	001a      	movs	r2, r3
 8005616:	f002 ff67 	bl	80084e8 <memcpy>
	buf += 2;
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	3302      	adds	r3, #2
 800561e:	633b      	str	r3, [r7, #48]	; 0x30
	pS->len_response_header = strlen(pS->response_header);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	22a0      	movs	r2, #160	; 0xa0
 8005624:	589b      	ldr	r3, [r3, r2]
 8005626:	0018      	movs	r0, r3
 8005628:	f7fa fd78 	bl	800011c <strlen>
 800562c:	0003      	movs	r3, r0
 800562e:	b299      	uxth	r1, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	229e      	movs	r2, #158	; 0x9e
 8005634:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = (uint16_t)file.size;
 8005636:	197b      	adds	r3, r7, r5
 8005638:	191b      	adds	r3, r3, r4
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	b299      	uxth	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	22a4      	movs	r2, #164	; 0xa4
 8005642:	5299      	strh	r1, [r3, r2]
	pS->response_content = file.p_content;
 8005644:	197b      	adds	r3, r7, r5
 8005646:	191b      	adds	r3, r3, r4
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	21a8      	movs	r1, #168	; 0xa8
 800564e:	505a      	str	r2, [r3, r1]
	pS->response_stage = RESPONSE_PREPARED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	229c      	movs	r2, #156	; 0x9c
 8005654:	2101      	movs	r1, #1
 8005656:	5499      	strb	r1, [r3, r2]

}
 8005658:	46c0      	nop			; (mov r8, r8)
 800565a:	46bd      	mov	sp, r7
 800565c:	b00f      	add	sp, #60	; 0x3c
 800565e:	bcf0      	pop	{r4, r5, r6, r7}
 8005660:	bc08      	pop	{r3}
 8005662:	b002      	add	sp, #8
 8005664:	4718      	bx	r3
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	08008854 	.word	0x08008854
 800566c:	080089ac 	.word	0x080089ac
 8005670:	08008858 	.word	0x08008858
 8005674:	08008860 	.word	0x08008860
 8005678:	08008870 	.word	0x08008870
 800567c:	08008880 	.word	0x08008880
 8005680:	0800888c 	.word	0x0800888c
 8005684:	080088a8 	.word	0x080088a8
 8005688:	080088b8 	.word	0x080088b8
 800568c:	080088bc 	.word	0x080088bc
 8005690:	080089a0 	.word	0x080089a0

08005694 <HTTPSendStr>:

void HTTPSendStr(HTTPRequestParseState* pS, int code, const char* content)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
	// construct header
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	22a0      	movs	r2, #160	; 0xa0
 80056a4:	589b      	ldr	r3, [r3, r2]
 80056a6:	61fb      	str	r3, [r7, #28]
	*buf = 0; // clear buffer
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2200      	movs	r2, #0
 80056ac:	701a      	strb	r2, [r3, #0]
	strcat(buf, HTTP_STR_VERSION);
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	0018      	movs	r0, r3
 80056b2:	f7fa fd33 	bl	800011c <strlen>
 80056b6:	0003      	movs	r3, r0
 80056b8:	001a      	movs	r2, r3
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	189a      	adds	r2, r3, r2
 80056be:	4b86      	ldr	r3, [pc, #536]	; (80058d8 <HTTPSendStr+0x244>)
 80056c0:	0010      	movs	r0, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	2309      	movs	r3, #9
 80056c6:	001a      	movs	r2, r3
 80056c8:	f002 ff0e 	bl	80084e8 <memcpy>
	// Line 1
	// HTTP/1.1
	buf += strlen(HTTP_STR_VERSION);
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3308      	adds	r3, #8
 80056d0:	61fb      	str	r3, [r7, #28]
	*buf = ' '; // HTTP/1.1_
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2220      	movs	r2, #32
 80056d6:	701a      	strb	r2, [r3, #0]
	buf++;
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	3301      	adds	r3, #1
 80056dc:	61fb      	str	r3, [r7, #28]
	// CODE
	buf += u16toa(code, buf);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	0011      	movs	r1, r2
 80056e6:	0018      	movs	r0, r3
 80056e8:	f000 fefb 	bl	80064e2 <u16toa>
 80056ec:	0003      	movs	r3, r0
 80056ee:	001a      	movs	r2, r3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	61fb      	str	r3, [r7, #28]
	strcat(buf, " OK\r\n");
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	0018      	movs	r0, r3
 80056fa:	f7fa fd0f 	bl	800011c <strlen>
 80056fe:	0003      	movs	r3, r0
 8005700:	001a      	movs	r2, r3
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	189a      	adds	r2, r3, r2
 8005706:	4b75      	ldr	r3, [pc, #468]	; (80058dc <HTTPSendStr+0x248>)
 8005708:	0010      	movs	r0, r2
 800570a:	0019      	movs	r1, r3
 800570c:	2306      	movs	r3, #6
 800570e:	001a      	movs	r2, r3
 8005710:	f002 feea 	bl	80084e8 <memcpy>
	buf += 5;	// 200 OK\r\n
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	3305      	adds	r3, #5
 8005718:	61fb      	str	r3, [r7, #28]
	// Line 2: Connection
	strcat(buf, "Connection: ");
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	0018      	movs	r0, r3
 800571e:	f7fa fcfd 	bl	800011c <strlen>
 8005722:	0003      	movs	r3, r0
 8005724:	001a      	movs	r2, r3
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	189a      	adds	r2, r3, r2
 800572a:	4b6d      	ldr	r3, [pc, #436]	; (80058e0 <HTTPSendStr+0x24c>)
 800572c:	0010      	movs	r0, r2
 800572e:	0019      	movs	r1, r3
 8005730:	230d      	movs	r3, #13
 8005732:	001a      	movs	r2, r3
 8005734:	f002 fed8 	bl	80084e8 <memcpy>
	buf += 12;
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	330c      	adds	r3, #12
 800573c:	61fb      	str	r3, [r7, #28]
	if(pS->connection == KEEP_ALIVE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	791b      	ldrb	r3, [r3, #4]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d112      	bne.n	800576c <HTTPSendStr+0xd8>
	{
		strcat(buf, "Keep-Alive\r\n");
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	0018      	movs	r0, r3
 800574a:	f7fa fce7 	bl	800011c <strlen>
 800574e:	0003      	movs	r3, r0
 8005750:	001a      	movs	r2, r3
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	189a      	adds	r2, r3, r2
 8005756:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <HTTPSendStr+0x250>)
 8005758:	0010      	movs	r0, r2
 800575a:	0019      	movs	r1, r3
 800575c:	230d      	movs	r3, #13
 800575e:	001a      	movs	r2, r3
 8005760:	f002 fec2 	bl	80084e8 <memcpy>
		buf += 12;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	330c      	adds	r3, #12
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	e011      	b.n	8005790 <HTTPSendStr+0xfc>
	}
	else
	{
		strcat(buf, "Closed\r\n");
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	0018      	movs	r0, r3
 8005770:	f7fa fcd4 	bl	800011c <strlen>
 8005774:	0003      	movs	r3, r0
 8005776:	001a      	movs	r2, r3
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	189a      	adds	r2, r3, r2
 800577c:	4b5a      	ldr	r3, [pc, #360]	; (80058e8 <HTTPSendStr+0x254>)
 800577e:	0010      	movs	r0, r2
 8005780:	0019      	movs	r1, r3
 8005782:	2309      	movs	r3, #9
 8005784:	001a      	movs	r2, r3
 8005786:	f002 feaf 	bl	80084e8 <memcpy>
		buf += 8;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	3308      	adds	r3, #8
 800578e:	61fb      	str	r3, [r7, #28]
	}
	// Line 3: Content-Type
	const char* content_type = HTTPGetContentType(pS->URI);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3305      	adds	r3, #5
 8005794:	0018      	movs	r0, r3
 8005796:	f7ff fd39 	bl	800520c <HTTPGetContentType>
 800579a:	0003      	movs	r3, r0
 800579c:	61bb      	str	r3, [r7, #24]
	strcat(buf, "Content-Type: ");
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	0018      	movs	r0, r3
 80057a2:	f7fa fcbb 	bl	800011c <strlen>
 80057a6:	0003      	movs	r3, r0
 80057a8:	001a      	movs	r2, r3
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	189a      	adds	r2, r3, r2
 80057ae:	4b4f      	ldr	r3, [pc, #316]	; (80058ec <HTTPSendStr+0x258>)
 80057b0:	0010      	movs	r0, r2
 80057b2:	0019      	movs	r1, r3
 80057b4:	230f      	movs	r3, #15
 80057b6:	001a      	movs	r2, r3
 80057b8:	f002 fe96 	bl	80084e8 <memcpy>
	buf += 14;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	330e      	adds	r3, #14
 80057c0:	61fb      	str	r3, [r7, #28]
	strcat(buf, content_type);
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	0011      	movs	r1, r2
 80057c8:	0018      	movs	r0, r3
 80057ca:	f002 fe9e 	bl	800850a <strcat>
	buf += strlen(content_type);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	0018      	movs	r0, r3
 80057d2:	f7fa fca3 	bl	800011c <strlen>
 80057d6:	0002      	movs	r2, r0
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	61fb      	str	r3, [r7, #28]
	strcat(buf, "\r\n");
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f7fa fc9b 	bl	800011c <strlen>
 80057e6:	0003      	movs	r3, r0
 80057e8:	001a      	movs	r2, r3
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	189a      	adds	r2, r3, r2
 80057ee:	4b40      	ldr	r3, [pc, #256]	; (80058f0 <HTTPSendStr+0x25c>)
 80057f0:	0010      	movs	r0, r2
 80057f2:	0019      	movs	r1, r3
 80057f4:	2303      	movs	r3, #3
 80057f6:	001a      	movs	r2, r3
 80057f8:	f002 fe76 	bl	80084e8 <memcpy>
	buf += 2;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	3302      	adds	r3, #2
 8005800:	61fb      	str	r3, [r7, #28]
	// Line 4: Content-Length
	strcat(buf, "Content-Length: ");
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	0018      	movs	r0, r3
 8005806:	f7fa fc89 	bl	800011c <strlen>
 800580a:	0003      	movs	r3, r0
 800580c:	001a      	movs	r2, r3
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	189a      	adds	r2, r3, r2
 8005812:	4b38      	ldr	r3, [pc, #224]	; (80058f4 <HTTPSendStr+0x260>)
 8005814:	0010      	movs	r0, r2
 8005816:	0019      	movs	r1, r3
 8005818:	2311      	movs	r3, #17
 800581a:	001a      	movs	r2, r3
 800581c:	f002 fe64 	bl	80084e8 <memcpy>
	buf += 16;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3310      	adds	r3, #16
 8005824:	61fb      	str	r3, [r7, #28]
	uint16_t len_content = strlen(content);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0018      	movs	r0, r3
 800582a:	f7fa fc77 	bl	800011c <strlen>
 800582e:	0002      	movs	r2, r0
 8005830:	2116      	movs	r1, #22
 8005832:	187b      	adds	r3, r7, r1
 8005834:	801a      	strh	r2, [r3, #0]
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	187b      	adds	r3, r7, r1
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	0011      	movs	r1, r2
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fe4f 	bl	80064e2 <u16toa>
 8005844:	0003      	movs	r3, r0
 8005846:	001a      	movs	r2, r3
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	189b      	adds	r3, r3, r2
 800584c:	61fb      	str	r3, [r7, #28]
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	0018      	movs	r0, r3
 8005852:	f7fa fc63 	bl	800011c <strlen>
 8005856:	0003      	movs	r3, r0
 8005858:	001a      	movs	r2, r3
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	189a      	adds	r2, r3, r2
 800585e:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <HTTPSendStr+0x264>)
 8005860:	0010      	movs	r0, r2
 8005862:	0019      	movs	r1, r3
 8005864:	2303      	movs	r3, #3
 8005866:	001a      	movs	r2, r3
 8005868:	f002 fe3e 	bl	80084e8 <memcpy>
	buf += 2;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	3302      	adds	r3, #2
 8005870:	61fb      	str	r3, [r7, #28]
	// Line 5: End of header
	strcat(buf, HTTP_LINE_DELIM);
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	0018      	movs	r0, r3
 8005876:	f7fa fc51 	bl	800011c <strlen>
 800587a:	0003      	movs	r3, r0
 800587c:	001a      	movs	r2, r3
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	189a      	adds	r2, r3, r2
 8005882:	4b1d      	ldr	r3, [pc, #116]	; (80058f8 <HTTPSendStr+0x264>)
 8005884:	0010      	movs	r0, r2
 8005886:	0019      	movs	r1, r3
 8005888:	2303      	movs	r3, #3
 800588a:	001a      	movs	r2, r3
 800588c:	f002 fe2c 	bl	80084e8 <memcpy>
	buf += 2;
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	3302      	adds	r3, #2
 8005894:	61fb      	str	r3, [r7, #28]
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	22a0      	movs	r2, #160	; 0xa0
 800589a:	589b      	ldr	r3, [r3, r2]
 800589c:	0018      	movs	r0, r3
 800589e:	f7fa fc3d 	bl	800011c <strlen>
 80058a2:	0003      	movs	r3, r0
 80058a4:	b299      	uxth	r1, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	229e      	movs	r2, #158	; 0x9e
 80058aa:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = strlen(content);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fa fc34 	bl	800011c <strlen>
 80058b4:	0003      	movs	r3, r0
 80058b6:	b299      	uxth	r1, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	22a4      	movs	r2, #164	; 0xa4
 80058bc:	5299      	strh	r1, [r3, r2]
	pS->response_content = (uint8_t*)content;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	21a8      	movs	r1, #168	; 0xa8
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	505a      	str	r2, [r3, r1]
	pS->response_stage = RESPONSE_PREPARED;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	229c      	movs	r2, #156	; 0x9c
 80058ca:	2101      	movs	r1, #1
 80058cc:	5499      	strb	r1, [r3, r2]
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b008      	add	sp, #32
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	46c0      	nop			; (mov r8, r8)
 80058d8:	080089ac 	.word	0x080089ac
 80058dc:	08008858 	.word	0x08008858
 80058e0:	08008860 	.word	0x08008860
 80058e4:	08008870 	.word	0x08008870
 80058e8:	08008880 	.word	0x08008880
 80058ec:	080088a8 	.word	0x080088a8
 80058f0:	080088b8 	.word	0x080088b8
 80058f4:	080088bc 	.word	0x080088bc
 80058f8:	080089a0 	.word	0x080089a0

080058fc <HTTPredirect>:

void HTTPredirect(HTTPRequestParseState *pS, const char* URI)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
	char* buf = pS->response_header;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	22a0      	movs	r2, #160	; 0xa0
 800590a:	589b      	ldr	r3, [r3, r2]
 800590c:	60fb      	str	r3, [r7, #12]
	*buf = 0; // clear buffer
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	701a      	strb	r2, [r3, #0]
	// HTTP/1.1 302 Found
	// Location: /
	strcat(buf, HTTP_STR_VERSION);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	0018      	movs	r0, r3
 8005918:	f7fa fc00 	bl	800011c <strlen>
 800591c:	0003      	movs	r3, r0
 800591e:	001a      	movs	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	189a      	adds	r2, r3, r2
 8005924:	4b7c      	ldr	r3, [pc, #496]	; (8005b18 <HTTPredirect+0x21c>)
 8005926:	0010      	movs	r0, r2
 8005928:	0019      	movs	r1, r3
 800592a:	2309      	movs	r3, #9
 800592c:	001a      	movs	r2, r3
 800592e:	f002 fddb 	bl	80084e8 <memcpy>
	buf += strlen(HTTP_STR_VERSION);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3308      	adds	r3, #8
 8005936:	60fb      	str	r3, [r7, #12]
	strcat(buf, " 302");
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	0018      	movs	r0, r3
 800593c:	f7fa fbee 	bl	800011c <strlen>
 8005940:	0003      	movs	r3, r0
 8005942:	001a      	movs	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	189a      	adds	r2, r3, r2
 8005948:	4b74      	ldr	r3, [pc, #464]	; (8005b1c <HTTPredirect+0x220>)
 800594a:	0010      	movs	r0, r2
 800594c:	0019      	movs	r1, r3
 800594e:	2305      	movs	r3, #5
 8005950:	001a      	movs	r2, r3
 8005952:	f002 fdc9 	bl	80084e8 <memcpy>
	buf += 4;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3304      	adds	r3, #4
 800595a:	60fb      	str	r3, [r7, #12]
	strcat(buf, " Found");
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	0018      	movs	r0, r3
 8005960:	f7fa fbdc 	bl	800011c <strlen>
 8005964:	0003      	movs	r3, r0
 8005966:	001a      	movs	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	189a      	adds	r2, r3, r2
 800596c:	4b6c      	ldr	r3, [pc, #432]	; (8005b20 <HTTPredirect+0x224>)
 800596e:	0010      	movs	r0, r2
 8005970:	0019      	movs	r1, r3
 8005972:	2307      	movs	r3, #7
 8005974:	001a      	movs	r2, r3
 8005976:	f002 fdb7 	bl	80084e8 <memcpy>
	buf += 6;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3306      	adds	r3, #6
 800597e:	60fb      	str	r3, [r7, #12]
	strcat(buf,HTTP_LINE_DELIM);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	0018      	movs	r0, r3
 8005984:	f7fa fbca 	bl	800011c <strlen>
 8005988:	0003      	movs	r3, r0
 800598a:	001a      	movs	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	189a      	adds	r2, r3, r2
 8005990:	4b64      	ldr	r3, [pc, #400]	; (8005b24 <HTTPredirect+0x228>)
 8005992:	0010      	movs	r0, r2
 8005994:	0019      	movs	r1, r3
 8005996:	2303      	movs	r3, #3
 8005998:	001a      	movs	r2, r3
 800599a:	f002 fda5 	bl	80084e8 <memcpy>
	buf +=2 ;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3302      	adds	r3, #2
 80059a2:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Connection: ");
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7fa fbb8 	bl	800011c <strlen>
 80059ac:	0003      	movs	r3, r0
 80059ae:	001a      	movs	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	189a      	adds	r2, r3, r2
 80059b4:	4b5c      	ldr	r3, [pc, #368]	; (8005b28 <HTTPredirect+0x22c>)
 80059b6:	0010      	movs	r0, r2
 80059b8:	0019      	movs	r1, r3
 80059ba:	230d      	movs	r3, #13
 80059bc:	001a      	movs	r2, r3
 80059be:	f002 fd93 	bl	80084e8 <memcpy>
	buf += 12;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	330c      	adds	r3, #12
 80059c6:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Closed");
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7fa fba6 	bl	800011c <strlen>
 80059d0:	0003      	movs	r3, r0
 80059d2:	001a      	movs	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	189a      	adds	r2, r3, r2
 80059d8:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <HTTPredirect+0x230>)
 80059da:	0010      	movs	r0, r2
 80059dc:	0019      	movs	r1, r3
 80059de:	2307      	movs	r3, #7
 80059e0:	001a      	movs	r2, r3
 80059e2:	f002 fd81 	bl	80084e8 <memcpy>
	buf += 6;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3306      	adds	r3, #6
 80059ea:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7fa fb94 	bl	800011c <strlen>
 80059f4:	0003      	movs	r3, r0
 80059f6:	001a      	movs	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	189a      	adds	r2, r3, r2
 80059fc:	4b49      	ldr	r3, [pc, #292]	; (8005b24 <HTTPredirect+0x228>)
 80059fe:	0010      	movs	r0, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	2303      	movs	r3, #3
 8005a04:	001a      	movs	r2, r3
 8005a06:	f002 fd6f 	bl	80084e8 <memcpy>
	buf += 2;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Content-Length: ");
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7fa fb82 	bl	800011c <strlen>
 8005a18:	0003      	movs	r3, r0
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	189a      	adds	r2, r3, r2
 8005a20:	4b43      	ldr	r3, [pc, #268]	; (8005b30 <HTTPredirect+0x234>)
 8005a22:	0010      	movs	r0, r2
 8005a24:	0019      	movs	r1, r3
 8005a26:	2311      	movs	r3, #17
 8005a28:	001a      	movs	r2, r3
 8005a2a:	f002 fd5d 	bl	80084e8 <memcpy>
	buf += 16;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3310      	adds	r3, #16
 8005a32:	60fb      	str	r3, [r7, #12]
	strcat(buf, "0");
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	0018      	movs	r0, r3
 8005a38:	f7fa fb70 	bl	800011c <strlen>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	001a      	movs	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	189a      	adds	r2, r3, r2
 8005a44:	4b3b      	ldr	r3, [pc, #236]	; (8005b34 <HTTPredirect+0x238>)
 8005a46:	0010      	movs	r0, r2
 8005a48:	0019      	movs	r1, r3
 8005a4a:	2302      	movs	r3, #2
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	f002 fd4b 	bl	80084e8 <memcpy>
	buf += 1;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	3301      	adds	r3, #1
 8005a56:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f7fa fb5e 	bl	800011c <strlen>
 8005a60:	0003      	movs	r3, r0
 8005a62:	001a      	movs	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	189a      	adds	r2, r3, r2
 8005a68:	4b2e      	ldr	r3, [pc, #184]	; (8005b24 <HTTPredirect+0x228>)
 8005a6a:	0010      	movs	r0, r2
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	2303      	movs	r3, #3
 8005a70:	001a      	movs	r2, r3
 8005a72:	f002 fd39 	bl	80084e8 <memcpy>
	buf += 2;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3302      	adds	r3, #2
 8005a7a:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Location: ");
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7fa fb4c 	bl	800011c <strlen>
 8005a84:	0003      	movs	r3, r0
 8005a86:	001a      	movs	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	189a      	adds	r2, r3, r2
 8005a8c:	4b2a      	ldr	r3, [pc, #168]	; (8005b38 <HTTPredirect+0x23c>)
 8005a8e:	0010      	movs	r0, r2
 8005a90:	0019      	movs	r1, r3
 8005a92:	230b      	movs	r3, #11
 8005a94:	001a      	movs	r2, r3
 8005a96:	f002 fd27 	bl	80084e8 <memcpy>
	buf+= 10;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	330a      	adds	r3, #10
 8005a9e:	60fb      	str	r3, [r7, #12]
	strcat(buf, URI);
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	0011      	movs	r1, r2
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f002 fd2f 	bl	800850a <strcat>
	strcat(buf, HTTP_LINE_DELIM);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7fa fb34 	bl	800011c <strlen>
 8005ab4:	0003      	movs	r3, r0
 8005ab6:	001a      	movs	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	189a      	adds	r2, r3, r2
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <HTTPredirect+0x228>)
 8005abe:	0010      	movs	r0, r2
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	001a      	movs	r2, r3
 8005ac6:	f002 fd0f 	bl	80084e8 <memcpy>
	strcat(buf, HTTP_LINE_DELIM);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	0018      	movs	r0, r3
 8005ace:	f7fa fb25 	bl	800011c <strlen>
 8005ad2:	0003      	movs	r3, r0
 8005ad4:	001a      	movs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	189a      	adds	r2, r3, r2
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <HTTPredirect+0x228>)
 8005adc:	0010      	movs	r0, r2
 8005ade:	0019      	movs	r1, r3
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	f002 fd00 	bl	80084e8 <memcpy>
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	22a0      	movs	r2, #160	; 0xa0
 8005aec:	589b      	ldr	r3, [r3, r2]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7fa fb14 	bl	800011c <strlen>
 8005af4:	0003      	movs	r3, r0
 8005af6:	b299      	uxth	r1, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	229e      	movs	r2, #158	; 0x9e
 8005afc:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	22a4      	movs	r2, #164	; 0xa4
 8005b02:	2100      	movs	r1, #0
 8005b04:	5299      	strh	r1, [r3, r2]
	pS->response_stage = RESPONSE_PREPARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	229c      	movs	r2, #156	; 0x9c
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	46bd      	mov	sp, r7
 8005b12:	b004      	add	sp, #16
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	080089ac 	.word	0x080089ac
 8005b1c:	080088d0 	.word	0x080088d0
 8005b20:	080088d8 	.word	0x080088d8
 8005b24:	080089a0 	.word	0x080089a0
 8005b28:	08008860 	.word	0x08008860
 8005b2c:	080088e0 	.word	0x080088e0
 8005b30:	080088bc 	.word	0x080088bc
 8005b34:	080088e8 	.word	0x080088e8
 8005b38:	080088ec 	.word	0x080088ec

08005b3c <HTTPonNotFound>:

void HTTPonNotFound(HTTPRequestParseState *pS)
{
 8005b3c:	b5b0      	push	{r4, r5, r7, lr}
 8005b3e:	b0a2      	sub	sp, #136	; 0x88
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	6078      	str	r0, [r7, #4]
	char s_tmp[MAX_LEN_URI + 4];
	static char s_notfound[MAX_LEN_URI+16];
	// look for file
	if(FS_exists(&FS, pS->URI))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	1d5a      	adds	r2, r3, #5
 8005b48:	4b42      	ldr	r3, [pc, #264]	; (8005c54 <HTTPonNotFound+0x118>)
 8005b4a:	0011      	movs	r1, r2
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7ff f96b 	bl	8004e28 <FS_exists>
 8005b52:	1e03      	subs	r3, r0, #0
 8005b54:	d01e      	beq.n	8005b94 <HTTPonNotFound+0x58>
	{
		FSfile_typedef file = FS_open(&FS, pS->URI);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1d5a      	adds	r2, r3, #5
 8005b5a:	2418      	movs	r4, #24
 8005b5c:	193b      	adds	r3, r7, r4
 8005b5e:	493d      	ldr	r1, [pc, #244]	; (8005c54 <HTTPonNotFound+0x118>)
 8005b60:	0018      	movs	r0, r3
 8005b62:	f7ff f911 	bl	8004d88 <FS_open>
		if(file.path)
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d04e      	beq.n	8005c0c <HTTPonNotFound+0xd0>
		{
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	1d5a      	adds	r2, r3, #5
 8005b72:	2468      	movs	r4, #104	; 0x68
 8005b74:	193b      	adds	r3, r7, r4
 8005b76:	4937      	ldr	r1, [pc, #220]	; (8005c54 <HTTPonNotFound+0x118>)
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f7ff f905 	bl	8004d88 <FS_open>
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	466a      	mov	r2, sp
 8005b84:	6899      	ldr	r1, [r3, #8]
 8005b86:	6011      	str	r1, [r2, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	21c8      	movs	r1, #200	; 0xc8
 8005b8e:	f7ff fbf5 	bl	800537c <HTTPSendFile>
 8005b92:	e05c      	b.n	8005c4e <HTTPonNotFound+0x112>
			return;
		}
	}
	else
	{
		strcpy(s_tmp, pS->URI);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	1d5a      	adds	r2, r3, #5
 8005b98:	2424      	movs	r4, #36	; 0x24
 8005b9a:	193b      	adds	r3, r7, r4
 8005b9c:	0011      	movs	r1, r2
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f002 fcce 	bl	8008540 <strcpy>
		strcat(s_tmp, ".gz");
 8005ba4:	193b      	adds	r3, r7, r4
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	f7fa fab8 	bl	800011c <strlen>
 8005bac:	0003      	movs	r3, r0
 8005bae:	001a      	movs	r2, r3
 8005bb0:	193b      	adds	r3, r7, r4
 8005bb2:	189a      	adds	r2, r3, r2
 8005bb4:	4b28      	ldr	r3, [pc, #160]	; (8005c58 <HTTPonNotFound+0x11c>)
 8005bb6:	0010      	movs	r0, r2
 8005bb8:	0019      	movs	r1, r3
 8005bba:	2304      	movs	r3, #4
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	f002 fc93 	bl	80084e8 <memcpy>
		if(FS_exists(&FS, s_tmp))
 8005bc2:	193a      	adds	r2, r7, r4
 8005bc4:	4b23      	ldr	r3, [pc, #140]	; (8005c54 <HTTPonNotFound+0x118>)
 8005bc6:	0011      	movs	r1, r2
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7ff f92d 	bl	8004e28 <FS_exists>
 8005bce:	1e03      	subs	r3, r0, #0
 8005bd0:	d01c      	beq.n	8005c0c <HTTPonNotFound+0xd0>
		{
			FSfile_typedef file = FS_open(&FS, s_tmp);
 8005bd2:	250c      	movs	r5, #12
 8005bd4:	197b      	adds	r3, r7, r5
 8005bd6:	193a      	adds	r2, r7, r4
 8005bd8:	491e      	ldr	r1, [pc, #120]	; (8005c54 <HTTPonNotFound+0x118>)
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f7ff f8d4 	bl	8004d88 <FS_open>
			if(file.path)
 8005be0:	197b      	adds	r3, r7, r5
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d011      	beq.n	8005c0c <HTTPonNotFound+0xd0>
			{
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 8005be8:	2574      	movs	r5, #116	; 0x74
 8005bea:	197b      	adds	r3, r7, r5
 8005bec:	193a      	adds	r2, r7, r4
 8005bee:	4919      	ldr	r1, [pc, #100]	; (8005c54 <HTTPonNotFound+0x118>)
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	f7ff f8c9 	bl	8004d88 <FS_open>
 8005bf6:	197b      	adds	r3, r7, r5
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	466a      	mov	r2, sp
 8005bfc:	6899      	ldr	r1, [r3, #8]
 8005bfe:	6011      	str	r1, [r2, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	21c8      	movs	r1, #200	; 0xc8
 8005c06:	f7ff fbb9 	bl	800537c <HTTPSendFile>
 8005c0a:	e020      	b.n	8005c4e <HTTPonNotFound+0x112>
				return;
			}
		}
	}
	strcpy(s_notfound, "Not Found: ");
 8005c0c:	4b13      	ldr	r3, [pc, #76]	; (8005c5c <HTTPonNotFound+0x120>)
 8005c0e:	4a14      	ldr	r2, [pc, #80]	; (8005c60 <HTTPonNotFound+0x124>)
 8005c10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005c12:	c313      	stmia	r3!, {r0, r1, r4}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	1d59      	adds	r1, r3, #5
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HTTPonNotFound+0x120>)
 8005c1a:	2240      	movs	r2, #64	; 0x40
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f002 fc97 	bl	8008550 <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HTTPonNotFound+0x120>)
 8005c24:	0018      	movs	r0, r3
 8005c26:	f7fa fa79 	bl	800011c <strlen>
 8005c2a:	0003      	movs	r3, r0
 8005c2c:	001a      	movs	r2, r3
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HTTPonNotFound+0x120>)
 8005c30:	18d2      	adds	r2, r2, r3
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <HTTPonNotFound+0x128>)
 8005c34:	0010      	movs	r0, r2
 8005c36:	0019      	movs	r1, r3
 8005c38:	2303      	movs	r3, #3
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	f002 fc54 	bl	80084e8 <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 8005c40:	4a06      	ldr	r2, [pc, #24]	; (8005c5c <HTTPonNotFound+0x120>)
 8005c42:	23ca      	movs	r3, #202	; 0xca
 8005c44:	0059      	lsls	r1, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff fd23 	bl	8005694 <HTTPSendStr>
}
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b020      	add	sp, #128	; 0x80
 8005c52:	bdb0      	pop	{r4, r5, r7, pc}
 8005c54:	20000de8 	.word	0x20000de8
 8005c58:	08008854 	.word	0x08008854
 8005c5c:	20000cc8 	.word	0x20000cc8
 8005c60:	080088f8 	.word	0x080088f8
 8005c64:	080089a0 	.word	0x080089a0

08005c68 <HTTPHandle>:

void HTTPHandle(CH395_TypeDef *pch395) // call on interrupt
{
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]

	int8_t i = pch395->SOCK_responding; // NOTE: number:i begins from 1
 8005c70:	2113      	movs	r1, #19
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7e92      	ldrb	r2, [r2, #26]
 8005c78:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	if(i > 0)
 8005c7a:	000a      	movs	r2, r1
 8005c7c:	18bb      	adds	r3, r7, r2
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dc00      	bgt.n	8005c88 <HTTPHandle+0x20>
 8005c86:	e150      	b.n	8005f2a <HTTPHandle+0x2c2>
	{
		HTTPRequestParseState *pS = &parseStates[i-1];
 8005c88:	18bb      	adds	r3, r7, r2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b25b      	sxtb	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	22b0      	movs	r2, #176	; 0xb0
 8005c92:	435a      	muls	r2, r3
 8005c94:	4ba7      	ldr	r3, [pc, #668]	; (8005f34 <HTTPHandle+0x2cc>)
 8005c96:	18d3      	adds	r3, r2, r3
 8005c98:	60fb      	str	r3, [r7, #12]
		// CASE: Socket recv has request, no response under preparation, can prepare a new response
		if(pS->ready  && pS->response_stage == RESPONSE_NOT_PREPARED)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	22ac      	movs	r2, #172	; 0xac
 8005c9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d036      	beq.n	8005d12 <HTTPHandle+0xaa>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	229c      	movs	r2, #156	; 0x9c
 8005ca8:	5c9b      	ldrb	r3, [r3, r2]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d131      	bne.n	8005d12 <HTTPHandle+0xaa>
		{

			for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8005cae:	2317      	movs	r3, #23
 8005cb0:	18fb      	adds	r3, r7, r3
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e01e      	b.n	8005cf6 <HTTPHandle+0x8e>
			{
				if(strncmp(pS->URI, HTTPResponders[j].uri, MAX_LEN_URI) == 0) // matches
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1d58      	adds	r0, r3, #5
 8005cbc:	2417      	movs	r4, #23
 8005cbe:	193b      	adds	r3, r7, r4
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	4b9d      	ldr	r3, [pc, #628]	; (8005f38 <HTTPHandle+0x2d0>)
 8005cc4:	00d2      	lsls	r2, r2, #3
 8005cc6:	58d3      	ldr	r3, [r2, r3]
 8005cc8:	2240      	movs	r2, #64	; 0x40
 8005cca:	0019      	movs	r1, r3
 8005ccc:	f002 fc56 	bl	800857c <strncmp>
 8005cd0:	1e03      	subs	r3, r0, #0
 8005cd2:	d10a      	bne.n	8005cea <HTTPHandle+0x82>
				{
					(HTTPResponders[j].func)(pS); // call HTTPResponder service function
 8005cd4:	193b      	adds	r3, r7, r4
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	4a97      	ldr	r2, [pc, #604]	; (8005f38 <HTTPHandle+0x2d0>)
 8005cda:	00db      	lsls	r3, r3, #3
 8005cdc:	18d3      	adds	r3, r2, r3
 8005cde:	3304      	adds	r3, #4
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	0010      	movs	r0, r2
 8005ce6:	4798      	blx	r3
					break;
 8005ce8:	e00a      	b.n	8005d00 <HTTPHandle+0x98>
			for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8005cea:	2217      	movs	r2, #23
 8005cec:	18bb      	adds	r3, r7, r2
 8005cee:	18ba      	adds	r2, r7, r2
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	3201      	adds	r2, #1
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	2317      	movs	r3, #23
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d9db      	bls.n	8005cb8 <HTTPHandle+0x50>
				}
			}
			if(j >= NUM_HTTP_RESPONDERS) // Resource not found
 8005d00:	2317      	movs	r3, #23
 8005d02:	18fb      	adds	r3, r7, r3
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d903      	bls.n	8005d12 <HTTPHandle+0xaa>
			{
				HTTPonNotFound(pS);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	0018      	movs	r0, r3
 8005d0e:	f7ff ff15 	bl	8005b3c <HTTPonNotFound>

		}

		// CASE : CH395 chip is free for transmission,
		// judge if response has been prepared for transmission
		if((pch395->TX_available & (1 << i)) != 0 && pS->ready)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7edb      	ldrb	r3, [r3, #27]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	001a      	movs	r2, r3
 8005d1a:	2313      	movs	r3, #19
 8005d1c:	18fb      	adds	r3, r7, r3
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b25b      	sxtb	r3, r3
 8005d22:	411a      	asrs	r2, r3
 8005d24:	0013      	movs	r3, r2
 8005d26:	2201      	movs	r2, #1
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d100      	bne.n	8005d2e <HTTPHandle+0xc6>
 8005d2c:	e0e0      	b.n	8005ef0 <HTTPHandle+0x288>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	22ac      	movs	r2, #172	; 0xac
 8005d32:	5c9b      	ldrb	r3, [r3, r2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d100      	bne.n	8005d3a <HTTPHandle+0xd2>
 8005d38:	e0da      	b.n	8005ef0 <HTTPHandle+0x288>
		{
			// CASE 1: parser has prepared the response content,
			// start the process of data transmission
			if(pS->response_stage == RESPONSE_PREPARED)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	229c      	movs	r2, #156	; 0x9c
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d000      	beq.n	8005d46 <HTTPHandle+0xde>
 8005d44:	e078      	b.n	8005e38 <HTTPHandle+0x1d0>
			{
				uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	229e      	movs	r2, #158	; 0x9e
 8005d4a:	5a9a      	ldrh	r2, [r3, r2]
 8005d4c:	200a      	movs	r0, #10
 8005d4e:	183b      	adds	r3, r7, r0
 8005d50:	497a      	ldr	r1, [pc, #488]	; (8005f3c <HTTPHandle+0x2d4>)
 8005d52:	1a8a      	subs	r2, r1, r2
 8005d54:	801a      	strh	r2, [r3, #0]
				uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	22a4      	movs	r2, #164	; 0xa4
 8005d5a:	5a99      	ldrh	r1, [r3, r2]
 8005d5c:	2308      	movs	r3, #8
 8005d5e:	18fa      	adds	r2, r7, r3
 8005d60:	183b      	adds	r3, r7, r0
 8005d62:	1c0c      	adds	r4, r1, #0
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b298      	uxth	r0, r3
 8005d68:	b2a1      	uxth	r1, r4
 8005d6a:	4288      	cmp	r0, r1
 8005d6c:	d900      	bls.n	8005d70 <HTTPHandle+0x108>
 8005d6e:	1c23      	adds	r3, r4, #0
 8005d70:	8013      	strh	r3, [r2, #0]
						? (pS->len_response_content_remain)
								: (max_len_content));
				CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8005d72:	2513      	movs	r5, #19
 8005d74:	197b      	adds	r3, r7, r5
 8005d76:	7818      	ldrb	r0, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	229e      	movs	r2, #158	; 0x9e
 8005d7c:	5a9a      	ldrh	r2, [r3, r2]
 8005d7e:	2408      	movs	r4, #8
 8005d80:	193b      	adds	r3, r7, r4
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	18d3      	adds	r3, r2, r3
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	0019      	movs	r1, r3
 8005d8a:	f7fe fc53 	bl	8004634 <CH395StartSendingData>
				CH395ContinueSendingData((uint8_t*)pS->response_header, pS->len_response_header);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	22a0      	movs	r2, #160	; 0xa0
 8005d92:	589a      	ldr	r2, [r3, r2]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	219e      	movs	r1, #158	; 0x9e
 8005d98:	5a5b      	ldrh	r3, [r3, r1]
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	f7fe fc6f 	bl	8004680 <CH395ContinueSendingData>
				CH395ContinueSendingData((const uint8_t*)pS->response_content, len_content_this_time);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	22a8      	movs	r2, #168	; 0xa8
 8005da6:	589a      	ldr	r2, [r3, r2]
 8005da8:	193b      	adds	r3, r7, r4
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	0019      	movs	r1, r3
 8005dae:	0010      	movs	r0, r2
 8005db0:	f7fe fc66 	bl	8004680 <CH395ContinueSendingData>
				CH395Complete();
 8005db4:	f7fe fc8a 	bl	80046cc <CH395Complete>
				ch395.TX_available &= ~(1<<i);
 8005db8:	4b61      	ldr	r3, [pc, #388]	; (8005f40 <HTTPHandle+0x2d8>)
 8005dba:	7edb      	ldrb	r3, [r3, #27]
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	0028      	movs	r0, r5
 8005dc2:	183a      	adds	r2, r7, r0
 8005dc4:	7812      	ldrb	r2, [r2, #0]
 8005dc6:	b252      	sxtb	r2, r2
 8005dc8:	2101      	movs	r1, #1
 8005dca:	4091      	lsls	r1, r2
 8005dcc:	000a      	movs	r2, r1
 8005dce:	b252      	sxtb	r2, r2
 8005dd0:	43d2      	mvns	r2, r2
 8005dd2:	b252      	sxtb	r2, r2
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	b25b      	sxtb	r3, r3
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b59      	ldr	r3, [pc, #356]	; (8005f40 <HTTPHandle+0x2d8>)
 8005ddc:	76da      	strb	r2, [r3, #27]
				pS->len_response_content_remain -= len_content_this_time;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	22a4      	movs	r2, #164	; 0xa4
 8005de2:	5a9a      	ldrh	r2, [r3, r2]
 8005de4:	193b      	adds	r3, r7, r4
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	b299      	uxth	r1, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	22a4      	movs	r2, #164	; 0xa4
 8005df0:	5299      	strh	r1, [r3, r2]
				pS->response_content += len_content_this_time;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	22a8      	movs	r2, #168	; 0xa8
 8005df6:	589a      	ldr	r2, [r3, r2]
 8005df8:	193b      	adds	r3, r7, r4
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	18d2      	adds	r2, r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	21a8      	movs	r1, #168	; 0xa8
 8005e02:	505a      	str	r2, [r3, r1]
				if(pS->len_response_content_remain == 0) // all content completely sent this time
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	22a4      	movs	r2, #164	; 0xa4
 8005e08:	5a9b      	ldrh	r3, [r3, r2]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HTTPHandle+0x1c6>
				{
					HTTPclose(i);
 8005e0e:	183b      	adds	r3, r7, r0
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f8d2 	bl	8005fbc <HTTPclose>
					resetHTTPParseState(pS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f7ff f9ce 	bl	80051bc <resetHTTPParseState>
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 8005e20:	f000 f892 	bl	8005f48 <getNextSock>
 8005e24:	0003      	movs	r3, r0
 8005e26:	001a      	movs	r2, r3
 8005e28:	4b45      	ldr	r3, [pc, #276]	; (8005f40 <HTTPHandle+0x2d8>)
 8005e2a:	769a      	strb	r2, [r3, #26]
 8005e2c:	e060      	b.n	8005ef0 <HTTPHandle+0x288>
				}
				else // content remained to be sent next time
				{
					pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	229c      	movs	r2, #156	; 0x9c
 8005e32:	2102      	movs	r1, #2
 8005e34:	5499      	strb	r1, [r3, r2]
 8005e36:	e05b      	b.n	8005ef0 <HTTPHandle+0x288>
				}
			}
			// CASE2: previous response has remaining parts to be done, continue the sending process
			else if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	229c      	movs	r2, #156	; 0x9c
 8005e3c:	5c9b      	ldrb	r3, [r3, r2]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d156      	bne.n	8005ef0 <HTTPHandle+0x288>
			{
				uint16_t len = pS->len_response_content_remain;
 8005e42:	2414      	movs	r4, #20
 8005e44:	193b      	adds	r3, r7, r4
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	21a4      	movs	r1, #164	; 0xa4
 8005e4a:	5a52      	ldrh	r2, [r2, r1]
 8005e4c:	801a      	strh	r2, [r3, #0]
				CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 8005e4e:	2313      	movs	r3, #19
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	7818      	ldrb	r0, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	22a8      	movs	r2, #168	; 0xa8
 8005e58:	5899      	ldr	r1, [r3, r2]
 8005e5a:	193b      	adds	r3, r7, r4
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	4a39      	ldr	r2, [pc, #228]	; (8005f44 <HTTPHandle+0x2dc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d904      	bls.n	8005e6e <HTTPHandle+0x206>
 8005e64:	193b      	adds	r3, r7, r4
 8005e66:	4a35      	ldr	r2, [pc, #212]	; (8005f3c <HTTPHandle+0x2d4>)
 8005e68:	801a      	strh	r2, [r3, #0]
 8005e6a:	4b34      	ldr	r3, [pc, #208]	; (8005f3c <HTTPHandle+0x2d4>)
 8005e6c:	e002      	b.n	8005e74 <HTTPHandle+0x20c>
 8005e6e:	2314      	movs	r3, #20
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	001a      	movs	r2, r3
 8005e76:	f7fe fb6b 	bl	8004550 <CH395SendData>
				ch395.TX_available &= ~(1<<i);
 8005e7a:	4b31      	ldr	r3, [pc, #196]	; (8005f40 <HTTPHandle+0x2d8>)
 8005e7c:	7edb      	ldrb	r3, [r3, #27]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	b25b      	sxtb	r3, r3
 8005e82:	2013      	movs	r0, #19
 8005e84:	183a      	adds	r2, r7, r0
 8005e86:	7812      	ldrb	r2, [r2, #0]
 8005e88:	b252      	sxtb	r2, r2
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4091      	lsls	r1, r2
 8005e8e:	000a      	movs	r2, r1
 8005e90:	b252      	sxtb	r2, r2
 8005e92:	43d2      	mvns	r2, r2
 8005e94:	b252      	sxtb	r2, r2
 8005e96:	4013      	ands	r3, r2
 8005e98:	b25b      	sxtb	r3, r3
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <HTTPHandle+0x2d8>)
 8005e9e:	76da      	strb	r2, [r3, #27]
				// move the cursor to record how much content has been transmitted
				pS->len_response_content_remain -= len;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	22a4      	movs	r2, #164	; 0xa4
 8005ea4:	5a9a      	ldrh	r2, [r3, r2]
 8005ea6:	2414      	movs	r4, #20
 8005ea8:	193b      	adds	r3, r7, r4
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	b299      	uxth	r1, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	22a4      	movs	r2, #164	; 0xa4
 8005eb4:	5299      	strh	r1, [r3, r2]
				pS->response_content += len; // move the cursor
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	22a8      	movs	r2, #168	; 0xa8
 8005eba:	589a      	ldr	r2, [r3, r2]
 8005ebc:	193b      	adds	r3, r7, r4
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	18d2      	adds	r2, r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	21a8      	movs	r1, #168	; 0xa8
 8005ec6:	505a      	str	r2, [r3, r1]
				// judge if transmission has finished
				if(pS->len_response_content_remain == 0)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	22a4      	movs	r2, #164	; 0xa4
 8005ecc:	5a9b      	ldrh	r3, [r3, r2]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10e      	bne.n	8005ef0 <HTTPHandle+0x288>
				{
					HTTPclose(i);
 8005ed2:	183b      	adds	r3, r7, r0
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f000 f870 	bl	8005fbc <HTTPclose>
					resetHTTPParseState(pS);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f7ff f96c 	bl	80051bc <resetHTTPParseState>
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 8005ee4:	f000 f830 	bl	8005f48 <getNextSock>
 8005ee8:	0003      	movs	r3, r0
 8005eea:	001a      	movs	r2, r3
 8005eec:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <HTTPHandle+0x2d8>)
 8005eee:	769a      	strb	r2, [r3, #26]
				}
			}
		}

		// CASE:
		if(pS->sock_index == i && !pS->ready)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22ad      	movs	r2, #173	; 0xad
 8005ef4:	5c9b      	ldrb	r3, [r3, r2]
 8005ef6:	001a      	movs	r2, r3
 8005ef8:	2413      	movs	r4, #19
 8005efa:	193b      	adds	r3, r7, r4
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b25b      	sxtb	r3, r3
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d112      	bne.n	8005f2a <HTTPHandle+0x2c2>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	22ac      	movs	r2, #172	; 0xac
 8005f08:	5c9b      	ldrb	r3, [r3, r2]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4053      	eors	r3, r2
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <HTTPHandle+0x2c2>
		{
			ch395.SOCK_responding = getNextSock();
 8005f14:	f000 f818 	bl	8005f48 <getNextSock>
 8005f18:	0003      	movs	r3, r0
 8005f1a:	001a      	movs	r2, r3
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <HTTPHandle+0x2d8>)
 8005f1e:	769a      	strb	r2, [r3, #26]
			CH395TCPDisconnect(i);
 8005f20:	193b      	adds	r3, r7, r4
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fe fd03 	bl	8004930 <CH395TCPDisconnect>
		}
	}
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b006      	add	sp, #24
 8005f30:	bdb0      	pop	{r4, r5, r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	20000748 	.word	0x20000748
 8005f38:	20000638 	.word	0x20000638
 8005f3c:	00000546 	.word	0x00000546
 8005f40:	20000010 	.word	0x20000010
 8005f44:	00000545 	.word	0x00000545

08005f48 <getNextSock>:
#endif


int8_t getNextSock()
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	int8_t j;
	for(j=1; j < NUM_SOCKETS; ++j)
 8005f4e:	1dfb      	adds	r3, r7, #7
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	e022      	b.n	8005f9c <getNextSock+0x54>
	{
		if(parseStates[j-1].ready && (ch395.socket_connected & (1 << j)))
 8005f56:	1dfb      	adds	r3, r7, #7
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4a15      	ldr	r2, [pc, #84]	; (8005fb4 <getNextSock+0x6c>)
 8005f60:	21ac      	movs	r1, #172	; 0xac
 8005f62:	20b0      	movs	r0, #176	; 0xb0
 8005f64:	4343      	muls	r3, r0
 8005f66:	18d3      	adds	r3, r2, r3
 8005f68:	185b      	adds	r3, r3, r1
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00f      	beq.n	8005f90 <getNextSock+0x48>
 8005f70:	4b11      	ldr	r3, [pc, #68]	; (8005fb8 <getNextSock+0x70>)
 8005f72:	7e1b      	ldrb	r3, [r3, #24]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	001a      	movs	r2, r3
 8005f78:	1dfb      	adds	r3, r7, #7
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b25b      	sxtb	r3, r3
 8005f7e:	411a      	asrs	r2, r3
 8005f80:	0013      	movs	r3, r2
 8005f82:	2201      	movs	r2, #1
 8005f84:	4013      	ands	r3, r2
 8005f86:	d003      	beq.n	8005f90 <getNextSock+0x48>
		{
			return j;
 8005f88:	1dfb      	adds	r3, r7, #7
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b25b      	sxtb	r3, r3
 8005f8e:	e00c      	b.n	8005faa <getNextSock+0x62>
	for(j=1; j < NUM_SOCKETS; ++j)
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	1dfb      	adds	r3, r7, #7
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b25b      	sxtb	r3, r3
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	ddd7      	ble.n	8005f56 <getNextSock+0xe>
		}
	}
	return -1;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	425b      	negs	r3, r3
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b002      	add	sp, #8
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	20000748 	.word	0x20000748
 8005fb8:	20000010 	.word	0x20000010

08005fbc <HTTPclose>:

void HTTPclose(uint8_t i) // Sock Index to disconnect
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	0002      	movs	r2, r0
 8005fc4:	1dfb      	adds	r3, r7, #7
 8005fc6:	701a      	strb	r2, [r3, #0]
	CH395TCPDisconnect(i);
 8005fc8:	1dfb      	adds	r3, r7, #7
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f7fe fcaf 	bl	8004930 <CH395TCPDisconnect>
	ch395.RX_received &= ~(1 << i);
 8005fd2:	4b14      	ldr	r3, [pc, #80]	; (8006024 <HTTPclose+0x68>)
 8005fd4:	7e5b      	ldrb	r3, [r3, #25]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	b25b      	sxtb	r3, r3
 8005fda:	1dfa      	adds	r2, r7, #7
 8005fdc:	7812      	ldrb	r2, [r2, #0]
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4091      	lsls	r1, r2
 8005fe2:	000a      	movs	r2, r1
 8005fe4:	b252      	sxtb	r2, r2
 8005fe6:	43d2      	mvns	r2, r2
 8005fe8:	b252      	sxtb	r2, r2
 8005fea:	4013      	ands	r3, r2
 8005fec:	b25b      	sxtb	r3, r3
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <HTTPclose+0x68>)
 8005ff2:	765a      	strb	r2, [r3, #25]
	ch395.socket_connected &= ~(1 << i);
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HTTPclose+0x68>)
 8005ff6:	7e1b      	ldrb	r3, [r3, #24]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	b25b      	sxtb	r3, r3
 8005ffc:	1dfa      	adds	r2, r7, #7
 8005ffe:	7812      	ldrb	r2, [r2, #0]
 8006000:	2101      	movs	r1, #1
 8006002:	4091      	lsls	r1, r2
 8006004:	000a      	movs	r2, r1
 8006006:	b252      	sxtb	r2, r2
 8006008:	43d2      	mvns	r2, r2
 800600a:	b252      	sxtb	r2, r2
 800600c:	4013      	ands	r3, r2
 800600e:	b25b      	sxtb	r3, r3
 8006010:	b2da      	uxtb	r2, r3
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <HTTPclose+0x68>)
 8006014:	761a      	strb	r2, [r3, #24]
	ch395.SOCK_responding = -1;
 8006016:	4b03      	ldr	r3, [pc, #12]	; (8006024 <HTTPclose+0x68>)
 8006018:	22ff      	movs	r2, #255	; 0xff
 800601a:	769a      	strb	r2, [r3, #26]
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	b002      	add	sp, #8
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000010 	.word	0x20000010

08006028 <strsepstr>:

char* strsepstr(char** stringp, const char* delim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	int len_delim = strlen(delim);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	0018      	movs	r0, r3
 8006036:	f7fa f871 	bl	800011c <strlen>
 800603a:	0003      	movs	r3, r0
 800603c:	617b      	str	r3, [r7, #20]
	char* loc_head = *stringp;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
	if(loc_head != NULL)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d019      	beq.n	800607e <strsepstr+0x56>
	{
		char* loc_delim = strstr(loc_head, delim);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f002 fae3 	bl	800861c <strstr>
 8006056:	0003      	movs	r3, r0
 8006058:	60fb      	str	r3, [r7, #12]
		if(loc_delim != NULL)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <strsepstr+0x50>
		{
			memset(loc_delim, 0, len_delim);
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2100      	movs	r1, #0
 8006066:	0018      	movs	r0, r3
 8006068:	f002 fa47 	bl	80084fa <memset>
			*stringp = loc_delim + len_delim;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	18d2      	adds	r2, r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	e002      	b.n	800607e <strsepstr+0x56>
		}
		else
		{
			*stringp = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
		}
	}
	return loc_head;
 800607e:	693b      	ldr	r3, [r7, #16]
}
 8006080:	0018      	movs	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	b006      	add	sp, #24
 8006086:	bd80      	pop	{r7, pc}

08006088 <parse_http>:

BOOL parse_http(HTTPRequestParseState *pS, char* buffer)

{
 8006088:	b590      	push	{r4, r7, lr}
 800608a:	b08b      	sub	sp, #44	; 0x2c
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d100      	bne.n	800609c <parse_http+0x14>
 800609a:	e162      	b.n	8006362 <parse_http+0x2da>
 800609c:	dd00      	ble.n	80060a0 <parse_http+0x18>
 800609e:	e164      	b.n	800636a <parse_http+0x2e2>
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d100      	bne.n	80060a6 <parse_http+0x1e>
 80060a4:	e121      	b.n	80062ea <parse_http+0x262>
 80060a6:	dd00      	ble.n	80060aa <parse_http+0x22>
 80060a8:	e15f      	b.n	800636a <parse_http+0x2e2>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <parse_http+0x2e>
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d100      	bne.n	80060b4 <parse_http+0x2c>
 80060b2:	e0ad      	b.n	8006210 <parse_http+0x188>
 80060b4:	e159      	b.n	800636a <parse_http+0x2e2>
	{
	case 0: // start: request line
		line_tok_saveptr = buffer;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	617b      	str	r3, [r7, #20]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80060ba:	4ab8      	ldr	r2, [pc, #736]	; (800639c <parse_http+0x314>)
 80060bc:	2314      	movs	r3, #20
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	0011      	movs	r1, r2
 80060c2:	0018      	movs	r0, r3
 80060c4:	f7ff ffb0 	bl	8006028 <strsepstr>
 80060c8:	0003      	movs	r3, r0
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
		if(line)
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d100      	bne.n	80060d4 <parse_http+0x4c>
 80060d2:	e14c      	b.n	800636e <parse_http+0x2e6>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 80060d4:	46c0      	nop			; (mov r8, r8)
			// check if received info obeys HTTP protocols
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 80060d6:	23c0      	movs	r3, #192	; 0xc0
 80060d8:	00da      	lsls	r2, r3, #3
 80060da:	49b1      	ldr	r1, [pc, #708]	; (80063a0 <parse_http+0x318>)
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	0018      	movs	r0, r3
 80060e0:	f002 fa7c 	bl	80085dc <strnstr>
 80060e4:	1e03      	subs	r3, r0, #0
 80060e6:	d101      	bne.n	80060ec <parse_http+0x64>
			{
				DEBUG_LOG("ERROR: NOT HTTP\n");
 80060e8:	46c0      	nop			; (mov r8, r8)
				goto HTTP_PARSE_ERROR;
 80060ea:	e14b      	b.n	8006384 <parse_http+0x2fc>
			}
			// 1: method
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 80060ec:	2310      	movs	r3, #16
 80060ee:	18fa      	adds	r2, r7, r3
 80060f0:	49ac      	ldr	r1, [pc, #688]	; (80063a4 <parse_http+0x31c>)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	0018      	movs	r0, r3
 80060f6:	f002 fad6 	bl	80086a6 <strtok_r>
 80060fa:	0003      	movs	r3, r0
 80060fc:	61fb      	str	r3, [r7, #28]
			if(tok)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d100      	bne.n	8006106 <parse_http+0x7e>
 8006104:	e135      	b.n	8006372 <parse_http+0x2ea>
			{
				DEBUG_LOG("Method: %s\r\n", tok);
 8006106:	46c0      	nop			; (mov r8, r8)
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 8006108:	4aa7      	ldr	r2, [pc, #668]	; (80063a8 <parse_http+0x320>)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	0011      	movs	r1, r2
 800610e:	0018      	movs	r0, r3
 8006110:	f7f9 fffa 	bl	8000108 <strcmp>
 8006114:	1e03      	subs	r3, r0, #0
 8006116:	d103      	bne.n	8006120 <parse_http+0x98>
					pS->method = HTTP_GET;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	70da      	strb	r2, [r3, #3]
 800611e:	e00e      	b.n	800613e <parse_http+0xb6>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 8006120:	4aa2      	ldr	r2, [pc, #648]	; (80063ac <parse_http+0x324>)
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	0011      	movs	r1, r2
 8006126:	0018      	movs	r0, r3
 8006128:	f7f9 ffee 	bl	8000108 <strcmp>
 800612c:	1e03      	subs	r3, r0, #0
 800612e:	d103      	bne.n	8006138 <parse_http+0xb0>
					pS->method = HTTP_POST;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	70da      	strb	r2, [r3, #3]
 8006136:	e002      	b.n	800613e <parse_http+0xb6>
				else
					pS->method = HTTP_GET;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	70da      	strb	r2, [r3, #3]
			}
			else
				goto HTTP_PARSE_ERROR;
			// 2: URI
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 800613e:	2310      	movs	r3, #16
 8006140:	18fa      	adds	r2, r7, r3
 8006142:	4b98      	ldr	r3, [pc, #608]	; (80063a4 <parse_http+0x31c>)
 8006144:	0019      	movs	r1, r3
 8006146:	2000      	movs	r0, #0
 8006148:	f002 faad 	bl	80086a6 <strtok_r>
 800614c:	0003      	movs	r3, r0
 800614e:	61fb      	str	r3, [r7, #28]
			if(tok)
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d100      	bne.n	8006158 <parse_http+0xd0>
 8006156:	e10e      	b.n	8006376 <parse_http+0x2ee>
			{
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3305      	adds	r3, #5
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	2240      	movs	r2, #64	; 0x40
 8006160:	0018      	movs	r0, r3
 8006162:	f002 fa1c 	bl	800859e <strncpy>
				DEBUG_LOG("URI: %s\r\n", pS->URI);
 8006166:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			char* s_args = strchr(pS->URI, '?');
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3305      	adds	r3, #5
 800616c:	213f      	movs	r1, #63	; 0x3f
 800616e:	0018      	movs	r0, r3
 8006170:	f002 f9d8 	bl	8008524 <strchr>
 8006174:	0003      	movs	r3, r0
 8006176:	61bb      	str	r3, [r7, #24]
			if(pS->method == HTTP_GET && s_args != NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	78db      	ldrb	r3, [r3, #3]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d133      	bne.n	80061e8 <parse_http+0x160>
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d030      	beq.n	80061e8 <parse_http+0x160>
			{
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
				DEBUG_LOG("Path: %s\r\n", pS->URI);
 800618c:	46c0      	nop			; (mov r8, r8)
				s_args++; // move to the char next to ?
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	3301      	adds	r3, #1
 8006192:	61bb      	str	r3, [r7, #24]
				if(*s_args)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d025      	beq.n	80061e8 <parse_http+0x160>
				{
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 800619c:	230c      	movs	r3, #12
 800619e:	18fa      	adds	r2, r7, r3
 80061a0:	4983      	ldr	r1, [pc, #524]	; (80063b0 <parse_http+0x328>)
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	0018      	movs	r0, r3
 80061a6:	f002 fa7e 	bl	80086a6 <strtok_r>
 80061aa:	0003      	movs	r3, r0
 80061ac:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 80061ae:	e018      	b.n	80061e2 <parse_http+0x15a>
					{
						DEBUG_LOG("Arg: %s\r\n", tok_arg);
 80061b0:	46c0      	nop			; (mov r8, r8)
						pS->argv[pS->argc++] = tok_arg;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2248      	movs	r2, #72	; 0x48
 80061b6:	5c9b      	ldrb	r3, [r3, r2]
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	b2d0      	uxtb	r0, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	2148      	movs	r1, #72	; 0x48
 80061c0:	5450      	strb	r0, [r2, r1]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	3312      	adds	r3, #18
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	18d3      	adds	r3, r2, r3
 80061ca:	3304      	adds	r3, #4
 80061cc:	6a3a      	ldr	r2, [r7, #32]
 80061ce:	601a      	str	r2, [r3, #0]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 80061d0:	230c      	movs	r3, #12
 80061d2:	18fa      	adds	r2, r7, r3
 80061d4:	4b76      	ldr	r3, [pc, #472]	; (80063b0 <parse_http+0x328>)
 80061d6:	0019      	movs	r1, r3
 80061d8:	2000      	movs	r0, #0
 80061da:	f002 fa64 	bl	80086a6 <strtok_r>
 80061de:	0003      	movs	r3, r0
 80061e0:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e3      	bne.n	80061b0 <parse_http+0x128>
					}
				}
			}
			// 3: version
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 80061e8:	2310      	movs	r3, #16
 80061ea:	18fa      	adds	r2, r7, r3
 80061ec:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <parse_http+0x31c>)
 80061ee:	0019      	movs	r1, r3
 80061f0:	2000      	movs	r0, #0
 80061f2:	f002 fa58 	bl	80086a6 <strtok_r>
 80061f6:	0003      	movs	r3, r0
 80061f8:	61fb      	str	r3, [r7, #28]
			if(tok)
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d100      	bne.n	8006202 <parse_http+0x17a>
 8006200:	e0bb      	b.n	800637a <parse_http+0x2f2>
			{
				DEBUG_LOG("VERSION: %s\r\n", tok);
 8006202:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			pS->state ++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	b2da      	uxtb	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	701a      	strb	r2, [r3, #0]
		}
		else
			goto HTTP_PARSE_ERROR;
	case 1: // parse header
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8006210:	4a62      	ldr	r2, [pc, #392]	; (800639c <parse_http+0x314>)
 8006212:	2314      	movs	r3, #20
 8006214:	18fb      	adds	r3, r7, r3
 8006216:	0011      	movs	r1, r2
 8006218:	0018      	movs	r0, r3
 800621a:	f7ff ff05 	bl	8006028 <strsepstr>
 800621e:	0003      	movs	r3, r0
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 8006222:	e059      	b.n	80062d8 <parse_http+0x250>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 8006224:	46c0      	nop			; (mov r8, r8)
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8006226:	2410      	movs	r4, #16
 8006228:	193a      	adds	r2, r7, r4
 800622a:	4962      	ldr	r1, [pc, #392]	; (80063b4 <parse_http+0x32c>)
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	0018      	movs	r0, r3
 8006230:	f002 fa39 	bl	80086a6 <strtok_r>
 8006234:	0003      	movs	r3, r0
 8006236:	61fb      	str	r3, [r7, #28]
			if(tok == NULL || *tok == 0)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d04f      	beq.n	80062de <parse_http+0x256>
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d04b      	beq.n	80062de <parse_http+0x256>
				break;
			if(tok)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d03c      	beq.n	80062c6 <parse_http+0x23e>
			{
				DEBUG_LOG("Header: %s\r\n", tok);
 800624c:	46c0      	nop			; (mov r8, r8)
				// Header: Connection
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 800624e:	4a5a      	ldr	r2, [pc, #360]	; (80063b8 <parse_http+0x330>)
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	0011      	movs	r1, r2
 8006254:	0018      	movs	r0, r3
 8006256:	f7f9 ff57 	bl	8000108 <strcmp>
 800625a:	1e03      	subs	r3, r0, #0
 800625c:	d118      	bne.n	8006290 <parse_http+0x208>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 800625e:	193a      	adds	r2, r7, r4
 8006260:	4b54      	ldr	r3, [pc, #336]	; (80063b4 <parse_http+0x32c>)
 8006262:	0019      	movs	r1, r3
 8006264:	2000      	movs	r0, #0
 8006266:	f002 fa1e 	bl	80086a6 <strtok_r>
 800626a:	0003      	movs	r3, r0
 800626c:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d100      	bne.n	8006276 <parse_http+0x1ee>
 8006274:	e083      	b.n	800637e <parse_http+0x2f6>
					DEBUG_LOG("Value: %s\r\n", tok);
 8006276:	46c0      	nop			; (mov r8, r8)
					if(strstr(tok, "Keep") != NULL)
 8006278:	4a50      	ldr	r2, [pc, #320]	; (80063bc <parse_http+0x334>)
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	0011      	movs	r1, r2
 800627e:	0018      	movs	r0, r3
 8006280:	f002 f9cc 	bl	800861c <strstr>
 8006284:	1e03      	subs	r3, r0, #0
 8006286:	d01e      	beq.n	80062c6 <parse_http+0x23e>
						pS->connection = KEEP_ALIVE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	711a      	strb	r2, [r3, #4]
 800628e:	e01a      	b.n	80062c6 <parse_http+0x23e>
				}
				// Header: Cookie
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 8006290:	4a4b      	ldr	r2, [pc, #300]	; (80063c0 <parse_http+0x338>)
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	0011      	movs	r1, r2
 8006296:	0018      	movs	r0, r3
 8006298:	f7f9 ff36 	bl	8000108 <strcmp>
 800629c:	1e03      	subs	r3, r0, #0
 800629e:	d112      	bne.n	80062c6 <parse_http+0x23e>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80062a0:	2310      	movs	r3, #16
 80062a2:	18fa      	adds	r2, r7, r3
 80062a4:	4b43      	ldr	r3, [pc, #268]	; (80063b4 <parse_http+0x32c>)
 80062a6:	0019      	movs	r1, r3
 80062a8:	2000      	movs	r0, #0
 80062aa:	f002 f9fc 	bl	80086a6 <strtok_r>
 80062ae:	0003      	movs	r3, r0
 80062b0:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d064      	beq.n	8006382 <parse_http+0x2fa>
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	335c      	adds	r3, #92	; 0x5c
 80062bc:	69f9      	ldr	r1, [r7, #28]
 80062be:	2240      	movs	r2, #64	; 0x40
 80062c0:	0018      	movs	r0, r3
 80062c2:	f002 f96c 	bl	800859e <strncpy>
				}
			}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80062c6:	4a35      	ldr	r2, [pc, #212]	; (800639c <parse_http+0x314>)
 80062c8:	2314      	movs	r3, #20
 80062ca:	18fb      	adds	r3, r7, r3
 80062cc:	0011      	movs	r1, r2
 80062ce:	0018      	movs	r0, r3
 80062d0:	f7ff feaa 	bl	8006028 <strsepstr>
 80062d4:	0003      	movs	r3, r0
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1a2      	bne.n	8006224 <parse_http+0x19c>
		}
		pS->state++;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	3301      	adds	r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	701a      	strb	r2, [r3, #0]
	case 3: // parse payload
		if(pS->method == HTTP_POST)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	78db      	ldrb	r3, [r3, #3]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d131      	bne.n	8006356 <parse_http+0x2ce>
		{
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <parse_http+0x314>)
 80062f4:	2314      	movs	r3, #20
 80062f6:	18fb      	adds	r3, r7, r3
 80062f8:	0011      	movs	r1, r2
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7ff fe94 	bl	8006028 <strsepstr>
 8006300:	0003      	movs	r3, r0
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
			if(line)
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d025      	beq.n	8006356 <parse_http+0x2ce>
			{
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 800630a:	230c      	movs	r3, #12
 800630c:	18fa      	adds	r2, r7, r3
 800630e:	4928      	ldr	r1, [pc, #160]	; (80063b0 <parse_http+0x328>)
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	0018      	movs	r0, r3
 8006314:	f002 f9c7 	bl	80086a6 <strtok_r>
 8006318:	0003      	movs	r3, r0
 800631a:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 800631c:	e018      	b.n	8006350 <parse_http+0x2c8>
				{
					DEBUG_LOG("Arg: %s\r\n", tok_arg);
 800631e:	46c0      	nop			; (mov r8, r8)
					pS->argv[pS->argc++] = tok_arg;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2248      	movs	r2, #72	; 0x48
 8006324:	5c9b      	ldrb	r3, [r3, r2]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	b2d0      	uxtb	r0, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	2148      	movs	r1, #72	; 0x48
 800632e:	5450      	strb	r0, [r2, r1]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	3312      	adds	r3, #18
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	18d3      	adds	r3, r2, r3
 8006338:	3304      	adds	r3, #4
 800633a:	6a3a      	ldr	r2, [r7, #32]
 800633c:	601a      	str	r2, [r3, #0]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 800633e:	230c      	movs	r3, #12
 8006340:	18fa      	adds	r2, r7, r3
 8006342:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <parse_http+0x328>)
 8006344:	0019      	movs	r1, r3
 8006346:	2000      	movs	r0, #0
 8006348:	f002 f9ad 	bl	80086a6 <strtok_r>
 800634c:	0003      	movs	r3, r0
 800634e:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1e3      	bne.n	800631e <parse_http+0x296>
				}
			}
		}
		pS->state++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	701a      	strb	r2, [r3, #0]
	case 4: // finished
		pS->ready = true;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	22ac      	movs	r2, #172	; 0xac
 8006366:	2101      	movs	r1, #1
 8006368:	5499      	strb	r1, [r3, r2]
	}
	return true;
 800636a:	2301      	movs	r3, #1
 800636c:	e012      	b.n	8006394 <parse_http+0x30c>
			goto HTTP_PARSE_ERROR;
 800636e:	46c0      	nop			; (mov r8, r8)
 8006370:	e008      	b.n	8006384 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	e006      	b.n	8006384 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 8006376:	46c0      	nop			; (mov r8, r8)
 8006378:	e004      	b.n	8006384 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	e002      	b.n	8006384 <parse_http+0x2fc>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 800637e:	46c0      	nop			; (mov r8, r8)
 8006380:	e000      	b.n	8006384 <parse_http+0x2fc>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8006382:	46c0      	nop			; (mov r8, r8)
	HTTP_PARSE_ERROR:
		pS->state = 0;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	701a      	strb	r2, [r3, #0]
		pS->ready = false;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	22ac      	movs	r2, #172	; 0xac
 800638e:	2100      	movs	r1, #0
 8006390:	5499      	strb	r1, [r3, r2]
		return false;
 8006392:	2300      	movs	r3, #0

}
 8006394:	0018      	movs	r0, r3
 8006396:	46bd      	mov	sp, r7
 8006398:	b00b      	add	sp, #44	; 0x2c
 800639a:	bd90      	pop	{r4, r7, pc}
 800639c:	080089a0 	.word	0x080089a0
 80063a0:	08008904 	.word	0x08008904
 80063a4:	080089a4 	.word	0x080089a4
 80063a8:	0800899c 	.word	0x0800899c
 80063ac:	08008994 	.word	0x08008994
 80063b0:	0800890c 	.word	0x0800890c
 80063b4:	080089a8 	.word	0x080089a8
 80063b8:	08008980 	.word	0x08008980
 80063bc:	08008910 	.word	0x08008910
 80063c0:	0800898c 	.word	0x0800898c

080063c4 <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
	if(pS->argc == 0)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2248      	movs	r2, #72	; 0x48
 80063d2:	5c9b      	ldrb	r3, [r3, r2]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <getHTTPArg+0x18>
		return NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	e03b      	b.n	8006454 <getHTTPArg+0x90>
	int i;
	const char* cur_s; 
	const char* cur_name = name;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 80063e0:	2300      	movs	r3, #0
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e02e      	b.n	8006444 <getHTTPArg+0x80>
	{
		// compare until '='
		cur_s = pS->argv[i];
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	3312      	adds	r3, #18
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	18d3      	adds	r3, r2, r3
 80063f0:	3304      	adds	r3, #4
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 80063f6:	e00b      	b.n	8006410 <getHTTPArg+0x4c>
		{
			if(*cur_s != *cur_name)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d10e      	bne.n	8006422 <getHTTPArg+0x5e>
			{
				break;
			}
			cur_name++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
			cur_s++;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <getHTTPArg+0x60>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1eb      	bne.n	80063f8 <getHTTPArg+0x34>
 8006420:	e000      	b.n	8006424 <getHTTPArg+0x60>
				break;
 8006422:	46c0      	nop			; (mov r8, r8)
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <getHTTPArg+0x76>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b3d      	cmp	r3, #61	; 0x3d
 8006432:	d102      	bne.n	800643a <getHTTPArg+0x76>
		{
			return cur_s+1;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	3301      	adds	r3, #1
 8006438:	e00c      	b.n	8006454 <getHTTPArg+0x90>
		}
		cur_name = name;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	3301      	adds	r3, #1
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2248      	movs	r2, #72	; 0x48
 8006448:	5c9b      	ldrb	r3, [r3, r2]
 800644a:	001a      	movs	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4293      	cmp	r3, r2
 8006450:	dbc9      	blt.n	80063e6 <getHTTPArg+0x22>
	}
	return NULL;
 8006452:	2300      	movs	r3, #0
}
 8006454:	0018      	movs	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	b006      	add	sp, #24
 800645a:	bd80      	pop	{r7, pc}

0800645c <atou8>:
uint8_t atou8(const char* s)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t sum = 0;
 8006464:	230e      	movs	r3, #14
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 800646c:	230f      	movs	r3, #15
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	e025      	b.n	80064c2 <atou8+0x66>
	{
		if(*s >= '0' && *s <= '9')
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b2f      	cmp	r3, #47	; 0x2f
 800647c:	d91f      	bls.n	80064be <atou8+0x62>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b39      	cmp	r3, #57	; 0x39
 8006484:	d81b      	bhi.n	80064be <atou8+0x62>
		{
			sum *= 10;
 8006486:	200e      	movs	r0, #14
 8006488:	183a      	adds	r2, r7, r0
 800648a:	183b      	adds	r3, r7, r0
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	1c19      	adds	r1, r3, #0
 8006490:	0089      	lsls	r1, r1, #2
 8006492:	18cb      	adds	r3, r1, r3
 8006494:	18db      	adds	r3, r3, r3
 8006496:	7013      	strb	r3, [r2, #0]
			sum += *s - '0';
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	183b      	adds	r3, r7, r0
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	18d3      	adds	r3, r2, r3
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	183b      	adds	r3, r7, r0
 80064a6:	3a30      	subs	r2, #48	; 0x30
 80064a8:	701a      	strb	r2, [r3, #0]
			s++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3301      	adds	r3, #1
 80064ae:	607b      	str	r3, [r7, #4]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 80064b0:	220f      	movs	r2, #15
 80064b2:	18bb      	adds	r3, r7, r2
 80064b4:	18ba      	adds	r2, r7, r2
 80064b6:	7812      	ldrb	r2, [r2, #0]
 80064b8:	3201      	adds	r2, #1
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	e001      	b.n	80064c2 <atou8+0x66>
		}
		else
			return 255; // error
 80064be:	23ff      	movs	r3, #255	; 0xff
 80064c0:	e00b      	b.n	80064da <atou8+0x7e>
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 80064c2:	230f      	movs	r3, #15
 80064c4:	18fb      	adds	r3, r7, r3
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d803      	bhi.n	80064d4 <atou8+0x78>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1d0      	bne.n	8006476 <atou8+0x1a>
	}
	return sum;
 80064d4:	230e      	movs	r3, #14
 80064d6:	18fb      	adds	r3, r7, r3
 80064d8:	781b      	ldrb	r3, [r3, #0]
}
 80064da:	0018      	movs	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	b004      	add	sp, #16
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <u16toa>:
uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 80064e2:	b5b0      	push	{r4, r5, r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	0002      	movs	r2, r0
 80064ea:	6039      	str	r1, [r7, #0]
 80064ec:	1dbb      	adds	r3, r7, #6
 80064ee:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0, j;
 80064f0:	230f      	movs	r3, #15
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	2200      	movs	r2, #0
 80064f6:	701a      	strb	r2, [r3, #0]
	while(d)
 80064f8:	e01d      	b.n	8006536 <u16toa+0x54>
	{
		buf[i++] = (d % 10) + '0';
 80064fa:	1dbb      	adds	r3, r7, #6
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	210a      	movs	r1, #10
 8006500:	0018      	movs	r0, r3
 8006502:	f7f9 fe99 	bl	8000238 <__aeabi_uidivmod>
 8006506:	000b      	movs	r3, r1
 8006508:	b29b      	uxth	r3, r3
 800650a:	b2da      	uxtb	r2, r3
 800650c:	210f      	movs	r1, #15
 800650e:	187b      	adds	r3, r7, r1
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	1879      	adds	r1, r7, r1
 8006514:	1c58      	adds	r0, r3, #1
 8006516:	7008      	strb	r0, [r1, #0]
 8006518:	0019      	movs	r1, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	185b      	adds	r3, r3, r1
 800651e:	3230      	adds	r2, #48	; 0x30
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
		d /= 10;
 8006524:	1dbc      	adds	r4, r7, #6
 8006526:	1dbb      	adds	r3, r7, #6
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	210a      	movs	r1, #10
 800652c:	0018      	movs	r0, r3
 800652e:	f7f9 fdfd 	bl	800012c <__udivsi3>
 8006532:	0003      	movs	r3, r0
 8006534:	8023      	strh	r3, [r4, #0]
	while(d)
 8006536:	1dbb      	adds	r3, r7, #6
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1dd      	bne.n	80064fa <u16toa+0x18>
	}
	buf[i] = 0;
 800653e:	230f      	movs	r3, #15
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	18d3      	adds	r3, r2, r3
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 800654c:	230e      	movs	r3, #14
 800654e:	18fb      	adds	r3, r7, r3
 8006550:	2200      	movs	r2, #0
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e028      	b.n	80065a8 <u16toa+0xc6>
	{
		char tmp;
		tmp = buf[j];
 8006556:	200e      	movs	r0, #14
 8006558:	183b      	adds	r3, r7, r0
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	18d2      	adds	r2, r2, r3
 8006560:	240d      	movs	r4, #13
 8006562:	193b      	adds	r3, r7, r4
 8006564:	7812      	ldrb	r2, [r2, #0]
 8006566:	701a      	strb	r2, [r3, #0]
		buf[j] = buf[i-j-1];
 8006568:	250f      	movs	r5, #15
 800656a:	197b      	adds	r3, r7, r5
 800656c:	781a      	ldrb	r2, [r3, #0]
 800656e:	183b      	adds	r3, r7, r0
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	3b01      	subs	r3, #1
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	18d2      	adds	r2, r2, r3
 800657a:	183b      	adds	r3, r7, r0
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	6839      	ldr	r1, [r7, #0]
 8006580:	18cb      	adds	r3, r1, r3
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	701a      	strb	r2, [r3, #0]
		buf[i-j-1] = tmp; // swap
 8006586:	197b      	adds	r3, r7, r5
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	0001      	movs	r1, r0
 800658c:	187b      	adds	r3, r7, r1
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	193a      	adds	r2, r7, r4
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 800659e:	187b      	adds	r3, r7, r1
 80065a0:	187a      	adds	r2, r7, r1
 80065a2:	7812      	ldrb	r2, [r2, #0]
 80065a4:	3201      	adds	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	210f      	movs	r1, #15
 80065aa:	187b      	adds	r3, r7, r1
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	220e      	movs	r2, #14
 80065b4:	18ba      	adds	r2, r7, r2
 80065b6:	7812      	ldrb	r2, [r2, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d3cc      	bcc.n	8006556 <u16toa+0x74>
	}
	return i;
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	781b      	ldrb	r3, [r3, #0]
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b004      	add	sp, #16
 80065c6:	bdb0      	pop	{r4, r5, r7, pc}

080065c8 <strcpy_f>:

// Fast strcpy
// Return: pointer to the end of dest + src
char* strcpy_f(char* dest, const char* src)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
	while(*src)
 80065d2:	e009      	b.n	80065e8 <strcpy_f+0x20>
	{
		*dest = *src;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	701a      	strb	r2, [r3, #0]
		src++;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	3301      	adds	r3, #1
 80065e0:	603b      	str	r3, [r7, #0]
		dest++;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3301      	adds	r3, #1
 80065e6:	607b      	str	r3, [r7, #4]
	while(*src)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d1f1      	bne.n	80065d4 <strcpy_f+0xc>
	}
	*dest = 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
	return dest;
 80065f6:	687b      	ldr	r3, [r7, #4]
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b002      	add	sp, #8
 80065fe:	bd80      	pop	{r7, pc}

08006600 <strncpy_f>:

char* strncpy_f(char* dest, const char* src, uint16_t len)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 800660e:	e00e      	b.n	800662e <strncpy_f+0x2e>
	{
		*dest = *src;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	701a      	strb	r2, [r3, #0]
		src++;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3301      	adds	r3, #1
 800661c:	60bb      	str	r3, [r7, #8]
		dest++;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3301      	adds	r3, #1
 8006622:	60fb      	str	r3, [r7, #12]
		len--;
 8006624:	1dbb      	adds	r3, r7, #6
 8006626:	881a      	ldrh	r2, [r3, #0]
 8006628:	1dbb      	adds	r3, r7, #6
 800662a:	3a01      	subs	r2, #1
 800662c:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <strncpy_f+0x3e>
 8006636:	1dbb      	adds	r3, r7, #6
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e8      	bne.n	8006610 <strncpy_f+0x10>
	}
	*dest = 0;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
	return dest;
 8006644:	68fb      	ldr	r3, [r7, #12]
}
 8006646:	0018      	movs	r0, r3
 8006648:	46bd      	mov	sp, r7
 800664a:	b004      	add	sp, #16
 800664c:	bd80      	pop	{r7, pc}

0800664e <IPv4_to_s>:

uint8_t IPv4_to_s(char* __restrict s ,const  uint8_t* __restrict IP)
{
 800664e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	6039      	str	r1, [r7, #0]
  	uint8_t n = 0;
 8006658:	230a      	movs	r3, #10
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8006660:	230f      	movs	r3, #15
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; ++i)
 8006668:	230e      	movs	r3, #14
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e0ad      	b.n	80067ce <IPv4_to_s+0x180>
  {
	uint8_t d = IP[i];
 8006672:	230e      	movs	r3, #14
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	18d2      	adds	r2, r2, r3
 800667c:	210d      	movs	r1, #13
 800667e:	187b      	adds	r3, r7, r1
 8006680:	7812      	ldrb	r2, [r2, #0]
 8006682:	701a      	strb	r2, [r3, #0]
	uint8_t nd = 0;
 8006684:	230c      	movs	r3, #12
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
	if(d > 0)
 800668c:	187b      	adds	r3, r7, r1
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d02b      	beq.n	80066ec <IPv4_to_s+0x9e>
	{
		while(d)
 8006694:	e024      	b.n	80066e0 <IPv4_to_s+0x92>
		{
			s[idx++] = (d % 10) + '0';
 8006696:	240d      	movs	r4, #13
 8006698:	193b      	adds	r3, r7, r4
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	210a      	movs	r1, #10
 800669e:	0018      	movs	r0, r3
 80066a0:	f7f9 fdca 	bl	8000238 <__aeabi_uidivmod>
 80066a4:	000b      	movs	r3, r1
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	210f      	movs	r1, #15
 80066aa:	187b      	adds	r3, r7, r1
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	1879      	adds	r1, r7, r1
 80066b0:	1c58      	adds	r0, r3, #1
 80066b2:	7008      	strb	r0, [r1, #0]
 80066b4:	0019      	movs	r1, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	185b      	adds	r3, r3, r1
 80066ba:	3230      	adds	r2, #48	; 0x30
 80066bc:	b2d2      	uxtb	r2, r2
 80066be:	701a      	strb	r2, [r3, #0]
			d /= 10;
 80066c0:	0023      	movs	r3, r4
 80066c2:	18fc      	adds	r4, r7, r3
 80066c4:	18fb      	adds	r3, r7, r3
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	210a      	movs	r1, #10
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7f9 fd2e 	bl	800012c <__udivsi3>
 80066d0:	0003      	movs	r3, r0
 80066d2:	7023      	strb	r3, [r4, #0]
			++nd;
 80066d4:	220c      	movs	r2, #12
 80066d6:	18bb      	adds	r3, r7, r2
 80066d8:	18ba      	adds	r2, r7, r2
 80066da:	7812      	ldrb	r2, [r2, #0]
 80066dc:	3201      	adds	r2, #1
 80066de:	701a      	strb	r2, [r3, #0]
		while(d)
 80066e0:	230d      	movs	r3, #13
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1d5      	bne.n	8006696 <IPv4_to_s+0x48>
 80066ea:	e00a      	b.n	8006702 <IPv4_to_s+0xb4>
		}
	}
	else
	{
		s[idx++] = '0';
 80066ec:	220f      	movs	r2, #15
 80066ee:	18bb      	adds	r3, r7, r2
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	18ba      	adds	r2, r7, r2
 80066f4:	1c59      	adds	r1, r3, #1
 80066f6:	7011      	strb	r1, [r2, #0]
 80066f8:	001a      	movs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	189b      	adds	r3, r3, r2
 80066fe:	2230      	movs	r2, #48	; 0x30
 8006700:	701a      	strb	r2, [r3, #0]
	}
	// reverse
	for(uint8_t j = 0; j < nd / 2; ++j)
 8006702:	230b      	movs	r3, #11
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
 800670a:	e038      	b.n	800677e <IPv4_to_s+0x130>
	{
		char c;
		c = s[idx - 1 - j];
 800670c:	240f      	movs	r4, #15
 800670e:	193b      	adds	r3, r7, r4
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	1e5a      	subs	r2, r3, #1
 8006714:	200b      	movs	r0, #11
 8006716:	183b      	adds	r3, r7, r0
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	001a      	movs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	189a      	adds	r2, r3, r2
 8006722:	2509      	movs	r5, #9
 8006724:	197b      	adds	r3, r7, r5
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	701a      	strb	r2, [r3, #0]
		s[idx - 1 - j] = s[idx - nd + j];
 800672a:	193b      	adds	r3, r7, r4
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	260c      	movs	r6, #12
 8006730:	19bb      	adds	r3, r7, r6
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	183b      	adds	r3, r7, r0
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	18d3      	adds	r3, r2, r3
 800673c:	001a      	movs	r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	189a      	adds	r2, r3, r2
 8006742:	193b      	adds	r3, r7, r4
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	1e59      	subs	r1, r3, #1
 8006748:	183b      	adds	r3, r7, r0
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	1acb      	subs	r3, r1, r3
 800674e:	0019      	movs	r1, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	185b      	adds	r3, r3, r1
 8006754:	7812      	ldrb	r2, [r2, #0]
 8006756:	701a      	strb	r2, [r3, #0]
		s[idx - nd + j] = c;
 8006758:	193b      	adds	r3, r7, r4
 800675a:	781a      	ldrb	r2, [r3, #0]
 800675c:	19bb      	adds	r3, r7, r6
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	1ad2      	subs	r2, r2, r3
 8006762:	183b      	adds	r3, r7, r0
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	18d3      	adds	r3, r2, r3
 8006768:	001a      	movs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	189b      	adds	r3, r3, r2
 800676e:	197a      	adds	r2, r7, r5
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < nd / 2; ++j)
 8006774:	183b      	adds	r3, r7, r0
 8006776:	183a      	adds	r2, r7, r0
 8006778:	7812      	ldrb	r2, [r2, #0]
 800677a:	3201      	adds	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	230c      	movs	r3, #12
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	b2db      	uxtb	r3, r3
 8006788:	220b      	movs	r2, #11
 800678a:	18ba      	adds	r2, r7, r2
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d3bc      	bcc.n	800670c <IPv4_to_s+0xbe>
	}
	// add dot
	if(i < 3)
 8006792:	230e      	movs	r3, #14
 8006794:	18fb      	adds	r3, r7, r3
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b02      	cmp	r3, #2
 800679a:	d80b      	bhi.n	80067b4 <IPv4_to_s+0x166>
	{
		s[idx++] = '.';
 800679c:	220f      	movs	r2, #15
 800679e:	18bb      	adds	r3, r7, r2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	18ba      	adds	r2, r7, r2
 80067a4:	1c59      	adds	r1, r3, #1
 80067a6:	7011      	strb	r1, [r2, #0]
 80067a8:	001a      	movs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	189b      	adds	r3, r3, r2
 80067ae:	222e      	movs	r2, #46	; 0x2e
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e006      	b.n	80067c2 <IPv4_to_s+0x174>
	}
	else
	{
		s[idx] = 0;
 80067b4:	230f      	movs	r3, #15
 80067b6:	18fb      	adds	r3, r7, r3
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	18d3      	adds	r3, r2, r3
 80067be:	2200      	movs	r2, #0
 80067c0:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; ++i)
 80067c2:	220e      	movs	r2, #14
 80067c4:	18bb      	adds	r3, r7, r2
 80067c6:	18ba      	adds	r2, r7, r2
 80067c8:	7812      	ldrb	r2, [r2, #0]
 80067ca:	3201      	adds	r2, #1
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	230e      	movs	r3, #14
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d800      	bhi.n	80067da <IPv4_to_s+0x18c>
 80067d8:	e74b      	b.n	8006672 <IPv4_to_s+0x24>
	}
  }
	return idx;
 80067da:	230f      	movs	r3, #15
 80067dc:	18fb      	adds	r3, r7, r3
 80067de:	781b      	ldrb	r3, [r3, #0]
}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b005      	add	sp, #20
 80067e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067e8 <start_receive_DMA>:
Serial485 *p485 = &_serial485;



static void start_receive_DMA(Serial485 *p485)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    p485->rx_head = 0;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2270      	movs	r2, #112	; 0x70
 80067f4:	2100      	movs	r1, #0
 80067f6:	5299      	strh	r1, [r3, r2]
    p485->rx_old_pos = 0;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2272      	movs	r2, #114	; 0x72
 80067fc:	2100      	movs	r1, #0
 80067fe:	5299      	strh	r1, [r3, r2]
    // start IDLE interrupt
//    __HAL_UART_ENABLE_IT(p485->cfg.pSerial, UART_IT_IDLE);
    // start DMA
    HAL_UARTEx_ReceiveToIdle_DMA(p485->cfg.pSerial, p485->rx_buffer, sizeof(p485->rx_buffer));
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	332c      	adds	r3, #44	; 0x2c
 8006808:	2220      	movs	r2, #32
 800680a:	0019      	movs	r1, r3
 800680c:	f7fd fc41 	bl	8004092 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8006810:	46c0      	nop			; (mov r8, r8)
 8006812:	46bd      	mov	sp, r7
 8006814:	b002      	add	sp, #8
 8006816:	bd80      	pop	{r7, pc}

08006818 <begin_serial485>:

void begin_serial485(Serial485 *p485, const Serial485_cfg_t* pCfg)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	memcpy(&p485->cfg, pCfg, sizeof(Serial485_cfg_t));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	220c      	movs	r2, #12
 8006828:	0018      	movs	r0, r3
 800682a:	f001 fe5d 	bl	80084e8 <memcpy>
    p485->state_RW = RE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	226e      	movs	r2, #110	; 0x6e
 8006832:	2101      	movs	r1, #1
 8006834:	5499      	strb	r1, [r3, r2]
    *(p485->command) = 0;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	731a      	strb	r2, [r3, #12]
    p485->len_unprocessed_command = 0;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	226c      	movs	r2, #108	; 0x6c
 8006840:	2100      	movs	r1, #0
 8006842:	5299      	strh	r1, [r3, r2]
    HAL_GPIO_WritePin(pCfg->pin_RW.group, pCfg->pin_RW.pin, RE); // toggle receive mode
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	6858      	ldr	r0, [r3, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	891b      	ldrh	r3, [r3, #8]
 800684c:	2201      	movs	r2, #1
 800684e:	0019      	movs	r1, r3
 8006850:	f7fa fd61 	bl	8001316 <HAL_GPIO_WritePin>

    // TRICK: store Serial485 pointer in AdvFeatureInit(uint32_t) member
	// for later iterruption use
	p485->cfg.pSerial->AdvancedInit.AdvFeatureInit = (uint32_t)(p485);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	625a      	str	r2, [r3, #36]	; 0x24

    start_receive_DMA(p485);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	0018      	movs	r0, r3
 8006860:	f7ff ffc2 	bl	80067e8 <start_receive_DMA>
    // when DMA interrupts, parse command and restart receiving


}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	000a      	movs	r2, r1
 8006876:	1cbb      	adds	r3, r7, #2
 8006878:	801a      	strh	r2, [r3, #0]
	Serial485* p485 = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	617b      	str	r3, [r7, #20]
	uint16_t *phead = &(p485->rx_head); // reserved for circular DMA mode
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	3370      	adds	r3, #112	; 0x70
 8006884:	613b      	str	r3, [r7, #16]
	uint16_t *pold_pos = &(p485->rx_old_pos);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	3372      	adds	r3, #114	; 0x72
 800688a:	60fb      	str	r3, [r7, #12]
   * enters here either HC/TC or IDLE
   * case 1: Size == old_pos, means idle received, process data from [header, Size), move head to Size
   * case 2: Size == RX_BUFFER_LEN, means buffer is full (TC), must process, and IDLE int will not be triggered instead
   */
  if(
		  (Size == *pold_pos) // case 1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	881b      	ldrh	r3, [r3, #0]
  if(
 8006890:	1cba      	adds	r2, r7, #2
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	429a      	cmp	r2, r3
 8006896:	d003      	beq.n	80068a0 <HAL_UARTEx_RxEventCallback+0x34>
		  || (Size == sizeof(p485->rx_buffer)) // case 2
 8006898:	1cbb      	adds	r3, r7, #2
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	2b20      	cmp	r3, #32
 800689e:	d12a      	bne.n	80068f6 <HAL_UARTEx_RxEventCallback+0x8a>
		  )
  {
	  if(p485->len_unprocessed_command == 0) // do not overwrite unprocessed command
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	226c      	movs	r2, #108	; 0x6c
 80068a4:	5a9b      	ldrh	r3, [r3, r2]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d11f      	bne.n	80068ec <HAL_UARTEx_RxEventCallback+0x80>
	  {

		  len_command =  Size - *phead;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	881a      	ldrh	r2, [r3, #0]
 80068b0:	240a      	movs	r4, #10
 80068b2:	193b      	adds	r3, r7, r4
 80068b4:	1cb9      	adds	r1, r7, #2
 80068b6:	8809      	ldrh	r1, [r1, #0]
 80068b8:	1a8a      	subs	r2, r1, r2
 80068ba:	801a      	strh	r2, [r3, #0]
		  strncpy(p485->command, p485->rx_buffer + *phead, len_command);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	330c      	adds	r3, #12
 80068c0:	0018      	movs	r0, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	332c      	adds	r3, #44	; 0x2c
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	8812      	ldrh	r2, [r2, #0]
 80068ca:	1899      	adds	r1, r3, r2
 80068cc:	193b      	adds	r3, r7, r4
 80068ce:	881b      	ldrh	r3, [r3, #0]
 80068d0:	001a      	movs	r2, r3
 80068d2:	f001 fe64 	bl	800859e <strncpy>
		  p485->command[len_command] = 0;
 80068d6:	193b      	adds	r3, r7, r4
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	18d3      	adds	r3, r2, r3
 80068de:	2200      	movs	r2, #0
 80068e0:	731a      	strb	r2, [r3, #12]

		  // process command
		  p485->len_unprocessed_command = len_command;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	193a      	adds	r2, r7, r4
 80068e6:	216c      	movs	r1, #108	; 0x6c
 80068e8:	8812      	ldrh	r2, [r2, #0]
 80068ea:	525a      	strh	r2, [r3, r1]
	  }

	  // restart DMA
	  start_receive_DMA(p485);
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	0018      	movs	r0, r3
 80068f0:	f7ff ff7a 	bl	80067e8 <start_receive_DMA>
 80068f4:	e004      	b.n	8006900 <HAL_UARTEx_RxEventCallback+0x94>
  }
  else // HC event, do nothing
	  *pold_pos = Size;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1cba      	adds	r2, r7, #2
 80068fa:	8812      	ldrh	r2, [r2, #0]
 80068fc:	801a      	strh	r2, [r3, #0]

}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	46c0      	nop			; (mov r8, r8)
 8006902:	46bd      	mov	sp, r7
 8006904:	b007      	add	sp, #28
 8006906:	bd90      	pop	{r4, r7, pc}

08006908 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	// restart DMA receiving when error occures
	// restart DMA
	Serial485* p485 = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	60fb      	str	r3, [r7, #12]
	start_receive_DMA(p485);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	0018      	movs	r0, r3
 800691a:	f7ff ff65 	bl	80067e8 <start_receive_DMA>
}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	46bd      	mov	sp, r7
 8006922:	b004      	add	sp, #16
 8006924:	bd80      	pop	{r7, pc}

08006926 <fn_ping>:
"NAME", // set antenna name by antenna num
};


int fn_ping(uint8_t argc, char** argv, char* ret)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	230f      	movs	r3, #15
 8006932:	18fb      	adds	r3, r7, r3
 8006934:	1c02      	adds	r2, r0, #0
 8006936:	701a      	strb	r2, [r3, #0]
	ret[0] = '?';
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	223f      	movs	r2, #63	; 0x3f
 800693c:	701a      	strb	r2, [r3, #0]
	ret[1] = '\r';
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3301      	adds	r3, #1
 8006942:	220d      	movs	r2, #13
 8006944:	701a      	strb	r2, [r3, #0]
	ret[2] = 0;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3302      	adds	r3, #2
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
	return 0;
 800694e:	2300      	movs	r3, #0
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b004      	add	sp, #16
 8006956:	bd80      	pop	{r7, pc}

08006958 <fn_get_ant_assignment>:


int fn_get_ant_assignment(uint8_t argc, char** argv, char* ret)
{
 8006958:	b5b0      	push	{r4, r5, r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
 8006962:	210f      	movs	r1, #15
 8006964:	187b      	adds	r3, r7, r1
 8006966:	1c02      	adds	r2, r0, #0
 8006968:	701a      	strb	r2, [r3, #0]
	if(argc < 2) goto error;
 800696a:	187b      	adds	r3, r7, r1
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d93f      	bls.n	80069f2 <fn_get_ant_assignment+0x9a>
	uint32_t radionum;
	err_t err;
	err = my_atou(argv[1], 1, &radionum);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	3304      	adds	r3, #4
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	251f      	movs	r5, #31
 800697a:	197c      	adds	r4, r7, r5
 800697c:	2218      	movs	r2, #24
 800697e:	18ba      	adds	r2, r7, r2
 8006980:	2101      	movs	r1, #1
 8006982:	0018      	movs	r0, r3
 8006984:	f000 fabe 	bl	8006f04 <my_atou>
 8006988:	0003      	movs	r3, r0
 800698a:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 800698c:	197b      	adds	r3, r7, r5
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	b25b      	sxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d12f      	bne.n	80069f6 <fn_get_ant_assignment+0x9e>
	if(radionum >= 1 && radionum <= N_SELECTORS)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02e      	beq.n	80069fa <fn_get_ant_assignment+0xa2>
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d82b      	bhi.n	80069fa <fn_get_ant_assignment+0xa2>
	{
		uint8_t antnums[N_SELECTORS];
		get_Antenna_real_BCDs(antnums, N_SELECTORS);
 80069a2:	2414      	movs	r4, #20
 80069a4:	193b      	adds	r3, r7, r4
 80069a6:	2102      	movs	r1, #2
 80069a8:	0018      	movs	r0, r3
 80069aa:	f001 f9ad 	bl	8007d08 <get_Antenna_real_BCDs>
		strcpy(ret, "AUX");
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <fn_get_ant_assignment+0xb0>)
 80069b2:	0010      	movs	r0, r2
 80069b4:	0019      	movs	r1, r3
 80069b6:	2304      	movs	r3, #4
 80069b8:	001a      	movs	r2, r3
 80069ba:	f001 fd95 	bl	80084e8 <memcpy>
		ret[3] = '0' + radionum;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3303      	adds	r3, #3
 80069c6:	3230      	adds	r2, #48	; 0x30
 80069c8:	b2d2      	uxtb	r2, r2
 80069ca:	701a      	strb	r2, [r3, #0]
		ret[4] = '0' + antnums[radionum-1];
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	193a      	adds	r2, r7, r4
 80069d2:	5cd2      	ldrb	r2, [r2, r3]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3304      	adds	r3, #4
 80069d8:	3230      	adds	r2, #48	; 0x30
 80069da:	b2d2      	uxtb	r2, r2
 80069dc:	701a      	strb	r2, [r3, #0]
		ret[5] = '\r';
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3305      	adds	r3, #5
 80069e2:	220d      	movs	r2, #13
 80069e4:	701a      	strb	r2, [r3, #0]
		ret[6] = 0;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	3306      	adds	r3, #6
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]
		return 0;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e005      	b.n	80069fe <fn_get_ant_assignment+0xa6>
	if(argc < 2) goto error;
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	e002      	b.n	80069fc <fn_get_ant_assignment+0xa4>
	if(err != ERR_OK) goto error;
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	e000      	b.n	80069fc <fn_get_ant_assignment+0xa4>
	}

error:
 80069fa:	46c0      	nop			; (mov r8, r8)
	return 1;
 80069fc:	2301      	movs	r3, #1
}
 80069fe:	0018      	movs	r0, r3
 8006a00:	46bd      	mov	sp, r7
 8006a02:	b008      	add	sp, #32
 8006a04:	bdb0      	pop	{r4, r5, r7, pc}
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	08008924 	.word	0x08008924

08006a0c <fn_set_ant_assignment>:



int fn_set_ant_assignment(uint8_t argc, char** argv, char* ret)
{
 8006a0c:	b5b0      	push	{r4, r5, r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	210f      	movs	r1, #15
 8006a18:	187b      	adds	r3, r7, r1
 8006a1a:	1c02      	adds	r2, r0, #0
 8006a1c:	701a      	strb	r2, [r3, #0]
	if(argc < 3) goto error;
 8006a1e:	187b      	adds	r3, r7, r1
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d800      	bhi.n	8006a28 <fn_set_ant_assignment+0x1c>
 8006a26:	e078      	b.n	8006b1a <fn_set_ant_assignment+0x10e>
	uint32_t radionum;
	uint32_t antnum = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &radionum);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	251e      	movs	r5, #30
 8006a34:	197c      	adds	r4, r7, r5
 8006a36:	2218      	movs	r2, #24
 8006a38:	18ba      	adds	r2, r7, r2
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	0018      	movs	r0, r3
 8006a3e:	f000 fa61 	bl	8006f04 <my_atou>
 8006a42:	0003      	movs	r3, r0
 8006a44:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8006a46:	002a      	movs	r2, r5
 8006a48:	18bb      	adds	r3, r7, r2
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	b25b      	sxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d165      	bne.n	8006b1e <fn_set_ant_assignment+0x112>
	err = my_atou(argv[2], 2, &antnum);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	3308      	adds	r3, #8
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	18bc      	adds	r4, r7, r2
 8006a5a:	2214      	movs	r2, #20
 8006a5c:	18ba      	adds	r2, r7, r2
 8006a5e:	2102      	movs	r1, #2
 8006a60:	0018      	movs	r0, r3
 8006a62:	f000 fa4f 	bl	8006f04 <my_atou>
 8006a66:	0003      	movs	r3, r0
 8006a68:	7023      	strb	r3, [r4, #0]
	if(radionum >= 1 && radionum <= N_SELECTORS && antnum <= N_ANTENNAS)
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d058      	beq.n	8006b22 <fn_set_ant_assignment+0x116>
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d855      	bhi.n	8006b22 <fn_set_ant_assignment+0x116>
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d852      	bhi.n	8006b22 <fn_set_ant_assignment+0x116>
	{
		/* send set request */
		uint8_t antnums[N_SELECTORS] = {0};
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	2200      	movs	r2, #0
 8006a82:	801a      	strh	r2, [r3, #0]
		for(uint8_t iRadio = 0; iRadio < N_SELECTORS; ++iRadio)
 8006a84:	231f      	movs	r3, #31
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	2200      	movs	r2, #0
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	e014      	b.n	8006ab8 <fn_set_ant_assignment+0xac>
		{
			antnums[iRadio] = Selector[iRadio].sel;
 8006a8e:	241f      	movs	r4, #31
 8006a90:	193b      	adds	r3, r7, r4
 8006a92:	781a      	ldrb	r2, [r3, #0]
 8006a94:	193b      	adds	r3, r7, r4
 8006a96:	7819      	ldrb	r1, [r3, #0]
 8006a98:	4825      	ldr	r0, [pc, #148]	; (8006b30 <fn_set_ant_assignment+0x124>)
 8006a9a:	0013      	movs	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	18c3      	adds	r3, r0, r3
 8006aa4:	3318      	adds	r3, #24
 8006aa6:	781a      	ldrb	r2, [r3, #0]
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	545a      	strb	r2, [r3, r1]
		for(uint8_t iRadio = 0; iRadio < N_SELECTORS; ++iRadio)
 8006aae:	193b      	adds	r3, r7, r4
 8006ab0:	193a      	adds	r2, r7, r4
 8006ab2:	7812      	ldrb	r2, [r2, #0]
 8006ab4:	3201      	adds	r2, #1
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	231f      	movs	r3, #31
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d9e5      	bls.n	8006a8e <fn_set_ant_assignment+0x82>
		}
		antnums[radionum - 1] = antnum;
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	b2d1      	uxtb	r1, r2
 8006aca:	2010      	movs	r0, #16
 8006acc:	183a      	adds	r2, r7, r0
 8006ace:	54d1      	strb	r1, [r2, r3]
		switch_Antenna(antnums, N_SELECTORS);
 8006ad0:	183b      	adds	r3, r7, r0
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f001 f875 	bl	8007bc4 <switch_Antenna>

		// print antnum to bufCMDRet
		strcpy(ret, "AUX");
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4b15      	ldr	r3, [pc, #84]	; (8006b34 <fn_set_ant_assignment+0x128>)
 8006ade:	0010      	movs	r0, r2
 8006ae0:	0019      	movs	r1, r3
 8006ae2:	2304      	movs	r3, #4
 8006ae4:	001a      	movs	r2, r3
 8006ae6:	f001 fcff 	bl	80084e8 <memcpy>
		ret[3] = '0' + radionum;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3303      	adds	r3, #3
 8006af2:	3230      	adds	r2, #48	; 0x30
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]
		ret[4] = '0' + antnum;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3304      	adds	r3, #4
 8006b00:	3230      	adds	r2, #48	; 0x30
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
		ret[5] = '\r';
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	3305      	adds	r3, #5
 8006b0a:	220d      	movs	r2, #13
 8006b0c:	701a      	strb	r2, [r3, #0]
		ret[6] = 0;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3306      	adds	r3, #6
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]
		return 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e005      	b.n	8006b26 <fn_set_ant_assignment+0x11a>
	if(argc < 3) goto error;
 8006b1a:	46c0      	nop			; (mov r8, r8)
 8006b1c:	e002      	b.n	8006b24 <fn_set_ant_assignment+0x118>
	if(err != ERR_OK) goto error;
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	e000      	b.n	8006b24 <fn_set_ant_assignment+0x118>
	}

error:
 8006b22:	46c0      	nop			; (mov r8, r8)
	return 1;
 8006b24:	2301      	movs	r3, #1
}
 8006b26:	0018      	movs	r0, r3
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b008      	add	sp, #32
 8006b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	200010d4 	.word	0x200010d4
 8006b34:	08008924 	.word	0x08008924

08006b38 <fn_set_ant_name>:


int fn_set_ant_name(uint8_t argc, char** argv, char* ret)
{
 8006b38:	b5b0      	push	{r4, r5, r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	607a      	str	r2, [r7, #4]
 8006b42:	210f      	movs	r1, #15
 8006b44:	187b      	adds	r3, r7, r1
 8006b46:	1c02      	adds	r2, r0, #0
 8006b48:	701a      	strb	r2, [r3, #0]
	if(argc < 3) goto error;
 8006b4a:	187b      	adds	r3, r7, r1
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d954      	bls.n	8006bfc <fn_set_ant_name+0xc4>
	uint32_t antnum = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &antnum);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	251f      	movs	r5, #31
 8006b5e:	197c      	adds	r4, r7, r5
 8006b60:	2214      	movs	r2, #20
 8006b62:	18ba      	adds	r2, r7, r2
 8006b64:	2101      	movs	r1, #1
 8006b66:	0018      	movs	r0, r3
 8006b68:	f000 f9cc 	bl	8006f04 <my_atou>
 8006b6c:	0003      	movs	r3, r0
 8006b6e:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8006b70:	197b      	adds	r3, r7, r5
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d142      	bne.n	8006c00 <fn_set_ant_name+0xc8>

	if(antnum > 0 && antnum <= N_ANTENNAS)
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d041      	beq.n	8006c04 <fn_set_ant_name+0xcc>
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b06      	cmp	r3, #6
 8006b84:	d83e      	bhi.n	8006c04 <fn_set_ant_name+0xcc>
	{
		// capture target ant name
		char* sLabelSaved = cfg.sAntNames[antnum-1];
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	3308      	adds	r3, #8
 8006b8e:	001a      	movs	r2, r3
 8006b90:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <fn_set_ant_name+0xd8>)
 8006b92:	18d3      	adds	r3, r2, r3
 8006b94:	3302      	adds	r3, #2
 8006b96:	61bb      	str	r3, [r7, #24]
		strncpy(sLabelSaved, argv[2], MAX_LEN_ANT_LABEL);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2210      	movs	r2, #16
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f001 fcfb 	bl	800859e <strncpy>
		sLabelSaved[MAX_LEN_ANT_LABEL - 1] = 0; // terminate the string
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	330f      	adds	r3, #15
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
		// print antnum to bufCMDRet
		strcpy(ret, "NAME");
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <fn_set_ant_name+0xdc>)
 8006bb4:	0010      	movs	r0, r2
 8006bb6:	0019      	movs	r1, r3
 8006bb8:	2305      	movs	r3, #5
 8006bba:	001a      	movs	r2, r3
 8006bbc:	f001 fc94 	bl	80084e8 <memcpy>
		ret[4] = '0' + antnum;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	3230      	adds	r2, #48	; 0x30
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	701a      	strb	r2, [r3, #0]
		strncat(ret, sLabelSaved, LEN_COMMANDS_RET_BUF);
 8006bce:	69b9      	ldr	r1, [r7, #24]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2218      	movs	r2, #24
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f001 fcbb 	bl	8008550 <strncat>
		strncat(ret, "\r", LEN_COMMANDS_RET_BUF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f7f9 fa9d 	bl	800011c <strlen>
 8006be2:	0003      	movs	r3, r0
 8006be4:	001a      	movs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	189a      	adds	r2, r3, r2
 8006bea:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <fn_set_ant_name+0xe0>)
 8006bec:	0010      	movs	r0, r2
 8006bee:	0019      	movs	r1, r3
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	f001 fc78 	bl	80084e8 <memcpy>
		return 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e005      	b.n	8006c08 <fn_set_ant_name+0xd0>
	if(argc < 3) goto error;
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	e002      	b.n	8006c06 <fn_set_ant_name+0xce>
	if(err != ERR_OK) goto error;
 8006c00:	46c0      	nop			; (mov r8, r8)
 8006c02:	e000      	b.n	8006c06 <fn_set_ant_name+0xce>
	}

error:
 8006c04:	46c0      	nop			; (mov r8, r8)
	return 1;
 8006c06:	2301      	movs	r3, #1
}
 8006c08:	0018      	movs	r0, r3
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	b008      	add	sp, #32
 8006c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c10:	20000d54 	.word	0x20000d54
 8006c14:	08008930 	.word	0x08008930
 8006c18:	08008938 	.word	0x08008938

08006c1c <fn_get_ant_name>:

int fn_get_ant_name(uint8_t argc, char** argv, char* ret)
{
 8006c1c:	b5b0      	push	{r4, r5, r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	210f      	movs	r1, #15
 8006c28:	187b      	adds	r3, r7, r1
 8006c2a:	1c02      	adds	r2, r0, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
	if(argc < 2) goto error;
 8006c2e:	187b      	adds	r3, r7, r1
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d954      	bls.n	8006ce0 <fn_get_ant_name+0xc4>
	uint32_t antnum = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &antnum);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	251f      	movs	r5, #31
 8006c42:	197c      	adds	r4, r7, r5
 8006c44:	2214      	movs	r2, #20
 8006c46:	18ba      	adds	r2, r7, r2
 8006c48:	2101      	movs	r1, #1
 8006c4a:	0018      	movs	r0, r3
 8006c4c:	f000 f95a 	bl	8006f04 <my_atou>
 8006c50:	0003      	movs	r3, r0
 8006c52:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8006c54:	197b      	adds	r3, r7, r5
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	b25b      	sxtb	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d142      	bne.n	8006ce4 <fn_get_ant_name+0xc8>

	if(antnum > 0 && antnum <= N_ANTENNAS)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d041      	beq.n	8006ce8 <fn_get_ant_name+0xcc>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2b06      	cmp	r3, #6
 8006c68:	d83e      	bhi.n	8006ce8 <fn_get_ant_name+0xcc>
	{
		// capture target ant name
		char* sLabelSaved = cfg.sAntNames[antnum-1];
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	3308      	adds	r3, #8
 8006c72:	001a      	movs	r2, r3
 8006c74:	4b1f      	ldr	r3, [pc, #124]	; (8006cf4 <fn_get_ant_name+0xd8>)
 8006c76:	18d3      	adds	r3, r2, r3
 8006c78:	3302      	adds	r3, #2
 8006c7a:	61bb      	str	r3, [r7, #24]
		strncpy(sLabelSaved, argv[2], MAX_LEN_ANT_LABEL);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2210      	movs	r2, #16
 8006c86:	0018      	movs	r0, r3
 8006c88:	f001 fc89 	bl	800859e <strncpy>
		sLabelSaved[MAX_LEN_ANT_LABEL - 1] = 0; // terminate the string
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	330f      	adds	r3, #15
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
		// print antnum to bufCMDRet
		strcpy(ret, "NAME");
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <fn_get_ant_name+0xdc>)
 8006c98:	0010      	movs	r0, r2
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	2305      	movs	r3, #5
 8006c9e:	001a      	movs	r2, r3
 8006ca0:	f001 fc22 	bl	80084e8 <memcpy>
		ret[4] = '0' + antnum;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	3230      	adds	r2, #48	; 0x30
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
		strncat(ret, sLabelSaved, LEN_COMMANDS_RET_BUF);
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2218      	movs	r2, #24
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f001 fc49 	bl	8008550 <strncat>
		strncat(ret, "\r", LEN_COMMANDS_RET_BUF);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	f7f9 fa2b 	bl	800011c <strlen>
 8006cc6:	0003      	movs	r3, r0
 8006cc8:	001a      	movs	r2, r3
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	189a      	adds	r2, r3, r2
 8006cce:	4b0b      	ldr	r3, [pc, #44]	; (8006cfc <fn_get_ant_name+0xe0>)
 8006cd0:	0010      	movs	r0, r2
 8006cd2:	0019      	movs	r1, r3
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	f001 fc06 	bl	80084e8 <memcpy>
		return 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e005      	b.n	8006cec <fn_get_ant_name+0xd0>
	if(argc < 2) goto error;
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	e002      	b.n	8006cea <fn_get_ant_name+0xce>
	if(err != ERR_OK) goto error;
 8006ce4:	46c0      	nop			; (mov r8, r8)
 8006ce6:	e000      	b.n	8006cea <fn_get_ant_name+0xce>
	}

error:
 8006ce8:	46c0      	nop			; (mov r8, r8)
	return 1;
 8006cea:	2301      	movs	r3, #1
}
 8006cec:	0018      	movs	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	b008      	add	sp, #32
 8006cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8006cf4:	20000d54 	.word	0x20000d54
 8006cf8:	08008930 	.word	0x08008930
 8006cfc:	08008938 	.word	0x08008938

08006d00 <parse_command_OTRSP>:
};



int parse_command_OTRSP(const char* s, uint16_t len, char* ret)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b08d      	sub	sp, #52	; 0x34
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	200a      	movs	r0, #10
 8006d0c:	183b      	adds	r3, r7, r0
 8006d0e:	1c0a      	adds	r2, r1, #0
 8006d10:	801a      	strh	r2, [r3, #0]

    uint32_t i  = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const char *delim = " ";
 8006d16:	4b76      	ldr	r3, [pc, #472]	; (8006ef0 <parse_command_OTRSP+0x1f0>)
 8006d18:	623b      	str	r3, [r7, #32]
    static char buf[16] = {0};
    char* pbuf = buf;
 8006d1a:	4b76      	ldr	r3, [pc, #472]	; (8006ef4 <parse_command_OTRSP+0x1f4>)
 8006d1c:	62bb      	str	r3, [r7, #40]	; 0x28
    int r = -1;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	425b      	negs	r3, r3
 8006d22:	61fb      	str	r3, [r7, #28]
    size_t argc = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
    static char* argv[4];

    if(len == 0)
 8006d28:	0004      	movs	r4, r0
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	881b      	ldrh	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d110      	bne.n	8006d54 <parse_command_OTRSP+0x54>
    	len = strlen(s);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	0018      	movs	r0, r3
 8006d36:	f7f9 f9f1 	bl	800011c <strlen>
 8006d3a:	0002      	movs	r2, r0
 8006d3c:	193b      	adds	r3, r7, r4
 8006d3e:	801a      	strh	r2, [r3, #0]

    // skip first invalid chars
    while((len > 0)
 8006d40:	e008      	b.n	8006d54 <parse_command_OTRSP+0x54>
    				(*s >= 'A'  && *s <= 'Z')
					|| (*s == '?')
				)
		 )
    {
        ++s;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	3301      	adds	r3, #1
 8006d46:	60fb      	str	r3, [r7, #12]
        --len;
 8006d48:	220a      	movs	r2, #10
 8006d4a:	18bb      	adds	r3, r7, r2
 8006d4c:	18ba      	adds	r2, r7, r2
 8006d4e:	8812      	ldrh	r2, [r2, #0]
 8006d50:	3a01      	subs	r2, #1
 8006d52:	801a      	strh	r2, [r3, #0]
    while((len > 0)
 8006d54:	230a      	movs	r3, #10
 8006d56:	18fb      	adds	r3, r7, r3
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00b      	beq.n	8006d76 <parse_command_OTRSP+0x76>
    				(*s >= 'A'  && *s <= 'Z')
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	781b      	ldrb	r3, [r3, #0]
    		&& !(
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d903      	bls.n	8006d6e <parse_command_OTRSP+0x6e>
    				(*s >= 'A'  && *s <= 'Z')
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	2b5a      	cmp	r3, #90	; 0x5a
 8006d6c:	d903      	bls.n	8006d76 <parse_command_OTRSP+0x76>
					|| (*s == '?')
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	781b      	ldrb	r3, [r3, #0]
    		&& !(
 8006d72:	2b3f      	cmp	r3, #63	; 0x3f
 8006d74:	d1e5      	bne.n	8006d42 <parse_command_OTRSP+0x42>
    }
    if(len <= 1)
 8006d76:	230a      	movs	r3, #10
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d800      	bhi.n	8006d82 <parse_command_OTRSP+0x82>
 8006d80:	e0aa      	b.n	8006ed8 <parse_command_OTRSP+0x1d8>


    /* build argv string */
    // 1.read command body
    // detect ? and alphabets
    argv[0] = buf;
 8006d82:	4b5d      	ldr	r3, [pc, #372]	; (8006ef8 <parse_command_OTRSP+0x1f8>)
 8006d84:	4a5b      	ldr	r2, [pc, #364]	; (8006ef4 <parse_command_OTRSP+0x1f4>)
 8006d86:	601a      	str	r2, [r3, #0]
    while((len > 0)
 8006d88:	e00e      	b.n	8006da8 <parse_command_OTRSP+0xa8>
    				(*s >= 'A'  && *s <= 'Z')
					|| (*s == '?')
				)
		  )
    {
    	--len;
 8006d8a:	220a      	movs	r2, #10
 8006d8c:	18bb      	adds	r3, r7, r2
 8006d8e:	18ba      	adds	r2, r7, r2
 8006d90:	8812      	ldrh	r2, [r2, #0]
 8006d92:	3a01      	subs	r2, #1
 8006d94:	801a      	strh	r2, [r3, #0]
    	*(pbuf++) = *s;
 8006d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d98:	1c5a      	adds	r2, r3, #1
 8006d9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	701a      	strb	r2, [r3, #0]
    	++s;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3301      	adds	r3, #1
 8006da6:	60fb      	str	r3, [r7, #12]
    while((len > 0)
 8006da8:	230a      	movs	r3, #10
 8006daa:	18fb      	adds	r3, r7, r3
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <parse_command_OTRSP+0xca>
    				(*s >= 'A'  && *s <= 'Z')
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	781b      	ldrb	r3, [r3, #0]
    		&& (
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d903      	bls.n	8006dc2 <parse_command_OTRSP+0xc2>
    				(*s >= 'A'  && *s <= 'Z')
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b5a      	cmp	r3, #90	; 0x5a
 8006dc0:	d9e3      	bls.n	8006d8a <parse_command_OTRSP+0x8a>
					|| (*s == '?')
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b3f      	cmp	r3, #63	; 0x3f
 8006dc8:	d0df      	beq.n	8006d8a <parse_command_OTRSP+0x8a>
    }
    if(pbuf == buf)
 8006dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dcc:	4b49      	ldr	r3, [pc, #292]	; (8006ef4 <parse_command_OTRSP+0x1f4>)
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d100      	bne.n	8006dd4 <parse_command_OTRSP+0xd4>
 8006dd2:	e083      	b.n	8006edc <parse_command_OTRSP+0x1dc>
    	goto bad_command;
    *(pbuf++)= 0; // terminate the command
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
    ++argc;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	3301      	adds	r3, #1
 8006de2:	627b      	str	r3, [r7, #36]	; 0x24
    // detect number arguments, each digit takes as 1 argument (if exists)
    while(len > 0 && argc < 4)
 8006de4:	e041      	b.n	8006e6a <parse_command_OTRSP+0x16a>
    {
		while((len > 0) && (*s == ' ' || *s == ',' || *s == '\t'))
		{
			--len;
 8006de6:	220a      	movs	r2, #10
 8006de8:	18bb      	adds	r3, r7, r2
 8006dea:	18ba      	adds	r2, r7, r2
 8006dec:	8812      	ldrh	r2, [r2, #0]
 8006dee:	3a01      	subs	r2, #1
 8006df0:	801a      	strh	r2, [r3, #0]
			++s;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
		while((len > 0) && (*s == ' ' || *s == ',' || *s == '\t'))
 8006df8:	230a      	movs	r3, #10
 8006dfa:	18fb      	adds	r3, r7, r3
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00b      	beq.n	8006e1a <parse_command_OTRSP+0x11a>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d0ed      	beq.n	8006de6 <parse_command_OTRSP+0xe6>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b2c      	cmp	r3, #44	; 0x2c
 8006e10:	d0e9      	beq.n	8006de6 <parse_command_OTRSP+0xe6>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	d0e5      	beq.n	8006de6 <parse_command_OTRSP+0xe6>
		}
		if(len > 0 && *s >= '0' && *s <= '9')
 8006e1a:	200a      	movs	r0, #10
 8006e1c:	183b      	adds	r3, r7, r0
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02b      	beq.n	8006e7c <parse_command_OTRSP+0x17c>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b2f      	cmp	r3, #47	; 0x2f
 8006e2a:	d927      	bls.n	8006e7c <parse_command_OTRSP+0x17c>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b39      	cmp	r3, #57	; 0x39
 8006e32:	d823      	bhi.n	8006e7c <parse_command_OTRSP+0x17c>
		{
			*(pbuf++) = *s;
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	701a      	strb	r2, [r3, #0]
			argv[argc] = pbuf;
 8006e40:	4b2d      	ldr	r3, [pc, #180]	; (8006ef8 <parse_command_OTRSP+0x1f8>)
 8006e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e44:	0092      	lsls	r2, r2, #2
 8006e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e48:	50d1      	str	r1, [r2, r3]
			++argc;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
			++s;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
			--len;
 8006e56:	183b      	adds	r3, r7, r0
 8006e58:	183a      	adds	r2, r7, r0
 8006e5a:	8812      	ldrh	r2, [r2, #0]
 8006e5c:	3a01      	subs	r2, #1
 8006e5e:	801a      	strh	r2, [r3, #0]
			*(pbuf++) = 0; // terminate the 1st number argument
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
    while(len > 0 && argc < 4)
 8006e6a:	230a      	movs	r3, #10
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <parse_command_OTRSP+0x180>
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d9be      	bls.n	8006df8 <parse_command_OTRSP+0xf8>
			goto end_parse;
		}
    }


end_parse:
 8006e7a:	e001      	b.n	8006e80 <parse_command_OTRSP+0x180>
			goto end_parse;
 8006e7c:	46c0      	nop			; (mov r8, r8)
 8006e7e:	e000      	b.n	8006e82 <parse_command_OTRSP+0x182>
end_parse:
 8006e80:	46c0      	nop			; (mov r8, r8)
    i = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    // match a command
    while((i < N_commands_OTRSP) && (strcmp(argv[0], commands_OTRSP[i]) != 0)) i++;
 8006e86:	e002      	b.n	8006e8e <parse_command_OTRSP+0x18e>
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b04      	cmp	r3, #4
 8006e92:	d80a      	bhi.n	8006eaa <parse_command_OTRSP+0x1aa>
 8006e94:	4b18      	ldr	r3, [pc, #96]	; (8006ef8 <parse_command_OTRSP+0x1f8>)
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	4b18      	ldr	r3, [pc, #96]	; (8006efc <parse_command_OTRSP+0x1fc>)
 8006e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e9c:	0092      	lsls	r2, r2, #2
 8006e9e:	58d3      	ldr	r3, [r2, r3]
 8006ea0:	0019      	movs	r1, r3
 8006ea2:	f7f9 f931 	bl	8000108 <strcmp>
 8006ea6:	1e03      	subs	r3, r0, #0
 8006ea8:	d1ee      	bne.n	8006e88 <parse_command_OTRSP+0x188>
    // command found
    if(i < N_commands_OTRSP)
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d817      	bhi.n	8006ee0 <parse_command_OTRSP+0x1e0>
    {
        cmd_executer_func_t fn = command_executers_OTRSP[i];
 8006eb0:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <parse_command_OTRSP+0x200>)
 8006eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eb4:	0092      	lsls	r2, r2, #2
 8006eb6:	58d3      	ldr	r3, [r2, r3]
 8006eb8:	61bb      	str	r3, [r7, #24]
        int err = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
        if(fn) err = fn(argc, argv, ret); // execute command
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d007      	beq.n	8006ed4 <parse_command_OTRSP+0x1d4>
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	b2d8      	uxtb	r0, r3
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	490b      	ldr	r1, [pc, #44]	; (8006ef8 <parse_command_OTRSP+0x1f8>)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	4798      	blx	r3
 8006ed0:	0003      	movs	r3, r0
 8006ed2:	617b      	str	r3, [r7, #20]
    else
    {
        goto bad_command;
    }
    // return the index of parsed command
    return i;
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	e006      	b.n	8006ee6 <parse_command_OTRSP+0x1e6>
        goto bad_command;
 8006ed8:	46c0      	nop			; (mov r8, r8)
 8006eda:	e002      	b.n	8006ee2 <parse_command_OTRSP+0x1e2>
    	goto bad_command;
 8006edc:	46c0      	nop			; (mov r8, r8)
 8006ede:	e000      	b.n	8006ee2 <parse_command_OTRSP+0x1e2>
        goto bad_command;
 8006ee0:	46c0      	nop			; (mov r8, r8)
bad_command:
    return -1;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	425b      	negs	r3, r3
}
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b00d      	add	sp, #52	; 0x34
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	0800893c 	.word	0x0800893c
 8006ef4:	20000d18 	.word	0x20000d18
 8006ef8:	20000d28 	.word	0x20000d28
 8006efc:	20000674 	.word	0x20000674
 8006f00:	08008a18 	.word	0x08008a18

08006f04 <my_atou>:
	buf[i] = 0;
	return i;
}

err_t my_atou(const char* buf, int8_t nMaxLen, uint32_t* retval)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	230b      	movs	r3, #11
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	1c0a      	adds	r2, r1, #0
 8006f14:	701a      	strb	r2, [r3, #0]
	const char* p = buf;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	61fb      	str	r3, [r7, #28]
	uint32_t v = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	61bb      	str	r3, [r7, #24]
	while(*p && (nMaxLen > 0))
 8006f1e:	e020      	b.n	8006f62 <my_atou+0x5e>
	{
        uint8_t d = *p - '0';
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	2117      	movs	r1, #23
 8006f26:	187b      	adds	r3, r7, r1
 8006f28:	3a30      	subs	r2, #48	; 0x30
 8006f2a:	701a      	strb	r2, [r3, #0]
        if(d > 9) goto failed;
 8006f2c:	187b      	adds	r3, r7, r1
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b09      	cmp	r3, #9
 8006f32:	d825      	bhi.n	8006f80 <my_atou+0x7c>
		v = v * 10 + (*p - '0');
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	0013      	movs	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	189b      	adds	r3, r3, r2
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	001a      	movs	r2, r3
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	18d3      	adds	r3, r2, r3
 8006f46:	3b30      	subs	r3, #48	; 0x30
 8006f48:	61bb      	str	r3, [r7, #24]
		p++;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
		nMaxLen--;
 8006f50:	210b      	movs	r1, #11
 8006f52:	187b      	adds	r3, r7, r1
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	b25b      	sxtb	r3, r3
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b2da      	uxtb	r2, r3
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	701a      	strb	r2, [r3, #0]
	while(*p && (nMaxLen > 0))
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <my_atou+0x72>
 8006f6a:	230b      	movs	r3, #11
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	b25b      	sxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	dcd4      	bgt.n	8006f20 <my_atou+0x1c>
	}
    *retval = v;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e002      	b.n	8006f86 <my_atou+0x82>
        if(d > 9) goto failed;
 8006f80:	46c0      	nop			; (mov r8, r8)
failed:
    return ERR_FAILED;
 8006f82:	2301      	movs	r3, #1
 8006f84:	425b      	negs	r3, r3
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b008      	add	sp, #32
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <execute_command_string>:




int execute_command_string(CommandParser_t* pParser, const char* s, size_t len)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b086      	sub	sp, #24
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	607a      	str	r2, [r7, #4]
    int r = -1;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	425b      	negs	r3, r3
 8006f9e:	617b      	str	r3, [r7, #20]
    switch(pParser->protocol)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d11b      	bne.n	8006fe0 <execute_command_string+0x52>
    {
    case COMMAND_PROTOCOL_OTRSP:
    	pParser->bufRet[0] = 0;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	709a      	strb	r2, [r3, #2]
    	r = parse_command_OTRSP(s, len, pParser->bufRet);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	b299      	uxth	r1, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1c9a      	adds	r2, r3, #2
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff fea1 	bl	8006d00 <parse_command_OTRSP>
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	617b      	str	r3, [r7, #20]
    	if(pParser->bufRet[0]) // parsed is valid
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	789b      	ldrb	r3, [r3, #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <execute_command_string+0x56>
    		pParser->hasResponse = strnlen(pParser->bufRet, sizeof(pParser->bufRet));
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3302      	adds	r3, #2
 8006fce:	2118      	movs	r1, #24
 8006fd0:	0018      	movs	r0, r3
 8006fd2:	f001 faf8 	bl	80085c6 <strnlen>
 8006fd6:	0003      	movs	r3, r0
 8006fd8:	b2da      	uxtb	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	705a      	strb	r2, [r3, #1]
    	break;
 8006fde:	e001      	b.n	8006fe4 <execute_command_string+0x56>
    default:
    	break;
 8006fe0:	46c0      	nop			; (mov r8, r8)
 8006fe2:	e000      	b.n	8006fe6 <execute_command_string+0x58>
    	break;
 8006fe4:	46c0      	nop			; (mov r8, r8)
    }
    return r;
 8006fe6:	697b      	ldr	r3, [r7, #20]
}
 8006fe8:	0018      	movs	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	b006      	add	sp, #24
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ff2:	b089      	sub	sp, #36	; 0x24
 8006ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	Selector[0].PIN_BCDs[0] = BCD1_0;
 8006ff6:	4bcb      	ldr	r3, [pc, #812]	; (8007324 <main+0x334>)
 8006ff8:	4acb      	ldr	r2, [pc, #812]	; (8007328 <main+0x338>)
 8006ffa:	ca03      	ldmia	r2!, {r0, r1}
 8006ffc:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCDs[1] = BCD1_1;
 8006ffe:	4bc9      	ldr	r3, [pc, #804]	; (8007324 <main+0x334>)
 8007000:	4aca      	ldr	r2, [pc, #808]	; (800732c <main+0x33c>)
 8007002:	3308      	adds	r3, #8
 8007004:	ca03      	ldmia	r2!, {r0, r1}
 8007006:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCDs[2] = BCD1_2;
 8007008:	4bc6      	ldr	r3, [pc, #792]	; (8007324 <main+0x334>)
 800700a:	4ac9      	ldr	r2, [pc, #804]	; (8007330 <main+0x340>)
 800700c:	3310      	adds	r3, #16
 800700e:	ca03      	ldmia	r2!, {r0, r1}
 8007010:	c303      	stmia	r3!, {r0, r1}
	Selector[0].sel = 0;
 8007012:	4bc4      	ldr	r3, [pc, #784]	; (8007324 <main+0x334>)
 8007014:	2200      	movs	r2, #0
 8007016:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCDs[0] = BCD2_0;
 8007018:	4bc2      	ldr	r3, [pc, #776]	; (8007324 <main+0x334>)
 800701a:	4ac6      	ldr	r2, [pc, #792]	; (8007334 <main+0x344>)
 800701c:	331c      	adds	r3, #28
 800701e:	ca03      	ldmia	r2!, {r0, r1}
 8007020:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCDs[1] = BCD2_1;
 8007022:	4bc0      	ldr	r3, [pc, #768]	; (8007324 <main+0x334>)
 8007024:	4ac4      	ldr	r2, [pc, #784]	; (8007338 <main+0x348>)
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	ca03      	ldmia	r2!, {r0, r1}
 800702a:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCDs[2] = BCD2_2;
 800702c:	4bbd      	ldr	r3, [pc, #756]	; (8007324 <main+0x334>)
 800702e:	4ac3      	ldr	r2, [pc, #780]	; (800733c <main+0x34c>)
 8007030:	332c      	adds	r3, #44	; 0x2c
 8007032:	ca03      	ldmia	r2!, {r0, r1}
 8007034:	c303      	stmia	r3!, {r0, r1}
	Selector[1].sel = 0;
 8007036:	4bbb      	ldr	r3, [pc, #748]	; (8007324 <main+0x334>)
 8007038:	2234      	movs	r2, #52	; 0x34
 800703a:	2100      	movs	r1, #0
 800703c:	5499      	strb	r1, [r3, r2]

	SelectorM[0].PIN_BCDs[0] = BCDM1_0;
 800703e:	4bc0      	ldr	r3, [pc, #768]	; (8007340 <main+0x350>)
 8007040:	4ac0      	ldr	r2, [pc, #768]	; (8007344 <main+0x354>)
 8007042:	ca03      	ldmia	r2!, {r0, r1}
 8007044:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].PIN_BCDs[1] = BCDM1_1;
 8007046:	4bbe      	ldr	r3, [pc, #760]	; (8007340 <main+0x350>)
 8007048:	4abf      	ldr	r2, [pc, #764]	; (8007348 <main+0x358>)
 800704a:	3308      	adds	r3, #8
 800704c:	ca03      	ldmia	r2!, {r0, r1}
 800704e:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].PIN_BCDs[2] = BCDM1_2;
 8007050:	4bbb      	ldr	r3, [pc, #748]	; (8007340 <main+0x350>)
 8007052:	4abe      	ldr	r2, [pc, #760]	; (800734c <main+0x35c>)
 8007054:	3310      	adds	r3, #16
 8007056:	ca03      	ldmia	r2!, {r0, r1}
 8007058:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].sel = 0;
 800705a:	4bb9      	ldr	r3, [pc, #740]	; (8007340 <main+0x350>)
 800705c:	2200      	movs	r2, #0
 800705e:	761a      	strb	r2, [r3, #24]
	SelectorM[1].PIN_BCDs[0] = BCDM2_0;
 8007060:	4bb7      	ldr	r3, [pc, #732]	; (8007340 <main+0x350>)
 8007062:	4abb      	ldr	r2, [pc, #748]	; (8007350 <main+0x360>)
 8007064:	331c      	adds	r3, #28
 8007066:	ca03      	ldmia	r2!, {r0, r1}
 8007068:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].PIN_BCDs[1] = BCDM2_1;
 800706a:	4bb5      	ldr	r3, [pc, #724]	; (8007340 <main+0x350>)
 800706c:	4ab9      	ldr	r2, [pc, #740]	; (8007354 <main+0x364>)
 800706e:	3324      	adds	r3, #36	; 0x24
 8007070:	ca03      	ldmia	r2!, {r0, r1}
 8007072:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].PIN_BCDs[2] = BCDM2_2;
 8007074:	4bb2      	ldr	r3, [pc, #712]	; (8007340 <main+0x350>)
 8007076:	4ab8      	ldr	r2, [pc, #736]	; (8007358 <main+0x368>)
 8007078:	332c      	adds	r3, #44	; 0x2c
 800707a:	ca03      	ldmia	r2!, {r0, r1}
 800707c:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].sel = 0;
 800707e:	4bb0      	ldr	r3, [pc, #704]	; (8007340 <main+0x350>)
 8007080:	2234      	movs	r2, #52	; 0x34
 8007082:	2100      	movs	r1, #0
 8007084:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007086:	f7f9 fa3b 	bl	8000500 <HAL_Init>

  /* USER CODE BEGIN Init */
	// init 485
	Serial485_cfg_t cfg485 =
 800708a:	2108      	movs	r1, #8
 800708c:	187b      	adds	r3, r7, r1
 800708e:	4ab3      	ldr	r2, [pc, #716]	; (800735c <main+0x36c>)
 8007090:	ca31      	ldmia	r2!, {r0, r4, r5}
 8007092:	c331      	stmia	r3!, {r0, r4, r5}
	{ .pSerial = &huart2, .pin_RW =
	{ RW485_GPIO_Port, RW485_Pin } };
	begin_serial485(p485, &cfg485);
 8007094:	4bb2      	ldr	r3, [pc, #712]	; (8007360 <main+0x370>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	187a      	adds	r2, r7, r1
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f7ff fbbb 	bl	8006818 <begin_serial485>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80070a2:	f000 f975 	bl	8007390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070a6:	f000 fa6f 	bl	8007588 <MX_GPIO_Init>
  MX_SPI1_Init();
 80070aa:	f000 f9bf 	bl	800742c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80070ae:	f000 fa1d 	bl	80074ec <MX_USART2_UART_Init>
  MX_DMA_Init();
 80070b2:	f000 fa4b 	bl	800754c <MX_DMA_Init>
//  MX_IWDG_Init();
  MX_TIM6_Init();
 80070b6:	f000 f9f7 	bl	80074a8 <MX_TIM6_Init>
	 EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	 }
	 */

	/* init: config */
	load_config(&cfg);
 80070ba:	4baa      	ldr	r3, [pc, #680]	; (8007364 <main+0x374>)
 80070bc:	0018      	movs	r0, r3
 80070be:	f7f9 f8c1 	bl	8000244 <load_config>
	if (!config_check_valid(&cfg))
 80070c2:	4ba8      	ldr	r3, [pc, #672]	; (8007364 <main+0x374>)
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7f9 f8e3 	bl	8000290 <config_check_valid>
 80070ca:	0003      	movs	r3, r0
 80070cc:	001a      	movs	r2, r3
 80070ce:	2301      	movs	r3, #1
 80070d0:	4053      	eors	r3, r2
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <main+0xf0>
	{
		init_config(&cfg);
 80070d8:	4ba2      	ldr	r3, [pc, #648]	; (8007364 <main+0x374>)
 80070da:	0018      	movs	r0, r3
 80070dc:	f7fd fdfc 	bl	8004cd8 <init_config>
	}

	/* init: antenna selections */
	uint8_t antnums[N_SELECTORS];
	for (i = 0; i < N_SELECTORS; ++i)
 80070e0:	231f      	movs	r3, #31
 80070e2:	18fb      	adds	r3, r7, r3
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
 80070e8:	e00e      	b.n	8007108 <main+0x118>
	{
		antnums[i] = cfg.nRadioToAntNums[i];
 80070ea:	201f      	movs	r0, #31
 80070ec:	183b      	adds	r3, r7, r0
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	183b      	adds	r3, r7, r0
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	499b      	ldr	r1, [pc, #620]	; (8007364 <main+0x374>)
 80070f6:	188a      	adds	r2, r1, r2
 80070f8:	7a11      	ldrb	r1, [r2, #8]
 80070fa:	1d3a      	adds	r2, r7, #4
 80070fc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < N_SELECTORS; ++i)
 80070fe:	183b      	adds	r3, r7, r0
 8007100:	183a      	adds	r2, r7, r0
 8007102:	7812      	ldrb	r2, [r2, #0]
 8007104:	3201      	adds	r2, #1
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	241f      	movs	r4, #31
 800710a:	193b      	adds	r3, r7, r4
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b01      	cmp	r3, #1
 8007110:	d9eb      	bls.n	80070ea <main+0xfa>
	}
	switch_Antenna(antnums, N_SELECTORS);
 8007112:	1d3b      	adds	r3, r7, #4
 8007114:	2102      	movs	r1, #2
 8007116:	0018      	movs	r0, r3
 8007118:	f000 fd54 	bl	8007bc4 <switch_Antenna>

	/* init: File System for webpages*/
	FS_begin(&FS, (uint32_t*) FS_BASE_ADDR);
 800711c:	4a92      	ldr	r2, [pc, #584]	; (8007368 <main+0x378>)
 800711e:	4b93      	ldr	r3, [pc, #588]	; (800736c <main+0x37c>)
 8007120:	0011      	movs	r1, r2
 8007122:	0018      	movs	r0, r3
 8007124:	f7fd fe12 	bl	8004d4c <FS_begin>
	i = FS_exists(&FS, "/index.html");
 8007128:	4a91      	ldr	r2, [pc, #580]	; (8007370 <main+0x380>)
 800712a:	4b90      	ldr	r3, [pc, #576]	; (800736c <main+0x37c>)
 800712c:	0011      	movs	r1, r2
 800712e:	0018      	movs	r0, r3
 8007130:	f7fd fe7a 	bl	8004e28 <FS_exists>
 8007134:	0003      	movs	r3, r0
 8007136:	001a      	movs	r2, r3
 8007138:	193b      	adds	r3, r7, r4
 800713a:	701a      	strb	r2, [r3, #0]
	i = FS_exists(&FS, "/b.f");
 800713c:	4a8d      	ldr	r2, [pc, #564]	; (8007374 <main+0x384>)
 800713e:	4b8b      	ldr	r3, [pc, #556]	; (800736c <main+0x37c>)
 8007140:	0011      	movs	r1, r2
 8007142:	0018      	movs	r0, r3
 8007144:	f7fd fe70 	bl	8004e28 <FS_exists>
 8007148:	0003      	movs	r3, r0
 800714a:	001a      	movs	r2, r3
 800714c:	193b      	adds	r3, r7, r4
 800714e:	701a      	strb	r2, [r3, #0]

//	HAL_IWDG_Refresh(&hiwdg); // feed dog
	/* init: Ethernet chip */
	HAL_Delay(350); // wait for CH395 being ready from power on
 8007150:	23af      	movs	r3, #175	; 0xaf
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	0018      	movs	r0, r3
 8007156:	f7f9 fa37 	bl	80005c8 <HAL_Delay>
	for (i = 0; i < 0xff; ++i)
 800715a:	193b      	adds	r3, r7, r4
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	e015      	b.n	800718e <main+0x19e>
	{
		if (CH395CMDCheckExist(i) != (uint8_t) ~i)
 8007162:	241f      	movs	r4, #31
 8007164:	193b      	adds	r3, r7, r4
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	0018      	movs	r0, r3
 800716a:	f7fd f8e1 	bl	8004330 <CH395CMDCheckExist>
 800716e:	0003      	movs	r3, r0
 8007170:	001a      	movs	r2, r3
 8007172:	193b      	adds	r3, r7, r4
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	43db      	mvns	r3, r3
 8007178:	b2db      	uxtb	r3, r3
 800717a:	429a      	cmp	r2, r3
 800717c:	d001      	beq.n	8007182 <main+0x192>
		{
			DEBUG_LOG("CH395 self check error!\n");
 800717e:	46c0      	nop			; (mov r8, r8)
			break;
 8007180:	e00b      	b.n	800719a <main+0x1aa>
	for (i = 0; i < 0xff; ++i)
 8007182:	221f      	movs	r2, #31
 8007184:	18bb      	adds	r3, r7, r2
 8007186:	18ba      	adds	r2, r7, r2
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	3201      	adds	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	231f      	movs	r3, #31
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2bff      	cmp	r3, #255	; 0xff
 8007196:	d1e4      	bne.n	8007162 <main+0x172>
		}
	}

	RESET_CH395: reset_CH395();
 8007198:	46c0      	nop			; (mov r8, r8)
 800719a:	f000 faaf 	bl	80076fc <reset_CH395>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	static uint32_t lastWakeupTime;
	lastWakeupTime = HAL_GetTick();
 800719e:	f7f9 fa09 	bl	80005b4 <HAL_GetTick>
 80071a2:	0002      	movs	r2, r0
 80071a4:	4b74      	ldr	r3, [pc, #464]	; (8007378 <main+0x388>)
 80071a6:	601a      	str	r2, [r3, #0]
	{

//		HAL_IWDG_Refresh(&hiwdg); // feed dog
		/* TASK0: handle CH395 interrupt flags */
		{
			if (flag_PHY_reconn && !flag_CH395_ready)
 80071a8:	4b74      	ldr	r3, [pc, #464]	; (800737c <main+0x38c>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <main+0x1d4>
 80071b2:	4b73      	ldr	r3, [pc, #460]	; (8007380 <main+0x390>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	4053      	eors	r3, r2
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d000      	beq.n	80071c4 <main+0x1d4>
				goto RESET_CH395;
 80071c2:	e7ea      	b.n	800719a <main+0x1aa>
			if (flag_CH395_ready && ch395.RX_received)
 80071c4:	4b6e      	ldr	r3, [pc, #440]	; (8007380 <main+0x390>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <main+0x1f6>
 80071ce:	4b6d      	ldr	r3, [pc, #436]	; (8007384 <main+0x394>)
 80071d0:	7e5b      	ldrb	r3, [r3, #25]
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d006      	beq.n	80071e6 <main+0x1f6>
			{
				HTTPHandle(&ch395);
 80071d8:	4b6a      	ldr	r3, [pc, #424]	; (8007384 <main+0x394>)
 80071da:	0018      	movs	r0, r3
 80071dc:	f7fe fd44 	bl	8005c68 <HTTPHandle>
			}
			// monitoring the interrupt Pin
			while (HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin)
 80071e0:	e001      	b.n	80071e6 <main+0x1f6>
					== GPIO_PIN_RESET)
			{
				interrupt_CH395();
 80071e2:	f000 fb05 	bl	80077f0 <interrupt_CH395>
			while (HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin)
 80071e6:	2390      	movs	r3, #144	; 0x90
 80071e8:	05db      	lsls	r3, r3, #23
 80071ea:	2102      	movs	r1, #2
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7fa f875 	bl	80012dc <HAL_GPIO_ReadPin>
 80071f2:	1e03      	subs	r3, r0, #0
 80071f4:	d0f5      	beq.n	80071e2 <main+0x1f2>
			}
		}


		uint32_t nowTick = HAL_GetTick();
 80071f6:	f7f9 f9dd 	bl	80005b4 <HAL_GetTick>
 80071fa:	0003      	movs	r3, r0
 80071fc:	61bb      	str	r3, [r7, #24]
		// TASK1: handle EEPROM save
		{
			// save each 5 seconds
			if (nowTick - lastWakeupTime >= 1000)
 80071fe:	4b5e      	ldr	r3, [pc, #376]	; (8007378 <main+0x388>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	1ad2      	subs	r2, r2, r3
 8007206:	23fa      	movs	r3, #250	; 0xfa
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	429a      	cmp	r2, r3
 800720c:	d30d      	bcc.n	800722a <main+0x23a>
			{
				if (isModified)
 800720e:	4b5e      	ldr	r3, [pc, #376]	; (8007388 <main+0x398>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d009      	beq.n	800722a <main+0x23a>
				{
					save_config(&cfg);
 8007216:	4b53      	ldr	r3, [pc, #332]	; (8007364 <main+0x374>)
 8007218:	0018      	movs	r0, r3
 800721a:	f7f9 f823 	bl	8000264 <save_config>
					isModified = false;
 800721e:	4b5a      	ldr	r3, [pc, #360]	; (8007388 <main+0x398>)
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
					lastWakeupTime = nowTick;
 8007224:	4b54      	ldr	r3, [pc, #336]	; (8007378 <main+0x388>)
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	601a      	str	r2, [r3, #0]
		}

		/* TASK2: check if CPLD sends IP request */
		{
			// when SelectorM1&2 all pins are activated(LOW), means requesting IP display
			bool activated = true;
 800722a:	231e      	movs	r3, #30
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	2201      	movs	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
			for (uint8_t iSel = 0; iSel < N_SELECTORS; ++iSel)
 8007232:	231d      	movs	r3, #29
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	2200      	movs	r2, #0
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	e04a      	b.n	80072d2 <main+0x2e2>
			{

				for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 800723c:	231c      	movs	r3, #28
 800723e:	18fb      	adds	r3, r7, r3
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	e032      	b.n	80072ac <main+0x2bc>
				{
					uint8_t d = HAL_GPIO_ReadPin(
 8007246:	241d      	movs	r4, #29
 8007248:	193b      	adds	r3, r7, r4
 800724a:	781a      	ldrb	r2, [r3, #0]
 800724c:	261c      	movs	r6, #28
 800724e:	19bb      	adds	r3, r7, r6
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	493b      	ldr	r1, [pc, #236]	; (8007340 <main+0x350>)
 8007254:	00d8      	lsls	r0, r3, #3
 8007256:	0013      	movs	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	1a9b      	subs	r3, r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	18c3      	adds	r3, r0, r3
 8007260:	585d      	ldr	r5, [r3, r1]
 8007262:	193b      	adds	r3, r7, r4
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	19bb      	adds	r3, r7, r6
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	4935      	ldr	r1, [pc, #212]	; (8007340 <main+0x350>)
 800726c:	00d8      	lsls	r0, r3, #3
 800726e:	0013      	movs	r3, r2
 8007270:	00db      	lsls	r3, r3, #3
 8007272:	1a9b      	subs	r3, r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	18c3      	adds	r3, r0, r3
 8007278:	18cb      	adds	r3, r1, r3
 800727a:	3304      	adds	r3, #4
 800727c:	881b      	ldrh	r3, [r3, #0]
 800727e:	2617      	movs	r6, #23
 8007280:	19bc      	adds	r4, r7, r6
 8007282:	0019      	movs	r1, r3
 8007284:	0028      	movs	r0, r5
 8007286:	f7fa f829 	bl	80012dc <HAL_GPIO_ReadPin>
 800728a:	0003      	movs	r3, r0
 800728c:	7023      	strb	r3, [r4, #0]
							SelectorM[iSel].PIN_BCDs[iBCD].group,
							SelectorM[iSel].PIN_BCDs[iBCD].pin);
					if (d != GPIO_PIN_RESET)
 800728e:	19bb      	adds	r3, r7, r6
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <main+0x2b0>
					{
						activated = false;
 8007296:	231e      	movs	r3, #30
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
						break;
 800729e:	e00a      	b.n	80072b6 <main+0x2c6>
				for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 80072a0:	221c      	movs	r2, #28
 80072a2:	18bb      	adds	r3, r7, r2
 80072a4:	18ba      	adds	r2, r7, r2
 80072a6:	7812      	ldrb	r2, [r2, #0]
 80072a8:	3201      	adds	r2, #1
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	231c      	movs	r3, #28
 80072ae:	18fb      	adds	r3, r7, r3
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d9c7      	bls.n	8007246 <main+0x256>
					}
				}
				if (!activated)
 80072b6:	231e      	movs	r3, #30
 80072b8:	18fb      	adds	r3, r7, r3
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2201      	movs	r2, #1
 80072be:	4053      	eors	r3, r2
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10b      	bne.n	80072de <main+0x2ee>
			for (uint8_t iSel = 0; iSel < N_SELECTORS; ++iSel)
 80072c6:	221d      	movs	r2, #29
 80072c8:	18bb      	adds	r3, r7, r2
 80072ca:	18ba      	adds	r2, r7, r2
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	3201      	adds	r2, #1
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	231d      	movs	r3, #29
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d9af      	bls.n	800723c <main+0x24c>
 80072dc:	e000      	b.n	80072e0 <main+0x2f0>
					break;
 80072de:	46c0      	nop			; (mov r8, r8)
			}
			if (idxDisplayIP < 0 && activated)
 80072e0:	4b2a      	ldr	r3, [pc, #168]	; (800738c <main+0x39c>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da08      	bge.n	80072fc <main+0x30c>
 80072ea:	231e      	movs	r3, #30
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <main+0x30c>
				display_IP(true);
 80072f4:	2001      	movs	r0, #1
 80072f6:	f000 fd79 	bl	8007dec <display_IP>
 80072fa:	e011      	b.n	8007320 <main+0x330>
			else if (idxDisplayIP >= 0 && !activated)
 80072fc:	4b23      	ldr	r3, [pc, #140]	; (800738c <main+0x39c>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	b25b      	sxtb	r3, r3
 8007302:	2b00      	cmp	r3, #0
 8007304:	da00      	bge.n	8007308 <main+0x318>
 8007306:	e74f      	b.n	80071a8 <main+0x1b8>
 8007308:	231e      	movs	r3, #30
 800730a:	18fb      	adds	r3, r7, r3
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	4053      	eors	r3, r2
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d100      	bne.n	800731a <main+0x32a>
 8007318:	e746      	b.n	80071a8 <main+0x1b8>
				display_IP(false);
 800731a:	2000      	movs	r0, #0
 800731c:	f000 fd66 	bl	8007dec <display_IP>
	{
 8007320:	e742      	b.n	80071a8 <main+0x1b8>
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	200010d4 	.word	0x200010d4
 8007328:	08008a2c 	.word	0x08008a2c
 800732c:	08008a34 	.word	0x08008a34
 8007330:	08008a3c 	.word	0x08008a3c
 8007334:	08008a44 	.word	0x08008a44
 8007338:	08008a4c 	.word	0x08008a4c
 800733c:	08008a54 	.word	0x08008a54
 8007340:	200011fc 	.word	0x200011fc
 8007344:	08008a5c 	.word	0x08008a5c
 8007348:	08008a64 	.word	0x08008a64
 800734c:	08008a6c 	.word	0x08008a6c
 8007350:	08008a74 	.word	0x08008a74
 8007354:	08008a7c 	.word	0x08008a7c
 8007358:	08008a84 	.word	0x08008a84
 800735c:	08008954 	.word	0x08008954
 8007360:	20000670 	.word	0x20000670
 8007364:	20000d54 	.word	0x20000d54
 8007368:	0800c000 	.word	0x0800c000
 800736c:	20000de8 	.word	0x20000de8
 8007370:	08008940 	.word	0x08008940
 8007374:	0800894c 	.word	0x0800894c
 8007378:	20000d50 	.word	0x20000d50
 800737c:	20000d48 	.word	0x20000d48
 8007380:	20000d4a 	.word	0x20000d4a
 8007384:	20000010 	.word	0x20000010
 8007388:	200006b4 	.word	0x200006b4
 800738c:	20000690 	.word	0x20000690

08007390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b091      	sub	sp, #68	; 0x44
 8007394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007396:	2410      	movs	r4, #16
 8007398:	193b      	adds	r3, r7, r4
 800739a:	0018      	movs	r0, r3
 800739c:	2330      	movs	r3, #48	; 0x30
 800739e:	001a      	movs	r2, r3
 80073a0:	2100      	movs	r1, #0
 80073a2:	f001 f8aa 	bl	80084fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073a6:	003b      	movs	r3, r7
 80073a8:	0018      	movs	r0, r3
 80073aa:	2310      	movs	r3, #16
 80073ac:	001a      	movs	r2, r3
 80073ae:	2100      	movs	r1, #0
 80073b0:	f001 f8a3 	bl	80084fa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80073b4:	0021      	movs	r1, r4
 80073b6:	187b      	adds	r3, r7, r1
 80073b8:	220a      	movs	r2, #10
 80073ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073bc:	187b      	adds	r3, r7, r1
 80073be:	2201      	movs	r2, #1
 80073c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	2210      	movs	r2, #16
 80073c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80073c8:	187b      	adds	r3, r7, r1
 80073ca:	2201      	movs	r2, #1
 80073cc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073ce:	187b      	adds	r3, r7, r1
 80073d0:	2202      	movs	r2, #2
 80073d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80073d4:	187b      	adds	r3, r7, r1
 80073d6:	2200      	movs	r2, #0
 80073d8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80073da:	187b      	adds	r3, r7, r1
 80073dc:	22c0      	movs	r2, #192	; 0xc0
 80073de:	0352      	lsls	r2, r2, #13
 80073e0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80073e2:	187b      	adds	r3, r7, r1
 80073e4:	2200      	movs	r2, #0
 80073e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073e8:	187b      	adds	r3, r7, r1
 80073ea:	0018      	movs	r0, r3
 80073ec:	f7f9 ffb0 	bl	8001350 <HAL_RCC_OscConfig>
 80073f0:	1e03      	subs	r3, r0, #0
 80073f2:	d001      	beq.n	80073f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80073f4:	f000 fe5c 	bl	80080b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073f8:	003b      	movs	r3, r7
 80073fa:	2207      	movs	r2, #7
 80073fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073fe:	003b      	movs	r3, r7
 8007400:	2202      	movs	r2, #2
 8007402:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007404:	003b      	movs	r3, r7
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800740a:	003b      	movs	r3, r7
 800740c:	22a0      	movs	r2, #160	; 0xa0
 800740e:	00d2      	lsls	r2, r2, #3
 8007410:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007412:	003b      	movs	r3, r7
 8007414:	2101      	movs	r1, #1
 8007416:	0018      	movs	r0, r3
 8007418:	f7fa fab4 	bl	8001984 <HAL_RCC_ClockConfig>
 800741c:	1e03      	subs	r3, r0, #0
 800741e:	d001      	beq.n	8007424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007420:	f000 fe46 	bl	80080b0 <Error_Handler>
  }
}
 8007424:	46c0      	nop			; (mov r8, r8)
 8007426:	46bd      	mov	sp, r7
 8007428:	b011      	add	sp, #68	; 0x44
 800742a:	bd90      	pop	{r4, r7, pc}

0800742c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007430:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007432:	4a1c      	ldr	r2, [pc, #112]	; (80074a4 <MX_SPI1_Init+0x78>)
 8007434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007436:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007438:	2282      	movs	r2, #130	; 0x82
 800743a:	0052      	lsls	r2, r2, #1
 800743c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800743e:	4b18      	ldr	r3, [pc, #96]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007440:	2200      	movs	r2, #0
 8007442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007444:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007446:	22e0      	movs	r2, #224	; 0xe0
 8007448:	00d2      	lsls	r2, r2, #3
 800744a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800744c:	4b14      	ldr	r3, [pc, #80]	; (80074a0 <MX_SPI1_Init+0x74>)
 800744e:	2202      	movs	r2, #2
 8007450:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007452:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007454:	2201      	movs	r2, #1
 8007456:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007458:	4b11      	ldr	r3, [pc, #68]	; (80074a0 <MX_SPI1_Init+0x74>)
 800745a:	2280      	movs	r2, #128	; 0x80
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007462:	2200      	movs	r2, #0
 8007464:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007466:	4b0e      	ldr	r3, [pc, #56]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007468:	2200      	movs	r2, #0
 800746a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800746c:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <MX_SPI1_Init+0x74>)
 800746e:	2200      	movs	r2, #0
 8007470:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007472:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007474:	2200      	movs	r2, #0
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007478:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <MX_SPI1_Init+0x74>)
 800747a:	2207      	movs	r2, #7
 800747c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800747e:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007484:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <MX_SPI1_Init+0x74>)
 8007486:	2200      	movs	r2, #0
 8007488:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800748a:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <MX_SPI1_Init+0x74>)
 800748c:	0018      	movs	r0, r3
 800748e:	f7fa fbbd 	bl	8001c0c <HAL_SPI_Init>
 8007492:	1e03      	subs	r3, r0, #0
 8007494:	d001      	beq.n	800749a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007496:	f000 fe0b 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800749a:	46c0      	nop			; (mov r8, r8)
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20001198 	.word	0x20001198
 80074a4:	40013000 	.word	0x40013000

080074a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80074ac:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <MX_TIM6_Init+0x3c>)
 80074ae:	4a0e      	ldr	r2, [pc, #56]	; (80074e8 <MX_TIM6_Init+0x40>)
 80074b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 80074b2:	4b0c      	ldr	r3, [pc, #48]	; (80074e4 <MX_TIM6_Init+0x3c>)
 80074b4:	22fa      	movs	r2, #250	; 0xfa
 80074b6:	0192      	lsls	r2, r2, #6
 80074b8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074ba:	4b0a      	ldr	r3, [pc, #40]	; (80074e4 <MX_TIM6_Init+0x3c>)
 80074bc:	2200      	movs	r2, #0
 80074be:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <MX_TIM6_Init+0x3c>)
 80074c2:	22fa      	movs	r2, #250	; 0xfa
 80074c4:	0052      	lsls	r2, r2, #1
 80074c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <MX_TIM6_Init+0x3c>)
 80074ca:	2280      	movs	r2, #128	; 0x80
 80074cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80074ce:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <MX_TIM6_Init+0x3c>)
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7fb fabb 	bl	8002a4c <HAL_TIM_Base_Init>
 80074d6:	1e03      	subs	r3, r0, #0
 80074d8:	d001      	beq.n	80074de <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 80074da:	f000 fde9 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80074de:	46c0      	nop			; (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20001150 	.word	0x20001150
 80074e8:	40001000 	.word	0x40001000

080074ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80074f0:	4b14      	ldr	r3, [pc, #80]	; (8007544 <MX_USART2_UART_Init+0x58>)
 80074f2:	4a15      	ldr	r2, [pc, #84]	; (8007548 <MX_USART2_UART_Init+0x5c>)
 80074f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <MX_USART2_UART_Init+0x58>)
 80074f8:	2296      	movs	r2, #150	; 0x96
 80074fa:	0192      	lsls	r2, r2, #6
 80074fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80074fe:	4b11      	ldr	r3, [pc, #68]	; (8007544 <MX_USART2_UART_Init+0x58>)
 8007500:	2200      	movs	r2, #0
 8007502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007504:	4b0f      	ldr	r3, [pc, #60]	; (8007544 <MX_USART2_UART_Init+0x58>)
 8007506:	2200      	movs	r2, #0
 8007508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800750a:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <MX_USART2_UART_Init+0x58>)
 800750c:	2200      	movs	r2, #0
 800750e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007510:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <MX_USART2_UART_Init+0x58>)
 8007512:	220c      	movs	r2, #12
 8007514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007516:	4b0b      	ldr	r3, [pc, #44]	; (8007544 <MX_USART2_UART_Init+0x58>)
 8007518:	2200      	movs	r2, #0
 800751a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <MX_USART2_UART_Init+0x58>)
 800751e:	2200      	movs	r2, #0
 8007520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007522:	4b08      	ldr	r3, [pc, #32]	; (8007544 <MX_USART2_UART_Init+0x58>)
 8007524:	2200      	movs	r2, #0
 8007526:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007528:	4b06      	ldr	r3, [pc, #24]	; (8007544 <MX_USART2_UART_Init+0x58>)
 800752a:	2200      	movs	r2, #0
 800752c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800752e:	4b05      	ldr	r3, [pc, #20]	; (8007544 <MX_USART2_UART_Init+0x58>)
 8007530:	0018      	movs	r0, r3
 8007532:	f7fb fd11 	bl	8002f58 <HAL_UART_Init>
 8007536:	1e03      	subs	r3, r0, #0
 8007538:	d001      	beq.n	800753e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800753a:	f000 fdb9 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800753e:	46c0      	nop			; (mov r8, r8)
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20001234 	.word	0x20001234
 8007548:	40004400 	.word	0x40004400

0800754c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007552:	4b0c      	ldr	r3, [pc, #48]	; (8007584 <MX_DMA_Init+0x38>)
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <MX_DMA_Init+0x38>)
 8007558:	2101      	movs	r1, #1
 800755a:	430a      	orrs	r2, r1
 800755c:	615a      	str	r2, [r3, #20]
 800755e:	4b09      	ldr	r3, [pc, #36]	; (8007584 <MX_DMA_Init+0x38>)
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	2201      	movs	r2, #1
 8007564:	4013      	ands	r3, r2
 8007566:	607b      	str	r3, [r7, #4]
 8007568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800756a:	2200      	movs	r2, #0
 800756c:	2100      	movs	r1, #0
 800756e:	200b      	movs	r0, #11
 8007570:	f7f9 f8fa 	bl	8000768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8007574:	200b      	movs	r0, #11
 8007576:	f7f9 f90c 	bl	8000792 <HAL_NVIC_EnableIRQ>

}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	46bd      	mov	sp, r7
 800757e:	b002      	add	sp, #8
 8007580:	bd80      	pop	{r7, pc}
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	40021000 	.word	0x40021000

08007588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b089      	sub	sp, #36	; 0x24
 800758c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758e:	240c      	movs	r4, #12
 8007590:	193b      	adds	r3, r7, r4
 8007592:	0018      	movs	r0, r3
 8007594:	2314      	movs	r3, #20
 8007596:	001a      	movs	r2, r3
 8007598:	2100      	movs	r1, #0
 800759a:	f000 ffae 	bl	80084fa <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800759e:	4b52      	ldr	r3, [pc, #328]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075a0:	695a      	ldr	r2, [r3, #20]
 80075a2:	4b51      	ldr	r3, [pc, #324]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075a4:	2180      	movs	r1, #128	; 0x80
 80075a6:	03c9      	lsls	r1, r1, #15
 80075a8:	430a      	orrs	r2, r1
 80075aa:	615a      	str	r2, [r3, #20]
 80075ac:	4b4e      	ldr	r3, [pc, #312]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075ae:	695a      	ldr	r2, [r3, #20]
 80075b0:	2380      	movs	r3, #128	; 0x80
 80075b2:	03db      	lsls	r3, r3, #15
 80075b4:	4013      	ands	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80075ba:	4b4b      	ldr	r3, [pc, #300]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	4b4a      	ldr	r3, [pc, #296]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	0289      	lsls	r1, r1, #10
 80075c4:	430a      	orrs	r2, r1
 80075c6:	615a      	str	r2, [r3, #20]
 80075c8:	4b47      	ldr	r3, [pc, #284]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075ca:	695a      	ldr	r2, [r3, #20]
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	029b      	lsls	r3, r3, #10
 80075d0:	4013      	ands	r3, r2
 80075d2:	607b      	str	r3, [r7, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d6:	4b44      	ldr	r3, [pc, #272]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075d8:	695a      	ldr	r2, [r3, #20]
 80075da:	4b43      	ldr	r3, [pc, #268]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	02c9      	lsls	r1, r1, #11
 80075e0:	430a      	orrs	r2, r1
 80075e2:	615a      	str	r2, [r3, #20]
 80075e4:	4b40      	ldr	r3, [pc, #256]	; (80076e8 <MX_GPIO_Init+0x160>)
 80075e6:	695a      	ldr	r2, [r3, #20]
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	02db      	lsls	r3, r3, #11
 80075ec:	4013      	ands	r3, r2
 80075ee:	603b      	str	r3, [r7, #0]
 80075f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin
 80075f2:	493e      	ldr	r1, [pc, #248]	; (80076ec <MX_GPIO_Init+0x164>)
 80075f4:	2390      	movs	r3, #144	; 0x90
 80075f6:	05db      	lsls	r3, r3, #23
 80075f8:	2201      	movs	r2, #1
 80075fa:	0018      	movs	r0, r3
 80075fc:	f7f9 fe8b 	bl	8001316 <HAL_GPIO_WritePin>
                          |BCD1_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XDISPLAY_Pin|RW485_Pin|BCDM2_2_Pin|BCDM2_1_Pin
 8007600:	493b      	ldr	r1, [pc, #236]	; (80076f0 <MX_GPIO_Init+0x168>)
 8007602:	4b3c      	ldr	r3, [pc, #240]	; (80076f4 <MX_GPIO_Init+0x16c>)
 8007604:	2201      	movs	r2, #1
 8007606:	0018      	movs	r0, r3
 8007608:	f7f9 fe85 	bl	8001316 <HAL_GPIO_WritePin>
                          |BCDM2_0_Pin|BCD1_1_Pin|BCD1_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800760c:	193b      	adds	r3, r7, r4
 800760e:	2203      	movs	r2, #3
 8007610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007612:	193b      	adds	r3, r7, r4
 8007614:	2200      	movs	r2, #0
 8007616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007618:	193b      	adds	r3, r7, r4
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800761e:	193b      	adds	r3, r7, r4
 8007620:	4a35      	ldr	r2, [pc, #212]	; (80076f8 <MX_GPIO_Init+0x170>)
 8007622:	0019      	movs	r1, r3
 8007624:	0010      	movs	r0, r2
 8007626:	f7f9 fce9 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 800762a:	193b      	adds	r3, r7, r4
 800762c:	2202      	movs	r2, #2
 800762e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007630:	193b      	adds	r3, r7, r4
 8007632:	2284      	movs	r2, #132	; 0x84
 8007634:	0392      	lsls	r2, r2, #14
 8007636:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007638:	193b      	adds	r3, r7, r4
 800763a:	2201      	movs	r2, #1
 800763c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 800763e:	193a      	adds	r2, r7, r4
 8007640:	2390      	movs	r3, #144	; 0x90
 8007642:	05db      	lsls	r3, r3, #23
 8007644:	0011      	movs	r1, r2
 8007646:	0018      	movs	r0, r3
 8007648:	f7f9 fcd8 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin BCD2_2_Pin BCD2_1_Pin BCD2_0_Pin
                           BCD1_2_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin
 800764c:	193b      	adds	r3, r7, r4
 800764e:	4a27      	ldr	r2, [pc, #156]	; (80076ec <MX_GPIO_Init+0x164>)
 8007650:	601a      	str	r2, [r3, #0]
                          |BCD1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007652:	193b      	adds	r3, r7, r4
 8007654:	2211      	movs	r2, #17
 8007656:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007658:	193b      	adds	r3, r7, r4
 800765a:	2201      	movs	r2, #1
 800765c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765e:	193b      	adds	r3, r7, r4
 8007660:	2200      	movs	r2, #0
 8007662:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007664:	193a      	adds	r2, r7, r4
 8007666:	2390      	movs	r3, #144	; 0x90
 8007668:	05db      	lsls	r3, r3, #23
 800766a:	0011      	movs	r1, r2
 800766c:	0018      	movs	r0, r3
 800766e:	f7f9 fcc5 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : XDISPLAY_Pin RW485_Pin BCDM2_2_Pin BCDM2_1_Pin
                           BCDM2_0_Pin BCD1_1_Pin BCD1_0_Pin */
  GPIO_InitStruct.Pin = XDISPLAY_Pin|RW485_Pin|BCDM2_2_Pin|BCDM2_1_Pin
 8007672:	193b      	adds	r3, r7, r4
 8007674:	4a1e      	ldr	r2, [pc, #120]	; (80076f0 <MX_GPIO_Init+0x168>)
 8007676:	601a      	str	r2, [r3, #0]
                          |BCDM2_0_Pin|BCD1_1_Pin|BCD1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007678:	193b      	adds	r3, r7, r4
 800767a:	2211      	movs	r2, #17
 800767c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800767e:	193b      	adds	r3, r7, r4
 8007680:	2201      	movs	r2, #1
 8007682:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007684:	193b      	adds	r3, r7, r4
 8007686:	2200      	movs	r2, #0
 8007688:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800768a:	193b      	adds	r3, r7, r4
 800768c:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <MX_GPIO_Init+0x16c>)
 800768e:	0019      	movs	r1, r3
 8007690:	0010      	movs	r0, r2
 8007692:	f7f9 fcb3 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BCDM1_2_Pin */
  GPIO_InitStruct.Pin = BCDM1_2_Pin;
 8007696:	0021      	movs	r1, r4
 8007698:	187b      	adds	r3, r7, r1
 800769a:	2280      	movs	r2, #128	; 0x80
 800769c:	0212      	lsls	r2, r2, #8
 800769e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076a0:	000c      	movs	r4, r1
 80076a2:	193b      	adds	r3, r7, r4
 80076a4:	2200      	movs	r2, #0
 80076a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076a8:	193b      	adds	r3, r7, r4
 80076aa:	2201      	movs	r2, #1
 80076ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BCDM1_2_GPIO_Port, &GPIO_InitStruct);
 80076ae:	193b      	adds	r3, r7, r4
 80076b0:	4a10      	ldr	r2, [pc, #64]	; (80076f4 <MX_GPIO_Init+0x16c>)
 80076b2:	0019      	movs	r1, r3
 80076b4:	0010      	movs	r0, r2
 80076b6:	f7f9 fca1 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : BCDM1_1_Pin BCDM1_0_Pin */
  GPIO_InitStruct.Pin = BCDM1_1_Pin|BCDM1_0_Pin;
 80076ba:	0021      	movs	r1, r4
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	22c0      	movs	r2, #192	; 0xc0
 80076c0:	0092      	lsls	r2, r2, #2
 80076c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80076c4:	187b      	adds	r3, r7, r1
 80076c6:	2200      	movs	r2, #0
 80076c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076ca:	187b      	adds	r3, r7, r1
 80076cc:	2201      	movs	r2, #1
 80076ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076d0:	187a      	adds	r2, r7, r1
 80076d2:	2390      	movs	r3, #144	; 0x90
 80076d4:	05db      	lsls	r3, r3, #23
 80076d6:	0011      	movs	r1, r2
 80076d8:	0018      	movs	r0, r3
 80076da:	f7f9 fc8f 	bl	8000ffc <HAL_GPIO_Init>

}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	46bd      	mov	sp, r7
 80076e2:	b009      	add	sp, #36	; 0x24
 80076e4:	bd90      	pop	{r4, r7, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	40021000 	.word	0x40021000
 80076ec:	00009c10 	.word	0x00009c10
 80076f0:	00007c18 	.word	0x00007c18
 80076f4:	48000400 	.word	0x48000400
 80076f8:	48001400 	.word	0x48001400

080076fc <reset_CH395>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	onReceived_serial485(p485);
//}
void reset_CH395()
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
	flag_CH395_ready = false;
 8007702:	4b32      	ldr	r3, [pc, #200]	; (80077cc <reset_CH395+0xd0>)
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
	ch395.RX_received = 0;
 8007708:	4b31      	ldr	r3, [pc, #196]	; (80077d0 <reset_CH395+0xd4>)
 800770a:	2200      	movs	r2, #0
 800770c:	765a      	strb	r2, [r3, #25]
	ch395.SOCK_responding = -1;
 800770e:	4b30      	ldr	r3, [pc, #192]	; (80077d0 <reset_CH395+0xd4>)
 8007710:	22ff      	movs	r2, #255	; 0xff
 8007712:	769a      	strb	r2, [r3, #26]
	ch395.TX_available = 0xff;
 8007714:	4b2e      	ldr	r3, [pc, #184]	; (80077d0 <reset_CH395+0xd4>)
 8007716:	22ff      	movs	r2, #255	; 0xff
 8007718:	76da      	strb	r2, [r3, #27]
	ch395.socket_connected = 0;
 800771a:	4b2d      	ldr	r3, [pc, #180]	; (80077d0 <reset_CH395+0xd4>)
 800771c:	2200      	movs	r2, #0
 800771e:	761a      	strb	r2, [r3, #24]

	// setting HTTP sockets, 0, 1,2,3,4
	for (uint8_t i = 0; i < 5; i++)
 8007720:	1dfb      	adds	r3, r7, #7
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e011      	b.n	800774c <reset_CH395+0x50>
	{
		ch395.cfg.protocols[i] = CH395_PROTOCOL_HTTP;
 8007728:	1dfb      	adds	r3, r7, #7
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4a28      	ldr	r2, [pc, #160]	; (80077d0 <reset_CH395+0xd4>)
 800772e:	18d3      	adds	r3, r2, r3
 8007730:	2202      	movs	r2, #2
 8007732:	741a      	strb	r2, [r3, #16]
		ch395.cfg.ports[i] = port_http;
 8007734:	1dfb      	adds	r3, r7, #7
 8007736:	781a      	ldrb	r2, [r3, #0]
 8007738:	4b26      	ldr	r3, [pc, #152]	; (80077d4 <reset_CH395+0xd8>)
 800773a:	8819      	ldrh	r1, [r3, #0]
 800773c:	4b24      	ldr	r3, [pc, #144]	; (80077d0 <reset_CH395+0xd4>)
 800773e:	0052      	lsls	r2, r2, #1
 8007740:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; i < 5; i++)
 8007742:	1dfb      	adds	r3, r7, #7
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	1dfb      	adds	r3, r7, #7
 8007748:	3201      	adds	r2, #1
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	1dfb      	adds	r3, r7, #7
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b04      	cmp	r3, #4
 8007752:	d9e9      	bls.n	8007728 <reset_CH395+0x2c>
	}
	// setting primitive TCP sockets, 5,6,7
	for (uint8_t i = 5; i < 8; i++)
 8007754:	1dbb      	adds	r3, r7, #6
 8007756:	2205      	movs	r2, #5
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e011      	b.n	8007780 <reset_CH395+0x84>
	{
		ch395.cfg.protocols[i] = CH395_PROTOCOL_TCP;
 800775c:	1dbb      	adds	r3, r7, #6
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <reset_CH395+0xd4>)
 8007762:	18d3      	adds	r3, r2, r3
 8007764:	2201      	movs	r2, #1
 8007766:	741a      	strb	r2, [r3, #16]
		ch395.cfg.ports[i] = port_tcp;
 8007768:	1dbb      	adds	r3, r7, #6
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	4b1a      	ldr	r3, [pc, #104]	; (80077d8 <reset_CH395+0xdc>)
 800776e:	8819      	ldrh	r1, [r3, #0]
 8007770:	4b17      	ldr	r3, [pc, #92]	; (80077d0 <reset_CH395+0xd4>)
 8007772:	0052      	lsls	r2, r2, #1
 8007774:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 5; i < 8; i++)
 8007776:	1dbb      	adds	r3, r7, #6
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	1dbb      	adds	r3, r7, #6
 800777c:	3201      	adds	r2, #1
 800777e:	701a      	strb	r2, [r3, #0]
 8007780:	1dbb      	adds	r3, r7, #6
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b07      	cmp	r3, #7
 8007786:	d9e9      	bls.n	800775c <reset_CH395+0x60>
	}

	CH395CMDReset();
 8007788:	f7fc fdc0 	bl	800430c <CH395CMDReset>
	Delay_ms(100); // wait for CH395 being ready from power on
 800778c:	4b13      	ldr	r3, [pc, #76]	; (80077dc <reset_CH395+0xe0>)
 800778e:	0018      	movs	r0, r3
 8007790:	f7fd fac6 	bl	8004d20 <Delay_us>
	// initialize CH395 GPIO settings to INPUT/PULL DOWN
//	CH395WriteGPIOAddr(GPIO_DIR_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PU_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PD_REG, 0xff);
	CH395SetBuffer();
 8007794:	f7fc fce5 	bl	8004162 <CH395SetBuffer>
	// initialize TCP server
	flag_CH395_ready = CH395TCPServerStart(*(uint32_t*) IP, PORT_HTTP, PORT_TCP);
 8007798:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <reset_CH395+0xe4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	22fb      	movs	r2, #251	; 0xfb
 800779e:	0052      	lsls	r2, r2, #1
 80077a0:	2150      	movs	r1, #80	; 0x50
 80077a2:	0018      	movs	r0, r3
 80077a4:	f7fc fd10 	bl	80041c8 <CH395TCPServerStart>
 80077a8:	0003      	movs	r3, r0
 80077aa:	001a      	movs	r2, r3
 80077ac:	4b07      	ldr	r3, [pc, #28]	; (80077cc <reset_CH395+0xd0>)
 80077ae:	701a      	strb	r2, [r3, #0]
	//CH395SetBuffer();
	flag_PHY_reconn = false;
 80077b0:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <reset_CH395+0xe8>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	701a      	strb	r2, [r3, #0]
	flag_IP_conflict = false;
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <reset_CH395+0xec>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
	flag_CH395_DHCP_ready = false;
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <reset_CH395+0xf0>)
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b002      	add	sp, #8
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	20000d4a 	.word	0x20000d4a
 80077d0:	20000010 	.word	0x20000010
 80077d4:	2000068c 	.word	0x2000068c
 80077d8:	2000068e 	.word	0x2000068e
 80077dc:	000186a0 	.word	0x000186a0
 80077e0:	20000688 	.word	0x20000688
 80077e4:	20000d48 	.word	0x20000d48
 80077e8:	20000d49 	.word	0x20000d49
 80077ec:	20000d4b 	.word	0x20000d4b

080077f0 <interrupt_CH395>:

void interrupt_CH395()
{
 80077f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077f2:	b089      	sub	sp, #36	; 0x24
 80077f4:	af00      	add	r7, sp, #0
	// process interrupt requests from CH395
	uint8_t sock_int_status, i;
	uint16_t glob_int_status;
	//BEGIN_INT_CH395:
	// read global int status
	glob_int_status = CH395CMDGetGlobIntStatus_ALL();
 80077f6:	251c      	movs	r5, #28
 80077f8:	197c      	adds	r4, r7, r5
 80077fa:	f7fd f9f7 	bl	8004bec <CH395CMDGetGlobIntStatus_ALL>
 80077fe:	0003      	movs	r3, r0
 8007800:	8023      	strh	r3, [r4, #0]

	// CASE: TCP unreach error
	if (glob_int_status & GINT_STAT_UNREACH)
 8007802:	197b      	adds	r3, r7, r5
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	2201      	movs	r2, #1
 8007808:	4013      	ands	r3, r2
 800780a:	d033      	beq.n	8007874 <interrupt_CH395+0x84>
	{
		uint8_t unreach[8];
		CH395CMDGetUnreachIPPT(unreach);
 800780c:	003b      	movs	r3, r7
 800780e:	0018      	movs	r0, r3
 8007810:	f7fc fe20 	bl	8004454 <CH395CMDGetUnreachIPPT>
		// invalidate all Parsers
		// TODO: 用端口号区分
		// unreach byte 3, byte 2 combine to be port number
		uint16_t port = ((uint16_t)unreach[3] << 8) | unreach[2];
 8007814:	003b      	movs	r3, r7
 8007816:	78db      	ldrb	r3, [r3, #3]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	b21a      	sxth	r2, r3
 800781c:	003b      	movs	r3, r7
 800781e:	789b      	ldrb	r3, [r3, #2]
 8007820:	b21b      	sxth	r3, r3
 8007822:	4313      	orrs	r3, r2
 8007824:	b21a      	sxth	r2, r3
 8007826:	2316      	movs	r3, #22
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 1; i < NUM_SOCKETS; ++i)
 800782c:	231b      	movs	r3, #27
 800782e:	18fb      	adds	r3, r7, r3
 8007830:	2201      	movs	r2, #1
 8007832:	701a      	strb	r2, [r3, #0]
 8007834:	e019      	b.n	800786a <interrupt_CH395+0x7a>
		{
			HTTPRequestParseState *pS = parseStates + i;
 8007836:	231b      	movs	r3, #27
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	22b0      	movs	r2, #176	; 0xb0
 800783e:	435a      	muls	r2, r3
 8007840:	4bd3      	ldr	r3, [pc, #844]	; (8007b90 <interrupt_CH395+0x3a0>)
 8007842:	18d3      	adds	r3, r2, r3
 8007844:	613b      	str	r3, [r7, #16]
			if(pS->port == port) resetHTTPParseState(pS);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2246      	movs	r2, #70	; 0x46
 800784a:	5a9b      	ldrh	r3, [r3, r2]
 800784c:	2216      	movs	r2, #22
 800784e:	18ba      	adds	r2, r7, r2
 8007850:	8812      	ldrh	r2, [r2, #0]
 8007852:	429a      	cmp	r2, r3
 8007854:	d103      	bne.n	800785e <interrupt_CH395+0x6e>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	0018      	movs	r0, r3
 800785a:	f7fd fcaf 	bl	80051bc <resetHTTPParseState>
		for(uint8_t i = 1; i < NUM_SOCKETS; ++i)
 800785e:	221b      	movs	r2, #27
 8007860:	18bb      	adds	r3, r7, r2
 8007862:	18ba      	adds	r2, r7, r2
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	3201      	adds	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	231b      	movs	r3, #27
 800786c:	18fb      	adds	r3, r7, r3
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b07      	cmp	r3, #7
 8007872:	d9e0      	bls.n	8007836 <interrupt_CH395+0x46>
		}
//		reset_CH395();
	}

	// CASE: DHCP
	if (glob_int_status & GINT_STAT_DHCP)
 8007874:	231c      	movs	r3, #28
 8007876:	18fb      	adds	r3, r7, r3
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	2208      	movs	r2, #8
 800787c:	4013      	ands	r3, r2
 800787e:	d00a      	beq.n	8007896 <interrupt_CH395+0xa6>
	{
		if(CH395GetDHCPStatus() == 0)
 8007880:	f7fd f8fe 	bl	8004a80 <CH395GetDHCPStatus>
 8007884:	1e03      	subs	r3, r0, #0
 8007886:	d103      	bne.n	8007890 <interrupt_CH395+0xa0>
			flag_CH395_DHCP_ready = true;
 8007888:	4bc2      	ldr	r3, [pc, #776]	; (8007b94 <interrupt_CH395+0x3a4>)
 800788a:	2201      	movs	r2, #1
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e002      	b.n	8007896 <interrupt_CH395+0xa6>
		else
			flag_CH395_DHCP_ready = false;
 8007890:	4bc0      	ldr	r3, [pc, #768]	; (8007b94 <interrupt_CH395+0x3a4>)
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
	}
	// CASE: Phy change
	if (glob_int_status & GINT_STAT_PHY_CHANGE)
 8007896:	231c      	movs	r3, #28
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	2204      	movs	r2, #4
 800789e:	4013      	ands	r3, r2
 80078a0:	d014      	beq.n	80078cc <interrupt_CH395+0xdc>
	{
		uint8_t phy_status = (CH395CMDGetPHYStatus());
 80078a2:	250f      	movs	r5, #15
 80078a4:	197c      	adds	r4, r7, r5
 80078a6:	f7fc fd67 	bl	8004378 <CH395CMDGetPHYStatus>
 80078aa:	0003      	movs	r3, r0
 80078ac:	7023      	strb	r3, [r4, #0]
		switch (phy_status)
 80078ae:	197b      	adds	r3, r7, r5
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d106      	bne.n	80078c4 <interrupt_CH395+0xd4>
		{
		case PHY_DISCONN:
			flag_CH395_ready = false;
 80078b6:	4bb8      	ldr	r3, [pc, #736]	; (8007b98 <interrupt_CH395+0x3a8>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
			flag_PHY_reconn = true;
 80078bc:	4bb7      	ldr	r3, [pc, #732]	; (8007b9c <interrupt_CH395+0x3ac>)
 80078be:	2201      	movs	r2, #1
 80078c0:	701a      	strb	r2, [r3, #0]
			break;
 80078c2:	e004      	b.n	80078ce <interrupt_CH395+0xde>
		default:
			flag_CH395_ready = true;
 80078c4:	4bb4      	ldr	r3, [pc, #720]	; (8007b98 <interrupt_CH395+0x3a8>)
 80078c6:	2201      	movs	r2, #1
 80078c8:	701a      	strb	r2, [r3, #0]
			break;
 80078ca:	e000      	b.n	80078ce <interrupt_CH395+0xde>
		}
	}
 80078cc:	46c0      	nop			; (mov r8, r8)

	// get socket interrupt status
	glob_int_status >>= 4;
 80078ce:	211c      	movs	r1, #28
 80078d0:	187b      	adds	r3, r7, r1
 80078d2:	187a      	adds	r2, r7, r1
 80078d4:	8812      	ldrh	r2, [r2, #0]
 80078d6:	0912      	lsrs	r2, r2, #4
 80078d8:	801a      	strh	r2, [r3, #0]
	// exit if no socket event occured
	if (!glob_int_status)
 80078da:	187b      	adds	r3, r7, r1
 80078dc:	881b      	ldrh	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d100      	bne.n	80078e4 <interrupt_CH395+0xf4>
 80078e2:	e169      	b.n	8007bb8 <interrupt_CH395+0x3c8>
		goto END_INT_CH395;
	// handle SOCKET events
	for (i = 1; i < NUM_SOCKETS; ++i)
 80078e4:	231f      	movs	r3, #31
 80078e6:	18fb      	adds	r3, r7, r3
 80078e8:	2201      	movs	r2, #1
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e148      	b.n	8007b80 <interrupt_CH395+0x390>
	{
		glob_int_status >>= 1;
 80078ee:	211c      	movs	r1, #28
 80078f0:	187b      	adds	r3, r7, r1
 80078f2:	187a      	adds	r2, r7, r1
 80078f4:	8812      	ldrh	r2, [r2, #0]
 80078f6:	0852      	lsrs	r2, r2, #1
 80078f8:	801a      	strh	r2, [r3, #0]
		if (glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 80078fa:	187b      	adds	r3, r7, r1
 80078fc:	881b      	ldrh	r3, [r3, #0]
 80078fe:	2201      	movs	r2, #1
 8007900:	4013      	ands	r3, r2
 8007902:	d100      	bne.n	8007906 <interrupt_CH395+0x116>
 8007904:	e136      	b.n	8007b74 <interrupt_CH395+0x384>
		{
			sock_int_status = CH395GetSocketInt(i);
 8007906:	250e      	movs	r5, #14
 8007908:	197c      	adds	r4, r7, r5
 800790a:	261f      	movs	r6, #31
 800790c:	19bb      	adds	r3, r7, r6
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	0018      	movs	r0, r3
 8007912:	f7fd f84f 	bl	80049b4 <CH395GetSocketInt>
 8007916:	0003      	movs	r3, r0
 8007918:	7023      	strb	r3, [r4, #0]
			// CASE 1: Send buffer free
			if (sock_int_status & SINT_STAT_SENBUF_FREE)
 800791a:	197b      	adds	r3, r7, r5
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2201      	movs	r2, #1
 8007920:	4013      	ands	r3, r2
 8007922:	d00e      	beq.n	8007942 <interrupt_CH395+0x152>
			{
				ch395.TX_available |= (1 << i);
 8007924:	4b9e      	ldr	r3, [pc, #632]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007926:	7edb      	ldrb	r3, [r3, #27]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	b25a      	sxtb	r2, r3
 800792c:	19bb      	adds	r3, r7, r6
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2101      	movs	r1, #1
 8007932:	4099      	lsls	r1, r3
 8007934:	000b      	movs	r3, r1
 8007936:	b25b      	sxtb	r3, r3
 8007938:	4313      	orrs	r3, r2
 800793a:	b25b      	sxtb	r3, r3
 800793c:	b2da      	uxtb	r2, r3
 800793e:	4b98      	ldr	r3, [pc, #608]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007940:	76da      	strb	r2, [r3, #27]
			}
			// CASE 2: data received on SOCK i
			if (sock_int_status & SINT_STAT_RECV)
 8007942:	230e      	movs	r3, #14
 8007944:	18fb      	adds	r3, r7, r3
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2204      	movs	r2, #4
 800794a:	4013      	ands	r3, r2
 800794c:	d100      	bne.n	8007950 <interrupt_CH395+0x160>
 800794e:	e0a9      	b.n	8007aa4 <interrupt_CH395+0x2b4>
			{
				/*
				 * This section of code reads at most CH395_SIZE_BUFFER-1 bytes from PHY buffer
				 * and discards the rest of the received data
				 */
				HTTPRequestParseState *pS = parseStates + i - 1;
 8007950:	211f      	movs	r1, #31
 8007952:	187b      	adds	r3, r7, r1
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	22b0      	movs	r2, #176	; 0xb0
 8007958:	4353      	muls	r3, r2
 800795a:	3bb0      	subs	r3, #176	; 0xb0
 800795c:	001a      	movs	r2, r3
 800795e:	4b8c      	ldr	r3, [pc, #560]	; (8007b90 <interrupt_CH395+0x3a0>)
 8007960:	18d3      	adds	r3, r2, r3
 8007962:	60bb      	str	r3, [r7, #8]
				uint16_t len = CH395GetRecvLength(i);
 8007964:	2518      	movs	r5, #24
 8007966:	197c      	adds	r4, r7, r5
 8007968:	187b      	adds	r3, r7, r1
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	0018      	movs	r0, r3
 800796e:	f7fc febd 	bl	80046ec <CH395GetRecvLength>
 8007972:	0003      	movs	r3, r0
 8007974:	8023      	strh	r3, [r4, #0]
				// WARNING: avoid multiple access to the CH395 buffer, not thread safe
				CH395GetRecvData(
 8007976:	197b      	adds	r3, r7, r5
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	4a8a      	ldr	r2, [pc, #552]	; (8007ba4 <interrupt_CH395+0x3b4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d904      	bls.n	800798a <interrupt_CH395+0x19a>
						i,
						(len < CH395_SIZE_BUFFER - 1) ? (len) : (len = CH395_SIZE_BUFFER - 1),
 8007980:	197b      	adds	r3, r7, r5
 8007982:	4a89      	ldr	r2, [pc, #548]	; (8007ba8 <interrupt_CH395+0x3b8>)
 8007984:	801a      	strh	r2, [r3, #0]
				CH395GetRecvData(
 8007986:	4b88      	ldr	r3, [pc, #544]	; (8007ba8 <interrupt_CH395+0x3b8>)
 8007988:	e002      	b.n	8007990 <interrupt_CH395+0x1a0>
 800798a:	2318      	movs	r3, #24
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	4986      	ldr	r1, [pc, #536]	; (8007bac <interrupt_CH395+0x3bc>)
 8007992:	241f      	movs	r4, #31
 8007994:	193a      	adds	r2, r7, r4
 8007996:	7810      	ldrb	r0, [r2, #0]
 8007998:	000a      	movs	r2, r1
 800799a:	0019      	movs	r1, r3
 800799c:	f7fc fef2 	bl	8004784 <CH395GetRecvData>
						(uint8_t*) ch395.buffer
							);
				ch395.buffer[len] = 0; // terminate the recved text stream
 80079a0:	2318      	movs	r3, #24
 80079a2:	18fb      	adds	r3, r7, r3
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	4a7e      	ldr	r2, [pc, #504]	; (8007ba0 <interrupt_CH395+0x3b0>)
 80079a8:	18d3      	adds	r3, r2, r3
 80079aa:	2200      	movs	r2, #0
 80079ac:	771a      	strb	r2, [r3, #28]
				/* Distinguish between different protocols
				 * Either HTTP,
				 * or TCP (for UART over IP gateway )
				 */
				switch (ch395.cfg.protocols[i])
 80079ae:	193b      	adds	r3, r7, r4
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	4a7b      	ldr	r2, [pc, #492]	; (8007ba0 <interrupt_CH395+0x3b0>)
 80079b4:	18d3      	adds	r3, r2, r3
 80079b6:	7c1b      	ldrb	r3, [r3, #16]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d02d      	beq.n	8007a18 <interrupt_CH395+0x228>
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d166      	bne.n	8007a8e <interrupt_CH395+0x29e>
				{
				case CH395_PROTOCOL_HTTP:
					resetHTTPParseState(pS);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	0018      	movs	r0, r3
 80079c4:	f7fd fbfa 	bl	80051bc <resetHTTPParseState>
					pS->sock_index = i;
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	193a      	adds	r2, r7, r4
 80079cc:	21ad      	movs	r1, #173	; 0xad
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	545a      	strb	r2, [r3, r1]
					if (parse_http(pS, ch395.buffer))
 80079d2:	4a76      	ldr	r2, [pc, #472]	; (8007bac <interrupt_CH395+0x3bc>)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	0011      	movs	r1, r2
 80079d8:	0018      	movs	r0, r3
 80079da:	f7fe fb55 	bl	8006088 <parse_http>
 80079de:	1e03      	subs	r3, r0, #0
 80079e0:	d057      	beq.n	8007a92 <interrupt_CH395+0x2a2>
					{
						ch395.RX_received |= (1 << i); // mark received flag
 80079e2:	4b6f      	ldr	r3, [pc, #444]	; (8007ba0 <interrupt_CH395+0x3b0>)
 80079e4:	7e5b      	ldrb	r3, [r3, #25]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	b25a      	sxtb	r2, r3
 80079ea:	0020      	movs	r0, r4
 80079ec:	183b      	adds	r3, r7, r0
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2101      	movs	r1, #1
 80079f2:	4099      	lsls	r1, r3
 80079f4:	000b      	movs	r3, r1
 80079f6:	b25b      	sxtb	r3, r3
 80079f8:	4313      	orrs	r3, r2
 80079fa:	b25b      	sxtb	r3, r3
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	4b68      	ldr	r3, [pc, #416]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007a00:	765a      	strb	r2, [r3, #25]
						if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8007a02:	4b67      	ldr	r3, [pc, #412]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007a04:	7e9b      	ldrb	r3, [r3, #26]
 8007a06:	b25b      	sxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	da42      	bge.n	8007a92 <interrupt_CH395+0x2a2>
							ch395.SOCK_responding = i;
 8007a0c:	183b      	adds	r3, r7, r0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	569a      	ldrsb	r2, [r3, r2]
 8007a12:	4b63      	ldr	r3, [pc, #396]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007a14:	769a      	strb	r2, [r3, #26]
					}
					break;
 8007a16:	e03c      	b.n	8007a92 <interrupt_CH395+0x2a2>
				case CH395_PROTOCOL_TCP:
					// parse as virtual UART
					resetHTTPParseState(pS);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f7fd fbce 	bl	80051bc <resetHTTPParseState>
					pS->sock_index = i;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	221f      	movs	r2, #31
 8007a24:	18ba      	adds	r2, r7, r2
 8007a26:	21ad      	movs	r1, #173	; 0xad
 8007a28:	7812      	ldrb	r2, [r2, #0]
 8007a2a:	545a      	strb	r2, [r3, r1]
					// parse received content
					if (execute_command_string(&CommandParser, ch395.buffer,len) >= 0)
 8007a2c:	2318      	movs	r3, #24
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	881a      	ldrh	r2, [r3, #0]
 8007a32:	495e      	ldr	r1, [pc, #376]	; (8007bac <interrupt_CH395+0x3bc>)
 8007a34:	4b5e      	ldr	r3, [pc, #376]	; (8007bb0 <interrupt_CH395+0x3c0>)
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff faa9 	bl	8006f8e <execute_command_string>
 8007a3c:	1e03      	subs	r3, r0, #0
 8007a3e:	db2a      	blt.n	8007a96 <interrupt_CH395+0x2a6>
					{
						if (CommandParser.hasResponse > 0)
 8007a40:	4b5b      	ldr	r3, [pc, #364]	; (8007bb0 <interrupt_CH395+0x3c0>)
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d025      	beq.n	8007a96 <interrupt_CH395+0x2a6>
						{
							//CH395SendData(i, CommandParser.bufRet, CommandParser->hasResponse);
							pS->ready = true;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	22ac      	movs	r2, #172	; 0xac
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]
							strncpy(pS->response_header, CommandParser.bufRet,
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	22a0      	movs	r2, #160	; 0xa0
 8007a56:	5898      	ldr	r0, [r3, r2]
									CommandParser.hasResponse);
 8007a58:	4b55      	ldr	r3, [pc, #340]	; (8007bb0 <interrupt_CH395+0x3c0>)
 8007a5a:	785b      	ldrb	r3, [r3, #1]
 8007a5c:	b2db      	uxtb	r3, r3
							strncpy(pS->response_header, CommandParser.bufRet,
 8007a5e:	001a      	movs	r2, r3
 8007a60:	4b54      	ldr	r3, [pc, #336]	; (8007bb4 <interrupt_CH395+0x3c4>)
 8007a62:	0019      	movs	r1, r3
 8007a64:	f000 fd9b 	bl	800859e <strncpy>
							pS->len_response_header = CommandParser.hasResponse;
 8007a68:	4b51      	ldr	r3, [pc, #324]	; (8007bb0 <interrupt_CH395+0x3c0>)
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	b299      	uxth	r1, r3
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	229e      	movs	r2, #158	; 0x9e
 8007a74:	5299      	strh	r1, [r3, r2]
							pS->len_response_content_remain = 0;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	22a4      	movs	r2, #164	; 0xa4
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	5299      	strh	r1, [r3, r2]
							pS->response_stage = RESPONSE_PREPARED;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	229c      	movs	r2, #156	; 0x9c
 8007a82:	2101      	movs	r1, #1
 8007a84:	5499      	strb	r1, [r3, r2]
							CommandParser.hasResponse = 0;
 8007a86:	4b4a      	ldr	r3, [pc, #296]	; (8007bb0 <interrupt_CH395+0x3c0>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	705a      	strb	r2, [r3, #1]
						}
					}
					break;
 8007a8c:	e003      	b.n	8007a96 <interrupt_CH395+0x2a6>
				default:
					// protocol not assigned to the socket
					break;
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	e002      	b.n	8007a98 <interrupt_CH395+0x2a8>
					break;
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	e000      	b.n	8007a98 <interrupt_CH395+0x2a8>
					break;
 8007a96:	46c0      	nop			; (mov r8, r8)
				}
				CH395ClearRecvBuf(i);
 8007a98:	231f      	movs	r3, #31
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f7fc fe54 	bl	800474c <CH395ClearRecvBuf>
			}
			// CASE 3: SOCK i connected
			if (sock_int_status & SINT_STAT_CONNECT)
 8007aa4:	230e      	movs	r3, #14
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	2208      	movs	r2, #8
 8007aac:	4013      	ands	r3, r2
 8007aae:	d01e      	beq.n	8007aee <interrupt_CH395+0x2fe>
			{
				ch395.socket_connected |= (1 << i);
 8007ab0:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007ab2:	7e1b      	ldrb	r3, [r3, #24]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	b25a      	sxtb	r2, r3
 8007ab8:	201f      	movs	r0, #31
 8007aba:	183b      	adds	r3, r7, r0
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4099      	lsls	r1, r3
 8007ac2:	000b      	movs	r3, r1
 8007ac4:	b25b      	sxtb	r3, r3
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	b25b      	sxtb	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	4b34      	ldr	r3, [pc, #208]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007ace:	761a      	strb	r2, [r3, #24]
				ch395.TX_available |= (1 << i);
 8007ad0:	4b33      	ldr	r3, [pc, #204]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007ad2:	7edb      	ldrb	r3, [r3, #27]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	b25a      	sxtb	r2, r3
 8007ad8:	183b      	adds	r3, r7, r0
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2101      	movs	r1, #1
 8007ade:	4099      	lsls	r1, r3
 8007ae0:	000b      	movs	r3, r1
 8007ae2:	b25b      	sxtb	r3, r3
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	b25b      	sxtb	r3, r3
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	4b2d      	ldr	r3, [pc, #180]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007aec:	76da      	strb	r2, [r3, #27]
			}
			// CASE 4: SOCK i disconnected
			if (sock_int_status & SINT_STAT_DISCONNECT) // SOCK i disconnected
 8007aee:	230e      	movs	r3, #14
 8007af0:	18fb      	adds	r3, r7, r3
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2210      	movs	r2, #16
 8007af6:	4013      	ands	r3, r2
 8007af8:	d03c      	beq.n	8007b74 <interrupt_CH395+0x384>
			{
				ch395.socket_connected &= ~(1 << i);
 8007afa:	4b29      	ldr	r3, [pc, #164]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007afc:	7e1b      	ldrb	r3, [r3, #24]
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	201f      	movs	r0, #31
 8007b04:	183a      	adds	r2, r7, r0
 8007b06:	7812      	ldrb	r2, [r2, #0]
 8007b08:	2101      	movs	r1, #1
 8007b0a:	4091      	lsls	r1, r2
 8007b0c:	000a      	movs	r2, r1
 8007b0e:	b252      	sxtb	r2, r2
 8007b10:	43d2      	mvns	r2, r2
 8007b12:	b252      	sxtb	r2, r2
 8007b14:	4013      	ands	r3, r2
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	4b21      	ldr	r3, [pc, #132]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b1c:	761a      	strb	r2, [r3, #24]
				ch395.RX_received &= ~(1 << i);
 8007b1e:	4b20      	ldr	r3, [pc, #128]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b20:	7e5b      	ldrb	r3, [r3, #25]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	b25b      	sxtb	r3, r3
 8007b26:	183a      	adds	r2, r7, r0
 8007b28:	7812      	ldrb	r2, [r2, #0]
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	4091      	lsls	r1, r2
 8007b2e:	000a      	movs	r2, r1
 8007b30:	b252      	sxtb	r2, r2
 8007b32:	43d2      	mvns	r2, r2
 8007b34:	b252      	sxtb	r2, r2
 8007b36:	4013      	ands	r3, r2
 8007b38:	b25b      	sxtb	r3, r3
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b3e:	765a      	strb	r2, [r3, #25]
				ch395.TX_available |= (1 << i);
 8007b40:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b42:	7edb      	ldrb	r3, [r3, #27]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	b25a      	sxtb	r2, r3
 8007b48:	183b      	adds	r3, r7, r0
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	4099      	lsls	r1, r3
 8007b50:	000b      	movs	r3, r1
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b25b      	sxtb	r3, r3
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b5c:	76da      	strb	r2, [r3, #27]
				if (ch395.SOCK_responding == i)
 8007b5e:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b60:	7e9b      	ldrb	r3, [r3, #26]
 8007b62:	b25b      	sxtb	r3, r3
 8007b64:	001a      	movs	r2, r3
 8007b66:	183b      	adds	r3, r7, r0
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d102      	bne.n	8007b74 <interrupt_CH395+0x384>
					ch395.SOCK_responding = -1; // release the responding socket flag
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <interrupt_CH395+0x3b0>)
 8007b70:	22ff      	movs	r2, #255	; 0xff
 8007b72:	769a      	strb	r2, [r3, #26]
	for (i = 1; i < NUM_SOCKETS; ++i)
 8007b74:	221f      	movs	r2, #31
 8007b76:	18bb      	adds	r3, r7, r2
 8007b78:	18ba      	adds	r2, r7, r2
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	3201      	adds	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]
 8007b80:	231f      	movs	r3, #31
 8007b82:	18fb      	adds	r3, r7, r3
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b07      	cmp	r3, #7
 8007b88:	d800      	bhi.n	8007b8c <interrupt_CH395+0x39c>
 8007b8a:	e6b0      	b.n	80078ee <interrupt_CH395+0xfe>
			}
		}
	}
END_INT_CH395:
 8007b8c:	e015      	b.n	8007bba <interrupt_CH395+0x3ca>
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	20000748 	.word	0x20000748
 8007b94:	20000d4b 	.word	0x20000d4b
 8007b98:	20000d4a 	.word	0x20000d4a
 8007b9c:	20000d48 	.word	0x20000d48
 8007ba0:	20000010 	.word	0x20000010
 8007ba4:	000005fe 	.word	0x000005fe
 8007ba8:	000005ff 	.word	0x000005ff
 8007bac:	2000002c 	.word	0x2000002c
 8007bb0:	20001064 	.word	0x20001064
 8007bb4:	20001066 	.word	0x20001066
		goto END_INT_CH395;
 8007bb8:	46c0      	nop			; (mov r8, r8)
	return;
 8007bba:	46c0      	nop			; (mov r8, r8)
}
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	b009      	add	sp, #36	; 0x24
 8007bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc2:	46c0      	nop			; (mov r8, r8)

08007bc4 <switch_Antenna>:

void switch_Antenna(uint8_t *antnums, uint8_t n)
{
 8007bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	000a      	movs	r2, r1
 8007bce:	1cfb      	adds	r3, r7, #3
 8007bd0:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	for (i = 0; i < MIN(n, N_SELECTORS); ++i)
 8007bd2:	2317      	movs	r3, #23
 8007bd4:	18fb      	adds	r3, r7, r3
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
 8007bda:	e07d      	b.n	8007cd8 <switch_Antenna+0x114>
	{
		uint8_t vNew = antnums[i];
 8007bdc:	2017      	movs	r0, #23
 8007bde:	183b      	adds	r3, r7, r0
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	18d2      	adds	r2, r2, r3
 8007be6:	2415      	movs	r4, #21
 8007be8:	193b      	adds	r3, r7, r4
 8007bea:	7812      	ldrb	r2, [r2, #0]
 8007bec:	701a      	strb	r2, [r3, #0]
		if (Selector[i].sel != vNew)
 8007bee:	183b      	adds	r3, r7, r0
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	4942      	ldr	r1, [pc, #264]	; (8007cfc <switch_Antenna+0x138>)
 8007bf4:	0013      	movs	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	18cb      	adds	r3, r1, r3
 8007bfe:	3318      	adds	r3, #24
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	193a      	adds	r2, r7, r4
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d060      	beq.n	8007ccc <switch_Antenna+0x108>
		{
			Selector[i].sel = vNew;
 8007c0a:	183b      	adds	r3, r7, r0
 8007c0c:	781a      	ldrb	r2, [r3, #0]
 8007c0e:	493b      	ldr	r1, [pc, #236]	; (8007cfc <switch_Antenna+0x138>)
 8007c10:	0013      	movs	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	18cb      	adds	r3, r1, r3
 8007c1a:	3318      	adds	r3, #24
 8007c1c:	193a      	adds	r2, r7, r4
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	701a      	strb	r2, [r3, #0]
			uint8_t val = ~Selector[i].sel;
 8007c22:	183b      	adds	r3, r7, r0
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	4935      	ldr	r1, [pc, #212]	; (8007cfc <switch_Antenna+0x138>)
 8007c28:	0013      	movs	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	18cb      	adds	r3, r1, r3
 8007c32:	3318      	adds	r3, #24
 8007c34:	781a      	ldrb	r2, [r3, #0]
 8007c36:	2314      	movs	r3, #20
 8007c38:	18fb      	adds	r3, r7, r3
 8007c3a:	43d2      	mvns	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]
			for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8007c3e:	2316      	movs	r3, #22
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e029      	b.n	8007c9c <switch_Antenna+0xd8>
			{

				PIN_typedef pin = Selector[i].PIN_BCDs[iBCD];
 8007c48:	2317      	movs	r3, #23
 8007c4a:	18fb      	adds	r3, r7, r3
 8007c4c:	781a      	ldrb	r2, [r3, #0]
 8007c4e:	2516      	movs	r5, #22
 8007c50:	197b      	adds	r3, r7, r5
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	260c      	movs	r6, #12
 8007c56:	19bc      	adds	r4, r7, r6
 8007c58:	4928      	ldr	r1, [pc, #160]	; (8007cfc <switch_Antenna+0x138>)
 8007c5a:	00d8      	lsls	r0, r3, #3
 8007c5c:	0013      	movs	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	1a9b      	subs	r3, r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	18c3      	adds	r3, r0, r3
 8007c66:	0022      	movs	r2, r4
 8007c68:	18cb      	adds	r3, r1, r3
 8007c6a:	cb03      	ldmia	r3!, {r0, r1}
 8007c6c:	c203      	stmia	r2!, {r0, r1}
				HAL_GPIO_WritePin(pin.group, pin.pin, (val >> iBCD) & 0x01);
 8007c6e:	19bb      	adds	r3, r7, r6
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	19bb      	adds	r3, r7, r6
 8007c74:	8899      	ldrh	r1, [r3, #4]
 8007c76:	2314      	movs	r3, #20
 8007c78:	18fb      	adds	r3, r7, r3
 8007c7a:	781a      	ldrb	r2, [r3, #0]
 8007c7c:	197b      	adds	r3, r7, r5
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	411a      	asrs	r2, r3
 8007c82:	0013      	movs	r3, r2
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2201      	movs	r2, #1
 8007c88:	4013      	ands	r3, r2
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	001a      	movs	r2, r3
 8007c8e:	f7f9 fb42 	bl	8001316 <HAL_GPIO_WritePin>
			for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8007c92:	197b      	adds	r3, r7, r5
 8007c94:	197a      	adds	r2, r7, r5
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	3201      	adds	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]
 8007c9c:	2316      	movs	r3, #22
 8007c9e:	18fb      	adds	r3, r7, r3
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d9d0      	bls.n	8007c48 <switch_Antenna+0x84>
			}
			cfg.nRadioToAntNums[i] = Selector[i].sel;
 8007ca6:	2117      	movs	r1, #23
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	781a      	ldrb	r2, [r3, #0]
 8007cac:	187b      	adds	r3, r7, r1
 8007cae:	7819      	ldrb	r1, [r3, #0]
 8007cb0:	4812      	ldr	r0, [pc, #72]	; (8007cfc <switch_Antenna+0x138>)
 8007cb2:	0013      	movs	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	18c3      	adds	r3, r0, r3
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	781a      	ldrb	r2, [r3, #0]
 8007cc0:	4b0f      	ldr	r3, [pc, #60]	; (8007d00 <switch_Antenna+0x13c>)
 8007cc2:	185b      	adds	r3, r3, r1
 8007cc4:	721a      	strb	r2, [r3, #8]
			isModified = true;
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <switch_Antenna+0x140>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MIN(n, N_SELECTORS); ++i)
 8007ccc:	2217      	movs	r2, #23
 8007cce:	18bb      	adds	r3, r7, r2
 8007cd0:	18ba      	adds	r2, r7, r2
 8007cd2:	7812      	ldrb	r2, [r2, #0]
 8007cd4:	3201      	adds	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	1cfb      	adds	r3, r7, #3
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b2da      	uxtb	r2, r3
 8007cde:	2a02      	cmp	r2, #2
 8007ce0:	d900      	bls.n	8007ce4 <switch_Antenna+0x120>
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2217      	movs	r2, #23
 8007ce8:	18ba      	adds	r2, r7, r2
 8007cea:	7812      	ldrb	r2, [r2, #0]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d200      	bcs.n	8007cf2 <switch_Antenna+0x12e>
 8007cf0:	e774      	b.n	8007bdc <switch_Antenna+0x18>
		}

	}

}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	46c0      	nop			; (mov r8, r8)
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b007      	add	sp, #28
 8007cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cfc:	200010d4 	.word	0x200010d4
 8007d00:	20000d54 	.word	0x20000d54
 8007d04:	200006b4 	.word	0x200006b4

08007d08 <get_Antenna_real_BCDs>:

void get_Antenna_real_BCDs(uint8_t *antnums, uint8_t n) //3-0:SEL1[2:0] 7-4:SEL2[2:0] GPIOs are Low Effective
{
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	000a      	movs	r2, r1
 8007d12:	1cfb      	adds	r3, r7, #3
 8007d14:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MIN(n, N_SELECTORS); ++i)
 8007d16:	230f      	movs	r3, #15
 8007d18:	18fb      	adds	r3, r7, r3
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	e052      	b.n	8007dc6 <get_Antenna_real_BCDs+0xbe>
	{
		uint8_t res = 0;
 8007d20:	230e      	movs	r3, #14
 8007d22:	18fb      	adds	r3, r7, r3
 8007d24:	2200      	movs	r2, #0
 8007d26:	701a      	strb	r2, [r3, #0]
		res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
		res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
		res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
		res |= ((d >> BCDM2_2) & 1) << 6;// bit 2: BCDM1_1
#else
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8007d28:	230d      	movs	r3, #13
 8007d2a:	18fb      	adds	r3, r7, r3
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e036      	b.n	8007da0 <get_Antenna_real_BCDs+0x98>
		{
			res |= (((!HAL_GPIO_ReadPin(SelectorM[i].PIN_BCDs[iBCD].group,
 8007d32:	260f      	movs	r6, #15
 8007d34:	19bb      	adds	r3, r7, r6
 8007d36:	781a      	ldrb	r2, [r3, #0]
 8007d38:	250d      	movs	r5, #13
 8007d3a:	197b      	adds	r3, r7, r5
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	492a      	ldr	r1, [pc, #168]	; (8007de8 <get_Antenna_real_BCDs+0xe0>)
 8007d40:	00d8      	lsls	r0, r3, #3
 8007d42:	0013      	movs	r3, r2
 8007d44:	00db      	lsls	r3, r3, #3
 8007d46:	1a9b      	subs	r3, r3, r2
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	18c3      	adds	r3, r0, r3
 8007d4c:	585c      	ldr	r4, [r3, r1]
 8007d4e:	19bb      	adds	r3, r7, r6
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	197b      	adds	r3, r7, r5
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	4924      	ldr	r1, [pc, #144]	; (8007de8 <get_Antenna_real_BCDs+0xe0>)
 8007d58:	00d8      	lsls	r0, r3, #3
 8007d5a:	0013      	movs	r3, r2
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	1a9b      	subs	r3, r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	18c3      	adds	r3, r0, r3
 8007d64:	18cb      	adds	r3, r1, r3
 8007d66:	3304      	adds	r3, #4
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	0019      	movs	r1, r3
 8007d6c:	0020      	movs	r0, r4
 8007d6e:	f7f9 fab5 	bl	80012dc <HAL_GPIO_ReadPin>
 8007d72:	0003      	movs	r3, r0
					SelectorM[i].PIN_BCDs[iBCD].pin)) & 0x01) << iBCD); // BCDM1[0]
 8007d74:	425a      	negs	r2, r3
 8007d76:	4153      	adcs	r3, r2
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	001a      	movs	r2, r3
 8007d7c:	197b      	adds	r3, r7, r5
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	409a      	lsls	r2, r3
 8007d82:	0013      	movs	r3, r2
			res |= (((!HAL_GPIO_ReadPin(SelectorM[i].PIN_BCDs[iBCD].group,
 8007d84:	b25a      	sxtb	r2, r3
 8007d86:	210e      	movs	r1, #14
 8007d88:	187b      	adds	r3, r7, r1
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b25a      	sxtb	r2, r3
 8007d92:	187b      	adds	r3, r7, r1
 8007d94:	701a      	strb	r2, [r3, #0]
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8007d96:	197b      	adds	r3, r7, r5
 8007d98:	197a      	adds	r2, r7, r5
 8007d9a:	7812      	ldrb	r2, [r2, #0]
 8007d9c:	3201      	adds	r2, #1
 8007d9e:	701a      	strb	r2, [r3, #0]
 8007da0:	230d      	movs	r3, #13
 8007da2:	18fb      	adds	r3, r7, r3
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d9c3      	bls.n	8007d32 <get_Antenna_real_BCDs+0x2a>
		}
#endif
		antnums[i] = res;
 8007daa:	210f      	movs	r1, #15
 8007dac:	187b      	adds	r3, r7, r1
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	220e      	movs	r2, #14
 8007db6:	18ba      	adds	r2, r7, r2
 8007db8:	7812      	ldrb	r2, [r2, #0]
 8007dba:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MIN(n, N_SELECTORS); ++i)
 8007dbc:	187b      	adds	r3, r7, r1
 8007dbe:	187a      	adds	r2, r7, r1
 8007dc0:	7812      	ldrb	r2, [r2, #0]
 8007dc2:	3201      	adds	r2, #1
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	1cfb      	adds	r3, r7, #3
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	2a02      	cmp	r2, #2
 8007dce:	d900      	bls.n	8007dd2 <get_Antenna_real_BCDs+0xca>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	220f      	movs	r2, #15
 8007dd6:	18ba      	adds	r2, r7, r2
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d3a0      	bcc.n	8007d20 <get_Antenna_real_BCDs+0x18>
	}

}
 8007dde:	46c0      	nop			; (mov r8, r8)
 8007de0:	46c0      	nop			; (mov r8, r8)
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b005      	add	sp, #20
 8007de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007de8:	200011fc 	.word	0x200011fc

08007dec <display_IP>:

/* Display IP functions BEGIN */

// USE BCD1_0, BCD1_1, BCD1_2, BCD2_0 for transferring "0~9" and "-" digits
void display_IP(bool start)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	0002      	movs	r2, r0
 8007df4:	1dfb      	adds	r3, r7, #7
 8007df6:	701a      	strb	r2, [r3, #0]
	if (start)
 8007df8:	1dfb      	adds	r3, r7, #7
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d059      	beq.n	8007eb4 <display_IP+0xc8>
	{
		idxDisplayIP = 0;
 8007e00:	4b30      	ldr	r3, [pc, #192]	; (8007ec4 <display_IP+0xd8>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]

		//  HAL_GPIO_WritePin(XDISPLAY_GPIO_Port, XDISPLAY_Pin, 0);
		// turn off display
		uint8_t d = ~(0x0e);
 8007e06:	2417      	movs	r4, #23
 8007e08:	193b      	adds	r3, r7, r4
 8007e0a:	22f1      	movs	r2, #241	; 0xf1
 8007e0c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8007e0e:	4b2e      	ldr	r3, [pc, #184]	; (8007ec8 <display_IP+0xdc>)
 8007e10:	6818      	ldr	r0, [r3, #0]
 8007e12:	4b2d      	ldr	r3, [pc, #180]	; (8007ec8 <display_IP+0xdc>)
 8007e14:	8899      	ldrh	r1, [r3, #4]
				Selector[0].PIN_BCDs[0].pin, d & 0x01);
 8007e16:	193b      	adds	r3, r7, r4
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8007e20:	001a      	movs	r2, r3
 8007e22:	f7f9 fa78 	bl	8001316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8007e26:	4b28      	ldr	r3, [pc, #160]	; (8007ec8 <display_IP+0xdc>)
 8007e28:	6898      	ldr	r0, [r3, #8]
 8007e2a:	4b27      	ldr	r3, [pc, #156]	; (8007ec8 <display_IP+0xdc>)
 8007e2c:	8999      	ldrh	r1, [r3, #12]
 8007e2e:	193b      	adds	r3, r7, r4
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	b2db      	uxtb	r3, r3
				Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 8007e36:	2201      	movs	r2, #1
 8007e38:	4013      	ands	r3, r2
 8007e3a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8007e3c:	001a      	movs	r2, r3
 8007e3e:	f7f9 fa6a 	bl	8001316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8007e42:	4b21      	ldr	r3, [pc, #132]	; (8007ec8 <display_IP+0xdc>)
 8007e44:	6918      	ldr	r0, [r3, #16]
 8007e46:	4b20      	ldr	r3, [pc, #128]	; (8007ec8 <display_IP+0xdc>)
 8007e48:	8a99      	ldrh	r1, [r3, #20]
 8007e4a:	193b      	adds	r3, r7, r4
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	089b      	lsrs	r3, r3, #2
 8007e50:	b2db      	uxtb	r3, r3
				Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 8007e52:	2201      	movs	r2, #1
 8007e54:	4013      	ands	r3, r2
 8007e56:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8007e58:	001a      	movs	r2, r3
 8007e5a:	f7f9 fa5c 	bl	8001316 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8007e5e:	4b1a      	ldr	r3, [pc, #104]	; (8007ec8 <display_IP+0xdc>)
 8007e60:	69d8      	ldr	r0, [r3, #28]
 8007e62:	4b19      	ldr	r3, [pc, #100]	; (8007ec8 <display_IP+0xdc>)
 8007e64:	8c19      	ldrh	r1, [r3, #32]
 8007e66:	193b      	adds	r3, r7, r4
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	08db      	lsrs	r3, r3, #3
 8007e6c:	b2db      	uxtb	r3, r3
				Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 8007e6e:	2201      	movs	r2, #1
 8007e70:	4013      	ands	r3, r2
 8007e72:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8007e74:	001a      	movs	r2, r3
 8007e76:	f7f9 fa4e 	bl	8001316 <HAL_GPIO_WritePin>
		// get IP info from CH395
		uint8_t IPv4_Gateway_info[12];
		if(flag_CH395_DHCP_ready)
 8007e7a:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <display_IP+0xe0>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <display_IP+0xaa>
		{
			CH395GetIPInf(IPv4_Gateway_info);
 8007e84:	2408      	movs	r4, #8
 8007e86:	193b      	adds	r3, r7, r4
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f7fc fe15 	bl	8004ab8 <CH395GetIPInf>
			memcpy(IP, IPv4_Gateway_info, 4);
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <display_IP+0xe4>)
 8007e90:	193a      	adds	r2, r7, r4
 8007e92:	6812      	ldr	r2, [r2, #0]
 8007e94:	601a      	str	r2, [r3, #0]
		}
		// transform IP to string, and get the length of the string
		lenDisplayIP = IPv4_to_s(sIP_dec ,IP);
 8007e96:	4a0e      	ldr	r2, [pc, #56]	; (8007ed0 <display_IP+0xe4>)
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <display_IP+0xe8>)
 8007e9a:	0011      	movs	r1, r2
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f7fe fbd6 	bl	800664e <IPv4_to_s>
 8007ea2:	0003      	movs	r3, r0
 8007ea4:	001a      	movs	r2, r3
 8007ea6:	4b0c      	ldr	r3, [pc, #48]	; (8007ed8 <display_IP+0xec>)
 8007ea8:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim6);
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <display_IP+0xf0>)
 8007eac:	0018      	movs	r0, r3
 8007eae:	f7fa fe1d 	bl	8002aec <HAL_TIM_Base_Start_IT>
	}
	else
	{
		idxDisplayIP = -1;
	}
}
 8007eb2:	e002      	b.n	8007eba <display_IP+0xce>
		idxDisplayIP = -1;
 8007eb4:	4b03      	ldr	r3, [pc, #12]	; (8007ec4 <display_IP+0xd8>)
 8007eb6:	22ff      	movs	r2, #255	; 0xff
 8007eb8:	701a      	strb	r2, [r3, #0]
}
 8007eba:	46c0      	nop			; (mov r8, r8)
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	b007      	add	sp, #28
 8007ec0:	bd90      	pop	{r4, r7, pc}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	20000690 	.word	0x20000690
 8007ec8:	200010d4 	.word	0x200010d4
 8007ecc:	20000d4b 	.word	0x20000d4b
 8007ed0:	20000688 	.word	0x20000688
 8007ed4:	20000d38 	.word	0x20000d38
 8007ed8:	20000d4c 	.word	0x20000d4c
 8007edc:	20001150 	.word	0x20001150

08007ee0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ee0:	b590      	push	{r4, r7, lr}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
	/* display IP address */
	if (htim == &htim6)
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	4b6c      	ldr	r3, [pc, #432]	; (800809c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d000      	beq.n	8007ef2 <HAL_TIM_PeriodElapsedCallback+0x12>
 8007ef0:	e0d1      	b.n	8008096 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	{
		uint8_t d;
		if(idxDisplayIP < 0)
 8007ef2:	4b6b      	ldr	r3, [pc, #428]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	b25b      	sxtb	r3, r3
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	da04      	bge.n	8007f06 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			HAL_TIM_Base_Stop_IT(htim);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	0018      	movs	r0, r3
 8007f00:	f7fa fe40 	bl	8002b84 <HAL_TIM_Base_Stop_IT>
			return;
 8007f04:	e0c7      	b.n	8008096 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}

		if (idxDisplayIP < lenDisplayIP)
 8007f06:	4b66      	ldr	r3, [pc, #408]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	4b65      	ldr	r3, [pc, #404]	; (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	da6c      	bge.n	8007ff0 <HAL_TIM_PeriodElapsedCallback+0x110>
		{
			char s = sIP_dec[idxDisplayIP];
 8007f16:	4b62      	ldr	r3, [pc, #392]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	b25b      	sxtb	r3, r3
 8007f1c:	0019      	movs	r1, r3
 8007f1e:	200e      	movs	r0, #14
 8007f20:	183b      	adds	r3, r7, r0
 8007f22:	4a61      	ldr	r2, [pc, #388]	; (80080a8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8007f24:	5c52      	ldrb	r2, [r2, r1]
 8007f26:	701a      	strb	r2, [r3, #0]
			if (s >= '0' && s <= '9')
 8007f28:	0002      	movs	r2, r0
 8007f2a:	18bb      	adds	r3, r7, r2
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f30:	d90f      	bls.n	8007f52 <HAL_TIM_PeriodElapsedCallback+0x72>
 8007f32:	18bb      	adds	r3, r7, r2
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b39      	cmp	r3, #57	; 0x39
 8007f38:	d80b      	bhi.n	8007f52 <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				d = (s - '0');
 8007f3a:	210f      	movs	r1, #15
 8007f3c:	187b      	adds	r3, r7, r1
 8007f3e:	18ba      	adds	r2, r7, r2
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	3a30      	subs	r2, #48	; 0x30
 8007f44:	701a      	strb	r2, [r3, #0]
				d = ~d;
 8007f46:	187b      	adds	r3, r7, r1
 8007f48:	187a      	adds	r2, r7, r1
 8007f4a:	7812      	ldrb	r2, [r2, #0]
 8007f4c:	43d2      	mvns	r2, r2
 8007f4e:	701a      	strb	r2, [r3, #0]
 8007f50:	e00d      	b.n	8007f6e <HAL_TIM_PeriodElapsedCallback+0x8e>

			}
			else if(s == '.') // display "-" instead of '.', activate all 4 pins
 8007f52:	230e      	movs	r3, #14
 8007f54:	18fb      	adds	r3, r7, r3
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5a:	d104      	bne.n	8007f66 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				d = ~(0x0f);
 8007f5c:	230f      	movs	r3, #15
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	22f0      	movs	r2, #240	; 0xf0
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	e003      	b.n	8007f6e <HAL_TIM_PeriodElapsedCallback+0x8e>
			}
			else
			{
				d = ~(0x0e); // no display
 8007f66:	230f      	movs	r3, #15
 8007f68:	18fb      	adds	r3, r7, r3
 8007f6a:	22f1      	movs	r2, #241	; 0xf1
 8007f6c:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8007f6e:	4b4f      	ldr	r3, [pc, #316]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	4b4e      	ldr	r3, [pc, #312]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007f74:	8899      	ldrh	r1, [r3, #4]
					Selector[0].PIN_BCDs[0].pin, d & 0x01);
 8007f76:	240f      	movs	r4, #15
 8007f78:	193b      	adds	r3, r7, r4
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	4013      	ands	r3, r2
 8007f80:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8007f82:	001a      	movs	r2, r3
 8007f84:	f7f9 f9c7 	bl	8001316 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8007f88:	4b48      	ldr	r3, [pc, #288]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007f8a:	6898      	ldr	r0, [r3, #8]
 8007f8c:	4b47      	ldr	r3, [pc, #284]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007f8e:	8999      	ldrh	r1, [r3, #12]
 8007f90:	193b      	adds	r3, r7, r4
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	085b      	lsrs	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 8007f98:	2201      	movs	r2, #1
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8007f9e:	001a      	movs	r2, r3
 8007fa0:	f7f9 f9b9 	bl	8001316 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8007fa4:	4b41      	ldr	r3, [pc, #260]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007fa6:	6918      	ldr	r0, [r3, #16]
 8007fa8:	4b40      	ldr	r3, [pc, #256]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007faa:	8a99      	ldrh	r1, [r3, #20]
 8007fac:	193b      	adds	r3, r7, r4
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	089b      	lsrs	r3, r3, #2
 8007fb2:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8007fba:	001a      	movs	r2, r3
 8007fbc:	f7f9 f9ab 	bl	8001316 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8007fc0:	4b3a      	ldr	r3, [pc, #232]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007fc2:	69d8      	ldr	r0, [r3, #28]
 8007fc4:	4b39      	ldr	r3, [pc, #228]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8007fc6:	8c19      	ldrh	r1, [r3, #32]
 8007fc8:	193b      	adds	r3, r7, r4
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	08db      	lsrs	r3, r3, #3
 8007fce:	b2db      	uxtb	r3, r3
					Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	f7f9 f99d 	bl	8001316 <HAL_GPIO_WritePin>
			++idxDisplayIP;
 8007fdc:	4b30      	ldr	r3, [pc, #192]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b25b      	sxtb	r3, r3
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	b25a      	sxtb	r2, r3
 8007fea:	4b2d      	ldr	r3, [pc, #180]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e052      	b.n	8008096 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}
		else if(idxDisplayIP < lenDisplayIP + 3) // at the end of transmission, pause for a while
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	3302      	adds	r3, #2
 8007ff6:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	b252      	sxtb	r2, r2
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	db43      	blt.n	8008088 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		{
			d = ~(0x0e); // no display
 8008000:	240f      	movs	r4, #15
 8008002:	193b      	adds	r3, r7, r4
 8008004:	22f1      	movs	r2, #241	; 0xf1
 8008006:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8008008:	4b28      	ldr	r3, [pc, #160]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	4b27      	ldr	r3, [pc, #156]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800800e:	8899      	ldrh	r1, [r3, #4]
					Selector[0].PIN_BCDs[0].pin, d & 0x01);
 8008010:	193b      	adds	r3, r7, r4
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	4013      	ands	r3, r2
 8008018:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800801a:	001a      	movs	r2, r3
 800801c:	f7f9 f97b 	bl	8001316 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8008020:	4b22      	ldr	r3, [pc, #136]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008022:	6898      	ldr	r0, [r3, #8]
 8008024:	4b21      	ldr	r3, [pc, #132]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008026:	8999      	ldrh	r1, [r3, #12]
 8008028:	193b      	adds	r3, r7, r4
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 8008030:	2201      	movs	r2, #1
 8008032:	4013      	ands	r3, r2
 8008034:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8008036:	001a      	movs	r2, r3
 8008038:	f7f9 f96d 	bl	8001316 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 800803c:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800803e:	6918      	ldr	r0, [r3, #16]
 8008040:	4b1a      	ldr	r3, [pc, #104]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008042:	8a99      	ldrh	r1, [r3, #20]
 8008044:	193b      	adds	r3, r7, r4
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 800804c:	2201      	movs	r2, #1
 800804e:	4013      	ands	r3, r2
 8008050:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8008052:	001a      	movs	r2, r3
 8008054:	f7f9 f95f 	bl	8001316 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8008058:	4b14      	ldr	r3, [pc, #80]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800805a:	69d8      	ldr	r0, [r3, #28]
 800805c:	4b13      	ldr	r3, [pc, #76]	; (80080ac <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800805e:	8c19      	ldrh	r1, [r3, #32]
 8008060:	193b      	adds	r3, r7, r4
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	08db      	lsrs	r3, r3, #3
 8008066:	b2db      	uxtb	r3, r3
					Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 8008068:	2201      	movs	r2, #1
 800806a:	4013      	ands	r3, r2
 800806c:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 800806e:	001a      	movs	r2, r3
 8008070:	f7f9 f951 	bl	8001316 <HAL_GPIO_WritePin>
			++idxDisplayIP;
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	b25b      	sxtb	r3, r3
 800807a:	b2db      	uxtb	r3, r3
 800807c:	3301      	adds	r3, #1
 800807e:	b2db      	uxtb	r3, r3
 8008080:	b25a      	sxtb	r2, r3
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008084:	701a      	strb	r2, [r3, #0]
 8008086:	e006      	b.n	8008096 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}
		else
		{
			idxDisplayIP = -1;
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800808a:	22ff      	movs	r2, #255	; 0xff
 800808c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	0018      	movs	r0, r3
 8008092:	f7fa fd77 	bl	8002b84 <HAL_TIM_Base_Stop_IT>
		}
	}
}
 8008096:	46bd      	mov	sp, r7
 8008098:	b005      	add	sp, #20
 800809a:	bd90      	pop	{r4, r7, pc}
 800809c:	20001150 	.word	0x20001150
 80080a0:	20000690 	.word	0x20000690
 80080a4:	20000d4c 	.word	0x20000d4c
 80080a8:	20000d38 	.word	0x20000d38
 80080ac:	200010d4 	.word	0x200010d4

080080b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80080b4:	46c0      	nop			; (mov r8, r8)
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b082      	sub	sp, #8
 80080c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080c2:	4b0f      	ldr	r3, [pc, #60]	; (8008100 <HAL_MspInit+0x44>)
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <HAL_MspInit+0x44>)
 80080c8:	2101      	movs	r1, #1
 80080ca:	430a      	orrs	r2, r1
 80080cc:	619a      	str	r2, [r3, #24]
 80080ce:	4b0c      	ldr	r3, [pc, #48]	; (8008100 <HAL_MspInit+0x44>)
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	2201      	movs	r2, #1
 80080d4:	4013      	ands	r3, r2
 80080d6:	607b      	str	r3, [r7, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <HAL_MspInit+0x44>)
 80080dc:	69da      	ldr	r2, [r3, #28]
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <HAL_MspInit+0x44>)
 80080e0:	2180      	movs	r1, #128	; 0x80
 80080e2:	0549      	lsls	r1, r1, #21
 80080e4:	430a      	orrs	r2, r1
 80080e6:	61da      	str	r2, [r3, #28]
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <HAL_MspInit+0x44>)
 80080ea:	69da      	ldr	r2, [r3, #28]
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	055b      	lsls	r3, r3, #21
 80080f0:	4013      	ands	r3, r2
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080f6:	46c0      	nop			; (mov r8, r8)
 80080f8:	46bd      	mov	sp, r7
 80080fa:	b002      	add	sp, #8
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	46c0      	nop			; (mov r8, r8)
 8008100:	40021000 	.word	0x40021000

08008104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b08b      	sub	sp, #44	; 0x2c
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800810c:	2414      	movs	r4, #20
 800810e:	193b      	adds	r3, r7, r4
 8008110:	0018      	movs	r0, r3
 8008112:	2314      	movs	r3, #20
 8008114:	001a      	movs	r2, r3
 8008116:	2100      	movs	r1, #0
 8008118:	f000 f9ef 	bl	80084fa <memset>
  if(hspi->Instance==SPI1)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1c      	ldr	r2, [pc, #112]	; (8008194 <HAL_SPI_MspInit+0x90>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d132      	bne.n	800818c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008126:	4b1c      	ldr	r3, [pc, #112]	; (8008198 <HAL_SPI_MspInit+0x94>)
 8008128:	699a      	ldr	r2, [r3, #24]
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <HAL_SPI_MspInit+0x94>)
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	0149      	lsls	r1, r1, #5
 8008130:	430a      	orrs	r2, r1
 8008132:	619a      	str	r2, [r3, #24]
 8008134:	4b18      	ldr	r3, [pc, #96]	; (8008198 <HAL_SPI_MspInit+0x94>)
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	2380      	movs	r3, #128	; 0x80
 800813a:	015b      	lsls	r3, r3, #5
 800813c:	4013      	ands	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <HAL_SPI_MspInit+0x94>)
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <HAL_SPI_MspInit+0x94>)
 8008148:	2180      	movs	r1, #128	; 0x80
 800814a:	0289      	lsls	r1, r1, #10
 800814c:	430a      	orrs	r2, r1
 800814e:	615a      	str	r2, [r3, #20]
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <HAL_SPI_MspInit+0x94>)
 8008152:	695a      	ldr	r2, [r3, #20]
 8008154:	2380      	movs	r3, #128	; 0x80
 8008156:	029b      	lsls	r3, r3, #10
 8008158:	4013      	ands	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800815e:	0021      	movs	r1, r4
 8008160:	187b      	adds	r3, r7, r1
 8008162:	22e0      	movs	r2, #224	; 0xe0
 8008164:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008166:	187b      	adds	r3, r7, r1
 8008168:	2202      	movs	r2, #2
 800816a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800816c:	187b      	adds	r3, r7, r1
 800816e:	2201      	movs	r2, #1
 8008170:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008172:	187b      	adds	r3, r7, r1
 8008174:	2203      	movs	r2, #3
 8008176:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008178:	187b      	adds	r3, r7, r1
 800817a:	2200      	movs	r2, #0
 800817c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800817e:	187a      	adds	r2, r7, r1
 8008180:	2390      	movs	r3, #144	; 0x90
 8008182:	05db      	lsls	r3, r3, #23
 8008184:	0011      	movs	r1, r2
 8008186:	0018      	movs	r0, r3
 8008188:	f7f8 ff38 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800818c:	46c0      	nop			; (mov r8, r8)
 800818e:	46bd      	mov	sp, r7
 8008190:	b00b      	add	sp, #44	; 0x2c
 8008192:	bd90      	pop	{r4, r7, pc}
 8008194:	40013000 	.word	0x40013000
 8008198:	40021000 	.word	0x40021000

0800819c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a0d      	ldr	r2, [pc, #52]	; (80081e0 <HAL_TIM_Base_MspInit+0x44>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d113      	bne.n	80081d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80081ae:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <HAL_TIM_Base_MspInit+0x48>)
 80081b0:	69da      	ldr	r2, [r3, #28]
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <HAL_TIM_Base_MspInit+0x48>)
 80081b4:	2110      	movs	r1, #16
 80081b6:	430a      	orrs	r2, r1
 80081b8:	61da      	str	r2, [r3, #28]
 80081ba:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <HAL_TIM_Base_MspInit+0x48>)
 80081bc:	69db      	ldr	r3, [r3, #28]
 80081be:	2210      	movs	r2, #16
 80081c0:	4013      	ands	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80081c6:	2200      	movs	r2, #0
 80081c8:	2100      	movs	r1, #0
 80081ca:	2011      	movs	r0, #17
 80081cc:	f7f8 facc 	bl	8000768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80081d0:	2011      	movs	r0, #17
 80081d2:	f7f8 fade 	bl	8000792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b004      	add	sp, #16
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	40001000 	.word	0x40001000
 80081e4:	40021000 	.word	0x40021000

080081e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b08b      	sub	sp, #44	; 0x2c
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f0:	2414      	movs	r4, #20
 80081f2:	193b      	adds	r3, r7, r4
 80081f4:	0018      	movs	r0, r3
 80081f6:	2314      	movs	r3, #20
 80081f8:	001a      	movs	r2, r3
 80081fa:	2100      	movs	r1, #0
 80081fc:	f000 f97d 	bl	80084fa <memset>
  if(huart->Instance==USART2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a47      	ldr	r2, [pc, #284]	; (8008324 <HAL_UART_MspInit+0x13c>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d000      	beq.n	800820c <HAL_UART_MspInit+0x24>
 800820a:	e087      	b.n	800831c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800820c:	4b46      	ldr	r3, [pc, #280]	; (8008328 <HAL_UART_MspInit+0x140>)
 800820e:	69da      	ldr	r2, [r3, #28]
 8008210:	4b45      	ldr	r3, [pc, #276]	; (8008328 <HAL_UART_MspInit+0x140>)
 8008212:	2180      	movs	r1, #128	; 0x80
 8008214:	0289      	lsls	r1, r1, #10
 8008216:	430a      	orrs	r2, r1
 8008218:	61da      	str	r2, [r3, #28]
 800821a:	4b43      	ldr	r3, [pc, #268]	; (8008328 <HAL_UART_MspInit+0x140>)
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	2380      	movs	r3, #128	; 0x80
 8008220:	029b      	lsls	r3, r3, #10
 8008222:	4013      	ands	r3, r2
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008228:	4b3f      	ldr	r3, [pc, #252]	; (8008328 <HAL_UART_MspInit+0x140>)
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	4b3e      	ldr	r3, [pc, #248]	; (8008328 <HAL_UART_MspInit+0x140>)
 800822e:	2180      	movs	r1, #128	; 0x80
 8008230:	0289      	lsls	r1, r1, #10
 8008232:	430a      	orrs	r2, r1
 8008234:	615a      	str	r2, [r3, #20]
 8008236:	4b3c      	ldr	r3, [pc, #240]	; (8008328 <HAL_UART_MspInit+0x140>)
 8008238:	695a      	ldr	r2, [r3, #20]
 800823a:	2380      	movs	r3, #128	; 0x80
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	4013      	ands	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008244:	0021      	movs	r1, r4
 8008246:	187b      	adds	r3, r7, r1
 8008248:	220c      	movs	r2, #12
 800824a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824c:	187b      	adds	r3, r7, r1
 800824e:	2202      	movs	r2, #2
 8008250:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008252:	187b      	adds	r3, r7, r1
 8008254:	2201      	movs	r2, #1
 8008256:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008258:	187b      	adds	r3, r7, r1
 800825a:	2203      	movs	r2, #3
 800825c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800825e:	187b      	adds	r3, r7, r1
 8008260:	2201      	movs	r2, #1
 8008262:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008264:	187a      	adds	r2, r7, r1
 8008266:	2390      	movs	r3, #144	; 0x90
 8008268:	05db      	lsls	r3, r3, #23
 800826a:	0011      	movs	r1, r2
 800826c:	0018      	movs	r0, r3
 800826e:	f7f8 fec5 	bl	8000ffc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8008272:	4b2e      	ldr	r3, [pc, #184]	; (800832c <HAL_UART_MspInit+0x144>)
 8008274:	4a2e      	ldr	r2, [pc, #184]	; (8008330 <HAL_UART_MspInit+0x148>)
 8008276:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008278:	4b2c      	ldr	r3, [pc, #176]	; (800832c <HAL_UART_MspInit+0x144>)
 800827a:	2200      	movs	r2, #0
 800827c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800827e:	4b2b      	ldr	r3, [pc, #172]	; (800832c <HAL_UART_MspInit+0x144>)
 8008280:	2200      	movs	r2, #0
 8008282:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008284:	4b29      	ldr	r3, [pc, #164]	; (800832c <HAL_UART_MspInit+0x144>)
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800828a:	4b28      	ldr	r3, [pc, #160]	; (800832c <HAL_UART_MspInit+0x144>)
 800828c:	2200      	movs	r2, #0
 800828e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008290:	4b26      	ldr	r3, [pc, #152]	; (800832c <HAL_UART_MspInit+0x144>)
 8008292:	2200      	movs	r2, #0
 8008294:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008296:	4b25      	ldr	r3, [pc, #148]	; (800832c <HAL_UART_MspInit+0x144>)
 8008298:	2200      	movs	r2, #0
 800829a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800829c:	4b23      	ldr	r3, [pc, #140]	; (800832c <HAL_UART_MspInit+0x144>)
 800829e:	2280      	movs	r2, #128	; 0x80
 80082a0:	0152      	lsls	r2, r2, #5
 80082a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80082a4:	4b21      	ldr	r3, [pc, #132]	; (800832c <HAL_UART_MspInit+0x144>)
 80082a6:	0018      	movs	r0, r3
 80082a8:	f7f8 fa90 	bl	80007cc <HAL_DMA_Init>
 80082ac:	1e03      	subs	r3, r0, #0
 80082ae:	d001      	beq.n	80082b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80082b0:	f7ff fefe 	bl	80080b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a1d      	ldr	r2, [pc, #116]	; (800832c <HAL_UART_MspInit+0x144>)
 80082b8:	675a      	str	r2, [r3, #116]	; 0x74
 80082ba:	4b1c      	ldr	r3, [pc, #112]	; (800832c <HAL_UART_MspInit+0x144>)
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80082c0:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082c2:	4a1d      	ldr	r2, [pc, #116]	; (8008338 <HAL_UART_MspInit+0x150>)
 80082c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80082c6:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082c8:	2210      	movs	r2, #16
 80082ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80082cc:	4b19      	ldr	r3, [pc, #100]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80082d2:	4b18      	ldr	r3, [pc, #96]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082d4:	2280      	movs	r2, #128	; 0x80
 80082d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80082d8:	4b16      	ldr	r3, [pc, #88]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082da:	2200      	movs	r2, #0
 80082dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80082de:	4b15      	ldr	r3, [pc, #84]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082e0:	2200      	movs	r2, #0
 80082e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80082e4:	4b13      	ldr	r3, [pc, #76]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80082ea:	4b12      	ldr	r3, [pc, #72]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80082f0:	4b10      	ldr	r3, [pc, #64]	; (8008334 <HAL_UART_MspInit+0x14c>)
 80082f2:	0018      	movs	r0, r3
 80082f4:	f7f8 fa6a 	bl	80007cc <HAL_DMA_Init>
 80082f8:	1e03      	subs	r3, r0, #0
 80082fa:	d001      	beq.n	8008300 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 80082fc:	f7ff fed8 	bl	80080b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a0c      	ldr	r2, [pc, #48]	; (8008334 <HAL_UART_MspInit+0x14c>)
 8008304:	671a      	str	r2, [r3, #112]	; 0x70
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <HAL_UART_MspInit+0x14c>)
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800830c:	2200      	movs	r2, #0
 800830e:	2100      	movs	r1, #0
 8008310:	201c      	movs	r0, #28
 8008312:	f7f8 fa29 	bl	8000768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008316:	201c      	movs	r0, #28
 8008318:	f7f8 fa3b 	bl	8000792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800831c:	46c0      	nop			; (mov r8, r8)
 800831e:	46bd      	mov	sp, r7
 8008320:	b00b      	add	sp, #44	; 0x2c
 8008322:	bd90      	pop	{r4, r7, pc}
 8008324:	40004400 	.word	0x40004400
 8008328:	40021000 	.word	0x40021000
 800832c:	20001080 	.word	0x20001080
 8008330:	40020058 	.word	0x40020058
 8008334:	2000110c 	.word	0x2000110c
 8008338:	40020044 	.word	0x40020044

0800833c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008340:	46c0      	nop			; (mov r8, r8)
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800834a:	e7fe      	b.n	800834a <HardFault_Handler+0x4>

0800834c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008350:	46c0      	nop			; (mov r8, r8)
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008364:	f7f8 f914 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 8008368:	46c0      	nop			; (mov r8, r8)
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <DMA1_Channel4_5_IRQHandler+0x1c>)
 8008376:	0018      	movs	r0, r3
 8008378:	f7f8 fb53 	bl	8000a22 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800837c:	4b04      	ldr	r3, [pc, #16]	; (8008390 <DMA1_Channel4_5_IRQHandler+0x20>)
 800837e:	0018      	movs	r0, r3
 8008380:	f7f8 fb4f 	bl	8000a22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8008384:	46c0      	nop			; (mov r8, r8)
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	2000110c 	.word	0x2000110c
 8008390:	20001080 	.word	0x20001080

08008394 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008398:	4b03      	ldr	r3, [pc, #12]	; (80083a8 <TIM6_IRQHandler+0x14>)
 800839a:	0018      	movs	r0, r3
 800839c:	f7fa fc20 	bl	8002be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80083a0:	46c0      	nop			; (mov r8, r8)
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	20001150 	.word	0x20001150

080083ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80083b0:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <USART2_IRQHandler+0x14>)
 80083b2:	0018      	movs	r0, r3
 80083b4:	f7fa fe24 	bl	8003000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80083b8:	46c0      	nop			; (mov r8, r8)
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	20001234 	.word	0x20001234

080083c4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80083c8:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <SystemInit+0x70>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	4b19      	ldr	r3, [pc, #100]	; (8008434 <SystemInit+0x70>)
 80083ce:	2101      	movs	r1, #1
 80083d0:	430a      	orrs	r2, r1
 80083d2:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80083d4:	4b17      	ldr	r3, [pc, #92]	; (8008434 <SystemInit+0x70>)
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	4b16      	ldr	r3, [pc, #88]	; (8008434 <SystemInit+0x70>)
 80083da:	4917      	ldr	r1, [pc, #92]	; (8008438 <SystemInit+0x74>)
 80083dc:	400a      	ands	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80083e0:	4b14      	ldr	r3, [pc, #80]	; (8008434 <SystemInit+0x70>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	4b13      	ldr	r3, [pc, #76]	; (8008434 <SystemInit+0x70>)
 80083e6:	4915      	ldr	r1, [pc, #84]	; (800843c <SystemInit+0x78>)
 80083e8:	400a      	ands	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <SystemInit+0x70>)
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	4b10      	ldr	r3, [pc, #64]	; (8008434 <SystemInit+0x70>)
 80083f2:	4913      	ldr	r1, [pc, #76]	; (8008440 <SystemInit+0x7c>)
 80083f4:	400a      	ands	r2, r1
 80083f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80083f8:	4b0e      	ldr	r3, [pc, #56]	; (8008434 <SystemInit+0x70>)
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	4b0d      	ldr	r3, [pc, #52]	; (8008434 <SystemInit+0x70>)
 80083fe:	4911      	ldr	r1, [pc, #68]	; (8008444 <SystemInit+0x80>)
 8008400:	400a      	ands	r2, r1
 8008402:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8008404:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <SystemInit+0x70>)
 8008406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <SystemInit+0x70>)
 800840a:	210f      	movs	r1, #15
 800840c:	438a      	bics	r2, r1
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8008410:	4b08      	ldr	r3, [pc, #32]	; (8008434 <SystemInit+0x70>)
 8008412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008414:	4b07      	ldr	r3, [pc, #28]	; (8008434 <SystemInit+0x70>)
 8008416:	490c      	ldr	r1, [pc, #48]	; (8008448 <SystemInit+0x84>)
 8008418:	400a      	ands	r2, r1
 800841a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <SystemInit+0x70>)
 800841e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008420:	4b04      	ldr	r3, [pc, #16]	; (8008434 <SystemInit+0x70>)
 8008422:	2101      	movs	r1, #1
 8008424:	438a      	bics	r2, r1
 8008426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <SystemInit+0x70>)
 800842a:	2200      	movs	r2, #0
 800842c:	609a      	str	r2, [r3, #8]

}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	40021000 	.word	0x40021000
 8008438:	08ffb80c 	.word	0x08ffb80c
 800843c:	fef6ffff 	.word	0xfef6ffff
 8008440:	fffbffff 	.word	0xfffbffff
 8008444:	ffc0ffff 	.word	0xffc0ffff
 8008448:	fffffeec 	.word	0xfffffeec

0800844c <Reset_Handler>:
 800844c:	480d      	ldr	r0, [pc, #52]	; (8008484 <LoopForever+0x2>)
 800844e:	4685      	mov	sp, r0
 8008450:	480d      	ldr	r0, [pc, #52]	; (8008488 <LoopForever+0x6>)
 8008452:	490e      	ldr	r1, [pc, #56]	; (800848c <LoopForever+0xa>)
 8008454:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <LoopForever+0xe>)
 8008456:	2300      	movs	r3, #0
 8008458:	e002      	b.n	8008460 <LoopCopyDataInit>

0800845a <CopyDataInit>:
 800845a:	58d4      	ldr	r4, [r2, r3]
 800845c:	50c4      	str	r4, [r0, r3]
 800845e:	3304      	adds	r3, #4

08008460 <LoopCopyDataInit>:
 8008460:	18c4      	adds	r4, r0, r3
 8008462:	428c      	cmp	r4, r1
 8008464:	d3f9      	bcc.n	800845a <CopyDataInit>
 8008466:	4a0b      	ldr	r2, [pc, #44]	; (8008494 <LoopForever+0x12>)
 8008468:	4c0b      	ldr	r4, [pc, #44]	; (8008498 <LoopForever+0x16>)
 800846a:	2300      	movs	r3, #0
 800846c:	e001      	b.n	8008472 <LoopFillZerobss>

0800846e <FillZerobss>:
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	3204      	adds	r2, #4

08008472 <LoopFillZerobss>:
 8008472:	42a2      	cmp	r2, r4
 8008474:	d3fb      	bcc.n	800846e <FillZerobss>
 8008476:	f7ff ffa5 	bl	80083c4 <SystemInit>
 800847a:	f000 f811 	bl	80084a0 <__libc_init_array>
 800847e:	f7fe fdb7 	bl	8006ff0 <main>

08008482 <LoopForever>:
 8008482:	e7fe      	b.n	8008482 <LoopForever>
 8008484:	20001fff 	.word	0x20001fff
 8008488:	20000000 	.word	0x20000000
 800848c:	20000698 	.word	0x20000698
 8008490:	08008aac 	.word	0x08008aac
 8008494:	20000698 	.word	0x20000698
 8008498:	200012bc 	.word	0x200012bc

0800849c <ADC1_IRQHandler>:
 800849c:	e7fe      	b.n	800849c <ADC1_IRQHandler>
	...

080084a0 <__libc_init_array>:
 80084a0:	b570      	push	{r4, r5, r6, lr}
 80084a2:	2600      	movs	r6, #0
 80084a4:	4d0c      	ldr	r5, [pc, #48]	; (80084d8 <__libc_init_array+0x38>)
 80084a6:	4c0d      	ldr	r4, [pc, #52]	; (80084dc <__libc_init_array+0x3c>)
 80084a8:	1b64      	subs	r4, r4, r5
 80084aa:	10a4      	asrs	r4, r4, #2
 80084ac:	42a6      	cmp	r6, r4
 80084ae:	d109      	bne.n	80084c4 <__libc_init_array+0x24>
 80084b0:	2600      	movs	r6, #0
 80084b2:	f000 f921 	bl	80086f8 <_init>
 80084b6:	4d0a      	ldr	r5, [pc, #40]	; (80084e0 <__libc_init_array+0x40>)
 80084b8:	4c0a      	ldr	r4, [pc, #40]	; (80084e4 <__libc_init_array+0x44>)
 80084ba:	1b64      	subs	r4, r4, r5
 80084bc:	10a4      	asrs	r4, r4, #2
 80084be:	42a6      	cmp	r6, r4
 80084c0:	d105      	bne.n	80084ce <__libc_init_array+0x2e>
 80084c2:	bd70      	pop	{r4, r5, r6, pc}
 80084c4:	00b3      	lsls	r3, r6, #2
 80084c6:	58eb      	ldr	r3, [r5, r3]
 80084c8:	4798      	blx	r3
 80084ca:	3601      	adds	r6, #1
 80084cc:	e7ee      	b.n	80084ac <__libc_init_array+0xc>
 80084ce:	00b3      	lsls	r3, r6, #2
 80084d0:	58eb      	ldr	r3, [r5, r3]
 80084d2:	4798      	blx	r3
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7f2      	b.n	80084be <__libc_init_array+0x1e>
 80084d8:	08008aa4 	.word	0x08008aa4
 80084dc:	08008aa4 	.word	0x08008aa4
 80084e0:	08008aa4 	.word	0x08008aa4
 80084e4:	08008aa8 	.word	0x08008aa8

080084e8 <memcpy>:
 80084e8:	2300      	movs	r3, #0
 80084ea:	b510      	push	{r4, lr}
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d100      	bne.n	80084f2 <memcpy+0xa>
 80084f0:	bd10      	pop	{r4, pc}
 80084f2:	5ccc      	ldrb	r4, [r1, r3]
 80084f4:	54c4      	strb	r4, [r0, r3]
 80084f6:	3301      	adds	r3, #1
 80084f8:	e7f8      	b.n	80084ec <memcpy+0x4>

080084fa <memset>:
 80084fa:	0003      	movs	r3, r0
 80084fc:	1882      	adds	r2, r0, r2
 80084fe:	4293      	cmp	r3, r2
 8008500:	d100      	bne.n	8008504 <memset+0xa>
 8008502:	4770      	bx	lr
 8008504:	7019      	strb	r1, [r3, #0]
 8008506:	3301      	adds	r3, #1
 8008508:	e7f9      	b.n	80084fe <memset+0x4>

0800850a <strcat>:
 800850a:	0002      	movs	r2, r0
 800850c:	b510      	push	{r4, lr}
 800850e:	7813      	ldrb	r3, [r2, #0]
 8008510:	0014      	movs	r4, r2
 8008512:	3201      	adds	r2, #1
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1fa      	bne.n	800850e <strcat+0x4>
 8008518:	5cca      	ldrb	r2, [r1, r3]
 800851a:	54e2      	strb	r2, [r4, r3]
 800851c:	3301      	adds	r3, #1
 800851e:	2a00      	cmp	r2, #0
 8008520:	d1fa      	bne.n	8008518 <strcat+0xe>
 8008522:	bd10      	pop	{r4, pc}

08008524 <strchr>:
 8008524:	b2c9      	uxtb	r1, r1
 8008526:	7803      	ldrb	r3, [r0, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d004      	beq.n	8008536 <strchr+0x12>
 800852c:	428b      	cmp	r3, r1
 800852e:	d100      	bne.n	8008532 <strchr+0xe>
 8008530:	4770      	bx	lr
 8008532:	3001      	adds	r0, #1
 8008534:	e7f7      	b.n	8008526 <strchr+0x2>
 8008536:	424b      	negs	r3, r1
 8008538:	4159      	adcs	r1, r3
 800853a:	4249      	negs	r1, r1
 800853c:	4008      	ands	r0, r1
 800853e:	e7f7      	b.n	8008530 <strchr+0xc>

08008540 <strcpy>:
 8008540:	0003      	movs	r3, r0
 8008542:	780a      	ldrb	r2, [r1, #0]
 8008544:	3101      	adds	r1, #1
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	3301      	adds	r3, #1
 800854a:	2a00      	cmp	r2, #0
 800854c:	d1f9      	bne.n	8008542 <strcpy+0x2>
 800854e:	4770      	bx	lr

08008550 <strncat>:
 8008550:	0003      	movs	r3, r0
 8008552:	b530      	push	{r4, r5, lr}
 8008554:	781c      	ldrb	r4, [r3, #0]
 8008556:	2c00      	cmp	r4, #0
 8008558:	d108      	bne.n	800856c <strncat+0x1c>
 800855a:	1889      	adds	r1, r1, r2
 800855c:	2a00      	cmp	r2, #0
 800855e:	d004      	beq.n	800856a <strncat+0x1a>
 8008560:	4255      	negs	r5, r2
 8008562:	5d4d      	ldrb	r5, [r1, r5]
 8008564:	701d      	strb	r5, [r3, #0]
 8008566:	2d00      	cmp	r5, #0
 8008568:	d102      	bne.n	8008570 <strncat+0x20>
 800856a:	bd30      	pop	{r4, r5, pc}
 800856c:	3301      	adds	r3, #1
 800856e:	e7f1      	b.n	8008554 <strncat+0x4>
 8008570:	2a01      	cmp	r2, #1
 8008572:	d100      	bne.n	8008576 <strncat+0x26>
 8008574:	705c      	strb	r4, [r3, #1]
 8008576:	3301      	adds	r3, #1
 8008578:	3a01      	subs	r2, #1
 800857a:	e7ef      	b.n	800855c <strncat+0xc>

0800857c <strncmp>:
 800857c:	b530      	push	{r4, r5, lr}
 800857e:	0005      	movs	r5, r0
 8008580:	1e10      	subs	r0, r2, #0
 8008582:	d00b      	beq.n	800859c <strncmp+0x20>
 8008584:	2400      	movs	r4, #0
 8008586:	3a01      	subs	r2, #1
 8008588:	5d2b      	ldrb	r3, [r5, r4]
 800858a:	5d08      	ldrb	r0, [r1, r4]
 800858c:	4283      	cmp	r3, r0
 800858e:	d104      	bne.n	800859a <strncmp+0x1e>
 8008590:	4294      	cmp	r4, r2
 8008592:	d002      	beq.n	800859a <strncmp+0x1e>
 8008594:	3401      	adds	r4, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f6      	bne.n	8008588 <strncmp+0xc>
 800859a:	1a18      	subs	r0, r3, r0
 800859c:	bd30      	pop	{r4, r5, pc}

0800859e <strncpy>:
 800859e:	0003      	movs	r3, r0
 80085a0:	b530      	push	{r4, r5, lr}
 80085a2:	001d      	movs	r5, r3
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	d006      	beq.n	80085b6 <strncpy+0x18>
 80085a8:	780c      	ldrb	r4, [r1, #0]
 80085aa:	3a01      	subs	r2, #1
 80085ac:	3301      	adds	r3, #1
 80085ae:	702c      	strb	r4, [r5, #0]
 80085b0:	3101      	adds	r1, #1
 80085b2:	2c00      	cmp	r4, #0
 80085b4:	d1f5      	bne.n	80085a2 <strncpy+0x4>
 80085b6:	2100      	movs	r1, #0
 80085b8:	189a      	adds	r2, r3, r2
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d100      	bne.n	80085c0 <strncpy+0x22>
 80085be:	bd30      	pop	{r4, r5, pc}
 80085c0:	7019      	strb	r1, [r3, #0]
 80085c2:	3301      	adds	r3, #1
 80085c4:	e7f9      	b.n	80085ba <strncpy+0x1c>

080085c6 <strnlen>:
 80085c6:	0003      	movs	r3, r0
 80085c8:	1841      	adds	r1, r0, r1
 80085ca:	428b      	cmp	r3, r1
 80085cc:	d101      	bne.n	80085d2 <strnlen+0xc>
 80085ce:	1a18      	subs	r0, r3, r0
 80085d0:	4770      	bx	lr
 80085d2:	781a      	ldrb	r2, [r3, #0]
 80085d4:	2a00      	cmp	r2, #0
 80085d6:	d0fa      	beq.n	80085ce <strnlen+0x8>
 80085d8:	3301      	adds	r3, #1
 80085da:	e7f6      	b.n	80085ca <strnlen+0x4>

080085dc <strnstr>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	000e      	movs	r6, r1
 80085e0:	0005      	movs	r5, r0
 80085e2:	0011      	movs	r1, r2
 80085e4:	0030      	movs	r0, r6
 80085e6:	0014      	movs	r4, r2
 80085e8:	f7ff ffed 	bl	80085c6 <strnlen>
 80085ec:	0003      	movs	r3, r0
 80085ee:	4284      	cmp	r4, r0
 80085f0:	d805      	bhi.n	80085fe <strnstr+0x22>
 80085f2:	5c32      	ldrb	r2, [r6, r0]
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	d002      	beq.n	80085fe <strnstr+0x22>
 80085f8:	2400      	movs	r4, #0
 80085fa:	0020      	movs	r0, r4
 80085fc:	bd70      	pop	{r4, r5, r6, pc}
 80085fe:	0021      	movs	r1, r4
 8008600:	0032      	movs	r2, r6
 8008602:	0028      	movs	r0, r5
 8008604:	f000 f85f 	bl	80086c6 <memmem>
 8008608:	1e04      	subs	r4, r0, #0
 800860a:	d0f5      	beq.n	80085f8 <strnstr+0x1c>
 800860c:	1b42      	subs	r2, r0, r5
 800860e:	2100      	movs	r1, #0
 8008610:	0028      	movs	r0, r5
 8008612:	f000 f84d 	bl	80086b0 <memchr>
 8008616:	2800      	cmp	r0, #0
 8008618:	d1ee      	bne.n	80085f8 <strnstr+0x1c>
 800861a:	e7ee      	b.n	80085fa <strnstr+0x1e>

0800861c <strstr>:
 800861c:	780a      	ldrb	r2, [r1, #0]
 800861e:	b530      	push	{r4, r5, lr}
 8008620:	2a00      	cmp	r2, #0
 8008622:	d10c      	bne.n	800863e <strstr+0x22>
 8008624:	bd30      	pop	{r4, r5, pc}
 8008626:	429a      	cmp	r2, r3
 8008628:	d108      	bne.n	800863c <strstr+0x20>
 800862a:	2301      	movs	r3, #1
 800862c:	5ccc      	ldrb	r4, [r1, r3]
 800862e:	2c00      	cmp	r4, #0
 8008630:	d0f8      	beq.n	8008624 <strstr+0x8>
 8008632:	5cc5      	ldrb	r5, [r0, r3]
 8008634:	42a5      	cmp	r5, r4
 8008636:	d101      	bne.n	800863c <strstr+0x20>
 8008638:	3301      	adds	r3, #1
 800863a:	e7f7      	b.n	800862c <strstr+0x10>
 800863c:	3001      	adds	r0, #1
 800863e:	7803      	ldrb	r3, [r0, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f0      	bne.n	8008626 <strstr+0xa>
 8008644:	0018      	movs	r0, r3
 8008646:	e7ed      	b.n	8008624 <strstr+0x8>

08008648 <__strtok_r>:
 8008648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864a:	2800      	cmp	r0, #0
 800864c:	d102      	bne.n	8008654 <__strtok_r+0xc>
 800864e:	6810      	ldr	r0, [r2, #0]
 8008650:	2800      	cmp	r0, #0
 8008652:	d013      	beq.n	800867c <__strtok_r+0x34>
 8008654:	0004      	movs	r4, r0
 8008656:	0020      	movs	r0, r4
 8008658:	000e      	movs	r6, r1
 800865a:	7805      	ldrb	r5, [r0, #0]
 800865c:	3401      	adds	r4, #1
 800865e:	7837      	ldrb	r7, [r6, #0]
 8008660:	2f00      	cmp	r7, #0
 8008662:	d104      	bne.n	800866e <__strtok_r+0x26>
 8008664:	2d00      	cmp	r5, #0
 8008666:	d10f      	bne.n	8008688 <__strtok_r+0x40>
 8008668:	0028      	movs	r0, r5
 800866a:	6015      	str	r5, [r2, #0]
 800866c:	e006      	b.n	800867c <__strtok_r+0x34>
 800866e:	3601      	adds	r6, #1
 8008670:	42bd      	cmp	r5, r7
 8008672:	d1f4      	bne.n	800865e <__strtok_r+0x16>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ee      	bne.n	8008656 <__strtok_r+0xe>
 8008678:	6014      	str	r4, [r2, #0]
 800867a:	7003      	strb	r3, [r0, #0]
 800867c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867e:	002f      	movs	r7, r5
 8008680:	e00f      	b.n	80086a2 <__strtok_r+0x5a>
 8008682:	3301      	adds	r3, #1
 8008684:	2e00      	cmp	r6, #0
 8008686:	d104      	bne.n	8008692 <__strtok_r+0x4a>
 8008688:	0023      	movs	r3, r4
 800868a:	3401      	adds	r4, #1
 800868c:	781d      	ldrb	r5, [r3, #0]
 800868e:	0027      	movs	r7, r4
 8008690:	000b      	movs	r3, r1
 8008692:	781e      	ldrb	r6, [r3, #0]
 8008694:	42b5      	cmp	r5, r6
 8008696:	d1f4      	bne.n	8008682 <__strtok_r+0x3a>
 8008698:	2d00      	cmp	r5, #0
 800869a:	d0f0      	beq.n	800867e <__strtok_r+0x36>
 800869c:	2300      	movs	r3, #0
 800869e:	3c01      	subs	r4, #1
 80086a0:	7023      	strb	r3, [r4, #0]
 80086a2:	6017      	str	r7, [r2, #0]
 80086a4:	e7ea      	b.n	800867c <__strtok_r+0x34>

080086a6 <strtok_r>:
 80086a6:	b510      	push	{r4, lr}
 80086a8:	2301      	movs	r3, #1
 80086aa:	f7ff ffcd 	bl	8008648 <__strtok_r>
 80086ae:	bd10      	pop	{r4, pc}

080086b0 <memchr>:
 80086b0:	b2c9      	uxtb	r1, r1
 80086b2:	1882      	adds	r2, r0, r2
 80086b4:	4290      	cmp	r0, r2
 80086b6:	d101      	bne.n	80086bc <memchr+0xc>
 80086b8:	2000      	movs	r0, #0
 80086ba:	4770      	bx	lr
 80086bc:	7803      	ldrb	r3, [r0, #0]
 80086be:	428b      	cmp	r3, r1
 80086c0:	d0fb      	beq.n	80086ba <memchr+0xa>
 80086c2:	3001      	adds	r0, #1
 80086c4:	e7f6      	b.n	80086b4 <memchr+0x4>

080086c6 <memmem>:
 80086c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <memmem+0x20>
 80086cc:	1ac9      	subs	r1, r1, r3
 80086ce:	7815      	ldrb	r5, [r2, #0]
 80086d0:	1841      	adds	r1, r0, r1
 80086d2:	4288      	cmp	r0, r1
 80086d4:	d901      	bls.n	80086da <memmem+0x14>
 80086d6:	2000      	movs	r0, #0
 80086d8:	e005      	b.n	80086e6 <memmem+0x20>
 80086da:	7804      	ldrb	r4, [r0, #0]
 80086dc:	42ac      	cmp	r4, r5
 80086de:	d109      	bne.n	80086f4 <memmem+0x2e>
 80086e0:	1e5c      	subs	r4, r3, #1
 80086e2:	2c00      	cmp	r4, #0
 80086e4:	d100      	bne.n	80086e8 <memmem+0x22>
 80086e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e8:	5d07      	ldrb	r7, [r0, r4]
 80086ea:	5d16      	ldrb	r6, [r2, r4]
 80086ec:	42b7      	cmp	r7, r6
 80086ee:	d101      	bne.n	80086f4 <memmem+0x2e>
 80086f0:	3c01      	subs	r4, #1
 80086f2:	e7f6      	b.n	80086e2 <memmem+0x1c>
 80086f4:	3001      	adds	r0, #1
 80086f6:	e7ec      	b.n	80086d2 <memmem+0xc>

080086f8 <_init>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	46c0      	nop			; (mov r8, r8)
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr

08008704 <_fini>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	46c0      	nop			; (mov r8, r8)
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr
