
Antenna Switch 6x2 New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000669c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800675c  0800675c  0001675c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a3c  08006a3c  000208d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006a3c  08006a3c  000208d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a3c  08006a3c  000208d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a3c  08006a3c  00016a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000008d8  20000000  08006a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  200008d8  0800731c  000208d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000196c  0800731c  0002196c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000208d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c222  00000000  00000000  00020900  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038f1  00000000  00000000  0003cb22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00040418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  00041100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010b8e  00000000  00000000  00041c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f895  00000000  00000000  0005281e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00047a1d  00000000  00000000  000620b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a9ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f6c  00000000  00000000  000a9b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200008d8 	.word	0x200008d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006744 	.word	0x08006744

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200008dc 	.word	0x200008dc
 8000104:	08006744 	.word	0x08006744

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <HAL_Init+0x24>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <HAL_Init+0x24>)
 800024e:	2110      	movs	r1, #16
 8000250:	430a      	orrs	r2, r1
 8000252:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000254:	2000      	movs	r0, #0
 8000256:	f000 f809 	bl	800026c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800025a:	f005 ff15 	bl	8006088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800025e:	2300      	movs	r3, #0
}
 8000260:	0018      	movs	r0, r3
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	40022000 	.word	0x40022000

0800026c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000274:	f001 f92a 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 8000278:	0002      	movs	r2, r0
 800027a:	23fa      	movs	r3, #250	; 0xfa
 800027c:	0099      	lsls	r1, r3, #2
 800027e:	0010      	movs	r0, r2
 8000280:	f7ff ff54 	bl	800012c <__udivsi3>
 8000284:	0003      	movs	r3, r0
 8000286:	0018      	movs	r0, r3
 8000288:	f000 f8c9 	bl	800041e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	2301      	movs	r3, #1
 8000290:	425b      	negs	r3, r3
 8000292:	2200      	movs	r2, #0
 8000294:	0018      	movs	r0, r3
 8000296:	f000 f8ad 	bl	80003f4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800029a:	2300      	movs	r3, #0
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	b002      	add	sp, #8
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  uwTick++;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <HAL_IncTick+0x14>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	1c5a      	adds	r2, r3, #1
 80002ae:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <HAL_IncTick+0x14>)
 80002b0:	601a      	str	r2, [r3, #0]
}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20001540 	.word	0x20001540

080002bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  return uwTick;
 80002c0:	4b02      	ldr	r3, [pc, #8]	; (80002cc <HAL_GetTick+0x10>)
 80002c2:	681b      	ldr	r3, [r3, #0]
}
 80002c4:	0018      	movs	r0, r3
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	20001540 	.word	0x20001540

080002d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	0002      	movs	r2, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002de:	1dfb      	adds	r3, r7, #7
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b7f      	cmp	r3, #127	; 0x7f
 80002e4:	d932      	bls.n	800034c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	4a2f      	ldr	r2, [pc, #188]	; (80003a4 <NVIC_SetPriority+0xd4>)
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	0019      	movs	r1, r3
 80002ee:	230f      	movs	r3, #15
 80002f0:	400b      	ands	r3, r1
 80002f2:	3b08      	subs	r3, #8
 80002f4:	089b      	lsrs	r3, r3, #2
 80002f6:	3306      	adds	r3, #6
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	18d3      	adds	r3, r2, r3
 80002fc:	3304      	adds	r3, #4
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1dfa      	adds	r2, r7, #7
 8000302:	7812      	ldrb	r2, [r2, #0]
 8000304:	0011      	movs	r1, r2
 8000306:	2203      	movs	r2, #3
 8000308:	400a      	ands	r2, r1
 800030a:	00d2      	lsls	r2, r2, #3
 800030c:	21ff      	movs	r1, #255	; 0xff
 800030e:	4091      	lsls	r1, r2
 8000310:	000a      	movs	r2, r1
 8000312:	43d2      	mvns	r2, r2
 8000314:	401a      	ands	r2, r3
 8000316:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	019b      	lsls	r3, r3, #6
 800031c:	22ff      	movs	r2, #255	; 0xff
 800031e:	401a      	ands	r2, r3
 8000320:	1dfb      	adds	r3, r7, #7
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	0018      	movs	r0, r3
 8000326:	2303      	movs	r3, #3
 8000328:	4003      	ands	r3, r0
 800032a:	00db      	lsls	r3, r3, #3
 800032c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032e:	481d      	ldr	r0, [pc, #116]	; (80003a4 <NVIC_SetPriority+0xd4>)
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	001c      	movs	r4, r3
 8000336:	230f      	movs	r3, #15
 8000338:	4023      	ands	r3, r4
 800033a:	3b08      	subs	r3, #8
 800033c:	089b      	lsrs	r3, r3, #2
 800033e:	430a      	orrs	r2, r1
 8000340:	3306      	adds	r3, #6
 8000342:	009b      	lsls	r3, r3, #2
 8000344:	18c3      	adds	r3, r0, r3
 8000346:	3304      	adds	r3, #4
 8000348:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800034a:	e027      	b.n	800039c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034c:	4a16      	ldr	r2, [pc, #88]	; (80003a8 <NVIC_SetPriority+0xd8>)
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	b25b      	sxtb	r3, r3
 8000354:	089b      	lsrs	r3, r3, #2
 8000356:	33c0      	adds	r3, #192	; 0xc0
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	589b      	ldr	r3, [r3, r2]
 800035c:	1dfa      	adds	r2, r7, #7
 800035e:	7812      	ldrb	r2, [r2, #0]
 8000360:	0011      	movs	r1, r2
 8000362:	2203      	movs	r2, #3
 8000364:	400a      	ands	r2, r1
 8000366:	00d2      	lsls	r2, r2, #3
 8000368:	21ff      	movs	r1, #255	; 0xff
 800036a:	4091      	lsls	r1, r2
 800036c:	000a      	movs	r2, r1
 800036e:	43d2      	mvns	r2, r2
 8000370:	401a      	ands	r2, r3
 8000372:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	019b      	lsls	r3, r3, #6
 8000378:	22ff      	movs	r2, #255	; 0xff
 800037a:	401a      	ands	r2, r3
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	0018      	movs	r0, r3
 8000382:	2303      	movs	r3, #3
 8000384:	4003      	ands	r3, r0
 8000386:	00db      	lsls	r3, r3, #3
 8000388:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <NVIC_SetPriority+0xd8>)
 800038c:	1dfb      	adds	r3, r7, #7
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	b25b      	sxtb	r3, r3
 8000392:	089b      	lsrs	r3, r3, #2
 8000394:	430a      	orrs	r2, r1
 8000396:	33c0      	adds	r3, #192	; 0xc0
 8000398:	009b      	lsls	r3, r3, #2
 800039a:	501a      	str	r2, [r3, r0]
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b003      	add	sp, #12
 80003a2:	bd90      	pop	{r4, r7, pc}
 80003a4:	e000ed00 	.word	0xe000ed00
 80003a8:	e000e100 	.word	0xe000e100

080003ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	4a0c      	ldr	r2, [pc, #48]	; (80003ec <SysTick_Config+0x40>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d901      	bls.n	80003c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003be:	2301      	movs	r3, #1
 80003c0:	e010      	b.n	80003e4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c2:	4b0b      	ldr	r3, [pc, #44]	; (80003f0 <SysTick_Config+0x44>)
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	3a01      	subs	r2, #1
 80003c8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003ca:	2301      	movs	r3, #1
 80003cc:	425b      	negs	r3, r3
 80003ce:	2103      	movs	r1, #3
 80003d0:	0018      	movs	r0, r3
 80003d2:	f7ff ff7d 	bl	80002d0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <SysTick_Config+0x44>)
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <SysTick_Config+0x44>)
 80003de:	2207      	movs	r2, #7
 80003e0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e2:	2300      	movs	r3, #0
}
 80003e4:	0018      	movs	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	b002      	add	sp, #8
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	00ffffff 	.word	0x00ffffff
 80003f0:	e000e010 	.word	0xe000e010

080003f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60b9      	str	r1, [r7, #8]
 80003fc:	607a      	str	r2, [r7, #4]
 80003fe:	210f      	movs	r1, #15
 8000400:	187b      	adds	r3, r7, r1
 8000402:	1c02      	adds	r2, r0, #0
 8000404:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000406:	68ba      	ldr	r2, [r7, #8]
 8000408:	187b      	adds	r3, r7, r1
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	b25b      	sxtb	r3, r3
 800040e:	0011      	movs	r1, r2
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ff5d 	bl	80002d0 <NVIC_SetPriority>
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b004      	add	sp, #16
 800041c:	bd80      	pop	{r7, pc}

0800041e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b082      	sub	sp, #8
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	0018      	movs	r0, r3
 800042a:	f7ff ffbf 	bl	80003ac <SysTick_Config>
 800042e:	0003      	movs	r3, r0
}
 8000430:	0018      	movs	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b087      	sub	sp, #28
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	603a      	str	r2, [r7, #0]
 8000444:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000446:	2317      	movs	r3, #23
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	2201      	movs	r2, #1
 800044c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800044e:	2316      	movs	r3, #22
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000456:	2315      	movs	r3, #21
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800045e:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <HAL_FLASH_Program+0x120>)
 8000460:	7e1b      	ldrb	r3, [r3, #24]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d101      	bne.n	800046a <HAL_FLASH_Program+0x32>
 8000466:	2302      	movs	r3, #2
 8000468:	e072      	b.n	8000550 <HAL_FLASH_Program+0x118>
 800046a:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <HAL_FLASH_Program+0x120>)
 800046c:	2201      	movs	r2, #1
 800046e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000470:	2317      	movs	r3, #23
 8000472:	18fe      	adds	r6, r7, r3
 8000474:	4b39      	ldr	r3, [pc, #228]	; (800055c <HAL_FLASH_Program+0x124>)
 8000476:	0018      	movs	r0, r3
 8000478:	f000 f8c4 	bl	8000604 <FLASH_WaitForLastOperation>
 800047c:	0003      	movs	r3, r0
 800047e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000480:	2317      	movs	r3, #23
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d15c      	bne.n	8000544 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d104      	bne.n	800049a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000490:	2315      	movs	r3, #21
 8000492:	18fb      	adds	r3, r7, r3
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
 8000498:	e00b      	b.n	80004b2 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	2b02      	cmp	r3, #2
 800049e:	d104      	bne.n	80004aa <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80004a0:	2315      	movs	r3, #21
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	2202      	movs	r2, #2
 80004a6:	701a      	strb	r2, [r3, #0]
 80004a8:	e003      	b.n	80004b2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80004aa:	2315      	movs	r3, #21
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	2204      	movs	r2, #4
 80004b0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80004b2:	2316      	movs	r3, #22
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
 80004ba:	e039      	b.n	8000530 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80004bc:	2116      	movs	r1, #22
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	005a      	lsls	r2, r3, #1
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	18d0      	adds	r0, r2, r3
 80004c8:	187b      	adds	r3, r7, r1
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	001a      	movs	r2, r3
 80004d0:	3a20      	subs	r2, #32
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	db03      	blt.n	80004de <HAL_FLASH_Program+0xa6>
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	40d1      	lsrs	r1, r2
 80004da:	000c      	movs	r4, r1
 80004dc:	e008      	b.n	80004f0 <HAL_FLASH_Program+0xb8>
 80004de:	2220      	movs	r2, #32
 80004e0:	1ad2      	subs	r2, r2, r3
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	4091      	lsls	r1, r2
 80004e6:	000a      	movs	r2, r1
 80004e8:	6839      	ldr	r1, [r7, #0]
 80004ea:	40d9      	lsrs	r1, r3
 80004ec:	000c      	movs	r4, r1
 80004ee:	4314      	orrs	r4, r2
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	40da      	lsrs	r2, r3
 80004f4:	0015      	movs	r5, r2
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	0019      	movs	r1, r3
 80004fa:	f000 f867 	bl	80005cc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80004fe:	2317      	movs	r3, #23
 8000500:	18fe      	adds	r6, r7, r3
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <HAL_FLASH_Program+0x124>)
 8000504:	0018      	movs	r0, r3
 8000506:	f000 f87d 	bl	8000604 <FLASH_WaitForLastOperation>
 800050a:	0003      	movs	r3, r0
 800050c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_FLASH_Program+0x128>)
 8000510:	691a      	ldr	r2, [r3, #16]
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <HAL_FLASH_Program+0x128>)
 8000514:	2101      	movs	r1, #1
 8000516:	438a      	bics	r2, r1
 8000518:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800051a:	2317      	movs	r3, #23
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d10e      	bne.n	8000542 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000524:	2116      	movs	r1, #22
 8000526:	187b      	adds	r3, r7, r1
 8000528:	781a      	ldrb	r2, [r3, #0]
 800052a:	187b      	adds	r3, r7, r1
 800052c:	3201      	adds	r2, #1
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	2316      	movs	r3, #22
 8000532:	18fa      	adds	r2, r7, r3
 8000534:	2315      	movs	r3, #21
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3bd      	bcc.n	80004bc <HAL_FLASH_Program+0x84>
 8000540:	e000      	b.n	8000544 <HAL_FLASH_Program+0x10c>
      {
        break;
 8000542:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_FLASH_Program+0x120>)
 8000546:	2200      	movs	r2, #0
 8000548:	761a      	strb	r2, [r3, #24]

  return status;
 800054a:	2317      	movs	r3, #23
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	781b      	ldrb	r3, [r3, #0]
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b007      	add	sp, #28
 8000556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000558:	20001548 	.word	0x20001548
 800055c:	0000c350 	.word	0x0000c350
 8000560:	40022000 	.word	0x40022000

08000564 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800056a:	1dfb      	adds	r3, r7, #7
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <HAL_FLASH_Unlock+0x40>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	4013      	ands	r3, r2
 8000578:	d00d      	beq.n	8000596 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800057a:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <HAL_FLASH_Unlock+0x40>)
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <HAL_FLASH_Unlock+0x44>)
 800057e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <HAL_FLASH_Unlock+0x40>)
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <HAL_FLASH_Unlock+0x48>)
 8000584:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000586:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <HAL_FLASH_Unlock+0x40>)
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	4013      	ands	r3, r2
 800058e:	d002      	beq.n	8000596 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	2201      	movs	r2, #1
 8000594:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40022000 	.word	0x40022000
 80005a8:	45670123 	.word	0x45670123
 80005ac:	cdef89ab 	.word	0xcdef89ab

080005b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <HAL_FLASH_Lock+0x18>)
 80005b6:	691a      	ldr	r2, [r3, #16]
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <HAL_FLASH_Lock+0x18>)
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	430a      	orrs	r2, r1
 80005be:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40022000 	.word	0x40022000

080005cc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	000a      	movs	r2, r1
 80005d6:	1cbb      	adds	r3, r7, #2
 80005d8:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <FLASH_Program_HalfWord+0x30>)
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <FLASH_Program_HalfWord+0x34>)
 80005e2:	691a      	ldr	r2, [r3, #16]
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <FLASH_Program_HalfWord+0x34>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	1cba      	adds	r2, r7, #2
 80005f0:	8812      	ldrh	r2, [r2, #0]
 80005f2:	801a      	strh	r2, [r3, #0]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	b002      	add	sp, #8
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20001548 	.word	0x20001548
 8000600:	40022000 	.word	0x40022000

08000604 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800060c:	f7ff fe56 	bl	80002bc <HAL_GetTick>
 8000610:	0003      	movs	r3, r0
 8000612:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000614:	e00f      	b.n	8000636 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	3301      	adds	r3, #1
 800061a:	d00c      	beq.n	8000636 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d007      	beq.n	8000632 <FLASH_WaitForLastOperation+0x2e>
 8000622:	f7ff fe4b 	bl	80002bc <HAL_GetTick>
 8000626:	0002      	movs	r2, r0
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	429a      	cmp	r2, r3
 8000630:	d201      	bcs.n	8000636 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000632:	2303      	movs	r3, #3
 8000634:	e01f      	b.n	8000676 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000636:	4b12      	ldr	r3, [pc, #72]	; (8000680 <FLASH_WaitForLastOperation+0x7c>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	2201      	movs	r2, #1
 800063c:	4013      	ands	r3, r2
 800063e:	2b01      	cmp	r3, #1
 8000640:	d0e9      	beq.n	8000616 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <FLASH_WaitForLastOperation+0x7c>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	2220      	movs	r2, #32
 8000648:	4013      	ands	r3, r2
 800064a:	2b20      	cmp	r3, #32
 800064c:	d102      	bne.n	8000654 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <FLASH_WaitForLastOperation+0x7c>)
 8000650:	2220      	movs	r2, #32
 8000652:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <FLASH_WaitForLastOperation+0x7c>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	2210      	movs	r2, #16
 800065a:	4013      	ands	r3, r2
 800065c:	2b10      	cmp	r3, #16
 800065e:	d005      	beq.n	800066c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <FLASH_WaitForLastOperation+0x7c>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	2204      	movs	r2, #4
 8000666:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000668:	2b04      	cmp	r3, #4
 800066a:	d103      	bne.n	8000674 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800066c:	f000 f80a 	bl	8000684 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000670:	2301      	movs	r3, #1
 8000672:	e000      	b.n	8000676 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000674:	2300      	movs	r3, #0
}
 8000676:	0018      	movs	r0, r3
 8000678:	46bd      	mov	sp, r7
 800067a:	b004      	add	sp, #16
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	40022000 	.word	0x40022000

08000684 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <FLASH_SetErrorCode+0x58>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	2210      	movs	r2, #16
 8000694:	4013      	ands	r3, r2
 8000696:	2b10      	cmp	r3, #16
 8000698:	d109      	bne.n	80006ae <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <FLASH_SetErrorCode+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	2202      	movs	r2, #2
 80006a0:	431a      	orrs	r2, r3
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <FLASH_SetErrorCode+0x5c>)
 80006a4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2210      	movs	r2, #16
 80006aa:	4313      	orrs	r3, r2
 80006ac:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <FLASH_SetErrorCode+0x58>)
 80006b0:	68db      	ldr	r3, [r3, #12]
 80006b2:	2204      	movs	r2, #4
 80006b4:	4013      	ands	r3, r2
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	d109      	bne.n	80006ce <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <FLASH_SetErrorCode+0x5c>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	2201      	movs	r2, #1
 80006c0:	431a      	orrs	r2, r3
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <FLASH_SetErrorCode+0x5c>)
 80006c4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2204      	movs	r2, #4
 80006ca:	4313      	orrs	r3, r2
 80006cc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80006ce:	4b03      	ldr	r3, [pc, #12]	; (80006dc <FLASH_SetErrorCode+0x58>)
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]
}  
 80006d4:	46c0      	nop			; (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40022000 	.word	0x40022000
 80006e0:	20001548 	.word	0x20001548

080006e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80006ee:	230f      	movs	r3, #15
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <HAL_FLASHEx_Erase+0xe0>)
 80006fc:	7e1b      	ldrb	r3, [r3, #24]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d101      	bne.n	8000706 <HAL_FLASHEx_Erase+0x22>
 8000702:	2302      	movs	r3, #2
 8000704:	e05a      	b.n	80007bc <HAL_FLASHEx_Erase+0xd8>
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <HAL_FLASHEx_Erase+0xe0>)
 8000708:	2201      	movs	r2, #1
 800070a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d116      	bne.n	8000742 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000714:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <HAL_FLASHEx_Erase+0xe4>)
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ff74 	bl	8000604 <FLASH_WaitForLastOperation>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d147      	bne.n	80007b0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000720:	f000 f856 	bl	80007d0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000724:	230f      	movs	r3, #15
 8000726:	18fc      	adds	r4, r7, r3
 8000728:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <HAL_FLASHEx_Erase+0xe4>)
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff6a 	bl	8000604 <FLASH_WaitForLastOperation>
 8000730:	0003      	movs	r3, r0
 8000732:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <HAL_FLASHEx_Erase+0xe8>)
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	4b24      	ldr	r3, [pc, #144]	; (80007cc <HAL_FLASHEx_Erase+0xe8>)
 800073a:	2104      	movs	r1, #4
 800073c:	438a      	bics	r2, r1
 800073e:	611a      	str	r2, [r3, #16]
 8000740:	e036      	b.n	80007b0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <HAL_FLASHEx_Erase+0xe4>)
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff5d 	bl	8000604 <FLASH_WaitForLastOperation>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d130      	bne.n	80007b0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2201      	movs	r2, #1
 8000752:	4252      	negs	r2, r2
 8000754:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	e01f      	b.n	800079e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	0018      	movs	r0, r3
 8000762:	f000 f84d 	bl	8000800 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000766:	250f      	movs	r5, #15
 8000768:	197c      	adds	r4, r7, r5
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <HAL_FLASHEx_Erase+0xe4>)
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ff49 	bl	8000604 <FLASH_WaitForLastOperation>
 8000772:	0003      	movs	r3, r0
 8000774:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_FLASHEx_Erase+0xe8>)
 8000778:	691a      	ldr	r2, [r3, #16]
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_FLASHEx_Erase+0xe8>)
 800077c:	2102      	movs	r1, #2
 800077e:	438a      	bics	r2, r1
 8000780:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000782:	197b      	adds	r3, r7, r5
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d003      	beq.n	8000792 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	601a      	str	r2, [r3, #0]
            break;
 8000790:	e00e      	b.n	80007b0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	00d2      	lsls	r2, r2, #3
 8000798:	4694      	mov	ip, r2
 800079a:	4463      	add	r3, ip
 800079c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	029a      	lsls	r2, r3, #10
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d3d6      	bcc.n	800075e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_FLASHEx_Erase+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	761a      	strb	r2, [r3, #24]

  return status;
 80007b6:	230f      	movs	r3, #15
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	781b      	ldrb	r3, [r3, #0]
}
 80007bc:	0018      	movs	r0, r3
 80007be:	46bd      	mov	sp, r7
 80007c0:	b004      	add	sp, #16
 80007c2:	bdb0      	pop	{r4, r5, r7, pc}
 80007c4:	20001548 	.word	0x20001548
 80007c8:	0000c350 	.word	0x0000c350
 80007cc:	40022000 	.word	0x40022000

080007d0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <FLASH_MassErase+0x28>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <FLASH_MassErase+0x2c>)
 80007dc:	691a      	ldr	r2, [r3, #16]
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <FLASH_MassErase+0x2c>)
 80007e0:	2104      	movs	r1, #4
 80007e2:	430a      	orrs	r2, r1
 80007e4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80007e6:	4b05      	ldr	r3, [pc, #20]	; (80007fc <FLASH_MassErase+0x2c>)
 80007e8:	691a      	ldr	r2, [r3, #16]
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <FLASH_MassErase+0x2c>)
 80007ec:	2140      	movs	r1, #64	; 0x40
 80007ee:	430a      	orrs	r2, r1
 80007f0:	611a      	str	r2, [r3, #16]
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20001548 	.word	0x20001548
 80007fc:	40022000 	.word	0x40022000

08000800 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <FLASH_PageErase+0x34>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <FLASH_PageErase+0x38>)
 8000810:	691a      	ldr	r2, [r3, #16]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <FLASH_PageErase+0x38>)
 8000814:	2102      	movs	r1, #2
 8000816:	430a      	orrs	r2, r1
 8000818:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800081a:	4b07      	ldr	r3, [pc, #28]	; (8000838 <FLASH_PageErase+0x38>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <FLASH_PageErase+0x38>)
 8000822:	691a      	ldr	r2, [r3, #16]
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <FLASH_PageErase+0x38>)
 8000826:	2140      	movs	r1, #64	; 0x40
 8000828:	430a      	orrs	r2, r1
 800082a:	611a      	str	r2, [r3, #16]
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20001548 	.word	0x20001548
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000852:	e14f      	b.n	8000af4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2101      	movs	r1, #1
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	4091      	lsls	r1, r2
 800085e:	000a      	movs	r2, r1
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d100      	bne.n	800086c <HAL_GPIO_Init+0x30>
 800086a:	e140      	b.n	8000aee <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d003      	beq.n	800087c <HAL_GPIO_Init+0x40>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	2b12      	cmp	r3, #18
 800087a:	d123      	bne.n	80008c4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	08da      	lsrs	r2, r3, #3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3208      	adds	r2, #8
 8000884:	0092      	lsls	r2, r2, #2
 8000886:	58d3      	ldr	r3, [r2, r3]
 8000888:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	2207      	movs	r2, #7
 800088e:	4013      	ands	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	220f      	movs	r2, #15
 8000894:	409a      	lsls	r2, r3
 8000896:	0013      	movs	r3, r2
 8000898:	43da      	mvns	r2, r3
 800089a:	693b      	ldr	r3, [r7, #16]
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	2107      	movs	r1, #7
 80008a8:	400b      	ands	r3, r1
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	409a      	lsls	r2, r3
 80008ae:	0013      	movs	r3, r2
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	08da      	lsrs	r2, r3, #3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3208      	adds	r2, #8
 80008be:	0092      	lsls	r2, r2, #2
 80008c0:	6939      	ldr	r1, [r7, #16]
 80008c2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2203      	movs	r2, #3
 80008d0:	409a      	lsls	r2, r3
 80008d2:	0013      	movs	r3, r2
 80008d4:	43da      	mvns	r2, r3
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	2203      	movs	r2, #3
 80008e2:	401a      	ands	r2, r3
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	409a      	lsls	r2, r3
 80008ea:	0013      	movs	r3, r2
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d00b      	beq.n	8000918 <HAL_GPIO_Init+0xdc>
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d007      	beq.n	8000918 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090c:	2b11      	cmp	r3, #17
 800090e:	d003      	beq.n	8000918 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	2b12      	cmp	r3, #18
 8000916:	d130      	bne.n	800097a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	689b      	ldr	r3, [r3, #8]
 800091c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	409a      	lsls	r2, r3
 8000926:	0013      	movs	r3, r2
 8000928:	43da      	mvns	r2, r3
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	409a      	lsls	r2, r3
 800093a:	0013      	movs	r3, r2
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800094e:	2201      	movs	r2, #1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	43da      	mvns	r2, r3
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	2201      	movs	r2, #1
 8000966:	401a      	ands	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	409a      	lsls	r2, r3
 800096c:	0013      	movs	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	68db      	ldr	r3, [r3, #12]
 800097e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	2203      	movs	r2, #3
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	43da      	mvns	r2, r3
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	689a      	ldr	r2, [r3, #8]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	409a      	lsls	r2, r3
 800099c:	0013      	movs	r3, r2
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	055b      	lsls	r3, r3, #21
 80009b2:	4013      	ands	r3, r2
 80009b4:	d100      	bne.n	80009b8 <HAL_GPIO_Init+0x17c>
 80009b6:	e09a      	b.n	8000aee <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b8:	4b54      	ldr	r3, [pc, #336]	; (8000b0c <HAL_GPIO_Init+0x2d0>)
 80009ba:	699a      	ldr	r2, [r3, #24]
 80009bc:	4b53      	ldr	r3, [pc, #332]	; (8000b0c <HAL_GPIO_Init+0x2d0>)
 80009be:	2101      	movs	r1, #1
 80009c0:	430a      	orrs	r2, r1
 80009c2:	619a      	str	r2, [r3, #24]
 80009c4:	4b51      	ldr	r3, [pc, #324]	; (8000b0c <HAL_GPIO_Init+0x2d0>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80009d0:	4a4f      	ldr	r2, [pc, #316]	; (8000b10 <HAL_GPIO_Init+0x2d4>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	589b      	ldr	r3, [r3, r2]
 80009dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	2203      	movs	r2, #3
 80009e2:	4013      	ands	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	409a      	lsls	r2, r3
 80009ea:	0013      	movs	r3, r2
 80009ec:	43da      	mvns	r2, r3
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	2390      	movs	r3, #144	; 0x90
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_Init+0x1ea>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_GPIO_Init+0x2d8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d00d      	beq.n	8000a22 <HAL_GPIO_Init+0x1e6>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a43      	ldr	r2, [pc, #268]	; (8000b18 <HAL_GPIO_Init+0x2dc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d007      	beq.n	8000a1e <HAL_GPIO_Init+0x1e2>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a42      	ldr	r2, [pc, #264]	; (8000b1c <HAL_GPIO_Init+0x2e0>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d101      	bne.n	8000a1a <HAL_GPIO_Init+0x1de>
 8000a16:	2303      	movs	r3, #3
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x1ec>
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e004      	b.n	8000a28 <HAL_GPIO_Init+0x1ec>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e002      	b.n	8000a28 <HAL_GPIO_Init+0x1ec>
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <HAL_GPIO_Init+0x1ec>
 8000a26:	2300      	movs	r3, #0
 8000a28:	697a      	ldr	r2, [r7, #20]
 8000a2a:	2103      	movs	r1, #3
 8000a2c:	400a      	ands	r2, r1
 8000a2e:	0092      	lsls	r2, r2, #2
 8000a30:	4093      	lsls	r3, r2
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a38:	4935      	ldr	r1, [pc, #212]	; (8000b10 <HAL_GPIO_Init+0x2d4>)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	3302      	adds	r3, #2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	025b      	lsls	r3, r3, #9
 8000a5e:	4013      	ands	r3, r2
 8000a60:	d003      	beq.n	8000a6a <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a6a:	4b2d      	ldr	r3, [pc, #180]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a70:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	029b      	lsls	r3, r3, #10
 8000a88:	4013      	ands	r3, r2
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	035b      	lsls	r3, r3, #13
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d003      	beq.n	8000abe <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	43da      	mvns	r2, r3
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	039b      	lsls	r3, r3, #14
 8000adc:	4013      	ands	r3, r2
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_GPIO_Init+0x2e4>)
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	3301      	adds	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	40da      	lsrs	r2, r3
 8000afc:	1e13      	subs	r3, r2, #0
 8000afe:	d000      	beq.n	8000b02 <HAL_GPIO_Init+0x2c6>
 8000b00:	e6a8      	b.n	8000854 <HAL_GPIO_Init+0x18>
  } 
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b006      	add	sp, #24
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010000 	.word	0x40010000
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	48000c00 	.word	0x48000c00
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	000a      	movs	r2, r1
 8000b2e:	1cbb      	adds	r3, r7, #2
 8000b30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691b      	ldr	r3, [r3, #16]
 8000b36:	1cba      	adds	r2, r7, #2
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	d004      	beq.n	8000b48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000b3e:	230f      	movs	r3, #15
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e003      	b.n	8000b50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b48:	230f      	movs	r3, #15
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	781b      	ldrb	r3, [r3, #0]
  }
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b004      	add	sp, #16
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	0008      	movs	r0, r1
 8000b68:	0011      	movs	r1, r2
 8000b6a:	1cbb      	adds	r3, r7, #2
 8000b6c:	1c02      	adds	r2, r0, #0
 8000b6e:	801a      	strh	r2, [r3, #0]
 8000b70:	1c7b      	adds	r3, r7, #1
 8000b72:	1c0a      	adds	r2, r1, #0
 8000b74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b76:	1c7b      	adds	r3, r7, #1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7e:	1cbb      	adds	r3, r7, #2
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b86:	e003      	b.n	8000b90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b88:	1cbb      	adds	r3, r7, #2
 8000b8a:	881a      	ldrh	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e036      	b.n	8000c18 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_IWDG_Init+0x88>)
 8000bb0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <HAL_IWDG_Init+0x8c>)
 8000bb8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6852      	ldr	r2, [r2, #4]
 8000bc2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6892      	ldr	r2, [r2, #8]
 8000bcc:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000bce:	f7ff fb75 	bl	80002bc <HAL_GetTick>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	60fb      	str	r3, [r7, #12]

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_IWDG_Init+0x52>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000bd8:	f7ff fb70 	bl	80002bc <HAL_GetTick>
 8000bdc:	0002      	movs	r2, r0
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b27      	cmp	r3, #39	; 0x27
 8000be4:	d901      	bls.n	8000bea <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e016      	b.n	8000c18 <HAL_IWDG_Init+0x80>
  while(hiwdg->Instance->SR != RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f1      	bne.n	8000bd8 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	691a      	ldr	r2, [r3, #16]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d005      	beq.n	8000c0e <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68d2      	ldr	r2, [r2, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	e003      	b.n	8000c16 <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <HAL_IWDG_Init+0x90>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b004      	add	sp, #16
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	0000cccc 	.word	0x0000cccc
 8000c24:	00005555 	.word	0x00005555
 8000c28:	0000aaaa 	.word	0x0000aaaa

08000c2c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a03      	ldr	r2, [pc, #12]	; (8000c48 <HAL_IWDG_Refresh+0x1c>)
 8000c3a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	0018      	movs	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	0000aaaa 	.word	0x0000aaaa

08000c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	4013      	ands	r3, r2
 8000c60:	d100      	bne.n	8000c64 <HAL_RCC_OscConfig+0x18>
 8000c62:	e08d      	b.n	8000d80 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c64:	4bc3      	ldr	r3, [pc, #780]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	220c      	movs	r2, #12
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d00e      	beq.n	8000c8e <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c70:	4bc0      	ldr	r3, [pc, #768]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	220c      	movs	r2, #12
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b08      	cmp	r3, #8
 8000c7a:	d116      	bne.n	8000caa <HAL_RCC_OscConfig+0x5e>
 8000c7c:	4bbd      	ldr	r3, [pc, #756]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	025b      	lsls	r3, r3, #9
 8000c84:	401a      	ands	r2, r3
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	025b      	lsls	r3, r3, #9
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d10d      	bne.n	8000caa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8e:	4bb9      	ldr	r3, [pc, #740]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	029b      	lsls	r3, r3, #10
 8000c96:	4013      	ands	r3, r2
 8000c98:	d100      	bne.n	8000c9c <HAL_RCC_OscConfig+0x50>
 8000c9a:	e070      	b.n	8000d7e <HAL_RCC_OscConfig+0x132>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d000      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x5a>
 8000ca4:	e06b      	b.n	8000d7e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e2b6      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d107      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x76>
 8000cb2:	4bb0      	ldr	r3, [pc, #704]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4baf      	ldr	r3, [pc, #700]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	0249      	lsls	r1, r1, #9
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e02f      	b.n	8000d22 <HAL_RCC_OscConfig+0xd6>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d10c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x98>
 8000cca:	4baa      	ldr	r3, [pc, #680]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4ba9      	ldr	r3, [pc, #676]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cd0:	49a9      	ldr	r1, [pc, #676]	; (8000f78 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	400a      	ands	r2, r1
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	4ba7      	ldr	r3, [pc, #668]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4ba6      	ldr	r3, [pc, #664]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cdc:	49a7      	ldr	r1, [pc, #668]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000cde:	400a      	ands	r2, r1
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	e01e      	b.n	8000d22 <HAL_RCC_OscConfig+0xd6>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d10e      	bne.n	8000d0a <HAL_RCC_OscConfig+0xbe>
 8000cec:	4ba1      	ldr	r3, [pc, #644]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4ba0      	ldr	r3, [pc, #640]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cf2:	2180      	movs	r1, #128	; 0x80
 8000cf4:	02c9      	lsls	r1, r1, #11
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	4b9e      	ldr	r3, [pc, #632]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4b9d      	ldr	r3, [pc, #628]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0249      	lsls	r1, r1, #9
 8000d04:	430a      	orrs	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	e00b      	b.n	8000d22 <HAL_RCC_OscConfig+0xd6>
 8000d0a:	4b9a      	ldr	r3, [pc, #616]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b99      	ldr	r3, [pc, #612]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d10:	4999      	ldr	r1, [pc, #612]	; (8000f78 <HAL_RCC_OscConfig+0x32c>)
 8000d12:	400a      	ands	r2, r1
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	4b97      	ldr	r3, [pc, #604]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b96      	ldr	r3, [pc, #600]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d1c:	4997      	ldr	r1, [pc, #604]	; (8000f7c <HAL_RCC_OscConfig+0x330>)
 8000d1e:	400a      	ands	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d014      	beq.n	8000d54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fac7 	bl	80002bc <HAL_GetTick>
 8000d2e:	0003      	movs	r3, r0
 8000d30:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fac2 	bl	80002bc <HAL_GetTick>
 8000d38:	0002      	movs	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e268      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	4b8b      	ldr	r3, [pc, #556]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	2380      	movs	r3, #128	; 0x80
 8000d4c:	029b      	lsls	r3, r3, #10
 8000d4e:	4013      	ands	r3, r2
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0xe8>
 8000d52:	e015      	b.n	8000d80 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d54:	f7ff fab2 	bl	80002bc <HAL_GetTick>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5e:	f7ff faad 	bl	80002bc <HAL_GetTick>
 8000d62:	0002      	movs	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b64      	cmp	r3, #100	; 0x64
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e253      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d70:	4b80      	ldr	r3, [pc, #512]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	029b      	lsls	r3, r3, #10
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d1f0      	bne.n	8000d5e <HAL_RCC_OscConfig+0x112>
 8000d7c:	e000      	b.n	8000d80 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2202      	movs	r2, #2
 8000d86:	4013      	ands	r3, r2
 8000d88:	d100      	bne.n	8000d8c <HAL_RCC_OscConfig+0x140>
 8000d8a:	e069      	b.n	8000e60 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d8c:	4b79      	ldr	r3, [pc, #484]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	220c      	movs	r2, #12
 8000d92:	4013      	ands	r3, r2
 8000d94:	d00b      	beq.n	8000dae <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d96:	4b77      	ldr	r3, [pc, #476]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d11c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x190>
 8000da2:	4b74      	ldr	r3, [pc, #464]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	4013      	ands	r3, r2
 8000dac:	d116      	bne.n	8000ddc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	4b71      	ldr	r3, [pc, #452]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2202      	movs	r2, #2
 8000db4:	4013      	ands	r3, r2
 8000db6:	d005      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x178>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d001      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e229      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc4:	4b6b      	ldr	r3, [pc, #428]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	22f8      	movs	r2, #248	; 0xf8
 8000dca:	4393      	bics	r3, r2
 8000dcc:	0019      	movs	r1, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	691b      	ldr	r3, [r3, #16]
 8000dd2:	00da      	lsls	r2, r3, #3
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dda:	e041      	b.n	8000e60 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d024      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000de4:	4b63      	ldr	r3, [pc, #396]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b62      	ldr	r3, [pc, #392]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	430a      	orrs	r2, r1
 8000dee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fa64 	bl	80002bc <HAL_GetTick>
 8000df4:	0003      	movs	r3, r0
 8000df6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fa5f 	bl	80002bc <HAL_GetTick>
 8000dfe:	0002      	movs	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e205      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	4b59      	ldr	r3, [pc, #356]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2202      	movs	r2, #2
 8000e12:	4013      	ands	r3, r2
 8000e14:	d0f1      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e16:	4b57      	ldr	r3, [pc, #348]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	22f8      	movs	r2, #248	; 0xf8
 8000e1c:	4393      	bics	r3, r2
 8000e1e:	0019      	movs	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	00da      	lsls	r2, r3, #3
 8000e26:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e018      	b.n	8000e60 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2e:	4b51      	ldr	r3, [pc, #324]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b50      	ldr	r3, [pc, #320]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e34:	2101      	movs	r1, #1
 8000e36:	438a      	bics	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3a:	f7ff fa3f 	bl	80002bc <HAL_GetTick>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e44:	f7ff fa3a 	bl	80002bc <HAL_GetTick>
 8000e48:	0002      	movs	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e1e0      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e56:	4b47      	ldr	r3, [pc, #284]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	d1f1      	bne.n	8000e44 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2208      	movs	r2, #8
 8000e66:	4013      	ands	r3, r2
 8000e68:	d036      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d019      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e76:	4b3f      	ldr	r3, [pc, #252]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fa1d 	bl	80002bc <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e88:	f7ff fa18 	bl	80002bc <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e1be      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d0f1      	beq.n	8000e88 <HAL_RCC_OscConfig+0x23c>
 8000ea4:	e018      	b.n	8000ed8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea6:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eaa:	4b32      	ldr	r3, [pc, #200]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	438a      	bics	r2, r1
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fa03 	bl	80002bc <HAL_GetTick>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff f9fe 	bl	80002bc <HAL_GetTick>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e1a4      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ece:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	d1f1      	bne.n	8000ebc <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2204      	movs	r2, #4
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x298>
 8000ee2:	e0b5      	b.n	8001050 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ee4:	2317      	movs	r3, #23
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	055b      	lsls	r3, r3, #21
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d111      	bne.n	8000f1c <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000efa:	69da      	ldr	r2, [r3, #28]
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	0549      	lsls	r1, r1, #21
 8000f02:	430a      	orrs	r2, r1
 8000f04:	61da      	str	r2, [r3, #28]
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	2380      	movs	r3, #128	; 0x80
 8000f0c:	055b      	lsls	r3, r3, #21
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f14:	2317      	movs	r3, #23
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_RCC_OscConfig+0x334>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	d11a      	bne.n	8000f5e <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_RCC_OscConfig+0x334>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_RCC_OscConfig+0x334>)
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	0049      	lsls	r1, r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f36:	f7ff f9c1 	bl	80002bc <HAL_GetTick>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f40:	f7ff f9bc 	bl	80002bc <HAL_GetTick>
 8000f44:	0002      	movs	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e162      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <HAL_RCC_OscConfig+0x334>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d0f0      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d10e      	bne.n	8000f84 <HAL_RCC_OscConfig+0x338>
 8000f66:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000f68:	6a1a      	ldr	r2, [r3, #32]
 8000f6a:	4b02      	ldr	r3, [pc, #8]	; (8000f74 <HAL_RCC_OscConfig+0x328>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	621a      	str	r2, [r3, #32]
 8000f72:	e035      	b.n	8000fe0 <HAL_RCC_OscConfig+0x394>
 8000f74:	40021000 	.word	0x40021000
 8000f78:	fffeffff 	.word	0xfffeffff
 8000f7c:	fffbffff 	.word	0xfffbffff
 8000f80:	40007000 	.word	0x40007000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d10c      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x35a>
 8000f8c:	4ba4      	ldr	r3, [pc, #656]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	4ba3      	ldr	r3, [pc, #652]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	438a      	bics	r2, r1
 8000f96:	621a      	str	r2, [r3, #32]
 8000f98:	4ba1      	ldr	r3, [pc, #644]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000f9a:	6a1a      	ldr	r2, [r3, #32]
 8000f9c:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000f9e:	2104      	movs	r1, #4
 8000fa0:	438a      	bics	r2, r1
 8000fa2:	621a      	str	r2, [r3, #32]
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x394>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b05      	cmp	r3, #5
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x37c>
 8000fae:	4b9c      	ldr	r3, [pc, #624]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fb0:	6a1a      	ldr	r2, [r3, #32]
 8000fb2:	4b9b      	ldr	r3, [pc, #620]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	621a      	str	r2, [r3, #32]
 8000fba:	4b99      	ldr	r3, [pc, #612]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fbc:	6a1a      	ldr	r2, [r3, #32]
 8000fbe:	4b98      	ldr	r3, [pc, #608]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	e00b      	b.n	8000fe0 <HAL_RCC_OscConfig+0x394>
 8000fc8:	4b95      	ldr	r3, [pc, #596]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	4b94      	ldr	r3, [pc, #592]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	438a      	bics	r2, r1
 8000fd2:	621a      	str	r2, [r3, #32]
 8000fd4:	4b92      	ldr	r3, [pc, #584]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	4b91      	ldr	r3, [pc, #580]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8000fda:	2104      	movs	r1, #4
 8000fdc:	438a      	bics	r2, r1
 8000fde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d014      	beq.n	8001012 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff f968 	bl	80002bc <HAL_GetTick>
 8000fec:	0003      	movs	r3, r0
 8000fee:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff0:	e009      	b.n	8001006 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff2:	f7ff f963 	bl	80002bc <HAL_GetTick>
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	4a89      	ldr	r2, [pc, #548]	; (8001224 <HAL_RCC_OscConfig+0x5d8>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e108      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001006:	4b86      	ldr	r3, [pc, #536]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	2202      	movs	r2, #2
 800100c:	4013      	ands	r3, r2
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x3a6>
 8001010:	e013      	b.n	800103a <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001012:	f7ff f953 	bl	80002bc <HAL_GetTick>
 8001016:	0003      	movs	r3, r0
 8001018:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101a:	e009      	b.n	8001030 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101c:	f7ff f94e 	bl	80002bc <HAL_GetTick>
 8001020:	0002      	movs	r2, r0
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4a7f      	ldr	r2, [pc, #508]	; (8001224 <HAL_RCC_OscConfig+0x5d8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e0f3      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b7b      	ldr	r3, [pc, #492]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2202      	movs	r2, #2
 8001036:	4013      	ands	r3, r2
 8001038:	d1f0      	bne.n	800101c <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800103a:	2317      	movs	r3, #23
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d105      	bne.n	8001050 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001044:	4b76      	ldr	r3, [pc, #472]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001046:	69da      	ldr	r2, [r3, #28]
 8001048:	4b75      	ldr	r3, [pc, #468]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 800104a:	4977      	ldr	r1, [pc, #476]	; (8001228 <HAL_RCC_OscConfig+0x5dc>)
 800104c:	400a      	ands	r2, r1
 800104e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2210      	movs	r2, #16
 8001056:	4013      	ands	r3, r2
 8001058:	d063      	beq.n	8001122 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d12a      	bne.n	80010b8 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001062:	4b6f      	ldr	r3, [pc, #444]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b6e      	ldr	r3, [pc, #440]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001068:	2104      	movs	r1, #4
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800106e:	4b6c      	ldr	r3, [pc, #432]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001072:	4b6b      	ldr	r3, [pc, #428]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001074:	2101      	movs	r1, #1
 8001076:	430a      	orrs	r2, r1
 8001078:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800107a:	f7ff f91f 	bl	80002bc <HAL_GetTick>
 800107e:	0003      	movs	r3, r0
 8001080:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001084:	f7ff f91a 	bl	80002bc <HAL_GetTick>
 8001088:	0002      	movs	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e0c0      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001096:	4b62      	ldr	r3, [pc, #392]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109a:	2202      	movs	r2, #2
 800109c:	4013      	ands	r3, r2
 800109e:	d0f1      	beq.n	8001084 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010a0:	4b5f      	ldr	r3, [pc, #380]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	22f8      	movs	r2, #248	; 0xf8
 80010a6:	4393      	bics	r3, r2
 80010a8:	0019      	movs	r1, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	00da      	lsls	r2, r3, #3
 80010b0:	4b5b      	ldr	r3, [pc, #364]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
 80010b6:	e034      	b.n	8001122 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	695b      	ldr	r3, [r3, #20]
 80010bc:	3305      	adds	r3, #5
 80010be:	d111      	bne.n	80010e4 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80010c0:	4b57      	ldr	r3, [pc, #348]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	438a      	bics	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010cc:	4b54      	ldr	r3, [pc, #336]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	22f8      	movs	r2, #248	; 0xf8
 80010d2:	4393      	bics	r3, r2
 80010d4:	0019      	movs	r1, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	00da      	lsls	r2, r3, #3
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010de:	430a      	orrs	r2, r1
 80010e0:	635a      	str	r2, [r3, #52]	; 0x34
 80010e2:	e01e      	b.n	8001122 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010ea:	2104      	movs	r1, #4
 80010ec:	430a      	orrs	r2, r1
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	438a      	bics	r2, r1
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff f8de 	bl	80002bc <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001106:	f7ff f8d9 	bl	80002bc <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e07f      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001118:	4b41      	ldr	r3, [pc, #260]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 800111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d1f1      	bne.n	8001106 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <HAL_RCC_OscConfig+0x4e0>
 800112a:	e074      	b.n	8001216 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	220c      	movs	r2, #12
 8001132:	4013      	ands	r3, r2
 8001134:	2b08      	cmp	r3, #8
 8001136:	d100      	bne.n	800113a <HAL_RCC_OscConfig+0x4ee>
 8001138:	e06b      	b.n	8001212 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6a1b      	ldr	r3, [r3, #32]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d14c      	bne.n	80011dc <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b36      	ldr	r3, [pc, #216]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001148:	4938      	ldr	r1, [pc, #224]	; (800122c <HAL_RCC_OscConfig+0x5e0>)
 800114a:	400a      	ands	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114e:	f7ff f8b5 	bl	80002bc <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001158:	f7ff f8b0 	bl	80002bc <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e056      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	049b      	lsls	r3, r3, #18
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001176:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	220f      	movs	r2, #15
 800117c:	4393      	bics	r3, r2
 800117e:	0019      	movs	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001186:	430a      	orrs	r2, r1
 8001188:	62da      	str	r2, [r3, #44]	; 0x2c
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a28      	ldr	r2, [pc, #160]	; (8001230 <HAL_RCC_OscConfig+0x5e4>)
 8001190:	4013      	ands	r3, r2
 8001192:	0019      	movs	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	431a      	orrs	r2, r3
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80011a0:	430a      	orrs	r2, r1
 80011a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80011aa:	2180      	movs	r1, #128	; 0x80
 80011ac:	0449      	lsls	r1, r1, #17
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff f883 	bl	80002bc <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff f87e 	bl	80002bc <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e024      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	049b      	lsls	r3, r3, #18
 80011d6:	4013      	ands	r3, r2
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x570>
 80011da:	e01c      	b.n	8001216 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 80011e2:	4912      	ldr	r1, [pc, #72]	; (800122c <HAL_RCC_OscConfig+0x5e0>)
 80011e4:	400a      	ands	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e8:	f7ff f868 	bl	80002bc <HAL_GetTick>
 80011ec:	0003      	movs	r3, r0
 80011ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff f863 	bl	80002bc <HAL_GetTick>
 80011f6:	0002      	movs	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e009      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_RCC_OscConfig+0x5d4>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	049b      	lsls	r3, r3, #18
 800120c:	4013      	ands	r3, r2
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x5a6>
 8001210:	e001      	b.n	8001216 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	0018      	movs	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	b006      	add	sp, #24
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	00001388 	.word	0x00001388
 8001228:	efffffff 	.word	0xefffffff
 800122c:	feffffff 	.word	0xfeffffff
 8001230:	ffc2ffff 	.word	0xffc2ffff

08001234 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001242:	4b6a      	ldr	r3, [pc, #424]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	683a      	ldr	r2, [r7, #0]
 800124c:	429a      	cmp	r2, r3
 800124e:	d911      	bls.n	8001274 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001250:	4b66      	ldr	r3, [pc, #408]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	4393      	bics	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2201      	movs	r2, #1
 8001268:	4013      	ands	r3, r2
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d001      	beq.n	8001274 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0b6      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2202      	movs	r2, #2
 800127a:	4013      	ands	r3, r2
 800127c:	d009      	beq.n	8001292 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127e:	4b5c      	ldr	r3, [pc, #368]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	22f0      	movs	r2, #240	; 0xf0
 8001284:	4393      	bics	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	430a      	orrs	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	d100      	bne.n	800129e <HAL_RCC_ClockConfig+0x6a>
 800129c:	e067      	b.n	800136e <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	029b      	lsls	r3, r3, #10
 80012ae:	4013      	ands	r3, r2
 80012b0:	d114      	bne.n	80012dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e095      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012be:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	049b      	lsls	r3, r3, #18
 80012c6:	4013      	ands	r3, r2
 80012c8:	d108      	bne.n	80012dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e089      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ce:	4b48      	ldr	r3, [pc, #288]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d101      	bne.n	80012dc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e082      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012dc:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2203      	movs	r2, #3
 80012e2:	4393      	bics	r3, r2
 80012e4:	0019      	movs	r1, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f0:	f7fe ffe4 	bl	80002bc <HAL_GetTick>
 80012f4:	0003      	movs	r3, r0
 80012f6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d111      	bne.n	8001324 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	e009      	b.n	8001316 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001302:	f7fe ffdb 	bl	80002bc <HAL_GetTick>
 8001306:	0002      	movs	r2, r0
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e065      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	220c      	movs	r2, #12
 800131c:	4013      	ands	r3, r2
 800131e:	2b04      	cmp	r3, #4
 8001320:	d1ef      	bne.n	8001302 <HAL_RCC_ClockConfig+0xce>
 8001322:	e024      	b.n	800136e <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d11b      	bne.n	8001364 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132c:	e009      	b.n	8001342 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132e:	f7fe ffc5 	bl	80002bc <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e04f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	220c      	movs	r2, #12
 8001348:	4013      	ands	r3, r2
 800134a:	2b08      	cmp	r3, #8
 800134c:	d1ef      	bne.n	800132e <HAL_RCC_ClockConfig+0xfa>
 800134e:	e00e      	b.n	800136e <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001350:	f7fe ffb4 	bl	80002bc <HAL_GetTick>
 8001354:	0002      	movs	r2, r0
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	4a26      	ldr	r2, [pc, #152]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e03e      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	220c      	movs	r2, #12
 800136a:	4013      	ands	r3, r2
 800136c:	d1f0      	bne.n	8001350 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	4013      	ands	r3, r2
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d211      	bcs.n	80013a0 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2201      	movs	r2, #1
 8001394:	4013      	ands	r3, r2
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d001      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	e020      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2204      	movs	r2, #4
 80013a6:	4013      	ands	r3, r2
 80013a8:	d009      	beq.n	80013be <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013be:	f000 f821 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80013c2:	0001      	movs	r1, r0
 80013c4:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	220f      	movs	r2, #15
 80013cc:	4013      	ands	r3, r2
 80013ce:	4a0b      	ldr	r2, [pc, #44]	; (80013fc <HAL_RCC_ClockConfig+0x1c8>)
 80013d0:	5cd3      	ldrb	r3, [r2, r3]
 80013d2:	000a      	movs	r2, r1
 80013d4:	40da      	lsrs	r2, r3
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_RCC_ClockConfig+0x1cc>)
 80013d8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7fe ff46 	bl	800026c <HAL_InitTick>
  
  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b004      	add	sp, #16
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	40022000 	.word	0x40022000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	00001388 	.word	0x00001388
 80013f8:	fffff8ff 	.word	0xfffff8ff
 80013fc:	08006a24 	.word	0x08006a24
 8001400:	20000870 	.word	0x20000870

08001404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b08f      	sub	sp, #60	; 0x3c
 8001408:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800140a:	2314      	movs	r3, #20
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001410:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001412:	c313      	stmia	r3!, {r0, r1, r4}
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4a29      	ldr	r2, [pc, #164]	; (80014c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800141c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800141e:	c313      	stmia	r3!, {r0, r1, r4}
 8001420:	6812      	ldr	r2, [r2, #0]
 8001422:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	; 0x28
 800142c:	2300      	movs	r3, #0
 800142e:	637b      	str	r3, [r7, #52]	; 0x34
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800143e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001440:	220c      	movs	r2, #12
 8001442:	4013      	ands	r3, r2
 8001444:	2b04      	cmp	r3, #4
 8001446:	d002      	beq.n	800144e <HAL_RCC_GetSysClockFreq+0x4a>
 8001448:	2b08      	cmp	r3, #8
 800144a:	d003      	beq.n	8001454 <HAL_RCC_GetSysClockFreq+0x50>
 800144c:	e02d      	b.n	80014aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800144e:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001452:	e02d      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	0c9b      	lsrs	r3, r3, #18
 8001458:	220f      	movs	r2, #15
 800145a:	4013      	ands	r3, r2
 800145c:	2214      	movs	r2, #20
 800145e:	18ba      	adds	r2, r7, r2
 8001460:	5cd3      	ldrb	r3, [r2, r3]
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	220f      	movs	r2, #15
 800146a:	4013      	ands	r3, r2
 800146c:	1d3a      	adds	r2, r7, #4
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	025b      	lsls	r3, r3, #9
 8001478:	4013      	ands	r3, r2
 800147a:	d009      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800147c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001480:	f7fe fe54 	bl	800012c <__udivsi3>
 8001484:	0003      	movs	r3, r0
 8001486:	001a      	movs	r2, r3
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	4353      	muls	r3, r2
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
 800148e:	e009      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001492:	000a      	movs	r2, r1
 8001494:	0152      	lsls	r2, r2, #5
 8001496:	1a52      	subs	r2, r2, r1
 8001498:	0193      	lsls	r3, r2, #6
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	185b      	adds	r3, r3, r1
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80014a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014a8:	e002      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80014ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80014b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80014b2:	0018      	movs	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	b00f      	add	sp, #60	; 0x3c
 80014b8:	bd90      	pop	{r4, r7, pc}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	0800675c 	.word	0x0800675c
 80014c0:	0800676c 	.word	0x0800676c
 80014c4:	40021000 	.word	0x40021000
 80014c8:	007a1200 	.word	0x007a1200

080014cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <HAL_RCC_GetHCLKFreq+0x10>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	20000870 	.word	0x20000870

080014e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80014e4:	f7ff fff2 	bl	80014cc <HAL_RCC_GetHCLKFreq>
 80014e8:	0001      	movs	r1, r0
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	2207      	movs	r2, #7
 80014f2:	4013      	ands	r3, r2
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80014f6:	5cd3      	ldrb	r3, [r2, r3]
 80014f8:	40d9      	lsrs	r1, r3
 80014fa:	000b      	movs	r3, r1
}    
 80014fc:	0018      	movs	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	40021000 	.word	0x40021000
 8001508:	08006a34 	.word	0x08006a34

0800150c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e08a      	b.n	8001634 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	225d      	movs	r2, #93	; 0x5d
 8001528:	5c9b      	ldrb	r3, [r3, r2]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	225c      	movs	r2, #92	; 0x5c
 8001534:	2100      	movs	r1, #0
 8001536:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	0018      	movs	r0, r3
 800153c:	f004 fdc8 	bl	80060d0 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	225d      	movs	r2, #93	; 0x5d
 8001544:	2102      	movs	r1, #2
 8001546:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2140      	movs	r1, #64	; 0x40
 8001554:	438a      	bics	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	23e0      	movs	r3, #224	; 0xe0
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	429a      	cmp	r2, r3
 8001562:	d902      	bls.n	800156a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	e002      	b.n	8001570 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	23f0      	movs	r3, #240	; 0xf0
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	429a      	cmp	r2, r3
 800157a:	d008      	beq.n	800158e <HAL_SPI_Init+0x82>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68da      	ldr	r2, [r3, #12]
 8001580:	23e0      	movs	r3, #224	; 0xe0
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	429a      	cmp	r2, r3
 8001586:	d002      	beq.n	800158e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	23e0      	movs	r3, #224	; 0xe0
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	429a      	cmp	r2, r3
 80015a0:	d903      	bls.n	80015aa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2202      	movs	r2, #2
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
 80015a8:	e002      	b.n	80015b0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6999      	ldr	r1, [r3, #24]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	400b      	ands	r3, r1
 80015d0:	431a      	orrs	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	431a      	orrs	r2, r3
 80015de:	0011      	movs	r1, r2
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	2204      	movs	r2, #4
 80015f4:	401a      	ands	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	431a      	orrs	r2, r3
 8001608:	0011      	movs	r1, r2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4907      	ldr	r1, [pc, #28]	; (800163c <HAL_SPI_Init+0x130>)
 8001620:	400a      	ands	r2, r1
 8001622:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	225d      	movs	r2, #93	; 0x5d
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}
 800163c:	fffff7ff 	.word	0xfffff7ff

08001640 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	1dbb      	adds	r3, r7, #6
 800164e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001654:	231f      	movs	r3, #31
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	225c      	movs	r2, #92	; 0x5c
 8001660:	5c9b      	ldrb	r3, [r3, r2]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_SPI_Transmit+0x2a>
 8001666:	2302      	movs	r3, #2
 8001668:	e14f      	b.n	800190a <HAL_SPI_Transmit+0x2ca>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	225c      	movs	r2, #92	; 0x5c
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001672:	f7fe fe23 	bl	80002bc <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	225d      	movs	r2, #93	; 0x5d
 800167e:	5c9b      	ldrb	r3, [r3, r2]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b01      	cmp	r3, #1
 8001684:	d004      	beq.n	8001690 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 8001686:	231f      	movs	r3, #31
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	2202      	movs	r2, #2
 800168c:	701a      	strb	r2, [r3, #0]
    goto error;
 800168e:	e131      	b.n	80018f4 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_SPI_Transmit+0x5e>
 8001696:	1dbb      	adds	r3, r7, #6
 8001698:	881b      	ldrh	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 800169e:	231f      	movs	r3, #31
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80016a6:	e125      	b.n	80018f4 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	225d      	movs	r2, #93	; 0x5d
 80016ac:	2103      	movs	r1, #3
 80016ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1dba      	adds	r2, r7, #6
 80016c0:	8812      	ldrh	r2, [r2, #0]
 80016c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1dba      	adds	r2, r7, #6
 80016c8:	8812      	ldrh	r2, [r2, #0]
 80016ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2244      	movs	r2, #68	; 0x44
 80016d6:	2100      	movs	r1, #0
 80016d8:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2246      	movs	r2, #70	; 0x46
 80016de:	2100      	movs	r1, #0
 80016e0:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d108      	bne.n	800170c <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	01c9      	lsls	r1, r1, #7
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	4013      	ands	r3, r2
 8001716:	2b40      	cmp	r3, #64	; 0x40
 8001718:	d007      	beq.n	800172a <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2140      	movs	r1, #64	; 0x40
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	23e0      	movs	r3, #224	; 0xe0
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	429a      	cmp	r2, r3
 8001734:	d948      	bls.n	80017c8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d004      	beq.n	8001748 <HAL_SPI_Transmit+0x108>
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001742:	b29b      	uxth	r3, r3
 8001744:	2b01      	cmp	r3, #1
 8001746:	d139      	bne.n	80017bc <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3302      	adds	r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800175c:	b29b      	uxth	r3, r3
 800175e:	3b01      	subs	r3, #1
 8001760:	b29a      	uxth	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001766:	e029      	b.n	80017bc <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2202      	movs	r2, #2
 8001770:	4013      	ands	r3, r2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d10f      	bne.n	8001796 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	3302      	adds	r3, #2
 8001784:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800178a:	b29b      	uxth	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001794:	e012      	b.n	80017bc <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00a      	beq.n	80017b2 <HAL_SPI_Transmit+0x172>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	d00c      	beq.n	80017bc <HAL_SPI_Transmit+0x17c>
 80017a2:	f7fe fd8b 	bl	80002bc <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d804      	bhi.n	80017bc <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80017b2:	231f      	movs	r3, #31
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	2203      	movs	r2, #3
 80017b8:	701a      	strb	r2, [r3, #0]
          goto error;
 80017ba:	e09b      	b.n	80018f4 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1d0      	bne.n	8001768 <HAL_SPI_Transmit+0x128>
 80017c6:	e071      	b.n	80018ac <HAL_SPI_Transmit+0x26c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d004      	beq.n	80017da <HAL_SPI_Transmit+0x19a>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d163      	bne.n	80018a2 <HAL_SPI_Transmit+0x262>
    {
      if (hspi->TxXferCount > 1U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d90f      	bls.n	8001804 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	3302      	adds	r3, #2
 80017f2:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b02      	subs	r3, #2
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001802:	e04e      	b.n	80018a2 <HAL_SPI_Transmit+0x262>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	6812      	ldr	r2, [r2, #0]
 800180e:	320c      	adds	r2, #12
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001818:	b29b      	uxth	r3, r3
 800181a:	3b01      	subs	r3, #1
 800181c:	b29a      	uxth	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001822:	e03e      	b.n	80018a2 <HAL_SPI_Transmit+0x262>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	2b02      	cmp	r3, #2
 8001830:	d124      	bne.n	800187c <HAL_SPI_Transmit+0x23c>
      {
        if (hspi->TxXferCount > 1U)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001836:	b29b      	uxth	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d90f      	bls.n	800185c <HAL_SPI_Transmit+0x21c>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	881a      	ldrh	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3302      	adds	r3, #2
 800184a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001850:	b29b      	uxth	r3, r3
 8001852:	3b02      	subs	r3, #2
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	87da      	strh	r2, [r3, #62]	; 0x3e
 800185a:	e022      	b.n	80018a2 <HAL_SPI_Transmit+0x262>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	60ba      	str	r2, [r7, #8]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	320c      	adds	r2, #12
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	87da      	strh	r2, [r3, #62]	; 0x3e
 800187a:	e012      	b.n	80018a2 <HAL_SPI_Transmit+0x262>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00a      	beq.n	8001898 <HAL_SPI_Transmit+0x258>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	3301      	adds	r3, #1
 8001886:	d00c      	beq.n	80018a2 <HAL_SPI_Transmit+0x262>
 8001888:	f7fe fd18 	bl	80002bc <HAL_GetTick>
 800188c:	0002      	movs	r2, r0
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d804      	bhi.n	80018a2 <HAL_SPI_Transmit+0x262>
        {
          errorcode = HAL_TIMEOUT;
 8001898:	231f      	movs	r3, #31
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	2203      	movs	r2, #3
 800189e:	701a      	strb	r2, [r3, #0]
          goto error;
 80018a0:	e028      	b.n	80018f4 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1bb      	bne.n	8001824 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	6839      	ldr	r1, [r7, #0]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 fcc8 	bl	8002248 <SPI_EndRxTxTransaction>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_SPI_Transmit+0x282>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2220      	movs	r2, #32
 80018c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10a      	bne.n	80018e0 <HAL_SPI_Transmit+0x2a0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_SPI_Transmit+0x2b2>
  {
    errorcode = HAL_ERROR;
 80018e8:	231f      	movs	r3, #31
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
 80018f0:	e000      	b.n	80018f4 <HAL_SPI_Transmit+0x2b4>
  }

error:
 80018f2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	225d      	movs	r2, #93	; 0x5d
 80018f8:	2101      	movs	r1, #1
 80018fa:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	225c      	movs	r2, #92	; 0x5c
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001904:	231f      	movs	r3, #31
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b008      	add	sp, #32
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001914:	b590      	push	{r4, r7, lr}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af02      	add	r7, sp, #8
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	1dbb      	adds	r3, r7, #6
 8001922:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001928:	2317      	movs	r3, #23
 800192a:	18fb      	adds	r3, r7, r3
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	2382      	movs	r3, #130	; 0x82
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	429a      	cmp	r2, r3
 800193a:	d113      	bne.n	8001964 <HAL_SPI_Receive+0x50>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10f      	bne.n	8001964 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	225d      	movs	r2, #93	; 0x5d
 8001948:	2104      	movs	r1, #4
 800194a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800194c:	1dbb      	adds	r3, r7, #6
 800194e:	881c      	ldrh	r4, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	0023      	movs	r3, r4
 800195c:	f000 f918 	bl	8001b90 <HAL_SPI_TransmitReceive>
 8001960:	0003      	movs	r3, r0
 8001962:	e10c      	b.n	8001b7e <HAL_SPI_Receive+0x26a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	225c      	movs	r2, #92	; 0x5c
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_SPI_Receive+0x5e>
 800196e:	2302      	movs	r3, #2
 8001970:	e105      	b.n	8001b7e <HAL_SPI_Receive+0x26a>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	225c      	movs	r2, #92	; 0x5c
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800197a:	f7fe fc9f 	bl	80002bc <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	225d      	movs	r2, #93	; 0x5d
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b01      	cmp	r3, #1
 800198c:	d004      	beq.n	8001998 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800198e:	2317      	movs	r3, #23
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2202      	movs	r2, #2
 8001994:	701a      	strb	r2, [r3, #0]
    goto error;
 8001996:	e0e7      	b.n	8001b68 <HAL_SPI_Receive+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_SPI_Receive+0x92>
 800199e:	1dbb      	adds	r3, r7, #6
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d104      	bne.n	80019b0 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 80019a6:	2317      	movs	r3, #23
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80019ae:	e0db      	b.n	8001b68 <HAL_SPI_Receive+0x254>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	225d      	movs	r2, #93	; 0x5d
 80019b4:	2104      	movs	r1, #4
 80019b6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1dba      	adds	r2, r7, #6
 80019c8:	2144      	movs	r1, #68	; 0x44
 80019ca:	8812      	ldrh	r2, [r2, #0]
 80019cc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1dba      	adds	r2, r7, #6
 80019d2:	2146      	movs	r1, #70	; 0x46
 80019d4:	8812      	ldrh	r2, [r2, #0]
 80019d6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	23e0      	movs	r3, #224	; 0xe0
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d908      	bls.n	8001a14 <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	495e      	ldr	r1, [pc, #376]	; (8001b88 <HAL_SPI_Receive+0x274>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e008      	b.n	8001a26 <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2180      	movs	r1, #128	; 0x80
 8001a20:	0149      	lsls	r1, r1, #5
 8001a22:	430a      	orrs	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d107      	bne.n	8001a42 <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4953      	ldr	r1, [pc, #332]	; (8001b8c <HAL_SPI_Receive+0x278>)
 8001a3e:	400a      	ands	r2, r1
 8001a40:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d007      	beq.n	8001a60 <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2140      	movs	r1, #64	; 0x40
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	23e0      	movs	r3, #224	; 0xe0
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d862      	bhi.n	8001b32 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001a6c:	e02d      	b.n	8001aca <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d113      	bne.n	8001aa4 <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	330c      	adds	r3, #12
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2246      	movs	r2, #70	; 0x46
 8001a94:	5a9b      	ldrh	r3, [r3, r2]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2246      	movs	r2, #70	; 0x46
 8001aa0:	5299      	strh	r1, [r3, r2]
 8001aa2:	e012      	b.n	8001aca <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <HAL_SPI_Receive+0x1ac>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	d00c      	beq.n	8001aca <HAL_SPI_Receive+0x1b6>
 8001ab0:	f7fe fc04 	bl	80002bc <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d804      	bhi.n	8001aca <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8001ac0:	2317      	movs	r3, #23
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	701a      	strb	r2, [r3, #0]
          goto error;
 8001ac8:	e04e      	b.n	8001b68 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2246      	movs	r2, #70	; 0x46
 8001ace:	5a9b      	ldrh	r3, [r3, r2]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1cb      	bne.n	8001a6e <HAL_SPI_Receive+0x15a>
 8001ad6:	e032      	b.n	8001b3e <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d112      	bne.n	8001b0c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	3302      	adds	r3, #2
 8001af6:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2246      	movs	r2, #70	; 0x46
 8001afc:	5a9b      	ldrh	r3, [r3, r2]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b299      	uxth	r1, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2246      	movs	r2, #70	; 0x46
 8001b08:	5299      	strh	r1, [r3, r2]
 8001b0a:	e012      	b.n	8001b32 <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00a      	beq.n	8001b28 <HAL_SPI_Receive+0x214>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	d00c      	beq.n	8001b32 <HAL_SPI_Receive+0x21e>
 8001b18:	f7fe fbd0 	bl	80002bc <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d804      	bhi.n	8001b32 <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 8001b28:	2317      	movs	r3, #23
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	701a      	strb	r2, [r3, #0]
          goto error;
 8001b30:	e01a      	b.n	8001b68 <HAL_SPI_Receive+0x254>
    while (hspi->RxXferCount > 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2246      	movs	r2, #70	; 0x46
 8001b36:	5a9b      	ldrh	r3, [r3, r2]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1cc      	bne.n	8001ad8 <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	0018      	movs	r0, r3
 8001b46:	f000 fb21 	bl	800218c <SPI_EndRxTransaction>
 8001b4a:	1e03      	subs	r3, r0, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_SPI_Receive+0x252>
  {
    errorcode = HAL_ERROR;
 8001b5c:	2317      	movs	r3, #23
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
 8001b64:	e000      	b.n	8001b68 <HAL_SPI_Receive+0x254>
  }

error :
 8001b66:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	225d      	movs	r2, #93	; 0x5d
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	225c      	movs	r2, #92	; 0x5c
 8001b74:	2100      	movs	r1, #0
 8001b76:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001b78:	2317      	movs	r3, #23
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b007      	add	sp, #28
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	ffffefff 	.word	0xffffefff
 8001b8c:	ffffbfff 	.word	0xffffbfff

08001b90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	1cbb      	adds	r3, r7, #2
 8001ba0:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bb2:	2323      	movs	r3, #35	; 0x23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	225c      	movs	r2, #92	; 0x5c
 8001bbe:	5c9b      	ldrb	r3, [r3, r2]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_SPI_TransmitReceive+0x38>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e1f2      	b.n	8001fae <HAL_SPI_TransmitReceive+0x41e>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	225c      	movs	r2, #92	; 0x5c
 8001bcc:	2101      	movs	r1, #1
 8001bce:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bd0:	f7fe fb74 	bl	80002bc <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	225d      	movs	r2, #93	; 0x5d
 8001bdc:	5c9b      	ldrb	r3, [r3, r2]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d010      	beq.n	8001c10 <HAL_SPI_TransmitReceive+0x80>
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	2382      	movs	r3, #130	; 0x82
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d106      	bne.n	8001c06 <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <HAL_SPI_TransmitReceive+0x76>
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d004      	beq.n	8001c10 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8001c06:	2323      	movs	r3, #35	; 0x23
 8001c08:	18fb      	adds	r3, r7, r3
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c0e:	e1c3      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x408>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_SPI_TransmitReceive+0x94>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_SPI_TransmitReceive+0x94>
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d104      	bne.n	8001c2e <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 8001c24:	2323      	movs	r3, #35	; 0x23
 8001c26:	18fb      	adds	r3, r7, r3
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
    goto error;
 8001c2c:	e1b4      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x408>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	225d      	movs	r2, #93	; 0x5d
 8001c32:	5c9b      	ldrb	r3, [r3, r2]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d003      	beq.n	8001c42 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	225d      	movs	r2, #93	; 0x5d
 8001c3e:	2105      	movs	r1, #5
 8001c40:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1cba      	adds	r2, r7, #2
 8001c52:	2146      	movs	r1, #70	; 0x46
 8001c54:	8812      	ldrh	r2, [r2, #0]
 8001c56:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1cba      	adds	r2, r7, #2
 8001c5c:	2144      	movs	r1, #68	; 0x44
 8001c5e:	8812      	ldrh	r2, [r2, #0]
 8001c60:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1cba      	adds	r2, r7, #2
 8001c6c:	8812      	ldrh	r2, [r2, #0]
 8001c6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1cba      	adds	r2, r7, #2
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	23e0      	movs	r3, #224	; 0xe0
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d805      	bhi.n	8001c9c <HAL_SPI_TransmitReceive+0x10c>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2246      	movs	r2, #70	; 0x46
 8001c94:	5a9b      	ldrh	r3, [r3, r2]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d908      	bls.n	8001cae <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	49c4      	ldr	r1, [pc, #784]	; (8001fb8 <HAL_SPI_TransmitReceive+0x428>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	e008      	b.n	8001cc0 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0149      	lsls	r1, r1, #5
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d007      	beq.n	8001cde <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2140      	movs	r1, #64	; 0x40
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	23e0      	movs	r3, #224	; 0xe0
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d800      	bhi.n	8001cec <HAL_SPI_TransmitReceive+0x15c>
 8001cea:	e075      	b.n	8001dd8 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <HAL_SPI_TransmitReceive+0x16e>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d160      	bne.n	8001dc0 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	881a      	ldrh	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d1c:	e050      	b.n	8001dc0 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <HAL_SPI_TransmitReceive+0x1ce>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d017      	beq.n	8001d5e <HAL_SPI_TransmitReceive+0x1ce>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d110      	bne.n	8001d5e <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3302      	adds	r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2246      	movs	r2, #70	; 0x46
 8001d62:	5a9b      	ldrh	r3, [r3, r2]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01a      	beq.n	8001da0 <HAL_SPI_TransmitReceive+0x210>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d113      	bne.n	8001da0 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3302      	adds	r3, #2
 8001d88:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2246      	movs	r2, #70	; 0x46
 8001d8e:	5a9b      	ldrh	r3, [r3, r2]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b299      	uxth	r1, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2246      	movs	r2, #70	; 0x46
 8001d9a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	3301      	adds	r3, #1
 8001da4:	d00c      	beq.n	8001dc0 <HAL_SPI_TransmitReceive+0x230>
 8001da6:	f7fe fa89 	bl	80002bc <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d804      	bhi.n	8001dc0 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 8001db6:	2323      	movs	r3, #35	; 0x23
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2203      	movs	r2, #3
 8001dbc:	701a      	strb	r2, [r3, #0]
        goto error;
 8001dbe:	e0eb      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1a9      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x18e>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2246      	movs	r2, #70	; 0x46
 8001dce:	5a9b      	ldrh	r3, [r3, r2]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1a3      	bne.n	8001d1e <HAL_SPI_TransmitReceive+0x18e>
 8001dd6:	e0ca      	b.n	8001f6e <HAL_SPI_TransmitReceive+0x3de>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_SPI_TransmitReceive+0x25c>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <HAL_SPI_TransmitReceive+0x25c>
 8001dea:	e0b3      	b.n	8001f54 <HAL_SPI_TransmitReceive+0x3c4>
    {
      if (hspi->TxXferCount > 1U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d90f      	bls.n	8001e16 <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	881a      	ldrh	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	3302      	adds	r3, #2
 8001e04:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b02      	subs	r3, #2
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e14:	e09e      	b.n	8001f54 <HAL_SPI_TransmitReceive+0x3c4>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	60ba      	str	r2, [r7, #8]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	320c      	adds	r2, #12
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e34:	e08e      	b.n	8001f54 <HAL_SPI_TransmitReceive+0x3c4>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d031      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x310>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d02c      	beq.n	8001ea0 <HAL_SPI_TransmitReceive+0x310>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d125      	bne.n	8001ea0 <HAL_SPI_TransmitReceive+0x310>
      {
        if (hspi->TxXferCount > 1U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d90f      	bls.n	8001e7e <HAL_SPI_TransmitReceive+0x2ee>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	881a      	ldrh	r2, [r3, #0]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b02      	subs	r3, #2
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e7c:	e00e      	b.n	8001e9c <HAL_SPI_TransmitReceive+0x30c>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	60ba      	str	r2, [r7, #8]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	320c      	adds	r2, #12
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2246      	movs	r2, #70	; 0x46
 8001ea4:	5a9b      	ldrh	r3, [r3, r2]
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d043      	beq.n	8001f34 <HAL_SPI_TransmitReceive+0x3a4>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d13c      	bne.n	8001f34 <HAL_SPI_TransmitReceive+0x3a4>
      {
        if (hspi->RxXferCount > 1U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2246      	movs	r2, #70	; 0x46
 8001ebe:	5a9b      	ldrh	r3, [r3, r2]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d921      	bls.n	8001f0a <HAL_SPI_TransmitReceive+0x37a>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2246      	movs	r2, #70	; 0x46
 8001edc:	5a9b      	ldrh	r3, [r3, r2]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b02      	subs	r3, #2
 8001ee2:	b299      	uxth	r1, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2246      	movs	r2, #70	; 0x46
 8001ee8:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2246      	movs	r2, #70	; 0x46
 8001eee:	5a9b      	ldrh	r3, [r3, r2]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d81c      	bhi.n	8001f30 <HAL_SPI_TransmitReceive+0x3a0>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0149      	lsls	r1, r1, #5
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	e012      	b.n	8001f30 <HAL_SPI_TransmitReceive+0x3a0>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	330c      	adds	r3, #12
 8001f10:	001a      	movs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	6079      	str	r1, [r7, #4]
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2246      	movs	r2, #70	; 0x46
 8001f22:	5a9b      	ldrh	r3, [r3, r2]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b299      	uxth	r1, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2246      	movs	r2, #70	; 0x46
 8001f2e:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f30:	2301      	movs	r3, #1
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	3301      	adds	r3, #1
 8001f38:	d00c      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0x3c4>
 8001f3a:	f7fe f9bf 	bl	80002bc <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d804      	bhi.n	8001f54 <HAL_SPI_TransmitReceive+0x3c4>
      {
        errorcode = HAL_TIMEOUT;
 8001f4a:	2323      	movs	r3, #35	; 0x23
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2203      	movs	r2, #3
 8001f50:	701a      	strb	r2, [r3, #0]
        goto error;
 8001f52:	e021      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x408>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d000      	beq.n	8001f60 <HAL_SPI_TransmitReceive+0x3d0>
 8001f5e:	e76a      	b.n	8001e36 <HAL_SPI_TransmitReceive+0x2a6>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	5a9b      	ldrh	r3, [r3, r2]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d000      	beq.n	8001f6e <HAL_SPI_TransmitReceive+0x3de>
 8001f6c:	e763      	b.n	8001e36 <HAL_SPI_TransmitReceive+0x2a6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f967 	bl	8002248 <SPI_EndRxTxTransaction>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_SPI_TransmitReceive+0x3f4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2220      	movs	r2, #32
 8001f82:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8001f8c:	2323      	movs	r3, #35	; 0x23
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	e000      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x408>
  }

error :
 8001f96:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	225d      	movs	r2, #93	; 0x5d
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	225c      	movs	r2, #92	; 0x5c
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001fa8:	2323      	movs	r3, #35	; 0x23
 8001faa:	18fb      	adds	r3, r7, r3
 8001fac:	781b      	ldrb	r3, [r3, #0]
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b00a      	add	sp, #40	; 0x28
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	ffffefff 	.word	0xffffefff

08001fbc <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fca:	e050      	b.n	800206e <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	d04d      	beq.n	800206e <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8001fd8:	f7fe f970 	bl	80002bc <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d842      	bhi.n	800206e <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	21e0      	movs	r1, #224	; 0xe0
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	2382      	movs	r3, #130	; 0x82
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	429a      	cmp	r2, r3
 8002002:	d113      	bne.n	800202c <SPI_WaitFlagStateUntilTimeout+0x70>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	429a      	cmp	r2, r3
 800200e:	d005      	beq.n	800201c <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	429a      	cmp	r2, r3
 800201a:	d107      	bne.n	800202c <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2140      	movs	r1, #64	; 0x40
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	429a      	cmp	r2, r3
 8002036:	d110      	bne.n	800205a <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4914      	ldr	r1, [pc, #80]	; (8002094 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002044:	400a      	ands	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	0189      	lsls	r1, r1, #6
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	225d      	movs	r2, #93	; 0x5d
 800205e:	2101      	movs	r1, #1
 8002060:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	225c      	movs	r2, #92	; 0x5c
 8002066:	2100      	movs	r1, #0
 8002068:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e00e      	b.n	800208c <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	d101      	bne.n	8002082 <SPI_WaitFlagStateUntilTimeout+0xc6>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002082:	2300      	movs	r3, #0
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4293      	cmp	r3, r2
 8002088:	d1a0      	bne.n	8001fcc <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	0018      	movs	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	b004      	add	sp, #16
 8002092:	bd80      	pop	{r7, pc}
 8002094:	ffffdfff 	.word	0xffffdfff

08002098 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80020a6:	e062      	b.n	800216e <SPI_WaitFifoStateUntilTimeout+0xd6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d10c      	bne.n	80020cc <SPI_WaitFifoStateUntilTimeout+0x34>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <SPI_WaitFifoStateUntilTimeout+0x34>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	2117      	movs	r1, #23
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80020c8:	187b      	adds	r3, r7, r1
 80020ca:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	d04d      	beq.n	800216e <SPI_WaitFifoStateUntilTimeout+0xd6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <SPI_WaitFifoStateUntilTimeout+0x50>
 80020d8:	f7fe f8f0 	bl	80002bc <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d842      	bhi.n	800216e <SPI_WaitFifoStateUntilTimeout+0xd6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	21e0      	movs	r1, #224	; 0xe0
 80020f4:	438a      	bics	r2, r1
 80020f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	2382      	movs	r3, #130	; 0x82
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	429a      	cmp	r2, r3
 8002102:	d113      	bne.n	800212c <SPI_WaitFifoStateUntilTimeout+0x94>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	2380      	movs	r3, #128	; 0x80
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	429a      	cmp	r2, r3
 800210e:	d005      	beq.n	800211c <SPI_WaitFifoStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	429a      	cmp	r2, r3
 800211a:	d107      	bne.n	800212c <SPI_WaitFifoStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2140      	movs	r1, #64	; 0x40
 8002128:	438a      	bics	r2, r1
 800212a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	019b      	lsls	r3, r3, #6
 8002134:	429a      	cmp	r2, r3
 8002136:	d110      	bne.n	800215a <SPI_WaitFifoStateUntilTimeout+0xc2>
        {
          SPI_RESET_CRC(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4911      	ldr	r1, [pc, #68]	; (8002188 <SPI_WaitFifoStateUntilTimeout+0xf0>)
 8002144:	400a      	ands	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	0189      	lsls	r1, r1, #6
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	225d      	movs	r2, #93	; 0x5d
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	225c      	movs	r2, #92	; 0x5c
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e008      	b.n	8002180 <SPI_WaitFifoStateUntilTimeout+0xe8>
  while ((hspi->Instance->SR & Fifo) != State)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d194      	bne.n	80020a8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b006      	add	sp, #24
 8002186:	bd80      	pop	{r7, pc}
 8002188:	ffffdfff 	.word	0xffffdfff

0800218c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	2382      	movs	r3, #130	; 0x82
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d113      	bne.n	80021cc <SPI_EndRxTransaction+0x40>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d005      	beq.n	80021bc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d107      	bne.n	80021cc <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2140      	movs	r1, #64	; 0x40
 80021c8:	438a      	bics	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	0013      	movs	r3, r2
 80021d6:	2200      	movs	r2, #0
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	f7ff feef 	bl	8001fbc <SPI_WaitFlagStateUntilTimeout>
 80021de:	1e03      	subs	r3, r0, #0
 80021e0:	d007      	beq.n	80021f2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	2220      	movs	r2, #32
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e026      	b.n	8002240 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	2382      	movs	r3, #130	; 0x82
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11f      	bne.n	800223e <SPI_EndRxTransaction+0xb2>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	429a      	cmp	r2, r3
 8002208:	d005      	beq.n	8002216 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	429a      	cmp	r2, r3
 8002214:	d113      	bne.n	800223e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	23c0      	movs	r3, #192	; 0xc0
 800221a:	00d9      	lsls	r1, r3, #3
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	0013      	movs	r3, r2
 8002224:	2200      	movs	r2, #0
 8002226:	f7ff ff37 	bl	8002098 <SPI_WaitFifoStateUntilTimeout>
 800222a:	1e03      	subs	r3, r0, #0
 800222c:	d007      	beq.n	800223e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002232:	2220      	movs	r2, #32
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e000      	b.n	8002240 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}

08002248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	23c0      	movs	r3, #192	; 0xc0
 8002258:	0159      	lsls	r1, r3, #5
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	0013      	movs	r3, r2
 8002262:	2200      	movs	r2, #0
 8002264:	f7ff ff18 	bl	8002098 <SPI_WaitFifoStateUntilTimeout>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d007      	beq.n	800227c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002270:	2220      	movs	r2, #32
 8002272:	431a      	orrs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e027      	b.n	80022cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	0013      	movs	r3, r2
 8002286:	2200      	movs	r2, #0
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	f7ff fe97 	bl	8001fbc <SPI_WaitFlagStateUntilTimeout>
 800228e:	1e03      	subs	r3, r0, #0
 8002290:	d007      	beq.n	80022a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002296:	2220      	movs	r2, #32
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e014      	b.n	80022cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	23c0      	movs	r3, #192	; 0xc0
 80022a6:	00d9      	lsls	r1, r3, #3
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	0013      	movs	r3, r2
 80022b0:	2200      	movs	r2, #0
 80022b2:	f7ff fef1 	bl	8002098 <SPI_WaitFifoStateUntilTimeout>
 80022b6:	1e03      	subs	r3, r0, #0
 80022b8:	d007      	beq.n	80022ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022be:	2220      	movs	r2, #32
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e000      	b.n	80022cc <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	0018      	movs	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b004      	add	sp, #16
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e047      	b.n	8002376 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2269      	movs	r2, #105	; 0x69
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d107      	bne.n	8002302 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2268      	movs	r2, #104	; 0x68
 80022f6:	2100      	movs	r1, #0
 80022f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f003 ff33 	bl	8006168 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2269      	movs	r2, #105	; 0x69
 8002306:	2124      	movs	r1, #36	; 0x24
 8002308:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	438a      	bics	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 f9a3 	bl	8002668 <UART_SetConfig>
 8002322:	0003      	movs	r3, r0
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e024      	b.n	8002376 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0018      	movs	r0, r3
 8002338:	f000 fb0c 	bl	8002954 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_UART_Init+0xac>)
 8002348:	400a      	ands	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2108      	movs	r1, #8
 8002358:	438a      	bics	r2, r1
 800235a:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2101      	movs	r1, #1
 8002368:	430a      	orrs	r2, r1
 800236a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 fba4 	bl	8002abc <UART_CheckIdleState>
 8002374:	0003      	movs	r3, r0
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b002      	add	sp, #8
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	fffff7ff 	.word	0xfffff7ff

08002384 <HAL_UART_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	1dbb      	adds	r3, r7, #6
 8002392:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2269      	movs	r2, #105	; 0x69
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d000      	beq.n	80023a6 <HAL_UART_Transmit+0x22>
 80023a4:	e08c      	b.n	80024c0 <HAL_UART_Transmit+0x13c>
  {
    if((pData == NULL ) || (Size == 0U))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_UART_Transmit+0x30>
 80023ac:	1dbb      	adds	r3, r7, #6
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_UART_Transmit+0x34>
    {
      return  HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e084      	b.n	80024c2 <HAL_UART_Transmit+0x13e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	015b      	lsls	r3, r3, #5
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d109      	bne.n	80023d8 <HAL_UART_Transmit+0x54>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_UART_Transmit+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4013      	ands	r3, r2
 80023d2:	d001      	beq.n	80023d8 <HAL_UART_Transmit+0x54>
      {
        return  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e074      	b.n	80024c2 <HAL_UART_Transmit+0x13e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2268      	movs	r2, #104	; 0x68
 80023dc:	5c9b      	ldrb	r3, [r3, r2]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_UART_Transmit+0x62>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e06d      	b.n	80024c2 <HAL_UART_Transmit+0x13e>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2268      	movs	r2, #104	; 0x68
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2269      	movs	r2, #105	; 0x69
 80023f8:	2121      	movs	r1, #33	; 0x21
 80023fa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80023fc:	f7fd ff5e 	bl	80002bc <HAL_GetTick>
 8002400:	0003      	movs	r3, r0
 8002402:	617b      	str	r3, [r7, #20]

    huart->TxXferSize = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1dba      	adds	r2, r7, #6
 8002408:	2150      	movs	r1, #80	; 0x50
 800240a:	8812      	ldrh	r2, [r2, #0]
 800240c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1dba      	adds	r2, r7, #6
 8002412:	2152      	movs	r1, #82	; 0x52
 8002414:	8812      	ldrh	r2, [r2, #0]
 8002416:	525a      	strh	r2, [r3, r1]
    while(huart->TxXferCount > 0)
 8002418:	e035      	b.n	8002486 <HAL_UART_Transmit+0x102>
    {
      huart->TxXferCount--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2252      	movs	r2, #82	; 0x52
 800241e:	5a9b      	ldrh	r3, [r3, r2]
 8002420:	b29b      	uxth	r3, r3
 8002422:	3b01      	subs	r3, #1
 8002424:	b299      	uxth	r1, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2252      	movs	r2, #82	; 0x52
 800242a:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	0013      	movs	r3, r2
 8002436:	2200      	movs	r2, #0
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	f000 fb57 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 800243e:	1e03      	subs	r3, r0, #0
 8002440:	d001      	beq.n	8002446 <HAL_UART_Transmit+0xc2>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e03d      	b.n	80024c2 <HAL_UART_Transmit+0x13e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	429a      	cmp	r2, r3
 8002450:	d111      	bne.n	8002476 <HAL_UART_Transmit+0xf2>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_UART_Transmit+0xf2>
      {
        tmp = (uint16_t*) pData;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	05d2      	lsls	r2, r2, #23
 8002468:	0dd2      	lsrs	r2, r2, #23
 800246a:	b292      	uxth	r2, r2
 800246c:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3302      	adds	r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	e007      	b.n	8002486 <HAL_UART_Transmit+0x102>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	60ba      	str	r2, [r7, #8]
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	b292      	uxth	r2, r2
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2252      	movs	r2, #82	; 0x52
 800248a:	5a9b      	ldrh	r3, [r3, r2]
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1c3      	bne.n	800241a <HAL_UART_Transmit+0x96>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	0013      	movs	r3, r2
 800249c:	2200      	movs	r2, #0
 800249e:	2140      	movs	r1, #64	; 0x40
 80024a0:	f000 fb24 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0x128>
    {
      return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e00a      	b.n	80024c2 <HAL_UART_Transmit+0x13e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2269      	movs	r2, #105	; 0x69
 80024b0:	2120      	movs	r1, #32
 80024b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2268      	movs	r2, #104	; 0x68
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_UART_Transmit+0x13e>
  }
  else
  {
    return HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
  }
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b006      	add	sp, #24
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_UART_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	1dbb      	adds	r3, r7, #6
 80024da:	801a      	strh	r2, [r3, #0]
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	226a      	movs	r2, #106	; 0x6a
 80024e4:	5c9b      	ldrb	r3, [r3, r2]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d000      	beq.n	80024ee <HAL_UART_Receive+0x22>
 80024ec:	e0b4      	b.n	8002658 <HAL_UART_Receive+0x18c>
  {
    if((pData == NULL ) || (Size == 0U))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_UART_Receive+0x30>
 80024f4:	1dbb      	adds	r3, r7, #6
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_UART_Receive+0x34>
    {
      return  HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e0ac      	b.n	800265a <HAL_UART_Receive+0x18e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	015b      	lsls	r3, r3, #5
 8002508:	429a      	cmp	r2, r3
 800250a:	d109      	bne.n	8002520 <HAL_UART_Receive+0x54>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_UART_Receive+0x54>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d001      	beq.n	8002520 <HAL_UART_Receive+0x54>
      {
        return  HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e09c      	b.n	800265a <HAL_UART_Receive+0x18e>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2268      	movs	r2, #104	; 0x68
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_UART_Receive+0x62>
 800252a:	2302      	movs	r3, #2
 800252c:	e095      	b.n	800265a <HAL_UART_Receive+0x18e>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2268      	movs	r2, #104	; 0x68
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	226a      	movs	r2, #106	; 0x6a
 8002540:	2122      	movs	r1, #34	; 0x22
 8002542:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002544:	f7fd feba 	bl	80002bc <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	61fb      	str	r3, [r7, #28]

    huart->RxXferSize = Size;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1dba      	adds	r2, r7, #6
 8002550:	2158      	movs	r1, #88	; 0x58
 8002552:	8812      	ldrh	r2, [r2, #0]
 8002554:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1dba      	adds	r2, r7, #6
 800255a:	215a      	movs	r1, #90	; 0x5a
 800255c:	8812      	ldrh	r2, [r2, #0]
 800255e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	015b      	lsls	r3, r3, #5
 8002568:	429a      	cmp	r2, r3
 800256a:	d10d      	bne.n	8002588 <HAL_UART_Receive+0xbc>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <HAL_UART_Receive+0xb2>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	225c      	movs	r2, #92	; 0x5c
 8002578:	493a      	ldr	r1, [pc, #232]	; (8002664 <HAL_UART_Receive+0x198>)
 800257a:	5299      	strh	r1, [r3, r2]
 800257c:	e015      	b.n	80025aa <HAL_UART_Receive+0xde>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	225c      	movs	r2, #92	; 0x5c
 8002582:	21ff      	movs	r1, #255	; 0xff
 8002584:	5299      	strh	r1, [r3, r2]
 8002586:	e010      	b.n	80025aa <HAL_UART_Receive+0xde>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10c      	bne.n	80025aa <HAL_UART_Receive+0xde>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d104      	bne.n	80025a2 <HAL_UART_Receive+0xd6>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	225c      	movs	r2, #92	; 0x5c
 800259c:	21ff      	movs	r1, #255	; 0xff
 800259e:	5299      	strh	r1, [r3, r2]
 80025a0:	e003      	b.n	80025aa <HAL_UART_Receive+0xde>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	225c      	movs	r2, #92	; 0x5c
 80025a6:	217f      	movs	r1, #127	; 0x7f
 80025a8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80025aa:	231a      	movs	r3, #26
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	215c      	movs	r1, #92	; 0x5c
 80025b2:	5a52      	ldrh	r2, [r2, r1]
 80025b4:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 80025b6:	e03f      	b.n	8002638 <HAL_UART_Receive+0x16c>
    {
      huart->RxXferCount--;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	225a      	movs	r2, #90	; 0x5a
 80025bc:	5a9b      	ldrh	r3, [r3, r2]
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b299      	uxth	r1, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	225a      	movs	r2, #90	; 0x5a
 80025c8:	5299      	strh	r1, [r3, r2]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0013      	movs	r3, r2
 80025d4:	2200      	movs	r2, #0
 80025d6:	2120      	movs	r1, #32
 80025d8:	f000 fa88 	bl	8002aec <UART_WaitOnFlagUntilTimeout>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_Receive+0x118>
      {
        return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e03a      	b.n	800265a <HAL_UART_Receive+0x18e>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d114      	bne.n	800261a <HAL_UART_Receive+0x14e>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d110      	bne.n	800261a <HAL_UART_Receive+0x14e>
      {
        tmp = (uint16_t*) pData ;
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	617b      	str	r3, [r7, #20]
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002602:	b29b      	uxth	r3, r3
 8002604:	221a      	movs	r2, #26
 8002606:	18ba      	adds	r2, r7, r2
 8002608:	8812      	ldrh	r2, [r2, #0]
 800260a:	4013      	ands	r3, r2
 800260c:	b29a      	uxth	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	801a      	strh	r2, [r3, #0]
        pData +=2U;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3302      	adds	r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	e00e      	b.n	8002638 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002620:	b29b      	uxth	r3, r3
 8002622:	b2da      	uxtb	r2, r3
 8002624:	231a      	movs	r3, #26
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	b2d9      	uxtb	r1, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1c58      	adds	r0, r3, #1
 8002630:	60b8      	str	r0, [r7, #8]
 8002632:	400a      	ands	r2, r1
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	225a      	movs	r2, #90	; 0x5a
 800263c:	5a9b      	ldrh	r3, [r3, r2]
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1b9      	bne.n	80025b8 <HAL_UART_Receive+0xec>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	226a      	movs	r2, #106	; 0x6a
 8002648:	2120      	movs	r1, #32
 800264a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2268      	movs	r2, #104	; 0x68
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	e000      	b.n	800265a <HAL_UART_Receive+0x18e>
  }
  else
  {
    return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
  }
}
 800265a:	0018      	movs	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	b008      	add	sp, #32
 8002660:	bd80      	pop	{r7, pc}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	000001ff 	.word	0x000001ff

08002668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002674:	2317      	movs	r3, #23
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2210      	movs	r2, #16
 800267a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800267c:	230a      	movs	r3, #10
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2200      	movs	r2, #0
 8002682:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002684:	2314      	movs	r3, #20
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	2200      	movs	r2, #0
 800268a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800268c:	2313      	movs	r3, #19
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4aa0      	ldr	r2, [pc, #640]	; (8002934 <UART_SetConfig+0x2cc>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a9b      	ldr	r2, [pc, #620]	; (8002938 <UART_SetConfig+0x2d0>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a93      	ldr	r2, [pc, #588]	; (800293c <UART_SetConfig+0x2d4>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	0019      	movs	r1, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a8f      	ldr	r2, [pc, #572]	; (8002940 <UART_SetConfig+0x2d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d125      	bne.n	8002752 <UART_SetConfig+0xea>
 8002706:	4b8f      	ldr	r3, [pc, #572]	; (8002944 <UART_SetConfig+0x2dc>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	2203      	movs	r2, #3
 800270c:	4013      	ands	r3, r2
 800270e:	2b01      	cmp	r3, #1
 8002710:	d00f      	beq.n	8002732 <UART_SetConfig+0xca>
 8002712:	d304      	bcc.n	800271e <UART_SetConfig+0xb6>
 8002714:	2b02      	cmp	r3, #2
 8002716:	d011      	beq.n	800273c <UART_SetConfig+0xd4>
 8002718:	2b03      	cmp	r3, #3
 800271a:	d005      	beq.n	8002728 <UART_SetConfig+0xc0>
 800271c:	e013      	b.n	8002746 <UART_SetConfig+0xde>
 800271e:	2317      	movs	r3, #23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	e022      	b.n	800276e <UART_SetConfig+0x106>
 8002728:	2317      	movs	r3, #23
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2202      	movs	r2, #2
 800272e:	701a      	strb	r2, [r3, #0]
 8002730:	e01d      	b.n	800276e <UART_SetConfig+0x106>
 8002732:	2317      	movs	r3, #23
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	2204      	movs	r2, #4
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e018      	b.n	800276e <UART_SetConfig+0x106>
 800273c:	2317      	movs	r3, #23
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2208      	movs	r2, #8
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e013      	b.n	800276e <UART_SetConfig+0x106>
 8002746:	2317      	movs	r3, #23
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2210      	movs	r2, #16
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	e00d      	b.n	800276e <UART_SetConfig+0x106>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7c      	ldr	r2, [pc, #496]	; (8002948 <UART_SetConfig+0x2e0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d104      	bne.n	8002766 <UART_SetConfig+0xfe>
 800275c:	2317      	movs	r3, #23
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	2200      	movs	r2, #0
 8002762:	701a      	strb	r2, [r3, #0]
 8002764:	e003      	b.n	800276e <UART_SetConfig+0x106>
 8002766:	2317      	movs	r3, #23
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	2210      	movs	r2, #16
 800276c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	429a      	cmp	r2, r3
 8002778:	d000      	beq.n	800277c <UART_SetConfig+0x114>
 800277a:	e077      	b.n	800286c <UART_SetConfig+0x204>
  {
    switch (clocksource)
 800277c:	2317      	movs	r3, #23
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d01c      	beq.n	80027c0 <UART_SetConfig+0x158>
 8002786:	dc02      	bgt.n	800278e <UART_SetConfig+0x126>
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <UART_SetConfig+0x130>
 800278c:	e04f      	b.n	800282e <UART_SetConfig+0x1c6>
 800278e:	2b04      	cmp	r3, #4
 8002790:	d027      	beq.n	80027e2 <UART_SetConfig+0x17a>
 8002792:	2b08      	cmp	r3, #8
 8002794:	d039      	beq.n	800280a <UART_SetConfig+0x1a2>
 8002796:	e04a      	b.n	800282e <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002798:	f7fe fea2 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
 800279c:	0003      	movs	r3, r0
 800279e:	005a      	lsls	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	18d2      	adds	r2, r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0019      	movs	r1, r3
 80027ae:	0010      	movs	r0, r2
 80027b0:	f7fd fcbc 	bl	800012c <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	001a      	movs	r2, r3
 80027b8:	2314      	movs	r3, #20
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	801a      	strh	r2, [r3, #0]
        break;
 80027be:	e03b      	b.n	8002838 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	4a61      	ldr	r2, [pc, #388]	; (800294c <UART_SetConfig+0x2e4>)
 80027c8:	189a      	adds	r2, r3, r2
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	0019      	movs	r1, r3
 80027d0:	0010      	movs	r0, r2
 80027d2:	f7fd fcab 	bl	800012c <__udivsi3>
 80027d6:	0003      	movs	r3, r0
 80027d8:	001a      	movs	r2, r3
 80027da:	2314      	movs	r3, #20
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	801a      	strh	r2, [r3, #0]
        break;
 80027e0:	e02a      	b.n	8002838 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027e2:	f7fe fe0f 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80027e6:	0003      	movs	r3, r0
 80027e8:	005a      	lsls	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	085b      	lsrs	r3, r3, #1
 80027f0:	18d2      	adds	r2, r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f7fd fc97 	bl	800012c <__udivsi3>
 80027fe:	0003      	movs	r3, r0
 8002800:	001a      	movs	r2, r3
 8002802:	2314      	movs	r3, #20
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	801a      	strh	r2, [r3, #0]
        break;
 8002808:	e016      	b.n	8002838 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	0252      	lsls	r2, r2, #9
 8002814:	189a      	adds	r2, r3, r2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	0019      	movs	r1, r3
 800281c:	0010      	movs	r0, r2
 800281e:	f7fd fc85 	bl	800012c <__udivsi3>
 8002822:	0003      	movs	r3, r0
 8002824:	001a      	movs	r2, r3
 8002826:	2314      	movs	r3, #20
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	801a      	strh	r2, [r3, #0]
        break;
 800282c:	e004      	b.n	8002838 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800282e:	2313      	movs	r3, #19
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
        break;
 8002836:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002838:	200a      	movs	r0, #10
 800283a:	183b      	adds	r3, r7, r0
 800283c:	2414      	movs	r4, #20
 800283e:	193a      	adds	r2, r7, r4
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	210f      	movs	r1, #15
 8002844:	438a      	bics	r2, r1
 8002846:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002848:	193b      	adds	r3, r7, r4
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	105b      	asrs	r3, r3, #1
 800284e:	b29b      	uxth	r3, r3
 8002850:	2207      	movs	r2, #7
 8002852:	4013      	ands	r3, r2
 8002854:	b299      	uxth	r1, r3
 8002856:	183b      	adds	r3, r7, r0
 8002858:	183a      	adds	r2, r7, r0
 800285a:	8812      	ldrh	r2, [r2, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	183a      	adds	r2, r7, r0
 8002866:	8812      	ldrh	r2, [r2, #0]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	e05b      	b.n	8002924 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 800286c:	2317      	movs	r3, #23
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d01b      	beq.n	80028ae <UART_SetConfig+0x246>
 8002876:	dc02      	bgt.n	800287e <UART_SetConfig+0x216>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <UART_SetConfig+0x220>
 800287c:	e04d      	b.n	800291a <UART_SetConfig+0x2b2>
 800287e:	2b04      	cmp	r3, #4
 8002880:	d026      	beq.n	80028d0 <UART_SetConfig+0x268>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d037      	beq.n	80028f6 <UART_SetConfig+0x28e>
 8002886:	e048      	b.n	800291a <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002888:	f7fe fe2a 	bl	80014e0 <HAL_RCC_GetPCLK1Freq>
 800288c:	0002      	movs	r2, r0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	18d2      	adds	r2, r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0019      	movs	r1, r3
 800289c:	0010      	movs	r0, r2
 800289e:	f7fd fc45 	bl	800012c <__udivsi3>
 80028a2:	0003      	movs	r3, r0
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60da      	str	r2, [r3, #12]
        break;
 80028ac:	e03a      	b.n	8002924 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	4a26      	ldr	r2, [pc, #152]	; (8002950 <UART_SetConfig+0x2e8>)
 80028b6:	189a      	adds	r2, r3, r2
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0019      	movs	r1, r3
 80028be:	0010      	movs	r0, r2
 80028c0:	f7fd fc34 	bl	800012c <__udivsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60da      	str	r2, [r3, #12]
        break;
 80028ce:	e029      	b.n	8002924 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028d0:	f7fe fd98 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80028d4:	0002      	movs	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	18d2      	adds	r2, r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0019      	movs	r1, r3
 80028e4:	0010      	movs	r0, r2
 80028e6:	f7fd fc21 	bl	800012c <__udivsi3>
 80028ea:	0003      	movs	r3, r0
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60da      	str	r2, [r3, #12]
        break;
 80028f4:	e016      	b.n	8002924 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	2280      	movs	r2, #128	; 0x80
 80028fe:	0212      	lsls	r2, r2, #8
 8002900:	189a      	adds	r2, r3, r2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0019      	movs	r1, r3
 8002908:	0010      	movs	r0, r2
 800290a:	f7fd fc0f 	bl	800012c <__udivsi3>
 800290e:	0003      	movs	r3, r0
 8002910:	b29a      	uxth	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60da      	str	r2, [r3, #12]
        break;
 8002918:	e004      	b.n	8002924 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800291a:	2313      	movs	r3, #19
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
        break;
 8002922:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002924:	2313      	movs	r3, #19
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]

}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b007      	add	sp, #28
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	ffff69f3 	.word	0xffff69f3
 8002938:	ffffcfff 	.word	0xffffcfff
 800293c:	fffff4ff 	.word	0xfffff4ff
 8002940:	40013800 	.word	0x40013800
 8002944:	40021000 	.word	0x40021000
 8002948:	40004400 	.word	0x40004400
 800294c:	00f42400 	.word	0x00f42400
 8002950:	007a1200 	.word	0x007a1200

08002954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	d00b      	beq.n	800297e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <UART_AdvFeatureConfig+0x144>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d00b      	beq.n	80029a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <UART_AdvFeatureConfig+0x148>)
 8002990:	4013      	ands	r3, r2
 8002992:	0019      	movs	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4a3b      	ldr	r2, [pc, #236]	; (8002aa0 <UART_AdvFeatureConfig+0x14c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	2208      	movs	r2, #8
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4a34      	ldr	r2, [pc, #208]	; (8002aa4 <UART_AdvFeatureConfig+0x150>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2210      	movs	r2, #16
 80029ea:	4013      	ands	r3, r2
 80029ec:	d00b      	beq.n	8002a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <UART_AdvFeatureConfig+0x154>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4a25      	ldr	r2, [pc, #148]	; (8002aac <UART_AdvFeatureConfig+0x158>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d01d      	beq.n	8002a6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <UART_AdvFeatureConfig+0x15c>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4e:	2380      	movs	r3, #128	; 0x80
 8002a50:	035b      	lsls	r3, r3, #13
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d10b      	bne.n	8002a6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a15      	ldr	r2, [pc, #84]	; (8002ab4 <UART_AdvFeatureConfig+0x160>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	0019      	movs	r1, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4013      	ands	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <UART_AdvFeatureConfig+0x164>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	0019      	movs	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	605a      	str	r2, [r3, #4]
  }
}
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	46bd      	mov	sp, r7
 8002a94:	b002      	add	sp, #8
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	fffdffff 	.word	0xfffdffff
 8002a9c:	fffeffff 	.word	0xfffeffff
 8002aa0:	fffbffff 	.word	0xfffbffff
 8002aa4:	ffff7fff 	.word	0xffff7fff
 8002aa8:	ffffefff 	.word	0xffffefff
 8002aac:	ffffdfff 	.word	0xffffdfff
 8002ab0:	ffefffff 	.word	0xffefffff
 8002ab4:	ff9fffff 	.word	0xff9fffff
 8002ab8:	fff7ffff 	.word	0xfff7ffff

08002abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2269      	movs	r2, #105	; 0x69
 8002ace:	2120      	movs	r1, #32
 8002ad0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	226a      	movs	r2, #106	; 0x6a
 8002ad6:	2120      	movs	r1, #32
 8002ad8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2268      	movs	r2, #104	; 0x68
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b002      	add	sp, #8
 8002aea:	bd80      	pop	{r7, pc}

08002aec <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002afc:	e02b      	b.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	3301      	adds	r3, #1
 8002b02:	d028      	beq.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d007      	beq.n	8002b1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b0a:	f7fd fbd7 	bl	80002bc <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d21d      	bcs.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4916      	ldr	r1, [pc, #88]	; (8002b80 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	438a      	bics	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2269      	movs	r2, #105	; 0x69
 8002b3e:	2120      	movs	r1, #32
 8002b40:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	226a      	movs	r2, #106	; 0x6a
 8002b46:	2120      	movs	r1, #32
 8002b48:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2268      	movs	r2, #104	; 0x68
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e00f      	b.n	8002b76 <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	425a      	negs	r2, r3
 8002b66:	4153      	adcs	r3, r2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	1dfb      	adds	r3, r7, #7
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d0c4      	beq.n	8002afe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	0018      	movs	r0, r3
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	fffffe5f 	.word	0xfffffe5f

08002b84 <CH395SetBuffer>:

#include <CH395.h>
#include <CH395CMD.h>
#include "Delay.h"
void CH395SetBuffer() // use all 8 sockets
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t blk = 0;
 8002b8a:	1dbb      	adds	r3, r7, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]
 8002b96:	e01e      	b.n	8002bd6 <CH395SetBuffer+0x52>
	{
		CH395SetSocketRecvBuf(i, blk, 3);
 8002b98:	1dbb      	adds	r3, r7, #6
 8002b9a:	7819      	ldrb	r1, [r3, #0]
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f000 fcc6 	bl	8003534 <CH395SetSocketRecvBuf>
		blk += 3;
 8002ba8:	1dbb      	adds	r3, r7, #6
 8002baa:	1dba      	adds	r2, r7, #6
 8002bac:	7812      	ldrb	r2, [r2, #0]
 8002bae:	3203      	adds	r2, #3
 8002bb0:	701a      	strb	r2, [r3, #0]
		CH395SetSocketSendBuf(i, blk, 3);
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	7819      	ldrb	r1, [r3, #0]
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fcde 	bl	800357e <CH395SetSocketSendBuf>
		blk += 3;
 8002bc2:	1dbb      	adds	r3, r7, #6
 8002bc4:	1dba      	adds	r2, r7, #6
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	3203      	adds	r2, #3
 8002bca:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	1dfa      	adds	r2, r7, #7
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	3201      	adds	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b07      	cmp	r3, #7
 8002bdc:	d9dc      	bls.n	8002b98 <CH395SetBuffer+0x14>
	}
}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b002      	add	sp, #8
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <CH395TCPServerStart>:

BOOL CH395TCPServerStart(uint32_t ip, uint16_t port)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	000a      	movs	r2, r1
 8002bf2:	1cbb      	adds	r3, r7, #2
 8002bf4:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	// Initialize Stack
	CH395CMDInitCH395();
 8002bf6:	f000 f8c1 	bl	8002d7c <CH395CMDInitCH395>
	ch395.RX_received = 0;
 8002bfa:	4b35      	ldr	r3, [pc, #212]	; (8002cd0 <CH395TCPServerStart+0xe8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	705a      	strb	r2, [r3, #1]
	ch395.TX_available= 0;
 8002c00:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <CH395TCPServerStart+0xe8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	70da      	strb	r2, [r3, #3]
	ch395.SOCK_responding = -1;
 8002c06:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <CH395TCPServerStart+0xe8>)
 8002c08:	22ff      	movs	r2, #255	; 0xff
 8002c0a:	709a      	strb	r2, [r3, #2]
	// Check PHY
	i=0;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
	do
	{
		uint8_t phy = CH395CMDGetPHYStatus();
 8002c14:	250e      	movs	r5, #14
 8002c16:	197c      	adds	r4, r7, r5
 8002c18:	f000 f894 	bl	8002d44 <CH395CMDGetPHYStatus>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	7023      	strb	r3, [r4, #0]
		if(phy != PHY_DISCONN) break; // PHY connected
 8002c20:	197b      	adds	r3, r7, r5
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10e      	bne.n	8002c46 <CH395TCPServerStart+0x5e>
		++i;
 8002c28:	240f      	movs	r4, #15
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	193a      	adds	r2, r7, r4
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	3201      	adds	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
		Delay_ms(100);
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <CH395TCPServerStart+0xec>)
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 fd60 	bl	80036fc <Delay_us>
	}while(i<20);
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b13      	cmp	r3, #19
 8002c42:	d9e7      	bls.n	8002c14 <CH395TCPServerStart+0x2c>
 8002c44:	e000      	b.n	8002c48 <CH395TCPServerStart+0x60>
		if(phy != PHY_DISCONN) break; // PHY connected
 8002c46:	46c0      	nop			; (mov r8, r8)
	if(i >= 20) return false;
 8002c48:	230f      	movs	r3, #15
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b13      	cmp	r3, #19
 8002c50:	d901      	bls.n	8002c56 <CH395TCPServerStart+0x6e>
 8002c52:	2300      	movs	r3, #0
 8002c54:	e038      	b.n	8002cc8 <CH395TCPServerStart+0xe0>
	// DHCP
	if(CH395DHCPEnable(true) != 0)
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 fc12 	bl	8003480 <CH395DHCPEnable>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d007      	beq.n	8002c70 <CH395TCPServerStart+0x88>
	{
		// DHCP not enabled
		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 f8dc 	bl	8002e20 <CH395CMDSetIPAddr>
		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 f904 	bl	8002e78 <CH395CMDSetGWIPAddr>
	}
	//enable multi connections
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER);
 8002c70:	2002      	movs	r0, #2
 8002c72:	f000 fca9 	bl	80035c8 <CH395SetStartPara>
	// set sockets
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e013      	b.n	8002ca8 <CH395TCPServerStart+0xc0>
	{
		CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET 0 to be TCP server
 8002c80:	240f      	movs	r4, #15
 8002c82:	193b      	adds	r3, r7, r4
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2103      	movs	r1, #3
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f000 f94d 	bl	8002f28 <CH395SetSocketProtType>
		CH395SetSocketSourPort(i, port);
 8002c8e:	1cbb      	adds	r3, r7, #2
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 f969 	bl	8002f70 <CH395SetSocketSourPort>
	for(i=0; i<CH395_SOCKS_AVAIL; ++i)
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	193a      	adds	r2, r7, r4
 8002ca2:	7812      	ldrb	r2, [r2, #0]
 8002ca4:	3201      	adds	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	230f      	movs	r3, #15
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b07      	cmp	r3, #7
 8002cb0:	d9e6      	bls.n	8002c80 <CH395TCPServerStart+0x98>
	}

	CH395OpenSocket(0); // open socket 0
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	f000 faf6 	bl	80032a4 <CH395OpenSocket>
	uint8_t s = CH395TCPListen(0); // start lisening
 8002cb8:	230d      	movs	r3, #13
 8002cba:	18fc      	adds	r4, r7, r3
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f000 fb33 	bl	8003328 <CH395TCPListen>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	7023      	strb	r3, [r4, #0]
	return true;
 8002cc6:	2301      	movs	r3, #1
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b004      	add	sp, #16
 8002cce:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	000186a0 	.word	0x000186a0

08002cd8 <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
    xWriteCH395Cmd(CMD00_RESET_ALL);
 8002cdc:	2005      	movs	r0, #5
 8002cde:	f000 fcc1 	bl	8003664 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <CH395CMDReset+0x20>)
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <CH395CMDReset+0x20>)
 8002ce8:	889b      	ldrh	r3, [r3, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	0019      	movs	r1, r3
 8002cee:	f7fd ff36 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000804 	.word	0x20000804

08002cfc <CH395CMDCheckExist>:
* Input          : testdata 1字节测试数据
* Output         : None
* Return         : 硬件OK，返回 testdata按位取反
*******************************************************************************/
uint8_t CH395CMDCheckExist(uint8_t testdata)
{
 8002cfc:	b5b0      	push	{r4, r5, r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    xWriteCH395Cmd(CMD11_CHECK_EXIST);
 8002d08:	2006      	movs	r0, #6
 8002d0a:	f000 fcab 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(testdata);
 8002d0e:	1dfb      	adds	r3, r7, #7
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 fcce 	bl	80036b4 <xWriteCH395Data>
    i = xReadCH395Data();
 8002d18:	250f      	movs	r5, #15
 8002d1a:	197c      	adds	r4, r7, r5
 8002d1c:	f000 fcdc 	bl	80036d8 <xReadCH395Data>
 8002d20:	0003      	movs	r3, r0
 8002d22:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <CH395CMDCheckExist+0x44>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <CH395CMDCheckExist+0x44>)
 8002d2a:	889b      	ldrh	r3, [r3, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	0019      	movs	r1, r3
 8002d30:	f7fd ff15 	bl	8000b5e <HAL_GPIO_WritePin>
    return i;
 8002d34:	197b      	adds	r3, r7, r5
 8002d36:	781b      	ldrb	r3, [r3, #0]
}
 8002d38:	0018      	movs	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d40:	20000804 	.word	0x20000804

08002d44 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 8002d4a:	2026      	movs	r0, #38	; 0x26
 8002d4c:	f000 fc8a 	bl	8003664 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8002d50:	1dfc      	adds	r4, r7, #7
 8002d52:	f000 fcc1 	bl	80036d8 <xReadCH395Data>
 8002d56:	0003      	movs	r3, r0
 8002d58:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <CH395CMDGetPHYStatus+0x34>)
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <CH395CMDGetPHYStatus+0x34>)
 8002d60:	889b      	ldrh	r3, [r3, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	0019      	movs	r1, r3
 8002d66:	f7fd fefa 	bl	8000b5e <HAL_GPIO_WritePin>
    return i;
 8002d6a:	1dfb      	adds	r3, r7, #7
 8002d6c:	781b      	ldrb	r3, [r3, #0]
}
 8002d6e:	0018      	movs	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b003      	add	sp, #12
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	20000804 	.word	0x20000804

08002d7c <CH395CMDInitCH395>:
* Input          : None
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395CMDInitCH395(void)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 8002d88:	1dbb      	adds	r3, r7, #6
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]

    xWriteCH395Cmd(CMD0W_INIT_CH395);
 8002d8e:	2027      	movs	r0, #39	; 0x27
 8002d90:	f000 fc68 	bl	8003664 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <CH395CMDInitCH395+0x64>)
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <CH395CMDInitCH395+0x64>)
 8002d9a:	889b      	ldrh	r3, [r3, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	0019      	movs	r1, r3
 8002da0:	f7fd fedd 	bl	8000b5e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <CH395CMDInitCH395+0x68>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fca8 	bl	80036fc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8002dac:	1dbc      	adds	r4, r7, #6
 8002dae:	f000 f81b 	bl	8002de8 <CH395GetCmdStatus>
 8002db2:	0003      	movs	r3, r0
 8002db4:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8002db6:	1dbb      	adds	r3, r7, #6
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b10      	cmp	r3, #16
 8002dbc:	d108      	bne.n	8002dd0 <CH395CMDInitCH395+0x54>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	1dfa      	adds	r2, r7, #7
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	7011      	strb	r1, [r2, #0]
 8002dc8:	2bc8      	cmp	r3, #200	; 0xc8
 8002dca:	d9eb      	bls.n	8002da4 <CH395CMDInitCH395+0x28>
 8002dcc:	23fa      	movs	r3, #250	; 0xfa
 8002dce:	e002      	b.n	8002dd6 <CH395CMDInitCH395+0x5a>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8002dd0:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	781b      	ldrb	r3, [r3, #0]
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b003      	add	sp, #12
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	20000804 	.word	0x20000804
 8002de4:	00002710 	.word	0x00002710

08002de8 <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 8002dee:	202c      	movs	r0, #44	; 0x2c
 8002df0:	f000 fc38 	bl	8003664 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8002df4:	1dfc      	adds	r4, r7, #7
 8002df6:	f000 fc6f 	bl	80036d8 <xReadCH395Data>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <CH395GetCmdStatus+0x34>)
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <CH395GetCmdStatus+0x34>)
 8002e04:	889b      	ldrh	r3, [r3, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	0019      	movs	r1, r3
 8002e0a:	f7fd fea8 	bl	8000b5e <HAL_GPIO_WritePin>
    return i;
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	781b      	ldrb	r3, [r3, #0]
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b003      	add	sp, #12
 8002e18:	bd90      	pop	{r4, r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000804 	.word	0x20000804

08002e20 <CH395CMDSetIPAddr>:
* Input          : ipaddr 指IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetIPAddr(uint8_t *ipaddr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_IP_ADDR);
 8002e28:	2022      	movs	r0, #34	; 0x22
 8002e2a:	f000 fc1b 	bl	8003664 <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*ipaddr++);
 8002e2e:	230f      	movs	r3, #15
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
 8002e36:	e00c      	b.n	8002e52 <CH395CMDSetIPAddr+0x32>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	607a      	str	r2, [r7, #4]
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f000 fc37 	bl	80036b4 <xWriteCH395Data>
 8002e46:	210f      	movs	r1, #15
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	781a      	ldrb	r2, [r3, #0]
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	3201      	adds	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	230f      	movs	r3, #15
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d9ed      	bls.n	8002e38 <CH395CMDSetIPAddr+0x18>
    xEndCH395Cmd();
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <CH395CMDSetIPAddr+0x54>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <CH395CMDSetIPAddr+0x54>)
 8002e62:	889b      	ldrh	r3, [r3, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	0019      	movs	r1, r3
 8002e68:	f7fd fe79 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b004      	add	sp, #16
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20000804 	.word	0x20000804

08002e78 <CH395CMDSetGWIPAddr>:
* Input          : ipaddr 指向网关IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDSetGWIPAddr(uint8_t *gwipaddr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD40_SET_GWIP_ADDR);
 8002e80:	2023      	movs	r0, #35	; 0x23
 8002e82:	f000 fbef 	bl	8003664 <xWriteCH395Cmd>
    for(i = 0; i < 4;i++)xWriteCH395Data(*gwipaddr++);
 8002e86:	230f      	movs	r3, #15
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e00c      	b.n	8002eaa <CH395CMDSetGWIPAddr+0x32>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f000 fc0b 	bl	80036b4 <xWriteCH395Data>
 8002e9e:	210f      	movs	r1, #15
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	3201      	adds	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
 8002eaa:	230f      	movs	r3, #15
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d9ed      	bls.n	8002e90 <CH395CMDSetGWIPAddr+0x18>
    xEndCH395Cmd();
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <CH395CMDSetGWIPAddr+0x54>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <CH395CMDSetGWIPAddr+0x54>)
 8002eba:	889b      	ldrh	r3, [r3, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	f7fd fe4d 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000804 	.word	0x20000804

08002ed0 <CH395CMDGetUnreachIPPT>:
                        第4-8字节为IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDGetUnreachIPPT(uint8_t *list)
{
 8002ed0:	b590      	push	{r4, r7, lr}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD08_GET_UNREACH_IPPORT);
 8002ed8:	2028      	movs	r0, #40	; 0x28
 8002eda:	f000 fbc3 	bl	8003664 <xWriteCH395Cmd>
    for(i = 0; i < 8; i++)
 8002ede:	230f      	movs	r3, #15
 8002ee0:	18fb      	adds	r3, r7, r3
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	e00c      	b.n	8002f02 <CH395CMDGetUnreachIPPT+0x32>
    {
        *list++ = xReadCH395Data();
 8002ee8:	687c      	ldr	r4, [r7, #4]
 8002eea:	1c63      	adds	r3, r4, #1
 8002eec:	607b      	str	r3, [r7, #4]
 8002eee:	f000 fbf3 	bl	80036d8 <xReadCH395Data>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 8; i++)
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	187b      	adds	r3, r7, r1
 8002efa:	781a      	ldrb	r2, [r3, #0]
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	3201      	adds	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	230f      	movs	r3, #15
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d9ed      	bls.n	8002ee8 <CH395CMDGetUnreachIPPT+0x18>
    }   
    xEndCH395Cmd();
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <CH395CMDGetUnreachIPPT+0x54>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <CH395CMDGetUnreachIPPT+0x54>)
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	0019      	movs	r1, r3
 8002f18:	f7fd fe21 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b005      	add	sp, #20
 8002f22:	bd90      	pop	{r4, r7, pc}
 8002f24:	20000804 	.word	0x20000804

08002f28 <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	0002      	movs	r2, r0
 8002f30:	1dfb      	adds	r3, r7, #7
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	1dbb      	adds	r3, r7, #6
 8002f36:	1c0a      	adds	r2, r1, #0
 8002f38:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 8002f3a:	2034      	movs	r0, #52	; 0x34
 8002f3c:	f000 fb92 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 fbb5 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data(prottype);
 8002f4a:	1dbb      	adds	r3, r7, #6
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 fbb0 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 8002f54:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <CH395SetSocketProtType+0x44>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <CH395SetSocketProtType+0x44>)
 8002f5a:	889b      	ldrh	r3, [r3, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	0019      	movs	r1, r3
 8002f60:	f7fd fdfd 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000804 	.word	0x20000804

08002f70 <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	1c0a      	adds	r2, r1, #0
 8002f80:	801a      	strh	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 8002f82:	2033      	movs	r0, #51	; 0x33
 8002f84:	f000 fb6e 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8002f88:	1dfb      	adds	r3, r7, #7
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fb91 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 8002f92:	1d3b      	adds	r3, r7, #4
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f000 fb8b 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 fb83 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <CH395SetSocketSourPort+0x58>)
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <CH395SetSocketSourPort+0x58>)
 8002fb4:	889b      	ldrh	r3, [r3, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	0019      	movs	r1, r3
 8002fba:	f7fd fdd0 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20000804 	.word	0x20000804

08002fcc <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,const uint8_t *databuf,uint16_t len)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6039      	str	r1, [r7, #0]
 8002fd4:	0011      	movs	r1, r2
 8002fd6:	1dfb      	adds	r3, r7, #7
 8002fd8:	1c02      	adds	r2, r0, #0
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	1c0a      	adds	r2, r1, #0
 8002fe0:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 8002fe2:	e003      	b.n	8002fec <CH395SendData+0x20>
    {
    	Delay_ms(10);
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	; (80030a4 <CH395SendData+0xd8>)
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f000 fb88 	bl	80036fc <Delay_us>
    while(!(ch395.TX_available & (1<<sockindex)))
 8002fec:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <CH395SendData+0xdc>)
 8002fee:	78db      	ldrb	r3, [r3, #3]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	411a      	asrs	r2, r3
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4013      	ands	r3, r2
 8003000:	d0f0      	beq.n	8002fe4 <CH395SendData+0x18>
    }
    ch395.TX_available &= ~(1<<sockindex);
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <CH395SendData+0xdc>)
 8003004:	78db      	ldrb	r3, [r3, #3]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	b25b      	sxtb	r3, r3
 800300a:	1dfa      	adds	r2, r7, #7
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	2101      	movs	r1, #1
 8003010:	4091      	lsls	r1, r2
 8003012:	000a      	movs	r2, r1
 8003014:	b252      	sxtb	r2, r2
 8003016:	43d2      	mvns	r2, r2
 8003018:	b252      	sxtb	r2, r2
 800301a:	4013      	ands	r3, r2
 800301c:	b25b      	sxtb	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <CH395SendData+0xdc>)
 8003022:	70da      	strb	r2, [r3, #3]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8003024:	2039      	movs	r0, #57	; 0x39
 8003026:	f000 fb1d 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	0018      	movs	r0, r3
 8003030:	f000 fb40 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	881b      	ldrh	r3, [r3, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fb3a 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	b29b      	uxth	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	0018      	movs	r0, r3
 800304c:	f000 fb32 	bl	80036b4 <xWriteCH395Data>
    Delay_us(2);
 8003050:	2002      	movs	r0, #2
 8003052:	f000 fb53 	bl	80036fc <Delay_us>
    for(i = 0; i < len; i++)
 8003056:	230e      	movs	r3, #14
 8003058:	18fb      	adds	r3, r7, r3
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e00d      	b.n	800307c <CH395SendData+0xb0>
    {
        xWriteCH395Data(*databuf);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 fb25 	bl	80036b4 <xWriteCH395Data>
        databuf++;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 8003070:	210e      	movs	r1, #14
 8003072:	187b      	adds	r3, r7, r1
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	187b      	adds	r3, r7, r1
 8003078:	3201      	adds	r2, #1
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	230e      	movs	r3, #14
 800307e:	18fa      	adds	r2, r7, r3
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	8812      	ldrh	r2, [r2, #0]
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d3ea      	bcc.n	8003060 <CH395SendData+0x94>
    }
    xEndCH395Cmd();
 800308a:	4b08      	ldr	r3, [pc, #32]	; (80030ac <CH395SendData+0xe0>)
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <CH395SendData+0xe0>)
 8003090:	889b      	ldrh	r3, [r3, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	0019      	movs	r1, r3
 8003096:	f7fd fd62 	bl	8000b5e <HAL_GPIO_WritePin>
}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	46bd      	mov	sp, r7
 800309e:	b004      	add	sp, #16
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	00002710 	.word	0x00002710
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000804 	.word	0x20000804

080030b0 <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0002      	movs	r2, r0
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	1c0a      	adds	r2, r1, #0
 80030c0:	801a      	strh	r2, [r3, #0]
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 80030c2:	2039      	movs	r0, #57	; 0x39
 80030c4:	f000 face 	bl	8003664 <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 80030c8:	1dfb      	adds	r3, r7, #7
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 faf1 	bl	80036b4 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 faeb 	bl	80036b4 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 80030de:	1d3b      	adds	r3, r7, #4
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 fae3 	bl	80036b4 <xWriteCH395Data>
	Delay_us(2);
 80030ee:	2002      	movs	r0, #2
 80030f0:	f000 fb04 	bl	80036fc <Delay_us>
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <CH395ContinueSendingData>:

void CH395ContinueSendingData(const uint8_t *databuf, uint16_t len)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	000a      	movs	r2, r1
 8003106:	1cbb      	adds	r3, r7, #2
 8003108:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	for(i=0; i<len; ++i)
 800310a:	230e      	movs	r3, #14
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2200      	movs	r2, #0
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	e00d      	b.n	8003130 <CH395ContinueSendingData+0x34>
	{
		xWriteCH395Data(*databuf);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	0018      	movs	r0, r3
 800311a:	f000 facb 	bl	80036b4 <xWriteCH395Data>
		databuf++;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3301      	adds	r3, #1
 8003122:	607b      	str	r3, [r7, #4]
	for(i=0; i<len; ++i)
 8003124:	220e      	movs	r2, #14
 8003126:	18bb      	adds	r3, r7, r2
 8003128:	18ba      	adds	r2, r7, r2
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	3201      	adds	r2, #1
 800312e:	801a      	strh	r2, [r3, #0]
 8003130:	230e      	movs	r3, #14
 8003132:	18fa      	adds	r2, r7, r3
 8003134:	1cbb      	adds	r3, r7, #2
 8003136:	8812      	ldrh	r2, [r2, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d3ea      	bcc.n	8003114 <CH395ContinueSendingData+0x18>
	}
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <CH395Complete>:
void CH395Complete()
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
	xEndCH395Cmd();
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <CH395Complete+0x1c>)
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	4b04      	ldr	r3, [pc, #16]	; (8003164 <CH395Complete+0x1c>)
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	0019      	movs	r1, r3
 8003158:	f7fd fd01 	bl	8000b5e <HAL_GPIO_WritePin>
}
 800315c:	46c0      	nop			; (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	20000804 	.word	0x20000804

08003168 <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 8003168:	b590      	push	{r4, r7, lr}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	0002      	movs	r2, r0
 8003170:	1dfb      	adds	r3, r7, #7
 8003172:	701a      	strb	r2, [r3, #0]
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 8003174:	203b      	movs	r0, #59	; 0x3b
 8003176:	f000 fa75 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 fa98 	bl	80036b4 <xWriteCH395Data>
    i = xReadCH395Data();
 8003184:	f000 faa8 	bl	80036d8 <xReadCH395Data>
 8003188:	0003      	movs	r3, r0
 800318a:	001a      	movs	r2, r3
 800318c:	240e      	movs	r4, #14
 800318e:	193b      	adds	r3, r7, r4
 8003190:	801a      	strh	r2, [r3, #0]
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 8003192:	f000 faa1 	bl	80036d8 <xReadCH395Data>
 8003196:	0003      	movs	r3, r0
 8003198:	b29b      	uxth	r3, r3
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	b299      	uxth	r1, r3
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	193a      	adds	r2, r7, r4
 80031a2:	8812      	ldrh	r2, [r2, #0]
 80031a4:	188a      	adds	r2, r1, r2
 80031a6:	801a      	strh	r2, [r3, #0]
    xEndCH395Cmd();
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <CH395GetRecvLength+0x5c>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <CH395GetRecvLength+0x5c>)
 80031ae:	889b      	ldrh	r3, [r3, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	0019      	movs	r1, r3
 80031b4:	f7fd fcd3 	bl	8000b5e <HAL_GPIO_WritePin>
    return i;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	881b      	ldrh	r3, [r3, #0]
}
 80031bc:	0018      	movs	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	b005      	add	sp, #20
 80031c2:	bd90      	pop	{r4, r7, pc}
 80031c4:	20000804 	.word	0x20000804

080031c8 <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	0002      	movs	r2, r0
 80031d0:	1dfb      	adds	r3, r7, #7
 80031d2:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 80031d4:	202e      	movs	r0, #46	; 0x2e
 80031d6:	f000 fa45 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	0018      	movs	r0, r3
 80031e0:	f000 fa68 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <CH395ClearRecvBuf+0x34>)
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <CH395ClearRecvBuf+0x34>)
 80031ea:	889b      	ldrh	r3, [r3, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	0019      	movs	r1, r3
 80031f0:	f7fd fcb5 	bl	8000b5e <HAL_GPIO_WritePin>
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	20000804 	.word	0x20000804

08003200 <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	603a      	str	r2, [r7, #0]
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	1c02      	adds	r2, r0, #0
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	1c0a      	adds	r2, r1, #0
 8003212:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    if(!len)return;
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d03c      	beq.n	8003296 <CH395GetRecvData+0x96>
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 800321c:	203c      	movs	r0, #60	; 0x3c
 800321e:	f000 fa21 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8003222:	1dfb      	adds	r3, r7, #7
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	0018      	movs	r0, r3
 8003228:	f000 fa44 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 800322c:	1d3b      	adds	r3, r7, #4
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	b2db      	uxtb	r3, r3
 8003232:	0018      	movs	r0, r3
 8003234:	f000 fa3e 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	b29b      	uxth	r3, r3
 8003240:	b2db      	uxtb	r3, r3
 8003242:	0018      	movs	r0, r3
 8003244:	f000 fa36 	bl	80036b4 <xWriteCH395Data>
    Delay_us(1);
 8003248:	2001      	movs	r0, #1
 800324a:	f000 fa57 	bl	80036fc <Delay_us>
    for(i = 0; i < len; i++)
 800324e:	230e      	movs	r3, #14
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	2200      	movs	r2, #0
 8003254:	801a      	strh	r2, [r3, #0]
 8003256:	e00e      	b.n	8003276 <CH395GetRecvData+0x76>
    {
       *pbuf = xReadCH395Data();
 8003258:	f000 fa3e 	bl	80036d8 <xReadCH395Data>
 800325c:	0003      	movs	r3, r0
 800325e:	001a      	movs	r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	701a      	strb	r2, [r3, #0]
       pbuf++;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 800326a:	210e      	movs	r1, #14
 800326c:	187b      	adds	r3, r7, r1
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	187b      	adds	r3, r7, r1
 8003272:	3201      	adds	r2, #1
 8003274:	801a      	strh	r2, [r3, #0]
 8003276:	230e      	movs	r3, #14
 8003278:	18fa      	adds	r2, r7, r3
 800327a:	1d3b      	adds	r3, r7, #4
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d3e9      	bcc.n	8003258 <CH395GetRecvData+0x58>
    }   
    xEndCH395Cmd();
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <CH395GetRecvData+0xa0>)
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <CH395GetRecvData+0xa0>)
 800328a:	889b      	ldrh	r3, [r3, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	0019      	movs	r1, r3
 8003290:	f7fd fc65 	bl	8000b5e <HAL_GPIO_WritePin>
 8003294:	e000      	b.n	8003298 <CH395GetRecvData+0x98>
    if(!len)return;
 8003296:	46c0      	nop			; (mov r8, r8)
}
 8003298:	46bd      	mov	sp, r7
 800329a:	b004      	add	sp, #16
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	20000804 	.word	0x20000804

080032a4 <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 80032a4:	b5b0      	push	{r4, r5, r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	0002      	movs	r2, r0
 80032ac:	1dfb      	adds	r3, r7, #7
 80032ae:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 80032b0:	230f      	movs	r3, #15
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 80032b8:	230e      	movs	r3, #14
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2200      	movs	r2, #0
 80032be:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 80032c0:	2035      	movs	r0, #53	; 0x35
 80032c2:	f000 f9cf 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80032c6:	1dfb      	adds	r3, r7, #7
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 f9f2 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <CH395OpenSocket+0x7c>)
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <CH395OpenSocket+0x7c>)
 80032d6:	889b      	ldrh	r3, [r3, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	0019      	movs	r1, r3
 80032dc:	f7fd fc3f 	bl	8000b5e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <CH395OpenSocket+0x80>)
 80032e2:	0018      	movs	r0, r3
 80032e4:	f000 fa0a 	bl	80036fc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80032e8:	250e      	movs	r5, #14
 80032ea:	197c      	adds	r4, r7, r5
 80032ec:	f7ff fd7c 	bl	8002de8 <CH395GetCmdStatus>
 80032f0:	0003      	movs	r3, r0
 80032f2:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80032f4:	197b      	adds	r3, r7, r5
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d109      	bne.n	8003310 <CH395OpenSocket+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 80032fc:	220f      	movs	r2, #15
 80032fe:	18bb      	adds	r3, r7, r2
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	18ba      	adds	r2, r7, r2
 8003304:	1c59      	adds	r1, r3, #1
 8003306:	7011      	strb	r1, [r2, #0]
 8003308:	2bc8      	cmp	r3, #200	; 0xc8
 800330a:	d9e9      	bls.n	80032e0 <CH395OpenSocket+0x3c>
 800330c:	23fa      	movs	r3, #250	; 0xfa
 800330e:	e003      	b.n	8003318 <CH395OpenSocket+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8003310:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8003312:	230e      	movs	r3, #14
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	781b      	ldrb	r3, [r3, #0]
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bdb0      	pop	{r4, r5, r7, pc}
 8003320:	20000804 	.word	0x20000804
 8003324:	00001388 	.word	0x00001388

08003328 <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	0002      	movs	r2, r0
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8003334:	230f      	movs	r3, #15
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 800333c:	230e      	movs	r3, #14
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 8003344:	2036      	movs	r0, #54	; 0x36
 8003346:	f000 f98d 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 800334a:	1dfb      	adds	r3, r7, #7
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	0018      	movs	r0, r3
 8003350:	f000 f9b0 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <CH395TCPListen+0x7c>)
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <CH395TCPListen+0x7c>)
 800335a:	889b      	ldrh	r3, [r3, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	0019      	movs	r1, r3
 8003360:	f7fd fbfd 	bl	8000b5e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <CH395TCPListen+0x80>)
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f9c8 	bl	80036fc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 800336c:	250e      	movs	r5, #14
 800336e:	197c      	adds	r4, r7, r5
 8003370:	f7ff fd3a 	bl	8002de8 <CH395GetCmdStatus>
 8003374:	0003      	movs	r3, r0
 8003376:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8003378:	197b      	adds	r3, r7, r5
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b10      	cmp	r3, #16
 800337e:	d109      	bne.n	8003394 <CH395TCPListen+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8003380:	220f      	movs	r2, #15
 8003382:	18bb      	adds	r3, r7, r2
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	18ba      	adds	r2, r7, r2
 8003388:	1c59      	adds	r1, r3, #1
 800338a:	7011      	strb	r1, [r2, #0]
 800338c:	2bc8      	cmp	r3, #200	; 0xc8
 800338e:	d9e9      	bls.n	8003364 <CH395TCPListen+0x3c>
 8003390:	23fa      	movs	r3, #250	; 0xfa
 8003392:	e003      	b.n	800339c <CH395TCPListen+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8003394:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8003396:	230e      	movs	r3, #14
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b004      	add	sp, #16
 80033a2:	bdb0      	pop	{r4, r5, r7, pc}
 80033a4:	20000804 	.word	0x20000804
 80033a8:	00001388 	.word	0x00001388

080033ac <CH395TCPDisconnect>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
uint8_t CH395TCPDisconnect(uint8_t sockindex)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	0002      	movs	r2, r0
 80033b4:	1dfb      	adds	r3, r7, #7
 80033b6:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 80033b8:	230f      	movs	r3, #15
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 80033c0:	230e      	movs	r3, #14
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_DISNCONNECT_SN);
 80033c8:	2038      	movs	r0, #56	; 0x38
 80033ca:	f000 f94b 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f000 f96e 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 80033d8:	4b13      	ldr	r3, [pc, #76]	; (8003428 <CH395TCPDisconnect+0x7c>)
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <CH395TCPDisconnect+0x7c>)
 80033de:	889b      	ldrh	r3, [r3, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	0019      	movs	r1, r3
 80033e4:	f7fd fbbb 	bl	8000b5e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <CH395TCPDisconnect+0x80>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 f986 	bl	80036fc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80033f0:	250e      	movs	r5, #14
 80033f2:	197c      	adds	r4, r7, r5
 80033f4:	f7ff fcf8 	bl	8002de8 <CH395GetCmdStatus>
 80033f8:	0003      	movs	r3, r0
 80033fa:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80033fc:	197b      	adds	r3, r7, r5
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b10      	cmp	r3, #16
 8003402:	d109      	bne.n	8003418 <CH395TCPDisconnect+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8003404:	220f      	movs	r2, #15
 8003406:	18bb      	adds	r3, r7, r2
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	18ba      	adds	r2, r7, r2
 800340c:	1c59      	adds	r1, r3, #1
 800340e:	7011      	strb	r1, [r2, #0]
 8003410:	2bc8      	cmp	r3, #200	; 0xc8
 8003412:	d9e9      	bls.n	80033e8 <CH395TCPDisconnect+0x3c>
 8003414:	23fa      	movs	r3, #250	; 0xfa
 8003416:	e003      	b.n	8003420 <CH395TCPDisconnect+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8003418:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 800341a:	230e      	movs	r3, #14
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	781b      	ldrb	r3, [r3, #0]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bdb0      	pop	{r4, r5, r7, pc}
 8003428:	20000804 	.word	0x20000804
 800342c:	00001388 	.word	0x00001388

08003430 <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 8003430:	b5b0      	push	{r4, r5, r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	0002      	movs	r2, r0
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	701a      	strb	r2, [r3, #0]
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 800343c:	2030      	movs	r0, #48	; 0x30
 800343e:	f000 f911 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8003442:	1dfb      	adds	r3, r7, #7
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 f934 	bl	80036b4 <xWriteCH395Data>
    Delay_us(2);
 800344c:	2002      	movs	r0, #2
 800344e:	f000 f955 	bl	80036fc <Delay_us>
    intstatus = xReadCH395Data();
 8003452:	250f      	movs	r5, #15
 8003454:	197c      	adds	r4, r7, r5
 8003456:	f000 f93f 	bl	80036d8 <xReadCH395Data>
 800345a:	0003      	movs	r3, r0
 800345c:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 800345e:	4b07      	ldr	r3, [pc, #28]	; (800347c <CH395GetSocketInt+0x4c>)
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <CH395GetSocketInt+0x4c>)
 8003464:	889b      	ldrh	r3, [r3, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	0019      	movs	r1, r3
 800346a:	f7fd fb78 	bl	8000b5e <HAL_GPIO_WritePin>
    return intstatus;
 800346e:	197b      	adds	r3, r7, r5
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bdb0      	pop	{r4, r5, r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	20000804 	.word	0x20000804

08003480 <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	0002      	movs	r2, r0
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 800348c:	230f      	movs	r3, #15
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 8003494:	2041      	movs	r0, #65	; 0x41
 8003496:	f000 f8e5 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 f908 	bl	80036b4 <xWriteCH395Data>
    xEndCH395Cmd();
 80034a4:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <CH395DHCPEnable+0x74>)
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <CH395DHCPEnable+0x74>)
 80034aa:	889b      	ldrh	r3, [r3, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	0019      	movs	r1, r3
 80034b0:	f7fd fb55 	bl	8000b5e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(20);
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <CH395DHCPEnable+0x78>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 f920 	bl	80036fc <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 80034bc:	250e      	movs	r5, #14
 80034be:	197c      	adds	r4, r7, r5
 80034c0:	f7ff fc92 	bl	8002de8 <CH395GetCmdStatus>
 80034c4:	0003      	movs	r3, r0
 80034c6:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80034c8:	197b      	adds	r3, r7, r5
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d109      	bne.n	80034e4 <CH395DHCPEnable+0x64>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 80034d0:	220f      	movs	r2, #15
 80034d2:	18bb      	adds	r3, r7, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	18ba      	adds	r2, r7, r2
 80034d8:	1c59      	adds	r1, r3, #1
 80034da:	7011      	strb	r1, [r2, #0]
 80034dc:	2bc8      	cmp	r3, #200	; 0xc8
 80034de:	d9e9      	bls.n	80034b4 <CH395DHCPEnable+0x34>
 80034e0:	23fa      	movs	r3, #250	; 0xfa
 80034e2:	e003      	b.n	80034ec <CH395DHCPEnable+0x6c>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 80034e4:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 80034e6:	230e      	movs	r3, #14
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	781b      	ldrb	r3, [r3, #0]
}
 80034ec:	0018      	movs	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	b004      	add	sp, #16
 80034f2:	bdb0      	pop	{r4, r5, r7, pc}
 80034f4:	20000804 	.word	0x20000804
 80034f8:	00004e20 	.word	0x00004e20

080034fc <CH395GetDHCPStatus>:
* Input          : None
* Output         : None
* Return         : DHCP状态，0为成功，其他值表示错误
*******************************************************************************/
uint8_t CH395GetDHCPStatus(void)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
    uint8_t status;
    xWriteCH395Cmd(CMD01_GET_DHCP_STATUS);
 8003502:	2042      	movs	r0, #66	; 0x42
 8003504:	f000 f8ae 	bl	8003664 <xWriteCH395Cmd>
    status = xReadCH395Data();
 8003508:	1dfc      	adds	r4, r7, #7
 800350a:	f000 f8e5 	bl	80036d8 <xReadCH395Data>
 800350e:	0003      	movs	r3, r0
 8003510:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <CH395GetDHCPStatus+0x34>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	4b06      	ldr	r3, [pc, #24]	; (8003530 <CH395GetDHCPStatus+0x34>)
 8003518:	889b      	ldrh	r3, [r3, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	0019      	movs	r1, r3
 800351e:	f7fd fb1e 	bl	8000b5e <HAL_GPIO_WritePin>
    return status;
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b003      	add	sp, #12
 800352c:	bd90      	pop	{r4, r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	20000804 	.word	0x20000804

08003534 <CH395SetSocketRecvBuf>:
                 ：blknum     单位缓冲区个数 ，单位为512字节
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketRecvBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	0004      	movs	r4, r0
 800353c:	0008      	movs	r0, r1
 800353e:	0011      	movs	r1, r2
 8003540:	1dfb      	adds	r3, r7, #7
 8003542:	1c22      	adds	r2, r4, #0
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	1dbb      	adds	r3, r7, #6
 8003548:	1c02      	adds	r2, r0, #0
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	1d7b      	adds	r3, r7, #5
 800354e:	1c0a      	adds	r2, r1, #0
 8003550:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_RECV_BUF);
 8003552:	2052      	movs	r0, #82	; 0x52
 8003554:	f000 f886 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8003558:	1dfb      	adds	r3, r7, #7
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f8a9 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 8003562:	1dbb      	adds	r3, r7, #6
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	0018      	movs	r0, r3
 8003568:	f000 f8a4 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 800356c:	1d7b      	adds	r3, r7, #5
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f000 f89f 	bl	80036b4 <xWriteCH395Data>
}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	46bd      	mov	sp, r7
 800357a:	b003      	add	sp, #12
 800357c:	bd90      	pop	{r4, r7, pc}

0800357e <CH395SetSocketSendBuf>:
                 ：blknum     单位缓冲区个数
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSendBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 800357e:	b590      	push	{r4, r7, lr}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	0004      	movs	r4, r0
 8003586:	0008      	movs	r0, r1
 8003588:	0011      	movs	r1, r2
 800358a:	1dfb      	adds	r3, r7, #7
 800358c:	1c22      	adds	r2, r4, #0
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	1dbb      	adds	r3, r7, #6
 8003592:	1c02      	adds	r2, r0, #0
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	1d7b      	adds	r3, r7, #5
 8003598:	1c0a      	adds	r2, r1, #0
 800359a:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SEND_BUF);
 800359c:	2053      	movs	r0, #83	; 0x53
 800359e:	f000 f861 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80035a2:	1dfb      	adds	r3, r7, #7
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f000 f884 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 80035ac:	1dbb      	adds	r3, r7, #6
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 f87f 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 80035b6:	1d7b      	adds	r3, r7, #5
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f87a 	bl	80036b4 <xWriteCH395Data>
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b003      	add	sp, #12
 80035c6:	bd90      	pop	{r4, r7, pc}

080035c8 <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 80035d0:	2055      	movs	r0, #85	; 0x55
 80035d2:	f000 f847 	bl	8003664 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 f86a 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	0a1b      	lsrs	r3, r3, #8
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	0018      	movs	r0, r3
 80035ec:	f000 f862 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	0018      	movs	r0, r3
 80035f8:	f000 f85c 	bl	80036b4 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	0e1b      	lsrs	r3, r3, #24
 8003600:	b2db      	uxtb	r3, r3
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f856 	bl	80036b4 <xWriteCH395Data>
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}

08003610 <CH395CMDGetGlobIntStatus_ALL>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint16_t CH395CMDGetGlobIntStatus_ALL(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
		uint16_t init_status;
		xWriteCH395Cmd(CMD02_GET_GLOB_INT_STATUS_ALL);
 8003616:	2019      	movs	r0, #25
 8003618:	f000 f824 	bl	8003664 <xWriteCH395Cmd>
		Delay_us(2);
 800361c:	2002      	movs	r0, #2
 800361e:	f000 f86d 	bl	80036fc <Delay_us>
		init_status = xReadCH395Data();
 8003622:	f000 f859 	bl	80036d8 <xReadCH395Data>
 8003626:	0003      	movs	r3, r0
 8003628:	001a      	movs	r2, r3
 800362a:	1dbb      	adds	r3, r7, #6
 800362c:	801a      	strh	r2, [r3, #0]
		init_status = (uint16_t)(xReadCH395Data()<<8) + init_status;
 800362e:	f000 f853 	bl	80036d8 <xReadCH395Data>
 8003632:	0003      	movs	r3, r0
 8003634:	b29b      	uxth	r3, r3
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	b299      	uxth	r1, r3
 800363a:	1dbb      	adds	r3, r7, #6
 800363c:	1dba      	adds	r2, r7, #6
 800363e:	8812      	ldrh	r2, [r2, #0]
 8003640:	188a      	adds	r2, r1, r2
 8003642:	801a      	strh	r2, [r3, #0]
		xEndCH395Cmd();
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <CH395CMDGetGlobIntStatus_ALL+0x50>)
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <CH395CMDGetGlobIntStatus_ALL+0x50>)
 800364a:	889b      	ldrh	r3, [r3, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	0019      	movs	r1, r3
 8003650:	f7fd fa85 	bl	8000b5e <HAL_GPIO_WritePin>
		return 	init_status;
 8003654:	1dbb      	adds	r3, r7, #6
 8003656:	881b      	ldrh	r3, [r3, #0]
}
 8003658:	0018      	movs	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000804 	.word	0x20000804

08003664 <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	0002      	movs	r2, r0
 800366c:	1dfb      	adds	r3, r7, #7
 800366e:	701a      	strb	r2, [r3, #0]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <xWriteCH395Cmd+0x48>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <xWriteCH395Cmd+0x48>)
 8003676:	889b      	ldrh	r3, [r3, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	0019      	movs	r1, r3
 800367c:	f7fd fa6f 	bl	8000b5e <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <xWriteCH395Cmd+0x48>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4b09      	ldr	r3, [pc, #36]	; (80036ac <xWriteCH395Cmd+0x48>)
 8003686:	889b      	ldrh	r3, [r3, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	0019      	movs	r1, r3
 800368c:	f7fd fa67 	bl	8000b5e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 8003690:	1df9      	adds	r1, r7, #7
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <xWriteCH395Cmd+0x4c>)
 8003694:	2364      	movs	r3, #100	; 0x64
 8003696:	2201      	movs	r2, #1
 8003698:	f7fd ffd2 	bl	8001640 <HAL_SPI_Transmit>
    Delay_us(2);
 800369c:	2002      	movs	r0, #2
 800369e:	f000 f82d 	bl	80036fc <Delay_us>
}
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b002      	add	sp, #8
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	20000804 	.word	0x20000804
 80036b0:	20001894 	.word	0x20001894

080036b4 <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	0002      	movs	r2, r0
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	701a      	strb	r2, [r3, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 80036c0:	1df9      	adds	r1, r7, #7
 80036c2:	4804      	ldr	r0, [pc, #16]	; (80036d4 <xWriteCH395Data+0x20>)
 80036c4:	2364      	movs	r3, #100	; 0x64
 80036c6:	2201      	movs	r2, #1
 80036c8:	f7fd ffba 	bl	8001640 <HAL_SPI_Transmit>
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20001894 	.word	0x20001894

080036d8 <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 80036de:	1df9      	adds	r1, r7, #7
 80036e0:	4805      	ldr	r0, [pc, #20]	; (80036f8 <xReadCH395Data+0x20>)
 80036e2:	2364      	movs	r3, #100	; 0x64
 80036e4:	2201      	movs	r2, #1
 80036e6:	f7fe f915 	bl	8001914 <HAL_SPI_Receive>
    return i;
 80036ea:	1dfb      	adds	r3, r7, #7
 80036ec:	781b      	ldrb	r3, [r3, #0]
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	20001894 	.word	0x20001894

080036fc <Delay_us>:
 *      Author: Zening
 */

#include "Delay.h"

void Delay_us(unsigned int n) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	unsigned int t = n * SysCLK_Freq /2; // 32: MHz
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	015b      	lsls	r3, r3, #5
 8003708:	085b      	lsrs	r3, r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
	while(--t){__NOP();};
 800370c:	e000      	b.n	8003710 <Delay_us+0x14>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f8      	bne.n	800370e <Delay_us+0x12>
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}

08003724 <FS_begin>:
#include <string.h>
#include "FS.h"
FS_typedef FS;

BOOL FS_begin(FS_typedef* pFS, uint32_t* addr_base)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	if((uint32_t)addr_base < MAX_ADDR && ((pFS->n_files = *(uint32_t*)(addr_base)) != 0xffffffff))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <FS_begin+0x38>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d80c      	bhi.n	8003750 <FS_begin+0x2c>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	3301      	adds	r3, #1
 8003744:	d004      	beq.n	8003750 <FS_begin+0x2c>
	{
		pFS->addr_base = addr_base;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	601a      	str	r2, [r3, #0]
		return true;
 800374c:	2301      	movs	r3, #1
 800374e:	e000      	b.n	8003752 <FS_begin+0x2e>
	}
	else
	{
		return false;
 8003750:	2300      	movs	r3, #0
	}
}
 8003752:	0018      	movs	r0, r3
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	0800fffe 	.word	0x0800fffe

08003760 <FS_open>:

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b08d      	sub	sp, #52	; 0x34
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
	int i = pFS->n_files;
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t offset = (uint32_t)pFS->addr_base;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	627b      	str	r3, [r7, #36]	; 0x24

	FSfile_typedef file;
	file.size = 0;
 800377e:	2114      	movs	r1, #20
 8003780:	187b      	adds	r3, r7, r1
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
	file.p_content = NULL;
 8003786:	187b      	adds	r3, r7, r1
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
	file.path = NULL;
 800378c:	187b      	adds	r3, r7, r1
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
	do{
		addr ++;
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	3304      	adds	r3, #4
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
		i--;
 8003798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379a:	3b01      	subs	r3, #1
 800379c:	62fb      	str	r3, [r7, #44]	; 0x2c
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	18d3      	adds	r3, r2, r3
 80037a6:	3308      	adds	r3, #8
 80037a8:	623b      	str	r3, [r7, #32]
		if(strcmp(path, _path) == 0) // path matched
 80037aa:	6a3a      	ldr	r2, [r7, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	0011      	movs	r1, r2
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fc fca9 	bl	8000108 <strcmp>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d116      	bne.n	80037e8 <FS_open+0x88>
		{
			file.path = _path;
 80037ba:	2114      	movs	r1, #20
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	6a3a      	ldr	r2, [r7, #32]
 80037c0:	601a      	str	r2, [r3, #0]
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	18d3      	adds	r3, r2, r3
 80037ca:	3304      	adds	r3, #4
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	001a      	movs	r2, r3
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	605a      	str	r2, [r3, #4]
			file.size = *(uint32_t*)(*addr + offset);
 80037d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	18d3      	adds	r3, r2, r3
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	187b      	adds	r3, r7, r1
 80037e4:	609a      	str	r2, [r3, #8]
			break;
 80037e6:	e002      	b.n	80037ee <FS_open+0x8e>
		}
	}while(i > 0);
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	dcd1      	bgt.n	8003792 <FS_open+0x32>
	return file;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2214      	movs	r2, #20
 80037f2:	18ba      	adds	r2, r7, r2
 80037f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80037f6:	c313      	stmia	r3!, {r0, r1, r4}
}
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b00d      	add	sp, #52	; 0x34
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <FS_exists>:
	}
	return -1;
}

BOOL FS_exists(FS_typedef* pFS, const char* path)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t)pFS->addr_base;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pFS->n_files; ++i)
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e015      	b.n	8003848 <FS_exists+0x48>
	{
		addr++;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	3304      	adds	r3, #4
 8003820:	613b      	str	r3, [r7, #16]
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	3308      	adds	r3, #8
 800382c:	60bb      	str	r3, [r7, #8]
		if(strcmp(path, _path) == 0)
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	0011      	movs	r1, r2
 8003834:	0018      	movs	r0, r3
 8003836:	f7fc fc67 	bl	8000108 <strcmp>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d101      	bne.n	8003842 <FS_exists+0x42>
		{
			return true;
 800383e:	2301      	movs	r3, #1
 8003840:	e008      	b.n	8003854 <FS_exists+0x54>
	for(i=0; i<pFS->n_files; ++i)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	429a      	cmp	r2, r3
 8003850:	d3e4      	bcc.n	800381c <FS_exists+0x1c>
		}
	}
	return false;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b006      	add	sp, #24
 800385a:	bd80      	pop	{r7, pc}

0800385c <EEPROM_WriteBytes>:
	uint32_t word;
} Quadbyte;

// Notice: 4-byte alignment
void EEPROM_WriteBytes(EEPROM_typedef *pEEPROM,uint8_t *Buffer,uint16_t Length)
{
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b08d      	sub	sp, #52	; 0x34
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	1dbb      	adds	r3, r7, #6
 8003868:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint32_t* addr = (uint32_t*)pEEPROM->base_addr;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
	Quadbyte quadbyte;
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=(uint32_t)addr, .NbPages=1};
 8003870:	2618      	movs	r6, #24
 8003872:	19bb      	adds	r3, r7, r6
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800387a:	19bb      	adds	r3, r7, r6
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	19bb      	adds	r3, r7, r6
 8003880:	2201      	movs	r2, #1
 8003882:	609a      	str	r2, [r3, #8]
	uint32_t PageError = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003888:	b672      	cpsid	i
    __disable_irq();
    HAL_FLASH_Unlock();
 800388a:	f7fc fe6b 	bl	8000564 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&fe, &PageError);
 800388e:	2314      	movs	r3, #20
 8003890:	18fa      	adds	r2, r7, r3
 8003892:	19bb      	adds	r3, r7, r6
 8003894:	0011      	movs	r1, r2
 8003896:	0018      	movs	r0, r3
 8003898:	f7fc ff24 	bl	80006e4 <HAL_FLASHEx_Erase>
    while(Length)
 800389c:	e036      	b.n	800390c <EEPROM_WriteBytes+0xb0>
    {
    	memset(quadbyte.bytes, 0, 4);
 800389e:	2324      	movs	r3, #36	; 0x24
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2204      	movs	r2, #4
 80038a4:	2100      	movs	r1, #0
 80038a6:	0018      	movs	r0, r3
 80038a8:	f002 fd97 	bl	80063da <memset>
    	for(i=0; i<4 && Length; ++i)
 80038ac:	232e      	movs	r3, #46	; 0x2e
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	2200      	movs	r2, #0
 80038b2:	801a      	strh	r2, [r3, #0]
 80038b4:	e014      	b.n	80038e0 <EEPROM_WriteBytes+0x84>
    	{
    		quadbyte.bytes[i] = *Buffer;
 80038b6:	202e      	movs	r0, #46	; 0x2e
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	7811      	ldrb	r1, [r2, #0]
 80038c0:	2224      	movs	r2, #36	; 0x24
 80038c2:	18ba      	adds	r2, r7, r2
 80038c4:	54d1      	strb	r1, [r2, r3]
    		Length--;
 80038c6:	1dbb      	adds	r3, r7, #6
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	3a01      	subs	r2, #1
 80038ce:	801a      	strh	r2, [r3, #0]
    		Buffer++;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3301      	adds	r3, #1
 80038d4:	60bb      	str	r3, [r7, #8]
    	for(i=0; i<4 && Length; ++i)
 80038d6:	183b      	adds	r3, r7, r0
 80038d8:	183a      	adds	r2, r7, r0
 80038da:	8812      	ldrh	r2, [r2, #0]
 80038dc:	3201      	adds	r2, #1
 80038de:	801a      	strh	r2, [r3, #0]
 80038e0:	232e      	movs	r3, #46	; 0x2e
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d803      	bhi.n	80038f2 <EEPROM_WriteBytes+0x96>
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e1      	bne.n	80038b6 <EEPROM_WriteBytes+0x5a>
    	}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addr++, quadbyte.word);
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	1d1a      	adds	r2, r3, #4
 80038f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80038f8:	0019      	movs	r1, r3
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	001c      	movs	r4, r3
 80038fe:	2300      	movs	r3, #0
 8003900:	001d      	movs	r5, r3
 8003902:	0022      	movs	r2, r4
 8003904:	002b      	movs	r3, r5
 8003906:	2002      	movs	r0, #2
 8003908:	f7fc fd96 	bl	8000438 <HAL_FLASH_Program>
    while(Length)
 800390c:	1dbb      	adds	r3, r7, #6
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1c4      	bne.n	800389e <EEPROM_WriteBytes+0x42>
    }
    HAL_FLASH_Lock();
 8003914:	f7fc fe4c 	bl	80005b0 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8003918:	b662      	cpsie	i
    __enable_irq();
}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	46bd      	mov	sp, r7
 800391e:	b00d      	add	sp, #52	; 0x34
 8003920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003922 <EEPROM_ReadBytes>:

void EEPROM_ReadBytes(EEPROM_typedef* pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b086      	sub	sp, #24
 8003926:	af00      	add	r7, sp, #0
 8003928:	60f8      	str	r0, [r7, #12]
 800392a:	60b9      	str	r1, [r7, #8]
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	801a      	strh	r2, [r3, #0]
	uint8_t* addr = pEEPROM->base_addr;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	617b      	str	r3, [r7, #20]
	while(Length)
 8003936:	e00e      	b.n	8003956 <EEPROM_ReadBytes+0x34>
	{
		*Buffer = *addr;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	701a      	strb	r2, [r3, #0]
		Buffer++;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	3301      	adds	r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
		addr++;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3301      	adds	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
		Length--;
 800394c:	1dbb      	adds	r3, r7, #6
 800394e:	881a      	ldrh	r2, [r3, #0]
 8003950:	1dbb      	adds	r3, r7, #6
 8003952:	3a01      	subs	r2, #1
 8003954:	801a      	strh	r2, [r3, #0]
	while(Length)
 8003956:	1dbb      	adds	r3, r7, #6
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1ec      	bne.n	8003938 <EEPROM_ReadBytes+0x16>
	}
}
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	b006      	add	sp, #24
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	strcat(pS->URI, "index.html");
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	1d5c      	adds	r4, r3, #5
 8003974:	0020      	movs	r0, r4
 8003976:	f7fc fbd1 	bl	800011c <strlen>
 800397a:	0003      	movs	r3, r0
 800397c:	18e2      	adds	r2, r4, r3
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <onHome+0x34>)
 8003980:	0010      	movs	r0, r2
 8003982:	0019      	movs	r1, r3
 8003984:	230b      	movs	r3, #11
 8003986:	001a      	movs	r2, r3
 8003988:	f002 fd1e 	bl	80063c8 <memcpy>
	HTTPonNotFound(pS);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	0018      	movs	r0, r3
 8003990:	f000 fe5c 	bl	800464c <HTTPonNotFound>
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b003      	add	sp, #12
 800399a:	bd90      	pop	{r4, r7, pc}
 800399c:	0800677c 	.word	0x0800677c

080039a0 <onSwitch>:
/* URI: /switch
 * METHOD: POST
 * Args: sel1=[0-6]&sel2=[0-6]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 80039a0:	b5b0      	push	{r4, r5, r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	const char *A = getHTTPArg(pS, "sel1");
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <onSwitch+0x9c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f001 fab4 	bl	8004f1c <getHTTPArg>
 80039b4:	0003      	movs	r3, r0
 80039b6:	617b      	str	r3, [r7, #20]
	const char *B = getHTTPArg(pS, "sel2");
 80039b8:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <onSwitch+0xa0>)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0011      	movs	r1, r2
 80039be:	0018      	movs	r0, r3
 80039c0:	f001 faac 	bl	8004f1c <getHTTPArg>
 80039c4:	0003      	movs	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]
	if(A && B)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02c      	beq.n	8003a28 <onSwitch+0x88>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d029      	beq.n	8003a28 <onSwitch+0x88>
	{
		uint8_t nA = atou8(A);
 80039d4:	250f      	movs	r5, #15
 80039d6:	197c      	adds	r4, r7, r5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	0018      	movs	r0, r3
 80039dc:	f001 fae8 	bl	8004fb0 <atou8>
 80039e0:	0003      	movs	r3, r0
 80039e2:	7023      	strb	r3, [r4, #0]
		uint8_t nB = atou8(B);
 80039e4:	230e      	movs	r3, #14
 80039e6:	18fc      	adds	r4, r7, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	0018      	movs	r0, r3
 80039ec:	f001 fae0 	bl	8004fb0 <atou8>
 80039f0:	0003      	movs	r3, r0
 80039f2:	7023      	strb	r3, [r4, #0]
		if(nA <= NUM_ANTENNA && nB<=NUM_ANTENNA)
 80039f4:	197b      	adds	r3, r7, r5
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b06      	cmp	r3, #6
 80039fa:	d815      	bhi.n	8003a28 <onSwitch+0x88>
 80039fc:	230e      	movs	r3, #14
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d810      	bhi.n	8003a28 <onSwitch+0x88>
		{
			switch_Antenna(nA, nB);
 8003a06:	230e      	movs	r3, #14
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	0011      	movs	r1, r2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f002 fa11 	bl	8005e3c <switch_Antenna>
			//HTTPSendStr(pS, 200, "OK\r\n");
			HTTPredirect(pS, "/");
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <onSwitch+0xa4>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0011      	movs	r1, r2
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 fcef 	bl	8004404 <HTTPredirect>
			return;
 8003a26:	e006      	b.n	8003a36 <onSwitch+0x96>
		}
	}
	HTTPSendStr(pS, 300, "Invalid\r\n");
 8003a28:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <onSwitch+0xa8>)
 8003a2a:	2396      	movs	r3, #150	; 0x96
 8003a2c:	0059      	lsls	r1, r3, #1
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	0018      	movs	r0, r3
 8003a32:	f000 fbad 	bl	8004190 <HTTPSendStr>
}
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b006      	add	sp, #24
 8003a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a3c:	08006788 	.word	0x08006788
 8003a40:	08006790 	.word	0x08006790
 8003a44:	08006798 	.word	0x08006798
 8003a48:	0800679c 	.word	0x0800679c

08003a4c <onGetAlloc>:
 * METHOD: GET
 * Args: sel1=%d&sel2=%d
 * Usage: get current antenna allocation
 * */
void onGetAlloc(HTTPRequestParseState* pS)
{
 8003a4c:	b5b0      	push	{r4, r5, r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	static char s_tmp[10];
	uint8_t d = get_Antenna();
 8003a54:	240f      	movs	r4, #15
 8003a56:	0025      	movs	r5, r4
 8003a58:	193c      	adds	r4, r7, r4
 8003a5a:	f002 fa87 	bl	8005f6c <get_Antenna>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	7023      	strb	r3, [r4, #0]
	char *p;
	p = s_tmp;
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <onGetAlloc+0xa8>)
 8003a64:	60bb      	str	r3, [r7, #8]
	strcpy(p, "sel1=");
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <onGetAlloc+0xac>)
 8003a6a:	0010      	movs	r0, r2
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	2306      	movs	r3, #6
 8003a70:	001a      	movs	r2, r3
 8003a72:	f002 fca9 	bl	80063c8 <memcpy>
	p+=5;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	3305      	adds	r3, #5
 8003a7a:	60bb      	str	r3, [r7, #8]
	*p = (uint8_t)(d & 0xf) + '0'; // "sel1=%d"
 8003a7c:	002c      	movs	r4, r5
 8003a7e:	193b      	adds	r3, r7, r4
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	220f      	movs	r2, #15
 8003a84:	4013      	ands	r3, r2
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3330      	adds	r3, #48	; 0x30
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	701a      	strb	r2, [r3, #0]
	p++;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	3301      	adds	r3, #1
 8003a94:	60bb      	str	r3, [r7, #8]
	strcpy(p, "&sel2="); // "sel1=%d&sel2="
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	4b18      	ldr	r3, [pc, #96]	; (8003afc <onGetAlloc+0xb0>)
 8003a9a:	0010      	movs	r0, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	001a      	movs	r2, r3
 8003aa2:	f002 fc91 	bl	80063c8 <memcpy>
	p+=6;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3306      	adds	r3, #6
 8003aaa:	60bb      	str	r3, [r7, #8]
	*p = (uint8_t)(d >> 4) + '0'; // "sel1=%d&sel2=%d"
 8003aac:	193b      	adds	r3, r7, r4
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3330      	adds	r3, #48	; 0x30
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	701a      	strb	r2, [r3, #0]
	p++;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
	strcpy(p, "\r\n");
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <onGetAlloc+0xb4>)
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	2303      	movs	r3, #3
 8003acc:	001a      	movs	r2, r3
 8003ace:	f002 fc7b 	bl	80063c8 <memcpy>
	p+=2;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	60bb      	str	r3, [r7, #8]
	*p = 0;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
	HTTPSendStr(pS, 200, s_tmp);
 8003ade:	4a05      	ldr	r2, [pc, #20]	; (8003af4 <onGetAlloc+0xa8>)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	21c8      	movs	r1, #200	; 0xc8
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f000 fb53 	bl	8004190 <HTTPSendStr>
}
 8003aea:	46c0      	nop			; (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b004      	add	sp, #16
 8003af0:	bdb0      	pop	{r4, r5, r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	200008f4 	.word	0x200008f4
 8003af8:	080067a8 	.word	0x080067a8
 8003afc:	080067b0 	.word	0x080067b0
 8003b00:	080067b8 	.word	0x080067b8

08003b04 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	HTTPSendStr(pS, 200, "Status\r\n");
 8003b0c:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <onStatus+0x1c>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	21c8      	movs	r1, #200	; 0xc8
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fb3c 	bl	8004190 <HTTPSendStr>
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	080067bc 	.word	0x080067bc

08003b24 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
	HTTPSendStr(pS, 200, "Reset\r\n");
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <onReset+0x1c>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	21c8      	movs	r1, #200	; 0xc8
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 fb2c 	bl	8004190 <HTTPSendStr>
//	DEBUG_LOG("Restart\n");
}
 8003b38:	46c0      	nop			; (mov r8, r8)
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	080067c8 	.word	0x080067c8

08003b44 <onSetLabel>:
/* URI: /getAlloc
 * METHOD: POST
 * Args: ant1=name&ant2=name&ant3=name&ant4=name&ant5=name&ant6=name
 * Usage: set antenna label*/
void onSetLabel(HTTPRequestParseState* pS)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	char s_tmp[5] = "ant";
 8003b4c:	2308      	movs	r3, #8
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <onSetLabel+0xb4>)
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	2200      	movs	r2, #0
 8003b56:	711a      	strb	r2, [r3, #4]
	if(pS->argc == 0)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2245      	movs	r2, #69	; 0x45
 8003b5c:	5c9b      	ldrb	r3, [r3, r2]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d107      	bne.n	8003b72 <onSetLabel+0x2e>
	{
		HTTPSendStr(pS, 300, "Bad args");
 8003b62:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <onSetLabel+0xb8>)
 8003b64:	2396      	movs	r3, #150	; 0x96
 8003b66:	0059      	lsls	r1, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f000 fb10 	bl	8004190 <HTTPSendStr>
 8003b70:	e03e      	b.n	8003bf0 <onSetLabel+0xac>
		return;
	}
	for(i=1; i<=NUM_ANTENNA; ++i)
 8003b72:	2317      	movs	r3, #23
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
 8003b7a:	e028      	b.n	8003bce <onSetLabel+0x8a>
	{
		u16toa(i, s_tmp+3); //s_tmp = ant[i]
 8003b7c:	2317      	movs	r3, #23
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	2408      	movs	r4, #8
 8003b86:	193b      	adds	r3, r7, r4
 8003b88:	3303      	adds	r3, #3
 8003b8a:	0019      	movs	r1, r3
 8003b8c:	0010      	movs	r0, r2
 8003b8e:	f001 fa52 	bl	8005036 <u16toa>
		const char* s_label;
		if((s_label = getHTTPArg(pS, s_tmp)) != NULL)
 8003b92:	193a      	adds	r2, r7, r4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f001 f9bf 	bl	8004f1c <getHTTPArg>
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00c      	beq.n	8003bc2 <onSetLabel+0x7e>
		{
			strncpy(SavedData.ant_labels[i-1], s_label, MAX_LEN_ANT_LABEL);
 8003ba8:	2317      	movs	r3, #23
 8003baa:	18fb      	adds	r3, r7, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	011a      	lsls	r2, r3, #4
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <onSetLabel+0xbc>)
 8003bb4:	18d3      	adds	r3, r2, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	6939      	ldr	r1, [r7, #16]
 8003bba:	2210      	movs	r2, #16
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f002 fc5f 	bl	8006480 <strncpy>
	for(i=1; i<=NUM_ANTENNA; ++i)
 8003bc2:	2217      	movs	r2, #23
 8003bc4:	18bb      	adds	r3, r7, r2
 8003bc6:	18ba      	adds	r2, r7, r2
 8003bc8:	7812      	ldrb	r2, [r2, #0]
 8003bca:	3201      	adds	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	2317      	movs	r3, #23
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d9d1      	bls.n	8003b7c <onSetLabel+0x38>
		}
	}
	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8003bd8:	4909      	ldr	r1, [pc, #36]	; (8003c00 <onSetLabel+0xbc>)
 8003bda:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <onSetLabel+0xc0>)
 8003bdc:	2261      	movs	r2, #97	; 0x61
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7ff fe3c 	bl	800385c <EEPROM_WriteBytes>
	//HTTPSendStr(pS, 200, "OK");
	HTTPredirect(pS, "/");
 8003be4:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <onSetLabel+0xc4>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0011      	movs	r1, r2
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 fc0a 	bl	8004404 <HTTPredirect>
}
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b007      	add	sp, #28
 8003bf4:	bd90      	pop	{r4, r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	00746e61 	.word	0x00746e61
 8003bfc:	080067d0 	.word	0x080067d0
 8003c00:	200017f8 	.word	0x200017f8
 8003c04:	2000080c 	.word	0x2000080c
 8003c08:	08006798 	.word	0x08006798

08003c0c <onGetLabel>:

void onGetLabel(HTTPRequestParseState* pS)
{
 8003c0c:	b590      	push	{r4, r7, lr}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	static char s_tmp[(MAX_LEN_ANT_LABEL+5) * NUM_ANTENNA];
	uint8_t i;
	char* s = s_tmp;
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <onGetLabel+0xa4>)
 8003c16:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8003c18:	230f      	movs	r3, #15
 8003c1a:	18fb      	adds	r3, r7, r3
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	e036      	b.n	8003c90 <onGetLabel+0x84>
	{
		s = strcpy_f(s, "ant");
 8003c22:	4a24      	ldr	r2, [pc, #144]	; (8003cb4 <onGetLabel+0xa8>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	0011      	movs	r1, r2
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f001 fa79 	bl	8005120 <strcpy_f>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	60bb      	str	r3, [r7, #8]
		*s = i + '1';
 8003c32:	210f      	movs	r1, #15
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	3331      	adds	r3, #49	; 0x31
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	701a      	strb	r2, [r3, #0]
		s++;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	3301      	adds	r3, #1
 8003c44:	60bb      	str	r3, [r7, #8]
		*s = '=';
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	223d      	movs	r2, #61	; 0x3d
 8003c4a:	701a      	strb	r2, [r3, #0]
		s++;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
		s = strncpy_f(s, SavedData.ant_labels[i], MAX_LEN_ANT_LABEL);
 8003c52:	000c      	movs	r4, r1
 8003c54:	187b      	adds	r3, r7, r1
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	011a      	lsls	r2, r3, #4
 8003c5a:	4b17      	ldr	r3, [pc, #92]	; (8003cb8 <onGetLabel+0xac>)
 8003c5c:	18d3      	adds	r3, r2, r3
 8003c5e:	1c59      	adds	r1, r3, #1
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2210      	movs	r2, #16
 8003c64:	0018      	movs	r0, r3
 8003c66:	f001 fa77 	bl	8005158 <strncpy_f>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	60bb      	str	r3, [r7, #8]
		if(i != NUM_ANTENNA-1)
 8003c6e:	0021      	movs	r1, r4
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b05      	cmp	r3, #5
 8003c76:	d005      	beq.n	8003c84 <onGetLabel+0x78>
		{
			*s = '&';
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2226      	movs	r2, #38	; 0x26
 8003c7c:	701a      	strb	r2, [r3, #0]
			s++;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3301      	adds	r3, #1
 8003c82:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8003c84:	220f      	movs	r2, #15
 8003c86:	18bb      	adds	r3, r7, r2
 8003c88:	18ba      	adds	r2, r7, r2
 8003c8a:	7812      	ldrb	r2, [r2, #0]
 8003c8c:	3201      	adds	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	230f      	movs	r3, #15
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	2b05      	cmp	r3, #5
 8003c98:	d9c3      	bls.n	8003c22 <onGetLabel+0x16>
		}
	}
	HTTPSendStr(pS, 200, s_tmp);
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <onGetLabel+0xa4>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	21c8      	movs	r1, #200	; 0xc8
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fa75 	bl	8004190 <HTTPSendStr>
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b005      	add	sp, #20
 8003cac:	bd90      	pop	{r4, r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	20000900 	.word	0x20000900
 8003cb4:	080067dc 	.word	0x080067dc
 8003cb8:	200017f8 	.word	0x200017f8

08003cbc <resetHTTPParseState>:
	.method = HTTP_GET,
	.ready = false}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	pS->state = 0;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
	pS->argc = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2245      	movs	r2, #69	; 0x45
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]
	pS->connection = CLOSED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	711a      	strb	r2, [r3, #4]
	pS->method = HTTP_GET;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	70da      	strb	r2, [r3, #3]
	pS->ready = false;
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	23b4      	movs	r3, #180	; 0xb4
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	54d1      	strb	r1, [r2, r3]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	23ac      	movs	r3, #172	; 0xac
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	2100      	movs	r1, #0
 8003cf0:	54d1      	strb	r1, [r2, r3]
	pS->len_response_content_remain = 0;
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	23b0      	movs	r3, #176	; 0xb0
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	52d1      	strh	r1, [r2, r3]
	pS->response_header = response_header_shared_buffer; // use shared buffer
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	23ae      	movs	r3, #174	; 0xae
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4903      	ldr	r1, [pc, #12]	; (8003d10 <resetHTTPParseState+0x54>)
 8003d04:	50d1      	str	r1, [r2, r3]
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	20001568 	.word	0x20001568

08003d14 <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	if(strlen(filename) > 3)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7fc f9fc 	bl	800011c <strlen>
 8003d24:	0003      	movs	r3, r0
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d800      	bhi.n	8003d2c <HTTPGetContentType+0x18>
 8003d2a:	e087      	b.n	8003e3c <HTTPGetContentType+0x128>
	{
		if(ENDSWITH(filename, ".html"))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fc f9f4 	bl	800011c <strlen>
 8003d34:	0003      	movs	r3, r0
 8003d36:	3b05      	subs	r3, #5
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	18d3      	adds	r3, r2, r3
 8003d3c:	4a42      	ldr	r2, [pc, #264]	; (8003e48 <HTTPGetContentType+0x134>)
 8003d3e:	0011      	movs	r1, r2
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fc f9e1 	bl	8000108 <strcmp>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d101      	bne.n	8003d4e <HTTPGetContentType+0x3a>
			return HTTP_CONTENT_TYPE_HTML;
 8003d4a:	4b40      	ldr	r3, [pc, #256]	; (8003e4c <HTTPGetContentType+0x138>)
 8003d4c:	e077      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".htm"))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f7fc f9e3 	bl	800011c <strlen>
 8003d56:	0003      	movs	r3, r0
 8003d58:	3b04      	subs	r3, #4
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	18d3      	adds	r3, r2, r3
 8003d5e:	4a3c      	ldr	r2, [pc, #240]	; (8003e50 <HTTPGetContentType+0x13c>)
 8003d60:	0011      	movs	r1, r2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fc f9d0 	bl	8000108 <strcmp>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d101      	bne.n	8003d70 <HTTPGetContentType+0x5c>
			return HTTP_CONTENT_TYPE_HTML;
 8003d6c:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <HTTPGetContentType+0x138>)
 8003d6e:	e066      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".css"))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fc f9d2 	bl	800011c <strlen>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	3b04      	subs	r3, #4
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	18d3      	adds	r3, r2, r3
 8003d80:	4a34      	ldr	r2, [pc, #208]	; (8003e54 <HTTPGetContentType+0x140>)
 8003d82:	0011      	movs	r1, r2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7fc f9bf 	bl	8000108 <strcmp>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d101      	bne.n	8003d92 <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 8003d8e:	4b32      	ldr	r3, [pc, #200]	; (8003e58 <HTTPGetContentType+0x144>)
 8003d90:	e055      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".js"))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7fc f9c1 	bl	800011c <strlen>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	3b03      	subs	r3, #3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	18d3      	adds	r3, r2, r3
 8003da2:	4a2e      	ldr	r2, [pc, #184]	; (8003e5c <HTTPGetContentType+0x148>)
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7fc f9ae 	bl	8000108 <strcmp>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d101      	bne.n	8003db4 <HTTPGetContentType+0xa0>
			return HTTP_CONTENT_TYPE_JS;
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HTTPGetContentType+0x14c>)
 8003db2:	e044      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".png"))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f7fc f9b0 	bl	800011c <strlen>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	3b04      	subs	r3, #4
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	4a27      	ldr	r2, [pc, #156]	; (8003e64 <HTTPGetContentType+0x150>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fc f99d 	bl	8000108 <strcmp>
 8003dce:	1e03      	subs	r3, r0, #0
 8003dd0:	d101      	bne.n	8003dd6 <HTTPGetContentType+0xc2>
			return HTTP_CONTENT_TYPE_PNG;
 8003dd2:	4b25      	ldr	r3, [pc, #148]	; (8003e68 <HTTPGetContentType+0x154>)
 8003dd4:	e033      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpg"))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7fc f99f 	bl	800011c <strlen>
 8003dde:	0003      	movs	r3, r0
 8003de0:	3b04      	subs	r3, #4
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	18d3      	adds	r3, r2, r3
 8003de6:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <HTTPGetContentType+0x158>)
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fc f98c 	bl	8000108 <strcmp>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d101      	bne.n	8003df8 <HTTPGetContentType+0xe4>
			return HTTP_CONTENT_TYPE_JPEG;
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HTTPGetContentType+0x15c>)
 8003df6:	e022      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpeg"))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7fc f98e 	bl	800011c <strlen>
 8003e00:	0003      	movs	r3, r0
 8003e02:	3b05      	subs	r3, #5
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	18d3      	adds	r3, r2, r3
 8003e08:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <HTTPGetContentType+0x160>)
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fc f97b 	bl	8000108 <strcmp>
 8003e12:	1e03      	subs	r3, r0, #0
 8003e14:	d101      	bne.n	8003e1a <HTTPGetContentType+0x106>
			return HTTP_CONTENT_TYPE_JPEG;
 8003e16:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HTTPGetContentType+0x15c>)
 8003e18:	e011      	b.n	8003e3e <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".gif"))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fc f97d 	bl	800011c <strlen>
 8003e22:	0003      	movs	r3, r0
 8003e24:	3b04      	subs	r3, #4
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	18d3      	adds	r3, r2, r3
 8003e2a:	4a13      	ldr	r2, [pc, #76]	; (8003e78 <HTTPGetContentType+0x164>)
 8003e2c:	0011      	movs	r1, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7fc f96a 	bl	8000108 <strcmp>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d101      	bne.n	8003e3c <HTTPGetContentType+0x128>
			return HTTP_CONTENT_TYPE_GIF;
 8003e38:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HTTPGetContentType+0x168>)
 8003e3a:	e000      	b.n	8003e3e <HTTPGetContentType+0x12a>
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <HTTPGetContentType+0x16c>)
}
 8003e3e:	0018      	movs	r0, r3
 8003e40:	46bd      	mov	sp, r7
 8003e42:	b002      	add	sp, #8
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	0800681c 	.word	0x0800681c
 8003e4c:	08006998 	.word	0x08006998
 8003e50:	08006824 	.word	0x08006824
 8003e54:	0800682c 	.word	0x0800682c
 8003e58:	080069a4 	.word	0x080069a4
 8003e5c:	08006834 	.word	0x08006834
 8003e60:	080069b0 	.word	0x080069b0
 8003e64:	08006838 	.word	0x08006838
 8003e68:	080069c8 	.word	0x080069c8
 8003e6c:	08006840 	.word	0x08006840
 8003e70:	080069d4 	.word	0x080069d4
 8003e74:	08006848 	.word	0x08006848
 8003e78:	08006850 	.word	0x08006850
 8003e7c:	080069e0 	.word	0x080069e0
 8003e80:	0800698c 	.word	0x0800698c

08003e84 <HTTPSendFile>:

#ifdef __ON_BOARD_
void HTTPSendFile(HTTPRequestParseState *pS, int code, FSfile_typedef file)
{
 8003e84:	b082      	sub	sp, #8
 8003e86:	b590      	push	{r4, r7, lr}
 8003e88:	b08f      	sub	sp, #60	; 0x3c
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
 8003e90:	2048      	movs	r0, #72	; 0x48
 8003e92:	1839      	adds	r1, r7, r0
 8003e94:	600a      	str	r2, [r1, #0]
 8003e96:	604b      	str	r3, [r1, #4]
	char s_tmp[32];
	const char* content_type;
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	23ae      	movs	r3, #174	; 0xae
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	58d3      	ldr	r3, [r2, r3]
 8003ea0:	633b      	str	r3, [r7, #48]	; 0x30
	BOOL is_gzip = false;
 8003ea2:	232f      	movs	r3, #47	; 0x2f
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
	/* preprocessing */
	if(ENDSWITH(file.path, ".gz"))
 8003eaa:	183b      	adds	r3, r7, r0
 8003eac:	681c      	ldr	r4, [r3, #0]
 8003eae:	183b      	adds	r3, r7, r0
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f932 	bl	800011c <strlen>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	3b03      	subs	r3, #3
 8003ebc:	18e3      	adds	r3, r4, r3
 8003ebe:	4aa9      	ldr	r2, [pc, #676]	; (8004164 <HTTPSendFile+0x2e0>)
 8003ec0:	0011      	movs	r1, r2
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fc f920 	bl	8000108 <strcmp>
 8003ec8:	1e03      	subs	r3, r0, #0
 8003eca:	d11c      	bne.n	8003f06 <HTTPSendFile+0x82>
	{
		is_gzip = true;
 8003ecc:	232f      	movs	r3, #47	; 0x2f
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	701a      	strb	r2, [r3, #0]
		strcpy(s_tmp, file.path);
 8003ed4:	2348      	movs	r3, #72	; 0x48
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	240c      	movs	r4, #12
 8003edc:	193b      	adds	r3, r7, r4
 8003ede:	0011      	movs	r1, r2
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f002 fa9e 	bl	8006422 <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 8003ee6:	193b      	adds	r3, r7, r4
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f917 	bl	800011c <strlen>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	3b03      	subs	r3, #3
 8003ef2:	193a      	adds	r2, r7, r4
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	54d1      	strb	r1, [r2, r3]
		content_type = HTTPGetContentType(s_tmp);
 8003ef8:	193b      	adds	r3, r7, r4
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff ff0a 	bl	8003d14 <HTTPGetContentType>
 8003f00:	0003      	movs	r3, r0
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
 8003f04:	e007      	b.n	8003f16 <HTTPSendFile+0x92>
	}
	else
	{
		content_type = HTTPGetContentType(file.path);
 8003f06:	2348      	movs	r3, #72	; 0x48
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff ff01 	bl	8003d14 <HTTPGetContentType>
 8003f12:	0003      	movs	r3, r0
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
	}
	// construct header
	*buf = 0; // clear buffer
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
	// Line 1
	// HTTP/1.1
	strcat(buf, HTTP_STR_VERSION);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7fc f8fc 	bl	800011c <strlen>
 8003f24:	0003      	movs	r3, r0
 8003f26:	001a      	movs	r2, r3
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	189a      	adds	r2, r3, r2
 8003f2c:	4b8e      	ldr	r3, [pc, #568]	; (8004168 <HTTPSendFile+0x2e4>)
 8003f2e:	0010      	movs	r0, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	2309      	movs	r3, #9
 8003f34:	001a      	movs	r2, r3
 8003f36:	f002 fa47 	bl	80063c8 <memcpy>
	buf += strlen(HTTP_STR_VERSION); // HTTP/1.1
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	3308      	adds	r3, #8
 8003f3e:	633b      	str	r3, [r7, #48]	; 0x30
	*buf = ' '; // HTTP/1.1_
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	2220      	movs	r2, #32
 8003f44:	701a      	strb	r2, [r3, #0]
	buf++;
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	3301      	adds	r3, #1
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
	// CODE
	buf += u16toa(code, buf);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f52:	0011      	movs	r1, r2
 8003f54:	0018      	movs	r0, r3
 8003f56:	f001 f86e 	bl	8005036 <u16toa>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, " OK\r\n");
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc f8d8 	bl	800011c <strlen>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	001a      	movs	r2, r3
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	189a      	adds	r2, r3, r2
 8003f74:	4b7d      	ldr	r3, [pc, #500]	; (800416c <HTTPSendFile+0x2e8>)
 8003f76:	0010      	movs	r0, r2
 8003f78:	0019      	movs	r1, r3
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	001a      	movs	r2, r3
 8003f7e:	f002 fa23 	bl	80063c8 <memcpy>
	buf += 5;	// 200 OK\r\n
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	3305      	adds	r3, #5
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 2: Connection
	strcat(buf, "Connection: ");
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f7fc f8c6 	bl	800011c <strlen>
 8003f90:	0003      	movs	r3, r0
 8003f92:	001a      	movs	r2, r3
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	189a      	adds	r2, r3, r2
 8003f98:	4b75      	ldr	r3, [pc, #468]	; (8004170 <HTTPSendFile+0x2ec>)
 8003f9a:	0010      	movs	r0, r2
 8003f9c:	0019      	movs	r1, r3
 8003f9e:	230d      	movs	r3, #13
 8003fa0:	001a      	movs	r2, r3
 8003fa2:	f002 fa11 	bl	80063c8 <memcpy>
	buf += 12;
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	330c      	adds	r3, #12
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30
	if(pS->connection == KEEP_ALIVE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	791b      	ldrb	r3, [r3, #4]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d112      	bne.n	8003fda <HTTPSendFile+0x156>
	{
		strcat(buf, "Keep-Alive\r\n");
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fc f8b0 	bl	800011c <strlen>
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	189a      	adds	r2, r3, r2
 8003fc4:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HTTPSendFile+0x2f0>)
 8003fc6:	0010      	movs	r0, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	230d      	movs	r3, #13
 8003fcc:	001a      	movs	r2, r3
 8003fce:	f002 f9fb 	bl	80063c8 <memcpy>
		buf += 12;
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fd8:	e011      	b.n	8003ffe <HTTPSendFile+0x17a>
	}
	else
	{
		strcat(buf, "Closed\r\n");
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc f89d 	bl	800011c <strlen>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	001a      	movs	r2, r3
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	189a      	adds	r2, r3, r2
 8003fea:	4b63      	ldr	r3, [pc, #396]	; (8004178 <HTTPSendFile+0x2f4>)
 8003fec:	0010      	movs	r0, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	2309      	movs	r3, #9
 8003ff2:	001a      	movs	r2, r3
 8003ff4:	f002 f9e8 	bl	80063c8 <memcpy>
		buf += 8;
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 3: Content-Encoding
	if(is_gzip)
 8003ffe:	232f      	movs	r3, #47	; 0x2f
 8004000:	18fb      	adds	r3, r7, r3
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d011      	beq.n	800402c <HTTPSendFile+0x1a8>
	{
		strcat(buf, "Content-Encoding: gzip\r\n");
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	0018      	movs	r0, r3
 800400c:	f7fc f886 	bl	800011c <strlen>
 8004010:	0003      	movs	r3, r0
 8004012:	001a      	movs	r2, r3
 8004014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004016:	189a      	adds	r2, r3, r2
 8004018:	4b58      	ldr	r3, [pc, #352]	; (800417c <HTTPSendFile+0x2f8>)
 800401a:	0010      	movs	r0, r2
 800401c:	0019      	movs	r1, r3
 800401e:	2319      	movs	r3, #25
 8004020:	001a      	movs	r2, r3
 8004022:	f002 f9d1 	bl	80063c8 <memcpy>
		buf += 24;
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	3318      	adds	r3, #24
 800402a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 4: Content-Type
	strcat(buf, "Content-Type: ");
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	0018      	movs	r0, r3
 8004030:	f7fc f874 	bl	800011c <strlen>
 8004034:	0003      	movs	r3, r0
 8004036:	001a      	movs	r2, r3
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	189a      	adds	r2, r3, r2
 800403c:	4b50      	ldr	r3, [pc, #320]	; (8004180 <HTTPSendFile+0x2fc>)
 800403e:	0010      	movs	r0, r2
 8004040:	0019      	movs	r1, r3
 8004042:	230f      	movs	r3, #15
 8004044:	001a      	movs	r2, r3
 8004046:	f002 f9bf 	bl	80063c8 <memcpy>
	buf += 14;
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	330e      	adds	r3, #14
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, content_type);
 8004050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f002 f9c7 	bl	80063ea <strcat>
	buf += strlen(content_type);
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	0018      	movs	r0, r3
 8004060:	f7fc f85c 	bl	800011c <strlen>
 8004064:	0002      	movs	r2, r0
 8004066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004068:	189b      	adds	r3, r3, r2
 800406a:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, "\r\n");
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	0018      	movs	r0, r3
 8004070:	f7fc f854 	bl	800011c <strlen>
 8004074:	0003      	movs	r3, r0
 8004076:	001a      	movs	r2, r3
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	189a      	adds	r2, r3, r2
 800407c:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HTTPSendFile+0x300>)
 800407e:	0010      	movs	r0, r2
 8004080:	0019      	movs	r1, r3
 8004082:	2303      	movs	r3, #3
 8004084:	001a      	movs	r2, r3
 8004086:	f002 f99f 	bl	80063c8 <memcpy>
	buf += 2;
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	3302      	adds	r3, #2
 800408e:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 5: Content-Length
	strcat(buf, "Content-Length: ");
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	0018      	movs	r0, r3
 8004094:	f7fc f842 	bl	800011c <strlen>
 8004098:	0003      	movs	r3, r0
 800409a:	001a      	movs	r2, r3
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	189a      	adds	r2, r3, r2
 80040a0:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HTTPSendFile+0x304>)
 80040a2:	0010      	movs	r0, r2
 80040a4:	0019      	movs	r1, r3
 80040a6:	2311      	movs	r3, #17
 80040a8:	001a      	movs	r2, r3
 80040aa:	f002 f98d 	bl	80063c8 <memcpy>
	buf += 16;
 80040ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b0:	3310      	adds	r3, #16
 80040b2:	633b      	str	r3, [r7, #48]	; 0x30
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 80040b4:	2448      	movs	r4, #72	; 0x48
 80040b6:	193b      	adds	r3, r7, r4
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f000 ffb8 	bl	8005036 <u16toa>
 80040c6:	0003      	movs	r3, r0
 80040c8:	001a      	movs	r2, r3
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7fc f822 	bl	800011c <strlen>
 80040d8:	0003      	movs	r3, r0
 80040da:	001a      	movs	r2, r3
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	189a      	adds	r2, r3, r2
 80040e0:	4b2a      	ldr	r3, [pc, #168]	; (800418c <HTTPSendFile+0x308>)
 80040e2:	0010      	movs	r0, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	2303      	movs	r3, #3
 80040e8:	001a      	movs	r2, r3
 80040ea:	f002 f96d 	bl	80063c8 <memcpy>
	buf += 2;
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	3302      	adds	r3, #2
 80040f2:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 6: end of header
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 80040f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7fc f810 	bl	800011c <strlen>
 80040fc:	0003      	movs	r3, r0
 80040fe:	001a      	movs	r2, r3
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	189a      	adds	r2, r3, r2
 8004104:	4b21      	ldr	r3, [pc, #132]	; (800418c <HTTPSendFile+0x308>)
 8004106:	0010      	movs	r0, r2
 8004108:	0019      	movs	r1, r3
 800410a:	2303      	movs	r3, #3
 800410c:	001a      	movs	r2, r3
 800410e:	f002 f95b 	bl	80063c8 <memcpy>
	buf += 2;
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	3302      	adds	r3, #2
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
	pS->len_response_header = strlen(pS->response_header);
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	23ae      	movs	r3, #174	; 0xae
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	58d3      	ldr	r3, [r2, r3]
 8004120:	0018      	movs	r0, r3
 8004122:	f7fb fffb 	bl	800011c <strlen>
 8004126:	0003      	movs	r3, r0
 8004128:	b299      	uxth	r1, r3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	23ad      	movs	r3, #173	; 0xad
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	52d1      	strh	r1, [r2, r3]
	pS->len_response_content_remain = (uint16_t)file.size;
 8004132:	193b      	adds	r3, r7, r4
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	b299      	uxth	r1, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	23b0      	movs	r3, #176	; 0xb0
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	52d1      	strh	r1, [r2, r3]
	pS->response_content = file.p_content;
 8004140:	193b      	adds	r3, r7, r4
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	23b2      	movs	r3, #178	; 0xb2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	50d1      	str	r1, [r2, r3]
	pS->response_stage = RESPONSE_PREPARED;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	23ac      	movs	r3, #172	; 0xac
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	2101      	movs	r1, #1
 8004154:	54d1      	strb	r1, [r2, r3]

}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b00f      	add	sp, #60	; 0x3c
 800415c:	bc90      	pop	{r4, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	b002      	add	sp, #8
 8004162:	4718      	bx	r3
 8004164:	08006858 	.word	0x08006858
 8004168:	08006980 	.word	0x08006980
 800416c:	0800685c 	.word	0x0800685c
 8004170:	08006864 	.word	0x08006864
 8004174:	08006874 	.word	0x08006874
 8004178:	08006884 	.word	0x08006884
 800417c:	08006890 	.word	0x08006890
 8004180:	080068ac 	.word	0x080068ac
 8004184:	080068bc 	.word	0x080068bc
 8004188:	080068c0 	.word	0x080068c0
 800418c:	08006974 	.word	0x08006974

08004190 <HTTPSendStr>:

void HTTPSendStr(HTTPRequestParseState* pS, int code, const char* content)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	// construct header
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	23ae      	movs	r3, #174	; 0xae
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	58d3      	ldr	r3, [r2, r3]
 80041a4:	61fb      	str	r3, [r7, #28]
	*buf = 0; // clear buffer
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
	strcat(buf, HTTP_STR_VERSION);
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7fb ffb4 	bl	800011c <strlen>
 80041b4:	0003      	movs	r3, r0
 80041b6:	001a      	movs	r2, r3
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	189a      	adds	r2, r3, r2
 80041bc:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <HTTPSendStr+0x250>)
 80041be:	0010      	movs	r0, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	2309      	movs	r3, #9
 80041c4:	001a      	movs	r2, r3
 80041c6:	f002 f8ff 	bl	80063c8 <memcpy>
	// Line 1
	// HTTP/1.1
	buf += strlen(HTTP_STR_VERSION);
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3308      	adds	r3, #8
 80041ce:	61fb      	str	r3, [r7, #28]
	*buf = ' '; // HTTP/1.1_
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2220      	movs	r2, #32
 80041d4:	701a      	strb	r2, [r3, #0]
	buf++;
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3301      	adds	r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
	// CODE
	buf += u16toa(code, buf);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f000 ff26 	bl	8005036 <u16toa>
 80041ea:	0003      	movs	r3, r0
 80041ec:	001a      	movs	r2, r3
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	61fb      	str	r3, [r7, #28]
	strcat(buf, " OK\r\n");
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	0018      	movs	r0, r3
 80041f8:	f7fb ff90 	bl	800011c <strlen>
 80041fc:	0003      	movs	r3, r0
 80041fe:	001a      	movs	r2, r3
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	189a      	adds	r2, r3, r2
 8004204:	4b77      	ldr	r3, [pc, #476]	; (80043e4 <HTTPSendStr+0x254>)
 8004206:	0010      	movs	r0, r2
 8004208:	0019      	movs	r1, r3
 800420a:	2306      	movs	r3, #6
 800420c:	001a      	movs	r2, r3
 800420e:	f002 f8db 	bl	80063c8 <memcpy>
	buf += 5;	// 200 OK\r\n
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3305      	adds	r3, #5
 8004216:	61fb      	str	r3, [r7, #28]
	// Line 2: Connection
	strcat(buf, "Connection: ");
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	0018      	movs	r0, r3
 800421c:	f7fb ff7e 	bl	800011c <strlen>
 8004220:	0003      	movs	r3, r0
 8004222:	001a      	movs	r2, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	189a      	adds	r2, r3, r2
 8004228:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <HTTPSendStr+0x258>)
 800422a:	0010      	movs	r0, r2
 800422c:	0019      	movs	r1, r3
 800422e:	230d      	movs	r3, #13
 8004230:	001a      	movs	r2, r3
 8004232:	f002 f8c9 	bl	80063c8 <memcpy>
	buf += 12;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	330c      	adds	r3, #12
 800423a:	61fb      	str	r3, [r7, #28]
	if(pS->connection == KEEP_ALIVE)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	791b      	ldrb	r3, [r3, #4]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d112      	bne.n	800426a <HTTPSendStr+0xda>
	{
		strcat(buf, "Keep-Alive\r\n");
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	0018      	movs	r0, r3
 8004248:	f7fb ff68 	bl	800011c <strlen>
 800424c:	0003      	movs	r3, r0
 800424e:	001a      	movs	r2, r3
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	189a      	adds	r2, r3, r2
 8004254:	4b65      	ldr	r3, [pc, #404]	; (80043ec <HTTPSendStr+0x25c>)
 8004256:	0010      	movs	r0, r2
 8004258:	0019      	movs	r1, r3
 800425a:	230d      	movs	r3, #13
 800425c:	001a      	movs	r2, r3
 800425e:	f002 f8b3 	bl	80063c8 <memcpy>
		buf += 12;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	330c      	adds	r3, #12
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e011      	b.n	800428e <HTTPSendStr+0xfe>
	}
	else
	{
		strcat(buf, "Closed\r\n");
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fb ff55 	bl	800011c <strlen>
 8004272:	0003      	movs	r3, r0
 8004274:	001a      	movs	r2, r3
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	189a      	adds	r2, r3, r2
 800427a:	4b5d      	ldr	r3, [pc, #372]	; (80043f0 <HTTPSendStr+0x260>)
 800427c:	0010      	movs	r0, r2
 800427e:	0019      	movs	r1, r3
 8004280:	2309      	movs	r3, #9
 8004282:	001a      	movs	r2, r3
 8004284:	f002 f8a0 	bl	80063c8 <memcpy>
		buf += 8;
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3308      	adds	r3, #8
 800428c:	61fb      	str	r3, [r7, #28]
	}
	// Line 3: Content-Type
	const char* content_type = HTTPGetContentType(pS->URI);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3305      	adds	r3, #5
 8004292:	0018      	movs	r0, r3
 8004294:	f7ff fd3e 	bl	8003d14 <HTTPGetContentType>
 8004298:	0003      	movs	r3, r0
 800429a:	61bb      	str	r3, [r7, #24]
	strcat(buf, "Content-Type: ");
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	0018      	movs	r0, r3
 80042a0:	f7fb ff3c 	bl	800011c <strlen>
 80042a4:	0003      	movs	r3, r0
 80042a6:	001a      	movs	r2, r3
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	189a      	adds	r2, r3, r2
 80042ac:	4b51      	ldr	r3, [pc, #324]	; (80043f4 <HTTPSendStr+0x264>)
 80042ae:	0010      	movs	r0, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	230f      	movs	r3, #15
 80042b4:	001a      	movs	r2, r3
 80042b6:	f002 f887 	bl	80063c8 <memcpy>
	buf += 14;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	330e      	adds	r3, #14
 80042be:	61fb      	str	r3, [r7, #28]
	strcat(buf, content_type);
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	0011      	movs	r1, r2
 80042c6:	0018      	movs	r0, r3
 80042c8:	f002 f88f 	bl	80063ea <strcat>
	buf += strlen(content_type);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7fb ff24 	bl	800011c <strlen>
 80042d4:	0002      	movs	r2, r0
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	189b      	adds	r3, r3, r2
 80042da:	61fb      	str	r3, [r7, #28]
	strcat(buf, "\r\n");
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	0018      	movs	r0, r3
 80042e0:	f7fb ff1c 	bl	800011c <strlen>
 80042e4:	0003      	movs	r3, r0
 80042e6:	001a      	movs	r2, r3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	189a      	adds	r2, r3, r2
 80042ec:	4b42      	ldr	r3, [pc, #264]	; (80043f8 <HTTPSendStr+0x268>)
 80042ee:	0010      	movs	r0, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	2303      	movs	r3, #3
 80042f4:	001a      	movs	r2, r3
 80042f6:	f002 f867 	bl	80063c8 <memcpy>
	buf += 2;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	3302      	adds	r3, #2
 80042fe:	61fb      	str	r3, [r7, #28]
	// Line 4: Content-Length
	strcat(buf, "Content-Length: ");
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	0018      	movs	r0, r3
 8004304:	f7fb ff0a 	bl	800011c <strlen>
 8004308:	0003      	movs	r3, r0
 800430a:	001a      	movs	r2, r3
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	189a      	adds	r2, r3, r2
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HTTPSendStr+0x26c>)
 8004312:	0010      	movs	r0, r2
 8004314:	0019      	movs	r1, r3
 8004316:	2311      	movs	r3, #17
 8004318:	001a      	movs	r2, r3
 800431a:	f002 f855 	bl	80063c8 <memcpy>
	buf += 16;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3310      	adds	r3, #16
 8004322:	61fb      	str	r3, [r7, #28]
	uint16_t len_content = strlen(content);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	0018      	movs	r0, r3
 8004328:	f7fb fef8 	bl	800011c <strlen>
 800432c:	0002      	movs	r2, r0
 800432e:	2116      	movs	r1, #22
 8004330:	187b      	adds	r3, r7, r1
 8004332:	801a      	strh	r2, [r3, #0]
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	187b      	adds	r3, r7, r1
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f000 fe7a 	bl	8005036 <u16toa>
 8004342:	0003      	movs	r3, r0
 8004344:	001a      	movs	r2, r3
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	189b      	adds	r3, r3, r2
 800434a:	61fb      	str	r3, [r7, #28]
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	0018      	movs	r0, r3
 8004350:	f7fb fee4 	bl	800011c <strlen>
 8004354:	0003      	movs	r3, r0
 8004356:	001a      	movs	r2, r3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	189a      	adds	r2, r3, r2
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HTTPSendStr+0x270>)
 800435e:	0010      	movs	r0, r2
 8004360:	0019      	movs	r1, r3
 8004362:	2303      	movs	r3, #3
 8004364:	001a      	movs	r2, r3
 8004366:	f002 f82f 	bl	80063c8 <memcpy>
	buf += 2;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3302      	adds	r3, #2
 800436e:	61fb      	str	r3, [r7, #28]
	// Line 5: End of header
	strcat(buf, HTTP_LINE_DELIM);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	0018      	movs	r0, r3
 8004374:	f7fb fed2 	bl	800011c <strlen>
 8004378:	0003      	movs	r3, r0
 800437a:	001a      	movs	r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	189a      	adds	r2, r3, r2
 8004380:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <HTTPSendStr+0x270>)
 8004382:	0010      	movs	r0, r2
 8004384:	0019      	movs	r1, r3
 8004386:	2303      	movs	r3, #3
 8004388:	001a      	movs	r2, r3
 800438a:	f002 f81d 	bl	80063c8 <memcpy>
	buf += 2;
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3302      	adds	r3, #2
 8004392:	61fb      	str	r3, [r7, #28]
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	23ae      	movs	r3, #174	; 0xae
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	58d3      	ldr	r3, [r2, r3]
 800439c:	0018      	movs	r0, r3
 800439e:	f7fb febd 	bl	800011c <strlen>
 80043a2:	0003      	movs	r3, r0
 80043a4:	b299      	uxth	r1, r3
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	23ad      	movs	r3, #173	; 0xad
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	52d1      	strh	r1, [r2, r3]
	pS->len_response_content_remain = strlen(content);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f7fb feb3 	bl	800011c <strlen>
 80043b6:	0003      	movs	r3, r0
 80043b8:	b299      	uxth	r1, r3
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	23b0      	movs	r3, #176	; 0xb0
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	52d1      	strh	r1, [r2, r3]
	pS->response_content = (uint8_t*)content;
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	23b2      	movs	r3, #178	; 0xb2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	50d1      	str	r1, [r2, r3]
	pS->response_stage = RESPONSE_PREPARED;
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	23ac      	movs	r3, #172	; 0xac
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	2101      	movs	r1, #1
 80043d4:	54d1      	strb	r1, [r2, r3]
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	46bd      	mov	sp, r7
 80043da:	b008      	add	sp, #32
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	08006980 	.word	0x08006980
 80043e4:	0800685c 	.word	0x0800685c
 80043e8:	08006864 	.word	0x08006864
 80043ec:	08006874 	.word	0x08006874
 80043f0:	08006884 	.word	0x08006884
 80043f4:	080068ac 	.word	0x080068ac
 80043f8:	080068bc 	.word	0x080068bc
 80043fc:	080068c0 	.word	0x080068c0
 8004400:	08006974 	.word	0x08006974

08004404 <HTTPredirect>:

void HTTPredirect(HTTPRequestParseState *pS, const char* URI)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	char* buf = pS->response_header;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	23ae      	movs	r3, #174	; 0xae
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	58d3      	ldr	r3, [r2, r3]
 8004416:	60fb      	str	r3, [r7, #12]
	*buf = 0; // clear buffer
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	// HTTP/1.1 302 Found
	// Location: /
	strcat(buf, HTTP_STR_VERSION);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	0018      	movs	r0, r3
 8004422:	f7fb fe7b 	bl	800011c <strlen>
 8004426:	0003      	movs	r3, r0
 8004428:	001a      	movs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	189a      	adds	r2, r3, r2
 800442e:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <HTTPredirect+0x224>)
 8004430:	0010      	movs	r0, r2
 8004432:	0019      	movs	r1, r3
 8004434:	2309      	movs	r3, #9
 8004436:	001a      	movs	r2, r3
 8004438:	f001 ffc6 	bl	80063c8 <memcpy>
	buf += strlen(HTTP_STR_VERSION);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3308      	adds	r3, #8
 8004440:	60fb      	str	r3, [r7, #12]
	strcat(buf, " 302");
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	0018      	movs	r0, r3
 8004446:	f7fb fe69 	bl	800011c <strlen>
 800444a:	0003      	movs	r3, r0
 800444c:	001a      	movs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	189a      	adds	r2, r3, r2
 8004452:	4b76      	ldr	r3, [pc, #472]	; (800462c <HTTPredirect+0x228>)
 8004454:	0010      	movs	r0, r2
 8004456:	0019      	movs	r1, r3
 8004458:	2305      	movs	r3, #5
 800445a:	001a      	movs	r2, r3
 800445c:	f001 ffb4 	bl	80063c8 <memcpy>
	buf += 4;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3304      	adds	r3, #4
 8004464:	60fb      	str	r3, [r7, #12]
	strcat(buf, " Found");
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	0018      	movs	r0, r3
 800446a:	f7fb fe57 	bl	800011c <strlen>
 800446e:	0003      	movs	r3, r0
 8004470:	001a      	movs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	189a      	adds	r2, r3, r2
 8004476:	4b6e      	ldr	r3, [pc, #440]	; (8004630 <HTTPredirect+0x22c>)
 8004478:	0010      	movs	r0, r2
 800447a:	0019      	movs	r1, r3
 800447c:	2307      	movs	r3, #7
 800447e:	001a      	movs	r2, r3
 8004480:	f001 ffa2 	bl	80063c8 <memcpy>
	buf += 6;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3306      	adds	r3, #6
 8004488:	60fb      	str	r3, [r7, #12]
	strcat(buf,HTTP_LINE_DELIM);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	0018      	movs	r0, r3
 800448e:	f7fb fe45 	bl	800011c <strlen>
 8004492:	0003      	movs	r3, r0
 8004494:	001a      	movs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	189a      	adds	r2, r3, r2
 800449a:	4b66      	ldr	r3, [pc, #408]	; (8004634 <HTTPredirect+0x230>)
 800449c:	0010      	movs	r0, r2
 800449e:	0019      	movs	r1, r3
 80044a0:	2303      	movs	r3, #3
 80044a2:	001a      	movs	r2, r3
 80044a4:	f001 ff90 	bl	80063c8 <memcpy>
	buf +=2 ;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3302      	adds	r3, #2
 80044ac:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Connection: ");
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7fb fe33 	bl	800011c <strlen>
 80044b6:	0003      	movs	r3, r0
 80044b8:	001a      	movs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	189a      	adds	r2, r3, r2
 80044be:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HTTPredirect+0x234>)
 80044c0:	0010      	movs	r0, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	230d      	movs	r3, #13
 80044c6:	001a      	movs	r2, r3
 80044c8:	f001 ff7e 	bl	80063c8 <memcpy>
	buf += 12;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	330c      	adds	r3, #12
 80044d0:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Closed");
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7fb fe21 	bl	800011c <strlen>
 80044da:	0003      	movs	r3, r0
 80044dc:	001a      	movs	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	189a      	adds	r2, r3, r2
 80044e2:	4b56      	ldr	r3, [pc, #344]	; (800463c <HTTPredirect+0x238>)
 80044e4:	0010      	movs	r0, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	2307      	movs	r3, #7
 80044ea:	001a      	movs	r2, r3
 80044ec:	f001 ff6c 	bl	80063c8 <memcpy>
	buf += 6;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3306      	adds	r3, #6
 80044f4:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fb fe0f 	bl	800011c <strlen>
 80044fe:	0003      	movs	r3, r0
 8004500:	001a      	movs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	189a      	adds	r2, r3, r2
 8004506:	4b4b      	ldr	r3, [pc, #300]	; (8004634 <HTTPredirect+0x230>)
 8004508:	0010      	movs	r0, r2
 800450a:	0019      	movs	r1, r3
 800450c:	2303      	movs	r3, #3
 800450e:	001a      	movs	r2, r3
 8004510:	f001 ff5a 	bl	80063c8 <memcpy>
	buf += 2;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3302      	adds	r3, #2
 8004518:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Content-Length: ");
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	0018      	movs	r0, r3
 800451e:	f7fb fdfd 	bl	800011c <strlen>
 8004522:	0003      	movs	r3, r0
 8004524:	001a      	movs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	189a      	adds	r2, r3, r2
 800452a:	4b45      	ldr	r3, [pc, #276]	; (8004640 <HTTPredirect+0x23c>)
 800452c:	0010      	movs	r0, r2
 800452e:	0019      	movs	r1, r3
 8004530:	2311      	movs	r3, #17
 8004532:	001a      	movs	r2, r3
 8004534:	f001 ff48 	bl	80063c8 <memcpy>
	buf += 16;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3310      	adds	r3, #16
 800453c:	60fb      	str	r3, [r7, #12]
	strcat(buf, "0");
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fb fdeb 	bl	800011c <strlen>
 8004546:	0003      	movs	r3, r0
 8004548:	001a      	movs	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	189a      	adds	r2, r3, r2
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <HTTPredirect+0x240>)
 8004550:	0010      	movs	r0, r2
 8004552:	0019      	movs	r1, r3
 8004554:	2302      	movs	r3, #2
 8004556:	001a      	movs	r2, r3
 8004558:	f001 ff36 	bl	80063c8 <memcpy>
	buf += 1;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	0018      	movs	r0, r3
 8004566:	f7fb fdd9 	bl	800011c <strlen>
 800456a:	0003      	movs	r3, r0
 800456c:	001a      	movs	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	189a      	adds	r2, r3, r2
 8004572:	4b30      	ldr	r3, [pc, #192]	; (8004634 <HTTPredirect+0x230>)
 8004574:	0010      	movs	r0, r2
 8004576:	0019      	movs	r1, r3
 8004578:	2303      	movs	r3, #3
 800457a:	001a      	movs	r2, r3
 800457c:	f001 ff24 	bl	80063c8 <memcpy>
	buf += 2;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3302      	adds	r3, #2
 8004584:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Location: ");
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	0018      	movs	r0, r3
 800458a:	f7fb fdc7 	bl	800011c <strlen>
 800458e:	0003      	movs	r3, r0
 8004590:	001a      	movs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	189a      	adds	r2, r3, r2
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HTTPredirect+0x244>)
 8004598:	0010      	movs	r0, r2
 800459a:	0019      	movs	r1, r3
 800459c:	230b      	movs	r3, #11
 800459e:	001a      	movs	r2, r3
 80045a0:	f001 ff12 	bl	80063c8 <memcpy>
	buf+= 10;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	330a      	adds	r3, #10
 80045a8:	60fb      	str	r3, [r7, #12]
	strcat(buf, URI);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	0011      	movs	r1, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	f001 ff1a 	bl	80063ea <strcat>
	strcat(buf, HTTP_LINE_DELIM);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fb fdaf 	bl	800011c <strlen>
 80045be:	0003      	movs	r3, r0
 80045c0:	001a      	movs	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	189a      	adds	r2, r3, r2
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HTTPredirect+0x230>)
 80045c8:	0010      	movs	r0, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	2303      	movs	r3, #3
 80045ce:	001a      	movs	r2, r3
 80045d0:	f001 fefa 	bl	80063c8 <memcpy>
	strcat(buf, HTTP_LINE_DELIM);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	0018      	movs	r0, r3
 80045d8:	f7fb fda0 	bl	800011c <strlen>
 80045dc:	0003      	movs	r3, r0
 80045de:	001a      	movs	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	189a      	adds	r2, r3, r2
 80045e4:	4b13      	ldr	r3, [pc, #76]	; (8004634 <HTTPredirect+0x230>)
 80045e6:	0010      	movs	r0, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	2303      	movs	r3, #3
 80045ec:	001a      	movs	r2, r3
 80045ee:	f001 feeb 	bl	80063c8 <memcpy>
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	23ae      	movs	r3, #174	; 0xae
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	58d3      	ldr	r3, [r2, r3]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f7fb fd8e 	bl	800011c <strlen>
 8004600:	0003      	movs	r3, r0
 8004602:	b299      	uxth	r1, r3
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	23ad      	movs	r3, #173	; 0xad
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	52d1      	strh	r1, [r2, r3]
	pS->len_response_content_remain = 0;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	23b0      	movs	r3, #176	; 0xb0
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	2100      	movs	r1, #0
 8004614:	52d1      	strh	r1, [r2, r3]
	pS->response_stage = RESPONSE_PREPARED;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	23ac      	movs	r3, #172	; 0xac
 800461a:	005b      	lsls	r3, r3, #1
 800461c:	2101      	movs	r1, #1
 800461e:	54d1      	strb	r1, [r2, r3]
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b004      	add	sp, #16
 8004626:	bd80      	pop	{r7, pc}
 8004628:	08006980 	.word	0x08006980
 800462c:	080068d4 	.word	0x080068d4
 8004630:	080068dc 	.word	0x080068dc
 8004634:	08006974 	.word	0x08006974
 8004638:	08006864 	.word	0x08006864
 800463c:	080068e4 	.word	0x080068e4
 8004640:	080068c0 	.word	0x080068c0
 8004644:	080068ec 	.word	0x080068ec
 8004648:	080068f0 	.word	0x080068f0

0800464c <HTTPonNotFound>:

void HTTPonNotFound(HTTPRequestParseState *pS)
{
 800464c:	b590      	push	{r4, r7, lr}
 800464e:	b0a3      	sub	sp, #140	; 0x8c
 8004650:	af02      	add	r7, sp, #8
 8004652:	6078      	str	r0, [r7, #4]
	char s_tmp[MAX_LEN_URI + 4];
	static char s_notfound[MAX_LEN_URI+16];
	// look for file
	if(FS_exists(&FS, pS->URI))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	1d5a      	adds	r2, r3, #5
 8004658:	4b43      	ldr	r3, [pc, #268]	; (8004768 <HTTPonNotFound+0x11c>)
 800465a:	0011      	movs	r1, r2
 800465c:	0018      	movs	r0, r3
 800465e:	f7ff f8cf 	bl	8003800 <FS_exists>
 8004662:	1e03      	subs	r3, r0, #0
 8004664:	d01e      	beq.n	80046a4 <HTTPonNotFound+0x58>
	{
		FSfile_typedef file = FS_open(&FS, pS->URI);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	1d5a      	adds	r2, r3, #5
 800466a:	2418      	movs	r4, #24
 800466c:	193b      	adds	r3, r7, r4
 800466e:	493e      	ldr	r1, [pc, #248]	; (8004768 <HTTPonNotFound+0x11c>)
 8004670:	0018      	movs	r0, r3
 8004672:	f7ff f875 	bl	8003760 <FS_open>
		if(file.path)
 8004676:	193b      	adds	r3, r7, r4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d050      	beq.n	8004720 <HTTPonNotFound+0xd4>
		{
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	1d5a      	adds	r2, r3, #5
 8004682:	2468      	movs	r4, #104	; 0x68
 8004684:	193b      	adds	r3, r7, r4
 8004686:	4938      	ldr	r1, [pc, #224]	; (8004768 <HTTPonNotFound+0x11c>)
 8004688:	0018      	movs	r0, r3
 800468a:	f7ff f869 	bl	8003760 <FS_open>
 800468e:	193b      	adds	r3, r7, r4
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	466a      	mov	r2, sp
 8004694:	6899      	ldr	r1, [r3, #8]
 8004696:	6011      	str	r1, [r2, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	21c8      	movs	r1, #200	; 0xc8
 800469e:	f7ff fbf1 	bl	8003e84 <HTTPSendFile>
 80046a2:	e05e      	b.n	8004762 <HTTPonNotFound+0x116>
			return;
		}
	}
	else
	{
		strcpy(s_tmp, pS->URI);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	1d5a      	adds	r2, r3, #5
 80046a8:	2424      	movs	r4, #36	; 0x24
 80046aa:	193b      	adds	r3, r7, r4
 80046ac:	0011      	movs	r1, r2
 80046ae:	0018      	movs	r0, r3
 80046b0:	f001 feb7 	bl	8006422 <strcpy>
		strcat(s_tmp, ".gz");
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	0018      	movs	r0, r3
 80046b8:	f7fb fd30 	bl	800011c <strlen>
 80046bc:	0003      	movs	r3, r0
 80046be:	001a      	movs	r2, r3
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	189a      	adds	r2, r3, r2
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <HTTPonNotFound+0x120>)
 80046c6:	0010      	movs	r0, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	2304      	movs	r3, #4
 80046cc:	001a      	movs	r2, r3
 80046ce:	f001 fe7b 	bl	80063c8 <memcpy>
		if(FS_exists(&FS, s_tmp))
 80046d2:	193a      	adds	r2, r7, r4
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <HTTPonNotFound+0x11c>)
 80046d6:	0011      	movs	r1, r2
 80046d8:	0018      	movs	r0, r3
 80046da:	f7ff f891 	bl	8003800 <FS_exists>
 80046de:	1e03      	subs	r3, r0, #0
 80046e0:	d01e      	beq.n	8004720 <HTTPonNotFound+0xd4>
		{
			FSfile_typedef file = FS_open(&FS, s_tmp);
 80046e2:	240c      	movs	r4, #12
 80046e4:	193b      	adds	r3, r7, r4
 80046e6:	2224      	movs	r2, #36	; 0x24
 80046e8:	18ba      	adds	r2, r7, r2
 80046ea:	491f      	ldr	r1, [pc, #124]	; (8004768 <HTTPonNotFound+0x11c>)
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff f837 	bl	8003760 <FS_open>
			if(file.path)
 80046f2:	193b      	adds	r3, r7, r4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d012      	beq.n	8004720 <HTTPonNotFound+0xd4>
			{
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 80046fa:	2474      	movs	r4, #116	; 0x74
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	2224      	movs	r2, #36	; 0x24
 8004700:	18ba      	adds	r2, r7, r2
 8004702:	4919      	ldr	r1, [pc, #100]	; (8004768 <HTTPonNotFound+0x11c>)
 8004704:	0018      	movs	r0, r3
 8004706:	f7ff f82b 	bl	8003760 <FS_open>
 800470a:	193b      	adds	r3, r7, r4
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	466a      	mov	r2, sp
 8004710:	6899      	ldr	r1, [r3, #8]
 8004712:	6011      	str	r1, [r2, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	21c8      	movs	r1, #200	; 0xc8
 800471a:	f7ff fbb3 	bl	8003e84 <HTTPSendFile>
 800471e:	e020      	b.n	8004762 <HTTPonNotFound+0x116>
				return;
			}
		}
	}
	strcpy(s_notfound, "Not Found: ");
 8004720:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HTTPonNotFound+0x124>)
 8004722:	4a14      	ldr	r2, [pc, #80]	; (8004774 <HTTPonNotFound+0x128>)
 8004724:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004726:	c313      	stmia	r3!, {r0, r1, r4}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	1d59      	adds	r1, r3, #5
 800472c:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HTTPonNotFound+0x124>)
 800472e:	2240      	movs	r2, #64	; 0x40
 8004730:	0018      	movs	r0, r3
 8004732:	f001 fe7e 	bl	8006432 <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 8004736:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HTTPonNotFound+0x124>)
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fcef 	bl	800011c <strlen>
 800473e:	0003      	movs	r3, r0
 8004740:	001a      	movs	r2, r3
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HTTPonNotFound+0x124>)
 8004744:	18d2      	adds	r2, r2, r3
 8004746:	4b0c      	ldr	r3, [pc, #48]	; (8004778 <HTTPonNotFound+0x12c>)
 8004748:	0010      	movs	r0, r2
 800474a:	0019      	movs	r1, r3
 800474c:	2303      	movs	r3, #3
 800474e:	001a      	movs	r2, r3
 8004750:	f001 fe3a 	bl	80063c8 <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 8004754:	4a06      	ldr	r2, [pc, #24]	; (8004770 <HTTPonNotFound+0x124>)
 8004756:	23ca      	movs	r3, #202	; 0xca
 8004758:	0059      	lsls	r1, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff fd17 	bl	8004190 <HTTPSendStr>
}
 8004762:	46bd      	mov	sp, r7
 8004764:	b021      	add	sp, #132	; 0x84
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	20001768 	.word	0x20001768
 800476c:	08006858 	.word	0x08006858
 8004770:	200014e0 	.word	0x200014e0
 8004774:	080068fc 	.word	0x080068fc
 8004778:	08006974 	.word	0x08006974

0800477c <HTTPHandle>:

void HTTPHandle(CH395_TypeDef *pch395) // call on interrupt
{
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	int8_t i = pch395->SOCK_responding;
 8004784:	2113      	movs	r1, #19
 8004786:	187b      	adds	r3, r7, r1
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	7892      	ldrb	r2, [r2, #2]
 800478c:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	if(i > 0)
 800478e:	187b      	adds	r3, r7, r1
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b25b      	sxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	dc00      	bgt.n	800479a <HTTPHandle+0x1e>
 8004798:	e16f      	b.n	8004a7a <HTTPHandle+0x2fe>
	{
		HTTPRequestParseState *pS = &parseStates[i-1];
 800479a:	2313      	movs	r3, #19
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b25b      	sxtb	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	22b6      	movs	r2, #182	; 0xb6
 80047a6:	0052      	lsls	r2, r2, #1
 80047a8:	435a      	muls	r2, r3
 80047aa:	4bb6      	ldr	r3, [pc, #728]	; (8004a84 <HTTPHandle+0x308>)
 80047ac:	18d3      	adds	r3, r2, r3
 80047ae:	60fb      	str	r3, [r7, #12]
		if(pS->ready  && pS->response_stage == RESPONSE_NOT_PREPARED) // socket recv buffer non-empty, bit_i is 1
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	23b4      	movs	r3, #180	; 0xb4
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	5cd3      	ldrb	r3, [r2, r3]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d038      	beq.n	800482e <HTTPHandle+0xb2>
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	23ac      	movs	r3, #172	; 0xac
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d132      	bne.n	800482e <HTTPHandle+0xb2>
		{
			if(true)
			{
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 80047c8:	2317      	movs	r3, #23
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e01f      	b.n	8004812 <HTTPHandle+0x96>
				{
					if(strncmp(pS->URI, HTTPResponders[j].uri, MAX_LEN_URI) == 0) // matches
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1d58      	adds	r0, r3, #5
 80047d6:	2317      	movs	r3, #23
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	4baa      	ldr	r3, [pc, #680]	; (8004a88 <HTTPHandle+0x30c>)
 80047de:	00d2      	lsls	r2, r2, #3
 80047e0:	58d3      	ldr	r3, [r2, r3]
 80047e2:	2240      	movs	r2, #64	; 0x40
 80047e4:	0019      	movs	r1, r3
 80047e6:	f001 fe3a 	bl	800645e <strncmp>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d10b      	bne.n	8004806 <HTTPHandle+0x8a>
					{
						(HTTPResponders[j].func)(pS); // call HTTPResponder service function
 80047ee:	2317      	movs	r3, #23
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	4aa4      	ldr	r2, [pc, #656]	; (8004a88 <HTTPHandle+0x30c>)
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	18d3      	adds	r3, r2, r3
 80047fa:	3304      	adds	r3, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	0010      	movs	r0, r2
 8004802:	4798      	blx	r3
						break;
 8004804:	e00a      	b.n	800481c <HTTPHandle+0xa0>
				for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8004806:	2217      	movs	r2, #23
 8004808:	18bb      	adds	r3, r7, r2
 800480a:	18ba      	adds	r2, r7, r2
 800480c:	7812      	ldrb	r2, [r2, #0]
 800480e:	3201      	adds	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	2317      	movs	r3, #23
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d9da      	bls.n	80047d2 <HTTPHandle+0x56>
					}
				}
				if(j >= NUM_HTTP_RESPONDERS) // Resource not found
 800481c:	2317      	movs	r3, #23
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b06      	cmp	r3, #6
 8004824:	d903      	bls.n	800482e <HTTPHandle+0xb2>
				{
					HTTPonNotFound(pS);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	0018      	movs	r0, r3
 800482a:	f7ff ff0f 	bl	800464c <HTTPonNotFound>
				}
			}
		}
		if((pch395->TX_available & (1 << i)) != 0 && pS->ready) // socket recv buffer non-empty, bit_i is 1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	78db      	ldrb	r3, [r3, #3]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	001a      	movs	r2, r3
 8004836:	2313      	movs	r3, #19
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	b25b      	sxtb	r3, r3
 800483e:	411a      	asrs	r2, r3
 8004840:	0013      	movs	r3, r2
 8004842:	2201      	movs	r2, #1
 8004844:	4013      	ands	r3, r2
 8004846:	d100      	bne.n	800484a <HTTPHandle+0xce>
 8004848:	e0f7      	b.n	8004a3a <HTTPHandle+0x2be>
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	23b4      	movs	r3, #180	; 0xb4
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	5cd3      	ldrb	r3, [r2, r3]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d100      	bne.n	8004858 <HTTPHandle+0xdc>
 8004856:	e0f0      	b.n	8004a3a <HTTPHandle+0x2be>
		{
			if(pS->response_stage == RESPONSE_PREPARED) // start the process of data sending
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	23ac      	movs	r3, #172	; 0xac
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	5cd3      	ldrb	r3, [r2, r3]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d000      	beq.n	8004866 <HTTPHandle+0xea>
 8004864:	e083      	b.n	800496e <HTTPHandle+0x1f2>
			{
				uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	23ad      	movs	r3, #173	; 0xad
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	5ad2      	ldrh	r2, [r2, r3]
 800486e:	200a      	movs	r0, #10
 8004870:	183b      	adds	r3, r7, r0
 8004872:	4986      	ldr	r1, [pc, #536]	; (8004a8c <HTTPHandle+0x310>)
 8004874:	1a8a      	subs	r2, r1, r2
 8004876:	801a      	strh	r2, [r3, #0]
				uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	23b0      	movs	r3, #176	; 0xb0
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	5ad1      	ldrh	r1, [r2, r3]
 8004880:	2308      	movs	r3, #8
 8004882:	18fa      	adds	r2, r7, r3
 8004884:	183b      	adds	r3, r7, r0
 8004886:	1c0c      	adds	r4, r1, #0
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b298      	uxth	r0, r3
 800488c:	b2a1      	uxth	r1, r4
 800488e:	4288      	cmp	r0, r1
 8004890:	d900      	bls.n	8004894 <HTTPHandle+0x118>
 8004892:	1c23      	adds	r3, r4, #0
 8004894:	8013      	strh	r3, [r2, #0]
						? (pS->len_response_content_remain)
								: (max_len_content));
				CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8004896:	2513      	movs	r5, #19
 8004898:	197b      	adds	r3, r7, r5
 800489a:	7818      	ldrb	r0, [r3, #0]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	23ad      	movs	r3, #173	; 0xad
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	5ad2      	ldrh	r2, [r2, r3]
 80048a4:	2408      	movs	r4, #8
 80048a6:	193b      	adds	r3, r7, r4
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	18d3      	adds	r3, r2, r3
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	0019      	movs	r1, r3
 80048b0:	f7fe fbfe 	bl	80030b0 <CH395StartSendingData>
				CH395ContinueSendingData((uint8_t*)pS->response_header, pS->len_response_header);
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	23ae      	movs	r3, #174	; 0xae
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	58d0      	ldr	r0, [r2, r3]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	23ad      	movs	r3, #173	; 0xad
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	5ad3      	ldrh	r3, [r2, r3]
 80048c4:	0019      	movs	r1, r3
 80048c6:	f7fe fc19 	bl	80030fc <CH395ContinueSendingData>
				CH395ContinueSendingData((const uint8_t*)pS->response_content, len_content_this_time);
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	23b2      	movs	r3, #178	; 0xb2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	58d2      	ldr	r2, [r2, r3]
 80048d2:	193b      	adds	r3, r7, r4
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	0019      	movs	r1, r3
 80048d8:	0010      	movs	r0, r2
 80048da:	f7fe fc0f 	bl	80030fc <CH395ContinueSendingData>
				CH395Complete();
 80048de:	f7fe fc33 	bl	8003148 <CH395Complete>
				ch395.TX_available &= ~(1<<i);
 80048e2:	4b6b      	ldr	r3, [pc, #428]	; (8004a90 <HTTPHandle+0x314>)
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	b25b      	sxtb	r3, r3
 80048ea:	197a      	adds	r2, r7, r5
 80048ec:	7812      	ldrb	r2, [r2, #0]
 80048ee:	b252      	sxtb	r2, r2
 80048f0:	2101      	movs	r1, #1
 80048f2:	4091      	lsls	r1, r2
 80048f4:	000a      	movs	r2, r1
 80048f6:	b252      	sxtb	r2, r2
 80048f8:	43d2      	mvns	r2, r2
 80048fa:	b252      	sxtb	r2, r2
 80048fc:	4013      	ands	r3, r2
 80048fe:	b25b      	sxtb	r3, r3
 8004900:	b2da      	uxtb	r2, r3
 8004902:	4b63      	ldr	r3, [pc, #396]	; (8004a90 <HTTPHandle+0x314>)
 8004904:	70da      	strb	r2, [r3, #3]
				pS->len_response_content_remain -= len_content_this_time;
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	23b0      	movs	r3, #176	; 0xb0
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	5ad2      	ldrh	r2, [r2, r3]
 800490e:	193b      	adds	r3, r7, r4
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	b299      	uxth	r1, r3
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	23b0      	movs	r3, #176	; 0xb0
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	52d1      	strh	r1, [r2, r3]
				pS->response_content += len_content_this_time;
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	23b2      	movs	r3, #178	; 0xb2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	58d2      	ldr	r2, [r2, r3]
 8004926:	193b      	adds	r3, r7, r4
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	18d1      	adds	r1, r2, r3
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	23b2      	movs	r3, #178	; 0xb2
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	50d1      	str	r1, [r2, r3]
				if(pS->len_response_content_remain == 0) // all content completely sent this time
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	23b0      	movs	r3, #176	; 0xb0
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	5ad3      	ldrh	r3, [r2, r3]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d110      	bne.n	8004962 <HTTPHandle+0x1e6>
				{
					HTTPclose(i);
 8004940:	2313      	movs	r3, #19
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	0018      	movs	r0, r3
 8004948:	f000 f8e2 	bl	8004b10 <HTTPclose>
					resetHTTPParseState(pS);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	0018      	movs	r0, r3
 8004950:	f7ff f9b4 	bl	8003cbc <resetHTTPParseState>
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 8004954:	f000 f8a0 	bl	8004a98 <getNextSock>
 8004958:	0003      	movs	r3, r0
 800495a:	001a      	movs	r2, r3
 800495c:	4b4c      	ldr	r3, [pc, #304]	; (8004a90 <HTTPHandle+0x314>)
 800495e:	709a      	strb	r2, [r3, #2]
 8004960:	e06b      	b.n	8004a3a <HTTPHandle+0x2be>
				}
				else // content remained to be sent next time
				{
					pS->response_stage = RESPONSE_CONTENT_REMAIN;
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	23ac      	movs	r3, #172	; 0xac
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	2102      	movs	r1, #2
 800496a:	54d1      	strb	r1, [r2, r3]
 800496c:	e065      	b.n	8004a3a <HTTPHandle+0x2be>
				}
			}
			else if(pS->response_stage == RESPONSE_CONTENT_REMAIN) // continue the sending process
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	23ac      	movs	r3, #172	; 0xac
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	5cd3      	ldrb	r3, [r2, r3]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d15f      	bne.n	8004a3a <HTTPHandle+0x2be>
			{
				uint16_t len = pS->len_response_content_remain;
 800497a:	2414      	movs	r4, #20
 800497c:	193b      	adds	r3, r7, r4
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	22b0      	movs	r2, #176	; 0xb0
 8004982:	0052      	lsls	r2, r2, #1
 8004984:	5a8a      	ldrh	r2, [r1, r2]
 8004986:	801a      	strh	r2, [r3, #0]
				CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 8004988:	2313      	movs	r3, #19
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	7818      	ldrb	r0, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	23b2      	movs	r3, #178	; 0xb2
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	58d1      	ldr	r1, [r2, r3]
 8004996:	193b      	adds	r3, r7, r4
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	4a3e      	ldr	r2, [pc, #248]	; (8004a94 <HTTPHandle+0x318>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d905      	bls.n	80049ac <HTTPHandle+0x230>
 80049a0:	2314      	movs	r3, #20
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <HTTPHandle+0x310>)
 80049a6:	801a      	strh	r2, [r3, #0]
 80049a8:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <HTTPHandle+0x310>)
 80049aa:	e002      	b.n	80049b2 <HTTPHandle+0x236>
 80049ac:	2314      	movs	r3, #20
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	001a      	movs	r2, r3
 80049b4:	f7fe fb0a 	bl	8002fcc <CH395SendData>
				ch395.TX_available &= ~(1<<i);
 80049b8:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <HTTPHandle+0x314>)
 80049ba:	78db      	ldrb	r3, [r3, #3]
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	b25b      	sxtb	r3, r3
 80049c0:	2213      	movs	r2, #19
 80049c2:	18ba      	adds	r2, r7, r2
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	b252      	sxtb	r2, r2
 80049c8:	2101      	movs	r1, #1
 80049ca:	4091      	lsls	r1, r2
 80049cc:	000a      	movs	r2, r1
 80049ce:	b252      	sxtb	r2, r2
 80049d0:	43d2      	mvns	r2, r2
 80049d2:	b252      	sxtb	r2, r2
 80049d4:	4013      	ands	r3, r2
 80049d6:	b25b      	sxtb	r3, r3
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4b2d      	ldr	r3, [pc, #180]	; (8004a90 <HTTPHandle+0x314>)
 80049dc:	70da      	strb	r2, [r3, #3]
				// sent
				pS->len_response_content_remain -= len;
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	23b0      	movs	r3, #176	; 0xb0
 80049e2:	005b      	lsls	r3, r3, #1
 80049e4:	5ad2      	ldrh	r2, [r2, r3]
 80049e6:	2014      	movs	r0, #20
 80049e8:	183b      	adds	r3, r7, r0
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	b299      	uxth	r1, r3
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	23b0      	movs	r3, #176	; 0xb0
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	52d1      	strh	r1, [r2, r3]
				pS->response_content += len; // move the cursor
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	23b2      	movs	r3, #178	; 0xb2
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	58d2      	ldr	r2, [r2, r3]
 8004a00:	183b      	adds	r3, r7, r0
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	18d1      	adds	r1, r2, r3
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	23b2      	movs	r3, #178	; 0xb2
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	50d1      	str	r1, [r2, r3]
				if(pS->len_response_content_remain == 0) // finished
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	23b0      	movs	r3, #176	; 0xb0
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	5ad3      	ldrh	r3, [r2, r3]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10f      	bne.n	8004a3a <HTTPHandle+0x2be>
				{
					HTTPclose(i);
 8004a1a:	2313      	movs	r3, #19
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 f875 	bl	8004b10 <HTTPclose>
					resetHTTPParseState(pS);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7ff f947 	bl	8003cbc <resetHTTPParseState>
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 8004a2e:	f000 f833 	bl	8004a98 <getNextSock>
 8004a32:	0003      	movs	r3, r0
 8004a34:	001a      	movs	r2, r3
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HTTPHandle+0x314>)
 8004a38:	709a      	strb	r2, [r3, #2]
				}
			}
		}
		if(pS->sock_index==i && !pS->ready)
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	236a      	movs	r3, #106	; 0x6a
 8004a3e:	33ff      	adds	r3, #255	; 0xff
 8004a40:	5cd3      	ldrb	r3, [r2, r3]
 8004a42:	001a      	movs	r2, r3
 8004a44:	2313      	movs	r3, #19
 8004a46:	18fb      	adds	r3, r7, r3
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	b25b      	sxtb	r3, r3
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d114      	bne.n	8004a7a <HTTPHandle+0x2fe>
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	23b4      	movs	r3, #180	; 0xb4
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4053      	eors	r3, r2
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <HTTPHandle+0x2fe>
		{
			ch395.SOCK_responding = getNextSock();
 8004a62:	f000 f819 	bl	8004a98 <getNextSock>
 8004a66:	0003      	movs	r3, r0
 8004a68:	001a      	movs	r2, r3
 8004a6a:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <HTTPHandle+0x314>)
 8004a6c:	709a      	strb	r2, [r3, #2]
			CH395TCPDisconnect(i);
 8004a6e:	2313      	movs	r3, #19
 8004a70:	18fb      	adds	r3, r7, r3
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f7fe fc99 	bl	80033ac <CH395TCPDisconnect>
		}
	}
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b006      	add	sp, #24
 8004a80:	bdb0      	pop	{r4, r5, r7, pc}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	20000980 	.word	0x20000980
 8004a88:	20000814 	.word	0x20000814
 8004a8c:	00000546 	.word	0x00000546
 8004a90:	20000000 	.word	0x20000000
 8004a94:	00000545 	.word	0x00000545

08004a98 <getNextSock>:
#endif
int8_t getNextSock()
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
	int8_t j;
	for(j=1; j < NUM_SOCKETS; ++j)
 8004a9e:	1dfb      	adds	r3, r7, #7
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	e025      	b.n	8004af2 <getNextSock+0x5a>
	{
		if(parseStates[j-1].ready && (ch395.socket_connected & (1 << j)))
 8004aa6:	1dfb      	adds	r3, r7, #7
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	4916      	ldr	r1, [pc, #88]	; (8004b08 <getNextSock+0x70>)
 8004ab0:	23b4      	movs	r3, #180	; 0xb4
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	20b6      	movs	r0, #182	; 0xb6
 8004ab6:	0040      	lsls	r0, r0, #1
 8004ab8:	4342      	muls	r2, r0
 8004aba:	188a      	adds	r2, r1, r2
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00f      	beq.n	8004ae6 <getNextSock+0x4e>
 8004ac6:	4b11      	ldr	r3, [pc, #68]	; (8004b0c <getNextSock+0x74>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	001a      	movs	r2, r3
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b25b      	sxtb	r3, r3
 8004ad4:	411a      	asrs	r2, r3
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <getNextSock+0x4e>
		{
			return j;
 8004ade:	1dfb      	adds	r3, r7, #7
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	e00c      	b.n	8004b00 <getNextSock+0x68>
	for(j=1; j < NUM_SOCKETS; ++j)
 8004ae6:	1dfb      	adds	r3, r7, #7
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	3301      	adds	r3, #1
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	1dfb      	adds	r3, r7, #7
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	1dfb      	adds	r3, r7, #7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	2b07      	cmp	r3, #7
 8004afa:	ddd4      	ble.n	8004aa6 <getNextSock+0xe>
		}
	}
	return -1;
 8004afc:	2301      	movs	r3, #1
 8004afe:	425b      	negs	r3, r3
}
 8004b00:	0018      	movs	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b002      	add	sp, #8
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000980 	.word	0x20000980
 8004b0c:	20000000 	.word	0x20000000

08004b10 <HTTPclose>:
void HTTPclose(uint8_t i) // Sock Index to disconnect
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	0002      	movs	r2, r0
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	701a      	strb	r2, [r3, #0]
	CH395TCPDisconnect(i);
 8004b1c:	1dfb      	adds	r3, r7, #7
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	0018      	movs	r0, r3
 8004b22:	f7fe fc43 	bl	80033ac <CH395TCPDisconnect>
	ch395.RX_received &= ~(1 << i);
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <HTTPclose+0x68>)
 8004b28:	785b      	ldrb	r3, [r3, #1]
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	b25b      	sxtb	r3, r3
 8004b2e:	1dfa      	adds	r2, r7, #7
 8004b30:	7812      	ldrb	r2, [r2, #0]
 8004b32:	2101      	movs	r1, #1
 8004b34:	4091      	lsls	r1, r2
 8004b36:	000a      	movs	r2, r1
 8004b38:	b252      	sxtb	r2, r2
 8004b3a:	43d2      	mvns	r2, r2
 8004b3c:	b252      	sxtb	r2, r2
 8004b3e:	4013      	ands	r3, r2
 8004b40:	b25b      	sxtb	r3, r3
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HTTPclose+0x68>)
 8004b46:	705a      	strb	r2, [r3, #1]
	ch395.socket_connected &= ~(1 << i);
 8004b48:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HTTPclose+0x68>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	b25b      	sxtb	r3, r3
 8004b50:	1dfa      	adds	r2, r7, #7
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	2101      	movs	r1, #1
 8004b56:	4091      	lsls	r1, r2
 8004b58:	000a      	movs	r2, r1
 8004b5a:	b252      	sxtb	r2, r2
 8004b5c:	43d2      	mvns	r2, r2
 8004b5e:	b252      	sxtb	r2, r2
 8004b60:	4013      	ands	r3, r2
 8004b62:	b25b      	sxtb	r3, r3
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HTTPclose+0x68>)
 8004b68:	701a      	strb	r2, [r3, #0]
	ch395.SOCK_responding = -1;
 8004b6a:	4b03      	ldr	r3, [pc, #12]	; (8004b78 <HTTPclose+0x68>)
 8004b6c:	22ff      	movs	r2, #255	; 0xff
 8004b6e:	709a      	strb	r2, [r3, #2]
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000000 	.word	0x20000000

08004b7c <strsepstr>:

char* strsepstr(char** stringp, const char* delim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
	int len_delim = strlen(delim);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fb fac7 	bl	800011c <strlen>
 8004b8e:	0003      	movs	r3, r0
 8004b90:	617b      	str	r3, [r7, #20]
	char* loc_head = *stringp;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
	if(loc_head != NULL)
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d019      	beq.n	8004bd2 <strsepstr+0x56>
	{
		char* loc_delim = strstr(loc_head, delim);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f001 fc9e 	bl	80064e6 <strstr>
 8004baa:	0003      	movs	r3, r0
 8004bac:	60fb      	str	r3, [r7, #12]
		if(loc_delim != NULL)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00b      	beq.n	8004bcc <strsepstr+0x50>
		{
			memset(loc_delim, 0, len_delim);
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2100      	movs	r1, #0
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f001 fc0d 	bl	80063da <memset>
			*stringp = loc_delim + len_delim;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	18d2      	adds	r2, r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e002      	b.n	8004bd2 <strsepstr+0x56>
		}
		else
		{
			*stringp = NULL;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
		}
	}
	return loc_head;
 8004bd2:	693b      	ldr	r3, [r7, #16]
}
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b006      	add	sp, #24
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <parse_http>:

BOOL parse_http(HTTPRequestParseState *pS, char* buffer)

{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08a      	sub	sp, #40	; 0x28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d100      	bne.n	8004bf0 <parse_http+0x14>
 8004bee:	e0b6      	b.n	8004d5e <parse_http+0x182>
 8004bf0:	dc02      	bgt.n	8004bf8 <parse_http+0x1c>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <parse_http+0x2a>
 8004bf6:	e162      	b.n	8004ebe <parse_http+0x2e2>
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d100      	bne.n	8004bfe <parse_http+0x22>
 8004bfc:	e11f      	b.n	8004e3e <parse_http+0x262>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d100      	bne.n	8004c04 <parse_http+0x28>
 8004c02:	e157      	b.n	8004eb4 <parse_http+0x2d8>
 8004c04:	e15b      	b.n	8004ebe <parse_http+0x2e2>
	{
	case 0: // start: request line
		line_tok_saveptr = buffer;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	617b      	str	r3, [r7, #20]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8004c0a:	4aba      	ldr	r2, [pc, #744]	; (8004ef4 <parse_http+0x318>)
 8004c0c:	2314      	movs	r3, #20
 8004c0e:	18fb      	adds	r3, r7, r3
 8004c10:	0011      	movs	r1, r2
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7ff ffb2 	bl	8004b7c <strsepstr>
 8004c18:	0003      	movs	r3, r0
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
		if(line)
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d100      	bne.n	8004c24 <parse_http+0x48>
 8004c22:	e14e      	b.n	8004ec2 <parse_http+0x2e6>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 8004c24:	46c0      	nop			; (mov r8, r8)
			// check if received info obeys HTTP protocols
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	011a      	lsls	r2, r3, #4
 8004c2a:	49b3      	ldr	r1, [pc, #716]	; (8004ef8 <parse_http+0x31c>)
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f001 fc3a 	bl	80064a8 <strnstr>
 8004c34:	1e03      	subs	r3, r0, #0
 8004c36:	d101      	bne.n	8004c3c <parse_http+0x60>
			{
				DEBUG_LOG("ERROR: NOT HTTP\n");
 8004c38:	46c0      	nop			; (mov r8, r8)
				goto HTTP_PARSE_ERROR;
 8004c3a:	e14d      	b.n	8004ed8 <parse_http+0x2fc>
			}
			// 1: method
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	18fa      	adds	r2, r7, r3
 8004c40:	49ae      	ldr	r1, [pc, #696]	; (8004efc <parse_http+0x320>)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	0018      	movs	r0, r3
 8004c46:	f001 fcbc 	bl	80065c2 <strtok_r>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	61fb      	str	r3, [r7, #28]
			if(tok)
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d100      	bne.n	8004c56 <parse_http+0x7a>
 8004c54:	e137      	b.n	8004ec6 <parse_http+0x2ea>
			{
				DEBUG_LOG("Method: %s\r\n", tok);
 8004c56:	46c0      	nop			; (mov r8, r8)
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 8004c58:	4aa9      	ldr	r2, [pc, #676]	; (8004f00 <parse_http+0x324>)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	0011      	movs	r1, r2
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fb fa52 	bl	8000108 <strcmp>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d103      	bne.n	8004c70 <parse_http+0x94>
					pS->method = HTTP_GET;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	70da      	strb	r2, [r3, #3]
 8004c6e:	e00e      	b.n	8004c8e <parse_http+0xb2>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 8004c70:	4aa4      	ldr	r2, [pc, #656]	; (8004f04 <parse_http+0x328>)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	0011      	movs	r1, r2
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fb fa46 	bl	8000108 <strcmp>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d103      	bne.n	8004c88 <parse_http+0xac>
					pS->method = HTTP_POST;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	70da      	strb	r2, [r3, #3]
 8004c86:	e002      	b.n	8004c8e <parse_http+0xb2>
				else
					pS->method = HTTP_GET;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	70da      	strb	r2, [r3, #3]
			}
			else
				goto HTTP_PARSE_ERROR;
			// 2: URI
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8004c8e:	2310      	movs	r3, #16
 8004c90:	18fa      	adds	r2, r7, r3
 8004c92:	4b9a      	ldr	r3, [pc, #616]	; (8004efc <parse_http+0x320>)
 8004c94:	0019      	movs	r1, r3
 8004c96:	2000      	movs	r0, #0
 8004c98:	f001 fc93 	bl	80065c2 <strtok_r>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	61fb      	str	r3, [r7, #28]
			if(tok)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d100      	bne.n	8004ca8 <parse_http+0xcc>
 8004ca6:	e110      	b.n	8004eca <parse_http+0x2ee>
			{
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3305      	adds	r3, #5
 8004cac:	69f9      	ldr	r1, [r7, #28]
 8004cae:	2240      	movs	r2, #64	; 0x40
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 fbe5 	bl	8006480 <strncpy>
				DEBUG_LOG("URI: %s\r\n", pS->URI);
 8004cb6:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			char* s_args = strchr(pS->URI, '?');
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3305      	adds	r3, #5
 8004cbc:	213f      	movs	r1, #63	; 0x3f
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	f001 fba1 	bl	8006406 <strchr>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	61bb      	str	r3, [r7, #24]
			if(pS->method == HTTP_GET && s_args != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	78db      	ldrb	r3, [r3, #3]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d132      	bne.n	8004d36 <parse_http+0x15a>
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d02f      	beq.n	8004d36 <parse_http+0x15a>
			{
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]
				DEBUG_LOG("Path: %s\r\n", pS->URI);
 8004cdc:	46c0      	nop			; (mov r8, r8)
				s_args++; // move to the char next to ?
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61bb      	str	r3, [r7, #24]
				if(*s_args)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d024      	beq.n	8004d36 <parse_http+0x15a>
				{
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 8004cec:	230c      	movs	r3, #12
 8004cee:	18fa      	adds	r2, r7, r3
 8004cf0:	4985      	ldr	r1, [pc, #532]	; (8004f08 <parse_http+0x32c>)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f001 fc64 	bl	80065c2 <strtok_r>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 8004cfe:	e017      	b.n	8004d30 <parse_http+0x154>
					{
						DEBUG_LOG("Arg: %s\r\n", tok_arg);
 8004d00:	46c0      	nop			; (mov r8, r8)
						pS->argv[pS->argc++] = tok_arg;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2245      	movs	r2, #69	; 0x45
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	b2d0      	uxtb	r0, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	2145      	movs	r1, #69	; 0x45
 8004d10:	5450      	strb	r0, [r2, r1]
 8004d12:	001a      	movs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3212      	adds	r2, #18
 8004d18:	0092      	lsls	r2, r2, #2
 8004d1a:	6a39      	ldr	r1, [r7, #32]
 8004d1c:	50d1      	str	r1, [r2, r3]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8004d1e:	230c      	movs	r3, #12
 8004d20:	18fa      	adds	r2, r7, r3
 8004d22:	4b79      	ldr	r3, [pc, #484]	; (8004f08 <parse_http+0x32c>)
 8004d24:	0019      	movs	r1, r3
 8004d26:	2000      	movs	r0, #0
 8004d28:	f001 fc4b 	bl	80065c2 <strtok_r>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e4      	bne.n	8004d00 <parse_http+0x124>
					}
				}
			}
			// 3: version
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8004d36:	2310      	movs	r3, #16
 8004d38:	18fa      	adds	r2, r7, r3
 8004d3a:	4b70      	ldr	r3, [pc, #448]	; (8004efc <parse_http+0x320>)
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	2000      	movs	r0, #0
 8004d40:	f001 fc3f 	bl	80065c2 <strtok_r>
 8004d44:	0003      	movs	r3, r0
 8004d46:	61fb      	str	r3, [r7, #28]
			if(tok)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d100      	bne.n	8004d50 <parse_http+0x174>
 8004d4e:	e0be      	b.n	8004ece <parse_http+0x2f2>
			{
				DEBUG_LOG("VERSION: %s\r\n", tok);
 8004d50:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			pS->state ++;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	701a      	strb	r2, [r3, #0]
		}
		else
			goto HTTP_PARSE_ERROR;
	case 1: // parse header
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8004d5e:	4a65      	ldr	r2, [pc, #404]	; (8004ef4 <parse_http+0x318>)
 8004d60:	2314      	movs	r3, #20
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	0011      	movs	r1, r2
 8004d66:	0018      	movs	r0, r3
 8004d68:	f7ff ff08 	bl	8004b7c <strsepstr>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 8004d70:	e05c      	b.n	8004e2c <parse_http+0x250>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 8004d72:	46c0      	nop			; (mov r8, r8)
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8004d74:	2310      	movs	r3, #16
 8004d76:	18fa      	adds	r2, r7, r3
 8004d78:	4964      	ldr	r1, [pc, #400]	; (8004f0c <parse_http+0x330>)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	f001 fc20 	bl	80065c2 <strtok_r>
 8004d82:	0003      	movs	r3, r0
 8004d84:	61fb      	str	r3, [r7, #28]
			if(tok == NULL || *tok == 0)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d052      	beq.n	8004e32 <parse_http+0x256>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d04e      	beq.n	8004e32 <parse_http+0x256>
				break;
			if(tok)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d03f      	beq.n	8004e1a <parse_http+0x23e>
			{
				DEBUG_LOG("Header: %s\r\n", tok);
 8004d9a:	46c0      	nop			; (mov r8, r8)
				// Header: Connection
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 8004d9c:	4a5c      	ldr	r2, [pc, #368]	; (8004f10 <parse_http+0x334>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	0011      	movs	r1, r2
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7fb f9b0 	bl	8000108 <strcmp>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d119      	bne.n	8004de0 <parse_http+0x204>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8004dac:	2310      	movs	r3, #16
 8004dae:	18fa      	adds	r2, r7, r3
 8004db0:	4b56      	ldr	r3, [pc, #344]	; (8004f0c <parse_http+0x330>)
 8004db2:	0019      	movs	r1, r3
 8004db4:	2000      	movs	r0, #0
 8004db6:	f001 fc04 	bl	80065c2 <strtok_r>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d100      	bne.n	8004dc6 <parse_http+0x1ea>
 8004dc4:	e085      	b.n	8004ed2 <parse_http+0x2f6>
					DEBUG_LOG("Value: %s\r\n", tok);
 8004dc6:	46c0      	nop			; (mov r8, r8)
					if(strstr(tok, "Keep") != NULL)
 8004dc8:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <parse_http+0x338>)
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	0011      	movs	r1, r2
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f001 fb89 	bl	80064e6 <strstr>
 8004dd4:	1e03      	subs	r3, r0, #0
 8004dd6:	d020      	beq.n	8004e1a <parse_http+0x23e>
						pS->connection = KEEP_ALIVE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	711a      	strb	r2, [r3, #4]
 8004dde:	e01c      	b.n	8004e1a <parse_http+0x23e>
				}
				// Header: Cookie
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 8004de0:	4a4d      	ldr	r2, [pc, #308]	; (8004f18 <parse_http+0x33c>)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	0011      	movs	r1, r2
 8004de6:	0018      	movs	r0, r3
 8004de8:	f7fb f98e 	bl	8000108 <strcmp>
 8004dec:	1e03      	subs	r3, r0, #0
 8004dee:	d114      	bne.n	8004e1a <parse_http+0x23e>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8004df0:	2310      	movs	r3, #16
 8004df2:	18fa      	adds	r2, r7, r3
 8004df4:	4b45      	ldr	r3, [pc, #276]	; (8004f0c <parse_http+0x330>)
 8004df6:	0019      	movs	r1, r3
 8004df8:	2000      	movs	r0, #0
 8004dfa:	f001 fbe2 	bl	80065c2 <strtok_r>
 8004dfe:	0003      	movs	r3, r0
 8004e00:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d066      	beq.n	8004ed6 <parse_http+0x2fa>
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3358      	adds	r3, #88	; 0x58
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	005a      	lsls	r2, r3, #1
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	0019      	movs	r1, r3
 8004e16:	f001 fb33 	bl	8006480 <strncpy>
				}
			}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8004e1a:	4a36      	ldr	r2, [pc, #216]	; (8004ef4 <parse_http+0x318>)
 8004e1c:	2314      	movs	r3, #20
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	0011      	movs	r1, r2
 8004e22:	0018      	movs	r0, r3
 8004e24:	f7ff feaa 	bl	8004b7c <strsepstr>
 8004e28:	0003      	movs	r3, r0
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d19f      	bne.n	8004d72 <parse_http+0x196>
		}
		pS->state++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	701a      	strb	r2, [r3, #0]
	case 3: // parse payload
		if(pS->method == HTTP_POST)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	78db      	ldrb	r3, [r3, #3]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d130      	bne.n	8004ea8 <parse_http+0x2cc>
		{
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <parse_http+0x318>)
 8004e48:	2314      	movs	r3, #20
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	0011      	movs	r1, r2
 8004e4e:	0018      	movs	r0, r3
 8004e50:	f7ff fe94 	bl	8004b7c <strsepstr>
 8004e54:	0003      	movs	r3, r0
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
			if(line)
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d024      	beq.n	8004ea8 <parse_http+0x2cc>
			{
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 8004e5e:	230c      	movs	r3, #12
 8004e60:	18fa      	adds	r2, r7, r3
 8004e62:	4929      	ldr	r1, [pc, #164]	; (8004f08 <parse_http+0x32c>)
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	0018      	movs	r0, r3
 8004e68:	f001 fbab 	bl	80065c2 <strtok_r>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 8004e70:	e017      	b.n	8004ea2 <parse_http+0x2c6>
				{
					DEBUG_LOG("Arg: %s\r\n", tok_arg);
 8004e72:	46c0      	nop			; (mov r8, r8)
					pS->argv[pS->argc++] = tok_arg;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2245      	movs	r2, #69	; 0x45
 8004e78:	5c9b      	ldrb	r3, [r3, r2]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	b2d0      	uxtb	r0, r2
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	2145      	movs	r1, #69	; 0x45
 8004e82:	5450      	strb	r0, [r2, r1]
 8004e84:	001a      	movs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3212      	adds	r2, #18
 8004e8a:	0092      	lsls	r2, r2, #2
 8004e8c:	6a39      	ldr	r1, [r7, #32]
 8004e8e:	50d1      	str	r1, [r2, r3]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8004e90:	230c      	movs	r3, #12
 8004e92:	18fa      	adds	r2, r7, r3
 8004e94:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <parse_http+0x32c>)
 8004e96:	0019      	movs	r1, r3
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f001 fb92 	bl	80065c2 <strtok_r>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e4      	bne.n	8004e72 <parse_http+0x296>
				}
			}
		}
		pS->state++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	3301      	adds	r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	701a      	strb	r2, [r3, #0]
	case 4: // finished
		pS->ready = true;
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	23b4      	movs	r3, #180	; 0xb4
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	2101      	movs	r1, #1
 8004ebc:	54d1      	strb	r1, [r2, r3]
	}
	return true;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e013      	b.n	8004eea <parse_http+0x30e>
			goto HTTP_PARSE_ERROR;
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	e008      	b.n	8004ed8 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	e006      	b.n	8004ed8 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	e004      	b.n	8004ed8 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	e002      	b.n	8004ed8 <parse_http+0x2fc>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	e000      	b.n	8004ed8 <parse_http+0x2fc>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8004ed6:	46c0      	nop			; (mov r8, r8)
	HTTP_PARSE_ERROR:
		pS->state = 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
		pS->ready = false;
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	23b4      	movs	r3, #180	; 0xb4
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	54d1      	strb	r1, [r2, r3]
		return false;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	0018      	movs	r0, r3
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b00a      	add	sp, #40	; 0x28
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	08006974 	.word	0x08006974
 8004ef8:	08006908 	.word	0x08006908
 8004efc:	08006978 	.word	0x08006978
 8004f00:	08006970 	.word	0x08006970
 8004f04:	08006968 	.word	0x08006968
 8004f08:	08006910 	.word	0x08006910
 8004f0c:	0800697c 	.word	0x0800697c
 8004f10:	08006954 	.word	0x08006954
 8004f14:	08006914 	.word	0x08006914
 8004f18:	08006960 	.word	0x08006960

08004f1c <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
	if(pS->argc == 0)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2245      	movs	r2, #69	; 0x45
 8004f2a:	5c9b      	ldrb	r3, [r3, r2]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <getHTTPArg+0x18>
		return NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e039      	b.n	8004fa8 <getHTTPArg+0x8c>
	int i;
	const char* cur_s; 
	const char* cur_name = name;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e02c      	b.n	8004f98 <getHTTPArg+0x7c>
	{
		// compare until '='
		cur_s = pS->argv[i];
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	3212      	adds	r2, #18
 8004f44:	0092      	lsls	r2, r2, #2
 8004f46:	58d3      	ldr	r3, [r2, r3]
 8004f48:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8004f4a:	e00b      	b.n	8004f64 <getHTTPArg+0x48>
		{
			if(*cur_s != *cur_name)
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	781a      	ldrb	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d10e      	bne.n	8004f76 <getHTTPArg+0x5a>
			{
				break;
			}
			cur_name++;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	60fb      	str	r3, [r7, #12]
			cur_s++;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3301      	adds	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <getHTTPArg+0x5c>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1eb      	bne.n	8004f4c <getHTTPArg+0x30>
 8004f74:	e000      	b.n	8004f78 <getHTTPArg+0x5c>
				break;
 8004f76:	46c0      	nop			; (mov r8, r8)
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <getHTTPArg+0x72>
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b3d      	cmp	r3, #61	; 0x3d
 8004f86:	d102      	bne.n	8004f8e <getHTTPArg+0x72>
		{
			return cur_s+1;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	e00c      	b.n	8004fa8 <getHTTPArg+0x8c>
		}
		cur_name = name;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	3301      	adds	r3, #1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2245      	movs	r2, #69	; 0x45
 8004f9c:	5c9b      	ldrb	r3, [r3, r2]
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	dbcb      	blt.n	8004f3e <getHTTPArg+0x22>
	}
	return NULL;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	0018      	movs	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b006      	add	sp, #24
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <atou8>:
uint8_t atou8(const char* s)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t sum = 0;
 8004fb8:	230e      	movs	r3, #14
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8004fc0:	230f      	movs	r3, #15
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e025      	b.n	8005016 <atou8+0x66>
	{
		if(*s >= '0' && *s <= '9')
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b2f      	cmp	r3, #47	; 0x2f
 8004fd0:	d91f      	bls.n	8005012 <atou8+0x62>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b39      	cmp	r3, #57	; 0x39
 8004fd8:	d81b      	bhi.n	8005012 <atou8+0x62>
		{
			sum *= 10;
 8004fda:	200e      	movs	r0, #14
 8004fdc:	183a      	adds	r2, r7, r0
 8004fde:	183b      	adds	r3, r7, r0
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	1c19      	adds	r1, r3, #0
 8004fe4:	0089      	lsls	r1, r1, #2
 8004fe6:	18cb      	adds	r3, r1, r3
 8004fe8:	18db      	adds	r3, r3, r3
 8004fea:	7013      	strb	r3, [r2, #0]
			sum += *s - '0';
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	781a      	ldrb	r2, [r3, #0]
 8004ff0:	183b      	adds	r3, r7, r0
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	18d3      	adds	r3, r2, r3
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	183b      	adds	r3, r7, r0
 8004ffa:	3a30      	subs	r2, #48	; 0x30
 8004ffc:	701a      	strb	r2, [r3, #0]
			s++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3301      	adds	r3, #1
 8005002:	607b      	str	r3, [r7, #4]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8005004:	220f      	movs	r2, #15
 8005006:	18bb      	adds	r3, r7, r2
 8005008:	18ba      	adds	r2, r7, r2
 800500a:	7812      	ldrb	r2, [r2, #0]
 800500c:	3201      	adds	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]
 8005010:	e001      	b.n	8005016 <atou8+0x66>
		}
		else
			return 255; // error
 8005012:	23ff      	movs	r3, #255	; 0xff
 8005014:	e00b      	b.n	800502e <atou8+0x7e>
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8005016:	230f      	movs	r3, #15
 8005018:	18fb      	adds	r3, r7, r3
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b02      	cmp	r3, #2
 800501e:	d803      	bhi.n	8005028 <atou8+0x78>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1d0      	bne.n	8004fca <atou8+0x1a>
	}
	return sum;
 8005028:	230e      	movs	r3, #14
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	781b      	ldrb	r3, [r3, #0]
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b004      	add	sp, #16
 8005034:	bd80      	pop	{r7, pc}

08005036 <u16toa>:
uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 8005036:	b5b0      	push	{r4, r5, r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	0002      	movs	r2, r0
 800503e:	6039      	str	r1, [r7, #0]
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0, j;
 8005044:	230f      	movs	r3, #15
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
	while(d)
 800504c:	e01d      	b.n	800508a <u16toa+0x54>
	{
		buf[i++] = (d % 10) + '0';
 800504e:	1dbb      	adds	r3, r7, #6
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	210a      	movs	r1, #10
 8005054:	0018      	movs	r0, r3
 8005056:	f7fb f8ef 	bl	8000238 <__aeabi_uidivmod>
 800505a:	000b      	movs	r3, r1
 800505c:	b29b      	uxth	r3, r3
 800505e:	b2da      	uxtb	r2, r3
 8005060:	210f      	movs	r1, #15
 8005062:	187b      	adds	r3, r7, r1
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	1879      	adds	r1, r7, r1
 8005068:	1c58      	adds	r0, r3, #1
 800506a:	7008      	strb	r0, [r1, #0]
 800506c:	0019      	movs	r1, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	185b      	adds	r3, r3, r1
 8005072:	3230      	adds	r2, #48	; 0x30
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
		d /= 10;
 8005078:	1dbc      	adds	r4, r7, #6
 800507a:	1dbb      	adds	r3, r7, #6
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	210a      	movs	r1, #10
 8005080:	0018      	movs	r0, r3
 8005082:	f7fb f853 	bl	800012c <__udivsi3>
 8005086:	0003      	movs	r3, r0
 8005088:	8023      	strh	r3, [r4, #0]
	while(d)
 800508a:	1dbb      	adds	r3, r7, #6
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1dd      	bne.n	800504e <u16toa+0x18>
	}
	buf[i] = 0;
 8005092:	230f      	movs	r3, #15
 8005094:	18fb      	adds	r3, r7, r3
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	18d3      	adds	r3, r2, r3
 800509c:	2200      	movs	r2, #0
 800509e:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 80050a0:	230e      	movs	r3, #14
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e029      	b.n	80050fe <u16toa+0xc8>
	{
		char tmp;
		tmp = buf[j];
 80050aa:	210e      	movs	r1, #14
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	18d2      	adds	r2, r2, r3
 80050b4:	240d      	movs	r4, #13
 80050b6:	193b      	adds	r3, r7, r4
 80050b8:	7812      	ldrb	r2, [r2, #0]
 80050ba:	701a      	strb	r2, [r3, #0]
		buf[j] = buf[i-j-1];
 80050bc:	250f      	movs	r5, #15
 80050be:	197b      	adds	r3, r7, r5
 80050c0:	781a      	ldrb	r2, [r3, #0]
 80050c2:	187b      	adds	r3, r7, r1
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	18d2      	adds	r2, r2, r3
 80050ce:	0008      	movs	r0, r1
 80050d0:	187b      	adds	r3, r7, r1
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	18cb      	adds	r3, r1, r3
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	701a      	strb	r2, [r3, #0]
		buf[i-j-1] = tmp; // swap
 80050dc:	197b      	adds	r3, r7, r5
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	0001      	movs	r1, r0
 80050e2:	187b      	adds	r3, r7, r1
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	18d3      	adds	r3, r2, r3
 80050ee:	193a      	adds	r2, r7, r4
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 80050f4:	187b      	adds	r3, r7, r1
 80050f6:	187a      	adds	r2, r7, r1
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	3201      	adds	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	230f      	movs	r3, #15
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	220e      	movs	r2, #14
 800510a:	18ba      	adds	r2, r7, r2
 800510c:	7812      	ldrb	r2, [r2, #0]
 800510e:	429a      	cmp	r2, r3
 8005110:	d3cb      	bcc.n	80050aa <u16toa+0x74>
	}
	return i;
 8005112:	230f      	movs	r3, #15
 8005114:	18fb      	adds	r3, r7, r3
 8005116:	781b      	ldrb	r3, [r3, #0]
}
 8005118:	0018      	movs	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	b004      	add	sp, #16
 800511e:	bdb0      	pop	{r4, r5, r7, pc}

08005120 <strcpy_f>:

// Fast strcpy
// Return: pointer to the end of dest + src
char* strcpy_f(char* dest, const char* src)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	while(*src)
 800512a:	e009      	b.n	8005140 <strcpy_f+0x20>
	{
		*dest = *src;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	701a      	strb	r2, [r3, #0]
		src++;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	3301      	adds	r3, #1
 8005138:	603b      	str	r3, [r7, #0]
		dest++;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3301      	adds	r3, #1
 800513e:	607b      	str	r3, [r7, #4]
	while(*src)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f1      	bne.n	800512c <strcpy_f+0xc>
	}
	*dest = 0;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
	return dest;
 800514e:	687b      	ldr	r3, [r7, #4]
}
 8005150:	0018      	movs	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	b002      	add	sp, #8
 8005156:	bd80      	pop	{r7, pc}

08005158 <strncpy_f>:

char* strncpy_f(char* dest, const char* src, uint16_t len)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	1dbb      	adds	r3, r7, #6
 8005164:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 8005166:	e00e      	b.n	8005186 <strncpy_f+0x2e>
	{
		*dest = *src;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	781a      	ldrb	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	701a      	strb	r2, [r3, #0]
		src++;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	3301      	adds	r3, #1
 8005174:	60bb      	str	r3, [r7, #8]
		dest++;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3301      	adds	r3, #1
 800517a:	60fb      	str	r3, [r7, #12]
		len--;
 800517c:	1dbb      	adds	r3, r7, #6
 800517e:	881a      	ldrh	r2, [r3, #0]
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	3a01      	subs	r2, #1
 8005184:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <strncpy_f+0x3e>
 800518e:	1dbb      	adds	r3, r7, #6
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e8      	bne.n	8005168 <strncpy_f+0x10>
	}
	*dest = 0;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
	return dest;
 800519c:	68fb      	ldr	r3, [r7, #12]
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b004      	add	sp, #16
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <begin_serial485>:
        }
    }
    return CRC_reg;
}
void begin_serial485(struct Serial485 *p485, UART_HandleTypeDef *pSerial, PIN_typedef pin_RW, int timer_ms)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	0039      	movs	r1, r7
 80051b2:	600a      	str	r2, [r1, #0]
 80051b4:	604b      	str	r3, [r1, #4]
    int i;
    p485->state_RW = RE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2251      	movs	r2, #81	; 0x51
 80051ba:	2101      	movs	r1, #1
 80051bc:	5499      	strb	r1, [r3, r2]
    p485->timeout_tx = 0;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	669a      	str	r2, [r3, #104]	; 0x68
    p485->idx_rx = 0;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2232      	movs	r2, #50	; 0x32
 80051c8:	2100      	movs	r1, #0
 80051ca:	5499      	strb	r1, [r3, r2]
    p485->idx_command = 0;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	635a      	str	r2, [r3, #52]	; 0x34
    *(p485->command) = 0;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	701a      	strb	r2, [r3, #0]
    p485->argc = 0;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38
    p485->argv[0] = p485->argv0;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	334c      	adds	r3, #76	; 0x4c
 80051e2:	001a      	movs	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
    p485->is_command_ready = false;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2250      	movs	r2, #80	; 0x50
 80051ec:	2100      	movs	r1, #0
 80051ee:	5499      	strb	r1, [r3, r2]
    p485->timer_ms = timer_ms;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	665a      	str	r2, [r3, #100]	; 0x64
    p485->timeout_clear_rx = TIMEOUT_RX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	22fa      	movs	r2, #250	; 0xfa
 80051fa:	0092      	lsls	r2, r2, #2
 80051fc:	66da      	str	r2, [r3, #108]	; 0x6c
    p485->n_available = 0;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	671a      	str	r2, [r3, #112]	; 0x70
    p485->pSerial = pSerial;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	659a      	str	r2, [r3, #88]	; 0x58
    p485->pin_RW = pin_RW;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	003a      	movs	r2, r7
 800520e:	335c      	adds	r3, #92	; 0x5c
 8005210:	ca03      	ldmia	r2!, {r0, r1}
 8005212:	c303      	stmia	r3!, {r0, r1}
    HAL_GPIO_WritePin(pin_RW.group, pin_RW.pin, RE); // toggle receive mode
 8005214:	003b      	movs	r3, r7
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	003b      	movs	r3, r7
 800521a:	889b      	ldrh	r3, [r3, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	0019      	movs	r1, r3
 8005220:	f7fb fc9d 	bl	8000b5e <HAL_GPIO_WritePin>
}
 8005224:	46c0      	nop			; (mov r8, r8)
 8005226:	46bd      	mov	sp, r7
 8005228:	b004      	add	sp, #16
 800522a:	bd80      	pop	{r7, pc}

0800522c <set_direction485>:

void set_direction485(struct Serial485 *p485, uint8_t direction)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	000a      	movs	r2, r1
 8005236:	1cfb      	adds	r3, r7, #3
 8005238:	701a      	strb	r2, [r3, #0]
	case GPIO_PIN_RESET:
		v &= ~(1 << RW485_ON_CH395);
	}
	CH395WriteGPIOAddr(GPIO_OUT_REG, v);
#else
	HAL_GPIO_WritePin(p485->pin_RW.group, p485->pin_RW.pin, direction);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2260      	movs	r2, #96	; 0x60
 8005242:	5a99      	ldrh	r1, [r3, r2]
 8005244:	1cfb      	adds	r3, r7, #3
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	001a      	movs	r2, r3
 800524a:	f7fb fc88 	bl	8000b5e <HAL_GPIO_WritePin>
#endif
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	46bd      	mov	sp, r7
 8005252:	b002      	add	sp, #8
 8005254:	bd80      	pop	{r7, pc}

08005256 <send_serial485>:

void send_serial485(struct Serial485 *p485, const char *str)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
    int len_content;
    set_direction485(p485, DE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2100      	movs	r1, #0
 8005264:	0018      	movs	r0, r3
 8005266:	f7ff ffe1 	bl	800522c <set_direction485>
    p485->state_RW = DE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2251      	movs	r2, #81	; 0x51
 800526e:	2100      	movs	r1, #0
 8005270:	5499      	strb	r1, [r3, r2]
    len_content = strlen(str);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	0018      	movs	r0, r3
 8005276:	f7fa ff51 	bl	800011c <strlen>
 800527a:	0003      	movs	r3, r0
 800527c:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(p485->pSerial, str, len_content, HAL_MAX_DELAY);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	b29a      	uxth	r2, r3
 8005286:	2301      	movs	r3, #1
 8005288:	425b      	negs	r3, r3
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	f7fd f87a 	bl	8002384 <HAL_UART_Transmit>
    Delay_us(20);
 8005290:	2014      	movs	r0, #20
 8005292:	f7fe fa33 	bl	80036fc <Delay_us>
    set_direction485(p485, RE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2101      	movs	r1, #1
 800529a:	0018      	movs	r0, r3
 800529c:	f7ff ffc6 	bl	800522c <set_direction485>
    p485->state_RW = RE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2251      	movs	r2, #81	; 0x51
 80052a4:	2101      	movs	r1, #1
 80052a6:	5499      	strb	r1, [r3, r2]
}
 80052a8:	46c0      	nop			; (mov r8, r8)
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b004      	add	sp, #16
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <handle_serial485>:
//}

// call this function at each interval
// switches DE to RE when transmission finished
void handle_serial485(struct Serial485 *p485)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
        // countdown rx clear timer
	char c;
	if(HAL_OK == HAL_UART_Receive(p485->pSerial, &c, 1, 0))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80052bc:	230f      	movs	r3, #15
 80052be:	18f9      	adds	r1, r7, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	2201      	movs	r2, #1
 80052c4:	f7fd f902 	bl	80024cc <HAL_UART_Receive>
 80052c8:	1e03      	subs	r3, r0, #0
 80052ca:	d14d      	bne.n	8005368 <handle_serial485+0xb8>
	{
		p485->timeout_clear_rx = TIMEOUT_RX; // reset rx clear timer
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	22fa      	movs	r2, #250	; 0xfa
 80052d0:	0092      	lsls	r2, r2, #2
 80052d2:	66da      	str	r2, [r3, #108]	; 0x6c
		if (strchr(DELIM_485, c) != NULL) // c is a deliminator
 80052d4:	230f      	movs	r3, #15
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	001a      	movs	r2, r3
 80052dc:	4b2f      	ldr	r3, [pc, #188]	; (800539c <handle_serial485+0xec>)
 80052de:	0011      	movs	r1, r2
 80052e0:	0018      	movs	r0, r3
 80052e2:	f001 f890 	bl	8006406 <strchr>
 80052e6:	1e03      	subs	r3, r0, #0
 80052e8:	d033      	beq.n	8005352 <handle_serial485+0xa2>
		{
			if (p485->idx_command > 0) // parse the command if the command buffer is not empty
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	dd4f      	ble.n	8005392 <handle_serial485+0xe2>
			{
				p485->command[p485->idx_command] = 0;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	2100      	movs	r1, #0
 80052fa:	54d1      	strb	r1, [r2, r3]
				// eliminate the trailling deliminating characters
				parse_command(p485);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	0018      	movs	r0, r3
 8005300:	f000 f852 	bl	80053a8 <parse_command>
				// execute command if a command has been parsed
				// Do not execute command in an interrupr service function
				// execute it in the main loop
				if (p485->is_command_ready)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2250      	movs	r2, #80	; 0x50
 8005308:	5c9b      	ldrb	r3, [r3, r2]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d041      	beq.n	8005392 <handle_serial485+0xe2>
				{
					if (execute_command(p485->argc, (char **)(p485->argv)))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	333c      	adds	r3, #60	; 0x3c
 8005316:	0019      	movs	r1, r3
 8005318:	0010      	movs	r0, r2
 800531a:	f000 f8ad 	bl	8005478 <execute_command>
 800531e:	1e03      	subs	r3, r0, #0
 8005320:	d006      	beq.n	8005330 <handle_serial485+0x80>
					{
						send_serial485(p485, "\r"); // succeeded
 8005322:	4a1f      	ldr	r2, [pc, #124]	; (80053a0 <handle_serial485+0xf0>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	0011      	movs	r1, r2
 8005328:	0018      	movs	r0, r3
 800532a:	f7ff ff94 	bl	8005256 <send_serial485>
 800532e:	e005      	b.n	800533c <handle_serial485+0x8c>
					}
					else
					{
						send_serial485(p485, "?>\r"); // bad command
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <handle_serial485+0xf4>)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0011      	movs	r1, r2
 8005336:	0018      	movs	r0, r3
 8005338:	f7ff ff8d 	bl	8005256 <send_serial485>
					}
					// clean up the command flags
					p485->is_command_ready = false;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2250      	movs	r2, #80	; 0x50
 8005340:	2100      	movs	r1, #0
 8005342:	5499      	strb	r1, [r3, r2]
					p485->idx_command = 0;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	635a      	str	r2, [r3, #52]	; 0x34
					p485->argc = 0;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	639a      	str	r2, [r3, #56]	; 0x38
                p485->idx_command = 0; // clear the rx buffer
                p485->command[0] = 0;
            }
        }
	}
}
 8005350:	e01f      	b.n	8005392 <handle_serial485+0xe2>
			p485->command[(p485->idx_command)++] = c;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6351      	str	r1, [r2, #52]	; 0x34
 800535c:	220f      	movs	r2, #15
 800535e:	18ba      	adds	r2, r7, r2
 8005360:	7811      	ldrb	r1, [r2, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	54d1      	strb	r1, [r2, r3]
}
 8005366:	e014      	b.n	8005392 <handle_serial485+0xe2>
        if (p485->timeout_clear_rx > 0)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536c:	2b00      	cmp	r3, #0
 800536e:	dd10      	ble.n	8005392 <handle_serial485+0xe2>
            p485->timeout_clear_rx -= p485->timer_ms;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005378:	1ad2      	subs	r2, r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	66da      	str	r2, [r3, #108]	; 0x6c
            if (p485->timeout_clear_rx <= 0)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005382:	2b00      	cmp	r3, #0
 8005384:	dc05      	bgt.n	8005392 <handle_serial485+0xe2>
                p485->idx_command = 0; // clear the rx buffer
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	635a      	str	r2, [r3, #52]	; 0x34
                p485->command[0] = 0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b004      	add	sp, #16
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	0800691c 	.word	0x0800691c
 80053a0:	08006920 	.word	0x08006920
 80053a4:	08006924 	.word	0x08006924

080053a8 <parse_command>:

void parse_command(struct Serial485 *p485)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
    char *command = p485->command;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	60fb      	str	r3, [r7, #12]
    char *tok;
    p485->argc = 0;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	639a      	str	r2, [r3, #56]	; 0x38
#if COMPATIBILITY == GS232
    p485->argv[0][0] = command[0];
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	701a      	strb	r2, [r3, #0]
    if (p485->idx_command > 1 &&
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	dd1c      	ble.n	8005406 <parse_command+0x5e>
        command[0] != 'M' && command[1] >= '0' && command[1] <= '9') // handle cases like O2
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	781b      	ldrb	r3, [r3, #0]
    if (p485->idx_command > 1 &&
 80053d0:	2b4d      	cmp	r3, #77	; 0x4d
 80053d2:	d018      	beq.n	8005406 <parse_command+0x5e>
        command[0] != 'M' && command[1] >= '0' && command[1] <= '9') // handle cases like O2
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3301      	adds	r3, #1
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b2f      	cmp	r3, #47	; 0x2f
 80053dc:	d913      	bls.n	8005406 <parse_command+0x5e>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3301      	adds	r3, #1
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b39      	cmp	r3, #57	; 0x39
 80053e6:	d80e      	bhi.n	8005406 <parse_command+0x5e>
    {
        p485->argv[0][1] = command[1];
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ec:	3301      	adds	r3, #1
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	7852      	ldrb	r2, [r2, #1]
 80053f2:	701a      	strb	r2, [r3, #0]
        p485->argv[0][2] = 0;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	3302      	adds	r3, #2
 80053fa:	2200      	movs	r2, #0
 80053fc:	701a      	strb	r2, [r3, #0]
        command+=2;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3302      	adds	r3, #2
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	e007      	b.n	8005416 <parse_command+0x6e>
    }
    else
    {
        p485->argv[0][1] = 0;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	3301      	adds	r3, #1
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
        command++;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
    }
    p485->argc = 1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
    tok = strtok(command, DELIM_COMM_485);
 800541c:	4a15      	ldr	r2, [pc, #84]	; (8005474 <parse_command+0xcc>)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	0011      	movs	r1, r2
 8005422:	0018      	movs	r0, r3
 8005424:	f001 f878 	bl	8006518 <strtok>
 8005428:	0003      	movs	r3, r0
 800542a:	60bb      	str	r3, [r7, #8]
    while (tok)
 800542c:	e012      	b.n	8005454 <parse_command+0xac>
    {
        p485->argv[(p485->argc)++] = tok;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6391      	str	r1, [r2, #56]	; 0x38
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	330e      	adds	r3, #14
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	18d3      	adds	r3, r2, r3
 8005440:	3304      	adds	r3, #4
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	601a      	str	r2, [r3, #0]
        tok = strtok(NULL, DELIM_COMM_485);
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <parse_command+0xcc>)
 8005448:	0019      	movs	r1, r3
 800544a:	2000      	movs	r0, #0
 800544c:	f001 f864 	bl	8006518 <strtok>
 8005450:	0003      	movs	r3, r0
 8005452:	60bb      	str	r3, [r7, #8]
    while (tok)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e9      	bne.n	800542e <parse_command+0x86>
    {
        p485->argv[(p485->argc)++] = tok;
        tok = strtok(NULL, DELIM_COMM_485);
    }
#endif
    p485->is_active = true;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2274      	movs	r2, #116	; 0x74
 800545e:	2101      	movs	r1, #1
 8005460:	5499      	strb	r1, [r3, r2]
    p485->is_command_ready = true;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2250      	movs	r2, #80	; 0x50
 8005466:	2101      	movs	r1, #1
 8005468:	5499      	strb	r1, [r3, r2]
}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	46bd      	mov	sp, r7
 800546e:	b004      	add	sp, #16
 8005470:	bd80      	pop	{r7, pc}
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	08006928 	.word	0x08006928

08005478 <execute_command>:

bool execute_command(int argc, char** argv)
{
 8005478:	b590      	push	{r4, r7, lr}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
    int i;
    bool res = false;
 8005482:	230b      	movs	r3, #11
 8005484:	18fb      	adds	r3, r7, r3
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
    // search in command list
    for (i = 0; i < N_COMM; ++i)
 800548a:	2300      	movs	r3, #0
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e01a      	b.n	80054c6 <execute_command+0x4e>
    {
        if (strcmp(argv[0], commands[i]) == 0) // if any of the listed commands matches
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	4b11      	ldr	r3, [pc, #68]	; (80054dc <execute_command+0x64>)
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	58d3      	ldr	r3, [r2, r3]
 800549c:	0019      	movs	r1, r3
 800549e:	f7fa fe33 	bl	8000108 <strcmp>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d10c      	bne.n	80054c0 <execute_command+0x48>
        {
            res = (*command_calls[i])(argc, argv);
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <execute_command+0x68>)
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	0092      	lsls	r2, r2, #2
 80054ac:	58d3      	ldr	r3, [r2, r3]
 80054ae:	220b      	movs	r2, #11
 80054b0:	18bc      	adds	r4, r7, r2
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	0010      	movs	r0, r2
 80054b8:	4798      	blx	r3
 80054ba:	0003      	movs	r3, r0
 80054bc:	7023      	strb	r3, [r4, #0]
            break;
 80054be:	e005      	b.n	80054cc <execute_command+0x54>
    for (i = 0; i < N_COMM; ++i)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	dde1      	ble.n	8005490 <execute_command+0x18>
        }
    }
    return res;
 80054cc:	230b      	movs	r3, #11
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	781b      	ldrb	r3, [r3, #0]
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b005      	add	sp, #20
 80054d8:	bd90      	pop	{r4, r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	20000850 	.word	0x20000850
 80054e0:	2000085c 	.word	0x2000085c

080054e4 <on_485_reset>:
/************************************************
 *             HANDLE RS485 commands            *
 * *********************************************/

bool on_485_reset(int argc, char** argv)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	return true;
 80054ee:	2301      	movs	r3, #1
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <on_485_switch>:
bool on_485_switch(int argc, char** argv)
{
 80054f8:	b5b0      	push	{r4, r5, r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
	if(argc < 3)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b02      	cmp	r3, #2
 8005506:	dc01      	bgt.n	800550c <on_485_switch+0x14>
	{
		return false;
 8005508:	2300      	movs	r3, #0
 800550a:	e031      	b.n	8005570 <on_485_switch+0x78>
	}
	const char *A = argv[1];
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	617b      	str	r3, [r7, #20]
	const char *B = argv[2];
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	613b      	str	r3, [r7, #16]
	if(A && B)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d027      	beq.n	800556e <on_485_switch+0x76>
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d024      	beq.n	800556e <on_485_switch+0x76>
	{
		uint8_t nA = atou8(A);
 8005524:	250f      	movs	r5, #15
 8005526:	197c      	adds	r4, r7, r5
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	0018      	movs	r0, r3
 800552c:	f7ff fd40 	bl	8004fb0 <atou8>
 8005530:	0003      	movs	r3, r0
 8005532:	7023      	strb	r3, [r4, #0]
		uint8_t nB = atou8(B);
 8005534:	230e      	movs	r3, #14
 8005536:	18fc      	adds	r4, r7, r3
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	0018      	movs	r0, r3
 800553c:	f7ff fd38 	bl	8004fb0 <atou8>
 8005540:	0003      	movs	r3, r0
 8005542:	7023      	strb	r3, [r4, #0]
		if(nA <= NUM_ANTENNA && nB<=NUM_ANTENNA)
 8005544:	197b      	adds	r3, r7, r5
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b06      	cmp	r3, #6
 800554a:	d810      	bhi.n	800556e <on_485_switch+0x76>
 800554c:	230e      	movs	r3, #14
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b06      	cmp	r3, #6
 8005554:	d80b      	bhi.n	800556e <on_485_switch+0x76>
		{
			switch_Antenna(nA, nB);
 8005556:	230e      	movs	r3, #14
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	230f      	movs	r3, #15
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	0011      	movs	r1, r2
 8005564:	0018      	movs	r0, r3
 8005566:	f000 fc69 	bl	8005e3c <switch_Antenna>
			return true;
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <on_485_switch+0x78>
		}
	}
	return false;
 800556e:	2300      	movs	r3, #0
}
 8005570:	0018      	movs	r0, r3
 8005572:	46bd      	mov	sp, r7
 8005574:	b006      	add	sp, #24
 8005576:	bdb0      	pop	{r4, r5, r7, pc}

08005578 <on_485_getalloc>:
bool on_485_getalloc(int argc, char** argv)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	return false;
 8005582:	2300      	movs	r3, #0
}
 8005584:	0018      	movs	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	b002      	add	sp, #8
 800558a:	bd80      	pop	{r7, pc}

0800558c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t i;
	Selector[0].PIN_BCD0 = BCD1_0;
 8005592:	4b7a      	ldr	r3, [pc, #488]	; (800577c <main+0x1f0>)
 8005594:	4a7a      	ldr	r2, [pc, #488]	; (8005780 <main+0x1f4>)
 8005596:	ca03      	ldmia	r2!, {r0, r1}
 8005598:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCD1 = BCD1_1;
 800559a:	4b78      	ldr	r3, [pc, #480]	; (800577c <main+0x1f0>)
 800559c:	4a79      	ldr	r2, [pc, #484]	; (8005784 <main+0x1f8>)
 800559e:	3308      	adds	r3, #8
 80055a0:	ca03      	ldmia	r2!, {r0, r1}
 80055a2:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCD2 = BCD1_2;
 80055a4:	4b75      	ldr	r3, [pc, #468]	; (800577c <main+0x1f0>)
 80055a6:	4a78      	ldr	r2, [pc, #480]	; (8005788 <main+0x1fc>)
 80055a8:	3310      	adds	r3, #16
 80055aa:	ca03      	ldmia	r2!, {r0, r1}
 80055ac:	c303      	stmia	r3!, {r0, r1}
	Selector[0].sel = 0;
 80055ae:	4b73      	ldr	r3, [pc, #460]	; (800577c <main+0x1f0>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCD0 = BCD2_0;
 80055b4:	4b71      	ldr	r3, [pc, #452]	; (800577c <main+0x1f0>)
 80055b6:	4a75      	ldr	r2, [pc, #468]	; (800578c <main+0x200>)
 80055b8:	331c      	adds	r3, #28
 80055ba:	ca03      	ldmia	r2!, {r0, r1}
 80055bc:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCD1 = BCD2_1;
 80055be:	4b6f      	ldr	r3, [pc, #444]	; (800577c <main+0x1f0>)
 80055c0:	4a73      	ldr	r2, [pc, #460]	; (8005790 <main+0x204>)
 80055c2:	3324      	adds	r3, #36	; 0x24
 80055c4:	ca03      	ldmia	r2!, {r0, r1}
 80055c6:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCD2 = BCD2_2;
 80055c8:	4b6c      	ldr	r3, [pc, #432]	; (800577c <main+0x1f0>)
 80055ca:	4a72      	ldr	r2, [pc, #456]	; (8005794 <main+0x208>)
 80055cc:	332c      	adds	r3, #44	; 0x2c
 80055ce:	ca03      	ldmia	r2!, {r0, r1}
 80055d0:	c303      	stmia	r3!, {r0, r1}
	Selector[0].sel = 0;
 80055d2:	4b6a      	ldr	r3, [pc, #424]	; (800577c <main+0x1f0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	761a      	strb	r2, [r3, #24]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055d8:	f7fa fe34 	bl	8000244 <HAL_Init>

  /* USER CODE BEGIN Init */
  // init 485
  begin_serial485(p485, &huart2, RW485, 1);
 80055dc:	4b6e      	ldr	r3, [pc, #440]	; (8005798 <main+0x20c>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4b6e      	ldr	r3, [pc, #440]	; (800579c <main+0x210>)
 80055e2:	496f      	ldr	r1, [pc, #444]	; (80057a0 <main+0x214>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	9200      	str	r2, [sp, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f7ff fddb 	bl	80051a6 <begin_serial485>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055f0:	f000 f8f2 	bl	80057d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055f4:	f000 f9cc 	bl	8005990 <MX_GPIO_Init>
  MX_SPI1_Init();
 80055f8:	f000 f95c 	bl	80058b4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80055fc:	f000 f998 	bl	8005930 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8005600:	f000 f938 	bl	8005874 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  // Check EEPROM
  EEPROM.base_addr = (uint8_t*)EEPROM_BASE_ADDR;
 8005604:	4b67      	ldr	r3, [pc, #412]	; (80057a4 <main+0x218>)
 8005606:	4a68      	ldr	r2, [pc, #416]	; (80057a8 <main+0x21c>)
 8005608:	601a      	str	r2, [r3, #0]
  EEPROM.size = 400;
 800560a:	4b66      	ldr	r3, [pc, #408]	; (80057a4 <main+0x218>)
 800560c:	22c8      	movs	r2, #200	; 0xc8
 800560e:	0052      	lsls	r2, r2, #1
 8005610:	809a      	strh	r2, [r3, #4]
  EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8005612:	4966      	ldr	r1, [pc, #408]	; (80057ac <main+0x220>)
 8005614:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <main+0x218>)
 8005616:	2261      	movs	r2, #97	; 0x61
 8005618:	0018      	movs	r0, r3
 800561a:	f7fe f982 	bl	8003922 <EEPROM_ReadBytes>
  if(SavedData.EEPROM_valid_ID != EEPROM_VALID_BYTE)
 800561e:	4b63      	ldr	r3, [pc, #396]	; (80057ac <main+0x220>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	2baa      	cmp	r3, #170	; 0xaa
 8005624:	d03c      	beq.n	80056a0 <main+0x114>
  {
	  // create a new EEPROM image
	  for(i=0; i<NUM_ANTENNA; ++i)
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	2200      	movs	r2, #0
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e025      	b.n	800567a <main+0xee>
	  {
		  strcpy(SavedData.ant_labels[i], "Ant");
 800562e:	1dfb      	adds	r3, r7, #7
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	011a      	lsls	r2, r3, #4
 8005634:	4b5d      	ldr	r3, [pc, #372]	; (80057ac <main+0x220>)
 8005636:	18d3      	adds	r3, r2, r3
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	4b5d      	ldr	r3, [pc, #372]	; (80057b0 <main+0x224>)
 800563c:	0010      	movs	r0, r2
 800563e:	0019      	movs	r1, r3
 8005640:	2304      	movs	r3, #4
 8005642:	001a      	movs	r2, r3
 8005644:	f000 fec0 	bl	80063c8 <memcpy>
		  SavedData.ant_labels[i][3] = '1' + i;
 8005648:	1dfb      	adds	r3, r7, #7
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	1dfa      	adds	r2, r7, #7
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	3231      	adds	r2, #49	; 0x31
 8005652:	b2d1      	uxtb	r1, r2
 8005654:	4a55      	ldr	r2, [pc, #340]	; (80057ac <main+0x220>)
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	18d3      	adds	r3, r2, r3
 800565a:	3304      	adds	r3, #4
 800565c:	1c0a      	adds	r2, r1, #0
 800565e:	701a      	strb	r2, [r3, #0]
		  SavedData.ant_labels[i][4] = 0;
 8005660:	1dfb      	adds	r3, r7, #7
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	4a51      	ldr	r2, [pc, #324]	; (80057ac <main+0x220>)
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	18d3      	adds	r3, r2, r3
 800566a:	3305      	adds	r3, #5
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
	  for(i=0; i<NUM_ANTENNA; ++i)
 8005670:	1dfb      	adds	r3, r7, #7
 8005672:	1dfa      	adds	r2, r7, #7
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	3201      	adds	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	1dfb      	adds	r3, r7, #7
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b05      	cmp	r3, #5
 8005680:	d9d5      	bls.n	800562e <main+0xa2>
	  }
	  SavedData.EEPROM_valid_ID = EEPROM_VALID_BYTE;
 8005682:	4b4a      	ldr	r3, [pc, #296]	; (80057ac <main+0x220>)
 8005684:	22aa      	movs	r2, #170	; 0xaa
 8005686:	701a      	strb	r2, [r3, #0]
	  EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8005688:	4948      	ldr	r1, [pc, #288]	; (80057ac <main+0x220>)
 800568a:	4b46      	ldr	r3, [pc, #280]	; (80057a4 <main+0x218>)
 800568c:	2261      	movs	r2, #97	; 0x61
 800568e:	0018      	movs	r0, r3
 8005690:	f7fe f8e4 	bl	800385c <EEPROM_WriteBytes>
	  EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
 8005694:	4945      	ldr	r1, [pc, #276]	; (80057ac <main+0x220>)
 8005696:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <main+0x218>)
 8005698:	2261      	movs	r2, #97	; 0x61
 800569a:	0018      	movs	r0, r3
 800569c:	f7fe f941 	bl	8003922 <EEPROM_ReadBytes>
  }
  DEBUG_LOG("Self checking...\n");
 80056a0:	46c0      	nop			; (mov r8, r8)
//   Check FS
  FS_begin(&FS, FS_BASE_ADDR);
 80056a2:	4a44      	ldr	r2, [pc, #272]	; (80057b4 <main+0x228>)
 80056a4:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <main+0x22c>)
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fe f83b 	bl	8003724 <FS_begin>
  i =  FS_exists(&FS, "/index.html");
 80056ae:	4a43      	ldr	r2, [pc, #268]	; (80057bc <main+0x230>)
 80056b0:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <main+0x22c>)
 80056b2:	0011      	movs	r1, r2
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7fe f8a3 	bl	8003800 <FS_exists>
 80056ba:	0003      	movs	r3, r0
 80056bc:	001a      	movs	r2, r3
 80056be:	1dfb      	adds	r3, r7, #7
 80056c0:	701a      	strb	r2, [r3, #0]
  i = FS_exists(&FS, "/b.f");
 80056c2:	4a3f      	ldr	r2, [pc, #252]	; (80057c0 <main+0x234>)
 80056c4:	4b3c      	ldr	r3, [pc, #240]	; (80057b8 <main+0x22c>)
 80056c6:	0011      	movs	r1, r2
 80056c8:	0018      	movs	r0, r3
 80056ca:	f7fe f899 	bl	8003800 <FS_exists>
 80056ce:	0003      	movs	r3, r0
 80056d0:	001a      	movs	r2, r3
 80056d2:	1dfb      	adds	r3, r7, #7
 80056d4:	701a      	strb	r2, [r3, #0]
  // USART
//  begin_serial485(p485, &huart1, RW485, SCHED_INTERVAL / 1000);
//  HAL_UART_Receive_IT(&huart1, p485->rx_buffer, 1);
  // don't forget to override the callback function of USART1
//   Check ch395
	Delay_ms(350); // wait for CH395 being ready from power on
 80056d6:	4b3b      	ldr	r3, [pc, #236]	; (80057c4 <main+0x238>)
 80056d8:	0018      	movs	r0, r3
 80056da:	f7fe f80f 	bl	80036fc <Delay_us>
	for(i=0; i<0xff;++i)
 80056de:	1dfb      	adds	r3, r7, #7
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e013      	b.n	800570e <main+0x182>
	{
		if(CH395CMDCheckExist(i) != (uint8_t)~i)
 80056e6:	1dfb      	adds	r3, r7, #7
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	0018      	movs	r0, r3
 80056ec:	f7fd fb06 	bl	8002cfc <CH395CMDCheckExist>
 80056f0:	0003      	movs	r3, r0
 80056f2:	001a      	movs	r2, r3
 80056f4:	1dfb      	adds	r3, r7, #7
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	43db      	mvns	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d001      	beq.n	8005704 <main+0x178>
		{
			DEBUG_LOG("CH395 self check error!\n");
 8005700:	46c0      	nop			; (mov r8, r8)
			break;
 8005702:	e008      	b.n	8005716 <main+0x18a>
	for(i=0; i<0xff;++i)
 8005704:	1dfb      	adds	r3, r7, #7
 8005706:	1dfa      	adds	r2, r7, #7
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	3201      	adds	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	1dfb      	adds	r3, r7, #7
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2bff      	cmp	r3, #255	; 0xff
 8005714:	d1e7      	bne.n	80056e6 <main+0x15a>
		}
	}
	  HAL_IWDG_Refresh(&hiwdg); // feed dog
 8005716:	4b2c      	ldr	r3, [pc, #176]	; (80057c8 <main+0x23c>)
 8005718:	0018      	movs	r0, r3
 800571a:	f7fb fa87 	bl	8000c2c <HAL_IWDG_Refresh>
RESET_CH395:
	reset_CH395();
 800571e:	f000 f9f3 	bl	8005b08 <reset_CH395>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // handle CH395 interrupt flags
	  if(flag_PHY_reconn && !flag_CH395_ready) goto RESET_CH395;
 8005722:	4b2a      	ldr	r3, [pc, #168]	; (80057cc <main+0x240>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <main+0x1b2>
 800572c:	4b28      	ldr	r3, [pc, #160]	; (80057d0 <main+0x244>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2201      	movs	r2, #1
 8005734:	4053      	eors	r3, r2
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d000      	beq.n	800573e <main+0x1b2>
 800573c:	e7ef      	b.n	800571e <main+0x192>
	  HAL_IWDG_Refresh(&hiwdg); // feed dog
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <main+0x23c>)
 8005740:	0018      	movs	r0, r3
 8005742:	f7fb fa73 	bl	8000c2c <HAL_IWDG_Refresh>
	  if(flag_CH395_ready && ch395.RX_received)
 8005746:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <main+0x244>)
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00b      	beq.n	8005768 <main+0x1dc>
 8005750:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <main+0x248>)
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <main+0x1dc>
	  {
		  HTTPHandle(&ch395);
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <main+0x248>)
 800575c:	0018      	movs	r0, r3
 800575e:	f7ff f80d 	bl	800477c <HTTPHandle>
	  }
	  while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 8005762:	e001      	b.n	8005768 <main+0x1dc>
		  interrupt_CH395();
 8005764:	f000 fa0c 	bl	8005b80 <interrupt_CH395>
	  while(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET)
 8005768:	2390      	movs	r3, #144	; 0x90
 800576a:	05db      	lsls	r3, r3, #23
 800576c:	2102      	movs	r1, #2
 800576e:	0018      	movs	r0, r3
 8005770:	f7fb f9d8 	bl	8000b24 <HAL_GPIO_ReadPin>
 8005774:	1e03      	subs	r3, r0, #0
 8005776:	d0f5      	beq.n	8005764 <main+0x1d8>
	  if(flag_PHY_reconn && !flag_CH395_ready) goto RESET_CH395;
 8005778:	e7d3      	b.n	8005722 <main+0x196>
 800577a:	46c0      	nop			; (mov r8, r8)
 800577c:	2000185c 	.word	0x2000185c
 8005780:	080069ec 	.word	0x080069ec
 8005784:	080069f4 	.word	0x080069f4
 8005788:	080069fc 	.word	0x080069fc
 800578c:	08006a04 	.word	0x08006a04
 8005790:	08006a0c 	.word	0x08006a0c
 8005794:	08006a14 	.word	0x08006a14
 8005798:	2000084c 	.word	0x2000084c
 800579c:	08006a1c 	.word	0x08006a1c
 80057a0:	200018f8 	.word	0x200018f8
 80057a4:	2000080c 	.word	0x2000080c
 80057a8:	0800bc00 	.word	0x0800bc00
 80057ac:	200017f8 	.word	0x200017f8
 80057b0:	0800693c 	.word	0x0800693c
 80057b4:	0800c000 	.word	0x0800c000
 80057b8:	20001768 	.word	0x20001768
 80057bc:	08006940 	.word	0x08006940
 80057c0:	0800694c 	.word	0x0800694c
 80057c4:	00055730 	.word	0x00055730
 80057c8:	200017e8 	.word	0x200017e8
 80057cc:	20001530 	.word	0x20001530
 80057d0:	20001532 	.word	0x20001532
 80057d4:	20000000 	.word	0x20000000

080057d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b091      	sub	sp, #68	; 0x44
 80057dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80057de:	2410      	movs	r4, #16
 80057e0:	193b      	adds	r3, r7, r4
 80057e2:	0018      	movs	r0, r3
 80057e4:	2330      	movs	r3, #48	; 0x30
 80057e6:	001a      	movs	r2, r3
 80057e8:	2100      	movs	r1, #0
 80057ea:	f000 fdf6 	bl	80063da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80057ee:	003b      	movs	r3, r7
 80057f0:	0018      	movs	r0, r3
 80057f2:	2310      	movs	r3, #16
 80057f4:	001a      	movs	r2, r3
 80057f6:	2100      	movs	r1, #0
 80057f8:	f000 fdef 	bl	80063da <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80057fc:	0021      	movs	r1, r4
 80057fe:	187b      	adds	r3, r7, r1
 8005800:	220a      	movs	r2, #10
 8005802:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005804:	187b      	adds	r3, r7, r1
 8005806:	2201      	movs	r2, #1
 8005808:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800580a:	187b      	adds	r3, r7, r1
 800580c:	2210      	movs	r2, #16
 800580e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005810:	187b      	adds	r3, r7, r1
 8005812:	2201      	movs	r2, #1
 8005814:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005816:	187b      	adds	r3, r7, r1
 8005818:	2202      	movs	r2, #2
 800581a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800581c:	187b      	adds	r3, r7, r1
 800581e:	2200      	movs	r2, #0
 8005820:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8005822:	187b      	adds	r3, r7, r1
 8005824:	22c0      	movs	r2, #192	; 0xc0
 8005826:	0352      	lsls	r2, r2, #13
 8005828:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800582a:	187b      	adds	r3, r7, r1
 800582c:	2200      	movs	r2, #0
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005830:	187b      	adds	r3, r7, r1
 8005832:	0018      	movs	r0, r3
 8005834:	f7fb fa0a 	bl	8000c4c <HAL_RCC_OscConfig>
 8005838:	1e03      	subs	r3, r0, #0
 800583a:	d001      	beq.n	8005840 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800583c:	f000 fc1e 	bl	800607c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005840:	003b      	movs	r3, r7
 8005842:	2207      	movs	r2, #7
 8005844:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005846:	003b      	movs	r3, r7
 8005848:	2202      	movs	r2, #2
 800584a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800584c:	003b      	movs	r3, r7
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005852:	003b      	movs	r3, r7
 8005854:	22a0      	movs	r2, #160	; 0xa0
 8005856:	00d2      	lsls	r2, r2, #3
 8005858:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800585a:	003b      	movs	r3, r7
 800585c:	2101      	movs	r1, #1
 800585e:	0018      	movs	r0, r3
 8005860:	f7fb fce8 	bl	8001234 <HAL_RCC_ClockConfig>
 8005864:	1e03      	subs	r3, r0, #0
 8005866:	d001      	beq.n	800586c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005868:	f000 fc08 	bl	800607c <Error_Handler>
  }
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b011      	add	sp, #68	; 0x44
 8005872:	bd90      	pop	{r4, r7, pc}

08005874 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005878:	4b0b      	ldr	r3, [pc, #44]	; (80058a8 <MX_IWDG_Init+0x34>)
 800587a:	4a0c      	ldr	r2, [pc, #48]	; (80058ac <MX_IWDG_Init+0x38>)
 800587c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800587e:	4b0a      	ldr	r3, [pc, #40]	; (80058a8 <MX_IWDG_Init+0x34>)
 8005880:	2204      	movs	r2, #4
 8005882:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2047;
 8005884:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <MX_IWDG_Init+0x34>)
 8005886:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <MX_IWDG_Init+0x3c>)
 8005888:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2047;
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <MX_IWDG_Init+0x34>)
 800588c:	4a08      	ldr	r2, [pc, #32]	; (80058b0 <MX_IWDG_Init+0x3c>)
 800588e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <MX_IWDG_Init+0x34>)
 8005892:	0018      	movs	r0, r3
 8005894:	f7fb f980 	bl	8000b98 <HAL_IWDG_Init>
 8005898:	1e03      	subs	r3, r0, #0
 800589a:	d001      	beq.n	80058a0 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 800589c:	f000 fbee 	bl	800607c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80058a0:	46c0      	nop			; (mov r8, r8)
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	200017e8 	.word	0x200017e8
 80058ac:	40003000 	.word	0x40003000
 80058b0:	000007ff 	.word	0x000007ff

080058b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <MX_SPI1_Init+0x74>)
 80058ba:	4a1c      	ldr	r2, [pc, #112]	; (800592c <MX_SPI1_Init+0x78>)
 80058bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80058be:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <MX_SPI1_Init+0x74>)
 80058c0:	2282      	movs	r2, #130	; 0x82
 80058c2:	0052      	lsls	r2, r2, #1
 80058c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80058c6:	4b18      	ldr	r3, [pc, #96]	; (8005928 <MX_SPI1_Init+0x74>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80058cc:	4b16      	ldr	r3, [pc, #88]	; (8005928 <MX_SPI1_Init+0x74>)
 80058ce:	22e0      	movs	r2, #224	; 0xe0
 80058d0:	00d2      	lsls	r2, r2, #3
 80058d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <MX_SPI1_Init+0x74>)
 80058d6:	2202      	movs	r2, #2
 80058d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <MX_SPI1_Init+0x74>)
 80058dc:	2201      	movs	r2, #1
 80058de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <MX_SPI1_Init+0x74>)
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	0092      	lsls	r2, r2, #2
 80058e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058e8:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <MX_SPI1_Init+0x74>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058ee:	4b0e      	ldr	r3, [pc, #56]	; (8005928 <MX_SPI1_Init+0x74>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <MX_SPI1_Init+0x74>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058fa:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <MX_SPI1_Init+0x74>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005900:	4b09      	ldr	r3, [pc, #36]	; (8005928 <MX_SPI1_Init+0x74>)
 8005902:	2207      	movs	r2, #7
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005906:	4b08      	ldr	r3, [pc, #32]	; (8005928 <MX_SPI1_Init+0x74>)
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800590c:	4b06      	ldr	r3, [pc, #24]	; (8005928 <MX_SPI1_Init+0x74>)
 800590e:	2200      	movs	r2, #0
 8005910:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005912:	4b05      	ldr	r3, [pc, #20]	; (8005928 <MX_SPI1_Init+0x74>)
 8005914:	0018      	movs	r0, r3
 8005916:	f7fb fdf9 	bl	800150c <HAL_SPI_Init>
 800591a:	1e03      	subs	r3, r0, #0
 800591c:	d001      	beq.n	8005922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800591e:	f000 fbad 	bl	800607c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20001894 	.word	0x20001894
 800592c:	40013000 	.word	0x40013000

08005930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005936:	4a15      	ldr	r2, [pc, #84]	; (800598c <MX_USART2_UART_Init+0x5c>)
 8005938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800593a:	4b13      	ldr	r3, [pc, #76]	; (8005988 <MX_USART2_UART_Init+0x58>)
 800593c:	2296      	movs	r2, #150	; 0x96
 800593e:	0192      	lsls	r2, r2, #6
 8005940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005942:	4b11      	ldr	r3, [pc, #68]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005944:	2200      	movs	r2, #0
 8005946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <MX_USART2_UART_Init+0x58>)
 800594a:	2200      	movs	r2, #0
 800594c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800594e:	4b0e      	ldr	r3, [pc, #56]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005950:	2200      	movs	r2, #0
 8005952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005954:	4b0c      	ldr	r3, [pc, #48]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005956:	220c      	movs	r2, #12
 8005958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800595a:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <MX_USART2_UART_Init+0x58>)
 800595c:	2200      	movs	r2, #0
 800595e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005962:	2200      	movs	r2, #0
 8005964:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005966:	4b08      	ldr	r3, [pc, #32]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005968:	2200      	movs	r2, #0
 800596a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <MX_USART2_UART_Init+0x58>)
 800596e:	2200      	movs	r2, #0
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <MX_USART2_UART_Init+0x58>)
 8005974:	0018      	movs	r0, r3
 8005976:	f7fc fcad 	bl	80022d4 <HAL_UART_Init>
 800597a:	1e03      	subs	r3, r0, #0
 800597c:	d001      	beq.n	8005982 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800597e:	f000 fb7d 	bl	800607c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	200018f8 	.word	0x200018f8
 800598c:	40004400 	.word	0x40004400

08005990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005996:	240c      	movs	r4, #12
 8005998:	193b      	adds	r3, r7, r4
 800599a:	0018      	movs	r0, r3
 800599c:	2314      	movs	r3, #20
 800599e:	001a      	movs	r2, r3
 80059a0:	2100      	movs	r1, #0
 80059a2:	f000 fd1a 	bl	80063da <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80059a6:	4b52      	ldr	r3, [pc, #328]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059a8:	695a      	ldr	r2, [r3, #20]
 80059aa:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	03c9      	lsls	r1, r1, #15
 80059b0:	430a      	orrs	r2, r1
 80059b2:	615a      	str	r2, [r3, #20]
 80059b4:	4b4e      	ldr	r3, [pc, #312]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	03db      	lsls	r3, r3, #15
 80059bc:	4013      	ands	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059c2:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	4b4a      	ldr	r3, [pc, #296]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059c8:	2180      	movs	r1, #128	; 0x80
 80059ca:	0289      	lsls	r1, r1, #10
 80059cc:	430a      	orrs	r2, r1
 80059ce:	615a      	str	r2, [r3, #20]
 80059d0:	4b47      	ldr	r3, [pc, #284]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059d2:	695a      	ldr	r2, [r3, #20]
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	4013      	ands	r3, r2
 80059da:	607b      	str	r3, [r7, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059de:	4b44      	ldr	r3, [pc, #272]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	4b43      	ldr	r3, [pc, #268]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	02c9      	lsls	r1, r1, #11
 80059e8:	430a      	orrs	r2, r1
 80059ea:	615a      	str	r2, [r3, #20]
 80059ec:	4b40      	ldr	r3, [pc, #256]	; (8005af0 <MX_GPIO_Init+0x160>)
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	02db      	lsls	r3, r3, #11
 80059f4:	4013      	ands	r3, r2
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin 
 80059fa:	493e      	ldr	r1, [pc, #248]	; (8005af4 <MX_GPIO_Init+0x164>)
 80059fc:	2390      	movs	r3, #144	; 0x90
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	2201      	movs	r2, #1
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7fb f8ab 	bl	8000b5e <HAL_GPIO_WritePin>
                          |BCD1_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RW485_Pin|BCDM2_2_Pin|BCDM2_1_Pin|BCDM2_0_Pin 
 8005a08:	493b      	ldr	r1, [pc, #236]	; (8005af8 <MX_GPIO_Init+0x168>)
 8005a0a:	4b3c      	ldr	r3, [pc, #240]	; (8005afc <MX_GPIO_Init+0x16c>)
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f7fb f8a5 	bl	8000b5e <HAL_GPIO_WritePin>
                          |BCD1_1_Pin|BCD1_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005a14:	193b      	adds	r3, r7, r4
 8005a16:	2203      	movs	r2, #3
 8005a18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a1a:	193b      	adds	r3, r7, r4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a26:	193b      	adds	r3, r7, r4
 8005a28:	4a35      	ldr	r2, [pc, #212]	; (8005b00 <MX_GPIO_Init+0x170>)
 8005a2a:	0019      	movs	r1, r3
 8005a2c:	0010      	movs	r0, r2
 8005a2e:	f7fa ff05 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8005a32:	193b      	adds	r3, r7, r4
 8005a34:	2202      	movs	r2, #2
 8005a36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a38:	193b      	adds	r3, r7, r4
 8005a3a:	4a32      	ldr	r2, [pc, #200]	; (8005b04 <MX_GPIO_Init+0x174>)
 8005a3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	2201      	movs	r2, #1
 8005a42:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 8005a44:	193a      	adds	r2, r7, r4
 8005a46:	2390      	movs	r3, #144	; 0x90
 8005a48:	05db      	lsls	r3, r3, #23
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fa fef5 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin BCD2_2_Pin BCD2_1_Pin BCD2_0_Pin 
                           BCD1_2_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin 
 8005a52:	193b      	adds	r3, r7, r4
 8005a54:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <MX_GPIO_Init+0x164>)
 8005a56:	601a      	str	r2, [r3, #0]
                          |BCD1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a58:	193b      	adds	r3, r7, r4
 8005a5a:	2211      	movs	r2, #17
 8005a5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a5e:	193b      	adds	r3, r7, r4
 8005a60:	2201      	movs	r2, #1
 8005a62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a64:	193b      	adds	r3, r7, r4
 8005a66:	2200      	movs	r2, #0
 8005a68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a6a:	193a      	adds	r2, r7, r4
 8005a6c:	2390      	movs	r3, #144	; 0x90
 8005a6e:	05db      	lsls	r3, r3, #23
 8005a70:	0011      	movs	r1, r2
 8005a72:	0018      	movs	r0, r3
 8005a74:	f7fa fee2 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : RW485_Pin BCDM2_2_Pin BCDM2_1_Pin BCDM2_0_Pin 
                           BCD1_1_Pin BCD1_0_Pin */
  GPIO_InitStruct.Pin = RW485_Pin|BCDM2_2_Pin|BCDM2_1_Pin|BCDM2_0_Pin 
 8005a78:	0021      	movs	r1, r4
 8005a7a:	187b      	adds	r3, r7, r1
 8005a7c:	4a1e      	ldr	r2, [pc, #120]	; (8005af8 <MX_GPIO_Init+0x168>)
 8005a7e:	601a      	str	r2, [r3, #0]
                          |BCD1_1_Pin|BCD1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	2211      	movs	r2, #17
 8005a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a86:	187b      	adds	r3, r7, r1
 8005a88:	2201      	movs	r2, #1
 8005a8a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	2200      	movs	r2, #0
 8005a90:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a92:	000c      	movs	r4, r1
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	4a19      	ldr	r2, [pc, #100]	; (8005afc <MX_GPIO_Init+0x16c>)
 8005a98:	0019      	movs	r1, r3
 8005a9a:	0010      	movs	r0, r2
 8005a9c:	f7fa fece 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pin : BCDM1_2_Pin */
  GPIO_InitStruct.Pin = BCDM1_2_Pin;
 8005aa0:	0021      	movs	r1, r4
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	0212      	lsls	r2, r2, #8
 8005aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BCDM1_2_GPIO_Port, &GPIO_InitStruct);
 8005ab6:	000c      	movs	r4, r1
 8005ab8:	187b      	adds	r3, r7, r1
 8005aba:	4a10      	ldr	r2, [pc, #64]	; (8005afc <MX_GPIO_Init+0x16c>)
 8005abc:	0019      	movs	r1, r3
 8005abe:	0010      	movs	r0, r2
 8005ac0:	f7fa febc 	bl	800083c <HAL_GPIO_Init>

  /*Configure GPIO pins : BCDM1_1_Pin BCDM1_0_Pin */
  GPIO_InitStruct.Pin = BCDM1_1_Pin|BCDM1_0_Pin;
 8005ac4:	0021      	movs	r1, r4
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	22c0      	movs	r2, #192	; 0xc0
 8005aca:	0092      	lsls	r2, r2, #2
 8005acc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ada:	187a      	adds	r2, r7, r1
 8005adc:	2390      	movs	r3, #144	; 0x90
 8005ade:	05db      	lsls	r3, r3, #23
 8005ae0:	0011      	movs	r1, r2
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fa feaa 	bl	800083c <HAL_GPIO_Init>

}
 8005ae8:	46c0      	nop			; (mov r8, r8)
 8005aea:	46bd      	mov	sp, r7
 8005aec:	b009      	add	sp, #36	; 0x24
 8005aee:	bd90      	pop	{r4, r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	00009c10 	.word	0x00009c10
 8005af8:	00007818 	.word	0x00007818
 8005afc:	48000400 	.word	0x48000400
 8005b00:	48001400 	.word	0x48001400
 8005b04:	10210000 	.word	0x10210000

08005b08 <reset_CH395>:
//{
//	onReceived_serial485(p485);
//}

void reset_CH395()
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  flag_CH395_ready = false;
 8005b0c:	4b15      	ldr	r3, [pc, #84]	; (8005b64 <reset_CH395+0x5c>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
  ch395.RX_received = 0;
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <reset_CH395+0x60>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	705a      	strb	r2, [r3, #1]
  ch395.SOCK_responding = -1;
 8005b18:	4b13      	ldr	r3, [pc, #76]	; (8005b68 <reset_CH395+0x60>)
 8005b1a:	22ff      	movs	r2, #255	; 0xff
 8005b1c:	709a      	strb	r2, [r3, #2]
  ch395.TX_available = 0xff;
 8005b1e:	4b12      	ldr	r3, [pc, #72]	; (8005b68 <reset_CH395+0x60>)
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	70da      	strb	r2, [r3, #3]
  ch395.socket_connected = 0;
 8005b24:	4b10      	ldr	r3, [pc, #64]	; (8005b68 <reset_CH395+0x60>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
	CH395CMDReset();
 8005b2a:	f7fd f8d5 	bl	8002cd8 <CH395CMDReset>
	Delay_ms(100); // wait for CH395 being ready from power on
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <reset_CH395+0x64>)
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7fd fde3 	bl	80036fc <Delay_us>
	// initialize CH395 GPIO settings to INPUT/PULL DOWN
//	CH395WriteGPIOAddr(GPIO_DIR_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PU_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PD_REG, 0xff);
	CH395SetBuffer();
 8005b36:	f7fd f825 	bl	8002b84 <CH395SetBuffer>
  // initialize TCP server
  flag_CH395_ready = CH395TCPServerStart(*(uint32_t*)IP, port);
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <reset_CH395+0x68>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <reset_CH395+0x6c>)
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	0019      	movs	r1, r3
 8005b44:	0010      	movs	r0, r2
 8005b46:	f7fd f84f 	bl	8002be8 <CH395TCPServerStart>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	001a      	movs	r2, r3
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <reset_CH395+0x5c>)
 8005b50:	701a      	strb	r2, [r3, #0]
  //CH395SetBuffer();
  flag_PHY_reconn= false;
 8005b52:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <reset_CH395+0x70>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
  flag_IP_conflict = false;
 8005b58:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <reset_CH395+0x74>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	701a      	strb	r2, [r3, #0]
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20001532 	.word	0x20001532
 8005b68:	20000000 	.word	0x20000000
 8005b6c:	000186a0 	.word	0x000186a0
 8005b70:	20000868 	.word	0x20000868
 8005b74:	2000086c 	.word	0x2000086c
 8005b78:	20001530 	.word	0x20001530
 8005b7c:	20001531 	.word	0x20001531

08005b80 <interrupt_CH395>:

void interrupt_CH395()
{
 8005b80:	b5b0      	push	{r4, r5, r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
	uint8_t sock_int_status, i;
	uint16_t glob_int_status;
	//BEGIN_INT_CH395:
	// read global int status
	//glob_int_status = CH395CMDGetGlobIntStatus();
	glob_int_status = CH395CMDGetGlobIntStatus_ALL();
 8005b86:	2514      	movs	r5, #20
 8005b88:	197c      	adds	r4, r7, r5
 8005b8a:	f7fd fd41 	bl	8003610 <CH395CMDGetGlobIntStatus_ALL>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	8023      	strh	r3, [r4, #0]
//	if(glob_int_status == 0)
//	{
//		reset_CH395();
//		Delay_ms(300);
//	}
	if(glob_int_status & GINT_STAT_UNREACH)
 8005b92:	197b      	adds	r3, r7, r5
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	2201      	movs	r2, #1
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d005      	beq.n	8005ba8 <interrupt_CH395+0x28>
	{
		uint8_t unreach[8];
		CH395CMDGetUnreachIPPT(unreach);
 8005b9c:	1d3b      	adds	r3, r7, #4
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	f7fd f996 	bl	8002ed0 <CH395CMDGetUnreachIPPT>
		reset_CH395();
 8005ba4:	f7ff ffb0 	bl	8005b08 <reset_CH395>
	}
//	if(glob_int_status & GINT_STAT_IP_CONFLI)
//	{
//		flag_IP_conflict = true;
//	}
	if(glob_int_status & GINT_STAT_DHCP)
 8005ba8:	2314      	movs	r3, #20
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	2208      	movs	r2, #8
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d001      	beq.n	8005bb8 <interrupt_CH395+0x38>
	{
		CH395GetDHCPStatus();
 8005bb4:	f7fd fca2 	bl	80034fc <CH395GetDHCPStatus>
	}
	if(glob_int_status & GINT_STAT_PHY_CHANGE)
 8005bb8:	2314      	movs	r3, #20
 8005bba:	18fb      	adds	r3, r7, r3
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d00c      	beq.n	8005bde <interrupt_CH395+0x5e>
	{
		switch(CH395CMDGetPHYStatus())
 8005bc4:	f7fd f8be 	bl	8002d44 <CH395CMDGetPHYStatus>
 8005bc8:	0003      	movs	r3, r0
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d103      	bne.n	8005bd6 <interrupt_CH395+0x56>
		{
			case PHY_DISCONN:
				flag_CH395_ready = false;
 8005bce:	4b94      	ldr	r3, [pc, #592]	; (8005e20 <interrupt_CH395+0x2a0>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
				break;
 8005bd4:	e004      	b.n	8005be0 <interrupt_CH395+0x60>
			default:
				flag_PHY_reconn = true;
 8005bd6:	4b93      	ldr	r3, [pc, #588]	; (8005e24 <interrupt_CH395+0x2a4>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
 8005bdc:	e000      	b.n	8005be0 <interrupt_CH395+0x60>
		}
	}
 8005bde:	46c0      	nop			; (mov r8, r8)
	glob_int_status >>= 4; // get socket interrupt status
 8005be0:	2114      	movs	r1, #20
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	187a      	adds	r2, r7, r1
 8005be6:	8812      	ldrh	r2, [r2, #0]
 8005be8:	0912      	lsrs	r2, r2, #4
 8005bea:	801a      	strh	r2, [r3, #0]
	if(!glob_int_status) goto END_INT_CH395;
 8005bec:	187b      	adds	r3, r7, r1
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d100      	bne.n	8005bf6 <interrupt_CH395+0x76>
 8005bf4:	e10e      	b.n	8005e14 <interrupt_CH395+0x294>
	// handle SOCKET interrupts
	for(i=1; i<NUM_SOCKETS; ++i)
 8005bf6:	2317      	movs	r3, #23
 8005bf8:	18fb      	adds	r3, r7, r3
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e102      	b.n	8005e06 <interrupt_CH395+0x286>
	{
		glob_int_status >>= 1;
 8005c00:	2114      	movs	r1, #20
 8005c02:	187b      	adds	r3, r7, r1
 8005c04:	187a      	adds	r2, r7, r1
 8005c06:	8812      	ldrh	r2, [r2, #0]
 8005c08:	0852      	lsrs	r2, r2, #1
 8005c0a:	801a      	strh	r2, [r3, #0]
		if(glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 8005c0c:	187b      	adds	r3, r7, r1
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	d100      	bne.n	8005c18 <interrupt_CH395+0x98>
 8005c16:	e0f0      	b.n	8005dfa <interrupt_CH395+0x27a>
		{
			sock_int_status = CH395GetSocketInt(i);
 8005c18:	2511      	movs	r5, #17
 8005c1a:	197c      	adds	r4, r7, r5
 8005c1c:	2317      	movs	r3, #23
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7fd fc04 	bl	8003430 <CH395GetSocketInt>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	7023      	strb	r3, [r4, #0]
			if(sock_int_status & SINT_STAT_SENBUF_FREE) // Send buffer free
 8005c2c:	197b      	adds	r3, r7, r5
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2201      	movs	r2, #1
 8005c32:	4013      	ands	r3, r2
 8005c34:	d00f      	beq.n	8005c56 <interrupt_CH395+0xd6>
			{
				ch395.TX_available |= (1 << i);
 8005c36:	4b7c      	ldr	r3, [pc, #496]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005c38:	78db      	ldrb	r3, [r3, #3]
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	b25a      	sxtb	r2, r3
 8005c3e:	2317      	movs	r3, #23
 8005c40:	18fb      	adds	r3, r7, r3
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2101      	movs	r1, #1
 8005c46:	4099      	lsls	r1, r3
 8005c48:	000b      	movs	r3, r1
 8005c4a:	b25b      	sxtb	r3, r3
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	b25b      	sxtb	r3, r3
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	4b75      	ldr	r3, [pc, #468]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005c54:	70da      	strb	r2, [r3, #3]
			}
			if(sock_int_status & SINT_STAT_RECV) // data received on SOCK i
 8005c56:	2311      	movs	r3, #17
 8005c58:	18fb      	adds	r3, r7, r3
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d063      	beq.n	8005d2a <interrupt_CH395+0x1aa>
			{
				/*
				 * This section of code reads at most CH395_SIZE_BUFFER-1 bytes from PHY buffer
				 * and discards the rest of the received data
				 */
				HTTPRequestParseState* pS = parseStates + i - 1;
 8005c62:	2117      	movs	r1, #23
 8005c64:	187b      	adds	r3, r7, r1
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	22b6      	movs	r2, #182	; 0xb6
 8005c6a:	0052      	lsls	r2, r2, #1
 8005c6c:	4353      	muls	r3, r2
 8005c6e:	3b6d      	subs	r3, #109	; 0x6d
 8005c70:	3bff      	subs	r3, #255	; 0xff
 8005c72:	001a      	movs	r2, r3
 8005c74:	4b6d      	ldr	r3, [pc, #436]	; (8005e2c <interrupt_CH395+0x2ac>)
 8005c76:	18d3      	adds	r3, r2, r3
 8005c78:	60fb      	str	r3, [r7, #12]
				uint16_t len = CH395GetRecvLength(i);
 8005c7a:	2512      	movs	r5, #18
 8005c7c:	197c      	adds	r4, r7, r5
 8005c7e:	187b      	adds	r3, r7, r1
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	0018      	movs	r0, r3
 8005c84:	f7fd fa70 	bl	8003168 <CH395GetRecvLength>
 8005c88:	0003      	movs	r3, r0
 8005c8a:	8023      	strh	r3, [r4, #0]
				CH395GetRecvData(i, (len < CH395_SIZE_BUFFER-1)?(len):(len = CH395_SIZE_BUFFER-1), (uint8_t*)ch395.buffer);
 8005c8c:	197b      	adds	r3, r7, r5
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	4a67      	ldr	r2, [pc, #412]	; (8005e30 <interrupt_CH395+0x2b0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d905      	bls.n	8005ca2 <interrupt_CH395+0x122>
 8005c96:	2312      	movs	r3, #18
 8005c98:	18fb      	adds	r3, r7, r3
 8005c9a:	4a66      	ldr	r2, [pc, #408]	; (8005e34 <interrupt_CH395+0x2b4>)
 8005c9c:	801a      	strh	r2, [r3, #0]
 8005c9e:	4965      	ldr	r1, [pc, #404]	; (8005e34 <interrupt_CH395+0x2b4>)
 8005ca0:	e002      	b.n	8005ca8 <interrupt_CH395+0x128>
 8005ca2:	2312      	movs	r3, #18
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	8819      	ldrh	r1, [r3, #0]
 8005ca8:	4a63      	ldr	r2, [pc, #396]	; (8005e38 <interrupt_CH395+0x2b8>)
 8005caa:	2417      	movs	r4, #23
 8005cac:	193b      	adds	r3, r7, r4
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7fd faa5 	bl	8003200 <CH395GetRecvData>
				ch395.buffer[len] = 0; // terminate the recved text stream
 8005cb6:	2312      	movs	r3, #18
 8005cb8:	18fb      	adds	r3, r7, r3
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	4a5a      	ldr	r2, [pc, #360]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005cbe:	18d3      	adds	r3, r2, r3
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	711a      	strb	r2, [r3, #4]
				resetHTTPParseState(pS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f7fd fff8 	bl	8003cbc <resetHTTPParseState>
				pS->sock_index = i;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	1939      	adds	r1, r7, r4
 8005cd0:	236a      	movs	r3, #106	; 0x6a
 8005cd2:	33ff      	adds	r3, #255	; 0xff
 8005cd4:	7809      	ldrb	r1, [r1, #0]
 8005cd6:	54d1      	strb	r1, [r2, r3]
				if(parse_http(pS, ch395.buffer))
 8005cd8:	4a57      	ldr	r2, [pc, #348]	; (8005e38 <interrupt_CH395+0x2b8>)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	0011      	movs	r1, r2
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fe ff7c 	bl	8004bdc <parse_http>
 8005ce4:	1e03      	subs	r3, r0, #0
 8005ce6:	d01a      	beq.n	8005d1e <interrupt_CH395+0x19e>
				{
					ch395.RX_received |= (1 << i); // mark received flag
 8005ce8:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	b25a      	sxtb	r2, r3
 8005cf0:	2317      	movs	r3, #23
 8005cf2:	18fb      	adds	r3, r7, r3
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2101      	movs	r1, #1
 8005cf8:	4099      	lsls	r1, r3
 8005cfa:	000b      	movs	r3, r1
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	b25b      	sxtb	r3, r3
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	4b48      	ldr	r3, [pc, #288]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d06:	705a      	strb	r2, [r3, #1]
					if(ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8005d08:	4b47      	ldr	r3, [pc, #284]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d0a:	789b      	ldrb	r3, [r3, #2]
 8005d0c:	b25b      	sxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	da05      	bge.n	8005d1e <interrupt_CH395+0x19e>
						ch395.SOCK_responding = i;
 8005d12:	2317      	movs	r3, #23
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	2200      	movs	r2, #0
 8005d18:	569a      	ldrsb	r2, [r3, r2]
 8005d1a:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d1c:	709a      	strb	r2, [r3, #2]
				}
				CH395ClearRecvBuf(i);
 8005d1e:	2317      	movs	r3, #23
 8005d20:	18fb      	adds	r3, r7, r3
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	0018      	movs	r0, r3
 8005d26:	f7fd fa4f 	bl	80031c8 <CH395ClearRecvBuf>
			}
			if(sock_int_status & SINT_STAT_CONNECT) // SOCK i connected
 8005d2a:	2311      	movs	r3, #17
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2208      	movs	r2, #8
 8005d32:	4013      	ands	r3, r2
 8005d34:	d01e      	beq.n	8005d74 <interrupt_CH395+0x1f4>
			{
				ch395.socket_connected |= (1 << i);
 8005d36:	4b3c      	ldr	r3, [pc, #240]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	b25a      	sxtb	r2, r3
 8005d3e:	2017      	movs	r0, #23
 8005d40:	183b      	adds	r3, r7, r0
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2101      	movs	r1, #1
 8005d46:	4099      	lsls	r1, r3
 8005d48:	000b      	movs	r3, r1
 8005d4a:	b25b      	sxtb	r3, r3
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	b25b      	sxtb	r3, r3
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	4b35      	ldr	r3, [pc, #212]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d54:	701a      	strb	r2, [r3, #0]
				ch395.TX_available |= (1 << i);
 8005d56:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d58:	78db      	ldrb	r3, [r3, #3]
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	b25a      	sxtb	r2, r3
 8005d5e:	183b      	adds	r3, r7, r0
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	2101      	movs	r1, #1
 8005d64:	4099      	lsls	r1, r3
 8005d66:	000b      	movs	r3, r1
 8005d68:	b25b      	sxtb	r3, r3
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d72:	70da      	strb	r2, [r3, #3]
			}
			if(sock_int_status & SINT_STAT_DISCONNECT) // SOCK i disconnected
 8005d74:	2311      	movs	r3, #17
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	d03c      	beq.n	8005dfa <interrupt_CH395+0x27a>
			{
				ch395.socket_connected &= ~(1<<i);
 8005d80:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	b25b      	sxtb	r3, r3
 8005d88:	2017      	movs	r0, #23
 8005d8a:	183a      	adds	r2, r7, r0
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4091      	lsls	r1, r2
 8005d92:	000a      	movs	r2, r1
 8005d94:	b252      	sxtb	r2, r2
 8005d96:	43d2      	mvns	r2, r2
 8005d98:	b252      	sxtb	r2, r2
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005da2:	701a      	strb	r2, [r3, #0]
				ch395.RX_received &= ~(1<<i);
 8005da4:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	183a      	adds	r2, r7, r0
 8005dae:	7812      	ldrb	r2, [r2, #0]
 8005db0:	2101      	movs	r1, #1
 8005db2:	4091      	lsls	r1, r2
 8005db4:	000a      	movs	r2, r1
 8005db6:	b252      	sxtb	r2, r2
 8005db8:	43d2      	mvns	r2, r2
 8005dba:	b252      	sxtb	r2, r2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4b19      	ldr	r3, [pc, #100]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005dc4:	705a      	strb	r2, [r3, #1]
				ch395.TX_available |= (1 << i);
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	b25a      	sxtb	r2, r3
 8005dce:	183b      	adds	r3, r7, r0
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	4099      	lsls	r1, r3
 8005dd6:	000b      	movs	r3, r1
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	b25b      	sxtb	r3, r3
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005de2:	70da      	strb	r2, [r3, #3]
				if(ch395.SOCK_responding == i) ch395.SOCK_responding = -1; // release the responding socket flag
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005de6:	789b      	ldrb	r3, [r3, #2]
 8005de8:	b25b      	sxtb	r3, r3
 8005dea:	001a      	movs	r2, r3
 8005dec:	183b      	adds	r3, r7, r0
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d102      	bne.n	8005dfa <interrupt_CH395+0x27a>
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <interrupt_CH395+0x2a8>)
 8005df6:	22ff      	movs	r2, #255	; 0xff
 8005df8:	709a      	strb	r2, [r3, #2]
	for(i=1; i<NUM_SOCKETS; ++i)
 8005dfa:	2217      	movs	r2, #23
 8005dfc:	18bb      	adds	r3, r7, r2
 8005dfe:	18ba      	adds	r2, r7, r2
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	3201      	adds	r2, #1
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	2317      	movs	r3, #23
 8005e08:	18fb      	adds	r3, r7, r3
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d800      	bhi.n	8005e12 <interrupt_CH395+0x292>
 8005e10:	e6f6      	b.n	8005c00 <interrupt_CH395+0x80>
//				Delay_ms(100);
//				goto END_INT_CH395;
//			}
		}
	}
	END_INT_CH395:
 8005e12:	e000      	b.n	8005e16 <interrupt_CH395+0x296>
	if(!glob_int_status) goto END_INT_CH395;
 8005e14:	46c0      	nop			; (mov r8, r8)
	return;
 8005e16:	46c0      	nop			; (mov r8, r8)
//	if(HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin) == GPIO_PIN_RESET) goto BEGIN_INT_CH395;
}
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b006      	add	sp, #24
 8005e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	20001532 	.word	0x20001532
 8005e24:	20001530 	.word	0x20001530
 8005e28:	20000000 	.word	0x20000000
 8005e2c:	20000980 	.word	0x20000980
 8005e30:	000007fe 	.word	0x000007fe
 8005e34:	000007ff 	.word	0x000007ff
 8005e38:	20000004 	.word	0x20000004

08005e3c <switch_Antenna>:

void switch_Antenna(uint8_t A, uint8_t B)
{
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	b08b      	sub	sp, #44	; 0x2c
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	0002      	movs	r2, r0
 8005e44:	1dfb      	adds	r3, r7, #7
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	1dbb      	adds	r3, r7, #6
 8005e4a:	1c0a      	adds	r2, r1, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	Selector[0].sel = A;
 8005e4e:	4b46      	ldr	r3, [pc, #280]	; (8005f68 <switch_Antenna+0x12c>)
 8005e50:	1dfa      	adds	r2, r7, #7
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	761a      	strb	r2, [r3, #24]
	Selector[1].sel = B;
 8005e56:	4b44      	ldr	r3, [pc, #272]	; (8005f68 <switch_Antenna+0x12c>)
 8005e58:	1dba      	adds	r2, r7, #6
 8005e5a:	2134      	movs	r1, #52	; 0x34
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	545a      	strb	r2, [r3, r1]
	if(A==B && A>0) return;
 8005e60:	1dfa      	adds	r2, r7, #7
 8005e62:	1dbb      	adds	r3, r7, #6
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d103      	bne.n	8005e74 <switch_Antenna+0x38>
 8005e6c:	1dfb      	adds	r3, r7, #7
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d175      	bne.n	8005f60 <switch_Antenna+0x124>
	for(i=0; i<N_SELECTORS; ++i)
 8005e74:	2327      	movs	r3, #39	; 0x27
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	e06a      	b.n	8005f54 <switch_Antenna+0x118>
	{
		PIN_typedef pin0 = Selector[i].PIN_BCD0;
 8005e7e:	2527      	movs	r5, #39	; 0x27
 8005e80:	197b      	adds	r3, r7, r5
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	261c      	movs	r6, #28
 8005e86:	19b8      	adds	r0, r7, r6
 8005e88:	4937      	ldr	r1, [pc, #220]	; (8005f68 <switch_Antenna+0x12c>)
 8005e8a:	0013      	movs	r3, r2
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	0002      	movs	r2, r0
 8005e94:	18cb      	adds	r3, r1, r3
 8005e96:	cb03      	ldmia	r3!, {r0, r1}
 8005e98:	c203      	stmia	r2!, {r0, r1}
		PIN_typedef pin1 = Selector[i].PIN_BCD1;
 8005e9a:	197b      	adds	r3, r7, r5
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	2314      	movs	r3, #20
 8005ea0:	18fc      	adds	r4, r7, r3
 8005ea2:	4931      	ldr	r1, [pc, #196]	; (8005f68 <switch_Antenna+0x12c>)
 8005ea4:	2008      	movs	r0, #8
 8005ea6:	0013      	movs	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	1a9b      	subs	r3, r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	18cb      	adds	r3, r1, r3
 8005eb0:	181a      	adds	r2, r3, r0
 8005eb2:	0023      	movs	r3, r4
 8005eb4:	ca03      	ldmia	r2!, {r0, r1}
 8005eb6:	c303      	stmia	r3!, {r0, r1}
		PIN_typedef pin2 = Selector[i].PIN_BCD2;
 8005eb8:	197b      	adds	r3, r7, r5
 8005eba:	781a      	ldrb	r2, [r3, #0]
 8005ebc:	210c      	movs	r1, #12
 8005ebe:	187c      	adds	r4, r7, r1
 8005ec0:	4929      	ldr	r1, [pc, #164]	; (8005f68 <switch_Antenna+0x12c>)
 8005ec2:	2010      	movs	r0, #16
 8005ec4:	0013      	movs	r3, r2
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	18cb      	adds	r3, r1, r3
 8005ece:	181a      	adds	r2, r3, r0
 8005ed0:	0023      	movs	r3, r4
 8005ed2:	ca11      	ldmia	r2!, {r0, r4}
 8005ed4:	c311      	stmia	r3!, {r0, r4}
		uint8_t val = ~Selector[i].sel;
 8005ed6:	002c      	movs	r4, r5
 8005ed8:	193b      	adds	r3, r7, r4
 8005eda:	781a      	ldrb	r2, [r3, #0]
 8005edc:	4922      	ldr	r1, [pc, #136]	; (8005f68 <switch_Antenna+0x12c>)
 8005ede:	0013      	movs	r3, r2
 8005ee0:	00db      	lsls	r3, r3, #3
 8005ee2:	1a9b      	subs	r3, r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	18cb      	adds	r3, r1, r3
 8005ee8:	3318      	adds	r3, #24
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	2526      	movs	r5, #38	; 0x26
 8005eee:	197b      	adds	r3, r7, r5
 8005ef0:	43d2      	mvns	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(pin0.group, pin0.pin, val & 1);
 8005ef4:	19bb      	adds	r3, r7, r6
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	19bb      	adds	r3, r7, r6
 8005efa:	8899      	ldrh	r1, [r3, #4]
 8005efc:	197b      	adds	r3, r7, r5
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2201      	movs	r2, #1
 8005f02:	4013      	ands	r3, r2
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	001a      	movs	r2, r3
 8005f08:	f7fa fe29 	bl	8000b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin1.group, pin1.pin, (val >> 1) & 1);
 8005f0c:	2314      	movs	r3, #20
 8005f0e:	001a      	movs	r2, r3
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	18bb      	adds	r3, r7, r2
 8005f16:	8899      	ldrh	r1, [r3, #4]
 8005f18:	197b      	adds	r3, r7, r5
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2201      	movs	r2, #1
 8005f22:	4013      	ands	r3, r2
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	001a      	movs	r2, r3
 8005f28:	f7fa fe19 	bl	8000b5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(pin2.group, pin2.pin, (val >> 2) & 1);
 8005f2c:	220c      	movs	r2, #12
 8005f2e:	18bb      	adds	r3, r7, r2
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	18bb      	adds	r3, r7, r2
 8005f34:	8899      	ldrh	r1, [r3, #4]
 8005f36:	197b      	adds	r3, r7, r5
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4013      	ands	r3, r2
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	001a      	movs	r2, r3
 8005f46:	f7fa fe0a 	bl	8000b5e <HAL_GPIO_WritePin>
	for(i=0; i<N_SELECTORS; ++i)
 8005f4a:	193b      	adds	r3, r7, r4
 8005f4c:	193a      	adds	r2, r7, r4
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	3201      	adds	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
 8005f54:	2327      	movs	r3, #39	; 0x27
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d98f      	bls.n	8005e7e <switch_Antenna+0x42>
 8005f5e:	e000      	b.n	8005f62 <switch_Antenna+0x126>
	if(A==B && A>0) return;
 8005f60:	46c0      	nop			; (mov r8, r8)
	}
}
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b00b      	add	sp, #44	; 0x2c
 8005f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f68:	2000185c 	.word	0x2000185c

08005f6c <get_Antenna>:

uint8_t get_Antenna() //3-0:SEL1[2:0] 7-4:SEL2[2:0] GPIOs are Low Effective
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 8005f72:	1dfb      	adds	r3, r7, #7
 8005f74:	2200      	movs	r2, #0
 8005f76:	701a      	strb	r2, [r3, #0]
	res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
	res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
	res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
	res |= ((d >> BCDM2_2) & 1) << 6;// bit 1: BCDM1_1
#else
	res |= !HAL_GPIO_ReadPin(BCDM1_0_GPIO_Port, BCDM1_0_Pin); // BCDM1[0]
 8005f78:	2380      	movs	r3, #128	; 0x80
 8005f7a:	009a      	lsls	r2, r3, #2
 8005f7c:	2390      	movs	r3, #144	; 0x90
 8005f7e:	05db      	lsls	r3, r3, #23
 8005f80:	0011      	movs	r1, r2
 8005f82:	0018      	movs	r0, r3
 8005f84:	f7fa fdce 	bl	8000b24 <HAL_GPIO_ReadPin>
 8005f88:	0003      	movs	r3, r0
 8005f8a:	425a      	negs	r2, r3
 8005f8c:	4153      	adcs	r3, r2
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	b25a      	sxtb	r2, r3
 8005f92:	1dfb      	adds	r3, r7, #7
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	b25a      	sxtb	r2, r3
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	701a      	strb	r2, [r3, #0]
	res |= !HAL_GPIO_ReadPin(BCDM1_1_GPIO_Port, BCDM1_1_Pin) << 1; // BCDM1[1]
 8005fa0:	2380      	movs	r3, #128	; 0x80
 8005fa2:	005a      	lsls	r2, r3, #1
 8005fa4:	2390      	movs	r3, #144	; 0x90
 8005fa6:	05db      	lsls	r3, r3, #23
 8005fa8:	0011      	movs	r1, r2
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7fa fdba 	bl	8000b24 <HAL_GPIO_ReadPin>
 8005fb0:	1e03      	subs	r3, r0, #0
 8005fb2:	d101      	bne.n	8005fb8 <get_Antenna+0x4c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e000      	b.n	8005fba <get_Antenna+0x4e>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	b25a      	sxtb	r2, r3
 8005fbc:	1dfb      	adds	r3, r7, #7
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	b25b      	sxtb	r3, r3
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	b25a      	sxtb	r2, r3
 8005fc6:	1dfb      	adds	r3, r7, #7
 8005fc8:	701a      	strb	r2, [r3, #0]
	res |= !HAL_GPIO_ReadPin(BCDM1_2_GPIO_Port, BCDM1_2_Pin) << 2; // BCDM1[2]
 8005fca:	2380      	movs	r3, #128	; 0x80
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	4a2a      	ldr	r2, [pc, #168]	; (8006078 <get_Antenna+0x10c>)
 8005fd0:	0019      	movs	r1, r3
 8005fd2:	0010      	movs	r0, r2
 8005fd4:	f7fa fda6 	bl	8000b24 <HAL_GPIO_ReadPin>
 8005fd8:	1e03      	subs	r3, r0, #0
 8005fda:	d101      	bne.n	8005fe0 <get_Antenna+0x74>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	e000      	b.n	8005fe2 <get_Antenna+0x76>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	b25a      	sxtb	r2, r3
 8005fe4:	1dfb      	adds	r3, r7, #7
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	b25b      	sxtb	r3, r3
 8005fea:	4313      	orrs	r3, r2
 8005fec:	b25a      	sxtb	r2, r3
 8005fee:	1dfb      	adds	r3, r7, #7
 8005ff0:	701a      	strb	r2, [r3, #0]
	res |= !HAL_GPIO_ReadPin(BCDM2_0_GPIO_Port, BCDM2_0_Pin) << 4; // BCDM2[0]
 8005ff2:	2380      	movs	r3, #128	; 0x80
 8005ff4:	01db      	lsls	r3, r3, #7
 8005ff6:	4a20      	ldr	r2, [pc, #128]	; (8006078 <get_Antenna+0x10c>)
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	0010      	movs	r0, r2
 8005ffc:	f7fa fd92 	bl	8000b24 <HAL_GPIO_ReadPin>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d101      	bne.n	8006008 <get_Antenna+0x9c>
 8006004:	2310      	movs	r3, #16
 8006006:	e000      	b.n	800600a <get_Antenna+0x9e>
 8006008:	2300      	movs	r3, #0
 800600a:	b25a      	sxtb	r2, r3
 800600c:	1dfb      	adds	r3, r7, #7
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	b25b      	sxtb	r3, r3
 8006012:	4313      	orrs	r3, r2
 8006014:	b25a      	sxtb	r2, r3
 8006016:	1dfb      	adds	r3, r7, #7
 8006018:	701a      	strb	r2, [r3, #0]
	res |= !HAL_GPIO_ReadPin(BCDM2_1_GPIO_Port, BCDM2_1_Pin) << 5; // BCDM2[1]
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	019b      	lsls	r3, r3, #6
 800601e:	4a16      	ldr	r2, [pc, #88]	; (8006078 <get_Antenna+0x10c>)
 8006020:	0019      	movs	r1, r3
 8006022:	0010      	movs	r0, r2
 8006024:	f7fa fd7e 	bl	8000b24 <HAL_GPIO_ReadPin>
 8006028:	1e03      	subs	r3, r0, #0
 800602a:	d101      	bne.n	8006030 <get_Antenna+0xc4>
 800602c:	2320      	movs	r3, #32
 800602e:	e000      	b.n	8006032 <get_Antenna+0xc6>
 8006030:	2300      	movs	r3, #0
 8006032:	b25a      	sxtb	r2, r3
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b25b      	sxtb	r3, r3
 800603a:	4313      	orrs	r3, r2
 800603c:	b25a      	sxtb	r2, r3
 800603e:	1dfb      	adds	r3, r7, #7
 8006040:	701a      	strb	r2, [r3, #0]
	res |= !HAL_GPIO_ReadPin(BCDM2_2_GPIO_Port, BCDM2_2_Pin) << 6; // BCDM2[2]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	015b      	lsls	r3, r3, #5
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <get_Antenna+0x10c>)
 8006048:	0019      	movs	r1, r3
 800604a:	0010      	movs	r0, r2
 800604c:	f7fa fd6a 	bl	8000b24 <HAL_GPIO_ReadPin>
 8006050:	1e03      	subs	r3, r0, #0
 8006052:	d101      	bne.n	8006058 <get_Antenna+0xec>
 8006054:	2340      	movs	r3, #64	; 0x40
 8006056:	e000      	b.n	800605a <get_Antenna+0xee>
 8006058:	2300      	movs	r3, #0
 800605a:	b25a      	sxtb	r2, r3
 800605c:	1dfb      	adds	r3, r7, #7
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	b25b      	sxtb	r3, r3
 8006062:	4313      	orrs	r3, r2
 8006064:	b25a      	sxtb	r2, r3
 8006066:	1dfb      	adds	r3, r7, #7
 8006068:	701a      	strb	r2, [r3, #0]
#endif
	return res;
 800606a:	1dfb      	adds	r3, r7, #7
 800606c:	781b      	ldrb	r3, [r3, #0]
}
 800606e:	0018      	movs	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	b002      	add	sp, #8
 8006074:	bd80      	pop	{r7, pc}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	48000400 	.word	0x48000400

0800607c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006080:	46c0      	nop			; (mov r8, r8)
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <HAL_MspInit+0x44>)
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_MspInit+0x44>)
 8006094:	2101      	movs	r1, #1
 8006096:	430a      	orrs	r2, r1
 8006098:	619a      	str	r2, [r3, #24]
 800609a:	4b0c      	ldr	r3, [pc, #48]	; (80060cc <HAL_MspInit+0x44>)
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	2201      	movs	r2, #1
 80060a0:	4013      	ands	r3, r2
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <HAL_MspInit+0x44>)
 80060a8:	69da      	ldr	r2, [r3, #28]
 80060aa:	4b08      	ldr	r3, [pc, #32]	; (80060cc <HAL_MspInit+0x44>)
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	0549      	lsls	r1, r1, #21
 80060b0:	430a      	orrs	r2, r1
 80060b2:	61da      	str	r2, [r3, #28]
 80060b4:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_MspInit+0x44>)
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	055b      	lsls	r3, r3, #21
 80060bc:	4013      	ands	r3, r2
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	46bd      	mov	sp, r7
 80060c6:	b002      	add	sp, #8
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	40021000 	.word	0x40021000

080060d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d8:	2314      	movs	r3, #20
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	0018      	movs	r0, r3
 80060de:	2314      	movs	r3, #20
 80060e0:	001a      	movs	r2, r3
 80060e2:	2100      	movs	r1, #0
 80060e4:	f000 f979 	bl	80063da <memset>
  if(hspi->Instance==SPI1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_SPI_MspInit+0x90>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d132      	bne.n	8006158 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80060f2:	4b1c      	ldr	r3, [pc, #112]	; (8006164 <HAL_SPI_MspInit+0x94>)
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	4b1b      	ldr	r3, [pc, #108]	; (8006164 <HAL_SPI_MspInit+0x94>)
 80060f8:	2180      	movs	r1, #128	; 0x80
 80060fa:	0149      	lsls	r1, r1, #5
 80060fc:	430a      	orrs	r2, r1
 80060fe:	619a      	str	r2, [r3, #24]
 8006100:	4b18      	ldr	r3, [pc, #96]	; (8006164 <HAL_SPI_MspInit+0x94>)
 8006102:	699a      	ldr	r2, [r3, #24]
 8006104:	2380      	movs	r3, #128	; 0x80
 8006106:	015b      	lsls	r3, r3, #5
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <HAL_SPI_MspInit+0x94>)
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	4b14      	ldr	r3, [pc, #80]	; (8006164 <HAL_SPI_MspInit+0x94>)
 8006114:	2180      	movs	r1, #128	; 0x80
 8006116:	0289      	lsls	r1, r1, #10
 8006118:	430a      	orrs	r2, r1
 800611a:	615a      	str	r2, [r3, #20]
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <HAL_SPI_MspInit+0x94>)
 800611e:	695a      	ldr	r2, [r3, #20]
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	029b      	lsls	r3, r3, #10
 8006124:	4013      	ands	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800612a:	2114      	movs	r1, #20
 800612c:	187b      	adds	r3, r7, r1
 800612e:	22e0      	movs	r2, #224	; 0xe0
 8006130:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006132:	187b      	adds	r3, r7, r1
 8006134:	2202      	movs	r2, #2
 8006136:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006138:	187b      	adds	r3, r7, r1
 800613a:	2201      	movs	r2, #1
 800613c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800613e:	187b      	adds	r3, r7, r1
 8006140:	2203      	movs	r2, #3
 8006142:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006144:	187b      	adds	r3, r7, r1
 8006146:	2200      	movs	r2, #0
 8006148:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800614a:	187a      	adds	r2, r7, r1
 800614c:	2390      	movs	r3, #144	; 0x90
 800614e:	05db      	lsls	r3, r3, #23
 8006150:	0011      	movs	r1, r2
 8006152:	0018      	movs	r0, r3
 8006154:	f7fa fb72 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006158:	46c0      	nop			; (mov r8, r8)
 800615a:	46bd      	mov	sp, r7
 800615c:	b00a      	add	sp, #40	; 0x28
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40013000 	.word	0x40013000
 8006164:	40021000 	.word	0x40021000

08006168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006170:	2314      	movs	r3, #20
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	0018      	movs	r0, r3
 8006176:	2314      	movs	r3, #20
 8006178:	001a      	movs	r2, r3
 800617a:	2100      	movs	r1, #0
 800617c:	f000 f92d 	bl	80063da <memset>
  if(huart->Instance==USART2)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <HAL_UART_MspInit+0x90>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d132      	bne.n	80061f0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800618a:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <HAL_UART_MspInit+0x94>)
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <HAL_UART_MspInit+0x94>)
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	0289      	lsls	r1, r1, #10
 8006194:	430a      	orrs	r2, r1
 8006196:	61da      	str	r2, [r3, #28]
 8006198:	4b18      	ldr	r3, [pc, #96]	; (80061fc <HAL_UART_MspInit+0x94>)
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	2380      	movs	r3, #128	; 0x80
 800619e:	029b      	lsls	r3, r3, #10
 80061a0:	4013      	ands	r3, r2
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061a6:	4b15      	ldr	r3, [pc, #84]	; (80061fc <HAL_UART_MspInit+0x94>)
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	4b14      	ldr	r3, [pc, #80]	; (80061fc <HAL_UART_MspInit+0x94>)
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	0289      	lsls	r1, r1, #10
 80061b0:	430a      	orrs	r2, r1
 80061b2:	615a      	str	r2, [r3, #20]
 80061b4:	4b11      	ldr	r3, [pc, #68]	; (80061fc <HAL_UART_MspInit+0x94>)
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	2380      	movs	r3, #128	; 0x80
 80061ba:	029b      	lsls	r3, r3, #10
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
 80061c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80061c2:	2114      	movs	r1, #20
 80061c4:	187b      	adds	r3, r7, r1
 80061c6:	220c      	movs	r2, #12
 80061c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	187b      	adds	r3, r7, r1
 80061cc:	2202      	movs	r2, #2
 80061ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80061d0:	187b      	adds	r3, r7, r1
 80061d2:	2201      	movs	r2, #1
 80061d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80061d6:	187b      	adds	r3, r7, r1
 80061d8:	2203      	movs	r2, #3
 80061da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80061dc:	187b      	adds	r3, r7, r1
 80061de:	2201      	movs	r2, #1
 80061e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061e2:	187a      	adds	r2, r7, r1
 80061e4:	2390      	movs	r3, #144	; 0x90
 80061e6:	05db      	lsls	r3, r3, #23
 80061e8:	0011      	movs	r1, r2
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7fa fb26 	bl	800083c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80061f0:	46c0      	nop			; (mov r8, r8)
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b00a      	add	sp, #40	; 0x28
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40004400 	.word	0x40004400
 80061fc:	40021000 	.word	0x40021000

08006200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006204:	46c0      	nop			; (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800620e:	e7fe      	b.n	800620e <HardFault_Handler+0x4>

08006210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006228:	f7fa f83c 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  handle_serial485(p485);
 800622c:	4b03      	ldr	r3, [pc, #12]	; (800623c <SysTick_Handler+0x18>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	0018      	movs	r0, r3
 8006232:	f7ff f83d 	bl	80052b0 <handle_serial485>

  /* USER CODE END SysTick_IRQn 1 */
}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	2000084c 	.word	0x2000084c

08006240 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <_sbrk+0x50>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <_sbrk+0x16>
		heap_end = &end;
 8006250:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <_sbrk+0x50>)
 8006252:	4a10      	ldr	r2, [pc, #64]	; (8006294 <_sbrk+0x54>)
 8006254:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006256:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <_sbrk+0x50>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800625c:	4b0c      	ldr	r3, [pc, #48]	; (8006290 <_sbrk+0x50>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	18d3      	adds	r3, r2, r3
 8006264:	466a      	mov	r2, sp
 8006266:	4293      	cmp	r3, r2
 8006268:	d907      	bls.n	800627a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800626a:	f000 f883 	bl	8006374 <__errno>
 800626e:	0003      	movs	r3, r0
 8006270:	220c      	movs	r2, #12
 8006272:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006274:	2301      	movs	r3, #1
 8006276:	425b      	negs	r3, r3
 8006278:	e006      	b.n	8006288 <_sbrk+0x48>
	}

	heap_end += incr;
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <_sbrk+0x50>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	18d2      	adds	r2, r2, r3
 8006282:	4b03      	ldr	r3, [pc, #12]	; (8006290 <_sbrk+0x50>)
 8006284:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006286:	68fb      	ldr	r3, [r7, #12]
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b004      	add	sp, #16
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20001534 	.word	0x20001534
 8006294:	20001970 	.word	0x20001970

08006298 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800629c:	4b1a      	ldr	r3, [pc, #104]	; (8006308 <SystemInit+0x70>)
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4b19      	ldr	r3, [pc, #100]	; (8006308 <SystemInit+0x70>)
 80062a2:	2101      	movs	r1, #1
 80062a4:	430a      	orrs	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80062a8:	4b17      	ldr	r3, [pc, #92]	; (8006308 <SystemInit+0x70>)
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <SystemInit+0x70>)
 80062ae:	4917      	ldr	r1, [pc, #92]	; (800630c <SystemInit+0x74>)
 80062b0:	400a      	ands	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80062b4:	4b14      	ldr	r3, [pc, #80]	; (8006308 <SystemInit+0x70>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <SystemInit+0x70>)
 80062ba:	4915      	ldr	r1, [pc, #84]	; (8006310 <SystemInit+0x78>)
 80062bc:	400a      	ands	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80062c0:	4b11      	ldr	r3, [pc, #68]	; (8006308 <SystemInit+0x70>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b10      	ldr	r3, [pc, #64]	; (8006308 <SystemInit+0x70>)
 80062c6:	4913      	ldr	r1, [pc, #76]	; (8006314 <SystemInit+0x7c>)
 80062c8:	400a      	ands	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80062cc:	4b0e      	ldr	r3, [pc, #56]	; (8006308 <SystemInit+0x70>)
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b0d      	ldr	r3, [pc, #52]	; (8006308 <SystemInit+0x70>)
 80062d2:	4911      	ldr	r1, [pc, #68]	; (8006318 <SystemInit+0x80>)
 80062d4:	400a      	ands	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <SystemInit+0x70>)
 80062da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <SystemInit+0x70>)
 80062de:	210f      	movs	r1, #15
 80062e0:	438a      	bics	r2, r1
 80062e2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80062e4:	4b08      	ldr	r3, [pc, #32]	; (8006308 <SystemInit+0x70>)
 80062e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <SystemInit+0x70>)
 80062ea:	490c      	ldr	r1, [pc, #48]	; (800631c <SystemInit+0x84>)
 80062ec:	400a      	ands	r2, r1
 80062ee:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80062f0:	4b05      	ldr	r3, [pc, #20]	; (8006308 <SystemInit+0x70>)
 80062f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <SystemInit+0x70>)
 80062f6:	2101      	movs	r1, #1
 80062f8:	438a      	bics	r2, r1
 80062fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80062fc:	4b02      	ldr	r3, [pc, #8]	; (8006308 <SystemInit+0x70>)
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]

}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40021000 	.word	0x40021000
 800630c:	08ffb80c 	.word	0x08ffb80c
 8006310:	fef6ffff 	.word	0xfef6ffff
 8006314:	fffbffff 	.word	0xfffbffff
 8006318:	ffc0ffff 	.word	0xffc0ffff
 800631c:	fffffeec 	.word	0xfffffeec

08006320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006320:	480d      	ldr	r0, [pc, #52]	; (8006358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006322:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006324:	480d      	ldr	r0, [pc, #52]	; (800635c <LoopForever+0x6>)
  ldr r1, =_edata
 8006326:	490e      	ldr	r1, [pc, #56]	; (8006360 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006328:	4a0e      	ldr	r2, [pc, #56]	; (8006364 <LoopForever+0xe>)
  movs r3, #0
 800632a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800632c:	e002      	b.n	8006334 <LoopCopyDataInit>

0800632e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800632e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006332:	3304      	adds	r3, #4

08006334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006338:	d3f9      	bcc.n	800632e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800633a:	4a0b      	ldr	r2, [pc, #44]	; (8006368 <LoopForever+0x12>)
  ldr r4, =_ebss
 800633c:	4c0b      	ldr	r4, [pc, #44]	; (800636c <LoopForever+0x16>)
  movs r3, #0
 800633e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006340:	e001      	b.n	8006346 <LoopFillZerobss>

08006342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006344:	3204      	adds	r2, #4

08006346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006348:	d3fb      	bcc.n	8006342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800634a:	f7ff ffa5 	bl	8006298 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800634e:	f000 f817 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006352:	f7ff f91b 	bl	800558c <main>

08006356 <LoopForever>:

LoopForever:
    b LoopForever
 8006356:	e7fe      	b.n	8006356 <LoopForever>
  ldr   r0, =_estack
 8006358:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 800635c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006360:	200008d8 	.word	0x200008d8
  ldr r2, =_sidata
 8006364:	08006a44 	.word	0x08006a44
  ldr r2, =_sbss
 8006368:	200008d8 	.word	0x200008d8
  ldr r4, =_ebss
 800636c:	2000196c 	.word	0x2000196c

08006370 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006370:	e7fe      	b.n	8006370 <ADC1_IRQHandler>
	...

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	; (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	20000874 	.word	0x20000874

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	2600      	movs	r6, #0
 8006384:	4d0c      	ldr	r5, [pc, #48]	; (80063b8 <__libc_init_array+0x38>)
 8006386:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006388:	1b64      	subs	r4, r4, r5
 800638a:	10a4      	asrs	r4, r4, #2
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	2600      	movs	r6, #0
 8006392:	f000 f9d7 	bl	8006744 <_init>
 8006396:	4d0a      	ldr	r5, [pc, #40]	; (80063c0 <__libc_init_array+0x40>)
 8006398:	4c0a      	ldr	r4, [pc, #40]	; (80063c4 <__libc_init_array+0x44>)
 800639a:	1b64      	subs	r4, r4, r5
 800639c:	10a4      	asrs	r4, r4, #2
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	00b3      	lsls	r3, r6, #2
 80063a6:	58eb      	ldr	r3, [r5, r3]
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	00b3      	lsls	r3, r6, #2
 80063b0:	58eb      	ldr	r3, [r5, r3]
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006a3c 	.word	0x08006a3c
 80063bc:	08006a3c 	.word	0x08006a3c
 80063c0:	08006a3c 	.word	0x08006a3c
 80063c4:	08006a40 	.word	0x08006a40

080063c8 <memcpy>:
 80063c8:	2300      	movs	r3, #0
 80063ca:	b510      	push	{r4, lr}
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d100      	bne.n	80063d2 <memcpy+0xa>
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	5ccc      	ldrb	r4, [r1, r3]
 80063d4:	54c4      	strb	r4, [r0, r3]
 80063d6:	3301      	adds	r3, #1
 80063d8:	e7f8      	b.n	80063cc <memcpy+0x4>

080063da <memset>:
 80063da:	0003      	movs	r3, r0
 80063dc:	1812      	adds	r2, r2, r0
 80063de:	4293      	cmp	r3, r2
 80063e0:	d100      	bne.n	80063e4 <memset+0xa>
 80063e2:	4770      	bx	lr
 80063e4:	7019      	strb	r1, [r3, #0]
 80063e6:	3301      	adds	r3, #1
 80063e8:	e7f9      	b.n	80063de <memset+0x4>

080063ea <strcat>:
 80063ea:	0002      	movs	r2, r0
 80063ec:	b510      	push	{r4, lr}
 80063ee:	7813      	ldrb	r3, [r2, #0]
 80063f0:	1c54      	adds	r4, r2, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d105      	bne.n	8006402 <strcat+0x18>
 80063f6:	5ccc      	ldrb	r4, [r1, r3]
 80063f8:	54d4      	strb	r4, [r2, r3]
 80063fa:	3301      	adds	r3, #1
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	d1fa      	bne.n	80063f6 <strcat+0xc>
 8006400:	bd10      	pop	{r4, pc}
 8006402:	0022      	movs	r2, r4
 8006404:	e7f3      	b.n	80063ee <strcat+0x4>

08006406 <strchr>:
 8006406:	b2c9      	uxtb	r1, r1
 8006408:	7803      	ldrb	r3, [r0, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <strchr+0x12>
 800640e:	428b      	cmp	r3, r1
 8006410:	d100      	bne.n	8006414 <strchr+0xe>
 8006412:	4770      	bx	lr
 8006414:	3001      	adds	r0, #1
 8006416:	e7f7      	b.n	8006408 <strchr+0x2>
 8006418:	424b      	negs	r3, r1
 800641a:	4159      	adcs	r1, r3
 800641c:	4249      	negs	r1, r1
 800641e:	4008      	ands	r0, r1
 8006420:	e7f7      	b.n	8006412 <strchr+0xc>

08006422 <strcpy>:
 8006422:	0003      	movs	r3, r0
 8006424:	780a      	ldrb	r2, [r1, #0]
 8006426:	3101      	adds	r1, #1
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	3301      	adds	r3, #1
 800642c:	2a00      	cmp	r2, #0
 800642e:	d1f9      	bne.n	8006424 <strcpy+0x2>
 8006430:	4770      	bx	lr

08006432 <strncat>:
 8006432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006434:	0004      	movs	r4, r0
 8006436:	7823      	ldrb	r3, [r4, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <strncat+0x1c>
 800643c:	001f      	movs	r7, r3
 800643e:	1e56      	subs	r6, r2, #1
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <strncat+0x1a>
 8006444:	5ccd      	ldrb	r5, [r1, r3]
 8006446:	54e5      	strb	r5, [r4, r3]
 8006448:	2d00      	cmp	r5, #0
 800644a:	d102      	bne.n	8006452 <strncat+0x20>
 800644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800644e:	3401      	adds	r4, #1
 8006450:	e7f1      	b.n	8006436 <strncat+0x4>
 8006452:	429e      	cmp	r6, r3
 8006454:	d101      	bne.n	800645a <strncat+0x28>
 8006456:	19a5      	adds	r5, r4, r6
 8006458:	706f      	strb	r7, [r5, #1]
 800645a:	3301      	adds	r3, #1
 800645c:	e7f0      	b.n	8006440 <strncat+0xe>

0800645e <strncmp>:
 800645e:	2300      	movs	r3, #0
 8006460:	b530      	push	{r4, r5, lr}
 8006462:	429a      	cmp	r2, r3
 8006464:	d00a      	beq.n	800647c <strncmp+0x1e>
 8006466:	3a01      	subs	r2, #1
 8006468:	5cc4      	ldrb	r4, [r0, r3]
 800646a:	5ccd      	ldrb	r5, [r1, r3]
 800646c:	42ac      	cmp	r4, r5
 800646e:	d104      	bne.n	800647a <strncmp+0x1c>
 8006470:	4293      	cmp	r3, r2
 8006472:	d002      	beq.n	800647a <strncmp+0x1c>
 8006474:	3301      	adds	r3, #1
 8006476:	2c00      	cmp	r4, #0
 8006478:	d1f6      	bne.n	8006468 <strncmp+0xa>
 800647a:	1b63      	subs	r3, r4, r5
 800647c:	0018      	movs	r0, r3
 800647e:	bd30      	pop	{r4, r5, pc}

08006480 <strncpy>:
 8006480:	b530      	push	{r4, r5, lr}
 8006482:	0005      	movs	r5, r0
 8006484:	2a00      	cmp	r2, #0
 8006486:	d100      	bne.n	800648a <strncpy+0xa>
 8006488:	bd30      	pop	{r4, r5, pc}
 800648a:	780c      	ldrb	r4, [r1, #0]
 800648c:	3a01      	subs	r2, #1
 800648e:	1c6b      	adds	r3, r5, #1
 8006490:	702c      	strb	r4, [r5, #0]
 8006492:	3101      	adds	r1, #1
 8006494:	2c00      	cmp	r4, #0
 8006496:	d105      	bne.n	80064a4 <strncpy+0x24>
 8006498:	189a      	adds	r2, r3, r2
 800649a:	429a      	cmp	r2, r3
 800649c:	d0f4      	beq.n	8006488 <strncpy+0x8>
 800649e:	701c      	strb	r4, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	e7fa      	b.n	800649a <strncpy+0x1a>
 80064a4:	001d      	movs	r5, r3
 80064a6:	e7ed      	b.n	8006484 <strncpy+0x4>

080064a8 <strnstr>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	000e      	movs	r6, r1
 80064ac:	0005      	movs	r5, r0
 80064ae:	0011      	movs	r1, r2
 80064b0:	0030      	movs	r0, r6
 80064b2:	0014      	movs	r4, r2
 80064b4:	f000 f92a 	bl	800670c <strnlen>
 80064b8:	0003      	movs	r3, r0
 80064ba:	4284      	cmp	r4, r0
 80064bc:	d802      	bhi.n	80064c4 <strnstr+0x1c>
 80064be:	5c32      	ldrb	r2, [r6, r0]
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	d10d      	bne.n	80064e0 <strnstr+0x38>
 80064c4:	0021      	movs	r1, r4
 80064c6:	0032      	movs	r2, r6
 80064c8:	0028      	movs	r0, r5
 80064ca:	f000 f894 	bl	80065f6 <memmem>
 80064ce:	1e04      	subs	r4, r0, #0
 80064d0:	d006      	beq.n	80064e0 <strnstr+0x38>
 80064d2:	1b42      	subs	r2, r0, r5
 80064d4:	2100      	movs	r1, #0
 80064d6:	0028      	movs	r0, r5
 80064d8:	f000 f882 	bl	80065e0 <memchr>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d000      	beq.n	80064e2 <strnstr+0x3a>
 80064e0:	2400      	movs	r4, #0
 80064e2:	0020      	movs	r0, r4
 80064e4:	bd70      	pop	{r4, r5, r6, pc}

080064e6 <strstr>:
 80064e6:	b510      	push	{r4, lr}
 80064e8:	7803      	ldrb	r3, [r0, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <strstr+0x28>
 80064ee:	780b      	ldrb	r3, [r1, #0]
 80064f0:	425a      	negs	r2, r3
 80064f2:	4153      	adcs	r3, r2
 80064f4:	425b      	negs	r3, r3
 80064f6:	4018      	ands	r0, r3
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	2300      	movs	r3, #0
 80064fc:	5cca      	ldrb	r2, [r1, r3]
 80064fe:	2a00      	cmp	r2, #0
 8006500:	d0fa      	beq.n	80064f8 <strstr+0x12>
 8006502:	5cc4      	ldrb	r4, [r0, r3]
 8006504:	4294      	cmp	r4, r2
 8006506:	d101      	bne.n	800650c <strstr+0x26>
 8006508:	3301      	adds	r3, #1
 800650a:	e7f7      	b.n	80064fc <strstr+0x16>
 800650c:	3001      	adds	r0, #1
 800650e:	7803      	ldrb	r3, [r0, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f2      	bne.n	80064fa <strstr+0x14>
 8006514:	0018      	movs	r0, r3
 8006516:	e7ef      	b.n	80064f8 <strstr+0x12>

08006518 <strtok>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	4b12      	ldr	r3, [pc, #72]	; (8006564 <strtok+0x4c>)
 800651c:	0006      	movs	r6, r0
 800651e:	681d      	ldr	r5, [r3, #0]
 8006520:	000f      	movs	r7, r1
 8006522:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8006524:	2c00      	cmp	r4, #0
 8006526:	d116      	bne.n	8006556 <strtok+0x3e>
 8006528:	2050      	movs	r0, #80	; 0x50
 800652a:	f000 f84f 	bl	80065cc <malloc>
 800652e:	65a8      	str	r0, [r5, #88]	; 0x58
 8006530:	6004      	str	r4, [r0, #0]
 8006532:	6044      	str	r4, [r0, #4]
 8006534:	6084      	str	r4, [r0, #8]
 8006536:	60c4      	str	r4, [r0, #12]
 8006538:	6104      	str	r4, [r0, #16]
 800653a:	6144      	str	r4, [r0, #20]
 800653c:	6184      	str	r4, [r0, #24]
 800653e:	6284      	str	r4, [r0, #40]	; 0x28
 8006540:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006542:	6304      	str	r4, [r0, #48]	; 0x30
 8006544:	6344      	str	r4, [r0, #52]	; 0x34
 8006546:	6384      	str	r4, [r0, #56]	; 0x38
 8006548:	63c4      	str	r4, [r0, #60]	; 0x3c
 800654a:	6404      	str	r4, [r0, #64]	; 0x40
 800654c:	6444      	str	r4, [r0, #68]	; 0x44
 800654e:	6484      	str	r4, [r0, #72]	; 0x48
 8006550:	64c4      	str	r4, [r0, #76]	; 0x4c
 8006552:	7704      	strb	r4, [r0, #28]
 8006554:	6244      	str	r4, [r0, #36]	; 0x24
 8006556:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8006558:	0039      	movs	r1, r7
 800655a:	0030      	movs	r0, r6
 800655c:	2301      	movs	r3, #1
 800655e:	f000 f803 	bl	8006568 <__strtok_r>
 8006562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006564:	20000874 	.word	0x20000874

08006568 <__strtok_r>:
 8006568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656a:	2800      	cmp	r0, #0
 800656c:	d104      	bne.n	8006578 <__strtok_r+0x10>
 800656e:	6810      	ldr	r0, [r2, #0]
 8006570:	2800      	cmp	r0, #0
 8006572:	d101      	bne.n	8006578 <__strtok_r+0x10>
 8006574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006576:	0020      	movs	r0, r4
 8006578:	000e      	movs	r6, r1
 800657a:	7805      	ldrb	r5, [r0, #0]
 800657c:	1c44      	adds	r4, r0, #1
 800657e:	7837      	ldrb	r7, [r6, #0]
 8006580:	2f00      	cmp	r7, #0
 8006582:	d104      	bne.n	800658e <__strtok_r+0x26>
 8006584:	2d00      	cmp	r5, #0
 8006586:	d110      	bne.n	80065aa <__strtok_r+0x42>
 8006588:	6015      	str	r5, [r2, #0]
 800658a:	0028      	movs	r0, r5
 800658c:	e7f2      	b.n	8006574 <__strtok_r+0xc>
 800658e:	3601      	adds	r6, #1
 8006590:	42bd      	cmp	r5, r7
 8006592:	d1f4      	bne.n	800657e <__strtok_r+0x16>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ee      	bne.n	8006576 <__strtok_r+0xe>
 8006598:	6014      	str	r4, [r2, #0]
 800659a:	7003      	strb	r3, [r0, #0]
 800659c:	e7ea      	b.n	8006574 <__strtok_r+0xc>
 800659e:	0033      	movs	r3, r6
 80065a0:	e00d      	b.n	80065be <__strtok_r+0x56>
 80065a2:	3501      	adds	r5, #1
 80065a4:	2f00      	cmp	r7, #0
 80065a6:	d103      	bne.n	80065b0 <__strtok_r+0x48>
 80065a8:	001c      	movs	r4, r3
 80065aa:	000d      	movs	r5, r1
 80065ac:	7826      	ldrb	r6, [r4, #0]
 80065ae:	1c63      	adds	r3, r4, #1
 80065b0:	782f      	ldrb	r7, [r5, #0]
 80065b2:	42be      	cmp	r6, r7
 80065b4:	d1f5      	bne.n	80065a2 <__strtok_r+0x3a>
 80065b6:	2e00      	cmp	r6, #0
 80065b8:	d0f1      	beq.n	800659e <__strtok_r+0x36>
 80065ba:	2100      	movs	r1, #0
 80065bc:	7021      	strb	r1, [r4, #0]
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e7d8      	b.n	8006574 <__strtok_r+0xc>

080065c2 <strtok_r>:
 80065c2:	b510      	push	{r4, lr}
 80065c4:	2301      	movs	r3, #1
 80065c6:	f7ff ffcf 	bl	8006568 <__strtok_r>
 80065ca:	bd10      	pop	{r4, pc}

080065cc <malloc>:
 80065cc:	b510      	push	{r4, lr}
 80065ce:	4b03      	ldr	r3, [pc, #12]	; (80065dc <malloc+0x10>)
 80065d0:	0001      	movs	r1, r0
 80065d2:	6818      	ldr	r0, [r3, #0]
 80065d4:	f000 f82a 	bl	800662c <_malloc_r>
 80065d8:	bd10      	pop	{r4, pc}
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	20000874 	.word	0x20000874

080065e0 <memchr>:
 80065e0:	b2c9      	uxtb	r1, r1
 80065e2:	1882      	adds	r2, r0, r2
 80065e4:	4290      	cmp	r0, r2
 80065e6:	d101      	bne.n	80065ec <memchr+0xc>
 80065e8:	2000      	movs	r0, #0
 80065ea:	4770      	bx	lr
 80065ec:	7803      	ldrb	r3, [r0, #0]
 80065ee:	428b      	cmp	r3, r1
 80065f0:	d0fb      	beq.n	80065ea <memchr+0xa>
 80065f2:	3001      	adds	r0, #1
 80065f4:	e7f6      	b.n	80065e4 <memchr+0x4>

080065f6 <memmem>:
 80065f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f8:	0007      	movs	r7, r0
 80065fa:	9100      	str	r1, [sp, #0]
 80065fc:	9201      	str	r2, [sp, #4]
 80065fe:	001e      	movs	r6, r3
 8006600:	0004      	movs	r4, r0
 8006602:	000d      	movs	r5, r1
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <memmem+0x26>
 8006608:	0020      	movs	r0, r4
 800660a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800660c:	0032      	movs	r2, r6
 800660e:	9901      	ldr	r1, [sp, #4]
 8006610:	0020      	movs	r0, r4
 8006612:	f000 f886 	bl	8006722 <memcmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	d0f6      	beq.n	8006608 <memmem+0x12>
 800661a:	3d01      	subs	r5, #1
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	18fc      	adds	r4, r7, r3
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	42b5      	cmp	r5, r6
 8006624:	d2f2      	bcs.n	800660c <memmem+0x16>
 8006626:	2400      	movs	r4, #0
 8006628:	e7ee      	b.n	8006608 <memmem+0x12>
	...

0800662c <_malloc_r>:
 800662c:	2303      	movs	r3, #3
 800662e:	b570      	push	{r4, r5, r6, lr}
 8006630:	1ccd      	adds	r5, r1, #3
 8006632:	439d      	bics	r5, r3
 8006634:	3508      	adds	r5, #8
 8006636:	0006      	movs	r6, r0
 8006638:	2d0c      	cmp	r5, #12
 800663a:	d21e      	bcs.n	800667a <_malloc_r+0x4e>
 800663c:	250c      	movs	r5, #12
 800663e:	42a9      	cmp	r1, r5
 8006640:	d81d      	bhi.n	800667e <_malloc_r+0x52>
 8006642:	0030      	movs	r0, r6
 8006644:	f000 f87c 	bl	8006740 <__malloc_lock>
 8006648:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <_malloc_r+0xb4>)
 800664a:	6814      	ldr	r4, [r2, #0]
 800664c:	0021      	movs	r1, r4
 800664e:	2900      	cmp	r1, #0
 8006650:	d119      	bne.n	8006686 <_malloc_r+0x5a>
 8006652:	4c24      	ldr	r4, [pc, #144]	; (80066e4 <_malloc_r+0xb8>)
 8006654:	6823      	ldr	r3, [r4, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <_malloc_r+0x36>
 800665a:	0030      	movs	r0, r6
 800665c:	f000 f844 	bl	80066e8 <_sbrk_r>
 8006660:	6020      	str	r0, [r4, #0]
 8006662:	0029      	movs	r1, r5
 8006664:	0030      	movs	r0, r6
 8006666:	f000 f83f 	bl	80066e8 <_sbrk_r>
 800666a:	1c43      	adds	r3, r0, #1
 800666c:	d12b      	bne.n	80066c6 <_malloc_r+0x9a>
 800666e:	230c      	movs	r3, #12
 8006670:	0030      	movs	r0, r6
 8006672:	6033      	str	r3, [r6, #0]
 8006674:	f000 f865 	bl	8006742 <__malloc_unlock>
 8006678:	e003      	b.n	8006682 <_malloc_r+0x56>
 800667a:	2d00      	cmp	r5, #0
 800667c:	dadf      	bge.n	800663e <_malloc_r+0x12>
 800667e:	230c      	movs	r3, #12
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	2000      	movs	r0, #0
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	680b      	ldr	r3, [r1, #0]
 8006688:	1b5b      	subs	r3, r3, r5
 800668a:	d419      	bmi.n	80066c0 <_malloc_r+0x94>
 800668c:	2b0b      	cmp	r3, #11
 800668e:	d903      	bls.n	8006698 <_malloc_r+0x6c>
 8006690:	600b      	str	r3, [r1, #0]
 8006692:	18cc      	adds	r4, r1, r3
 8006694:	6025      	str	r5, [r4, #0]
 8006696:	e003      	b.n	80066a0 <_malloc_r+0x74>
 8006698:	684b      	ldr	r3, [r1, #4]
 800669a:	428c      	cmp	r4, r1
 800669c:	d10d      	bne.n	80066ba <_malloc_r+0x8e>
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	0030      	movs	r0, r6
 80066a2:	f000 f84e 	bl	8006742 <__malloc_unlock>
 80066a6:	0020      	movs	r0, r4
 80066a8:	2207      	movs	r2, #7
 80066aa:	300b      	adds	r0, #11
 80066ac:	1d23      	adds	r3, r4, #4
 80066ae:	4390      	bics	r0, r2
 80066b0:	1ac3      	subs	r3, r0, r3
 80066b2:	d0e7      	beq.n	8006684 <_malloc_r+0x58>
 80066b4:	425a      	negs	r2, r3
 80066b6:	50e2      	str	r2, [r4, r3]
 80066b8:	e7e4      	b.n	8006684 <_malloc_r+0x58>
 80066ba:	6063      	str	r3, [r4, #4]
 80066bc:	000c      	movs	r4, r1
 80066be:	e7ef      	b.n	80066a0 <_malloc_r+0x74>
 80066c0:	000c      	movs	r4, r1
 80066c2:	6849      	ldr	r1, [r1, #4]
 80066c4:	e7c3      	b.n	800664e <_malloc_r+0x22>
 80066c6:	2303      	movs	r3, #3
 80066c8:	1cc4      	adds	r4, r0, #3
 80066ca:	439c      	bics	r4, r3
 80066cc:	42a0      	cmp	r0, r4
 80066ce:	d0e1      	beq.n	8006694 <_malloc_r+0x68>
 80066d0:	1a21      	subs	r1, r4, r0
 80066d2:	0030      	movs	r0, r6
 80066d4:	f000 f808 	bl	80066e8 <_sbrk_r>
 80066d8:	1c43      	adds	r3, r0, #1
 80066da:	d1db      	bne.n	8006694 <_malloc_r+0x68>
 80066dc:	e7c7      	b.n	800666e <_malloc_r+0x42>
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	20001538 	.word	0x20001538
 80066e4:	2000153c 	.word	0x2000153c

080066e8 <_sbrk_r>:
 80066e8:	2300      	movs	r3, #0
 80066ea:	b570      	push	{r4, r5, r6, lr}
 80066ec:	4c06      	ldr	r4, [pc, #24]	; (8006708 <_sbrk_r+0x20>)
 80066ee:	0005      	movs	r5, r0
 80066f0:	0008      	movs	r0, r1
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	f7ff fda4 	bl	8006240 <_sbrk>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d103      	bne.n	8006704 <_sbrk_r+0x1c>
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d000      	beq.n	8006704 <_sbrk_r+0x1c>
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	bd70      	pop	{r4, r5, r6, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	20001968 	.word	0x20001968

0800670c <strnlen>:
 800670c:	0003      	movs	r3, r0
 800670e:	1841      	adds	r1, r0, r1
 8006710:	428b      	cmp	r3, r1
 8006712:	d002      	beq.n	800671a <strnlen+0xe>
 8006714:	781a      	ldrb	r2, [r3, #0]
 8006716:	2a00      	cmp	r2, #0
 8006718:	d101      	bne.n	800671e <strnlen+0x12>
 800671a:	1a18      	subs	r0, r3, r0
 800671c:	4770      	bx	lr
 800671e:	3301      	adds	r3, #1
 8006720:	e7f6      	b.n	8006710 <strnlen+0x4>

08006722 <memcmp>:
 8006722:	b530      	push	{r4, r5, lr}
 8006724:	2400      	movs	r4, #0
 8006726:	42a2      	cmp	r2, r4
 8006728:	d101      	bne.n	800672e <memcmp+0xc>
 800672a:	2000      	movs	r0, #0
 800672c:	e005      	b.n	800673a <memcmp+0x18>
 800672e:	5d03      	ldrb	r3, [r0, r4]
 8006730:	1c65      	adds	r5, r4, #1
 8006732:	5d0c      	ldrb	r4, [r1, r4]
 8006734:	42a3      	cmp	r3, r4
 8006736:	d001      	beq.n	800673c <memcmp+0x1a>
 8006738:	1b18      	subs	r0, r3, r4
 800673a:	bd30      	pop	{r4, r5, pc}
 800673c:	002c      	movs	r4, r5
 800673e:	e7f2      	b.n	8006726 <memcmp+0x4>

08006740 <__malloc_lock>:
 8006740:	4770      	bx	lr

08006742 <__malloc_unlock>:
 8006742:	4770      	bx	lr

08006744 <_init>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr

08006750 <_fini>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	46c0      	nop			; (mov r8, r8)
 8006754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006756:	bc08      	pop	{r3}
 8006758:	469e      	mov	lr, r3
 800675a:	4770      	bx	lr
