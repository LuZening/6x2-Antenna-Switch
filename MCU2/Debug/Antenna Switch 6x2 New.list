
Antenna Switch 6x2 New.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009564  08009564  000206a4  2**0
                  CONTENTS
  4 .ARM          00000000  08009564  08009564  000206a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009564  08009564  000206a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009564  08009564  00019564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009568  08009568  00019568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006a4  20000000  0800956c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c54  200006a8  08009c10  000206a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000404  200012fc  08009c10  000212fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024867  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045f0  00000000  00000000  00044f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00049523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0004a96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000134d6  00000000  00000000  0004bc4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005c61  00000000  00000000  0005f121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00064d82  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004a58  00000000  00000000  00064dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200006a8 	.word	0x200006a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009148 	.word	0x08009148

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200006ac 	.word	0x200006ac
 8000104:	08009148 	.word	0x08009148

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <load_config>:
// flash wear levelling handle
#ifdef ESP32
static wl_handle_t wlHandle = WL_INVALID_HANDLE;
#endif
void load_config(Config* p_cfg)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    if(mtxConfig == NULL) mtxConfig = xSemaphoreCreateMutex();
    #endif

    #if defined(USE_STM32_FLASH_EEPROM)
    EEPROM_ReadBytes(&EEPROM, (uint8_t*)p_cfg, sizeof(Config));
 800024c:	6879      	ldr	r1, [r7, #4]
 800024e:	4b04      	ldr	r3, [pc, #16]	; (8000260 <load_config+0x1c>)
 8000250:	2270      	movs	r2, #112	; 0x70
 8000252:	0018      	movs	r0, r3
 8000254:	f000 f910 	bl	8000478 <EEPROM_ReadBytes>
        ESP_LOGD(tag, "cfg.validstring = %s", p_cfg->body.sValid);
    }
    esp_vfs_fat_spiflash_unmount(FS_BASE_PATH_CONFIG, wlHandle);    
    ESP_LOGD(tag, "FS unmounted");
    #endif
}
 8000258:	46c0      	nop			; (mov r8, r8)
 800025a:	46bd      	mov	sp, r7
 800025c:	b002      	add	sp, #8
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000000 	.word	0x20000000

08000264 <save_config>:


void save_config(Config* p_cfg)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreTake(mtxConfig, portMAX_DELAY);
    #endif

    #if defined(USE_STM32_FLASH_EEPROM)
    EEPROM_WriteBytes(&EEPROM, (uint8_t*)p_cfg, sizeof(Config));
 800026c:	6879      	ldr	r1, [r7, #4]
 800026e:	4b06      	ldr	r3, [pc, #24]	; (8000288 <save_config+0x24>)
 8000270:	2270      	movs	r2, #112	; 0x70
 8000272:	0018      	movs	r0, r3
 8000274:	f000 f84a 	bl	800030c <EEPROM_WriteBytes>
    }
    esp_vfs_fat_spiflash_unmount(FS_BASE_PATH_CONFIG, wlHandle);    
    ESP_LOGD(tag, "FS unmounted");
    #endif

    isModified=false;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <save_config+0x28>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]

SAVE_CONFIG_FAILED:
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreGive(mtxConfig);
    #endif
    return;
 800027e:	46c0      	nop			; (mov r8, r8)
}
 8000280:	46bd      	mov	sp, r7
 8000282:	b002      	add	sp, #8
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	20000000 	.word	0x20000000
 800028c:	200006c4 	.word	0x200006c4

08000290 <config_check_valid>:


bool config_check_valid(Config* p)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
    uint8_t check = strncmp(p->sValid, VALID_STRING, sizeof(p->sValid));
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	4b1b      	ldr	r3, [pc, #108]	; (8000308 <config_check_valid+0x78>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2208      	movs	r2, #8
 80002a0:	0019      	movs	r1, r3
 80002a2:	f008 fe93 	bl	8008fcc <strncmp>
 80002a6:	0002      	movs	r2, r0
 80002a8:	230f      	movs	r3, #15
 80002aa:	18fb      	adds	r3, r7, r3
 80002ac:	701a      	strb	r2, [r3, #0]
    bool check2 = (p->portHTTP > 0) && (p->portTCP > 0) && (p->portUDP > 0);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	226a      	movs	r2, #106	; 0x6a
 80002b2:	5a9b      	ldrh	r3, [r3, r2]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <config_check_valid+0x40>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	226c      	movs	r2, #108	; 0x6c
 80002bc:	5a9b      	ldrh	r3, [r3, r2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <config_check_valid+0x40>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	226e      	movs	r2, #110	; 0x6e
 80002c6:	5a9b      	ldrh	r3, [r3, r2]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <config_check_valid+0x40>
 80002cc:	2201      	movs	r2, #1
 80002ce:	e000      	b.n	80002d2 <config_check_valid+0x42>
 80002d0:	2200      	movs	r2, #0
 80002d2:	200e      	movs	r0, #14
 80002d4:	183b      	adds	r3, r7, r0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	2101      	movs	r1, #1
 80002dc:	400a      	ands	r2, r1
 80002de:	701a      	strb	r2, [r3, #0]
    return (check == 0) && check2;
 80002e0:	230f      	movs	r3, #15
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d105      	bne.n	80002f6 <config_check_valid+0x66>
 80002ea:	183b      	adds	r3, r7, r0
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <config_check_valid+0x66>
 80002f2:	2301      	movs	r3, #1
 80002f4:	e000      	b.n	80002f8 <config_check_valid+0x68>
 80002f6:	2300      	movs	r3, #0
 80002f8:	1c1a      	adds	r2, r3, #0
 80002fa:	2301      	movs	r3, #1
 80002fc:	4013      	ands	r3, r2
 80002fe:	b2db      	uxtb	r3, r3

}
 8000300:	0018      	movs	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	b004      	add	sp, #16
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000634 	.word	0x20000634

0800030c <EEPROM_WriteBytes>:
} Quadbyte;


// Notice: 4-byte alignment
void EEPROM_WriteBytes(EEPROM_typedef *pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 800030c:	b5b0      	push	{r4, r5, r7, lr}
 800030e:	b090      	sub	sp, #64	; 0x40
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	1dbb      	adds	r3, r7, #6
 8000318:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	uint32_t* addr = (uint32_t*)pEEPROM->base_addr;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t* addrPageEnd =(addr + (PAGE_SIZE >> 2));
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	011b      	lsls	r3, r3, #4
 8000324:	089b      	lsrs	r3, r3, #2
 8000326:	b29b      	uxth	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800032c:	18d3      	adds	r3, r2, r3
 800032e:	627b      	str	r3, [r7, #36]	; 0x24
	Quadbyte quadbyte;

	uint32_t* addrOldContentBegin = addr;
 8000330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000332:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t* addrOldContentEnd;
	uint32_t* addrNewContentBegin = addr;
 8000334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000336:	633b      	str	r3, [r7, #48]	; 0x30
#if ENABLE_WEAR_LEVELING
	/* detect range of old content, non-zero non-0xff range */
	// find the head
	while((addrOldContentBegin < addrPageEnd) && (*addrOldContentBegin == 0x00000000U))
 8000338:	e002      	b.n	8000340 <EEPROM_WriteBytes+0x34>
		addrOldContentBegin++;
 800033a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800033c:	3304      	adds	r3, #4
 800033e:	63bb      	str	r3, [r7, #56]	; 0x38
	while((addrOldContentBegin < addrPageEnd) && (*addrOldContentBegin == 0x00000000U))
 8000340:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000344:	429a      	cmp	r2, r3
 8000346:	d203      	bcs.n	8000350 <EEPROM_WriteBytes+0x44>
 8000348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d0f4      	beq.n	800033a <EEPROM_WriteBytes+0x2e>
	// find the tail
	addrOldContentEnd = addrOldContentBegin;
 8000350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000352:	637b      	str	r3, [r7, #52]	; 0x34
	while((addrOldContentEnd < addrPageEnd) && (*addrOldContentEnd != 0xFFFFFFFFU))
 8000354:	e002      	b.n	800035c <EEPROM_WriteBytes+0x50>
		addrOldContentEnd++;
 8000356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000358:	3304      	adds	r3, #4
 800035a:	637b      	str	r3, [r7, #52]	; 0x34
	while((addrOldContentEnd < addrPageEnd) && (*addrOldContentEnd != 0xFFFFFFFFU))
 800035c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800035e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000360:	429a      	cmp	r2, r3
 8000362:	d203      	bcs.n	800036c <EEPROM_WriteBytes+0x60>
 8000364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3301      	adds	r3, #1
 800036a:	d1f4      	bne.n	8000356 <EEPROM_WriteBytes+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	46c0      	nop			; (mov r8, r8)


#endif
    __disable_irq();
    HAL_FLASH_Unlock();
 8000370:	f000 fcfc 	bl	8000d6c <HAL_FLASH_Unlock>

#if defined(STM32F4)
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
		FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
#endif
	uint32_t PageError = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_SECTORS,
			.Sector = addr_to_sector(addr),
			.NbSectors=1,
			.VoltageRange=FLASH_VOLTAGE_RANGE_3};
#else
	FLASH_EraseInitTypeDef fe = {.TypeErase=FLASH_TYPEERASE_PAGES, .PageAddress=(uint32_t)addr, .NbPages=1};
 8000378:	2110      	movs	r1, #16
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	601a      	str	r2, [r3, #0]
 8000380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000382:	187b      	adds	r3, r7, r1
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	187b      	adds	r3, r7, r1
 8000388:	2201      	movs	r2, #1
 800038a:	609a      	str	r2, [r3, #8]


#if ENABLE_WEAR_LEVELING
	// if the remaining length cannot fit the new content, erase the full page
	// add 4bytes to leave room for header
	if(addrOldContentEnd + (Length >> 2) + 1 > addrPageEnd)
 800038c:	1dbb      	adds	r3, r7, #6
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	b29b      	uxth	r3, r3
 8000394:	3301      	adds	r3, #1
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800039a:	18d3      	adds	r3, r2, r3
 800039c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800039e:	429a      	cmp	r2, r3
 80003a0:	d209      	bcs.n	80003b6 <EEPROM_WriteBytes+0xaa>
	{
		HAL_FLASHEx_Erase(&fe, &PageError);
 80003a2:	231c      	movs	r3, #28
 80003a4:	18fa      	adds	r2, r7, r3
 80003a6:	187b      	adds	r3, r7, r1
 80003a8:	0011      	movs	r1, r2
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fd9e 	bl	8000eec <HAL_FLASHEx_Erase>
		addrNewContentBegin = addr;
 80003b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b2:	633b      	str	r3, [r7, #48]	; 0x30
 80003b4:	e011      	b.n	80003da <EEPROM_WriteBytes+0xce>
	}
	/* SET EXISTING DATA TO ALL 0 TO MARK USAGE */
	else
	{
		for(uint32_t* addrToErase = addrOldContentBegin; addrToErase < addrOldContentEnd; addrToErase++)
 80003b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80003b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003ba:	e008      	b.n	80003ce <EEPROM_WriteBytes+0xc2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrToErase, 0x00000000U);
 80003bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80003be:	2200      	movs	r2, #0
 80003c0:	2300      	movs	r3, #0
 80003c2:	2002      	movs	r0, #2
 80003c4:	f000 fc3c 	bl	8000c40 <HAL_FLASH_Program>
		for(uint32_t* addrToErase = addrOldContentBegin; addrToErase < addrOldContentEnd; addrToErase++)
 80003c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003ca:	3304      	adds	r3, #4
 80003cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80003ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80003d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003d2:	429a      	cmp	r2, r3
 80003d4:	d3f2      	bcc.n	80003bc <EEPROM_WriteBytes+0xb0>
		addrNewContentBegin = addrOldContentEnd;
 80003d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80003d8:	633b      	str	r3, [r7, #48]	; 0x30
	/* If Wear Leveling is disabled, erase the full page each time before writing*/
	HAL_FLASHEx_Erase(&fe, &PageError);
#endif

	/* WRITE HEADER */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrNewContentBegin++, EEPROM_SYMBOL_HEADER);
 80003da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80003dc:	1d1a      	adds	r2, r3, #4
 80003de:	633a      	str	r2, [r7, #48]	; 0x30
 80003e0:	0019      	movs	r1, r3
 80003e2:	4a24      	ldr	r2, [pc, #144]	; (8000474 <EEPROM_WriteBytes+0x168>)
 80003e4:	2300      	movs	r3, #0
 80003e6:	2002      	movs	r0, #2
 80003e8:	f000 fc2a 	bl	8000c40 <HAL_FLASH_Program>
	/* WRITE CONTENT BEGIN */
    while(Length)
 80003ec:	e036      	b.n	800045c <EEPROM_WriteBytes+0x150>
    {
    	memset(quadbyte.bytes, 0, 4);
 80003ee:	2320      	movs	r3, #32
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	2204      	movs	r2, #4
 80003f4:	2100      	movs	r1, #0
 80003f6:	0018      	movs	r0, r3
 80003f8:	f008 fda7 	bl	8008f4a <memset>
    	for(i=0; i<4 && Length; ++i)
 80003fc:	233e      	movs	r3, #62	; 0x3e
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	2200      	movs	r2, #0
 8000402:	801a      	strh	r2, [r3, #0]
 8000404:	e014      	b.n	8000430 <EEPROM_WriteBytes+0x124>
    	{
    		quadbyte.bytes[i] = *Buffer;
 8000406:	203e      	movs	r0, #62	; 0x3e
 8000408:	183b      	adds	r3, r7, r0
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	68ba      	ldr	r2, [r7, #8]
 800040e:	7811      	ldrb	r1, [r2, #0]
 8000410:	2220      	movs	r2, #32
 8000412:	18ba      	adds	r2, r7, r2
 8000414:	54d1      	strb	r1, [r2, r3]
    		Length--;
 8000416:	1dbb      	adds	r3, r7, #6
 8000418:	881a      	ldrh	r2, [r3, #0]
 800041a:	1dbb      	adds	r3, r7, #6
 800041c:	3a01      	subs	r2, #1
 800041e:	801a      	strh	r2, [r3, #0]
    		Buffer++;
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	3301      	adds	r3, #1
 8000424:	60bb      	str	r3, [r7, #8]
    	for(i=0; i<4 && Length; ++i)
 8000426:	183b      	adds	r3, r7, r0
 8000428:	183a      	adds	r2, r7, r0
 800042a:	8812      	ldrh	r2, [r2, #0]
 800042c:	3201      	adds	r2, #1
 800042e:	801a      	strh	r2, [r3, #0]
 8000430:	233e      	movs	r3, #62	; 0x3e
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	2b03      	cmp	r3, #3
 8000438:	d803      	bhi.n	8000442 <EEPROM_WriteBytes+0x136>
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d1e1      	bne.n	8000406 <EEPROM_WriteBytes+0xfa>
    	}
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)addrNewContentBegin++, quadbyte.word);
 8000442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000444:	1d1a      	adds	r2, r3, #4
 8000446:	633a      	str	r2, [r7, #48]	; 0x30
 8000448:	0019      	movs	r1, r3
 800044a:	6a3b      	ldr	r3, [r7, #32]
 800044c:	001c      	movs	r4, r3
 800044e:	2300      	movs	r3, #0
 8000450:	001d      	movs	r5, r3
 8000452:	0022      	movs	r2, r4
 8000454:	002b      	movs	r3, r5
 8000456:	2002      	movs	r0, #2
 8000458:	f000 fbf2 	bl	8000c40 <HAL_FLASH_Program>
    while(Length)
 800045c:	1dbb      	adds	r3, r7, #6
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d1c4      	bne.n	80003ee <EEPROM_WriteBytes+0xe2>
    }
    /* WRITE CONTENT END */
    HAL_FLASH_Lock();
 8000464:	f000 fca8 	bl	8000db8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8000468:	b662      	cpsie	i
}
 800046a:	46c0      	nop			; (mov r8, r8)
    __enable_irq();
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b010      	add	sp, #64	; 0x40
 8000472:	bdb0      	pop	{r4, r5, r7, pc}
 8000474:	07cb020a 	.word	0x07cb020a

08000478 <EEPROM_ReadBytes>:


void EEPROM_ReadBytes(EEPROM_typedef* pEEPROM, uint8_t *Buffer,uint16_t Length)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	1dbb      	adds	r3, r7, #6
 8000484:	801a      	strh	r2, [r3, #0]
//	uint8_t* ad = pEEPROM->base_addr;
//	uint8_t* addr_end = addr + Length;
	Quadbyte quadbyte;
	uint32_t* addrBase= (uint32_t*)pEEPROM->base_addr;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	61bb      	str	r3, [r7, #24]
	uint32_t* addrPageEnd = addrBase + (PAGE_SIZE >> 2);
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	011b      	lsls	r3, r3, #4
 8000490:	089b      	lsrs	r3, r3, #2
 8000492:	b29b      	uxth	r3, r3
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	69ba      	ldr	r2, [r7, #24]
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	617b      	str	r3, [r7, #20]
	uint32_t* addrContentBegin = addrBase;
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	627b      	str	r3, [r7, #36]	; 0x24
#if ENABLE_WEAR_LEVELING
	memset(Buffer, 0, Length);
 80004a0:	1dbb      	adds	r3, r7, #6
 80004a2:	881a      	ldrh	r2, [r3, #0]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	2100      	movs	r1, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f008 fd4e 	bl	8008f4a <memset>
	// read 4-bytes each
	// find header, header
	while(addrContentBegin < addrPageEnd && *addrContentBegin == 0x00000000U)
 80004ae:	e002      	b.n	80004b6 <EEPROM_ReadBytes+0x3e>
		addrContentBegin++;
 80004b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b2:	3304      	adds	r3, #4
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
	while(addrContentBegin < addrPageEnd && *addrContentBegin == 0x00000000U)
 80004b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004b8:	697b      	ldr	r3, [r7, #20]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d203      	bcs.n	80004c6 <EEPROM_ReadBytes+0x4e>
 80004be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f4      	beq.n	80004b0 <EEPROM_ReadBytes+0x38>
	// skip the header
	if(addrContentBegin < addrPageEnd - 1)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3b04      	subs	r3, #4
 80004ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d202      	bcs.n	80004d6 <EEPROM_ReadBytes+0x5e>
		addrContentBegin += 1;
 80004d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d2:	3304      	adds	r3, #4
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
#else
	addrContentBegin = addrBase + 1; // skip HEAD
	addrContentEnd = addrContentBegin + Length;
#endif
	uint32_t* addr = addrContentBegin;
 80004d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004d8:	623b      	str	r3, [r7, #32]
	while(Length && (addr < addrPageEnd))
 80004da:	e028      	b.n	800052e <EEPROM_ReadBytes+0xb6>
	{
		quadbyte.word = *addr;
 80004dc:	6a3b      	ldr	r3, [r7, #32]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	613b      	str	r3, [r7, #16]
		for(uint8_t i=0; i<4 && Length; ++i)
 80004e2:	231f      	movs	r3, #31
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	e014      	b.n	8000516 <EEPROM_ReadBytes+0x9e>
		{
			*Buffer = quadbyte.bytes[i];
 80004ec:	211f      	movs	r1, #31
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2210      	movs	r2, #16
 80004f4:	18ba      	adds	r2, r7, r2
 80004f6:	5cd2      	ldrb	r2, [r2, r3]
 80004f8:	68bb      	ldr	r3, [r7, #8]
 80004fa:	701a      	strb	r2, [r3, #0]
			Buffer++;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	3301      	adds	r3, #1
 8000500:	60bb      	str	r3, [r7, #8]
			Length--;
 8000502:	1dbb      	adds	r3, r7, #6
 8000504:	881a      	ldrh	r2, [r3, #0]
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	3a01      	subs	r2, #1
 800050a:	801a      	strh	r2, [r3, #0]
		for(uint8_t i=0; i<4 && Length; ++i)
 800050c:	187b      	adds	r3, r7, r1
 800050e:	187a      	adds	r2, r7, r1
 8000510:	7812      	ldrb	r2, [r2, #0]
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	231f      	movs	r3, #31
 8000518:	18fb      	adds	r3, r7, r3
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b03      	cmp	r3, #3
 800051e:	d803      	bhi.n	8000528 <EEPROM_ReadBytes+0xb0>
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	881b      	ldrh	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d1e1      	bne.n	80004ec <EEPROM_ReadBytes+0x74>
		}
		addr++;
 8000528:	6a3b      	ldr	r3, [r7, #32]
 800052a:	3304      	adds	r3, #4
 800052c:	623b      	str	r3, [r7, #32]
	while(Length && (addr < addrPageEnd))
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	881b      	ldrh	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <EEPROM_ReadBytes+0xc6>
 8000536:	6a3a      	ldr	r2, [r7, #32]
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	429a      	cmp	r2, r3
 800053c:	d3ce      	bcc.n	80004dc <EEPROM_ReadBytes+0x64>
	}
}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	46bd      	mov	sp, r7
 8000542:	b00a      	add	sp, #40	; 0x28
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <HAL_Init+0x24>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_Init+0x24>)
 8000552:	2110      	movs	r1, #16
 8000554:	430a      	orrs	r2, r1
 8000556:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000558:	2000      	movs	r0, #0
 800055a:	f000 f809 	bl	8000570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800055e:	f008 fad5 	bl	8008b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
}
 8000564:	0018      	movs	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40022000 	.word	0x40022000

08000570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <HAL_InitTick+0x5c>)
 800057a:	681c      	ldr	r4, [r3, #0]
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HAL_InitTick+0x60>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	0019      	movs	r1, r3
 8000582:	23fa      	movs	r3, #250	; 0xfa
 8000584:	0098      	lsls	r0, r3, #2
 8000586:	f7ff fdd1 	bl	800012c <__udivsi3>
 800058a:	0003      	movs	r3, r0
 800058c:	0019      	movs	r1, r3
 800058e:	0020      	movs	r0, r4
 8000590:	f7ff fdcc 	bl	800012c <__udivsi3>
 8000594:	0003      	movs	r3, r0
 8000596:	0018      	movs	r0, r3
 8000598:	f000 f92f 	bl	80007fa <HAL_SYSTICK_Config>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005a0:	2301      	movs	r3, #1
 80005a2:	e00f      	b.n	80005c4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b03      	cmp	r3, #3
 80005a8:	d80b      	bhi.n	80005c2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	2301      	movs	r3, #1
 80005ae:	425b      	negs	r3, r3
 80005b0:	2200      	movs	r2, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f8fc 	bl	80007b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_InitTick+0x64>)
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b003      	add	sp, #12
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	200006a0 	.word	0x200006a0
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000008 	.word	0x20000008

080005d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_IncTick+0x1c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	001a      	movs	r2, r3
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_IncTick+0x20>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	18d2      	adds	r2, r2, r3
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <HAL_IncTick+0x20>)
 80005ea:	601a      	str	r2, [r3, #0]
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	2000000c 	.word	0x2000000c
 80005f8:	20000e00 	.word	0x20000e00

080005fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b02      	ldr	r3, [pc, #8]	; (800060c <HAL_GetTick+0x10>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	20000e00 	.word	0x20000e00

08000610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000618:	f7ff fff0 	bl	80005fc <HAL_GetTick>
 800061c:	0003      	movs	r3, r0
 800061e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	3301      	adds	r3, #1
 8000628:	d005      	beq.n	8000636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_Delay+0x44>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	001a      	movs	r2, r3
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	189b      	adds	r3, r3, r2
 8000634:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	f7ff ffe0 	bl	80005fc <HAL_GetTick>
 800063c:	0002      	movs	r2, r0
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8f7      	bhi.n	8000638 <HAL_Delay+0x28>
  {
  }
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b004      	add	sp, #16
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	2000000c 	.word	0x2000000c

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	0002      	movs	r2, r0
 8000660:	1dfb      	adds	r3, r7, #7
 8000662:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000664:	1dfb      	adds	r3, r7, #7
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b7f      	cmp	r3, #127	; 0x7f
 800066a:	d809      	bhi.n	8000680 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066c:	1dfb      	adds	r3, r7, #7
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	001a      	movs	r2, r3
 8000672:	231f      	movs	r3, #31
 8000674:	401a      	ands	r2, r3
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <__NVIC_EnableIRQ+0x30>)
 8000678:	2101      	movs	r1, #1
 800067a:	4091      	lsls	r1, r2
 800067c:	000a      	movs	r2, r1
 800067e:	601a      	str	r2, [r3, #0]
  }
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	0002      	movs	r2, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b7f      	cmp	r3, #127	; 0x7f
 80006a0:	d828      	bhi.n	80006f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006a2:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <__NVIC_SetPriority+0xd4>)
 80006a4:	1dfb      	adds	r3, r7, #7
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	b25b      	sxtb	r3, r3
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	33c0      	adds	r3, #192	; 0xc0
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	589b      	ldr	r3, [r3, r2]
 80006b2:	1dfa      	adds	r2, r7, #7
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	0011      	movs	r1, r2
 80006b8:	2203      	movs	r2, #3
 80006ba:	400a      	ands	r2, r1
 80006bc:	00d2      	lsls	r2, r2, #3
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	4091      	lsls	r1, r2
 80006c2:	000a      	movs	r2, r1
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	401a      	ands	r2, r3
 80006c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	019b      	lsls	r3, r3, #6
 80006ce:	22ff      	movs	r2, #255	; 0xff
 80006d0:	401a      	ands	r2, r3
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	0018      	movs	r0, r3
 80006d8:	2303      	movs	r3, #3
 80006da:	4003      	ands	r3, r0
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e0:	481f      	ldr	r0, [pc, #124]	; (8000760 <__NVIC_SetPriority+0xd4>)
 80006e2:	1dfb      	adds	r3, r7, #7
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	089b      	lsrs	r3, r3, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	33c0      	adds	r3, #192	; 0xc0
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006f2:	e031      	b.n	8000758 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f4:	4a1b      	ldr	r2, [pc, #108]	; (8000764 <__NVIC_SetPriority+0xd8>)
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0019      	movs	r1, r3
 80006fc:	230f      	movs	r3, #15
 80006fe:	400b      	ands	r3, r1
 8000700:	3b08      	subs	r3, #8
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	3306      	adds	r3, #6
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	3304      	adds	r3, #4
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	1dfa      	adds	r2, r7, #7
 8000710:	7812      	ldrb	r2, [r2, #0]
 8000712:	0011      	movs	r1, r2
 8000714:	2203      	movs	r2, #3
 8000716:	400a      	ands	r2, r1
 8000718:	00d2      	lsls	r2, r2, #3
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	4091      	lsls	r1, r2
 800071e:	000a      	movs	r2, r1
 8000720:	43d2      	mvns	r2, r2
 8000722:	401a      	ands	r2, r3
 8000724:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	019b      	lsls	r3, r3, #6
 800072a:	22ff      	movs	r2, #255	; 0xff
 800072c:	401a      	ands	r2, r3
 800072e:	1dfb      	adds	r3, r7, #7
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	0018      	movs	r0, r3
 8000734:	2303      	movs	r3, #3
 8000736:	4003      	ands	r3, r0
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <__NVIC_SetPriority+0xd8>)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	001c      	movs	r4, r3
 8000744:	230f      	movs	r3, #15
 8000746:	4023      	ands	r3, r4
 8000748:	3b08      	subs	r3, #8
 800074a:	089b      	lsrs	r3, r3, #2
 800074c:	430a      	orrs	r2, r1
 800074e:	3306      	adds	r3, #6
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	18c3      	adds	r3, r0, r3
 8000754:	3304      	adds	r3, #4
 8000756:	601a      	str	r2, [r3, #0]
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b003      	add	sp, #12
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	1e5a      	subs	r2, r3, #1
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	045b      	lsls	r3, r3, #17
 8000778:	429a      	cmp	r2, r3
 800077a:	d301      	bcc.n	8000780 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077c:	2301      	movs	r3, #1
 800077e:	e010      	b.n	80007a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <SysTick_Config+0x44>)
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	3a01      	subs	r2, #1
 8000786:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000788:	2301      	movs	r3, #1
 800078a:	425b      	negs	r3, r3
 800078c:	2103      	movs	r1, #3
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ff7c 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <SysTick_Config+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <SysTick_Config+0x44>)
 800079c:	2207      	movs	r2, #7
 800079e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	0018      	movs	r0, r3
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	210f      	movs	r1, #15
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	1c02      	adds	r2, r0, #0
 80007c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007c2:	68ba      	ldr	r2, [r7, #8]
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ff5d 	bl	800068c <__NVIC_SetPriority>
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	0002      	movs	r2, r0
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	0018      	movs	r0, r3
 80007ee:	f7ff ff33 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffaf 	bl	8000768 <SysTick_Config>
 800080a:	0003      	movs	r3, r0
}
 800080c:	0018      	movs	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}

08000814 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e036      	b.n	8000898 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2221      	movs	r2, #33	; 0x21
 800082e:	2102      	movs	r1, #2
 8000830:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <HAL_DMA_Init+0x8c>)
 800083e:	4013      	ands	r3, r2
 8000840:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800084a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69db      	ldr	r3, [r3, #28]
 8000868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68fa      	ldr	r2, [r7, #12]
 8000876:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f9c4 	bl	8000c08 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2221      	movs	r2, #33	; 0x21
 800088a:	2101      	movs	r1, #1
 800088c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2220      	movs	r2, #32
 8000892:	2100      	movs	r1, #0
 8000894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000896:	2300      	movs	r3, #0
}
 8000898:	0018      	movs	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	b004      	add	sp, #16
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	ffffc00f 	.word	0xffffc00f

080008a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80008b2:	2317      	movs	r3, #23
 80008b4:	18fb      	adds	r3, r7, r3
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2220      	movs	r2, #32
 80008be:	5c9b      	ldrb	r3, [r3, r2]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d101      	bne.n	80008c8 <HAL_DMA_Start_IT+0x24>
 80008c4:	2302      	movs	r3, #2
 80008c6:	e04f      	b.n	8000968 <HAL_DMA_Start_IT+0xc4>
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2220      	movs	r2, #32
 80008cc:	2101      	movs	r1, #1
 80008ce:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2221      	movs	r2, #33	; 0x21
 80008d4:	5c9b      	ldrb	r3, [r3, r2]
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d13a      	bne.n	8000952 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2221      	movs	r2, #33	; 0x21
 80008e0:	2102      	movs	r1, #2
 80008e2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2101      	movs	r1, #1
 80008f6:	438a      	bics	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f000 f954 	bl	8000bae <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090a:	2b00      	cmp	r3, #0
 800090c:	d008      	beq.n	8000920 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	210e      	movs	r1, #14
 800091a:	430a      	orrs	r2, r1
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	e00f      	b.n	8000940 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	210a      	movs	r1, #10
 800092c:	430a      	orrs	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2104      	movs	r1, #4
 800093c:	438a      	bics	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2101      	movs	r1, #1
 800094c:	430a      	orrs	r2, r1
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	e007      	b.n	8000962 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2220      	movs	r2, #32
 8000956:	2100      	movs	r1, #0
 8000958:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800095a:	2317      	movs	r3, #23
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	2202      	movs	r2, #2
 8000960:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000962:	2317      	movs	r3, #23
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b006      	add	sp, #24
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2221      	movs	r2, #33	; 0x21
 800097c:	5c9b      	ldrb	r3, [r3, r2]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b02      	cmp	r3, #2
 8000982:	d008      	beq.n	8000996 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2204      	movs	r2, #4
 8000988:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2220      	movs	r2, #32
 800098e:	2100      	movs	r1, #0
 8000990:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e020      	b.n	80009d8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	210e      	movs	r1, #14
 80009a2:	438a      	bics	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2101      	movs	r1, #1
 80009b2:	438a      	bics	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009be:	2101      	movs	r1, #1
 80009c0:	4091      	lsls	r1, r2
 80009c2:	000a      	movs	r2, r1
 80009c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2221      	movs	r2, #33	; 0x21
 80009ca:	2101      	movs	r1, #1
 80009cc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2220      	movs	r2, #32
 80009d2:	2100      	movs	r1, #0
 80009d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	0018      	movs	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}

080009e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009e8:	210f      	movs	r1, #15
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2221      	movs	r2, #33	; 0x21
 80009f4:	5c9b      	ldrb	r3, [r3, r2]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d006      	beq.n	8000a0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2204      	movs	r2, #4
 8000a00:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
 8000a08:	e028      	b.n	8000a5c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	210e      	movs	r1, #14
 8000a16:	438a      	bics	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	438a      	bics	r2, r1
 8000a28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a32:	2101      	movs	r1, #1
 8000a34:	4091      	lsls	r1, r2
 8000a36:	000a      	movs	r2, r1
 8000a38:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2221      	movs	r2, #33	; 0x21
 8000a3e:	2101      	movs	r1, #1
 8000a40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2220      	movs	r2, #32
 8000a46:	2100      	movs	r1, #0
 8000a48:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	0010      	movs	r0, r2
 8000a5a:	4798      	blx	r3
    }
  }
  return status;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	781b      	ldrb	r3, [r3, #0]
}
 8000a62:	0018      	movs	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b084      	sub	sp, #16
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	2204      	movs	r2, #4
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	68fa      	ldr	r2, [r7, #12]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	d024      	beq.n	8000adc <HAL_DMA_IRQHandler+0x72>
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	2204      	movs	r2, #4
 8000a96:	4013      	ands	r3, r2
 8000a98:	d020      	beq.n	8000adc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	d107      	bne.n	8000ab6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2104      	movs	r1, #4
 8000ab2:	438a      	bics	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000abe:	2104      	movs	r1, #4
 8000ac0:	4091      	lsls	r1, r2
 8000ac2:	000a      	movs	r2, r1
 8000ac4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <HAL_DMA_IRQHandler+0x66>
 8000ace:	e06a      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8000ada:	e064      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	409a      	lsls	r2, r3
 8000ae4:	0013      	movs	r3, r2
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d02b      	beq.n	8000b44 <HAL_DMA_IRQHandler+0xda>
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2202      	movs	r2, #2
 8000af0:	4013      	ands	r3, r2
 8000af2:	d027      	beq.n	8000b44 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2220      	movs	r2, #32
 8000afc:	4013      	ands	r3, r2
 8000afe:	d10b      	bne.n	8000b18 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	210a      	movs	r1, #10
 8000b0c:	438a      	bics	r2, r1
 8000b0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2221      	movs	r2, #33	; 0x21
 8000b14:	2101      	movs	r1, #1
 8000b16:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b20:	2102      	movs	r1, #2
 8000b22:	4091      	lsls	r1, r2
 8000b24:	000a      	movs	r2, r1
 8000b26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d036      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	0010      	movs	r0, r2
 8000b40:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8000b42:	e030      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	2208      	movs	r2, #8
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4013      	ands	r3, r2
 8000b52:	d028      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2208      	movs	r2, #8
 8000b58:	4013      	ands	r3, r2
 8000b5a:	d024      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	210e      	movs	r1, #14
 8000b68:	438a      	bics	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b74:	2101      	movs	r1, #1
 8000b76:	4091      	lsls	r1, r2
 8000b78:	000a      	movs	r2, r1
 8000b7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2221      	movs	r2, #33	; 0x21
 8000b86:	2101      	movs	r1, #1
 8000b88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2220      	movs	r2, #32
 8000b8e:	2100      	movs	r1, #0
 8000b90:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d005      	beq.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	4798      	blx	r3
    }
  }
}
 8000ba4:	e7ff      	b.n	8000ba6 <HAL_DMA_IRQHandler+0x13c>
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bd80      	pop	{r7, pc}

08000bae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
 8000bba:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b10      	cmp	r3, #16
 8000bda:	d108      	bne.n	8000bee <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000bec:	e007      	b.n	8000bfe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	60da      	str	r2, [r3, #12]
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b004      	add	sp, #16
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <DMA_CalcBaseAndBitshift+0x30>)
 8000c16:	4694      	mov	ip, r2
 8000c18:	4463      	add	r3, ip
 8000c1a:	2114      	movs	r1, #20
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fa85 	bl	800012c <__udivsi3>
 8000c22:	0003      	movs	r3, r0
 8000c24:	009a      	lsls	r2, r3, #2
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <DMA_CalcBaseAndBitshift+0x34>)
 8000c2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b002      	add	sp, #8
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	bffdfff8 	.word	0xbffdfff8
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	b087      	sub	sp, #28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	603a      	str	r2, [r7, #0]
 8000c4c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c4e:	2317      	movs	r3, #23
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8000c56:	2316      	movs	r3, #22
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8000c5e:	2315      	movs	r3, #21
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <HAL_FLASH_Program+0x120>)
 8000c68:	7e1b      	ldrb	r3, [r3, #24]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d101      	bne.n	8000c72 <HAL_FLASH_Program+0x32>
 8000c6e:	2302      	movs	r3, #2
 8000c70:	e072      	b.n	8000d58 <HAL_FLASH_Program+0x118>
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <HAL_FLASH_Program+0x120>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c78:	2317      	movs	r3, #23
 8000c7a:	18fe      	adds	r6, r7, r3
 8000c7c:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_FLASH_Program+0x124>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f8c4 	bl	8000e0c <FLASH_WaitForLastOperation>
 8000c84:	0003      	movs	r3, r0
 8000c86:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8000c88:	2317      	movs	r3, #23
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d15c      	bne.n	8000d4c <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d104      	bne.n	8000ca2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c98:	2315      	movs	r3, #21
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e00b      	b.n	8000cba <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d104      	bne.n	8000cb2 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000ca8:	2315      	movs	r3, #21
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	2202      	movs	r2, #2
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e003      	b.n	8000cba <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000cb2:	2315      	movs	r3, #21
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	2204      	movs	r2, #4
 8000cb8:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8000cba:	2316      	movs	r3, #22
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
 8000cc2:	e039      	b.n	8000d38 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000cc4:	2116      	movs	r1, #22
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	005a      	lsls	r2, r3, #1
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	18d0      	adds	r0, r2, r3
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	3a20      	subs	r2, #32
 8000cda:	2a00      	cmp	r2, #0
 8000cdc:	db03      	blt.n	8000ce6 <HAL_FLASH_Program+0xa6>
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	40d1      	lsrs	r1, r2
 8000ce2:	000c      	movs	r4, r1
 8000ce4:	e008      	b.n	8000cf8 <HAL_FLASH_Program+0xb8>
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	1ad2      	subs	r2, r2, r3
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	6839      	ldr	r1, [r7, #0]
 8000cf2:	40d9      	lsrs	r1, r3
 8000cf4:	000c      	movs	r4, r1
 8000cf6:	4314      	orrs	r4, r2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	40da      	lsrs	r2, r3
 8000cfc:	0015      	movs	r5, r2
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	0019      	movs	r1, r3
 8000d02:	f000 f867 	bl	8000dd4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000d06:	2317      	movs	r3, #23
 8000d08:	18fe      	adds	r6, r7, r3
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_FLASH_Program+0x124>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 f87d 	bl	8000e0c <FLASH_WaitForLastOperation>
 8000d12:	0003      	movs	r3, r0
 8000d14:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_FLASH_Program+0x128>)
 8000d18:	691a      	ldr	r2, [r3, #16]
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <HAL_FLASH_Program+0x128>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	438a      	bics	r2, r1
 8000d20:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8000d22:	2317      	movs	r3, #23
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d10e      	bne.n	8000d4a <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8000d2c:	2116      	movs	r1, #22
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	3201      	adds	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	2316      	movs	r3, #22
 8000d3a:	18fa      	adds	r2, r7, r3
 8000d3c:	2315      	movs	r3, #21
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d3bd      	bcc.n	8000cc4 <HAL_FLASH_Program+0x84>
 8000d48:	e000      	b.n	8000d4c <HAL_FLASH_Program+0x10c>
      {
        break;
 8000d4a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <HAL_FLASH_Program+0x120>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	761a      	strb	r2, [r3, #24]

  return status;
 8000d52:	2317      	movs	r3, #23
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	781b      	ldrb	r3, [r3, #0]
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b007      	add	sp, #28
 8000d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d60:	20000e08 	.word	0x20000e08
 8000d64:	0000c350 	.word	0x0000c350
 8000d68:	40022000 	.word	0x40022000

08000d6c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_FLASH_Unlock+0x40>)
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	4013      	ands	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <HAL_FLASH_Unlock+0x40>)
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_FLASH_Unlock+0x44>)
 8000d86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_FLASH_Unlock+0x40>)
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_FLASH_Unlock+0x48>)
 8000d8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_FLASH_Unlock+0x40>)
 8000d90:	691b      	ldr	r3, [r3, #16]
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	4013      	ands	r3, r2
 8000d96:	d002      	beq.n	8000d9e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	40022000 	.word	0x40022000
 8000db0:	45670123 	.word	0x45670123
 8000db4:	cdef89ab 	.word	0xcdef89ab

08000db8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_FLASH_Lock+0x18>)
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_FLASH_Lock+0x18>)
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	0018      	movs	r0, r3
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	000a      	movs	r2, r1
 8000dde:	1cbb      	adds	r3, r7, #2
 8000de0:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <FLASH_Program_HalfWord+0x30>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <FLASH_Program_HalfWord+0x34>)
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <FLASH_Program_HalfWord+0x34>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	430a      	orrs	r2, r1
 8000df2:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	1cba      	adds	r2, r7, #2
 8000df8:	8812      	ldrh	r2, [r2, #0]
 8000dfa:	801a      	strh	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000e08 	.word	0x20000e08
 8000e08:	40022000 	.word	0x40022000

08000e0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fbf2 	bl	80005fc <HAL_GetTick>
 8000e18:	0003      	movs	r3, r0
 8000e1a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e1c:	e00f      	b.n	8000e3e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3301      	adds	r3, #1
 8000e22:	d00c      	beq.n	8000e3e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d007      	beq.n	8000e3a <FLASH_WaitForLastOperation+0x2e>
 8000e2a:	f7ff fbe7 	bl	80005fc <HAL_GetTick>
 8000e2e:	0002      	movs	r2, r0
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d201      	bcs.n	8000e3e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e01f      	b.n	8000e7e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <FLASH_WaitForLastOperation+0x7c>)
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d0e9      	beq.n	8000e1e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <FLASH_WaitForLastOperation+0x7c>)
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2220      	movs	r2, #32
 8000e50:	4013      	ands	r3, r2
 8000e52:	2b20      	cmp	r3, #32
 8000e54:	d102      	bne.n	8000e5c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <FLASH_WaitForLastOperation+0x7c>)
 8000e58:	2220      	movs	r2, #32
 8000e5a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <FLASH_WaitForLastOperation+0x7c>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	2210      	movs	r2, #16
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	d005      	beq.n	8000e74 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <FLASH_WaitForLastOperation+0x7c>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d103      	bne.n	8000e7c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e74:	f000 f80a 	bl	8000e8c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b004      	add	sp, #16
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40022000 	.word	0x40022000

08000e8c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <FLASH_SetErrorCode+0x58>)
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2210      	movs	r2, #16
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	2b10      	cmp	r3, #16
 8000ea0:	d109      	bne.n	8000eb6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <FLASH_SetErrorCode+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <FLASH_SetErrorCode+0x5c>)
 8000eac:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <FLASH_SetErrorCode+0x58>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d109      	bne.n	8000ed6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <FLASH_SetErrorCode+0x5c>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <FLASH_SetErrorCode+0x5c>)
 8000ecc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000ed6:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <FLASH_SetErrorCode+0x58>)
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	60da      	str	r2, [r3, #12]
}  
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	20000e08 	.word	0x20000e08

08000eec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f02:	4b32      	ldr	r3, [pc, #200]	; (8000fcc <HAL_FLASHEx_Erase+0xe0>)
 8000f04:	7e1b      	ldrb	r3, [r3, #24]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d101      	bne.n	8000f0e <HAL_FLASHEx_Erase+0x22>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e05a      	b.n	8000fc4 <HAL_FLASHEx_Erase+0xd8>
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <HAL_FLASHEx_Erase+0xe0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d116      	bne.n	8000f4a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f1c:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <HAL_FLASHEx_Erase+0xe4>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff ff74 	bl	8000e0c <FLASH_WaitForLastOperation>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d147      	bne.n	8000fb8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8000f28:	f000 f856 	bl	8000fd8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fc      	adds	r4, r7, r3
 8000f30:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <HAL_FLASHEx_Erase+0xe4>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ff6a 	bl	8000e0c <FLASH_WaitForLastOperation>
 8000f38:	0003      	movs	r3, r0
 8000f3a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f3c:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_FLASHEx_Erase+0xe8>)
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_FLASHEx_Erase+0xe8>)
 8000f42:	2104      	movs	r1, #4
 8000f44:	438a      	bics	r2, r1
 8000f46:	611a      	str	r2, [r3, #16]
 8000f48:	e036      	b.n	8000fb8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_FLASHEx_Erase+0xe4>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f7ff ff5d 	bl	8000e0c <FLASH_WaitForLastOperation>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d130      	bne.n	8000fb8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4252      	negs	r2, r2
 8000f5c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	e01f      	b.n	8000fa6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f84d 	bl	8001008 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f6e:	250f      	movs	r5, #15
 8000f70:	197c      	adds	r4, r7, r5
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_FLASHEx_Erase+0xe4>)
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff ff49 	bl	8000e0c <FLASH_WaitForLastOperation>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_FLASHEx_Erase+0xe8>)
 8000f80:	691a      	ldr	r2, [r3, #16]
 8000f82:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_FLASHEx_Erase+0xe8>)
 8000f84:	2102      	movs	r1, #2
 8000f86:	438a      	bics	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8000f8a:	197b      	adds	r3, r7, r5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	601a      	str	r2, [r3, #0]
            break;
 8000f98:	e00e      	b.n	8000fb8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	00d2      	lsls	r2, r2, #3
 8000fa0:	4694      	mov	ip, r2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	029a      	lsls	r2, r3, #10
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3d6      	bcc.n	8000f66 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HAL_FLASHEx_Erase+0xe0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	761a      	strb	r2, [r3, #24]

  return status;
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	18fb      	adds	r3, r7, r3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b004      	add	sp, #16
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	20000e08 	.word	0x20000e08
 8000fd0:	0000c350 	.word	0x0000c350
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <FLASH_MassErase+0x28>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	; (8001004 <FLASH_MassErase+0x2c>)
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <FLASH_MassErase+0x2c>)
 8000fe8:	2104      	movs	r1, #4
 8000fea:	430a      	orrs	r2, r1
 8000fec:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <FLASH_MassErase+0x2c>)
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <FLASH_MassErase+0x2c>)
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	611a      	str	r2, [r3, #16]
}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000e08 	.word	0x20000e08
 8001004:	40022000 	.word	0x40022000

08001008 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <FLASH_PageErase+0x34>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <FLASH_PageErase+0x38>)
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <FLASH_PageErase+0x38>)
 800101c:	2102      	movs	r1, #2
 800101e:	430a      	orrs	r2, r1
 8001020:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <FLASH_PageErase+0x38>)
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <FLASH_PageErase+0x38>)
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <FLASH_PageErase+0x38>)
 800102e:	2140      	movs	r1, #64	; 0x40
 8001030:	430a      	orrs	r2, r1
 8001032:	611a      	str	r2, [r3, #16]
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000e08 	.word	0x20000e08
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e14f      	b.n	80012f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	4013      	ands	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d100      	bne.n	800106c <HAL_GPIO_Init+0x28>
 800106a:	e140      	b.n	80012ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	409a      	lsls	r2, r3
 8001092:	0013      	movs	r3, r2
 8001094:	43da      	mvns	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	43da      	mvns	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	2201      	movs	r2, #1
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
 80010d8:	0013      	movs	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2203      	movs	r2, #3
 80010ec:	4013      	ands	r3, r2
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d017      	beq.n	8001122 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	409a      	lsls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	43da      	mvns	r2, r3
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	409a      	lsls	r2, r3
 8001114:	0013      	movs	r3, r2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	4013      	ands	r3, r2
 800112a:	2b02      	cmp	r3, #2
 800112c:	d123      	bne.n	8001176 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	58d3      	ldr	r3, [r2, r3]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2207      	movs	r2, #7
 8001140:	4013      	ands	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	2107      	movs	r1, #7
 800115a:	400b      	ands	r3, r1
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	6939      	ldr	r1, [r7, #16]
 8001174:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	409a      	lsls	r2, r3
 8001184:	0013      	movs	r3, r2
 8001186:	43da      	mvns	r2, r3
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2203      	movs	r2, #3
 8001194:	401a      	ands	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	409a      	lsls	r2, r3
 800119c:	0013      	movs	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	23c0      	movs	r3, #192	; 0xc0
 80011b0:	029b      	lsls	r3, r3, #10
 80011b2:	4013      	ands	r3, r2
 80011b4:	d100      	bne.n	80011b8 <HAL_GPIO_Init+0x174>
 80011b6:	e09a      	b.n	80012ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b8:	4b54      	ldr	r3, [pc, #336]	; (800130c <HAL_GPIO_Init+0x2c8>)
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_GPIO_Init+0x2c8>)
 80011be:	2101      	movs	r1, #1
 80011c0:	430a      	orrs	r2, r1
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	4b51      	ldr	r3, [pc, #324]	; (800130c <HAL_GPIO_Init+0x2c8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	2201      	movs	r2, #1
 80011ca:	4013      	ands	r3, r2
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_GPIO_Init+0x2cc>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	589b      	ldr	r3, [r3, r2]
 80011dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4013      	ands	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	409a      	lsls	r2, r3
 80011ea:	0013      	movs	r3, r2
 80011ec:	43da      	mvns	r2, r3
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	2390      	movs	r3, #144	; 0x90
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x1e2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a44      	ldr	r2, [pc, #272]	; (8001314 <HAL_GPIO_Init+0x2d0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x1de>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a43      	ldr	r2, [pc, #268]	; (8001318 <HAL_GPIO_Init+0x2d4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x1da>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a42      	ldr	r2, [pc, #264]	; (800131c <HAL_GPIO_Init+0x2d8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x1d6>
 8001216:	2303      	movs	r3, #3
 8001218:	e006      	b.n	8001228 <HAL_GPIO_Init+0x1e4>
 800121a:	2305      	movs	r3, #5
 800121c:	e004      	b.n	8001228 <HAL_GPIO_Init+0x1e4>
 800121e:	2302      	movs	r3, #2
 8001220:	e002      	b.n	8001228 <HAL_GPIO_Init+0x1e4>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <HAL_GPIO_Init+0x1e4>
 8001226:	2300      	movs	r3, #0
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	2103      	movs	r1, #3
 800122c:	400a      	ands	r2, r1
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	4093      	lsls	r3, r2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001238:	4935      	ldr	r1, [pc, #212]	; (8001310 <HAL_GPIO_Init+0x2cc>)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	035b      	lsls	r3, r3, #13
 800125e:	4013      	ands	r3, r2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001270:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43da      	mvns	r2, r3
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	039b      	lsls	r3, r3, #14
 8001288:	4013      	ands	r3, r2
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800129a:	4b21      	ldr	r3, [pc, #132]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43da      	mvns	r2, r3
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	029b      	lsls	r3, r3, #10
 80012b2:	4013      	ands	r3, r2
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	2380      	movs	r3, #128	; 0x80
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	4013      	ands	r3, r2
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <HAL_GPIO_Init+0x2dc>)
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	40da      	lsrs	r2, r3
 80012fc:	1e13      	subs	r3, r2, #0
 80012fe:	d000      	beq.n	8001302 <HAL_GPIO_Init+0x2be>
 8001300:	e6a8      	b.n	8001054 <HAL_GPIO_Init+0x10>
  } 
}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b006      	add	sp, #24
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000
 8001314:	48000400 	.word	0x48000400
 8001318:	48000800 	.word	0x48000800
 800131c:	48000c00 	.word	0x48000c00
 8001320:	40010400 	.word	0x40010400

08001324 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	000a      	movs	r2, r1
 800132e:	1cbb      	adds	r3, r7, #2
 8001330:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	1cba      	adds	r2, r7, #2
 8001338:	8812      	ldrh	r2, [r2, #0]
 800133a:	4013      	ands	r3, r2
 800133c:	d004      	beq.n	8001348 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800133e:	230f      	movs	r3, #15
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	e003      	b.n	8001350 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001350:	230f      	movs	r3, #15
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
  }
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b004      	add	sp, #16
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	0008      	movs	r0, r1
 8001368:	0011      	movs	r1, r2
 800136a:	1cbb      	adds	r3, r7, #2
 800136c:	1c02      	adds	r2, r0, #0
 800136e:	801a      	strh	r2, [r3, #0]
 8001370:	1c7b      	adds	r3, r7, #1
 8001372:	1c0a      	adds	r2, r1, #0
 8001374:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001376:	1c7b      	adds	r3, r7, #1
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d004      	beq.n	8001388 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800137e:	1cbb      	adds	r3, r7, #2
 8001380:	881a      	ldrh	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001386:	e003      	b.n	8001390 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001388:	1cbb      	adds	r3, r7, #2
 800138a:	881a      	ldrh	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e301      	b.n	80019ae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	d100      	bne.n	80013b6 <HAL_RCC_OscConfig+0x1e>
 80013b4:	e08d      	b.n	80014d2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013b6:	4bc3      	ldr	r3, [pc, #780]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	220c      	movs	r2, #12
 80013bc:	4013      	ands	r3, r2
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d00e      	beq.n	80013e0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013c2:	4bc0      	ldr	r3, [pc, #768]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	220c      	movs	r2, #12
 80013c8:	4013      	ands	r3, r2
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d116      	bne.n	80013fc <HAL_RCC_OscConfig+0x64>
 80013ce:	4bbd      	ldr	r3, [pc, #756]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	025b      	lsls	r3, r3, #9
 80013d6:	401a      	ands	r2, r3
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10d      	bne.n	80013fc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4bb8      	ldr	r3, [pc, #736]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x56>
 80013ec:	e070      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d000      	beq.n	80013f8 <HAL_RCC_OscConfig+0x60>
 80013f6:	e06b      	b.n	80014d0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e2d8      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d107      	bne.n	8001414 <HAL_RCC_OscConfig+0x7c>
 8001404:	4baf      	ldr	r3, [pc, #700]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4bae      	ldr	r3, [pc, #696]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800140a:	2180      	movs	r1, #128	; 0x80
 800140c:	0249      	lsls	r1, r1, #9
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e02f      	b.n	8001474 <HAL_RCC_OscConfig+0xdc>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x9e>
 800141c:	4ba9      	ldr	r3, [pc, #676]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4ba8      	ldr	r3, [pc, #672]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001422:	49a9      	ldr	r1, [pc, #676]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001424:	400a      	ands	r2, r1
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	4ba6      	ldr	r3, [pc, #664]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4ba5      	ldr	r3, [pc, #660]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800142e:	49a7      	ldr	r1, [pc, #668]	; (80016cc <HAL_RCC_OscConfig+0x334>)
 8001430:	400a      	ands	r2, r1
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e01e      	b.n	8001474 <HAL_RCC_OscConfig+0xdc>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10e      	bne.n	800145c <HAL_RCC_OscConfig+0xc4>
 800143e:	4ba1      	ldr	r3, [pc, #644]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4ba0      	ldr	r3, [pc, #640]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	02c9      	lsls	r1, r1, #11
 8001448:	430a      	orrs	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	4b9d      	ldr	r3, [pc, #628]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b9c      	ldr	r3, [pc, #624]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0249      	lsls	r1, r1, #9
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xdc>
 800145c:	4b99      	ldr	r3, [pc, #612]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b98      	ldr	r3, [pc, #608]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001462:	4999      	ldr	r1, [pc, #612]	; (80016c8 <HAL_RCC_OscConfig+0x330>)
 8001464:	400a      	ands	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	4b96      	ldr	r3, [pc, #600]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b95      	ldr	r3, [pc, #596]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800146e:	4997      	ldr	r1, [pc, #604]	; (80016cc <HAL_RCC_OscConfig+0x334>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d014      	beq.n	80014a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff f8be 	bl	80005fc <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001486:	f7ff f8b9 	bl	80005fc <HAL_GetTick>
 800148a:	0002      	movs	r2, r0
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e28a      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001498:	4b8a      	ldr	r3, [pc, #552]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	4013      	ands	r3, r2
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0xee>
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff f8a9 	bl	80005fc <HAL_GetTick>
 80014aa:	0003      	movs	r3, r0
 80014ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff f8a4 	bl	80005fc <HAL_GetTick>
 80014b4:	0002      	movs	r2, r0
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b64      	cmp	r3, #100	; 0x64
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e275      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c2:	4b80      	ldr	r3, [pc, #512]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	029b      	lsls	r3, r3, #10
 80014ca:	4013      	ands	r3, r2
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x118>
 80014ce:	e000      	b.n	80014d2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d100      	bne.n	80014de <HAL_RCC_OscConfig+0x146>
 80014dc:	e069      	b.n	80015b2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014de:	4b79      	ldr	r3, [pc, #484]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	220c      	movs	r2, #12
 80014e4:	4013      	ands	r3, r2
 80014e6:	d00b      	beq.n	8001500 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014e8:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	220c      	movs	r2, #12
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d11c      	bne.n	800152e <HAL_RCC_OscConfig+0x196>
 80014f4:	4b73      	ldr	r3, [pc, #460]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	4013      	ands	r3, r2
 80014fe:	d116      	bne.n	800152e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001500:	4b70      	ldr	r3, [pc, #448]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d005      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e24b      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	22f8      	movs	r2, #248	; 0xf8
 800151c:	4393      	bics	r3, r2
 800151e:	0019      	movs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	00da      	lsls	r2, r3, #3
 8001526:	4b67      	ldr	r3, [pc, #412]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001528:	430a      	orrs	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152c:	e041      	b.n	80015b2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d024      	beq.n	8001580 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001536:	4b63      	ldr	r3, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b62      	ldr	r3, [pc, #392]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800153c:	2101      	movs	r1, #1
 800153e:	430a      	orrs	r2, r1
 8001540:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001542:	f7ff f85b 	bl	80005fc <HAL_GetTick>
 8001546:	0003      	movs	r3, r0
 8001548:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154c:	f7ff f856 	bl	80005fc <HAL_GetTick>
 8001550:	0002      	movs	r2, r0
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e227      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b59      	ldr	r3, [pc, #356]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2202      	movs	r2, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d0f1      	beq.n	800154c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b56      	ldr	r3, [pc, #344]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	22f8      	movs	r2, #248	; 0xf8
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00da      	lsls	r2, r3, #3
 8001578:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e018      	b.n	80015b2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001580:	4b50      	ldr	r3, [pc, #320]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001586:	2101      	movs	r1, #1
 8001588:	438a      	bics	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff f836 	bl	80005fc <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff f831 	bl	80005fc <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e202      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a8:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2202      	movs	r2, #2
 80015ae:	4013      	ands	r3, r2
 80015b0:	d1f1      	bne.n	8001596 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2208      	movs	r2, #8
 80015b8:	4013      	ands	r3, r2
 80015ba:	d036      	beq.n	800162a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d019      	beq.n	80015f8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c4:	4b3f      	ldr	r3, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015c8:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff f814 	bl	80005fc <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff f80f 	bl	80005fc <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1e0      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ec:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0f1      	beq.n	80015da <HAL_RCC_OscConfig+0x242>
 80015f6:	e018      	b.n	800162a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f8:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	2101      	movs	r1, #1
 8001600:	438a      	bics	r2, r1
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7fe fffa 	bl	80005fc <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7fe fff5 	bl	80005fc <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1c6      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1f1      	bne.n	800160e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2204      	movs	r2, #4
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x29e>
 8001634:	e0b4      	b.n	80017a0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	201f      	movs	r0, #31
 8001638:	183b      	adds	r3, r7, r0
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001640:	69da      	ldr	r2, [r3, #28]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	055b      	lsls	r3, r3, #21
 8001646:	4013      	ands	r3, r2
 8001648:	d110      	bne.n	800166c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800164c:	69da      	ldr	r2, [r3, #28]
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	0549      	lsls	r1, r1, #21
 8001654:	430a      	orrs	r2, r1
 8001656:	61da      	str	r2, [r3, #28]
 8001658:	4b1a      	ldr	r3, [pc, #104]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 800165a:	69da      	ldr	r2, [r3, #28]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	055b      	lsls	r3, r3, #21
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001666:	183b      	adds	r3, r7, r0
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4013      	ands	r3, r2
 8001676:	d11a      	bne.n	80016ae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	0049      	lsls	r1, r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7fe ffb9 	bl	80005fc <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7fe ffb4 	bl	80005fc <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b64      	cmp	r3, #100	; 0x64
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e185      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_RCC_OscConfig+0x338>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d10e      	bne.n	80016d4 <HAL_RCC_OscConfig+0x33c>
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80016b8:	6a1a      	ldr	r2, [r3, #32]
 80016ba:	4b02      	ldr	r3, [pc, #8]	; (80016c4 <HAL_RCC_OscConfig+0x32c>)
 80016bc:	2101      	movs	r1, #1
 80016be:	430a      	orrs	r2, r1
 80016c0:	621a      	str	r2, [r3, #32]
 80016c2:	e035      	b.n	8001730 <HAL_RCC_OscConfig+0x398>
 80016c4:	40021000 	.word	0x40021000
 80016c8:	fffeffff 	.word	0xfffeffff
 80016cc:	fffbffff 	.word	0xfffbffff
 80016d0:	40007000 	.word	0x40007000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d10c      	bne.n	80016f6 <HAL_RCC_OscConfig+0x35e>
 80016dc:	4bb6      	ldr	r3, [pc, #728]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80016de:	6a1a      	ldr	r2, [r3, #32]
 80016e0:	4bb5      	ldr	r3, [pc, #724]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80016e2:	2101      	movs	r1, #1
 80016e4:	438a      	bics	r2, r1
 80016e6:	621a      	str	r2, [r3, #32]
 80016e8:	4bb3      	ldr	r3, [pc, #716]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80016ea:	6a1a      	ldr	r2, [r3, #32]
 80016ec:	4bb2      	ldr	r3, [pc, #712]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80016ee:	2104      	movs	r1, #4
 80016f0:	438a      	bics	r2, r1
 80016f2:	621a      	str	r2, [r3, #32]
 80016f4:	e01c      	b.n	8001730 <HAL_RCC_OscConfig+0x398>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b05      	cmp	r3, #5
 80016fc:	d10c      	bne.n	8001718 <HAL_RCC_OscConfig+0x380>
 80016fe:	4bae      	ldr	r3, [pc, #696]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001700:	6a1a      	ldr	r2, [r3, #32]
 8001702:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001704:	2104      	movs	r1, #4
 8001706:	430a      	orrs	r2, r1
 8001708:	621a      	str	r2, [r3, #32]
 800170a:	4bab      	ldr	r3, [pc, #684]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	4baa      	ldr	r3, [pc, #680]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001710:	2101      	movs	r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	621a      	str	r2, [r3, #32]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0x398>
 8001718:	4ba7      	ldr	r3, [pc, #668]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800171a:	6a1a      	ldr	r2, [r3, #32]
 800171c:	4ba6      	ldr	r3, [pc, #664]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800171e:	2101      	movs	r1, #1
 8001720:	438a      	bics	r2, r1
 8001722:	621a      	str	r2, [r3, #32]
 8001724:	4ba4      	ldr	r3, [pc, #656]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001726:	6a1a      	ldr	r2, [r3, #32]
 8001728:	4ba3      	ldr	r3, [pc, #652]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800172a:	2104      	movs	r1, #4
 800172c:	438a      	bics	r2, r1
 800172e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d014      	beq.n	8001762 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7fe ff60 	bl	80005fc <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e009      	b.n	8001756 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7fe ff5b 	bl	80005fc <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a9b      	ldr	r2, [pc, #620]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e12b      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001756:	4b98      	ldr	r3, [pc, #608]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	2202      	movs	r2, #2
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x3aa>
 8001760:	e013      	b.n	800178a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7fe ff4b 	bl	80005fc <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	e009      	b.n	8001780 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176c:	f7fe ff46 	bl	80005fc <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	4a91      	ldr	r2, [pc, #580]	; (80019bc <HAL_RCC_OscConfig+0x624>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e116      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b8d      	ldr	r3, [pc, #564]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800178a:	231f      	movs	r3, #31
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d105      	bne.n	80017a0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001794:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	4b87      	ldr	r3, [pc, #540]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800179a:	4989      	ldr	r1, [pc, #548]	; (80019c0 <HAL_RCC_OscConfig+0x628>)
 800179c:	400a      	ands	r2, r1
 800179e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2210      	movs	r2, #16
 80017a6:	4013      	ands	r3, r2
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d12a      	bne.n	8001808 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017b2:	4b81      	ldr	r3, [pc, #516]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80017b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b6:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80017b8:	2104      	movs	r1, #4
 80017ba:	430a      	orrs	r2, r1
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80017be:	4b7e      	ldr	r3, [pc, #504]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80017c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c2:	4b7d      	ldr	r3, [pc, #500]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ca:	f7fe ff17 	bl	80005fc <HAL_GetTick>
 80017ce:	0003      	movs	r3, r0
 80017d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017d4:	f7fe ff12 	bl	80005fc <HAL_GetTick>
 80017d8:	0002      	movs	r2, r0
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0e3      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80017e6:	4b74      	ldr	r3, [pc, #464]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0f1      	beq.n	80017d4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80017f0:	4b71      	ldr	r3, [pc, #452]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	22f8      	movs	r2, #248	; 0xf8
 80017f6:	4393      	bics	r3, r2
 80017f8:	0019      	movs	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	00da      	lsls	r2, r3, #3
 8001800:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001802:	430a      	orrs	r2, r1
 8001804:	635a      	str	r2, [r3, #52]	; 0x34
 8001806:	e034      	b.n	8001872 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	3305      	adds	r3, #5
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001810:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001816:	2104      	movs	r1, #4
 8001818:	438a      	bics	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	22f8      	movs	r2, #248	; 0xf8
 8001822:	4393      	bics	r3, r2
 8001824:	0019      	movs	r1, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	00da      	lsls	r2, r3, #3
 800182c:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800182e:	430a      	orrs	r2, r1
 8001830:	635a      	str	r2, [r3, #52]	; 0x34
 8001832:	e01e      	b.n	8001872 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001834:	4b60      	ldr	r3, [pc, #384]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001838:	4b5f      	ldr	r3, [pc, #380]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800183a:	2104      	movs	r1, #4
 800183c:	430a      	orrs	r2, r1
 800183e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001844:	4b5c      	ldr	r3, [pc, #368]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001846:	2101      	movs	r1, #1
 8001848:	438a      	bics	r2, r1
 800184a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184c:	f7fe fed6 	bl	80005fc <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001856:	f7fe fed1 	bl	80005fc <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0a2      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	2202      	movs	r2, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d1f1      	bne.n	8001856 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d100      	bne.n	800187c <HAL_RCC_OscConfig+0x4e4>
 800187a:	e097      	b.n	80019ac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187c:	4b4e      	ldr	r3, [pc, #312]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
 8001884:	2b08      	cmp	r3, #8
 8001886:	d100      	bne.n	800188a <HAL_RCC_OscConfig+0x4f2>
 8001888:	e06b      	b.n	8001962 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d14c      	bne.n	800192c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b49      	ldr	r3, [pc, #292]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001898:	494a      	ldr	r1, [pc, #296]	; (80019c4 <HAL_RCC_OscConfig+0x62c>)
 800189a:	400a      	ands	r2, r1
 800189c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7fe fead 	bl	80005fc <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a8:	f7fe fea8 	bl	80005fc <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e079      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	049b      	lsls	r3, r3, #18
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c6:	4b3c      	ldr	r3, [pc, #240]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	220f      	movs	r2, #15
 80018cc:	4393      	bics	r3, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018d6:	430a      	orrs	r2, r1
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4a3a      	ldr	r2, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x630>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ec:	431a      	orrs	r2, r3
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f4:	4b30      	ldr	r3, [pc, #192]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0449      	lsls	r1, r1, #17
 80018fe:	430a      	orrs	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7fe fe7b 	bl	80005fc <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe fe76 	bl	80005fc <HAL_GetTick>
 8001910:	0002      	movs	r2, r0
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e047      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	049b      	lsls	r3, r3, #18
 8001926:	4013      	ands	r3, r2
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x574>
 800192a:	e03f      	b.n	80019ac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001932:	4924      	ldr	r1, [pc, #144]	; (80019c4 <HAL_RCC_OscConfig+0x62c>)
 8001934:	400a      	ands	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7fe fe60 	bl	80005fc <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001942:	f7fe fe5b 	bl	80005fc <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e02c      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001954:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	049b      	lsls	r3, r3, #18
 800195c:	4013      	ands	r3, r2
 800195e:	d1f0      	bne.n	8001942 <HAL_RCC_OscConfig+0x5aa>
 8001960:	e024      	b.n	80019ac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e01f      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_RCC_OscConfig+0x620>)
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	429a      	cmp	r2, r3
 8001988:	d10e      	bne.n	80019a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	220f      	movs	r2, #15
 800198e:	401a      	ands	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	23f0      	movs	r3, #240	; 0xf0
 800199c:	039b      	lsls	r3, r3, #14
 800199e:	401a      	ands	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e000      	b.n	80019ae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b008      	add	sp, #32
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	40021000 	.word	0x40021000
 80019bc:	00001388 	.word	0x00001388
 80019c0:	efffffff 	.word	0xefffffff
 80019c4:	feffffff 	.word	0xfeffffff
 80019c8:	ffc2ffff 	.word	0xffc2ffff

080019cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e0b3      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b5b      	ldr	r3, [pc, #364]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d911      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b58      	ldr	r3, [pc, #352]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4393      	bics	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a00:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e09a      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2202      	movs	r2, #2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d015      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2204      	movs	r2, #4
 8001a22:	4013      	ands	r3, r2
 8001a24:	d006      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a2c:	21e0      	movs	r1, #224	; 0xe0
 8001a2e:	00c9      	lsls	r1, r1, #3
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	22f0      	movs	r2, #240	; 0xf0
 8001a3a:	4393      	bics	r3, r2
 8001a3c:	0019      	movs	r1, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d040      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	4013      	ands	r3, r2
 8001a64:	d114      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e06e      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e062      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a82:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2202      	movs	r2, #2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e05b      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2203      	movs	r2, #3
 8001a96:	4393      	bics	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4b2d      	ldr	r3, [pc, #180]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa4:	f7fe fdaa 	bl	80005fc <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7fe fda5 	bl	80005fc <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_RCC_ClockConfig+0x18c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e042      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	401a      	ands	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1ec      	bne.n	8001aae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4013      	ands	r3, r2
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d211      	bcs.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4393      	bics	r3, r2
 8001aea:	0019      	movs	r1, r3
 8001aec:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_RCC_ClockConfig+0x184>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4013      	ands	r3, r2
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d001      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e020      	b.n	8001b48 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d009      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_RCC_ClockConfig+0x190>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	0019      	movs	r1, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b24:	f000 f820 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b28:	0001      	movs	r1, r0
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <HAL_RCC_ClockConfig+0x188>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	220f      	movs	r2, #15
 8001b32:	4013      	ands	r3, r2
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x194>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	000a      	movs	r2, r1
 8001b3a:	40da      	lsrs	r2, r3
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_RCC_ClockConfig+0x198>)
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7fe fd15 	bl	8000570 <HAL_InitTick>
  
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40022000 	.word	0x40022000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	00001388 	.word	0x00001388
 8001b5c:	fffff8ff 	.word	0xfffff8ff
 8001b60:	0800954c 	.word	0x0800954c
 8001b64:	200006a0 	.word	0x200006a0

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001b82:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	220c      	movs	r2, #12
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x30>
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x36>
 8001b96:	e02c      	b.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	e02c      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	4a16      	ldr	r2, [pc, #88]	; (8001c10 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
 8001bb8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	025b      	lsls	r3, r3, #9
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d009      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	4810      	ldr	r0, [pc, #64]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bc8:	f7fe fab0 	bl	800012c <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	001a      	movs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4353      	muls	r3, r2
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	000a      	movs	r2, r1
 8001bdc:	0152      	lsls	r2, r2, #5
 8001bde:	1a52      	subs	r2, r2, r1
 8001be0:	0193      	lsls	r3, r2, #6
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	185b      	adds	r3, r3, r1
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	613b      	str	r3, [r7, #16]
      break;
 8001bf0:	e002      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bf2:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bf4:	613b      	str	r3, [r7, #16]
      break;
 8001bf6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bf8:	693b      	ldr	r3, [r7, #16]
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b006      	add	sp, #24
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	40021000 	.word	0x40021000
 8001c08:	007a1200 	.word	0x007a1200
 8001c0c:	080093f4 	.word	0x080093f4
 8001c10:	08009404 	.word	0x08009404

08001c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c18:	4b02      	ldr	r3, [pc, #8]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	200006a0 	.word	0x200006a0

08001c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c2c:	f7ff fff2 	bl	8001c14 <HAL_RCC_GetHCLKFreq>
 8001c30:	0001      	movs	r1, r0
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	2207      	movs	r2, #7
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	40d9      	lsrs	r1, r3
 8001c42:	000b      	movs	r3, r1
}    
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	0800955c 	.word	0x0800955c

08001c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0a8      	b.n	8001db8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	2382      	movs	r3, #130	; 0x82
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d009      	beq.n	8001c8e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
 8001c80:	e005      	b.n	8001c8e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	225d      	movs	r2, #93	; 0x5d
 8001c98:	5c9b      	ldrb	r3, [r3, r2]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	225c      	movs	r2, #92	; 0x5c
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	0018      	movs	r0, r3
 8001cac:	f006 ff52 	bl	8008b54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	225d      	movs	r2, #93	; 0x5d
 8001cb4:	2102      	movs	r1, #2
 8001cb6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	23e0      	movs	r3, #224	; 0xe0
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d902      	bls.n	8001cda <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e002      	b.n	8001ce0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	23f0      	movs	r3, #240	; 0xf0
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d008      	beq.n	8001cfe <HAL_SPI_Init+0xaa>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	23e0      	movs	r3, #224	; 0xe0
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d002      	beq.n	8001cfe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	2382      	movs	r3, #130	; 0x82
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	401a      	ands	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6899      	ldr	r1, [r3, #8]
 8001d0c:	2384      	movs	r3, #132	; 0x84
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	400b      	ands	r3, r1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2102      	movs	r1, #2
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	2101      	movs	r1, #1
 8001d24:	400b      	ands	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6999      	ldr	r1, [r3, #24]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	400b      	ands	r3, r1
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2138      	movs	r1, #56	; 0x38
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	400b      	ands	r3, r1
 8001d46:	431a      	orrs	r2, r3
 8001d48:	0011      	movs	r1, r2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	019b      	lsls	r3, r3, #6
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	2204      	movs	r2, #4
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	400b      	ands	r3, r1
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d74:	2108      	movs	r1, #8
 8001d76:	400b      	ands	r3, r1
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68d9      	ldr	r1, [r3, #12]
 8001d7e:	23f0      	movs	r3, #240	; 0xf0
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	400b      	ands	r3, r1
 8001d84:	431a      	orrs	r2, r3
 8001d86:	0011      	movs	r1, r2
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69da      	ldr	r2, [r3, #28]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <HAL_SPI_Init+0x16c>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	225d      	movs	r2, #93	; 0x5d
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b004      	add	sp, #16
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	fffff7ff 	.word	0xfffff7ff

08001dc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	1dbb      	adds	r3, r7, #6
 8001dd2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dd4:	231f      	movs	r3, #31
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	225c      	movs	r2, #92	; 0x5c
 8001de0:	5c9b      	ldrb	r3, [r3, r2]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_SPI_Transmit+0x26>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e147      	b.n	800207a <HAL_SPI_Transmit+0x2b6>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	225c      	movs	r2, #92	; 0x5c
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001df2:	f7fe fc03 	bl	80005fc <HAL_GetTick>
 8001df6:	0003      	movs	r3, r0
 8001df8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001dfa:	2316      	movs	r3, #22
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	1dba      	adds	r2, r7, #6
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	225d      	movs	r2, #93	; 0x5d
 8001e08:	5c9b      	ldrb	r3, [r3, r2]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d004      	beq.n	8001e1a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001e10:	231f      	movs	r3, #31
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2202      	movs	r2, #2
 8001e16:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e18:	e128      	b.n	800206c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_SPI_Transmit+0x64>
 8001e20:	1dbb      	adds	r3, r7, #6
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d104      	bne.n	8001e32 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001e28:	231f      	movs	r3, #31
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e30:	e11c      	b.n	800206c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	225d      	movs	r2, #93	; 0x5d
 8001e36:	2103      	movs	r1, #3
 8001e38:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1dba      	adds	r2, r7, #6
 8001e4a:	8812      	ldrh	r2, [r2, #0]
 8001e4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1dba      	adds	r2, r7, #6
 8001e52:	8812      	ldrh	r2, [r2, #0]
 8001e54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2244      	movs	r2, #68	; 0x44
 8001e60:	2100      	movs	r1, #0
 8001e62:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2246      	movs	r2, #70	; 0x46
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d110      	bne.n	8001ea6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2140      	movs	r1, #64	; 0x40
 8001e90:	438a      	bics	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2180      	movs	r1, #128	; 0x80
 8001ea0:	01c9      	lsls	r1, r1, #7
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2240      	movs	r2, #64	; 0x40
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b40      	cmp	r3, #64	; 0x40
 8001eb2:	d007      	beq.n	8001ec4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2140      	movs	r1, #64	; 0x40
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	23e0      	movs	r3, #224	; 0xe0
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d952      	bls.n	8001f76 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_SPI_Transmit+0x11e>
 8001ed8:	2316      	movs	r3, #22
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d143      	bne.n	8001f6a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee6:	881a      	ldrh	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	1c9a      	adds	r2, r3, #2
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	3b01      	subs	r3, #1
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f06:	e030      	b.n	8001f6a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d112      	bne.n	8001f3c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1a:	881a      	ldrh	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f26:	1c9a      	adds	r2, r3, #2
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3b01      	subs	r3, #1
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f3a:	e016      	b.n	8001f6a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f3c:	f7fe fb5e 	bl	80005fc <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d802      	bhi.n	8001f52 <HAL_SPI_Transmit+0x18e>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_SPI_Transmit+0x194>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001f58:	231f      	movs	r3, #31
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	225d      	movs	r2, #93	; 0x5d
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]
          goto error;
 8001f68:	e080      	b.n	800206c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1c9      	bne.n	8001f08 <HAL_SPI_Transmit+0x144>
 8001f74:	e053      	b.n	800201e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <HAL_SPI_Transmit+0x1c4>
 8001f7e:	2316      	movs	r3, #22
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d145      	bne.n	8002014 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	330c      	adds	r3, #12
 8001f92:	7812      	ldrb	r2, [r2, #0]
 8001f94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001fae:	e031      	b.n	8002014 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d113      	bne.n	8001fe6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fe4:	e016      	b.n	8002014 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe6:	f7fe fb09 	bl	80005fc <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d802      	bhi.n	8001ffc <HAL_SPI_Transmit+0x238>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	d102      	bne.n	8002002 <HAL_SPI_Transmit+0x23e>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d108      	bne.n	8002014 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2203      	movs	r2, #3
 8002008:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	225d      	movs	r2, #93	; 0x5d
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]
          goto error;
 8002012:	e02b      	b.n	800206c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1c8      	bne.n	8001fb0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	6839      	ldr	r1, [r7, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0018      	movs	r0, r3
 8002026:	f000 fcef 	bl	8002a08 <SPI_EndRxTxTransaction>
 800202a:	1e03      	subs	r3, r0, #0
 800202c:	d002      	beq.n	8002034 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800205a:	231f      	movs	r3, #31
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e003      	b.n	800206c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	225d      	movs	r2, #93	; 0x5d
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	225c      	movs	r2, #92	; 0x5c
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002074:	231f      	movs	r3, #31
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b008      	add	sp, #32
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	1dbb      	adds	r3, r7, #6
 8002092:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002094:	2117      	movs	r1, #23
 8002096:	187b      	adds	r3, r7, r1
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	225d      	movs	r2, #93	; 0x5d
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d003      	beq.n	80020b0 <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	2202      	movs	r2, #2
 80020ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80020ae:	e12b      	b.n	8002308 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	2382      	movs	r3, #130	; 0x82
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d113      	bne.n	80020e4 <HAL_SPI_Receive+0x60>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10f      	bne.n	80020e4 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	225d      	movs	r2, #93	; 0x5d
 80020c8:	2104      	movs	r1, #4
 80020ca:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020cc:	1dbb      	adds	r3, r7, #6
 80020ce:	881c      	ldrh	r4, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	0023      	movs	r3, r4
 80020dc:	f000 f924 	bl	8002328 <HAL_SPI_TransmitReceive>
 80020e0:	0003      	movs	r3, r0
 80020e2:	e118      	b.n	8002316 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	225c      	movs	r2, #92	; 0x5c
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_SPI_Receive+0x6e>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e111      	b.n	8002316 <HAL_SPI_Receive+0x292>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	225c      	movs	r2, #92	; 0x5c
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020fa:	f7fe fa7f 	bl	80005fc <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_SPI_Receive+0x8c>
 8002108:	1dbb      	adds	r3, r7, #6
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d104      	bne.n	800211a <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002110:	2317      	movs	r3, #23
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
    goto error;
 8002118:	e0f6      	b.n	8002308 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	225d      	movs	r2, #93	; 0x5d
 800211e:	2104      	movs	r1, #4
 8002120:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1dba      	adds	r2, r7, #6
 8002132:	2144      	movs	r1, #68	; 0x44
 8002134:	8812      	ldrh	r2, [r2, #0]
 8002136:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1dba      	adds	r2, r7, #6
 800213c:	2146      	movs	r1, #70	; 0x46
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	23e0      	movs	r3, #224	; 0xe0
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	496a      	ldr	r1, [pc, #424]	; (8002320 <HAL_SPI_Receive+0x29c>)
 8002178:	400a      	ands	r2, r1
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	e008      	b.n	8002190 <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	0149      	lsls	r1, r1, #5
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	429a      	cmp	r2, r3
 800219a:	d10f      	bne.n	80021bc <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2140      	movs	r1, #64	; 0x40
 80021a8:	438a      	bics	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	495b      	ldr	r1, [pc, #364]	; (8002324 <HAL_SPI_Receive+0x2a0>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	4013      	ands	r3, r2
 80021c6:	2b40      	cmp	r3, #64	; 0x40
 80021c8:	d007      	beq.n	80021da <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	23e0      	movs	r3, #224	; 0xe0
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d900      	bls.n	80021e8 <HAL_SPI_Receive+0x164>
 80021e6:	e071      	b.n	80022cc <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021e8:	e035      	b.n	8002256 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2201      	movs	r2, #1
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d117      	bne.n	8002228 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	330c      	adds	r3, #12
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2246      	movs	r2, #70	; 0x46
 8002218:	5a9b      	ldrh	r3, [r3, r2]
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b299      	uxth	r1, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2246      	movs	r2, #70	; 0x46
 8002224:	5299      	strh	r1, [r3, r2]
 8002226:	e016      	b.n	8002256 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002228:	f7fe f9e8 	bl	80005fc <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d802      	bhi.n	800223e <HAL_SPI_Receive+0x1ba>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_SPI_Receive+0x1c0>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002244:	2317      	movs	r3, #23
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2203      	movs	r2, #3
 800224a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	225d      	movs	r2, #93	; 0x5d
 8002250:	2101      	movs	r1, #1
 8002252:	5499      	strb	r1, [r3, r2]
          goto error;
 8002254:	e058      	b.n	8002308 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2246      	movs	r2, #70	; 0x46
 800225a:	5a9b      	ldrh	r3, [r3, r2]
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1c3      	bne.n	80021ea <HAL_SPI_Receive+0x166>
 8002262:	e039      	b.n	80022d8 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	2b01      	cmp	r3, #1
 8002270:	d115      	bne.n	800229e <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	b292      	uxth	r2, r2
 800227e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	1c9a      	adds	r2, r3, #2
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2246      	movs	r2, #70	; 0x46
 800228e:	5a9b      	ldrh	r3, [r3, r2]
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b299      	uxth	r1, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2246      	movs	r2, #70	; 0x46
 800229a:	5299      	strh	r1, [r3, r2]
 800229c:	e016      	b.n	80022cc <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800229e:	f7fe f9ad 	bl	80005fc <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d802      	bhi.n	80022b4 <HAL_SPI_Receive+0x230>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_SPI_Receive+0x236>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d108      	bne.n	80022cc <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 80022ba:	2317      	movs	r3, #23
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	2203      	movs	r2, #3
 80022c0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	225d      	movs	r2, #93	; 0x5d
 80022c6:	2101      	movs	r1, #1
 80022c8:	5499      	strb	r1, [r3, r2]
          goto error;
 80022ca:	e01d      	b.n	8002308 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2246      	movs	r2, #70	; 0x46
 80022d0:	5a9b      	ldrh	r3, [r3, r2]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1c5      	bne.n	8002264 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	0018      	movs	r0, r3
 80022e0:	f000 fb34 	bl	800294c <SPI_EndRxTransaction>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d002      	beq.n	80022ee <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d004      	beq.n	8002300 <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 80022f6:	2317      	movs	r3, #23
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	e003      	b.n	8002308 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	225d      	movs	r2, #93	; 0x5d
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	225c      	movs	r2, #92	; 0x5c
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002310:	2317      	movs	r3, #23
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
}
 8002316:	0018      	movs	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	b007      	add	sp, #28
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	ffffefff 	.word	0xffffefff
 8002324:	ffffbfff 	.word	0xffffbfff

08002328 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	001a      	movs	r2, r3
 8002336:	1cbb      	adds	r3, r7, #2
 8002338:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800233e:	2323      	movs	r3, #35	; 0x23
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	225c      	movs	r2, #92	; 0x5c
 800234a:	5c9b      	ldrb	r3, [r3, r2]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x2c>
 8002350:	2302      	movs	r3, #2
 8002352:	e1c4      	b.n	80026de <HAL_SPI_TransmitReceive+0x3b6>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	225c      	movs	r2, #92	; 0x5c
 8002358:	2101      	movs	r1, #1
 800235a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800235c:	f7fe f94e 	bl	80005fc <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002364:	201b      	movs	r0, #27
 8002366:	183b      	adds	r3, r7, r0
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	215d      	movs	r1, #93	; 0x5d
 800236c:	5c52      	ldrb	r2, [r2, r1]
 800236e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002376:	2312      	movs	r3, #18
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	1cba      	adds	r2, r7, #2
 800237c:	8812      	ldrh	r2, [r2, #0]
 800237e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002380:	183b      	adds	r3, r7, r0
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d011      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x84>
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	2382      	movs	r3, #130	; 0x82
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	429a      	cmp	r2, r3
 8002390:	d107      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <HAL_SPI_TransmitReceive+0x7a>
 800239a:	183b      	adds	r3, r7, r0
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d004      	beq.n	80023ac <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80023a2:	2323      	movs	r3, #35	; 0x23
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2202      	movs	r2, #2
 80023a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80023aa:	e191      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d006      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x98>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_SPI_TransmitReceive+0x98>
 80023b8:	1cbb      	adds	r3, r7, #2
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d104      	bne.n	80023ca <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80023c0:	2323      	movs	r3, #35	; 0x23
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80023c8:	e182      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	225d      	movs	r2, #93	; 0x5d
 80023ce:	5c9b      	ldrb	r3, [r3, r2]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d003      	beq.n	80023de <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	225d      	movs	r2, #93	; 0x5d
 80023da:	2105      	movs	r1, #5
 80023dc:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1cba      	adds	r2, r7, #2
 80023ee:	2146      	movs	r1, #70	; 0x46
 80023f0:	8812      	ldrh	r2, [r2, #0]
 80023f2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1cba      	adds	r2, r7, #2
 80023f8:	2144      	movs	r1, #68	; 0x44
 80023fa:	8812      	ldrh	r2, [r2, #0]
 80023fc:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1cba      	adds	r2, r7, #2
 8002408:	8812      	ldrh	r2, [r2, #0]
 800240a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1cba      	adds	r2, r7, #2
 8002410:	8812      	ldrh	r2, [r2, #0]
 8002412:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	23e0      	movs	r3, #224	; 0xe0
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	429a      	cmp	r2, r3
 800242a:	d908      	bls.n	800243e <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	49ac      	ldr	r1, [pc, #688]	; (80026e8 <HAL_SPI_TransmitReceive+0x3c0>)
 8002438:	400a      	ands	r2, r1
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	e008      	b.n	8002450 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0149      	lsls	r1, r1, #5
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	4013      	ands	r3, r2
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d007      	beq.n	800246e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	23e0      	movs	r3, #224	; 0xe0
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	429a      	cmp	r2, r3
 8002478:	d800      	bhi.n	800247c <HAL_SPI_TransmitReceive+0x154>
 800247a:	e083      	b.n	8002584 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x168>
 8002484:	2312      	movs	r3, #18
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d000      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x168>
 800248e:	e06d      	b.n	800256c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	1c9a      	adds	r2, r3, #2
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024b4:	e05a      	b.n	800256c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2202      	movs	r2, #2
 80024be:	4013      	ands	r3, r2
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d11b      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x1d4>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d016      	beq.n	80024fc <HAL_SPI_TransmitReceive+0x1d4>
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d113      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	1c9a      	adds	r2, r3, #2
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2201      	movs	r2, #1
 8002504:	4013      	ands	r3, r2
 8002506:	2b01      	cmp	r3, #1
 8002508:	d11c      	bne.n	8002544 <HAL_SPI_TransmitReceive+0x21c>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2246      	movs	r2, #70	; 0x46
 800250e:	5a9b      	ldrh	r3, [r3, r2]
 8002510:	b29b      	uxth	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	b292      	uxth	r2, r2
 8002522:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	1c9a      	adds	r2, r3, #2
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2246      	movs	r2, #70	; 0x46
 8002532:	5a9b      	ldrh	r3, [r3, r2]
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b299      	uxth	r1, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2246      	movs	r2, #70	; 0x46
 800253e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002544:	f7fe f85a 	bl	80005fc <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002550:	429a      	cmp	r2, r3
 8002552:	d80b      	bhi.n	800256c <HAL_SPI_TransmitReceive+0x244>
 8002554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002556:	3301      	adds	r3, #1
 8002558:	d008      	beq.n	800256c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800255a:	2323      	movs	r3, #35	; 0x23
 800255c:	18fb      	adds	r3, r7, r3
 800255e:	2203      	movs	r2, #3
 8002560:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	225d      	movs	r2, #93	; 0x5d
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
        goto error;
 800256a:	e0b1      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d19f      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x18e>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2246      	movs	r2, #70	; 0x46
 800257a:	5a9b      	ldrh	r3, [r3, r2]
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d199      	bne.n	80024b6 <HAL_SPI_TransmitReceive+0x18e>
 8002582:	e089      	b.n	8002698 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x270>
 800258c:	2312      	movs	r3, #18
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d000      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x270>
 8002596:	e074      	b.n	8002682 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	7812      	ldrb	r2, [r2, #0]
 80025a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025be:	e060      	b.n	8002682 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2202      	movs	r2, #2
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d11c      	bne.n	8002608 <HAL_SPI_TransmitReceive+0x2e0>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d017      	beq.n	8002608 <HAL_SPI_TransmitReceive+0x2e0>
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d114      	bne.n	8002608 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2201      	movs	r2, #1
 8002610:	4013      	ands	r3, r2
 8002612:	2b01      	cmp	r3, #1
 8002614:	d11e      	bne.n	8002654 <HAL_SPI_TransmitReceive+0x32c>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2246      	movs	r2, #70	; 0x46
 800261a:	5a9b      	ldrh	r3, [r3, r2]
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d018      	beq.n	8002654 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	001a      	movs	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	7812      	ldrb	r2, [r2, #0]
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2246      	movs	r2, #70	; 0x46
 8002642:	5a9b      	ldrh	r3, [r3, r2]
 8002644:	b29b      	uxth	r3, r3
 8002646:	3b01      	subs	r3, #1
 8002648:	b299      	uxth	r1, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2246      	movs	r2, #70	; 0x46
 800264e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002650:	2301      	movs	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002654:	f7fd ffd2 	bl	80005fc <HAL_GetTick>
 8002658:	0002      	movs	r2, r0
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002660:	429a      	cmp	r2, r3
 8002662:	d802      	bhi.n	800266a <HAL_SPI_TransmitReceive+0x342>
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	3301      	adds	r3, #1
 8002668:	d102      	bne.n	8002670 <HAL_SPI_TransmitReceive+0x348>
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	2b00      	cmp	r3, #0
 800266e:	d108      	bne.n	8002682 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8002670:	2323      	movs	r3, #35	; 0x23
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	2203      	movs	r2, #3
 8002676:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	225d      	movs	r2, #93	; 0x5d
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]
        goto error;
 8002680:	e026      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d199      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x298>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2246      	movs	r2, #70	; 0x46
 8002690:	5a9b      	ldrh	r3, [r3, r2]
 8002692:	b29b      	uxth	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d193      	bne.n	80025c0 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 f9b2 	bl	8002a08 <SPI_EndRxTxTransaction>
 80026a4:	1e03      	subs	r3, r0, #0
 80026a6:	d006      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80026a8:	2323      	movs	r3, #35	; 0x23
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d004      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80026be:	2323      	movs	r3, #35	; 0x23
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e003      	b.n	80026d0 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	225d      	movs	r2, #93	; 0x5d
 80026cc:	2101      	movs	r1, #1
 80026ce:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	225c      	movs	r2, #92	; 0x5c
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026d8:	2323      	movs	r3, #35	; 0x23
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b00a      	add	sp, #40	; 0x28
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	ffffefff 	.word	0xffffefff

080026ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026fc:	f7fd ff7e 	bl	80005fc <HAL_GetTick>
 8002700:	0002      	movs	r2, r0
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	18d3      	adds	r3, r2, r3
 800270a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800270c:	f7fd ff76 	bl	80005fc <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002714:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	015b      	lsls	r3, r3, #5
 800271a:	0d1b      	lsrs	r3, r3, #20
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	4353      	muls	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002722:	e058      	b.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	3301      	adds	r3, #1
 8002728:	d055      	beq.n	80027d6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800272a:	f7fd ff67 	bl	80005fc <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	429a      	cmp	r2, r3
 8002738:	d902      	bls.n	8002740 <SPI_WaitFlagStateUntilTimeout+0x54>
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d142      	bne.n	80027c6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	21e0      	movs	r1, #224	; 0xe0
 800274c:	438a      	bics	r2, r1
 800274e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	2382      	movs	r3, #130	; 0x82
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	429a      	cmp	r2, r3
 800275a:	d113      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x98>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	429a      	cmp	r2, r3
 8002766:	d005      	beq.n	8002774 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	429a      	cmp	r2, r3
 8002772:	d107      	bne.n	8002784 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	438a      	bics	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	019b      	lsls	r3, r3, #6
 800278c:	429a      	cmp	r2, r3
 800278e:	d110      	bne.n	80027b2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	491a      	ldr	r1, [pc, #104]	; (8002804 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800279c:	400a      	ands	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	0189      	lsls	r1, r1, #6
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	225d      	movs	r2, #93	; 0x5d
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	225c      	movs	r2, #92	; 0x5c
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e017      	b.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	4013      	ands	r3, r2
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	425a      	negs	r2, r3
 80027e6:	4153      	adcs	r3, r2
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	001a      	movs	r2, r3
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d197      	bne.n	8002724 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	0018      	movs	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	b008      	add	sp, #32
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	200006a0 	.word	0x200006a0
 8002804:	ffffdfff 	.word	0xffffdfff

08002808 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800281e:	f7fd feed 	bl	80005fc <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	1a9b      	subs	r3, r3, r2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	18d3      	adds	r3, r2, r3
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800282e:	f7fd fee5 	bl	80005fc <HAL_GetTick>
 8002832:	0003      	movs	r3, r0
 8002834:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	189b      	adds	r3, r3, r2
 8002848:	00da      	lsls	r2, r3, #3
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	0d1b      	lsrs	r3, r3, #20
 800284e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002850:	4353      	muls	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002854:	e068      	b.n	8002928 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	23c0      	movs	r3, #192	; 0xc0
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	429a      	cmp	r2, r3
 800285e:	d10a      	bne.n	8002876 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d107      	bne.n	8002876 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	2117      	movs	r1, #23
 800286e:	187b      	adds	r3, r7, r1
 8002870:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002872:	187b      	adds	r3, r7, r1
 8002874:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	d055      	beq.n	8002928 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800287c:	f7fd febe 	bl	80005fc <HAL_GetTick>
 8002880:	0002      	movs	r2, r0
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	429a      	cmp	r2, r3
 800288a:	d902      	bls.n	8002892 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2b00      	cmp	r3, #0
 8002890:	d142      	bne.n	8002918 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	21e0      	movs	r1, #224	; 0xe0
 800289e:	438a      	bics	r2, r1
 80028a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	2382      	movs	r3, #130	; 0x82
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d113      	bne.n	80028d6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	021b      	lsls	r3, r3, #8
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d005      	beq.n	80028c6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d107      	bne.n	80028d6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	438a      	bics	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028da:	2380      	movs	r3, #128	; 0x80
 80028dc:	019b      	lsls	r3, r3, #6
 80028de:	429a      	cmp	r2, r3
 80028e0:	d110      	bne.n	8002904 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4916      	ldr	r1, [pc, #88]	; (8002948 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0189      	lsls	r1, r1, #6
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	225d      	movs	r2, #93	; 0x5d
 8002908:	2101      	movs	r1, #1
 800290a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	225c      	movs	r2, #92	; 0x5c
 8002910:	2100      	movs	r1, #0
 8002912:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e010      	b.n	800293a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	3b01      	subs	r3, #1
 8002926:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	429a      	cmp	r2, r3
 8002936:	d18e      	bne.n	8002856 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	0018      	movs	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	b00a      	add	sp, #40	; 0x28
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	200006a0 	.word	0x200006a0
 8002948:	ffffdfff 	.word	0xffffdfff

0800294c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	2382      	movs	r3, #130	; 0x82
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	429a      	cmp	r2, r3
 8002962:	d113      	bne.n	800298c <SPI_EndRxTransaction+0x40>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	429a      	cmp	r2, r3
 800296e:	d005      	beq.n	800297c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	0013      	movs	r3, r2
 8002996:	2200      	movs	r2, #0
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	f7ff fea7 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d007      	beq.n	80029b2 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	2220      	movs	r2, #32
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e026      	b.n	8002a00 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	2382      	movs	r3, #130	; 0x82
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d11f      	bne.n	80029fe <SPI_EndRxTransaction+0xb2>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	021b      	lsls	r3, r3, #8
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d005      	beq.n	80029d6 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d113      	bne.n	80029fe <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	23c0      	movs	r3, #192	; 0xc0
 80029da:	00d9      	lsls	r1, r3, #3
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	0013      	movs	r3, r2
 80029e4:	2200      	movs	r2, #0
 80029e6:	f7ff ff0f 	bl	8002808 <SPI_WaitFifoStateUntilTimeout>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d007      	beq.n	80029fe <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f2:	2220      	movs	r2, #32
 80029f4:	431a      	orrs	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e000      	b.n	8002a00 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b004      	add	sp, #16
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	23c0      	movs	r3, #192	; 0xc0
 8002a18:	0159      	lsls	r1, r3, #5
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	0013      	movs	r3, r2
 8002a22:	2200      	movs	r2, #0
 8002a24:	f7ff fef0 	bl	8002808 <SPI_WaitFifoStateUntilTimeout>
 8002a28:	1e03      	subs	r3, r0, #0
 8002a2a:	d007      	beq.n	8002a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a30:	2220      	movs	r2, #32
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e027      	b.n	8002a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	0013      	movs	r3, r2
 8002a46:	2200      	movs	r2, #0
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	f7ff fe4f 	bl	80026ec <SPI_WaitFlagStateUntilTimeout>
 8002a4e:	1e03      	subs	r3, r0, #0
 8002a50:	d007      	beq.n	8002a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	2220      	movs	r2, #32
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e014      	b.n	8002a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	23c0      	movs	r3, #192	; 0xc0
 8002a66:	00d9      	lsls	r1, r3, #3
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	0013      	movs	r3, r2
 8002a70:	2200      	movs	r2, #0
 8002a72:	f7ff fec9 	bl	8002808 <SPI_WaitFifoStateUntilTimeout>
 8002a76:	1e03      	subs	r3, r0, #0
 8002a78:	d007      	beq.n	8002a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7e:	2220      	movs	r2, #32
 8002a80:	431a      	orrs	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e000      	b.n	8002a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e042      	b.n	8002b2c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223d      	movs	r2, #61	; 0x3d
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223c      	movs	r2, #60	; 0x3c
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f006 f895 	bl	8008bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	223d      	movs	r2, #61	; 0x3d
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	f000 f9dd 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2246      	movs	r2, #70	; 0x46
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	223e      	movs	r2, #62	; 0x3e
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	223f      	movs	r2, #63	; 0x3f
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2240      	movs	r2, #64	; 0x40
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2241      	movs	r2, #65	; 0x41
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2242      	movs	r2, #66	; 0x42
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2243      	movs	r2, #67	; 0x43
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2244      	movs	r2, #68	; 0x44
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2245      	movs	r2, #69	; 0x45
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223d      	movs	r2, #61	; 0x3d
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223d      	movs	r2, #61	; 0x3d
 8002b40:	5c9b      	ldrb	r3, [r3, r2]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e035      	b.n	8002bb8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223d      	movs	r2, #61	; 0x3d
 8002b50:	2102      	movs	r1, #2
 8002b52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIM_Base_Start_IT+0x8c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_TIM_Base_Start_IT+0x4e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <HAL_TIM_Base_Start_IT+0x90>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_TIM_Base_Start_IT+0x4e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <HAL_TIM_Base_Start_IT+0x94>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	2207      	movs	r2, #7
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d010      	beq.n	8002bb6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	e007      	b.n	8002bb6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b004      	add	sp, #16
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40000400 	.word	0x40000400
 8002bc8:	40014000 	.word	0x40014000

08002bcc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	438a      	bics	r2, r1
 8002be2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <HAL_TIM_Base_Stop_IT+0x54>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	d10d      	bne.n	8002c0c <HAL_TIM_Base_Stop_IT+0x40>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <HAL_TIM_Base_Stop_IT+0x58>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_Base_Stop_IT+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2101      	movs	r1, #1
 8002c08:	438a      	bics	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	223d      	movs	r2, #61	; 0x3d
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b002      	add	sp, #8
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	00001111 	.word	0x00001111
 8002c24:	00000444 	.word	0x00000444

08002c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d124      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2202      	movs	r2, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d11d      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2203      	movs	r2, #3
 8002c52:	4252      	negs	r2, r2
 8002c54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2203      	movs	r2, #3
 8002c64:	4013      	ands	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 f8fa 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002c70:	e007      	b.n	8002c82 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	0018      	movs	r0, r3
 8002c76:	f000 f8ed 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f000 f8f9 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d125      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d11e      	bne.n	8002ce2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2205      	movs	r2, #5
 8002caa:	4252      	negs	r2, r2
 8002cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699a      	ldr	r2, [r3, #24]
 8002cba:	23c0      	movs	r3, #192	; 0xc0
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 f8cd 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002cca:	e007      	b.n	8002cdc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f8c0 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 f8cc 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2208      	movs	r2, #8
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d124      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11d      	bne.n	8002d3a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2209      	movs	r2, #9
 8002d04:	4252      	negs	r2, r2
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2203      	movs	r2, #3
 8002d16:	4013      	ands	r3, r2
 8002d18:	d004      	beq.n	8002d24 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 f8a1 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002d22:	e007      	b.n	8002d34 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 f894 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 f8a0 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2210      	movs	r2, #16
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	d125      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2210      	movs	r2, #16
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d11e      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2211      	movs	r2, #17
 8002d5c:	4252      	negs	r2, r2
 8002d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2208      	movs	r2, #8
 8002d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	69da      	ldr	r2, [r3, #28]
 8002d6c:	23c0      	movs	r3, #192	; 0xc0
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4013      	ands	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 f874 	bl	8002e64 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e007      	b.n	8002d8e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f867 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f873 	bl	8002e74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10f      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d108      	bne.n	8002dc2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4252      	negs	r2, r2
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f005 fdb7 	bl	8008930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d10f      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d108      	bne.n	8002df0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2281      	movs	r2, #129	; 0x81
 8002de4:	4252      	negs	r2, r2
 8002de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f8d0 	bl	8002f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2240      	movs	r2, #64	; 0x40
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d10f      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	2240      	movs	r2, #64	; 0x40
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b40      	cmp	r3, #64	; 0x40
 8002e0a:	d108      	bne.n	8002e1e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2241      	movs	r2, #65	; 0x41
 8002e12:	4252      	negs	r2, r2
 8002e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 f833 	bl	8002e84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2220      	movs	r2, #32
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b20      	cmp	r3, #32
 8002e2a:	d10f      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d108      	bne.n	8002e4c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2221      	movs	r2, #33	; 0x21
 8002e40:	4252      	negs	r2, r2
 8002e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	0018      	movs	r0, r3
 8002e48:	f000 f89a 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e4c:	46c0      	nop			; (mov r8, r8)
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b002      	add	sp, #8
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b002      	add	sp, #8
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	b002      	add	sp, #8
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <TIM_Base_SetConfig+0xd0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0x20>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a2e      	ldr	r2, [pc, #184]	; (8002f68 <TIM_Base_SetConfig+0xd4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d108      	bne.n	8002ec6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2270      	movs	r2, #112	; 0x70
 8002eb8:	4393      	bics	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a26      	ldr	r2, [pc, #152]	; (8002f64 <TIM_Base_SetConfig+0xd0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <TIM_Base_SetConfig+0xd4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00f      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <TIM_Base_SetConfig+0xd8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <TIM_Base_SetConfig+0xdc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <TIM_Base_SetConfig+0xe0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_Base_SetConfig+0x62>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <TIM_Base_SetConfig+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <TIM_Base_SetConfig+0xe8>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	4393      	bics	r3, r2
 8002f0e:	001a      	movs	r2, r3
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <TIM_Base_SetConfig+0xd0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <TIM_Base_SetConfig+0xba>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <TIM_Base_SetConfig+0xdc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_Base_SetConfig+0xba>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <TIM_Base_SetConfig+0xe0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_Base_SetConfig+0xba>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <TIM_Base_SetConfig+0xe4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d103      	bne.n	8002f56 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	615a      	str	r2, [r3, #20]
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b004      	add	sp, #16
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40002000 	.word	0x40002000
 8002f70:	40014000 	.word	0x40014000
 8002f74:	40014400 	.word	0x40014400
 8002f78:	40014800 	.word	0x40014800
 8002f7c:	fffffcff 	.word	0xfffffcff

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e044      	b.n	800303c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2278      	movs	r2, #120	; 0x78
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f005 fe37 	bl	8008c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2224      	movs	r2, #36	; 0x24
 8002fce:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2101      	movs	r1, #1
 8002fdc:	438a      	bics	r2, r1
 8002fde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 fb10 	bl	8003608 <UART_SetConfig>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e024      	b.n	800303c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f000 fc43 	bl	8003888 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	490d      	ldr	r1, [pc, #52]	; (8003044 <HAL_UART_Init+0xa4>)
 800300e:	400a      	ands	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2108      	movs	r1, #8
 800301e:	438a      	bics	r2, r1
 8003020:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0018      	movs	r0, r3
 8003036:	f000 fcdb 	bl	80039f0 <UART_CheckIdleState>
 800303a:	0003      	movs	r3, r0
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}
 8003044:	fffff7ff 	.word	0xfffff7ff

08003048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b0ab      	sub	sp, #172	; 0xac
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	22a4      	movs	r2, #164	; 0xa4
 8003058:	18b9      	adds	r1, r7, r2
 800305a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	20a0      	movs	r0, #160	; 0xa0
 8003064:	1839      	adds	r1, r7, r0
 8003066:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	219c      	movs	r1, #156	; 0x9c
 8003070:	1879      	adds	r1, r7, r1
 8003072:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003074:	0011      	movs	r1, r2
 8003076:	18bb      	adds	r3, r7, r2
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a99      	ldr	r2, [pc, #612]	; (80032e0 <HAL_UART_IRQHandler+0x298>)
 800307c:	4013      	ands	r3, r2
 800307e:	2298      	movs	r2, #152	; 0x98
 8003080:	18bc      	adds	r4, r7, r2
 8003082:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003084:	18bb      	adds	r3, r7, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d114      	bne.n	80030b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800308c:	187b      	adds	r3, r7, r1
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2220      	movs	r2, #32
 8003092:	4013      	ands	r3, r2
 8003094:	d00f      	beq.n	80030b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003096:	183b      	adds	r3, r7, r0
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d100      	bne.n	80030aa <HAL_UART_IRQHandler+0x62>
 80030a8:	e286      	b.n	80035b8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	0010      	movs	r0, r2
 80030b2:	4798      	blx	r3
      }
      return;
 80030b4:	e280      	b.n	80035b8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030b6:	2398      	movs	r3, #152	; 0x98
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d100      	bne.n	80030c2 <HAL_UART_IRQHandler+0x7a>
 80030c0:	e114      	b.n	80032ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030c2:	239c      	movs	r3, #156	; 0x9c
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d106      	bne.n	80030dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030ce:	23a0      	movs	r3, #160	; 0xa0
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a83      	ldr	r2, [pc, #524]	; (80032e4 <HAL_UART_IRQHandler+0x29c>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	d100      	bne.n	80030dc <HAL_UART_IRQHandler+0x94>
 80030da:	e107      	b.n	80032ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030dc:	23a4      	movs	r3, #164	; 0xa4
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d012      	beq.n	800310e <HAL_UART_IRQHandler+0xc6>
 80030e8:	23a0      	movs	r3, #160	; 0xa0
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00b      	beq.n	800310e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2284      	movs	r2, #132	; 0x84
 8003102:	589b      	ldr	r3, [r3, r2]
 8003104:	2201      	movs	r2, #1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2184      	movs	r1, #132	; 0x84
 800310c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800310e:	23a4      	movs	r3, #164	; 0xa4
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2202      	movs	r2, #2
 8003116:	4013      	ands	r3, r2
 8003118:	d011      	beq.n	800313e <HAL_UART_IRQHandler+0xf6>
 800311a:	239c      	movs	r3, #156	; 0x9c
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d00b      	beq.n	800313e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2202      	movs	r2, #2
 800312c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2284      	movs	r2, #132	; 0x84
 8003132:	589b      	ldr	r3, [r3, r2]
 8003134:	2204      	movs	r2, #4
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2184      	movs	r1, #132	; 0x84
 800313c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800313e:	23a4      	movs	r3, #164	; 0xa4
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2204      	movs	r2, #4
 8003146:	4013      	ands	r3, r2
 8003148:	d011      	beq.n	800316e <HAL_UART_IRQHandler+0x126>
 800314a:	239c      	movs	r3, #156	; 0x9c
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d00b      	beq.n	800316e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2204      	movs	r2, #4
 800315c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2284      	movs	r2, #132	; 0x84
 8003162:	589b      	ldr	r3, [r3, r2]
 8003164:	2202      	movs	r2, #2
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2184      	movs	r1, #132	; 0x84
 800316c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800316e:	23a4      	movs	r3, #164	; 0xa4
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	4013      	ands	r3, r2
 8003178:	d017      	beq.n	80031aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800317a:	23a0      	movs	r3, #160	; 0xa0
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2220      	movs	r2, #32
 8003182:	4013      	ands	r3, r2
 8003184:	d105      	bne.n	8003192 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003186:	239c      	movs	r3, #156	; 0x9c
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2208      	movs	r2, #8
 8003198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2284      	movs	r2, #132	; 0x84
 800319e:	589b      	ldr	r3, [r3, r2]
 80031a0:	2208      	movs	r2, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2184      	movs	r1, #132	; 0x84
 80031a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031aa:	23a4      	movs	r3, #164	; 0xa4
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	4013      	ands	r3, r2
 80031b6:	d013      	beq.n	80031e0 <HAL_UART_IRQHandler+0x198>
 80031b8:	23a0      	movs	r3, #160	; 0xa0
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	04db      	lsls	r3, r3, #19
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00c      	beq.n	80031e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2284      	movs	r2, #132	; 0x84
 80031d4:	589b      	ldr	r3, [r3, r2]
 80031d6:	2220      	movs	r2, #32
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2184      	movs	r1, #132	; 0x84
 80031de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2284      	movs	r2, #132	; 0x84
 80031e4:	589b      	ldr	r3, [r3, r2]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d100      	bne.n	80031ec <HAL_UART_IRQHandler+0x1a4>
 80031ea:	e1e7      	b.n	80035bc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031ec:	23a4      	movs	r3, #164	; 0xa4
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2220      	movs	r2, #32
 80031f4:	4013      	ands	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031f8:	23a0      	movs	r3, #160	; 0xa0
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	d008      	beq.n	8003216 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	0010      	movs	r0, r2
 8003214:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2284      	movs	r2, #132	; 0x84
 800321a:	589b      	ldr	r3, [r3, r2]
 800321c:	2194      	movs	r1, #148	; 0x94
 800321e:	187a      	adds	r2, r7, r1
 8003220:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2240      	movs	r2, #64	; 0x40
 800322a:	4013      	ands	r3, r2
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d004      	beq.n	800323a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003230:	187b      	adds	r3, r7, r1
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2228      	movs	r2, #40	; 0x28
 8003236:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003238:	d047      	beq.n	80032ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f000 fdad 	bl	8003d9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	4013      	ands	r3, r2
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d137      	bne.n	80032c0 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003258:	2090      	movs	r0, #144	; 0x90
 800325a:	183a      	adds	r2, r7, r0
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	2301      	movs	r3, #1
 8003260:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2140      	movs	r1, #64	; 0x40
 8003276:	438a      	bics	r2, r1
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	183b      	adds	r3, r7, r0
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003282:	f383 8810 	msr	PRIMASK, r3
}
 8003286:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <HAL_UART_IRQHandler+0x2a0>)
 8003296:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	0018      	movs	r0, r3
 800329e:	f7fd fb9f 	bl	80009e0 <HAL_DMA_Abort_IT>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d01a      	beq.n	80032dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b0:	0018      	movs	r0, r3
 80032b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e012      	b.n	80032dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f003 feac 	bl	8007016 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032be:	e00d      	b.n	80032dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f003 fea7 	bl	8007016 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e008      	b.n	80032dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f003 fea2 	bl	8007016 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2284      	movs	r2, #132	; 0x84
 80032d6:	2100      	movs	r1, #0
 80032d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032da:	e16f      	b.n	80035bc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	46c0      	nop			; (mov r8, r8)
    return;
 80032de:	e16d      	b.n	80035bc <HAL_UART_IRQHandler+0x574>
 80032e0:	0000080f 	.word	0x0000080f
 80032e4:	04000120 	.word	0x04000120
 80032e8:	08004057 	.word	0x08004057

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d000      	beq.n	80032f6 <HAL_UART_IRQHandler+0x2ae>
 80032f4:	e139      	b.n	800356a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032f6:	23a4      	movs	r3, #164	; 0xa4
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2210      	movs	r2, #16
 80032fe:	4013      	ands	r3, r2
 8003300:	d100      	bne.n	8003304 <HAL_UART_IRQHandler+0x2bc>
 8003302:	e132      	b.n	800356a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003304:	23a0      	movs	r3, #160	; 0xa0
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_UART_IRQHandler+0x2ca>
 8003310:	e12b      	b.n	800356a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2210      	movs	r2, #16
 8003318:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	4013      	ands	r3, r2
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d000      	beq.n	800332a <HAL_UART_IRQHandler+0x2e2>
 8003328:	e09f      	b.n	800346a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	217e      	movs	r1, #126	; 0x7e
 8003334:	187b      	adds	r3, r7, r1
 8003336:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003338:	187b      	adds	r3, r7, r1
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d100      	bne.n	8003342 <HAL_UART_IRQHandler+0x2fa>
 8003340:	e13e      	b.n	80035c0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2258      	movs	r2, #88	; 0x58
 8003346:	5a9b      	ldrh	r3, [r3, r2]
 8003348:	187a      	adds	r2, r7, r1
 800334a:	8812      	ldrh	r2, [r2, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d300      	bcc.n	8003352 <HAL_UART_IRQHandler+0x30a>
 8003350:	e136      	b.n	80035c0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	187a      	adds	r2, r7, r1
 8003356:	215a      	movs	r1, #90	; 0x5a
 8003358:	8812      	ldrh	r2, [r2, #0]
 800335a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	2b20      	cmp	r3, #32
 8003364:	d06f      	beq.n	8003446 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003366:	f3ef 8310 	mrs	r3, PRIMASK
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800336e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003370:	2301      	movs	r3, #1
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4992      	ldr	r1, [pc, #584]	; (80035d0 <HAL_UART_IRQHandler+0x588>)
 8003388:	400a      	ands	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003398:	f3ef 8310 	mrs	r3, PRIMASK
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800339e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a0:	677b      	str	r3, [r7, #116]	; 0x74
 80033a2:	2301      	movs	r3, #1
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a8:	f383 8810 	msr	PRIMASK, r3
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2101      	movs	r1, #1
 80033ba:	438a      	bics	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c4:	f383 8810 	msr	PRIMASK, r3
}
 80033c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ca:	f3ef 8310 	mrs	r3, PRIMASK
 80033ce:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	673b      	str	r3, [r7, #112]	; 0x70
 80033d4:	2301      	movs	r3, #1
 80033d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033da:	f383 8810 	msr	PRIMASK, r3
}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	438a      	bics	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	2120      	movs	r1, #32
 8003402:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340a:	f3ef 8310 	mrs	r3, PRIMASK
 800340e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003410:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003414:	2301      	movs	r3, #1
 8003416:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800341a:	f383 8810 	msr	PRIMASK, r3
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2110      	movs	r1, #16
 800342c:	438a      	bics	r2, r1
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003432:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	f383 8810 	msr	PRIMASK, r3
}
 800343a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd fa95 	bl	8000970 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2258      	movs	r2, #88	; 0x58
 8003450:	5a9a      	ldrh	r2, [r3, r2]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	215a      	movs	r1, #90	; 0x5a
 8003456:	5a5b      	ldrh	r3, [r3, r1]
 8003458:	b29b      	uxth	r3, r3
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	b29a      	uxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f003 fd89 	bl	8006f7a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003468:	e0aa      	b.n	80035c0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2258      	movs	r2, #88	; 0x58
 800346e:	5a99      	ldrh	r1, [r3, r2]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	225a      	movs	r2, #90	; 0x5a
 8003474:	5a9b      	ldrh	r3, [r3, r2]
 8003476:	b29a      	uxth	r2, r3
 8003478:	208e      	movs	r0, #142	; 0x8e
 800347a:	183b      	adds	r3, r7, r0
 800347c:	1a8a      	subs	r2, r1, r2
 800347e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	225a      	movs	r2, #90	; 0x5a
 8003484:	5a9b      	ldrh	r3, [r3, r2]
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d100      	bne.n	800348e <HAL_UART_IRQHandler+0x446>
 800348c:	e09a      	b.n	80035c4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800348e:	183b      	adds	r3, r7, r0
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d100      	bne.n	8003498 <HAL_UART_IRQHandler+0x450>
 8003496:	e095      	b.n	80035c4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003498:	f3ef 8310 	mrs	r3, PRIMASK
 800349c:	60fb      	str	r3, [r7, #12]
  return(result);
 800349e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a0:	2488      	movs	r4, #136	; 0x88
 80034a2:	193a      	adds	r2, r7, r4
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	2301      	movs	r3, #1
 80034a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4945      	ldr	r1, [pc, #276]	; (80035d4 <HAL_UART_IRQHandler+0x58c>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80034d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d8:	2484      	movs	r4, #132	; 0x84
 80034da:	193a      	adds	r2, r7, r4
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	f383 8810 	msr	PRIMASK, r3
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2101      	movs	r1, #1
 80034f6:	438a      	bics	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	193b      	adds	r3, r7, r4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f383 8810 	msr	PRIMASK, r3
}
 8003506:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	2120      	movs	r1, #32
 800350e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800351c:	f3ef 8310 	mrs	r3, PRIMASK
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	2480      	movs	r4, #128	; 0x80
 8003526:	193a      	adds	r2, r7, r4
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	2301      	movs	r3, #1
 800352c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003530:	f383 8810 	msr	PRIMASK, r3
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2110      	movs	r1, #16
 8003542:	438a      	bics	r2, r1
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	193b      	adds	r3, r7, r4
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800355a:	183b      	adds	r3, r7, r0
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0011      	movs	r1, r2
 8003562:	0018      	movs	r0, r3
 8003564:	f003 fd09 	bl	8006f7a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003568:	e02c      	b.n	80035c4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800356a:	23a4      	movs	r3, #164	; 0xa4
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2280      	movs	r2, #128	; 0x80
 8003572:	4013      	ands	r3, r2
 8003574:	d00f      	beq.n	8003596 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003576:	23a0      	movs	r3, #160	; 0xa0
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2280      	movs	r2, #128	; 0x80
 800357e:	4013      	ands	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01e      	beq.n	80035c8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	0010      	movs	r0, r2
 8003592:	4798      	blx	r3
    }
    return;
 8003594:	e018      	b.n	80035c8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003596:	23a4      	movs	r3, #164	; 0xa4
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	4013      	ands	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_UART_IRQHandler+0x582>
 80035a2:	23a0      	movs	r3, #160	; 0xa0
 80035a4:	18fb      	adds	r3, r7, r3
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2240      	movs	r2, #64	; 0x40
 80035aa:	4013      	ands	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 fd67 	bl	8004084 <UART_EndTransmit_IT>
    return;
 80035b6:	e008      	b.n	80035ca <HAL_UART_IRQHandler+0x582>
      return;
 80035b8:	46c0      	nop			; (mov r8, r8)
 80035ba:	e006      	b.n	80035ca <HAL_UART_IRQHandler+0x582>
    return;
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	e004      	b.n	80035ca <HAL_UART_IRQHandler+0x582>
      return;
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	e002      	b.n	80035ca <HAL_UART_IRQHandler+0x582>
      return;
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	e000      	b.n	80035ca <HAL_UART_IRQHandler+0x582>
    return;
 80035c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b02b      	add	sp, #172	; 0xac
 80035ce:	bd90      	pop	{r4, r7, pc}
 80035d0:	fffffeff 	.word	0xfffffeff
 80035d4:	fffffedf 	.word	0xfffffedf

080035d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	b002      	add	sp, #8
 8003606:	bd80      	pop	{r7, pc}

08003608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003610:	231e      	movs	r3, #30
 8003612:	18fb      	adds	r3, r7, r3
 8003614:	2200      	movs	r2, #0
 8003616:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a8d      	ldr	r2, [pc, #564]	; (800386c <UART_SetConfig+0x264>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4a88      	ldr	r2, [pc, #544]	; (8003870 <UART_SetConfig+0x268>)
 800364e:	4013      	ands	r3, r2
 8003650:	0019      	movs	r1, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a7f      	ldr	r2, [pc, #508]	; (8003874 <UART_SetConfig+0x26c>)
 8003676:	4013      	ands	r3, r2
 8003678:	0019      	movs	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a7b      	ldr	r2, [pc, #492]	; (8003878 <UART_SetConfig+0x270>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d127      	bne.n	80036de <UART_SetConfig+0xd6>
 800368e:	4b7b      	ldr	r3, [pc, #492]	; (800387c <UART_SetConfig+0x274>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	2203      	movs	r2, #3
 8003694:	4013      	ands	r3, r2
 8003696:	2b03      	cmp	r3, #3
 8003698:	d00d      	beq.n	80036b6 <UART_SetConfig+0xae>
 800369a:	d81b      	bhi.n	80036d4 <UART_SetConfig+0xcc>
 800369c:	2b02      	cmp	r3, #2
 800369e:	d014      	beq.n	80036ca <UART_SetConfig+0xc2>
 80036a0:	d818      	bhi.n	80036d4 <UART_SetConfig+0xcc>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <UART_SetConfig+0xa4>
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d00a      	beq.n	80036c0 <UART_SetConfig+0xb8>
 80036aa:	e013      	b.n	80036d4 <UART_SetConfig+0xcc>
 80036ac:	231f      	movs	r3, #31
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	e021      	b.n	80036fa <UART_SetConfig+0xf2>
 80036b6:	231f      	movs	r3, #31
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	2202      	movs	r2, #2
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e01c      	b.n	80036fa <UART_SetConfig+0xf2>
 80036c0:	231f      	movs	r3, #31
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2204      	movs	r2, #4
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e017      	b.n	80036fa <UART_SetConfig+0xf2>
 80036ca:	231f      	movs	r3, #31
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2208      	movs	r2, #8
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e012      	b.n	80036fa <UART_SetConfig+0xf2>
 80036d4:	231f      	movs	r3, #31
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2210      	movs	r2, #16
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e00d      	b.n	80036fa <UART_SetConfig+0xf2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a67      	ldr	r2, [pc, #412]	; (8003880 <UART_SetConfig+0x278>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d104      	bne.n	80036f2 <UART_SetConfig+0xea>
 80036e8:	231f      	movs	r3, #31
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e003      	b.n	80036fa <UART_SetConfig+0xf2>
 80036f2:	231f      	movs	r3, #31
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2210      	movs	r2, #16
 80036f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	429a      	cmp	r2, r3
 8003704:	d15c      	bne.n	80037c0 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8003706:	231f      	movs	r3, #31
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b08      	cmp	r3, #8
 800370e:	d015      	beq.n	800373c <UART_SetConfig+0x134>
 8003710:	dc18      	bgt.n	8003744 <UART_SetConfig+0x13c>
 8003712:	2b04      	cmp	r3, #4
 8003714:	d00d      	beq.n	8003732 <UART_SetConfig+0x12a>
 8003716:	dc15      	bgt.n	8003744 <UART_SetConfig+0x13c>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <UART_SetConfig+0x11a>
 800371c:	2b02      	cmp	r3, #2
 800371e:	d005      	beq.n	800372c <UART_SetConfig+0x124>
 8003720:	e010      	b.n	8003744 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7fe fa81 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 8003726:	0003      	movs	r3, r0
 8003728:	61bb      	str	r3, [r7, #24]
        break;
 800372a:	e012      	b.n	8003752 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800372c:	4b55      	ldr	r3, [pc, #340]	; (8003884 <UART_SetConfig+0x27c>)
 800372e:	61bb      	str	r3, [r7, #24]
        break;
 8003730:	e00f      	b.n	8003752 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003732:	f7fe fa19 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8003736:	0003      	movs	r3, r0
 8003738:	61bb      	str	r3, [r7, #24]
        break;
 800373a:	e00a      	b.n	8003752 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	61bb      	str	r3, [r7, #24]
        break;
 8003742:	e006      	b.n	8003752 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003748:	231e      	movs	r3, #30
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
        break;
 8003750:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d100      	bne.n	800375a <UART_SetConfig+0x152>
 8003758:	e07a      	b.n	8003850 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	005a      	lsls	r2, r3, #1
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	0019      	movs	r1, r3
 800376c:	0010      	movs	r0, r2
 800376e:	f7fc fcdd 	bl	800012c <__udivsi3>
 8003772:	0003      	movs	r3, r0
 8003774:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b0f      	cmp	r3, #15
 800377a:	d91c      	bls.n	80037b6 <UART_SetConfig+0x1ae>
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	025b      	lsls	r3, r3, #9
 8003782:	429a      	cmp	r2, r3
 8003784:	d217      	bcs.n	80037b6 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	b29a      	uxth	r2, r3
 800378a:	200e      	movs	r0, #14
 800378c:	183b      	adds	r3, r7, r0
 800378e:	210f      	movs	r1, #15
 8003790:	438a      	bics	r2, r1
 8003792:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	b29b      	uxth	r3, r3
 800379a:	2207      	movs	r2, #7
 800379c:	4013      	ands	r3, r2
 800379e:	b299      	uxth	r1, r3
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	183a      	adds	r2, r7, r0
 80037a4:	8812      	ldrh	r2, [r2, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	183a      	adds	r2, r7, r0
 80037b0:	8812      	ldrh	r2, [r2, #0]
 80037b2:	60da      	str	r2, [r3, #12]
 80037b4:	e04c      	b.n	8003850 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80037b6:	231e      	movs	r3, #30
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e047      	b.n	8003850 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d015      	beq.n	80037f6 <UART_SetConfig+0x1ee>
 80037ca:	dc18      	bgt.n	80037fe <UART_SetConfig+0x1f6>
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d00d      	beq.n	80037ec <UART_SetConfig+0x1e4>
 80037d0:	dc15      	bgt.n	80037fe <UART_SetConfig+0x1f6>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <UART_SetConfig+0x1d4>
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d005      	beq.n	80037e6 <UART_SetConfig+0x1de>
 80037da:	e010      	b.n	80037fe <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037dc:	f7fe fa24 	bl	8001c28 <HAL_RCC_GetPCLK1Freq>
 80037e0:	0003      	movs	r3, r0
 80037e2:	61bb      	str	r3, [r7, #24]
        break;
 80037e4:	e012      	b.n	800380c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037e6:	4b27      	ldr	r3, [pc, #156]	; (8003884 <UART_SetConfig+0x27c>)
 80037e8:	61bb      	str	r3, [r7, #24]
        break;
 80037ea:	e00f      	b.n	800380c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ec:	f7fe f9bc 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 80037f0:	0003      	movs	r3, r0
 80037f2:	61bb      	str	r3, [r7, #24]
        break;
 80037f4:	e00a      	b.n	800380c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	61bb      	str	r3, [r7, #24]
        break;
 80037fc:	e006      	b.n	800380c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003802:	231e      	movs	r3, #30
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
        break;
 800380a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01e      	beq.n	8003850 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	085a      	lsrs	r2, r3, #1
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	18d2      	adds	r2, r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	0019      	movs	r1, r3
 8003822:	0010      	movs	r0, r2
 8003824:	f7fc fc82 	bl	800012c <__udivsi3>
 8003828:	0003      	movs	r3, r0
 800382a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	d90a      	bls.n	8003848 <UART_SetConfig+0x240>
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	025b      	lsls	r3, r3, #9
 8003838:	429a      	cmp	r2, r3
 800383a:	d205      	bcs.n	8003848 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60da      	str	r2, [r3, #12]
 8003846:	e003      	b.n	8003850 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003848:	231e      	movs	r3, #30
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800385c:	231e      	movs	r3, #30
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	781b      	ldrb	r3, [r3, #0]
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b008      	add	sp, #32
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	ffff69f3 	.word	0xffff69f3
 8003870:	ffffcfff 	.word	0xffffcfff
 8003874:	fffff4ff 	.word	0xfffff4ff
 8003878:	40013800 	.word	0x40013800
 800387c:	40021000 	.word	0x40021000
 8003880:	40004400 	.word	0x40004400
 8003884:	007a1200 	.word	0x007a1200

08003888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d00b      	beq.n	80038b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <UART_AdvFeatureConfig+0x144>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2202      	movs	r2, #2
 80038b8:	4013      	ands	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a43      	ldr	r2, [pc, #268]	; (80039d0 <UART_AdvFeatureConfig+0x148>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2204      	movs	r2, #4
 80038da:	4013      	ands	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <UART_AdvFeatureConfig+0x14c>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2208      	movs	r2, #8
 80038fc:	4013      	ands	r3, r2
 80038fe:	d00b      	beq.n	8003918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <UART_AdvFeatureConfig+0x150>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2210      	movs	r2, #16
 800391e:	4013      	ands	r3, r2
 8003920:	d00b      	beq.n	800393a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <UART_AdvFeatureConfig+0x154>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2220      	movs	r2, #32
 8003940:	4013      	ands	r3, r2
 8003942:	d00b      	beq.n	800395c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4a25      	ldr	r2, [pc, #148]	; (80039e0 <UART_AdvFeatureConfig+0x158>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2240      	movs	r2, #64	; 0x40
 8003962:	4013      	ands	r3, r2
 8003964:	d01d      	beq.n	80039a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <UART_AdvFeatureConfig+0x15c>)
 800396e:	4013      	ands	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	035b      	lsls	r3, r3, #13
 8003986:	429a      	cmp	r2, r3
 8003988:	d10b      	bne.n	80039a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a15      	ldr	r2, [pc, #84]	; (80039e8 <UART_AdvFeatureConfig+0x160>)
 8003992:	4013      	ands	r3, r2
 8003994:	0019      	movs	r1, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	4013      	ands	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a0e      	ldr	r2, [pc, #56]	; (80039ec <UART_AdvFeatureConfig+0x164>)
 80039b4:	4013      	ands	r3, r2
 80039b6:	0019      	movs	r1, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	605a      	str	r2, [r3, #4]
  }
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	fffdffff 	.word	0xfffdffff
 80039d0:	fffeffff 	.word	0xfffeffff
 80039d4:	fffbffff 	.word	0xfffbffff
 80039d8:	ffff7fff 	.word	0xffff7fff
 80039dc:	ffffefff 	.word	0xffffefff
 80039e0:	ffffdfff 	.word	0xffffdfff
 80039e4:	ffefffff 	.word	0xffefffff
 80039e8:	ff9fffff 	.word	0xff9fffff
 80039ec:	fff7ffff 	.word	0xfff7ffff

080039f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b092      	sub	sp, #72	; 0x48
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2284      	movs	r2, #132	; 0x84
 80039fc:	2100      	movs	r1, #0
 80039fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a00:	f7fc fdfc 	bl	80005fc <HAL_GetTick>
 8003a04:	0003      	movs	r3, r0
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2208      	movs	r2, #8
 8003a10:	4013      	ands	r3, r2
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d12c      	bne.n	8003a70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a18:	2280      	movs	r2, #128	; 0x80
 8003a1a:	0391      	lsls	r1, r2, #14
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4a46      	ldr	r2, [pc, #280]	; (8003b38 <UART_CheckIdleState+0x148>)
 8003a20:	9200      	str	r2, [sp, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f000 f88c 	bl	8003b40 <UART_WaitOnFlagUntilTimeout>
 8003a28:	1e03      	subs	r3, r0, #0
 8003a2a:	d021      	beq.n	8003a70 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a36:	2301      	movs	r3, #1
 8003a38:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	438a      	bics	r2, r1
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	f383 8810 	msr	PRIMASK, r3
}
 8003a5c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2278      	movs	r2, #120	; 0x78
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e05f      	b.n	8003b30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d146      	bne.n	8003b0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	2280      	movs	r2, #128	; 0x80
 8003a82:	03d1      	lsls	r1, r2, #15
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <UART_CheckIdleState+0x148>)
 8003a88:	9200      	str	r2, [sp, #0]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f000 f858 	bl	8003b40 <UART_WaitOnFlagUntilTimeout>
 8003a90:	1e03      	subs	r3, r0, #0
 8003a92:	d03b      	beq.n	8003b0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a94:	f3ef 8310 	mrs	r3, PRIMASK
 8003a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f383 8810 	msr	PRIMASK, r3
}
 8003aa8:	46c0      	nop			; (mov r8, r8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4921      	ldr	r1, [pc, #132]	; (8003b3c <UART_CheckIdleState+0x14c>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f383 8810 	msr	PRIMASK, r3
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	61bb      	str	r3, [r7, #24]
  return(result);
 8003acc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	438a      	bics	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2280      	movs	r2, #128	; 0x80
 8003afc:	2120      	movs	r1, #32
 8003afe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2278      	movs	r2, #120	; 0x78
 8003b04:	2100      	movs	r1, #0
 8003b06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e011      	b.n	8003b30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	2120      	movs	r1, #32
 8003b18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2278      	movs	r2, #120	; 0x78
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b010      	add	sp, #64	; 0x40
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	01ffffff 	.word	0x01ffffff
 8003b3c:	fffffedf 	.word	0xfffffedf

08003b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	1dfb      	adds	r3, r7, #7
 8003b4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b50:	e04b      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3301      	adds	r3, #1
 8003b56:	d048      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fc fd50 	bl	80005fc <HAL_GetTick>
 8003b5c:	0002      	movs	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e04b      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d035      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	2208      	movs	r2, #8
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d111      	bne.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	0018      	movs	r0, r3
 8003b98:	f000 f900 	bl	8003d9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2284      	movs	r2, #132	; 0x84
 8003ba0:	2108      	movs	r1, #8
 8003ba2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2278      	movs	r2, #120	; 0x78
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e02c      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69da      	ldr	r2, [r3, #28]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	401a      	ands	r2, r3
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d112      	bne.n	8003bea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f000 f8e3 	bl	8003d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2284      	movs	r2, #132	; 0x84
 8003bda:	2120      	movs	r1, #32
 8003bdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2278      	movs	r2, #120	; 0x78
 8003be2:	2100      	movs	r1, #0
 8003be4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e00f      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	425a      	negs	r2, r3
 8003bfa:	4153      	adcs	r3, r2
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	001a      	movs	r2, r3
 8003c00:	1dfb      	adds	r3, r7, #7
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d0a4      	beq.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b090      	sub	sp, #64	; 0x40
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1dba      	adds	r2, r7, #6
 8003c2c:	2158      	movs	r1, #88	; 0x58
 8003c2e:	8812      	ldrh	r2, [r2, #0]
 8003c30:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2284      	movs	r2, #132	; 0x84
 8003c36:	2100      	movs	r1, #0
 8003c38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	2122      	movs	r1, #34	; 0x22
 8003c40:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d028      	beq.n	8003c9c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4e:	4a3e      	ldr	r2, [pc, #248]	; (8003d48 <UART_Start_Receive_DMA+0x134>)
 8003c50:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c56:	4a3d      	ldr	r2, [pc, #244]	; (8003d4c <UART_Start_Receive_DMA+0x138>)
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	4a3c      	ldr	r2, [pc, #240]	; (8003d50 <UART_Start_Receive_DMA+0x13c>)
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c66:	2200      	movs	r2, #0
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3324      	adds	r3, #36	; 0x24
 8003c74:	0019      	movs	r1, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	1dbb      	adds	r3, r7, #6
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	f7fc fe10 	bl	80008a4 <HAL_DMA_Start_IT>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d009      	beq.n	8003c9c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2284      	movs	r2, #132	; 0x84
 8003c8c:	2110      	movs	r1, #16
 8003c8e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2280      	movs	r2, #128	; 0x80
 8003c94:	2120      	movs	r1, #32
 8003c96:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e050      	b.n	8003d3e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d019      	beq.n	8003cd8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cae:	2301      	movs	r3, #1
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	f383 8810 	msr	PRIMASK, r3
}
 8003cb8:	46c0      	nop			; (mov r8, r8)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	0049      	lsls	r1, r1, #1
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	f383 8810 	msr	PRIMASK, r3
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cdc:	613b      	str	r3, [r7, #16]
  return(result);
 8003cde:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f383 8810 	msr	PRIMASK, r3
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d10:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	2301      	movs	r3, #1
 8003d16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2140      	movs	r1, #64	; 0x40
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b010      	add	sp, #64	; 0x40
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	08003e65 	.word	0x08003e65
 8003d4c:	08003f91 	.word	0x08003f91
 8003d50:	08003fd3 	.word	0x08003fd3

08003d54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d62:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	2301      	movs	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f383 8810 	msr	PRIMASK, r3
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	21c0      	movs	r1, #192	; 0xc0
 8003d7e:	438a      	bics	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f383 8810 	msr	PRIMASK, r3
}
 8003d8c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b006      	add	sp, #24
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08e      	sub	sp, #56	; 0x38
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da4:	f3ef 8310 	mrs	r3, PRIMASK
 8003da8:	617b      	str	r3, [r7, #20]
  return(result);
 8003daa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dac:	637b      	str	r3, [r7, #52]	; 0x34
 8003dae:	2301      	movs	r3, #1
 8003db0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f383 8810 	msr	PRIMASK, r3
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4926      	ldr	r1, [pc, #152]	; (8003e60 <UART_EndRxTransfer+0xc4>)
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dda:	623b      	str	r3, [r7, #32]
  return(result);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
 8003de0:	2301      	movs	r3, #1
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de6:	f383 8810 	msr	PRIMASK, r3
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	438a      	bics	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	f383 8810 	msr	PRIMASK, r3
}
 8003e06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d118      	bne.n	8003e42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2110      	movs	r1, #16
 8003e32:	438a      	bics	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f383 8810 	msr	PRIMASK, r3
}
 8003e40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	2120      	movs	r1, #32
 8003e48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b00e      	add	sp, #56	; 0x38
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	fffffedf 	.word	0xfffffedf

08003e64 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b094      	sub	sp, #80	; 0x50
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d06f      	beq.n	8003f5a <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7c:	225a      	movs	r2, #90	; 0x5a
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e82:	f3ef 8310 	mrs	r3, PRIMASK
 8003e86:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e88:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f383 8810 	msr	PRIMASK, r3
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	493a      	ldr	r1, [pc, #232]	; (8003f8c <UART_DMAReceiveCplt+0x128>)
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eaa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	f383 8810 	msr	PRIMASK, r3
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	438a      	bics	r2, r1
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef6:	f383 8810 	msr	PRIMASK, r3
}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2140      	movs	r1, #64	; 0x40
 8003f08:	438a      	bics	r2, r1
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d118      	bne.n	8003f5a <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f28:	f3ef 8310 	mrs	r3, PRIMASK
 8003f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f32:	2301      	movs	r3, #1
 8003f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f383 8810 	msr	PRIMASK, r3
}
 8003f3c:	46c0      	nop			; (mov r8, r8)
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2110      	movs	r1, #16
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d108      	bne.n	8003f7a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6a:	2258      	movs	r2, #88	; 0x58
 8003f6c:	5a9a      	ldrh	r2, [r3, r2]
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	0011      	movs	r1, r2
 8003f72:	0018      	movs	r0, r3
 8003f74:	f003 f801 	bl	8006f7a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f78:	e003      	b.n	8003f82 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff fb33 	bl	80035e8 <HAL_UART_RxCpltCallback>
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b014      	add	sp, #80	; 0x50
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	fffffeff 	.word	0xfffffeff

08003f90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10a      	bne.n	8003fc2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2258      	movs	r2, #88	; 0x58
 8003fb0:	5a9b      	ldrh	r3, [r3, r2]
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0011      	movs	r1, r2
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f002 ffdd 	bl	8006f7a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fc0:	e003      	b.n	8003fca <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fb17 	bl	80035f8 <HAL_UART_RxHalfCpltCallback>
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b004      	add	sp, #16
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b086      	sub	sp, #24
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fe4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	589b      	ldr	r3, [r3, r2]
 8003fec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d10a      	bne.n	8004012 <UART_DMAError+0x40>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b21      	cmp	r3, #33	; 0x21
 8004000:	d107      	bne.n	8004012 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2252      	movs	r2, #82	; 0x52
 8004006:	2100      	movs	r1, #0
 8004008:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	0018      	movs	r0, r3
 800400e:	f7ff fea1 	bl	8003d54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	4013      	ands	r3, r2
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d10a      	bne.n	8004036 <UART_DMAError+0x64>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b22      	cmp	r3, #34	; 0x22
 8004024:	d107      	bne.n	8004036 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	225a      	movs	r2, #90	; 0x5a
 800402a:	2100      	movs	r1, #0
 800402c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff feb3 	bl	8003d9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2284      	movs	r2, #132	; 0x84
 800403a:	589b      	ldr	r3, [r3, r2]
 800403c:	2210      	movs	r2, #16
 800403e:	431a      	orrs	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2184      	movs	r1, #132	; 0x84
 8004044:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	0018      	movs	r0, r3
 800404a:	f002 ffe4 	bl	8007016 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b006      	add	sp, #24
 8004054:	bd80      	pop	{r7, pc}

08004056 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	225a      	movs	r2, #90	; 0x5a
 8004068:	2100      	movs	r1, #0
 800406a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2252      	movs	r2, #82	; 0x52
 8004070:	2100      	movs	r1, #0
 8004072:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0018      	movs	r0, r3
 8004078:	f002 ffcd 	bl	8007016 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b004      	add	sp, #16
 8004082:	bd80      	pop	{r7, pc}

08004084 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408c:	f3ef 8310 	mrs	r3, PRIMASK
 8004090:	60bb      	str	r3, [r7, #8]
  return(result);
 8004092:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	2301      	movs	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2140      	movs	r1, #64	; 0x40
 80040ae:	438a      	bics	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fa83 	bl	80035d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040da:	b5b0      	push	{r4, r5, r7, lr}
 80040dc:	b08a      	sub	sp, #40	; 0x28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	1dbb      	adds	r3, r7, #6
 80040e6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	589b      	ldr	r3, [r3, r2]
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d156      	bne.n	80041a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80040f8:	1dbb      	adds	r3, r7, #6
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04e      	b.n	80041a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689a      	ldr	r2, [r3, #8]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	015b      	lsls	r3, r3, #5
 800410c:	429a      	cmp	r2, r3
 800410e:	d109      	bne.n	8004124 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d105      	bne.n	8004124 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2201      	movs	r2, #1
 800411c:	4013      	ands	r3, r2
 800411e:	d001      	beq.n	8004124 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e03e      	b.n	80041a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004130:	2527      	movs	r5, #39	; 0x27
 8004132:	197c      	adds	r4, r7, r5
 8004134:	1dbb      	adds	r3, r7, #6
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff fd69 	bl	8003c14 <UART_Start_Receive_DMA>
 8004142:	0003      	movs	r3, r0
 8004144:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004146:	197b      	adds	r3, r7, r5
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d124      	bne.n	8004198 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	2b01      	cmp	r3, #1
 8004154:	d11c      	bne.n	8004190 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2210      	movs	r2, #16
 800415c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415e:	f3ef 8310 	mrs	r3, PRIMASK
 8004162:	617b      	str	r3, [r7, #20]
  return(result);
 8004164:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004166:	623b      	str	r3, [r7, #32]
 8004168:	2301      	movs	r3, #1
 800416a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f383 8810 	msr	PRIMASK, r3
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2110      	movs	r1, #16
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f383 8810 	msr	PRIMASK, r3
}
 800418e:	e003      	b.n	8004198 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004190:	2327      	movs	r3, #39	; 0x27
 8004192:	18fb      	adds	r3, r7, r3
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004198:	2327      	movs	r3, #39	; 0x27
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	e000      	b.n	80041a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
  }
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b00a      	add	sp, #40	; 0x28
 80041a8:	bdb0      	pop	{r4, r5, r7, pc}

080041aa <prepare_USR_response_msg>:


const char USR_DETECTION_MSG[LEN_USR_DETECTION_MSG+1] = "0123456789012345678901234567890123456789";

size_t prepare_USR_response_msg(const USR_response_t *p, char* buf)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
	const uint8_t LEN_IP = 4;
 80041b4:	230a      	movs	r3, #10
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	2204      	movs	r2, #4
 80041ba:	701a      	strb	r2, [r3, #0]
	const uint8_t LEN_MAC = 6;
 80041bc:	2109      	movs	r1, #9
 80041be:	187b      	adds	r3, r7, r1
 80041c0:	2206      	movs	r2, #6
 80041c2:	701a      	strb	r2, [r3, #0]
	char* s = buf;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	60fb      	str	r3, [r7, #12]
	int8_t i = 0; // i must be signed, for counting down can go below 0
 80041c8:	200b      	movs	r0, #11
 80041ca:	183b      	adds	r3, r7, r0
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]

	// MAC 6B
	for(i = LEN_MAC - 1; i >= 0; --i )
 80041d0:	187b      	adds	r3, r7, r1
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	183b      	adds	r3, r7, r0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e011      	b.n	8004202 <prepare_USR_response_msg+0x58>
	{
		*(s++) = p->MAC[i];
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	200b      	movs	r0, #11
 80041e4:	183b      	adds	r3, r7, r0
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	b25b      	sxtb	r3, r3
 80041ea:	18d2      	adds	r2, r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1c59      	adds	r1, r3, #1
 80041f0:	60f9      	str	r1, [r7, #12]
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	701a      	strb	r2, [r3, #0]
	for(i = LEN_MAC - 1; i >= 0; --i )
 80041f6:	183b      	adds	r3, r7, r0
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	210b      	movs	r1, #11
 8004204:	187b      	adds	r3, r7, r1
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b7f      	cmp	r3, #127	; 0x7f
 800420a:	d9e8      	bls.n	80041de <prepare_USR_response_msg+0x34>
	}
	// version 1B
	*(s++) = 0x42;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	60fa      	str	r2, [r7, #12]
 8004212:	2242      	movs	r2, #66	; 0x42
 8004214:	701a      	strb	r2, [r3, #0]

	/*  21 Bytes */
	//
	for(i = LEN_IP - 1; i >=0; -- i )
 8004216:	230a      	movs	r3, #10
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	3b01      	subs	r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	187b      	adds	r3, r7, r1
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e011      	b.n	800424a <prepare_USR_response_msg+0xa0>
	{
		*(s++) = p->IPv4_target[i];
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	200b      	movs	r0, #11
 800422c:	183b      	adds	r3, r7, r0
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b25b      	sxtb	r3, r3
 8004232:	18d2      	adds	r2, r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	1c59      	adds	r1, r3, #1
 8004238:	60f9      	str	r1, [r7, #12]
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 800423e:	183b      	adds	r3, r7, r0
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	3b01      	subs	r3, #1
 8004244:	b2da      	uxtb	r2, r3
 8004246:	183b      	adds	r3, r7, r0
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	220b      	movs	r2, #11
 800424c:	18bb      	adds	r3, r7, r2
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b7f      	cmp	r3, #127	; 0x7f
 8004252:	d9e8      	bls.n	8004226 <prepare_USR_response_msg+0x7c>
	}
	//
	for(i = 0; i < 2; ++ i )
 8004254:	18bb      	adds	r3, r7, r2
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	e014      	b.n	8004286 <prepare_USR_response_msg+0xdc>
	{
		*(s++) = (p->port_target >> (i * 8)) & 0xffU;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	899b      	ldrh	r3, [r3, #12]
 8004260:	001a      	movs	r2, r3
 8004262:	200b      	movs	r0, #11
 8004264:	183b      	adds	r3, r7, r0
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	b25b      	sxtb	r3, r3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	411a      	asrs	r2, r3
 800426e:	0011      	movs	r1, r2
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	60fa      	str	r2, [r7, #12]
 8004276:	b2ca      	uxtb	r2, r1
 8004278:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; ++ i )
 800427a:	183b      	adds	r3, r7, r0
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	3301      	adds	r3, #1
 8004280:	b2da      	uxtb	r2, r3
 8004282:	183b      	adds	r3, r7, r0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	210b      	movs	r1, #11
 8004288:	187b      	adds	r3, r7, r1
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b25b      	sxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	dde4      	ble.n	800425c <prepare_USR_response_msg+0xb2>
	}
	//
	for(i = LEN_IP - 1; i >=0; -- i )
 8004292:	230a      	movs	r3, #10
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	3b01      	subs	r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	187b      	adds	r3, r7, r1
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	e011      	b.n	80042c6 <prepare_USR_response_msg+0x11c>
	{
		*(s++) = p->IPv4_self[i];
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	200b      	movs	r0, #11
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	18d2      	adds	r2, r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1c59      	adds	r1, r3, #1
 80042b4:	60f9      	str	r1, [r7, #12]
 80042b6:	7812      	ldrb	r2, [r2, #0]
 80042b8:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	3b01      	subs	r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	183b      	adds	r3, r7, r0
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	220b      	movs	r2, #11
 80042c8:	18bb      	adds	r3, r7, r2
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b7f      	cmp	r3, #127	; 0x7f
 80042ce:	d9e8      	bls.n	80042a2 <prepare_USR_response_msg+0xf8>
	}
	//
	for(i = 0; i < 2; ++ i )
 80042d0:	18bb      	adds	r3, r7, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e014      	b.n	8004302 <prepare_USR_response_msg+0x158>
	{
		*(s++) = (p->port_self >> (i * 8)) & 0xffU;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8a9b      	ldrh	r3, [r3, #20]
 80042dc:	001a      	movs	r2, r3
 80042de:	200b      	movs	r0, #11
 80042e0:	183b      	adds	r3, r7, r0
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b25b      	sxtb	r3, r3
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	411a      	asrs	r2, r3
 80042ea:	0011      	movs	r1, r2
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	60fa      	str	r2, [r7, #12]
 80042f2:	b2ca      	uxtb	r2, r1
 80042f4:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 2; ++ i )
 80042f6:	183b      	adds	r3, r7, r0
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	3301      	adds	r3, #1
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	183b      	adds	r3, r7, r0
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	210b      	movs	r1, #11
 8004304:	187b      	adds	r3, r7, r1
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b25b      	sxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	dde4      	ble.n	80042d8 <prepare_USR_response_msg+0x12e>
	}
	//
	for(i = LEN_IP - 1; i >=0; -- i )
 800430e:	230a      	movs	r3, #10
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	3b01      	subs	r3, #1
 8004316:	b2da      	uxtb	r2, r3
 8004318:	187b      	adds	r3, r7, r1
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e011      	b.n	8004342 <prepare_USR_response_msg+0x198>
	{
		*(s++) = p->IPv4_gateway[i];
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	200b      	movs	r0, #11
 8004324:	183b      	adds	r3, r7, r0
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	b25b      	sxtb	r3, r3
 800432a:	18d2      	adds	r2, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	60f9      	str	r1, [r7, #12]
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 8004336:	183b      	adds	r3, r7, r0
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	3b01      	subs	r3, #1
 800433c:	b2da      	uxtb	r2, r3
 800433e:	183b      	adds	r3, r7, r0
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	210b      	movs	r1, #11
 8004344:	187b      	adds	r3, r7, r1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b7f      	cmp	r3, #127	; 0x7f
 800434a:	d9e8      	bls.n	800431e <prepare_USR_response_msg+0x174>
	}
	//
	*(s++) = p->mode;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	60fa      	str	r2, [r7, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	7f12      	ldrb	r2, [r2, #28]
 8004356:	701a      	strb	r2, [r3, #0]
	// baud
	for(i = 0; i < 3; ++i )
 8004358:	187b      	adds	r3, r7, r1
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e013      	b.n	8004388 <prepare_USR_response_msg+0x1de>
	{
		*(s++) = (uint8_t)((p->baud >> 8*(i)) & 0xffU);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	200b      	movs	r0, #11
 8004366:	183b      	adds	r3, r7, r0
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	b25b      	sxtb	r3, r3
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	40da      	lsrs	r2, r3
 8004370:	0011      	movs	r1, r2
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	60fa      	str	r2, [r7, #12]
 8004378:	b2ca      	uxtb	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 3; ++i )
 800437c:	183b      	adds	r3, r7, r0
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	183b      	adds	r3, r7, r0
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	200b      	movs	r0, #11
 800438a:	183b      	adds	r3, r7, r0
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b25b      	sxtb	r3, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	dde5      	ble.n	8004360 <prepare_USR_response_msg+0x1b6>
	}

	*(s++) = p->stopbit_mode;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	60fa      	str	r2, [r7, #12]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	2124      	movs	r1, #36	; 0x24
 800439e:	5c52      	ldrb	r2, [r2, r1]
 80043a0:	701a      	strb	r2, [r3, #0]

	/*  21 Bytes END */
	// ID
	for(i=0; i< 3; ++i)
 80043a2:	183b      	adds	r3, r7, r0
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e00b      	b.n	80043c2 <prepare_USR_response_msg+0x218>
		*(s++) = 0;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	60fa      	str	r2, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
	for(i=0; i< 3; ++i)
 80043b4:	210b      	movs	r1, #11
 80043b6:	187b      	adds	r3, r7, r1
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	187b      	adds	r3, r7, r1
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	210b      	movs	r1, #11
 80043c4:	187b      	adds	r3, r7, r1
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	b25b      	sxtb	r3, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	dded      	ble.n	80043aa <prepare_USR_response_msg+0x200>
	// mask
	for(i = LEN_IP - 1; i >=0; -- i )
 80043ce:	230a      	movs	r3, #10
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e011      	b.n	8004402 <prepare_USR_response_msg+0x258>
	{
		*(s++) = p->IPv4_mask[i];
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	200b      	movs	r0, #11
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1c59      	adds	r1, r3, #1
 80043f0:	60f9      	str	r1, [r7, #12]
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
	for(i = LEN_IP - 1; i >=0; -- i )
 80043f6:	183b      	adds	r3, r7, r0
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	230b      	movs	r3, #11
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b7f      	cmp	r3, #127	; 0x7f
 800440a:	d9e8      	bls.n	80043de <prepare_USR_response_msg+0x234>
	}

	return s - buf;
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	1ad3      	subs	r3, r2, r3
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b004      	add	sp, #16
 8004418:	bd80      	pop	{r7, pc}

0800441a <CH395SetBuffer>:
#include <CH395.h>
#include <CH395CMD.h>
#include "Delay.h"

void CH395SetBuffer() // use all 8 sockets, each socket 1.5KB x 2 buffer (each buffer block has 512B)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t blk = 0;
 8004420:	1dbb      	adds	r3, r7, #6
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 8004426:	1dfb      	adds	r3, r7, #7
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e01e      	b.n	800446c <CH395SetBuffer+0x52>
	{
		CH395SetSocketRecvBuf(i, blk, 3);
 800442e:	1dbb      	adds	r3, r7, #6
 8004430:	7819      	ldrb	r1, [r3, #0]
 8004432:	1dfb      	adds	r3, r7, #7
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2203      	movs	r2, #3
 8004438:	0018      	movs	r0, r3
 800443a:	f000 fd6b 	bl	8004f14 <CH395SetSocketRecvBuf>
		blk += 3;
 800443e:	1dbb      	adds	r3, r7, #6
 8004440:	1dba      	adds	r2, r7, #6
 8004442:	7812      	ldrb	r2, [r2, #0]
 8004444:	3203      	adds	r2, #3
 8004446:	701a      	strb	r2, [r3, #0]
		CH395SetSocketSendBuf(i, blk, 3);
 8004448:	1dbb      	adds	r3, r7, #6
 800444a:	7819      	ldrb	r1, [r3, #0]
 800444c:	1dfb      	adds	r3, r7, #7
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2203      	movs	r2, #3
 8004452:	0018      	movs	r0, r3
 8004454:	f000 fd83 	bl	8004f5e <CH395SetSocketSendBuf>
		blk += 3;
 8004458:	1dbb      	adds	r3, r7, #6
 800445a:	1dba      	adds	r2, r7, #6
 800445c:	7812      	ldrb	r2, [r2, #0]
 800445e:	3203      	adds	r2, #3
 8004460:	701a      	strb	r2, [r3, #0]
	for(i=0; i < 8; ++i)
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	1dfa      	adds	r2, r7, #7
 8004466:	7812      	ldrb	r2, [r2, #0]
 8004468:	3201      	adds	r2, #1
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b07      	cmp	r3, #7
 8004472:	d9dc      	bls.n	800442e <CH395SetBuffer+0x14>
	}
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <CH395TCPServerStart>:

BOOL CH395TCPServerStart(uint32_t ip, uint16_t port_http_server, uint16_t port_tcp_server)
{
 8004480:	b5b0      	push	{r4, r5, r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	0008      	movs	r0, r1
 800448a:	0011      	movs	r1, r2
 800448c:	1cbb      	adds	r3, r7, #2
 800448e:	1c02      	adds	r2, r0, #0
 8004490:	801a      	strh	r2, [r3, #0]
 8004492:	003b      	movs	r3, r7
 8004494:	1c0a      	adds	r2, r1, #0
 8004496:	801a      	strh	r2, [r3, #0]
	uint8_t i;
	//enable multi connections
	// !!!setStartPara must before Init!!!!
	CH395SetStartPara(FUN_PARA_FLAG_TCP_SERVER | FUN_PARA_FLAG_LOW_PWR);
 8004498:	2006      	movs	r0, #6
 800449a:	f000 fd85 	bl	8004fa8 <CH395SetStartPara>
	// Initialize Stack
	CH395CMDInitCH395();
 800449e:	f000 f937 	bl	8004710 <CH395CMDInitCH395>
	ch395.RX_received = 0;
 80044a2:	4b71      	ldr	r3, [pc, #452]	; (8004668 <CH395TCPServerStart+0x1e8>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	765a      	strb	r2, [r3, #25]
	ch395.TX_available= 0;
 80044a8:	4b6f      	ldr	r3, [pc, #444]	; (8004668 <CH395TCPServerStart+0x1e8>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	76da      	strb	r2, [r3, #27]
	ch395.SOCK_responding = -1;
 80044ae:	4b6e      	ldr	r3, [pc, #440]	; (8004668 <CH395TCPServerStart+0x1e8>)
 80044b0:	22ff      	movs	r2, #255	; 0xff
 80044b2:	769a      	strb	r2, [r3, #26]
	// Check PHY
	i=0;
 80044b4:	2317      	movs	r3, #23
 80044b6:	18fb      	adds	r3, r7, r3
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
	do
	{
		uint8_t phy = CH395CMDGetPHYStatus();
 80044bc:	2515      	movs	r5, #21
 80044be:	197c      	adds	r4, r7, r5
 80044c0:	f000 f90a 	bl	80046d8 <CH395CMDGetPHYStatus>
 80044c4:	0003      	movs	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]
		if(phy != PHY_DISCONN) break; // PHY connected
 80044c8:	197b      	adds	r3, r7, r5
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d10f      	bne.n	80044f0 <CH395TCPServerStart+0x70>
		++i;
 80044d0:	2417      	movs	r4, #23
 80044d2:	193b      	adds	r3, r7, r4
 80044d4:	193a      	adds	r2, r7, r4
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	3201      	adds	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 80044dc:	23fa      	movs	r3, #250	; 0xfa
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7fc f895 	bl	8000610 <HAL_Delay>
	}while(i<20);
 80044e6:	193b      	adds	r3, r7, r4
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b13      	cmp	r3, #19
 80044ec:	d9e6      	bls.n	80044bc <CH395TCPServerStart+0x3c>
 80044ee:	e000      	b.n	80044f2 <CH395TCPServerStart+0x72>
		if(phy != PHY_DISCONN) break; // PHY connected
 80044f0:	46c0      	nop			; (mov r8, r8)
	if(i >= 20) return false;
 80044f2:	2317      	movs	r3, #23
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b13      	cmp	r3, #19
 80044fa:	d901      	bls.n	8004500 <CH395TCPServerStart+0x80>
 80044fc:	2300      	movs	r3, #0
 80044fe:	e0af      	b.n	8004660 <CH395TCPServerStart+0x1e0>
	// DHCP
	if(CH395DHCPEnable(true) != 0)
 8004500:	2001      	movs	r0, #1
 8004502:	f000 fc81 	bl	8004e08 <CH395DHCPEnable>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d002      	beq.n	8004510 <CH395TCPServerStart+0x90>
	{
		// DHCP not enabled
//		CH395CMDSetIPAddr((uint8_t*)(&ip)); // set IP address;
//		CH395CMDSetGWIPAddr((uint8_t*)(&ip)); // set gateway IP
		HAL_Delay(100);
 800450a:	2064      	movs	r0, #100	; 0x64
 800450c:	f7fc f880 	bl	8000610 <HAL_Delay>
	}
//	HAL_Delay(100);

	// set multiple sockets
	uint8_t err = 0;
 8004510:	2416      	movs	r4, #22
 8004512:	193b      	adds	r3, r7, r4
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
	if(port_http_server > 0)
 8004518:	1cbb      	adds	r3, r7, #2
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d100      	bne.n	8004522 <CH395TCPServerStart+0xa2>
 8004520:	e098      	b.n	8004654 <CH395TCPServerStart+0x1d4>
	{

		// open socket 0 for listening HTTP
		CH395SetSocketProtType(0, PROTO_TYPE_TCP); // set SOC
 8004522:	2103      	movs	r1, #3
 8004524:	2000      	movs	r0, #0
 8004526:	f000 f9d7 	bl	80048d8 <CH395SetSocketProtType>
		CH395SetSocketSourPort(0, port_http_server); // listen on HTTP port
 800452a:	1cbb      	adds	r3, r7, #2
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	0019      	movs	r1, r3
 8004530:	2000      	movs	r0, #0
 8004532:	f000 fa23 	bl	800497c <CH395SetSocketSourPort>
		CH395OpenSocket(0);
 8004536:	2000      	movs	r0, #0
 8004538:	f000 fbba 	bl	8004cb0 <CH395OpenSocket>
		err = CH395TCPListen(0); // start lisening
 800453c:	0025      	movs	r5, r4
 800453e:	193c      	adds	r4, r7, r4
 8004540:	2000      	movs	r0, #0
 8004542:	f000 fbf7 	bl	8004d34 <CH395TCPListen>
 8004546:	0003      	movs	r3, r0
 8004548:	7023      	strb	r3, [r4, #0]

		// open socket 4 for listening TCP
		CH395SetSocketProtType(4, PROTO_TYPE_TCP); // set SOC
 800454a:	2103      	movs	r1, #3
 800454c:	2004      	movs	r0, #4
 800454e:	f000 f9c3 	bl	80048d8 <CH395SetSocketProtType>
		CH395SetSocketSourPort(4, port_tcp_server); // listen on TCP port
 8004552:	003b      	movs	r3, r7
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	0019      	movs	r1, r3
 8004558:	2004      	movs	r0, #4
 800455a:	f000 fa0f 	bl	800497c <CH395SetSocketSourPort>
		CH395OpenSocket(4);
 800455e:	2004      	movs	r0, #4
 8004560:	f000 fba6 	bl	8004cb0 <CH395OpenSocket>
		err = CH395TCPListen(4); // start lisening
 8004564:	197c      	adds	r4, r7, r5
 8004566:	2004      	movs	r0, #4
 8004568:	f000 fbe4 	bl	8004d34 <CH395TCPListen>
 800456c:	0003      	movs	r3, r0
 800456e:	7023      	strb	r3, [r4, #0]

		// open other multiple sockets
		for(i=1; i < 7; ++i)
 8004570:	2317      	movs	r3, #23
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	e033      	b.n	80045e2 <CH395TCPServerStart+0x162>
		{
			if(i == 4) continue; // skip port 4, for it's a listener
 800457a:	2017      	movs	r0, #23
 800457c:	183b      	adds	r3, r7, r0
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d027      	beq.n	80045d4 <CH395TCPServerStart+0x154>
			CH395_protocol_t proto = ch395.cfg.protocols[i];
 8004584:	183b      	adds	r3, r7, r0
 8004586:	781a      	ldrb	r2, [r3, #0]
 8004588:	2514      	movs	r5, #20
 800458a:	197b      	adds	r3, r7, r5
 800458c:	4936      	ldr	r1, [pc, #216]	; (8004668 <CH395TCPServerStart+0x1e8>)
 800458e:	188a      	adds	r2, r1, r2
 8004590:	7c12      	ldrb	r2, [r2, #16]
 8004592:	701a      	strb	r2, [r3, #0]
			uint16_t port = ch395.cfg.ports[i];
 8004594:	183b      	adds	r3, r7, r0
 8004596:	7819      	ldrb	r1, [r3, #0]
 8004598:	2412      	movs	r4, #18
 800459a:	193b      	adds	r3, r7, r4
 800459c:	4a32      	ldr	r2, [pc, #200]	; (8004668 <CH395TCPServerStart+0x1e8>)
 800459e:	0049      	lsls	r1, r1, #1
 80045a0:	5a8a      	ldrh	r2, [r1, r2]
 80045a2:	801a      	strh	r2, [r3, #0]
			if(proto != CH395_PROTOCOL_NOT_USED && port > 0)
 80045a4:	197b      	adds	r3, r7, r5
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d014      	beq.n	80045d6 <CH395TCPServerStart+0x156>
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d010      	beq.n	80045d6 <CH395TCPServerStart+0x156>
			{
				CH395SetSocketSourPort(i, port); // listen on HTTP port
 80045b4:	193b      	adds	r3, r7, r4
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	0004      	movs	r4, r0
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 f9db 	bl	800497c <CH395SetSocketSourPort>
				CH395SetSocketProtType(i, PROTO_TYPE_TCP); // set SOCKET  to be TCP server
 80045c6:	193b      	adds	r3, r7, r4
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2103      	movs	r1, #3
 80045cc:	0018      	movs	r0, r3
 80045ce:	f000 f983 	bl	80048d8 <CH395SetSocketProtType>
 80045d2:	e000      	b.n	80045d6 <CH395TCPServerStart+0x156>
			if(i == 4) continue; // skip port 4, for it's a listener
 80045d4:	46c0      	nop			; (mov r8, r8)
		for(i=1; i < 7; ++i)
 80045d6:	2217      	movs	r2, #23
 80045d8:	18bb      	adds	r3, r7, r2
 80045da:	18ba      	adds	r2, r7, r2
 80045dc:	7812      	ldrb	r2, [r2, #0]
 80045de:	3201      	adds	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	2417      	movs	r4, #23
 80045e4:	193b      	adds	r3, r7, r4
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b06      	cmp	r3, #6
 80045ea:	d9c6      	bls.n	800457a <CH395TCPServerStart+0xfa>
			}
		}

		/* UDP Server BEGIN */
		// open socket 7 for listening UDP
		i = 7;
 80045ec:	193b      	adds	r3, r7, r4
 80045ee:	2207      	movs	r2, #7
 80045f0:	701a      	strb	r2, [r3, #0]
		CH395SetSocketProtType(i, PROTO_TYPE_UDP); // set SOC
 80045f2:	193b      	adds	r3, r7, r4
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2102      	movs	r1, #2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 f96d 	bl	80048d8 <CH395SetSocketProtType>
		// enter UDP server mode by setting IP as 255.255.255.255
		uint8_t IP_UDP[4] = {255,255,255,255};
 80045fe:	210c      	movs	r1, #12
 8004600:	187b      	adds	r3, r7, r1
 8004602:	2201      	movs	r2, #1
 8004604:	4252      	negs	r2, r2
 8004606:	601a      	str	r2, [r3, #0]
		CH395SetSocketDesIP(i, IP_UDP);
 8004608:	187a      	adds	r2, r7, r1
 800460a:	193b      	adds	r3, r7, r4
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	0011      	movs	r1, r2
 8004610:	0018      	movs	r0, r3
 8004612:	f000 f927 	bl	8004864 <CH395SetSocketDesIP>
		CH395SetSocketDesPort(i, ch395.cfg.ports[i]); // listen on TCP port
 8004616:	0021      	movs	r1, r4
 8004618:	193b      	adds	r3, r7, r4
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <CH395TCPServerStart+0x1e8>)
 800461e:	0052      	lsls	r2, r2, #1
 8004620:	5ad2      	ldrh	r2, [r2, r3]
 8004622:	000c      	movs	r4, r1
 8004624:	187b      	adds	r3, r7, r1
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	0011      	movs	r1, r2
 800462a:	0018      	movs	r0, r3
 800462c:	f000 f978 	bl	8004920 <CH395SetSocketDesPort>
		CH395SetSocketSourPort(i, ch395.cfg.ports[i]); // listen on TCP port
 8004630:	0021      	movs	r1, r4
 8004632:	187b      	adds	r3, r7, r1
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	4b0c      	ldr	r3, [pc, #48]	; (8004668 <CH395TCPServerStart+0x1e8>)
 8004638:	0052      	lsls	r2, r2, #1
 800463a:	5ad2      	ldrh	r2, [r2, r3]
 800463c:	000c      	movs	r4, r1
 800463e:	187b      	adds	r3, r7, r1
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	0011      	movs	r1, r2
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f999 	bl	800497c <CH395SetSocketSourPort>
		CH395OpenSocket(i);
 800464a:	193b      	adds	r3, r7, r4
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fb2e 	bl	8004cb0 <CH395OpenSocket>
		/* UDP Server END */
	}

	return (err == 0);
 8004654:	2316      	movs	r3, #22
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	425a      	negs	r2, r3
 800465c:	4153      	adcs	r3, r2
 800465e:	b2db      	uxtb	r3, r3
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b006      	add	sp, #24
 8004666:	bdb0      	pop	{r4, r5, r7, pc}
 8004668:	20000010 	.word	0x20000010

0800466c <CH395CMDReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDReset(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
    xWriteCH395Cmd(CMD00_RESET_ALL);
 8004670:	2005      	movs	r0, #5
 8004672:	f000 fce7 	bl	8005044 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8004676:	4b05      	ldr	r3, [pc, #20]	; (800468c <CH395CMDReset+0x20>)
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <CH395CMDReset+0x20>)
 800467c:	889b      	ldrh	r3, [r3, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	0019      	movs	r1, r3
 8004682:	f7fc fe6c 	bl	800135e <HAL_GPIO_WritePin>
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	2000062c 	.word	0x2000062c

08004690 <CH395CMDCheckExist>:
* Input          : testdata 1字节测试数据
* Output         : None
* Return         : 硬件OK，返回 testdata按位取反
*******************************************************************************/
uint8_t CH395CMDCheckExist(uint8_t testdata)
{
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	0002      	movs	r2, r0
 8004698:	1dfb      	adds	r3, r7, #7
 800469a:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    xWriteCH395Cmd(CMD11_CHECK_EXIST);
 800469c:	2006      	movs	r0, #6
 800469e:	f000 fcd1 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(testdata);
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	0018      	movs	r0, r3
 80046a8:	f000 fcf4 	bl	8005094 <xWriteCH395Data>
    i = xReadCH395Data();
 80046ac:	250f      	movs	r5, #15
 80046ae:	197c      	adds	r4, r7, r5
 80046b0:	f000 fd02 	bl	80050b8 <xReadCH395Data>
 80046b4:	0003      	movs	r3, r0
 80046b6:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 80046b8:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <CH395CMDCheckExist+0x44>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <CH395CMDCheckExist+0x44>)
 80046be:	889b      	ldrh	r3, [r3, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	0019      	movs	r1, r3
 80046c4:	f7fc fe4b 	bl	800135e <HAL_GPIO_WritePin>
    return i;
 80046c8:	197b      	adds	r3, r7, r5
 80046ca:	781b      	ldrb	r3, [r3, #0]
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	2000062c 	.word	0x2000062c

080046d8 <CH395CMDGetPHYStatus>:
* Input          : None
* Output         : None
* Return         : 当前CH395PHY状态，参考PHY参数/状态定义
*******************************************************************************/
uint8_t CH395CMDGetPHYStatus(void)
{
 80046d8:	b590      	push	{r4, r7, lr}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_PHY_STATUS);
 80046de:	2026      	movs	r0, #38	; 0x26
 80046e0:	f000 fcb0 	bl	8005044 <xWriteCH395Cmd>
    i = xReadCH395Data();
 80046e4:	1dfc      	adds	r4, r7, #7
 80046e6:	f000 fce7 	bl	80050b8 <xReadCH395Data>
 80046ea:	0003      	movs	r3, r0
 80046ec:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <CH395CMDGetPHYStatus+0x34>)
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <CH395CMDGetPHYStatus+0x34>)
 80046f4:	889b      	ldrh	r3, [r3, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	0019      	movs	r1, r3
 80046fa:	f7fc fe30 	bl	800135e <HAL_GPIO_WritePin>
    return i;
 80046fe:	1dfb      	adds	r3, r7, #7
 8004700:	781b      	ldrb	r3, [r3, #0]
}
 8004702:	0018      	movs	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	b003      	add	sp, #12
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	46c0      	nop			; (mov r8, r8)
 800470c:	2000062c 	.word	0x2000062c

08004710 <CH395CMDInitCH395>:
* Input          : None
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395CMDInitCH395(void)
{
 8004710:	b590      	push	{r4, r7, lr}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8004716:	1dfb      	adds	r3, r7, #7
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 800471c:	1dbb      	adds	r3, r7, #6
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]

    xWriteCH395Cmd(CMD0W_INIT_CH395);
 8004722:	2027      	movs	r0, #39	; 0x27
 8004724:	f000 fc8e 	bl	8005044 <xWriteCH395Cmd>
    xEndCH395Cmd();
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <CH395CMDInitCH395+0x64>)
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	4b11      	ldr	r3, [pc, #68]	; (8004774 <CH395CMDInitCH395+0x64>)
 800472e:	889b      	ldrh	r3, [r3, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	0019      	movs	r1, r3
 8004734:	f7fc fe13 	bl	800135e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(10);                                                 /* 延时查询，建议2MS以上*/
 8004738:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <CH395CMDInitCH395+0x68>)
 800473a:	0018      	movs	r0, r3
 800473c:	f000 fd02 	bl	8005144 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8004740:	1dbc      	adds	r4, r7, #6
 8004742:	f000 f81b 	bl	800477c <CH395GetCmdStatus>
 8004746:	0003      	movs	r3, r0
 8004748:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 800474a:	1dbb      	adds	r3, r7, #6
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b10      	cmp	r3, #16
 8004750:	d108      	bne.n	8004764 <CH395CMDInitCH395+0x54>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出,本函数需要500MS以上执行完毕 */
 8004752:	1dfb      	adds	r3, r7, #7
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1dfa      	adds	r2, r7, #7
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	7011      	strb	r1, [r2, #0]
 800475c:	2bc8      	cmp	r3, #200	; 0xc8
 800475e:	d9eb      	bls.n	8004738 <CH395CMDInitCH395+0x28>
 8004760:	23fa      	movs	r3, #250	; 0xfa
 8004762:	e002      	b.n	800476a <CH395CMDInitCH395+0x5a>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004764:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004766:	1dbb      	adds	r3, r7, #6
 8004768:	781b      	ldrb	r3, [r3, #0]
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b003      	add	sp, #12
 8004770:	bd90      	pop	{r4, r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	2000062c 	.word	0x2000062c
 8004778:	00002710 	.word	0x00002710

0800477c <CH395GetCmdStatus>:
* Input          : None
* Output         : None
* Return         : 返回上一条命令执行状态
*******************************************************************************/
uint8_t CH395GetCmdStatus(void)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
    uint8_t i;

    xWriteCH395Cmd(CMD01_GET_CMD_STATUS);
 8004782:	202c      	movs	r0, #44	; 0x2c
 8004784:	f000 fc5e 	bl	8005044 <xWriteCH395Cmd>
    i = xReadCH395Data();
 8004788:	1dfc      	adds	r4, r7, #7
 800478a:	f000 fc95 	bl	80050b8 <xReadCH395Data>
 800478e:	0003      	movs	r3, r0
 8004790:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <CH395GetCmdStatus+0x34>)
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	4b06      	ldr	r3, [pc, #24]	; (80047b0 <CH395GetCmdStatus+0x34>)
 8004798:	889b      	ldrh	r3, [r3, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	0019      	movs	r1, r3
 800479e:	f7fc fdde 	bl	800135e <HAL_GPIO_WritePin>
    return i;
 80047a2:	1dfb      	adds	r3, r7, #7
 80047a4:	781b      	ldrb	r3, [r3, #0]
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b003      	add	sp, #12
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	2000062c 	.word	0x2000062c

080047b4 <CH395CMDGetMACAddr>:
* Input          : amcaddr MAC地址指针
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDGetMACAddr(uint8_t *amcaddr)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD06_GET_MAC_ADDR);
 80047bc:	2040      	movs	r0, #64	; 0x40
 80047be:	f000 fc41 	bl	8005044 <xWriteCH395Cmd>
    for(i = 0; i < 6;i++)*amcaddr++ = xReadCH395Data();
 80047c2:	230f      	movs	r3, #15
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	2200      	movs	r2, #0
 80047c8:	701a      	strb	r2, [r3, #0]
 80047ca:	e00c      	b.n	80047e6 <CH395CMDGetMACAddr+0x32>
 80047cc:	687c      	ldr	r4, [r7, #4]
 80047ce:	1c63      	adds	r3, r4, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	f000 fc71 	bl	80050b8 <xReadCH395Data>
 80047d6:	0003      	movs	r3, r0
 80047d8:	7023      	strb	r3, [r4, #0]
 80047da:	210f      	movs	r1, #15
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	3201      	adds	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	230f      	movs	r3, #15
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b05      	cmp	r3, #5
 80047ee:	d9ed      	bls.n	80047cc <CH395CMDGetMACAddr+0x18>
    xEndCH395Cmd();
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <CH395CMDGetMACAddr+0x54>)
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	4b04      	ldr	r3, [pc, #16]	; (8004808 <CH395CMDGetMACAddr+0x54>)
 80047f6:	889b      	ldrh	r3, [r3, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	0019      	movs	r1, r3
 80047fc:	f7fc fdaf 	bl	800135e <HAL_GPIO_WritePin>
 }
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b005      	add	sp, #20
 8004806:	bd90      	pop	{r4, r7, pc}
 8004808:	2000062c 	.word	0x2000062c

0800480c <CH395CMDGetUnreachIPPT>:
                        第4-8字节为IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395CMDGetUnreachIPPT(uint8_t *list)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
    uint8_t i;

    xWriteCH395Cmd(CMD08_GET_UNREACH_IPPORT);
 8004814:	2028      	movs	r0, #40	; 0x28
 8004816:	f000 fc15 	bl	8005044 <xWriteCH395Cmd>
    for(i = 0; i < 8; i++)
 800481a:	230f      	movs	r3, #15
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	2200      	movs	r2, #0
 8004820:	701a      	strb	r2, [r3, #0]
 8004822:	e00c      	b.n	800483e <CH395CMDGetUnreachIPPT+0x32>
    {
        *list++ = xReadCH395Data();
 8004824:	687c      	ldr	r4, [r7, #4]
 8004826:	1c63      	adds	r3, r4, #1
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	f000 fc45 	bl	80050b8 <xReadCH395Data>
 800482e:	0003      	movs	r3, r0
 8004830:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 8; i++)
 8004832:	210f      	movs	r1, #15
 8004834:	187b      	adds	r3, r7, r1
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	187b      	adds	r3, r7, r1
 800483a:	3201      	adds	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	230f      	movs	r3, #15
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b07      	cmp	r3, #7
 8004846:	d9ed      	bls.n	8004824 <CH395CMDGetUnreachIPPT+0x18>
    }   
    xEndCH395Cmd();
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <CH395CMDGetUnreachIPPT+0x54>)
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <CH395CMDGetUnreachIPPT+0x54>)
 800484e:	889b      	ldrh	r3, [r3, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	0019      	movs	r1, r3
 8004854:	f7fc fd83 	bl	800135e <HAL_GPIO_WritePin>
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b005      	add	sp, #20
 800485e:	bd90      	pop	{r4, r7, pc}
 8004860:	2000062c 	.word	0x2000062c

08004864 <CH395SetSocketDesIP>:
                   ipaddr 指向IP地址
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketDesIP(uint8_t sockindex,uint8_t *ipaddr)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	0002      	movs	r2, r0
 800486c:	6039      	str	r1, [r7, #0]
 800486e:	1dfb      	adds	r3, r7, #7
 8004870:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD50_SET_IP_ADDR_SN);
 8004872:	2031      	movs	r0, #49	; 0x31
 8004874:	f000 fbe6 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004878:	1dfb      	adds	r3, r7, #7
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 fc09 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	603a      	str	r2, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	0018      	movs	r0, r3
 800488c:	f000 fc02 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	603a      	str	r2, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 fbfb 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	603a      	str	r2, [r7, #0]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 fbf4 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(*ipaddr++);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	603a      	str	r2, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fbed 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <CH395SetSocketDesIP+0x70>)
 80048bc:	6818      	ldr	r0, [r3, #0]
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <CH395SetSocketDesIP+0x70>)
 80048c0:	889b      	ldrh	r3, [r3, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	0019      	movs	r1, r3
 80048c6:	f7fc fd4a 	bl	800135e <HAL_GPIO_WritePin>
}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	46bd      	mov	sp, r7
 80048ce:	b002      	add	sp, #8
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	46c0      	nop			; (mov r8, r8)
 80048d4:	2000062c 	.word	0x2000062c

080048d8 <CH395SetSocketProtType>:
                   prottype 协议类型，请参考 socket协议类型定义(CH395INC.H)
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketProtType(uint8_t sockindex,uint8_t prottype)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	0002      	movs	r2, r0
 80048e0:	1dfb      	adds	r3, r7, #7
 80048e2:	701a      	strb	r2, [r3, #0]
 80048e4:	1dbb      	adds	r3, r7, #6
 80048e6:	1c0a      	adds	r2, r1, #0
 80048e8:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD20_SET_PROTO_TYPE_SN);
 80048ea:	2034      	movs	r0, #52	; 0x34
 80048ec:	f000 fbaa 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 80048f0:	1dfb      	adds	r3, r7, #7
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	0018      	movs	r0, r3
 80048f6:	f000 fbcd 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(prottype);
 80048fa:	1dbb      	adds	r3, r7, #6
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	0018      	movs	r0, r3
 8004900:	f000 fbc8 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <CH395SetSocketProtType+0x44>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <CH395SetSocketProtType+0x44>)
 800490a:	889b      	ldrh	r3, [r3, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	0019      	movs	r1, r3
 8004910:	f7fc fd25 	bl	800135e <HAL_GPIO_WritePin>
}
 8004914:	46c0      	nop			; (mov r8, r8)
 8004916:	46bd      	mov	sp, r7
 8004918:	b002      	add	sp, #8
 800491a:	bd80      	pop	{r7, pc}
 800491c:	2000062c 	.word	0x2000062c

08004920 <CH395SetSocketDesPort>:
                   desprot 2字节目的端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketDesPort(uint8_t sockindex,uint16_t desprot)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	0002      	movs	r2, r0
 8004928:	1dfb      	adds	r3, r7, #7
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	1c0a      	adds	r2, r1, #0
 8004930:	801a      	strh	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_DES_PORT_SN);
 8004932:	2032      	movs	r0, #50	; 0x32
 8004934:	f000 fb86 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004938:	1dfb      	adds	r3, r7, #7
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	0018      	movs	r0, r3
 800493e:	f000 fba9 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)desprot);
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	0018      	movs	r0, r3
 800494a:	f000 fba3 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(desprot >> 8));
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	b29b      	uxth	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	0018      	movs	r0, r3
 800495a:	f000 fb9b 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 800495e:	4b06      	ldr	r3, [pc, #24]	; (8004978 <CH395SetSocketDesPort+0x58>)
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <CH395SetSocketDesPort+0x58>)
 8004964:	889b      	ldrh	r3, [r3, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	0019      	movs	r1, r3
 800496a:	f7fc fcf8 	bl	800135e <HAL_GPIO_WritePin>
}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	46bd      	mov	sp, r7
 8004972:	b002      	add	sp, #8
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	2000062c 	.word	0x2000062c

0800497c <CH395SetSocketSourPort>:
                   desprot 2字节源端口
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSourPort(uint8_t sockindex,uint16_t surprot)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	0002      	movs	r2, r0
 8004984:	1dfb      	adds	r3, r7, #7
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	1c0a      	adds	r2, r1, #0
 800498c:	801a      	strh	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SOUR_PORT_SN);
 800498e:	2033      	movs	r0, #51	; 0x33
 8004990:	f000 fb58 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004994:	1dfb      	adds	r3, r7, #7
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	0018      	movs	r0, r3
 800499a:	f000 fb7b 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)surprot);
 800499e:	1d3b      	adds	r3, r7, #4
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 fb75 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(surprot>>8));
 80049aa:	1d3b      	adds	r3, r7, #4
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	0a1b      	lsrs	r3, r3, #8
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	0018      	movs	r0, r3
 80049b6:	f000 fb6d 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 80049ba:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <CH395SetSocketSourPort+0x58>)
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <CH395SetSocketSourPort+0x58>)
 80049c0:	889b      	ldrh	r3, [r3, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	0019      	movs	r1, r3
 80049c6:	f7fc fcca 	bl	800135e <HAL_GPIO_WritePin>
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	2000062c 	.word	0x2000062c

080049d8 <CH395SendData>:
                   len   长度
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SendData(uint8_t sockindex,const uint8_t *databuf,uint16_t len)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6039      	str	r1, [r7, #0]
 80049e0:	0011      	movs	r1, r2
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	1c02      	adds	r2, r0, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	1d3b      	adds	r3, r7, #4
 80049ea:	1c0a      	adds	r2, r1, #0
 80049ec:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    // check if the sending buffer is free
    while(!(ch395.TX_available & (1<<sockindex)))
 80049ee:	e003      	b.n	80049f8 <CH395SendData+0x20>
    {
    	Delay_ms(10);
 80049f0:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <CH395SendData+0xd8>)
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fba6 	bl	8005144 <Delay_us>
    while(!(ch395.TX_available & (1<<sockindex)))
 80049f8:	4b2e      	ldr	r3, [pc, #184]	; (8004ab4 <CH395SendData+0xdc>)
 80049fa:	7edb      	ldrb	r3, [r3, #27]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	001a      	movs	r2, r3
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	411a      	asrs	r2, r3
 8004a06:	0013      	movs	r3, r2
 8004a08:	2201      	movs	r2, #1
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d0f0      	beq.n	80049f0 <CH395SendData+0x18>
    }
    ch395.TX_available &= ~(1<<sockindex);
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <CH395SendData+0xdc>)
 8004a10:	7edb      	ldrb	r3, [r3, #27]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	1dfa      	adds	r2, r7, #7
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	4091      	lsls	r1, r2
 8004a1e:	000a      	movs	r2, r1
 8004a20:	b252      	sxtb	r2, r2
 8004a22:	43d2      	mvns	r2, r2
 8004a24:	b252      	sxtb	r2, r2
 8004a26:	4013      	ands	r3, r2
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <CH395SendData+0xdc>)
 8004a2e:	76da      	strb	r2, [r3, #27]
    xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8004a30:	2039      	movs	r0, #57	; 0x39
 8004a32:	f000 fb07 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8004a36:	1dfb      	adds	r3, r7, #7
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 fb2a 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	0018      	movs	r0, r3
 8004a48:	f000 fb24 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 fb1c 	bl	8005094 <xWriteCH395Data>
    Delay_us(2);
 8004a5c:	2002      	movs	r0, #2
 8004a5e:	f000 fb71 	bl	8005144 <Delay_us>
    for(i = 0; i < len; i++)
 8004a62:	230e      	movs	r3, #14
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	2200      	movs	r2, #0
 8004a68:	801a      	strh	r2, [r3, #0]
 8004a6a:	e00d      	b.n	8004a88 <CH395SendData+0xb0>
    {
        xWriteCH395Data(*databuf);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f000 fb0f 	bl	8005094 <xWriteCH395Data>
        databuf++;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 8004a7c:	210e      	movs	r1, #14
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	881a      	ldrh	r2, [r3, #0]
 8004a82:	187b      	adds	r3, r7, r1
 8004a84:	3201      	adds	r2, #1
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	230e      	movs	r3, #14
 8004a8a:	18fa      	adds	r2, r7, r3
 8004a8c:	1d3b      	adds	r3, r7, #4
 8004a8e:	8812      	ldrh	r2, [r2, #0]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3ea      	bcc.n	8004a6c <CH395SendData+0x94>
    }
    xEndCH395Cmd();
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <CH395SendData+0xe0>)
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <CH395SendData+0xe0>)
 8004a9c:	889b      	ldrh	r3, [r3, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	0019      	movs	r1, r3
 8004aa2:	f7fc fc5c 	bl	800135e <HAL_GPIO_WritePin>
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	00002710 	.word	0x00002710
 8004ab4:	20000010 	.word	0x20000010
 8004ab8:	2000062c 	.word	0x2000062c

08004abc <CH395StartSendingData>:

void CH395StartSendingData(uint8_t sockindex, uint16_t total_len)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	1dfb      	adds	r3, r7, #7
 8004ac6:	701a      	strb	r2, [r3, #0]
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	1c0a      	adds	r2, r1, #0
 8004acc:	801a      	strh	r2, [r3, #0]
	xWriteCH395Cmd(CMD30_WRITE_SEND_BUF_SN);
 8004ace:	2039      	movs	r0, #57	; 0x39
 8004ad0:	f000 fab8 	bl	8005044 <xWriteCH395Cmd>
	xWriteCH395Data((uint8_t)sockindex);
 8004ad4:	1dfb      	adds	r3, r7, #7
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 fadb 	bl	8005094 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)total_len);
 8004ade:	1d3b      	adds	r3, r7, #4
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	f000 fad5 	bl	8005094 <xWriteCH395Data>
	xWriteCH395Data((uint8_t)(total_len>>8));
 8004aea:	1d3b      	adds	r3, r7, #4
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	0a1b      	lsrs	r3, r3, #8
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 facd 	bl	8005094 <xWriteCH395Data>
	Delay_us(2);
 8004afa:	2002      	movs	r0, #2
 8004afc:	f000 fb22 	bl	8005144 <Delay_us>
}
 8004b00:	46c0      	nop			; (mov r8, r8)
 8004b02:	46bd      	mov	sp, r7
 8004b04:	b002      	add	sp, #8
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <CH395ContinueSendingData>:

void CH395ContinueSendingData(const uint8_t *databuf, uint16_t len)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	000a      	movs	r2, r1
 8004b12:	1cbb      	adds	r3, r7, #2
 8004b14:	801a      	strh	r2, [r3, #0]
	uint16_t i;
	for(i=0; i<len; ++i)
 8004b16:	230e      	movs	r3, #14
 8004b18:	18fb      	adds	r3, r7, r3
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	801a      	strh	r2, [r3, #0]
 8004b1e:	e00d      	b.n	8004b3c <CH395ContinueSendingData+0x34>
	{
		xWriteCH395Data(*databuf);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 fab5 	bl	8005094 <xWriteCH395Data>
		databuf++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	607b      	str	r3, [r7, #4]
	for(i=0; i<len; ++i)
 8004b30:	220e      	movs	r2, #14
 8004b32:	18bb      	adds	r3, r7, r2
 8004b34:	18ba      	adds	r2, r7, r2
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	3201      	adds	r2, #1
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	230e      	movs	r3, #14
 8004b3e:	18fa      	adds	r2, r7, r3
 8004b40:	1cbb      	adds	r3, r7, #2
 8004b42:	8812      	ldrh	r2, [r2, #0]
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3ea      	bcc.n	8004b20 <CH395ContinueSendingData+0x18>
	}
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	46c0      	nop			; (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b004      	add	sp, #16
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <CH395Complete>:
void CH395Complete()
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
	xEndCH395Cmd();
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <CH395Complete+0x1c>)
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <CH395Complete+0x1c>)
 8004b5e:	889b      	ldrh	r3, [r3, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	0019      	movs	r1, r3
 8004b64:	f7fc fbfb 	bl	800135e <HAL_GPIO_WritePin>
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	2000062c 	.word	0x2000062c

08004b74 <CH395GetRecvLength>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回接收缓冲区有效长度
*******************************************************************************/
uint16_t CH395GetRecvLength(uint8_t sockindex)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	1dfb      	adds	r3, r7, #7
 8004b7e:	701a      	strb	r2, [r3, #0]
    uint16_t i;

    xWriteCH395Cmd(CMD12_GET_RECV_LEN_SN);
 8004b80:	203b      	movs	r0, #59	; 0x3b
 8004b82:	f000 fa5f 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8004b86:	1dfb      	adds	r3, r7, #7
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 fa82 	bl	8005094 <xWriteCH395Data>
    i = xReadCH395Data();
 8004b90:	f000 fa92 	bl	80050b8 <xReadCH395Data>
 8004b94:	0003      	movs	r3, r0
 8004b96:	001a      	movs	r2, r3
 8004b98:	240e      	movs	r4, #14
 8004b9a:	193b      	adds	r3, r7, r4
 8004b9c:	801a      	strh	r2, [r3, #0]
    i = (uint16_t)(xReadCH395Data()<<8) + i;
 8004b9e:	f000 fa8b 	bl	80050b8 <xReadCH395Data>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	b299      	uxth	r1, r3
 8004baa:	193b      	adds	r3, r7, r4
 8004bac:	193a      	adds	r2, r7, r4
 8004bae:	8812      	ldrh	r2, [r2, #0]
 8004bb0:	188a      	adds	r2, r1, r2
 8004bb2:	801a      	strh	r2, [r3, #0]
    xEndCH395Cmd();
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <CH395GetRecvLength+0x5c>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <CH395GetRecvLength+0x5c>)
 8004bba:	889b      	ldrh	r3, [r3, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	0019      	movs	r1, r3
 8004bc0:	f7fc fbcd 	bl	800135e <HAL_GPIO_WritePin>
    return i;
 8004bc4:	193b      	adds	r3, r7, r4
 8004bc6:	881b      	ldrh	r3, [r3, #0]
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	b005      	add	sp, #20
 8004bce:	bd90      	pop	{r4, r7, pc}
 8004bd0:	2000062c 	.word	0x2000062c

08004bd4 <CH395ClearRecvBuf>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : None
*******************************************************************************/
void CH395ClearRecvBuf(uint8_t sockindex)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	0002      	movs	r2, r0
 8004bdc:	1dfb      	adds	r3, r7, #7
 8004bde:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD10_CLEAR_RECV_BUF_SN);
 8004be0:	202e      	movs	r0, #46	; 0x2e
 8004be2:	f000 fa2f 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)sockindex);
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fa52 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <CH395ClearRecvBuf+0x34>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <CH395ClearRecvBuf+0x34>)
 8004bf6:	889b      	ldrh	r3, [r3, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	f7fc fbaf 	bl	800135e <HAL_GPIO_WritePin>
}
 8004c00:	46c0      	nop			; (mov r8, r8)
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b002      	add	sp, #8
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2000062c 	.word	0x2000062c

08004c0c <CH395GetRecvData>:
                   pbuf  缓冲区
* Output         : None
* Return         : None
*******************************************************************************/
void CH395GetRecvData(uint8_t sockindex,uint16_t len,uint8_t *pbuf)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	603a      	str	r2, [r7, #0]
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	1c02      	adds	r2, r0, #0
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	1c0a      	adds	r2, r1, #0
 8004c1e:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    if(!len)return;
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d03c      	beq.n	8004ca2 <CH395GetRecvData+0x96>
    xWriteCH395Cmd(CMD30_READ_RECV_BUF_SN);
 8004c28:	203c      	movs	r0, #60	; 0x3c
 8004c2a:	f000 fa0b 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004c2e:	1dfb      	adds	r3, r7, #7
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 fa2e 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)len);
 8004c38:	1d3b      	adds	r3, r7, #4
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 fa28 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(len>>8));
 8004c44:	1d3b      	adds	r3, r7, #4
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f000 fa20 	bl	8005094 <xWriteCH395Data>
    Delay_us(1);
 8004c54:	2001      	movs	r0, #1
 8004c56:	f000 fa75 	bl	8005144 <Delay_us>
    for(i = 0; i < len; i++)
 8004c5a:	230e      	movs	r3, #14
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	801a      	strh	r2, [r3, #0]
 8004c62:	e00e      	b.n	8004c82 <CH395GetRecvData+0x76>
    {
       *pbuf = xReadCH395Data();
 8004c64:	f000 fa28 	bl	80050b8 <xReadCH395Data>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
       pbuf++;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	603b      	str	r3, [r7, #0]
    for(i = 0; i < len; i++)
 8004c76:	210e      	movs	r1, #14
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	881a      	ldrh	r2, [r3, #0]
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	3201      	adds	r2, #1
 8004c80:	801a      	strh	r2, [r3, #0]
 8004c82:	230e      	movs	r3, #14
 8004c84:	18fa      	adds	r2, r7, r3
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	8812      	ldrh	r2, [r2, #0]
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3e9      	bcc.n	8004c64 <CH395GetRecvData+0x58>
    }   
    xEndCH395Cmd();
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <CH395GetRecvData+0xa0>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <CH395GetRecvData+0xa0>)
 8004c96:	889b      	ldrh	r3, [r3, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	0019      	movs	r1, r3
 8004c9c:	f7fc fb5f 	bl	800135e <HAL_GPIO_WritePin>
 8004ca0:	e000      	b.n	8004ca4 <CH395GetRecvData+0x98>
    if(!len)return;
 8004ca2:	46c0      	nop			; (mov r8, r8)
}
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b004      	add	sp, #16
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	46c0      	nop			; (mov r8, r8)
 8004cac:	2000062c 	.word	0x2000062c

08004cb0 <CH395OpenSocket>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t  CH395OpenSocket(uint8_t sockindex)
{
 8004cb0:	b5b0      	push	{r4, r5, r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	0002      	movs	r2, r0
 8004cb8:	1dfb      	adds	r3, r7, #7
 8004cba:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8004cbc:	230f      	movs	r3, #15
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 8004cc4:	230e      	movs	r3, #14
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_OPEN_SOCKET_SN);
 8004ccc:	2035      	movs	r0, #53	; 0x35
 8004cce:	f000 f9b9 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	f000 f9dc 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <CH395OpenSocket+0x7c>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4b12      	ldr	r3, [pc, #72]	; (8004d2c <CH395OpenSocket+0x7c>)
 8004ce2:	889b      	ldrh	r3, [r3, #4]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	f7fc fb39 	bl	800135e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8004cec:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <CH395OpenSocket+0x80>)
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 fa28 	bl	8005144 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8004cf4:	250e      	movs	r5, #14
 8004cf6:	197c      	adds	r4, r7, r5
 8004cf8:	f7ff fd40 	bl	800477c <CH395GetCmdStatus>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004d00:	197b      	adds	r3, r7, r5
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d109      	bne.n	8004d1c <CH395OpenSocket+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004d08:	220f      	movs	r2, #15
 8004d0a:	18bb      	adds	r3, r7, r2
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	18ba      	adds	r2, r7, r2
 8004d10:	1c59      	adds	r1, r3, #1
 8004d12:	7011      	strb	r1, [r2, #0]
 8004d14:	2bc8      	cmp	r3, #200	; 0xc8
 8004d16:	d9e9      	bls.n	8004cec <CH395OpenSocket+0x3c>
 8004d18:	23fa      	movs	r3, #250	; 0xfa
 8004d1a:	e003      	b.n	8004d24 <CH395OpenSocket+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004d1c:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004d1e:	230e      	movs	r3, #14
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	781b      	ldrb	r3, [r3, #0]
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b004      	add	sp, #16
 8004d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d2c:	2000062c 	.word	0x2000062c
 8004d30:	00001388 	.word	0x00001388

08004d34 <CH395TCPListen>:
* Input          : sockindex Socket索引
* Output         : None
* Return         : 返回执行结果
*******************************************************************************/
uint8_t CH395TCPListen(uint8_t sockindex)
{
 8004d34:	b5b0      	push	{r4, r5, r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	1dfb      	adds	r3, r7, #7
 8004d3e:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8004d40:	230f      	movs	r3, #15
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
    uint8_t s = 0;
 8004d48:	230e      	movs	r3, #14
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD1W_TCP_LISTEN_SN);
 8004d50:	2036      	movs	r0, #54	; 0x36
 8004d52:	f000 f977 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004d56:	1dfb      	adds	r3, r7, #7
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 f99a 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 8004d60:	4b13      	ldr	r3, [pc, #76]	; (8004db0 <CH395TCPListen+0x7c>)
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <CH395TCPListen+0x7c>)
 8004d66:	889b      	ldrh	r3, [r3, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	f7fc faf7 	bl	800135e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(5);                                                 /* 延时查询，建议2MS以上*/
 8004d70:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <CH395TCPListen+0x80>)
 8004d72:	0018      	movs	r0, r3
 8004d74:	f000 f9e6 	bl	8005144 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8004d78:	250e      	movs	r5, #14
 8004d7a:	197c      	adds	r4, r7, r5
 8004d7c:	f7ff fcfe 	bl	800477c <CH395GetCmdStatus>
 8004d80:	0003      	movs	r3, r0
 8004d82:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004d84:	197b      	adds	r3, r7, r5
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b10      	cmp	r3, #16
 8004d8a:	d109      	bne.n	8004da0 <CH395TCPListen+0x6c>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	18bb      	adds	r3, r7, r2
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	18ba      	adds	r2, r7, r2
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	7011      	strb	r1, [r2, #0]
 8004d98:	2bc8      	cmp	r3, #200	; 0xc8
 8004d9a:	d9e9      	bls.n	8004d70 <CH395TCPListen+0x3c>
 8004d9c:	23fa      	movs	r3, #250	; 0xfa
 8004d9e:	e003      	b.n	8004da8 <CH395TCPListen+0x74>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004da0:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004da2:	230e      	movs	r3, #14
 8004da4:	18fb      	adds	r3, r7, r3
 8004da6:	781b      	ldrb	r3, [r3, #0]
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b004      	add	sp, #16
 8004dae:	bdb0      	pop	{r4, r5, r7, pc}
 8004db0:	2000062c 	.word	0x2000062c
 8004db4:	00001388 	.word	0x00001388

08004db8 <CH395GetSocketInt>:
* Input          : sockindex   socket索引
* Output         : None
* Return         : 中断状态
*******************************************************************************/
uint8_t CH395GetSocketInt(uint8_t sockindex)
{
 8004db8:	b5b0      	push	{r4, r5, r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	1dfb      	adds	r3, r7, #7
 8004dc2:	701a      	strb	r2, [r3, #0]
    uint8_t intstatus;
    xWriteCH395Cmd(CMD11_GET_INT_STATUS_SN);
 8004dc4:	2030      	movs	r0, #48	; 0x30
 8004dc6:	f000 f93d 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004dca:	1dfb      	adds	r3, r7, #7
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f000 f960 	bl	8005094 <xWriteCH395Data>
    Delay_us(2);
 8004dd4:	2002      	movs	r0, #2
 8004dd6:	f000 f9b5 	bl	8005144 <Delay_us>
    intstatus = xReadCH395Data();
 8004dda:	250f      	movs	r5, #15
 8004ddc:	197c      	adds	r4, r7, r5
 8004dde:	f000 f96b 	bl	80050b8 <xReadCH395Data>
 8004de2:	0003      	movs	r3, r0
 8004de4:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8004de6:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <CH395GetSocketInt+0x4c>)
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <CH395GetSocketInt+0x4c>)
 8004dec:	889b      	ldrh	r3, [r3, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	0019      	movs	r1, r3
 8004df2:	f7fc fab4 	bl	800135e <HAL_GPIO_WritePin>
    return intstatus;
 8004df6:	197b      	adds	r3, r7, r5
 8004df8:	781b      	ldrb	r3, [r3, #0]
}
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	b004      	add	sp, #16
 8004e00:	bdb0      	pop	{r4, r5, r7, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	2000062c 	.word	0x2000062c

08004e08 <CH395DHCPEnable>:
* Input          : flag   1:启动DHCP;0：停止DHCP
* Output         : None
* Return         : 执行状态
*******************************************************************************/
uint8_t  CH395DHCPEnable(uint8_t flag)
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	0002      	movs	r2, r0
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
 8004e14:	230f      	movs	r3, #15
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
    uint8_t s;
    xWriteCH395Cmd(CMD10_DHCP_ENABLE);
 8004e1c:	2041      	movs	r0, #65	; 0x41
 8004e1e:	f000 f911 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(flag);
 8004e22:	1dfb      	adds	r3, r7, #7
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 f934 	bl	8005094 <xWriteCH395Data>
    xEndCH395Cmd();
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <CH395DHCPEnable+0x74>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <CH395DHCPEnable+0x74>)
 8004e32:	889b      	ldrh	r3, [r3, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	0019      	movs	r1, r3
 8004e38:	f7fc fa91 	bl	800135e <HAL_GPIO_WritePin>
    while(1)
    {
        Delay_ms(20);
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <CH395DHCPEnable+0x78>)
 8004e3e:	0018      	movs	r0, r3
 8004e40:	f000 f980 	bl	8005144 <Delay_us>
        s = CH395GetCmdStatus();                                     /* 不能过于频繁查询*/
 8004e44:	250e      	movs	r5, #14
 8004e46:	197c      	adds	r4, r7, r5
 8004e48:	f7ff fc98 	bl	800477c <CH395GetCmdStatus>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	7023      	strb	r3, [r4, #0]
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004e50:	197b      	adds	r3, r7, r5
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b10      	cmp	r3, #16
 8004e56:	d109      	bne.n	8004e6c <CH395DHCPEnable+0x64>
        if(i++ > 200)return CH395_ERR_UNKNOW;                        /* 超时退出*/
 8004e58:	220f      	movs	r2, #15
 8004e5a:	18bb      	adds	r3, r7, r2
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	18ba      	adds	r2, r7, r2
 8004e60:	1c59      	adds	r1, r3, #1
 8004e62:	7011      	strb	r1, [r2, #0]
 8004e64:	2bc8      	cmp	r3, #200	; 0xc8
 8004e66:	d9e9      	bls.n	8004e3c <CH395DHCPEnable+0x34>
 8004e68:	23fa      	movs	r3, #250	; 0xfa
 8004e6a:	e003      	b.n	8004e74 <CH395DHCPEnable+0x6c>
        if(s !=CH395_ERR_BUSY)break;                                 /* 如果CH395芯片返回忙状态*/
 8004e6c:	46c0      	nop			; (mov r8, r8)
    }
    return s;
 8004e6e:	230e      	movs	r3, #14
 8004e70:	18fb      	adds	r3, r7, r3
 8004e72:	781b      	ldrb	r3, [r3, #0]
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b004      	add	sp, #16
 8004e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e7c:	2000062c 	.word	0x2000062c
 8004e80:	00004e20 	.word	0x00004e20

08004e84 <CH395GetDHCPStatus>:
* Input          : None
* Output         : None
* Return         : DHCP状态，0为成功，其他值表示错误
*******************************************************************************/
uint8_t CH395GetDHCPStatus(void)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
    uint8_t status;
    xWriteCH395Cmd(CMD01_GET_DHCP_STATUS);
 8004e8a:	2042      	movs	r0, #66	; 0x42
 8004e8c:	f000 f8da 	bl	8005044 <xWriteCH395Cmd>
    status = xReadCH395Data();
 8004e90:	1dfc      	adds	r4, r7, #7
 8004e92:	f000 f911 	bl	80050b8 <xReadCH395Data>
 8004e96:	0003      	movs	r3, r0
 8004e98:	7023      	strb	r3, [r4, #0]
    xEndCH395Cmd();
 8004e9a:	4b07      	ldr	r3, [pc, #28]	; (8004eb8 <CH395GetDHCPStatus+0x34>)
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <CH395GetDHCPStatus+0x34>)
 8004ea0:	889b      	ldrh	r3, [r3, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	f7fc fa5a 	bl	800135e <HAL_GPIO_WritePin>
    return status;
 8004eaa:	1dfb      	adds	r3, r7, #7
 8004eac:	781b      	ldrb	r3, [r3, #0]
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b003      	add	sp, #12
 8004eb4:	bd90      	pop	{r4, r7, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	2000062c 	.word	0x2000062c

08004ebc <CH395GetIPInf>:
* Input          : None
* Output         : 12个字节的IP,子网掩码和网关地址
* Return         : None
*******************************************************************************/
void CH395GetIPInf(uint8_t *addr)
{
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    xWriteCH395Cmd(CMD014_GET_IP_INF);
 8004ec4:	2043      	movs	r0, #67	; 0x43
 8004ec6:	f000 f8bd 	bl	8005044 <xWriteCH395Cmd>
    for(i = 0; i < 20; i++)
 8004eca:	230f      	movs	r3, #15
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e00c      	b.n	8004eee <CH395GetIPInf+0x32>
    {
     *addr++ = xReadCH395Data();
 8004ed4:	687c      	ldr	r4, [r7, #4]
 8004ed6:	1c63      	adds	r3, r4, #1
 8004ed8:	607b      	str	r3, [r7, #4]
 8004eda:	f000 f8ed 	bl	80050b8 <xReadCH395Data>
 8004ede:	0003      	movs	r3, r0
 8004ee0:	7023      	strb	r3, [r4, #0]
    for(i = 0; i < 20; i++)
 8004ee2:	210f      	movs	r1, #15
 8004ee4:	187b      	adds	r3, r7, r1
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	3201      	adds	r2, #1
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	230f      	movs	r3, #15
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	2b13      	cmp	r3, #19
 8004ef6:	d9ed      	bls.n	8004ed4 <CH395GetIPInf+0x18>
    }
    xEndCH395Cmd();
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <CH395GetIPInf+0x54>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4b04      	ldr	r3, [pc, #16]	; (8004f10 <CH395GetIPInf+0x54>)
 8004efe:	889b      	ldrh	r3, [r3, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	0019      	movs	r1, r3
 8004f04:	f7fc fa2b 	bl	800135e <HAL_GPIO_WritePin>
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b005      	add	sp, #20
 8004f0e:	bd90      	pop	{r4, r7, pc}
 8004f10:	2000062c 	.word	0x2000062c

08004f14 <CH395SetSocketRecvBuf>:
                 ：blknum     单位缓冲区个数 ，单位为512字节
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketRecvBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	0004      	movs	r4, r0
 8004f1c:	0008      	movs	r0, r1
 8004f1e:	0011      	movs	r1, r2
 8004f20:	1dfb      	adds	r3, r7, #7
 8004f22:	1c22      	adds	r2, r4, #0
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	1dbb      	adds	r3, r7, #6
 8004f28:	1c02      	adds	r2, r0, #0
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	1d7b      	adds	r3, r7, #5
 8004f2e:	1c0a      	adds	r2, r1, #0
 8004f30:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_RECV_BUF);
 8004f32:	2052      	movs	r0, #82	; 0x52
 8004f34:	f000 f886 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004f38:	1dfb      	adds	r3, r7, #7
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f000 f8a9 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 8004f42:	1dbb      	adds	r3, r7, #6
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f000 f8a4 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 8004f4c:	1d7b      	adds	r3, r7, #5
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	0018      	movs	r0, r3
 8004f52:	f000 f89f 	bl	8005094 <xWriteCH395Data>
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b003      	add	sp, #12
 8004f5c:	bd90      	pop	{r4, r7, pc}

08004f5e <CH395SetSocketSendBuf>:
                 ：blknum     单位缓冲区个数
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetSocketSendBuf(uint8_t sockindex,uint8_t startblk,uint8_t blknum)
{
 8004f5e:	b590      	push	{r4, r7, lr}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	0004      	movs	r4, r0
 8004f66:	0008      	movs	r0, r1
 8004f68:	0011      	movs	r1, r2
 8004f6a:	1dfb      	adds	r3, r7, #7
 8004f6c:	1c22      	adds	r2, r4, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	1dbb      	adds	r3, r7, #6
 8004f72:	1c02      	adds	r2, r0, #0
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	1d7b      	adds	r3, r7, #5
 8004f78:	1c0a      	adds	r2, r1, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
    xWriteCH395Cmd(CMD30_SET_SEND_BUF);
 8004f7c:	2053      	movs	r0, #83	; 0x53
 8004f7e:	f000 f861 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data(sockindex);
 8004f82:	1dfb      	adds	r3, r7, #7
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f000 f884 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(startblk);
 8004f8c:	1dbb      	adds	r3, r7, #6
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 f87f 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data(blknum);
 8004f96:	1d7b      	adds	r3, r7, #5
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f87a 	bl	8005094 <xWriteCH395Data>
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b003      	add	sp, #12
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <CH395SetStartPara>:
* Input          : mdata
* Output         : None
* Return         : None
*******************************************************************************/
void CH395SetStartPara(uint32_t mdata)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
    xWriteCH395Cmd(CMD40_SET_FUN_PARA);
 8004fb0:	2055      	movs	r0, #85	; 0x55
 8004fb2:	f000 f847 	bl	8005044 <xWriteCH395Cmd>
    xWriteCH395Data((uint8_t)mdata);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f000 f86a 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)((uint16_t)mdata>>8));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	0a1b      	lsrs	r3, r3, #8
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f862 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 16));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	0c1b      	lsrs	r3, r3, #16
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 f85c 	bl	8005094 <xWriteCH395Data>
    xWriteCH395Data((uint8_t)(mdata >> 24));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	0e1b      	lsrs	r3, r3, #24
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 f856 	bl	8005094 <xWriteCH395Data>
}
 8004fe8:	46c0      	nop			; (mov r8, r8)
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b002      	add	sp, #8
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <CH395CMDGetGlobIntStatus_ALL>:
* Input          : None
* Output         : None
* Return         : 返回当前的全局中断状态
*******************************************************************************/
uint16_t CH395CMDGetGlobIntStatus_ALL(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
		uint16_t init_status;
		xWriteCH395Cmd(CMD02_GET_GLOB_INT_STATUS_ALL);
 8004ff6:	2019      	movs	r0, #25
 8004ff8:	f000 f824 	bl	8005044 <xWriteCH395Cmd>
		Delay_us(2);
 8004ffc:	2002      	movs	r0, #2
 8004ffe:	f000 f8a1 	bl	8005144 <Delay_us>
		init_status = xReadCH395Data();
 8005002:	f000 f859 	bl	80050b8 <xReadCH395Data>
 8005006:	0003      	movs	r3, r0
 8005008:	001a      	movs	r2, r3
 800500a:	1dbb      	adds	r3, r7, #6
 800500c:	801a      	strh	r2, [r3, #0]
		init_status = (uint16_t)(xReadCH395Data()<<8) + init_status;
 800500e:	f000 f853 	bl	80050b8 <xReadCH395Data>
 8005012:	0003      	movs	r3, r0
 8005014:	b29b      	uxth	r3, r3
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	b299      	uxth	r1, r3
 800501a:	1dbb      	adds	r3, r7, #6
 800501c:	1dba      	adds	r2, r7, #6
 800501e:	8812      	ldrh	r2, [r2, #0]
 8005020:	188a      	adds	r2, r1, r2
 8005022:	801a      	strh	r2, [r3, #0]
		xEndCH395Cmd();
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <CH395CMDGetGlobIntStatus_ALL+0x50>)
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <CH395CMDGetGlobIntStatus_ALL+0x50>)
 800502a:	889b      	ldrh	r3, [r3, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	0019      	movs	r1, r3
 8005030:	f7fc f995 	bl	800135e <HAL_GPIO_WritePin>
		return 	init_status;
 8005034:	1dbb      	adds	r3, r7, #6
 8005036:	881b      	ldrh	r3, [r3, #0]
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b002      	add	sp, #8
 800503e:	bd80      	pop	{r7, pc}
 8005040:	2000062c 	.word	0x2000062c

08005044 <xWriteCH395Cmd>:
* Input          : cmd 8位的命令码
* Output         : None
* Return         : None
*******************************************************************************/
void xWriteCH395Cmd(uint8_t cmd)
{                                                                    
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	0002      	movs	r2, r0
 800504c:	1dfb      	adds	r3, r7, #7
 800504e:	701a      	strb	r2, [r3, #0]
    xEndCH395Cmd();                                                  /* 防止CS原来为低，先将CD置高 */
 8005050:	4b0e      	ldr	r3, [pc, #56]	; (800508c <xWriteCH395Cmd+0x48>)
 8005052:	6818      	ldr	r0, [r3, #0]
 8005054:	4b0d      	ldr	r3, [pc, #52]	; (800508c <xWriteCH395Cmd+0x48>)
 8005056:	889b      	ldrh	r3, [r3, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	0019      	movs	r1, r3
 800505c:	f7fc f97f 	bl	800135e <HAL_GPIO_WritePin>
    xCH395CmdStart( );                                               /* 命令开始，CS拉低 */
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <xWriteCH395Cmd+0x48>)
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	4b09      	ldr	r3, [pc, #36]	; (800508c <xWriteCH395Cmd+0x48>)
 8005066:	889b      	ldrh	r3, [r3, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	0019      	movs	r1, r3
 800506c:	f7fc f977 	bl	800135e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi, &cmd, 1, 100);
 8005070:	1df9      	adds	r1, r7, #7
 8005072:	4807      	ldr	r0, [pc, #28]	; (8005090 <xWriteCH395Cmd+0x4c>)
 8005074:	2364      	movs	r3, #100	; 0x64
 8005076:	2201      	movs	r2, #1
 8005078:	f7fc fea4 	bl	8001dc4 <HAL_SPI_Transmit>
    Delay_us(2);
 800507c:	2002      	movs	r0, #2
 800507e:	f000 f861 	bl	8005144 <Delay_us>
}
 8005082:	46c0      	nop			; (mov r8, r8)
 8005084:	46bd      	mov	sp, r7
 8005086:	b002      	add	sp, #8
 8005088:	bd80      	pop	{r7, pc}
 800508a:	46c0      	nop			; (mov r8, r8)
 800508c:	2000062c 	.word	0x2000062c
 8005090:	200011d8 	.word	0x200011d8

08005094 <xWriteCH395Data>:
* Input          : mdata 8位数据
* Output         : None
* Return         : None
*******************************************************************************/
void  xWriteCH395Data(uint8_t mdata)
{   
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	0002      	movs	r2, r0
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	701a      	strb	r2, [r3, #0]
//    SPI395Exchange(mdata);                                           /* SPI发送数据 */
    HAL_SPI_Transmit(&hspi, &mdata, 1, 100);
 80050a0:	1df9      	adds	r1, r7, #7
 80050a2:	4804      	ldr	r0, [pc, #16]	; (80050b4 <xWriteCH395Data+0x20>)
 80050a4:	2364      	movs	r3, #100	; 0x64
 80050a6:	2201      	movs	r2, #1
 80050a8:	f7fc fe8c 	bl	8001dc4 <HAL_SPI_Transmit>
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b002      	add	sp, #8
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	200011d8 	.word	0x200011d8

080050b8 <xReadCH395Data>:
* Input          : None
* Output         : None
* Return         : 8位数据
*******************************************************************************/
uint8_t   xReadCH395Data( void )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
    uint8_t i;
    HAL_SPI_Receive(&hspi, &i, 1, 100);
 80050be:	1df9      	adds	r1, r7, #7
 80050c0:	4805      	ldr	r0, [pc, #20]	; (80050d8 <xReadCH395Data+0x20>)
 80050c2:	2364      	movs	r3, #100	; 0x64
 80050c4:	2201      	movs	r2, #1
 80050c6:	f7fc ffdd 	bl	8002084 <HAL_SPI_Receive>
    return i;
 80050ca:	1dfb      	adds	r3, r7, #7
 80050cc:	781b      	ldrb	r3, [r3, #0]
}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b002      	add	sp, #8
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	200011d8 	.word	0x200011d8

080050dc <init_config>:
	{"label.5", &(cfg.sAntNames[4]), CONFIG_VAR_BYTESTRING_LONG},
	{"label.6", &(cfg.sAntNames[5]), CONFIG_VAR_BYTESTRING_LONG},
};

void init_config(Config *p)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
    #ifdef USE_MUTEX_ON_CFG
    if(mtxConfig == NULL) mtxConfig = xSemaphoreCreateMutex();
    xSemaphoreTake(mtxConfig, portMAX_DELAY);
    #endif
    // set valid string
    strncpy(p->sValid, VALID_STRING, 8);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <init_config+0x5c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2208      	movs	r2, #8
 80050ec:	0019      	movs	r1, r3
 80050ee:	f003 ff7e 	bl	8008fee <strncpy>
    // set config inital values
    memset(p->sAntNames, 0, sizeof(p->sAntNames));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	330a      	adds	r3, #10
 80050f6:	2260      	movs	r2, #96	; 0x60
 80050f8:	2100      	movs	r1, #0
 80050fa:	0018      	movs	r0, r3
 80050fc:	f003 ff25 	bl	8008f4a <memset>
    memset(p->nRadioToAntNums, 0, sizeof(p->nRadioToAntNums));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3308      	adds	r3, #8
 8005104:	2202      	movs	r2, #2
 8005106:	2100      	movs	r1, #0
 8005108:	0018      	movs	r0, r3
 800510a:	f003 ff1e 	bl	8008f4a <memset>

    p->portHTTP = 80;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	226a      	movs	r2, #106	; 0x6a
 8005112:	2150      	movs	r1, #80	; 0x50
 8005114:	5299      	strh	r1, [r3, r2]
    p->portTCP = 502;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	226c      	movs	r2, #108	; 0x6c
 800511a:	21fb      	movs	r1, #251	; 0xfb
 800511c:	0049      	lsls	r1, r1, #1
 800511e:	5299      	strh	r1, [r3, r2]
    p->portUDP = 1500;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	226e      	movs	r2, #110	; 0x6e
 8005124:	4905      	ldr	r1, [pc, #20]	; (800513c <init_config+0x60>)
 8005126:	5299      	strh	r1, [r3, r2]
    isModified = true;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <init_config+0x64>)
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
    #ifdef USE_MUTEX_ON_CFG
    xSemaphoreGive(mtxConfig);
    #endif
}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	46bd      	mov	sp, r7
 8005132:	b002      	add	sp, #8
 8005134:	bd80      	pop	{r7, pc}
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	20000634 	.word	0x20000634
 800513c:	000005dc 	.word	0x000005dc
 8005140:	200006c4 	.word	0x200006c4

08005144 <Delay_us>:
 *      Author: Zening
 */

#include "Delay.h"

void Delay_us(unsigned int n) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
	unsigned int t = n * SysCLK_Freq /2; // 32: MHz
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	015b      	lsls	r3, r3, #5
 8005150:	085b      	lsrs	r3, r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
	while(--t){__NOP();};
 8005154:	e000      	b.n	8005158 <Delay_us+0x14>
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	3b01      	subs	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f8      	bne.n	8005156 <Delay_us+0x12>
}
 8005164:	46c0      	nop			; (mov r8, r8)
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <FS_begin>:
#include <string.h>
#include "FS.h"
FS_typedef FS;

BOOL FS_begin(FS_typedef* pFS, uint32_t* addr_base)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
	if((uint32_t)addr_base < MAX_ADDR && ((pFS->n_files = *(uint32_t*)(addr_base)) != 0xffffffff))
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <FS_begin+0x38>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d80c      	bhi.n	800519c <FS_begin+0x2c>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	3301      	adds	r3, #1
 8005190:	d004      	beq.n	800519c <FS_begin+0x2c>
	{
		pFS->addr_base = addr_base;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	601a      	str	r2, [r3, #0]
		return true;
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <FS_begin+0x2e>
	}
	else
	{
		return false;
 800519c:	2300      	movs	r3, #0
	}
}
 800519e:	0018      	movs	r0, r3
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b002      	add	sp, #8
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	0800fffe 	.word	0x0800fffe

080051ac <FS_open>:

FSfile_typedef FS_open(FS_typedef* pFS, const char* path)
{
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b08d      	sub	sp, #52	; 0x34
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
	int i = pFS->n_files;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t* addr = (uint32_t*)pFS->addr_base;  // base_addr: number_of_files:4B, addr_file_nodes:4B[n_files]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t offset = (uint32_t)pFS->addr_base;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24

	FSfile_typedef file;
	file.size = 0;
 80051ca:	2114      	movs	r1, #20
 80051cc:	187b      	adds	r3, r7, r1
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
	file.p_content = NULL;
 80051d2:	187b      	adds	r3, r7, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	605a      	str	r2, [r3, #4]
	file.path = NULL;
 80051d8:	187b      	adds	r3, r7, r1
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
	do{
		addr ++;
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	3304      	adds	r3, #4
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
		i--;
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	3b01      	subs	r3, #1
 80051e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	18d3      	adds	r3, r2, r3
 80051f2:	3308      	adds	r3, #8
 80051f4:	623b      	str	r3, [r7, #32]
		if(strcmp(path, _path) == 0) // path matched
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	0011      	movs	r1, r2
 80051fc:	0018      	movs	r0, r3
 80051fe:	f7fa ff83 	bl	8000108 <strcmp>
 8005202:	1e03      	subs	r3, r0, #0
 8005204:	d116      	bne.n	8005234 <FS_open+0x88>
		{
			file.path = _path;
 8005206:	2114      	movs	r1, #20
 8005208:	187b      	adds	r3, r7, r1
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	601a      	str	r2, [r3, #0]
			// 4-Byte alignment!!!!!!!!!
			file.p_content = (uint8_t*)(*((uint32_t*)(*addr + offset) + 1)+offset);
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	18d3      	adds	r3, r2, r3
 8005216:	3304      	adds	r3, #4
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	18d3      	adds	r3, r2, r3
 800521e:	001a      	movs	r2, r3
 8005220:	187b      	adds	r3, r7, r1
 8005222:	605a      	str	r2, [r3, #4]
			file.size = *(uint32_t*)(*addr + offset);
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	18d3      	adds	r3, r2, r3
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	187b      	adds	r3, r7, r1
 8005230:	609a      	str	r2, [r3, #8]
			break;
 8005232:	e002      	b.n	800523a <FS_open+0x8e>
		}
	}while(i > 0);
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b00      	cmp	r3, #0
 8005238:	dcd1      	bgt.n	80051de <FS_open+0x32>
	return file;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2214      	movs	r2, #20
 800523e:	18ba      	adds	r2, r7, r2
 8005240:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005242:	c313      	stmia	r3!, {r0, r1, r4}
}
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	46bd      	mov	sp, r7
 8005248:	b00d      	add	sp, #52	; 0x34
 800524a:	bd90      	pop	{r4, r7, pc}

0800524c <FS_exists>:
	}
	return -1;
}

BOOL FS_exists(FS_typedef* pFS, const char* path)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint32_t* addr = (uint32_t*)pFS->addr_base;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	613b      	str	r3, [r7, #16]
	uint32_t offset = (uint32_t)pFS->addr_base;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pFS->n_files; ++i)
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e015      	b.n	8005294 <FS_exists+0x48>
	{
		addr++;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	3304      	adds	r3, #4
 800526c:	613b      	str	r3, [r7, #16]
		char* _path = (char*)((uint32_t*)(*addr+offset)+2);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	18d3      	adds	r3, r2, r3
 8005276:	3308      	adds	r3, #8
 8005278:	60bb      	str	r3, [r7, #8]
		if(strcmp(path, _path) == 0)
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	0011      	movs	r1, r2
 8005280:	0018      	movs	r0, r3
 8005282:	f7fa ff41 	bl	8000108 <strcmp>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d101      	bne.n	800528e <FS_exists+0x42>
		{
			return true;
 800528a:	2301      	movs	r3, #1
 800528c:	e008      	b.n	80052a0 <FS_exists+0x54>
	for(i=0; i<pFS->n_files; ++i)
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	3301      	adds	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	429a      	cmp	r2, r3
 800529c:	d3e4      	bcc.n	8005268 <FS_exists+0x1c>
		}
	}
	return false;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b006      	add	sp, #24
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <onHome>:

/* URI: /
 * METHOD: GET
 * Usage: Homepage*/
void onHome(HTTPRequestParseState *pS)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	strcat(pS->URI, "index.html");
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	1d5c      	adds	r4, r3, #5
 80052b4:	0020      	movs	r0, r4
 80052b6:	f7fa ff31 	bl	800011c <strlen>
 80052ba:	0003      	movs	r3, r0
 80052bc:	18e2      	adds	r2, r4, r3
 80052be:	4b07      	ldr	r3, [pc, #28]	; (80052dc <onHome+0x34>)
 80052c0:	0010      	movs	r0, r2
 80052c2:	0019      	movs	r1, r3
 80052c4:	230b      	movs	r3, #11
 80052c6:	001a      	movs	r2, r3
 80052c8:	f003 fe36 	bl	8008f38 <memcpy>
	HTTPonNotFound(pS);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 ff7e 	bl	80061d0 <HTTPonNotFound>
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	b003      	add	sp, #12
 80052da:	bd90      	pop	{r4, r7, pc}
 80052dc:	080091c8 	.word	0x080091c8

080052e0 <onSwitch>:
/* URI: /switch
 * METHOD: POST
 * Args: sel1=[0-6|255]&sel2=[0-6|255]
 * Usage: switch antenna */
void onSwitch(HTTPRequestParseState* pS)
{
 80052e0:	b5b0      	push	{r4, r5, r7, lr}
 80052e2:	b08a      	sub	sp, #40	; 0x28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
	// arguments my not be fully filled
	const char *A = getHTTPArg(pS, "sel1");
 80052e8:	4a37      	ldr	r2, [pc, #220]	; (80053c8 <onSwitch+0xe8>)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	0011      	movs	r1, r2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f001 fba8 	bl	8006a44 <getHTTPArg>
 80052f4:	0003      	movs	r3, r0
 80052f6:	623b      	str	r3, [r7, #32]
	const char *B = getHTTPArg(pS, "sel2");
 80052f8:	4a34      	ldr	r2, [pc, #208]	; (80053cc <onSwitch+0xec>)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f001 fba0 	bl	8006a44 <getHTTPArg>
 8005304:	0003      	movs	r3, r0
 8005306:	61fb      	str	r3, [r7, #28]
	uint8_t antnums[N_SELECTORS];
	char argname[8] = "sel";
 8005308:	2308      	movs	r3, #8
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	4a30      	ldr	r2, [pc, #192]	; (80053d0 <onSwitch+0xf0>)
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]
	for(uint8_t i = 0; i < N_SELECTORS; ++i)
 8005314:	2327      	movs	r3, #39	; 0x27
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
 800531c:	e02e      	b.n	800537c <onSwitch+0x9c>
	{
		argname[3] = '1' + i;
 800531e:	2327      	movs	r3, #39	; 0x27
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	3331      	adds	r3, #49	; 0x31
 8005326:	b2da      	uxtb	r2, r3
 8005328:	2108      	movs	r1, #8
 800532a:	187b      	adds	r3, r7, r1
 800532c:	70da      	strb	r2, [r3, #3]
		argname[4] = 0;
 800532e:	187b      	adds	r3, r7, r1
 8005330:	2200      	movs	r2, #0
 8005332:	711a      	strb	r2, [r3, #4]
		const char* sV = getHTTPArg(pS, argname);
 8005334:	187a      	adds	r2, r7, r1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	0011      	movs	r1, r2
 800533a:	0018      	movs	r0, r3
 800533c:	f001 fb82 	bl	8006a44 <getHTTPArg>
 8005340:	0003      	movs	r3, r0
 8005342:	617b      	str	r3, [r7, #20]
		uint8_t v = 255; // 255 means no change
 8005344:	2126      	movs	r1, #38	; 0x26
 8005346:	187b      	adds	r3, r7, r1
 8005348:	22ff      	movs	r2, #255	; 0xff
 800534a:	701a      	strb	r2, [r3, #0]
		if(sV) v = atou8(sV); // if seli does not exist, treat it as 255
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d006      	beq.n	8005360 <onSwitch+0x80>
 8005352:	187c      	adds	r4, r7, r1
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	0018      	movs	r0, r3
 8005358:	f001 fbc0 	bl	8006adc <atou8>
 800535c:	0003      	movs	r3, r0
 800535e:	7023      	strb	r3, [r4, #0]
		antnums[i] = v;
 8005360:	2027      	movs	r0, #39	; 0x27
 8005362:	183b      	adds	r3, r7, r0
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2210      	movs	r2, #16
 8005368:	18ba      	adds	r2, r7, r2
 800536a:	2126      	movs	r1, #38	; 0x26
 800536c:	1879      	adds	r1, r7, r1
 800536e:	7809      	ldrb	r1, [r1, #0]
 8005370:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < N_SELECTORS; ++i)
 8005372:	183b      	adds	r3, r7, r0
 8005374:	183a      	adds	r2, r7, r0
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	3201      	adds	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	2327      	movs	r3, #39	; 0x27
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d9cb      	bls.n	800531e <onSwitch+0x3e>
	}

	int8_t r = switch_Antenna(antnums, N_SELECTORS);
 8005386:	251b      	movs	r5, #27
 8005388:	197c      	adds	r4, r7, r5
 800538a:	2310      	movs	r3, #16
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	2102      	movs	r1, #2
 8005390:	0018      	movs	r0, r3
 8005392:	f003 f929 	bl	80085e8 <switch_Antenna>
 8005396:	0003      	movs	r3, r0
 8005398:	7023      	strb	r3, [r4, #0]

	if(r == 0) // OK
 800539a:	197b      	adds	r3, r7, r5
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d106      	bne.n	80053b2 <onSwitch+0xd2>
	{
		//HTTPSendStr(pS, 200, "OK\r\n");
		HTTPredirect(pS, "/");
 80053a4:	4a0b      	ldr	r2, [pc, #44]	; (80053d4 <onSwitch+0xf4>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	0011      	movs	r1, r2
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fdf0 	bl	8005f90 <HTTPredirect>
	}
	else
	{
		HTTPSendStr(pS, 300, "Invalid\r\n");
	}
}
 80053b0:	e006      	b.n	80053c0 <onSwitch+0xe0>
		HTTPSendStr(pS, 300, "Invalid\r\n");
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <onSwitch+0xf8>)
 80053b4:	2396      	movs	r3, #150	; 0x96
 80053b6:	0059      	lsls	r1, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f000 fcb4 	bl	8005d28 <HTTPSendStr>
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	b00a      	add	sp, #40	; 0x28
 80053c6:	bdb0      	pop	{r4, r5, r7, pc}
 80053c8:	080091d4 	.word	0x080091d4
 80053cc:	080091dc 	.word	0x080091dc
 80053d0:	006c6573 	.word	0x006c6573
 80053d4:	080091e4 	.word	0x080091e4
 80053d8:	080091e8 	.word	0x080091e8

080053dc <onGetAlloc>:
 * METHOD: GET
 * Args: sel1=%d&sel2=%d
 * Usage: get current antenna allocation
 * */
void onGetAlloc(HTTPRequestParseState* pS)
{
 80053dc:	b590      	push	{r4, r7, lr}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	static char s_tmp[16];
	uint8_t antnums[N_SELECTORS];
	get_Antenna_real_BCDs(antnums, N_SELECTORS);
 80053e4:	2408      	movs	r4, #8
 80053e6:	193b      	adds	r3, r7, r4
 80053e8:	2102      	movs	r1, #2
 80053ea:	0018      	movs	r0, r3
 80053ec:	f003 f9bc 	bl	8008768 <get_Antenna_real_BCDs>
	char *p;
	p = s_tmp;
 80053f0:	4b20      	ldr	r3, [pc, #128]	; (8005474 <onGetAlloc+0x98>)
 80053f2:	60fb      	str	r3, [r7, #12]
	strcpy(p, "sel1=");
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <onGetAlloc+0x9c>)
 80053f8:	0010      	movs	r0, r2
 80053fa:	0019      	movs	r1, r3
 80053fc:	2306      	movs	r3, #6
 80053fe:	001a      	movs	r2, r3
 8005400:	f003 fd9a 	bl	8008f38 <memcpy>
	p+=5;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3305      	adds	r3, #5
 8005408:	60fb      	str	r3, [r7, #12]
	*p = (antnums[0]) + '0'; // "sel1=%d"
 800540a:	193b      	adds	r3, r7, r4
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	3330      	adds	r3, #48	; 0x30
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	701a      	strb	r2, [r3, #0]
	p++;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3301      	adds	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
	strcpy(p, "&sel2="); // "sel1=%d&sel2="
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <onGetAlloc+0xa0>)
 8005420:	0010      	movs	r0, r2
 8005422:	0019      	movs	r1, r3
 8005424:	2307      	movs	r3, #7
 8005426:	001a      	movs	r2, r3
 8005428:	f003 fd86 	bl	8008f38 <memcpy>
	p+=6;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3306      	adds	r3, #6
 8005430:	60fb      	str	r3, [r7, #12]
	*p = antnums[1] + '0'; // "sel1=%d&sel2=%d"
 8005432:	193b      	adds	r3, r7, r4
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	3330      	adds	r3, #48	; 0x30
 8005438:	b2da      	uxtb	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	701a      	strb	r2, [r3, #0]
	p++;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
	strcpy(p, "\r\n");
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <onGetAlloc+0xa4>)
 8005448:	0010      	movs	r0, r2
 800544a:	0019      	movs	r1, r3
 800544c:	2303      	movs	r3, #3
 800544e:	001a      	movs	r2, r3
 8005450:	f003 fd72 	bl	8008f38 <memcpy>
	p+=2;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3302      	adds	r3, #2
 8005458:	60fb      	str	r3, [r7, #12]
	*p = 0;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
	HTTPSendStr(pS, 200, s_tmp);
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <onGetAlloc+0x98>)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	21c8      	movs	r1, #200	; 0xc8
 8005466:	0018      	movs	r0, r3
 8005468:	f000 fc5e 	bl	8005d28 <HTTPSendStr>
}
 800546c:	46c0      	nop			; (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b005      	add	sp, #20
 8005472:	bd90      	pop	{r4, r7, pc}
 8005474:	200006c8 	.word	0x200006c8
 8005478:	080091f4 	.word	0x080091f4
 800547c:	080091fc 	.word	0x080091fc
 8005480:	08009204 	.word	0x08009204

08005484 <onStatus>:

/* URI: /status
 * METHOD: GET
 * */
void onStatus(HTTPRequestParseState* pS)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	HTTPSendStr(pS, 200, "Status\r\n");
 800548c:	4a04      	ldr	r2, [pc, #16]	; (80054a0 <onStatus+0x1c>)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	21c8      	movs	r1, #200	; 0xc8
 8005492:	0018      	movs	r0, r3
 8005494:	f000 fc48 	bl	8005d28 <HTTPSendStr>
}
 8005498:	46c0      	nop			; (mov r8, r8)
 800549a:	46bd      	mov	sp, r7
 800549c:	b002      	add	sp, #8
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	08009208 	.word	0x08009208

080054a4 <onReset>:

void onReset(HTTPRequestParseState* pS)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
	HTTPSendStr(pS, 200, "Reset\r\n");
 80054ac:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <onReset+0x1c>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	21c8      	movs	r1, #200	; 0xc8
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 fc38 	bl	8005d28 <HTTPSendStr>
//	DEBUG_LOG("Restart\n");
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	08009214 	.word	0x08009214

080054c4 <onSetLabel>:
/* URI: /getAlloc
 * METHOD: POST
 * Args: ant1=name&ant2=name&ant3=name&ant4=name&ant5=name&ant6=name
 * Usage: set antenna label*/
void onSetLabel(HTTPRequestParseState* pS)
{
 80054c4:	b5b0      	push	{r4, r5, r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
	uint8_t i;
	char s_tmp[5] = "ant";
 80054cc:	2308      	movs	r3, #8
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	4a28      	ldr	r2, [pc, #160]	; (8005574 <onSetLabel+0xb0>)
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	2200      	movs	r2, #0
 80054d6:	711a      	strb	r2, [r3, #4]
	if(pS->argc == 0)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2248      	movs	r2, #72	; 0x48
 80054dc:	5c9b      	ldrb	r3, [r3, r2]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d107      	bne.n	80054f2 <onSetLabel+0x2e>
	{
		HTTPSendStr(pS, 300, "Bad args");
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <onSetLabel+0xb4>)
 80054e4:	2396      	movs	r3, #150	; 0x96
 80054e6:	0059      	lsls	r1, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 fc1c 	bl	8005d28 <HTTPSendStr>
 80054f0:	e03c      	b.n	800556c <onSetLabel+0xa8>
		return;
	}
	for(i=1; i<=NUM_ANTENNA; ++i)
 80054f2:	2317      	movs	r3, #23
 80054f4:	18fb      	adds	r3, r7, r3
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e02c      	b.n	8005556 <onSetLabel+0x92>
	{
		u16toa(i, s_tmp+3); //s_tmp = ant[i]
 80054fc:	2417      	movs	r4, #23
 80054fe:	193b      	adds	r3, r7, r4
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	b29a      	uxth	r2, r3
 8005504:	2508      	movs	r5, #8
 8005506:	197b      	adds	r3, r7, r5
 8005508:	3303      	adds	r3, #3
 800550a:	0019      	movs	r1, r3
 800550c:	0010      	movs	r0, r2
 800550e:	f001 fb6f 	bl	8006bf0 <u16toa>
		const char* s_label;
		if((s_label = getHTTPArg(pS, s_tmp)) != NULL)
 8005512:	197a      	adds	r2, r7, r5
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0011      	movs	r1, r2
 8005518:	0018      	movs	r0, r3
 800551a:	f001 fa93 	bl	8006a44 <getHTTPArg>
 800551e:	0003      	movs	r3, r0
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d010      	beq.n	800554a <onSetLabel+0x86>
		{
			strncpy(cfg.sAntNames[i-1], s_label, MAX_LEN_ANT_LABEL);
 8005528:	193b      	adds	r3, r7, r4
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	3b01      	subs	r3, #1
 800552e:	011b      	lsls	r3, r3, #4
 8005530:	3308      	adds	r3, #8
 8005532:	001a      	movs	r2, r3
 8005534:	4b11      	ldr	r3, [pc, #68]	; (800557c <onSetLabel+0xb8>)
 8005536:	18d3      	adds	r3, r2, r3
 8005538:	3302      	adds	r3, #2
 800553a:	6939      	ldr	r1, [r7, #16]
 800553c:	2210      	movs	r2, #16
 800553e:	0018      	movs	r0, r3
 8005540:	f003 fd55 	bl	8008fee <strncpy>
			isModified = true;
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <onSetLabel+0xbc>)
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
	for(i=1; i<=NUM_ANTENNA; ++i)
 800554a:	2217      	movs	r2, #23
 800554c:	18bb      	adds	r3, r7, r2
 800554e:	18ba      	adds	r2, r7, r2
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	3201      	adds	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	2317      	movs	r3, #23
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b06      	cmp	r3, #6
 800555e:	d9cd      	bls.n	80054fc <onSetLabel+0x38>
		}
	}

//	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	//HTTPSendStr(pS, 200, "OK");
	HTTPredirect(pS, "/");
 8005560:	4a08      	ldr	r2, [pc, #32]	; (8005584 <onSetLabel+0xc0>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	0011      	movs	r1, r2
 8005566:	0018      	movs	r0, r3
 8005568:	f000 fd12 	bl	8005f90 <HTTPredirect>
}
 800556c:	46bd      	mov	sp, r7
 800556e:	b006      	add	sp, #24
 8005570:	bdb0      	pop	{r4, r5, r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	00746e61 	.word	0x00746e61
 8005578:	0800921c 	.word	0x0800921c
 800557c:	20000d90 	.word	0x20000d90
 8005580:	200006c4 	.word	0x200006c4
 8005584:	080091e4 	.word	0x080091e4

08005588 <onGetLabel>:

void onGetLabel(HTTPRequestParseState* pS)
{
 8005588:	b590      	push	{r4, r7, lr}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	static char s_tmp[(MAX_LEN_ANT_LABEL+5) * NUM_ANTENNA];
	uint8_t i;
	char* s = s_tmp;
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <onGetLabel+0xac>)
 8005592:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8005594:	230f      	movs	r3, #15
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
 800559c:	e03a      	b.n	8005614 <onGetLabel+0x8c>
	{
		s = strcpy_f(s, "ant");
 800559e:	4a26      	ldr	r2, [pc, #152]	; (8005638 <onGetLabel+0xb0>)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	0011      	movs	r1, r2
 80055a4:	0018      	movs	r0, r3
 80055a6:	f001 fb96 	bl	8006cd6 <strcpy_f>
 80055aa:	0003      	movs	r3, r0
 80055ac:	60bb      	str	r3, [r7, #8]
		*s = i + '1';
 80055ae:	210f      	movs	r1, #15
 80055b0:	187b      	adds	r3, r7, r1
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	3331      	adds	r3, #49	; 0x31
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	701a      	strb	r2, [r3, #0]
		s++;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	3301      	adds	r3, #1
 80055c0:	60bb      	str	r3, [r7, #8]
		*s = '=';
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	223d      	movs	r2, #61	; 0x3d
 80055c6:	701a      	strb	r2, [r3, #0]
		s++;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	3301      	adds	r3, #1
 80055cc:	60bb      	str	r3, [r7, #8]
		s = strncpy_f(s, cfg.sAntNames[i], MAX_LEN_ANT_LABEL);
 80055ce:	000c      	movs	r4, r1
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	3308      	adds	r3, #8
 80055d8:	001a      	movs	r2, r3
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <onGetLabel+0xb4>)
 80055dc:	18d3      	adds	r3, r2, r3
 80055de:	1c99      	adds	r1, r3, #2
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2210      	movs	r2, #16
 80055e4:	0018      	movs	r0, r3
 80055e6:	f001 fb92 	bl	8006d0e <strncpy_f>
 80055ea:	0003      	movs	r3, r0
 80055ec:	60bb      	str	r3, [r7, #8]
		isModified = true;
 80055ee:	4b14      	ldr	r3, [pc, #80]	; (8005640 <onGetLabel+0xb8>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
		if(i != NUM_ANTENNA-1)
 80055f4:	193b      	adds	r3, r7, r4
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b05      	cmp	r3, #5
 80055fa:	d005      	beq.n	8005608 <onGetLabel+0x80>
		{
			*s = '&';
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2226      	movs	r2, #38	; 0x26
 8005600:	701a      	strb	r2, [r3, #0]
			s++;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	3301      	adds	r3, #1
 8005606:	60bb      	str	r3, [r7, #8]
	for(i=0; i<NUM_ANTENNA; ++i)
 8005608:	220f      	movs	r2, #15
 800560a:	18bb      	adds	r3, r7, r2
 800560c:	18ba      	adds	r2, r7, r2
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	3201      	adds	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	230f      	movs	r3, #15
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b05      	cmp	r3, #5
 800561c:	d9bf      	bls.n	800559e <onGetLabel+0x16>
		}
	}
	HTTPSendStr(pS, 200, s_tmp);
 800561e:	4a05      	ldr	r2, [pc, #20]	; (8005634 <onGetLabel+0xac>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	21c8      	movs	r1, #200	; 0xc8
 8005624:	0018      	movs	r0, r3
 8005626:	f000 fb7f 	bl	8005d28 <HTTPSendStr>
}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	46bd      	mov	sp, r7
 800562e:	b005      	add	sp, #20
 8005630:	bd90      	pop	{r4, r7, pc}
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	200006d8 	.word	0x200006d8
 8005638:	08009228 	.word	0x08009228
 800563c:	20000d90 	.word	0x20000d90
 8005640:	200006c4 	.word	0x200006c4

08005644 <onSetPort>:
/* URI: /setport
 * METHOD: POST
 * Args: portHTTP=80&portTCP=502
 * Usage: switch antenna */
void onSetPort(HTTPRequestParseState* pS)
{
 8005644:	b5b0      	push	{r4, r5, r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
	const uint8_t MAXLEN = 5;
 800564c:	2315      	movs	r3, #21
 800564e:	18fb      	adds	r3, r7, r3
 8005650:	2205      	movs	r2, #5
 8005652:	701a      	strb	r2, [r3, #0]
	if(pS->argc < 2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2248      	movs	r2, #72	; 0x48
 8005658:	5c9b      	ldrb	r3, [r3, r2]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d807      	bhi.n	800566e <onSetPort+0x2a>
	{
		HTTPSendStr(pS, 300, "Bad args");
 800565e:	4a4b      	ldr	r2, [pc, #300]	; (800578c <onSetPort+0x148>)
 8005660:	2396      	movs	r3, #150	; 0x96
 8005662:	0059      	lsls	r1, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0018      	movs	r0, r3
 8005668:	f000 fb5e 	bl	8005d28 <HTTPSendStr>
		return;
 800566c:	e08b      	b.n	8005786 <onSetPort+0x142>
	}

	const char* s;
	uint16_t v = 0;
 800566e:	2416      	movs	r4, #22
 8005670:	193b      	adds	r3, r7, r4
 8005672:	2200      	movs	r2, #0
 8005674:	801a      	strh	r2, [r3, #0]
	s = getHTTPArg(pS, "portHTTP");
 8005676:	4a46      	ldr	r2, [pc, #280]	; (8005790 <onSetPort+0x14c>)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	0011      	movs	r1, r2
 800567c:	0018      	movs	r0, r3
 800567e:	f001 f9e1 	bl	8006a44 <getHTTPArg>
 8005682:	0003      	movs	r3, r0
 8005684:	613b      	str	r3, [r7, #16]
	if (s)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01d      	beq.n	80056c8 <onSetPort+0x84>
	{
		uint16_t len = strnlen(s, MAXLEN);
 800568c:	2515      	movs	r5, #21
 800568e:	197b      	adds	r3, r7, r5
 8005690:	781a      	ldrb	r2, [r3, #0]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	0011      	movs	r1, r2
 8005696:	0018      	movs	r0, r3
 8005698:	f003 fcbd 	bl	8009016 <strnlen>
 800569c:	0002      	movs	r2, r0
 800569e:	210e      	movs	r1, #14
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	801a      	strh	r2, [r3, #0]
		if(len <= MAXLEN && len > 0)
 80056a4:	197b      	adds	r3, r7, r5
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	187a      	adds	r2, r7, r1
 80056ac:	8812      	ldrh	r2, [r2, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d80a      	bhi.n	80056c8 <onSetPort+0x84>
 80056b2:	187b      	adds	r3, r7, r1
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d006      	beq.n	80056c8 <onSetPort+0x84>
		{
			v = atou16(s);
 80056ba:	193c      	adds	r4, r7, r4
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	0018      	movs	r0, r3
 80056c0:	f001 fa50 	bl	8006b64 <atou16>
 80056c4:	0003      	movs	r3, r0
 80056c6:	8023      	strh	r3, [r4, #0]
		}
	}
	if(v)
 80056c8:	2016      	movs	r0, #22
 80056ca:	183b      	adds	r3, r7, r0
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d016      	beq.n	8005700 <onSetPort+0xbc>
	{
		cfg.portHTTP = (uint16_t)v;
 80056d2:	4b30      	ldr	r3, [pc, #192]	; (8005794 <onSetPort+0x150>)
 80056d4:	183a      	adds	r2, r7, r0
 80056d6:	216a      	movs	r1, #106	; 0x6a
 80056d8:	8812      	ldrh	r2, [r2, #0]
 80056da:	525a      	strh	r2, [r3, r1]
		isModified = true;
 80056dc:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <onSetPort+0x154>)
 80056de:	2201      	movs	r2, #1
 80056e0:	701a      	strb	r2, [r3, #0]
	{
		HTTPSendStr(pS, 300, "Bad HTTP port number");
		return;
	}

	v = 0;
 80056e2:	183b      	adds	r3, r7, r0
 80056e4:	2200      	movs	r2, #0
 80056e6:	801a      	strh	r2, [r3, #0]
	s = getHTTPArg(pS, "portTCP");
 80056e8:	4a2c      	ldr	r2, [pc, #176]	; (800579c <onSetPort+0x158>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	0011      	movs	r1, r2
 80056ee:	0018      	movs	r0, r3
 80056f0:	f001 f9a8 	bl	8006a44 <getHTTPArg>
 80056f4:	0003      	movs	r3, r0
 80056f6:	613b      	str	r3, [r7, #16]
	if (s)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d027      	beq.n	800574e <onSetPort+0x10a>
 80056fe:	e007      	b.n	8005710 <onSetPort+0xcc>
		HTTPSendStr(pS, 300, "Bad HTTP port number");
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <onSetPort+0x15c>)
 8005702:	2396      	movs	r3, #150	; 0x96
 8005704:	0059      	lsls	r1, r3, #1
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 fb0d 	bl	8005d28 <HTTPSendStr>
		return;
 800570e:	e03a      	b.n	8005786 <onSetPort+0x142>
	{
		uint16_t len = strnlen(s, MAXLEN);
 8005710:	2415      	movs	r4, #21
 8005712:	193b      	adds	r3, r7, r4
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	0011      	movs	r1, r2
 800571a:	0018      	movs	r0, r3
 800571c:	f003 fc7b 	bl	8009016 <strnlen>
 8005720:	0002      	movs	r2, r0
 8005722:	210c      	movs	r1, #12
 8005724:	187b      	adds	r3, r7, r1
 8005726:	801a      	strh	r2, [r3, #0]
		if(len <= MAXLEN && len > 0)
 8005728:	193b      	adds	r3, r7, r4
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b29b      	uxth	r3, r3
 800572e:	187a      	adds	r2, r7, r1
 8005730:	8812      	ldrh	r2, [r2, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d80b      	bhi.n	800574e <onSetPort+0x10a>
 8005736:	187b      	adds	r3, r7, r1
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <onSetPort+0x10a>
		{
			v = atou16(s);
 800573e:	2316      	movs	r3, #22
 8005740:	18fc      	adds	r4, r7, r3
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	0018      	movs	r0, r3
 8005746:	f001 fa0d 	bl	8006b64 <atou16>
 800574a:	0003      	movs	r3, r0
 800574c:	8023      	strh	r3, [r4, #0]
		}
	}
	if(v)
 800574e:	2216      	movs	r2, #22
 8005750:	18bb      	adds	r3, r7, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d00e      	beq.n	8005776 <onSetPort+0x132>
	{
		cfg.portTCP = (uint16_t)v;
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <onSetPort+0x150>)
 800575a:	18ba      	adds	r2, r7, r2
 800575c:	216c      	movs	r1, #108	; 0x6c
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	525a      	strh	r2, [r3, r1]
		isModified = true;
 8005762:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <onSetPort+0x154>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
	{
		HTTPSendStr(pS, 300, "Bad HTTP port number");
		return;
	}

	HTTPredirect(pS, "/");
 8005768:	4a0e      	ldr	r2, [pc, #56]	; (80057a4 <onSetPort+0x160>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0011      	movs	r1, r2
 800576e:	0018      	movs	r0, r3
 8005770:	f000 fc0e 	bl	8005f90 <HTTPredirect>
 8005774:	e007      	b.n	8005786 <onSetPort+0x142>
		HTTPSendStr(pS, 300, "Bad HTTP port number");
 8005776:	4a0a      	ldr	r2, [pc, #40]	; (80057a0 <onSetPort+0x15c>)
 8005778:	2396      	movs	r3, #150	; 0x96
 800577a:	0059      	lsls	r1, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	0018      	movs	r0, r3
 8005780:	f000 fad2 	bl	8005d28 <HTTPSendStr>
		return;
 8005784:	46c0      	nop			; (mov r8, r8)

//	EEPROM_WriteBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	//HTTPSendStr(pS, 200, "OK");

}
 8005786:	46bd      	mov	sp, r7
 8005788:	b006      	add	sp, #24
 800578a:	bdb0      	pop	{r4, r5, r7, pc}
 800578c:	0800921c 	.word	0x0800921c
 8005790:	0800922c 	.word	0x0800922c
 8005794:	20000d90 	.word	0x20000d90
 8005798:	200006c4 	.word	0x200006c4
 800579c:	08009250 	.word	0x08009250
 80057a0:	08009238 	.word	0x08009238
 80057a4:	080091e4 	.word	0x080091e4

080057a8 <onGetPort>:


void onGetPort(HTTPRequestParseState* pS)
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
	static char s_tmp[9+5+9+5+1]; // portHTTP=65535&portTCP=65535
	char* s = s_tmp;
 80057b0:	4b23      	ldr	r3, [pc, #140]	; (8005840 <onGetPort+0x98>)
 80057b2:	60fb      	str	r3, [r7, #12]
	uint16_t port;

	// MAXLEN = 9 + 5
	strcpy(s, "portHTTP=");
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4b23      	ldr	r3, [pc, #140]	; (8005844 <onGetPort+0x9c>)
 80057b8:	0010      	movs	r0, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	230a      	movs	r3, #10
 80057be:	001a      	movs	r2, r3
 80057c0:	f003 fbba 	bl	8008f38 <memcpy>
	s += 9;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3309      	adds	r3, #9
 80057c8:	60fb      	str	r3, [r7, #12]
	port = cfg.portHTTP;
 80057ca:	240a      	movs	r4, #10
 80057cc:	193b      	adds	r3, r7, r4
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <onGetPort+0xa0>)
 80057d0:	216a      	movs	r1, #106	; 0x6a
 80057d2:	5a52      	ldrh	r2, [r2, r1]
 80057d4:	801a      	strh	r2, [r3, #0]
	s += u16toa(port, s);
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	193b      	adds	r3, r7, r4
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	0011      	movs	r1, r2
 80057de:	0018      	movs	r0, r3
 80057e0:	f001 fa06 	bl	8006bf0 <u16toa>
 80057e4:	0003      	movs	r3, r0
 80057e6:	001a      	movs	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	189b      	adds	r3, r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

	// MAXLEN = 9 + 5
	strcpy(s, "&portTCP=");
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4b16      	ldr	r3, [pc, #88]	; (800584c <onGetPort+0xa4>)
 80057f2:	0010      	movs	r0, r2
 80057f4:	0019      	movs	r1, r3
 80057f6:	230a      	movs	r3, #10
 80057f8:	001a      	movs	r2, r3
 80057fa:	f003 fb9d 	bl	8008f38 <memcpy>
	s += 9;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3309      	adds	r3, #9
 8005802:	60fb      	str	r3, [r7, #12]
	port = cfg.portTCP;
 8005804:	193b      	adds	r3, r7, r4
 8005806:	4a10      	ldr	r2, [pc, #64]	; (8005848 <onGetPort+0xa0>)
 8005808:	216c      	movs	r1, #108	; 0x6c
 800580a:	5a52      	ldrh	r2, [r2, r1]
 800580c:	801a      	strh	r2, [r3, #0]
	s += u16toa(port, s);
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	193b      	adds	r3, r7, r4
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	0011      	movs	r1, r2
 8005816:	0018      	movs	r0, r3
 8005818:	f001 f9ea 	bl	8006bf0 <u16toa>
 800581c:	0003      	movs	r3, r0
 800581e:	001a      	movs	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	189b      	adds	r3, r3, r2
 8005824:	60fb      	str	r3, [r7, #12]

	*s = '\0';
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	701a      	strb	r2, [r3, #0]

	HTTPSendStr(pS, 200, s_tmp);
 800582c:	4a04      	ldr	r2, [pc, #16]	; (8005840 <onGetPort+0x98>)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	21c8      	movs	r1, #200	; 0xc8
 8005832:	0018      	movs	r0, r3
 8005834:	f000 fa78 	bl	8005d28 <HTTPSendStr>
}
 8005838:	46c0      	nop			; (mov r8, r8)
 800583a:	46bd      	mov	sp, r7
 800583c:	b005      	add	sp, #20
 800583e:	bd90      	pop	{r4, r7, pc}
 8005840:	20000758 	.word	0x20000758
 8005844:	08009258 	.word	0x08009258
 8005848:	20000d90 	.word	0x20000d90
 800584c:	08009264 	.word	0x08009264

08005850 <resetHTTPParseState>:
	.method = HTTP_GET,
	.ready = false}
};

void resetHTTPParseState(HTTPRequestParseState *pS)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
	pS->state = 0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	701a      	strb	r2, [r3, #0]
	pS->argc = 0;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2248      	movs	r2, #72	; 0x48
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]
	pS->connection = CLOSED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	711a      	strb	r2, [r3, #4]
	pS->method = HTTP_GET;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	70da      	strb	r2, [r3, #3]
	pS->ready = false;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	22ac      	movs	r2, #172	; 0xac
 8005876:	2100      	movs	r1, #0
 8005878:	5499      	strb	r1, [r3, r2]
	pS->response_stage = RESPONSE_NOT_PREPARED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	229c      	movs	r2, #156	; 0x9c
 800587e:	2100      	movs	r1, #0
 8005880:	5499      	strb	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	22a4      	movs	r2, #164	; 0xa4
 8005886:	2100      	movs	r1, #0
 8005888:	5299      	strh	r1, [r3, r2]
	pS->response_header = response_header_shared_buffer; // use shared buffer
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	21a0      	movs	r1, #160	; 0xa0
 800588e:	4a03      	ldr	r2, [pc, #12]	; (800589c <resetHTTPParseState+0x4c>)
 8005890:	505a      	str	r2, [r3, r1]
}
 8005892:	46c0      	nop			; (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b002      	add	sp, #8
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	20000e30 	.word	0x20000e30

080058a0 <HTTPGetContentType>:

const char* HTTPGetContentType(const char* filename)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	if(strlen(filename) > 3)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	0018      	movs	r0, r3
 80058ac:	f7fa fc36 	bl	800011c <strlen>
 80058b0:	0003      	movs	r3, r0
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d800      	bhi.n	80058b8 <HTTPGetContentType+0x18>
 80058b6:	e087      	b.n	80059c8 <HTTPGetContentType+0x128>
	{
		if(ENDSWITH(filename, ".html"))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	0018      	movs	r0, r3
 80058bc:	f7fa fc2e 	bl	800011c <strlen>
 80058c0:	0003      	movs	r3, r0
 80058c2:	3b05      	subs	r3, #5
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	4a42      	ldr	r2, [pc, #264]	; (80059d4 <HTTPGetContentType+0x134>)
 80058ca:	0011      	movs	r1, r2
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7fa fc1b 	bl	8000108 <strcmp>
 80058d2:	1e03      	subs	r3, r0, #0
 80058d4:	d101      	bne.n	80058da <HTTPGetContentType+0x3a>
			return HTTP_CONTENT_TYPE_HTML;
 80058d6:	4b40      	ldr	r3, [pc, #256]	; (80059d8 <HTTPGetContentType+0x138>)
 80058d8:	e077      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".htm"))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0018      	movs	r0, r3
 80058de:	f7fa fc1d 	bl	800011c <strlen>
 80058e2:	0003      	movs	r3, r0
 80058e4:	3b04      	subs	r3, #4
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	18d3      	adds	r3, r2, r3
 80058ea:	4a3c      	ldr	r2, [pc, #240]	; (80059dc <HTTPGetContentType+0x13c>)
 80058ec:	0011      	movs	r1, r2
 80058ee:	0018      	movs	r0, r3
 80058f0:	f7fa fc0a 	bl	8000108 <strcmp>
 80058f4:	1e03      	subs	r3, r0, #0
 80058f6:	d101      	bne.n	80058fc <HTTPGetContentType+0x5c>
			return HTTP_CONTENT_TYPE_HTML;
 80058f8:	4b37      	ldr	r3, [pc, #220]	; (80059d8 <HTTPGetContentType+0x138>)
 80058fa:	e066      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".css"))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0018      	movs	r0, r3
 8005900:	f7fa fc0c 	bl	800011c <strlen>
 8005904:	0003      	movs	r3, r0
 8005906:	3b04      	subs	r3, #4
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	18d3      	adds	r3, r2, r3
 800590c:	4a34      	ldr	r2, [pc, #208]	; (80059e0 <HTTPGetContentType+0x140>)
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f7fa fbf9 	bl	8000108 <strcmp>
 8005916:	1e03      	subs	r3, r0, #0
 8005918:	d101      	bne.n	800591e <HTTPGetContentType+0x7e>
			return HTTP_CONTENT_TYPE_CSS;
 800591a:	4b32      	ldr	r3, [pc, #200]	; (80059e4 <HTTPGetContentType+0x144>)
 800591c:	e055      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".js"))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f7fa fbfb 	bl	800011c <strlen>
 8005926:	0003      	movs	r3, r0
 8005928:	3b03      	subs	r3, #3
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	18d3      	adds	r3, r2, r3
 800592e:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <HTTPGetContentType+0x148>)
 8005930:	0011      	movs	r1, r2
 8005932:	0018      	movs	r0, r3
 8005934:	f7fa fbe8 	bl	8000108 <strcmp>
 8005938:	1e03      	subs	r3, r0, #0
 800593a:	d101      	bne.n	8005940 <HTTPGetContentType+0xa0>
			return HTTP_CONTENT_TYPE_JS;
 800593c:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <HTTPGetContentType+0x14c>)
 800593e:	e044      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".png"))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	0018      	movs	r0, r3
 8005944:	f7fa fbea 	bl	800011c <strlen>
 8005948:	0003      	movs	r3, r0
 800594a:	3b04      	subs	r3, #4
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	18d3      	adds	r3, r2, r3
 8005950:	4a27      	ldr	r2, [pc, #156]	; (80059f0 <HTTPGetContentType+0x150>)
 8005952:	0011      	movs	r1, r2
 8005954:	0018      	movs	r0, r3
 8005956:	f7fa fbd7 	bl	8000108 <strcmp>
 800595a:	1e03      	subs	r3, r0, #0
 800595c:	d101      	bne.n	8005962 <HTTPGetContentType+0xc2>
			return HTTP_CONTENT_TYPE_PNG;
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <HTTPGetContentType+0x154>)
 8005960:	e033      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpg"))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	0018      	movs	r0, r3
 8005966:	f7fa fbd9 	bl	800011c <strlen>
 800596a:	0003      	movs	r3, r0
 800596c:	3b04      	subs	r3, #4
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	18d3      	adds	r3, r2, r3
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <HTTPGetContentType+0x158>)
 8005974:	0011      	movs	r1, r2
 8005976:	0018      	movs	r0, r3
 8005978:	f7fa fbc6 	bl	8000108 <strcmp>
 800597c:	1e03      	subs	r3, r0, #0
 800597e:	d101      	bne.n	8005984 <HTTPGetContentType+0xe4>
			return HTTP_CONTENT_TYPE_JPEG;
 8005980:	4b1e      	ldr	r3, [pc, #120]	; (80059fc <HTTPGetContentType+0x15c>)
 8005982:	e022      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".jpeg"))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	0018      	movs	r0, r3
 8005988:	f7fa fbc8 	bl	800011c <strlen>
 800598c:	0003      	movs	r3, r0
 800598e:	3b05      	subs	r3, #5
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	18d3      	adds	r3, r2, r3
 8005994:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HTTPGetContentType+0x160>)
 8005996:	0011      	movs	r1, r2
 8005998:	0018      	movs	r0, r3
 800599a:	f7fa fbb5 	bl	8000108 <strcmp>
 800599e:	1e03      	subs	r3, r0, #0
 80059a0:	d101      	bne.n	80059a6 <HTTPGetContentType+0x106>
			return HTTP_CONTENT_TYPE_JPEG;
 80059a2:	4b16      	ldr	r3, [pc, #88]	; (80059fc <HTTPGetContentType+0x15c>)
 80059a4:	e011      	b.n	80059ca <HTTPGetContentType+0x12a>
		else if(ENDSWITH(filename, ".gif"))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f7fa fbb7 	bl	800011c <strlen>
 80059ae:	0003      	movs	r3, r0
 80059b0:	3b04      	subs	r3, #4
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	18d3      	adds	r3, r2, r3
 80059b6:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <HTTPGetContentType+0x164>)
 80059b8:	0011      	movs	r1, r2
 80059ba:	0018      	movs	r0, r3
 80059bc:	f7fa fba4 	bl	8000108 <strcmp>
 80059c0:	1e03      	subs	r3, r0, #0
 80059c2:	d101      	bne.n	80059c8 <HTTPGetContentType+0x128>
			return HTTP_CONTENT_TYPE_GIF;
 80059c4:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HTTPGetContentType+0x168>)
 80059c6:	e000      	b.n	80059ca <HTTPGetContentType+0x12a>
	}
	return HTTP_CONTENT_TYPE_PLAIN;
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <HTTPGetContentType+0x16c>)
}
 80059ca:	0018      	movs	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b002      	add	sp, #8
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	080092c4 	.word	0x080092c4
 80059d8:	08009484 	.word	0x08009484
 80059dc:	080092cc 	.word	0x080092cc
 80059e0:	080092d4 	.word	0x080092d4
 80059e4:	08009490 	.word	0x08009490
 80059e8:	080092dc 	.word	0x080092dc
 80059ec:	0800949c 	.word	0x0800949c
 80059f0:	080092e0 	.word	0x080092e0
 80059f4:	080094b4 	.word	0x080094b4
 80059f8:	080092e8 	.word	0x080092e8
 80059fc:	080094c0 	.word	0x080094c0
 8005a00:	080092f0 	.word	0x080092f0
 8005a04:	080092f8 	.word	0x080092f8
 8005a08:	080094cc 	.word	0x080094cc
 8005a0c:	08009478 	.word	0x08009478

08005a10 <HTTPSendFile>:

#ifdef __ON_BOARD_
void HTTPSendFile(HTTPRequestParseState *pS, int code, FSfile_typedef file)
{
 8005a10:	b082      	sub	sp, #8
 8005a12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a14:	b08f      	sub	sp, #60	; 0x3c
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
 8005a1c:	2548      	movs	r5, #72	; 0x48
 8005a1e:	2008      	movs	r0, #8
 8005a20:	1839      	adds	r1, r7, r0
 8005a22:	1949      	adds	r1, r1, r5
 8005a24:	600a      	str	r2, [r1, #0]
 8005a26:	604b      	str	r3, [r1, #4]
	char s_tmp[32];
	const char* content_type;
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	22a0      	movs	r2, #160	; 0xa0
 8005a2c:	589b      	ldr	r3, [r3, r2]
 8005a2e:	633b      	str	r3, [r7, #48]	; 0x30
	BOOL is_gzip = false;
 8005a30:	262f      	movs	r6, #47	; 0x2f
 8005a32:	19bb      	adds	r3, r7, r6
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
	/* preprocessing */
	if(ENDSWITH(file.path, ".gz"))
 8005a38:	183b      	adds	r3, r7, r0
 8005a3a:	195b      	adds	r3, r3, r5
 8005a3c:	681c      	ldr	r4, [r3, #0]
 8005a3e:	183b      	adds	r3, r7, r0
 8005a40:	195b      	adds	r3, r3, r5
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7fa fb69 	bl	800011c <strlen>
 8005a4a:	0003      	movs	r3, r0
 8005a4c:	3b03      	subs	r3, #3
 8005a4e:	18e3      	adds	r3, r4, r3
 8005a50:	4aaa      	ldr	r2, [pc, #680]	; (8005cfc <HTTPSendFile+0x2ec>)
 8005a52:	0011      	movs	r1, r2
 8005a54:	0018      	movs	r0, r3
 8005a56:	f7fa fb57 	bl	8000108 <strcmp>
 8005a5a:	1e03      	subs	r3, r0, #0
 8005a5c:	d11c      	bne.n	8005a98 <HTTPSendFile+0x88>
	{
		is_gzip = true;
 8005a5e:	19bb      	adds	r3, r7, r6
 8005a60:	2201      	movs	r2, #1
 8005a62:	701a      	strb	r2, [r3, #0]
		strcpy(s_tmp, file.path);
 8005a64:	2008      	movs	r0, #8
 8005a66:	183b      	adds	r3, r7, r0
 8005a68:	195b      	adds	r3, r3, r5
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	240c      	movs	r4, #12
 8005a6e:	193b      	adds	r3, r7, r4
 8005a70:	0011      	movs	r1, r2
 8005a72:	0018      	movs	r0, r3
 8005a74:	f003 fa8c 	bl	8008f90 <strcpy>
		s_tmp[strlen(s_tmp) - 3] = 0;
 8005a78:	193b      	adds	r3, r7, r4
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	f7fa fb4e 	bl	800011c <strlen>
 8005a80:	0003      	movs	r3, r0
 8005a82:	3b03      	subs	r3, #3
 8005a84:	193a      	adds	r2, r7, r4
 8005a86:	2100      	movs	r1, #0
 8005a88:	54d1      	strb	r1, [r2, r3]
		content_type = HTTPGetContentType(s_tmp);
 8005a8a:	193b      	adds	r3, r7, r4
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f7ff ff07 	bl	80058a0 <HTTPGetContentType>
 8005a92:	0003      	movs	r3, r0
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	e00a      	b.n	8005aae <HTTPSendFile+0x9e>
	}
	else
	{
		content_type = HTTPGetContentType(file.path);
 8005a98:	2348      	movs	r3, #72	; 0x48
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	4694      	mov	ip, r2
 8005a9e:	44bc      	add	ip, r7
 8005aa0:	4463      	add	r3, ip
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f7ff fefb 	bl	80058a0 <HTTPGetContentType>
 8005aaa:	0003      	movs	r3, r0
 8005aac:	637b      	str	r3, [r7, #52]	; 0x34
	}
	// construct header
	*buf = 0; // clear buffer
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	701a      	strb	r2, [r3, #0]
	// Line 1
	// HTTP/1.1
	strcat(buf, HTTP_STR_VERSION);
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	0018      	movs	r0, r3
 8005ab8:	f7fa fb30 	bl	800011c <strlen>
 8005abc:	0003      	movs	r3, r0
 8005abe:	001a      	movs	r2, r3
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	189a      	adds	r2, r3, r2
 8005ac4:	4b8e      	ldr	r3, [pc, #568]	; (8005d00 <HTTPSendFile+0x2f0>)
 8005ac6:	0010      	movs	r0, r2
 8005ac8:	0019      	movs	r1, r3
 8005aca:	2309      	movs	r3, #9
 8005acc:	001a      	movs	r2, r3
 8005ace:	f003 fa33 	bl	8008f38 <memcpy>
	buf += strlen(HTTP_STR_VERSION); // HTTP/1.1
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
	*buf = ' '; // HTTP/1.1_
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	2220      	movs	r2, #32
 8005adc:	701a      	strb	r2, [r3, #0]
	buf++;
 8005ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
	// CODE
	buf += u16toa(code, buf);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aea:	0011      	movs	r1, r2
 8005aec:	0018      	movs	r0, r3
 8005aee:	f001 f87f 	bl	8006bf0 <u16toa>
 8005af2:	0003      	movs	r3, r0
 8005af4:	001a      	movs	r2, r3
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, " OK\r\n");
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	0018      	movs	r0, r3
 8005b00:	f7fa fb0c 	bl	800011c <strlen>
 8005b04:	0003      	movs	r3, r0
 8005b06:	001a      	movs	r2, r3
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	189a      	adds	r2, r3, r2
 8005b0c:	4b7d      	ldr	r3, [pc, #500]	; (8005d04 <HTTPSendFile+0x2f4>)
 8005b0e:	0010      	movs	r0, r2
 8005b10:	0019      	movs	r1, r3
 8005b12:	2306      	movs	r3, #6
 8005b14:	001a      	movs	r2, r3
 8005b16:	f003 fa0f 	bl	8008f38 <memcpy>
	buf += 5;	// 200 OK\r\n
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	3305      	adds	r3, #5
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 2: Connection
	strcat(buf, "Connection: ");
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	0018      	movs	r0, r3
 8005b24:	f7fa fafa 	bl	800011c <strlen>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	189a      	adds	r2, r3, r2
 8005b30:	4b75      	ldr	r3, [pc, #468]	; (8005d08 <HTTPSendFile+0x2f8>)
 8005b32:	0010      	movs	r0, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	230d      	movs	r3, #13
 8005b38:	001a      	movs	r2, r3
 8005b3a:	f003 f9fd 	bl	8008f38 <memcpy>
	buf += 12;
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	330c      	adds	r3, #12
 8005b42:	633b      	str	r3, [r7, #48]	; 0x30
	if(pS->connection == KEEP_ALIVE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	791b      	ldrb	r3, [r3, #4]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d112      	bne.n	8005b72 <HTTPSendFile+0x162>
	{
		strcat(buf, "Keep-Alive\r\n");
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f7fa fae4 	bl	800011c <strlen>
 8005b54:	0003      	movs	r3, r0
 8005b56:	001a      	movs	r2, r3
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	189a      	adds	r2, r3, r2
 8005b5c:	4b6b      	ldr	r3, [pc, #428]	; (8005d0c <HTTPSendFile+0x2fc>)
 8005b5e:	0010      	movs	r0, r2
 8005b60:	0019      	movs	r1, r3
 8005b62:	230d      	movs	r3, #13
 8005b64:	001a      	movs	r2, r3
 8005b66:	f003 f9e7 	bl	8008f38 <memcpy>
		buf += 12;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b70:	e011      	b.n	8005b96 <HTTPSendFile+0x186>
	}
	else
	{
		strcat(buf, "Closed\r\n");
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fa fad1 	bl	800011c <strlen>
 8005b7a:	0003      	movs	r3, r0
 8005b7c:	001a      	movs	r2, r3
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	189a      	adds	r2, r3, r2
 8005b82:	4b63      	ldr	r3, [pc, #396]	; (8005d10 <HTTPSendFile+0x300>)
 8005b84:	0010      	movs	r0, r2
 8005b86:	0019      	movs	r1, r3
 8005b88:	2309      	movs	r3, #9
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	f003 f9d4 	bl	8008f38 <memcpy>
		buf += 8;
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3308      	adds	r3, #8
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 3: Content-Encoding
	if(is_gzip)
 8005b96:	232f      	movs	r3, #47	; 0x2f
 8005b98:	18fb      	adds	r3, r7, r3
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d011      	beq.n	8005bc4 <HTTPSendFile+0x1b4>
	{
		strcat(buf, "Content-Encoding: gzip\r\n");
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f7fa faba 	bl	800011c <strlen>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	001a      	movs	r2, r3
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	189a      	adds	r2, r3, r2
 8005bb0:	4b58      	ldr	r3, [pc, #352]	; (8005d14 <HTTPSendFile+0x304>)
 8005bb2:	0010      	movs	r0, r2
 8005bb4:	0019      	movs	r1, r3
 8005bb6:	2319      	movs	r3, #25
 8005bb8:	001a      	movs	r2, r3
 8005bba:	f003 f9bd 	bl	8008f38 <memcpy>
		buf += 24;
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	3318      	adds	r3, #24
 8005bc2:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Line 4: Content-Type
	strcat(buf, "Content-Type: ");
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f7fa faa8 	bl	800011c <strlen>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	001a      	movs	r2, r3
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	189a      	adds	r2, r3, r2
 8005bd4:	4b50      	ldr	r3, [pc, #320]	; (8005d18 <HTTPSendFile+0x308>)
 8005bd6:	0010      	movs	r0, r2
 8005bd8:	0019      	movs	r1, r3
 8005bda:	230f      	movs	r3, #15
 8005bdc:	001a      	movs	r2, r3
 8005bde:	f003 f9ab 	bl	8008f38 <memcpy>
	buf += 14;
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	330e      	adds	r3, #14
 8005be6:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, content_type);
 8005be8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	0011      	movs	r1, r2
 8005bee:	0018      	movs	r0, r3
 8005bf0:	f003 f9b3 	bl	8008f5a <strcat>
	buf += strlen(content_type);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f7fa fa90 	bl	800011c <strlen>
 8005bfc:	0002      	movs	r2, r0
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	633b      	str	r3, [r7, #48]	; 0x30
	strcat(buf, "\r\n");
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	0018      	movs	r0, r3
 8005c08:	f7fa fa88 	bl	800011c <strlen>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	001a      	movs	r2, r3
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	189a      	adds	r2, r3, r2
 8005c14:	4b41      	ldr	r3, [pc, #260]	; (8005d1c <HTTPSendFile+0x30c>)
 8005c16:	0010      	movs	r0, r2
 8005c18:	0019      	movs	r1, r3
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	f003 f98b 	bl	8008f38 <memcpy>
	buf += 2;
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	3302      	adds	r3, #2
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 5: Content-Length
	strcat(buf, "Content-Length: ");
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fa fa76 	bl	800011c <strlen>
 8005c30:	0003      	movs	r3, r0
 8005c32:	001a      	movs	r2, r3
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	189a      	adds	r2, r3, r2
 8005c38:	4b39      	ldr	r3, [pc, #228]	; (8005d20 <HTTPSendFile+0x310>)
 8005c3a:	0010      	movs	r0, r2
 8005c3c:	0019      	movs	r1, r3
 8005c3e:	2311      	movs	r3, #17
 8005c40:	001a      	movs	r2, r3
 8005c42:	f003 f979 	bl	8008f38 <memcpy>
	buf += 16;
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	3310      	adds	r3, #16
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30
	buf += u16toa((uint16_t)file.size, buf); // Content-Length: file.size
 8005c4c:	2448      	movs	r4, #72	; 0x48
 8005c4e:	2508      	movs	r5, #8
 8005c50:	197b      	adds	r3, r7, r5
 8005c52:	191b      	adds	r3, r3, r4
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5a:	0011      	movs	r1, r2
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f000 ffc7 	bl	8006bf0 <u16toa>
 8005c62:	0003      	movs	r3, r0
 8005c64:	001a      	movs	r2, r3
 8005c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c68:	189b      	adds	r3, r3, r2
 8005c6a:	633b      	str	r3, [r7, #48]	; 0x30
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7fa fa54 	bl	800011c <strlen>
 8005c74:	0003      	movs	r3, r0
 8005c76:	001a      	movs	r2, r3
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	189a      	adds	r2, r3, r2
 8005c7c:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <HTTPSendFile+0x314>)
 8005c7e:	0010      	movs	r0, r2
 8005c80:	0019      	movs	r1, r3
 8005c82:	2303      	movs	r3, #3
 8005c84:	001a      	movs	r2, r3
 8005c86:	f003 f957 	bl	8008f38 <memcpy>
	buf += 2;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	633b      	str	r3, [r7, #48]	; 0x30
	// Line 6: end of header
	strcat(buf, HTTP_LINE_DELIM); //\r\n\r\n
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	0018      	movs	r0, r3
 8005c94:	f7fa fa42 	bl	800011c <strlen>
 8005c98:	0003      	movs	r3, r0
 8005c9a:	001a      	movs	r2, r3
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	189a      	adds	r2, r3, r2
 8005ca0:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <HTTPSendFile+0x314>)
 8005ca2:	0010      	movs	r0, r2
 8005ca4:	0019      	movs	r1, r3
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	001a      	movs	r2, r3
 8005caa:	f003 f945 	bl	8008f38 <memcpy>
	buf += 2;
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	3302      	adds	r3, #2
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
	pS->len_response_header = strlen(pS->response_header);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	22a0      	movs	r2, #160	; 0xa0
 8005cb8:	589b      	ldr	r3, [r3, r2]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7fa fa2e 	bl	800011c <strlen>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	b299      	uxth	r1, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	229e      	movs	r2, #158	; 0x9e
 8005cc8:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = (uint16_t)file.size;
 8005cca:	197b      	adds	r3, r7, r5
 8005ccc:	191b      	adds	r3, r3, r4
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	b299      	uxth	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	22a4      	movs	r2, #164	; 0xa4
 8005cd6:	5299      	strh	r1, [r3, r2]
	pS->response_content = file.p_content;
 8005cd8:	197b      	adds	r3, r7, r5
 8005cda:	191b      	adds	r3, r3, r4
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	21a8      	movs	r1, #168	; 0xa8
 8005ce2:	505a      	str	r2, [r3, r1]
	pS->response_stage = RESPONSE_PREPARED;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	229c      	movs	r2, #156	; 0x9c
 8005ce8:	2101      	movs	r1, #1
 8005cea:	5499      	strb	r1, [r3, r2]

}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b00f      	add	sp, #60	; 0x3c
 8005cf2:	bcf0      	pop	{r4, r5, r6, r7}
 8005cf4:	bc08      	pop	{r3}
 8005cf6:	b002      	add	sp, #8
 8005cf8:	4718      	bx	r3
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	08009300 	.word	0x08009300
 8005d00:	0800946c 	.word	0x0800946c
 8005d04:	08009304 	.word	0x08009304
 8005d08:	0800930c 	.word	0x0800930c
 8005d0c:	0800931c 	.word	0x0800931c
 8005d10:	0800932c 	.word	0x0800932c
 8005d14:	08009338 	.word	0x08009338
 8005d18:	08009354 	.word	0x08009354
 8005d1c:	08009364 	.word	0x08009364
 8005d20:	08009368 	.word	0x08009368
 8005d24:	08009460 	.word	0x08009460

08005d28 <HTTPSendStr>:

void HTTPSendStr(HTTPRequestParseState* pS, int code, const char* content)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
	// construct header
//	unsigned char* buf = ch395.buffer;
	char* buf = pS->response_header;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	22a0      	movs	r2, #160	; 0xa0
 8005d38:	589b      	ldr	r3, [r3, r2]
 8005d3a:	61fb      	str	r3, [r7, #28]
	*buf = 0; // clear buffer
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
	strcat(buf, HTTP_STR_VERSION);
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f7fa f9e9 	bl	800011c <strlen>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	001a      	movs	r2, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	189a      	adds	r2, r3, r2
 8005d52:	4b86      	ldr	r3, [pc, #536]	; (8005f6c <HTTPSendStr+0x244>)
 8005d54:	0010      	movs	r0, r2
 8005d56:	0019      	movs	r1, r3
 8005d58:	2309      	movs	r3, #9
 8005d5a:	001a      	movs	r2, r3
 8005d5c:	f003 f8ec 	bl	8008f38 <memcpy>
	// Line 1
	// HTTP/1.1
	buf += strlen(HTTP_STR_VERSION);
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	3308      	adds	r3, #8
 8005d64:	61fb      	str	r3, [r7, #28]
	*buf = ' '; // HTTP/1.1_
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	701a      	strb	r2, [r3, #0]
	buf++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
	// CODE
	buf += u16toa(code, buf);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	69fa      	ldr	r2, [r7, #28]
 8005d78:	0011      	movs	r1, r2
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f000 ff38 	bl	8006bf0 <u16toa>
 8005d80:	0003      	movs	r3, r0
 8005d82:	001a      	movs	r2, r3
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	189b      	adds	r3, r3, r2
 8005d88:	61fb      	str	r3, [r7, #28]
	strcat(buf, " OK\r\n");
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f7fa f9c5 	bl	800011c <strlen>
 8005d92:	0003      	movs	r3, r0
 8005d94:	001a      	movs	r2, r3
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	189a      	adds	r2, r3, r2
 8005d9a:	4b75      	ldr	r3, [pc, #468]	; (8005f70 <HTTPSendStr+0x248>)
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	2306      	movs	r3, #6
 8005da2:	001a      	movs	r2, r3
 8005da4:	f003 f8c8 	bl	8008f38 <memcpy>
	buf += 5;	// 200 OK\r\n
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	3305      	adds	r3, #5
 8005dac:	61fb      	str	r3, [r7, #28]
	// Line 2: Connection
	strcat(buf, "Connection: ");
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f7fa f9b3 	bl	800011c <strlen>
 8005db6:	0003      	movs	r3, r0
 8005db8:	001a      	movs	r2, r3
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	189a      	adds	r2, r3, r2
 8005dbe:	4b6d      	ldr	r3, [pc, #436]	; (8005f74 <HTTPSendStr+0x24c>)
 8005dc0:	0010      	movs	r0, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	230d      	movs	r3, #13
 8005dc6:	001a      	movs	r2, r3
 8005dc8:	f003 f8b6 	bl	8008f38 <memcpy>
	buf += 12;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	61fb      	str	r3, [r7, #28]
	if(pS->connection == KEEP_ALIVE)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	791b      	ldrb	r3, [r3, #4]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d112      	bne.n	8005e00 <HTTPSendStr+0xd8>
	{
		strcat(buf, "Keep-Alive\r\n");
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f7fa f99d 	bl	800011c <strlen>
 8005de2:	0003      	movs	r3, r0
 8005de4:	001a      	movs	r2, r3
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	189a      	adds	r2, r3, r2
 8005dea:	4b63      	ldr	r3, [pc, #396]	; (8005f78 <HTTPSendStr+0x250>)
 8005dec:	0010      	movs	r0, r2
 8005dee:	0019      	movs	r1, r3
 8005df0:	230d      	movs	r3, #13
 8005df2:	001a      	movs	r2, r3
 8005df4:	f003 f8a0 	bl	8008f38 <memcpy>
		buf += 12;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	330c      	adds	r3, #12
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	e011      	b.n	8005e24 <HTTPSendStr+0xfc>
	}
	else
	{
		strcat(buf, "Closed\r\n");
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	0018      	movs	r0, r3
 8005e04:	f7fa f98a 	bl	800011c <strlen>
 8005e08:	0003      	movs	r3, r0
 8005e0a:	001a      	movs	r2, r3
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	189a      	adds	r2, r3, r2
 8005e10:	4b5a      	ldr	r3, [pc, #360]	; (8005f7c <HTTPSendStr+0x254>)
 8005e12:	0010      	movs	r0, r2
 8005e14:	0019      	movs	r1, r3
 8005e16:	2309      	movs	r3, #9
 8005e18:	001a      	movs	r2, r3
 8005e1a:	f003 f88d 	bl	8008f38 <memcpy>
		buf += 8;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3308      	adds	r3, #8
 8005e22:	61fb      	str	r3, [r7, #28]
	}
	// Line 3: Content-Type
	const char* content_type = HTTPGetContentType(pS->URI);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	3305      	adds	r3, #5
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff fd39 	bl	80058a0 <HTTPGetContentType>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	61bb      	str	r3, [r7, #24]
	strcat(buf, "Content-Type: ");
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7fa f971 	bl	800011c <strlen>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	001a      	movs	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	189a      	adds	r2, r3, r2
 8005e42:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <HTTPSendStr+0x258>)
 8005e44:	0010      	movs	r0, r2
 8005e46:	0019      	movs	r1, r3
 8005e48:	230f      	movs	r3, #15
 8005e4a:	001a      	movs	r2, r3
 8005e4c:	f003 f874 	bl	8008f38 <memcpy>
	buf += 14;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	330e      	adds	r3, #14
 8005e54:	61fb      	str	r3, [r7, #28]
	strcat(buf, content_type);
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	0011      	movs	r1, r2
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f003 f87c 	bl	8008f5a <strcat>
	buf += strlen(content_type);
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	0018      	movs	r0, r3
 8005e66:	f7fa f959 	bl	800011c <strlen>
 8005e6a:	0002      	movs	r2, r0
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	61fb      	str	r3, [r7, #28]
	strcat(buf, "\r\n");
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	0018      	movs	r0, r3
 8005e76:	f7fa f951 	bl	800011c <strlen>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	001a      	movs	r2, r3
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	189a      	adds	r2, r3, r2
 8005e82:	4b40      	ldr	r3, [pc, #256]	; (8005f84 <HTTPSendStr+0x25c>)
 8005e84:	0010      	movs	r0, r2
 8005e86:	0019      	movs	r1, r3
 8005e88:	2303      	movs	r3, #3
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	f003 f854 	bl	8008f38 <memcpy>
	buf += 2;
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	3302      	adds	r3, #2
 8005e94:	61fb      	str	r3, [r7, #28]
	// Line 4: Content-Length
	strcat(buf, "Content-Length: ");
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f7fa f93f 	bl	800011c <strlen>
 8005e9e:	0003      	movs	r3, r0
 8005ea0:	001a      	movs	r2, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	189a      	adds	r2, r3, r2
 8005ea6:	4b38      	ldr	r3, [pc, #224]	; (8005f88 <HTTPSendStr+0x260>)
 8005ea8:	0010      	movs	r0, r2
 8005eaa:	0019      	movs	r1, r3
 8005eac:	2311      	movs	r3, #17
 8005eae:	001a      	movs	r2, r3
 8005eb0:	f003 f842 	bl	8008f38 <memcpy>
	buf += 16;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3310      	adds	r3, #16
 8005eb8:	61fb      	str	r3, [r7, #28]
	uint16_t len_content = strlen(content);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f7fa f92d 	bl	800011c <strlen>
 8005ec2:	0002      	movs	r2, r0
 8005ec4:	2116      	movs	r1, #22
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	801a      	strh	r2, [r3, #0]
	buf += u16toa(len_content, buf); // Content-Length: file.size
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	187b      	adds	r3, r7, r1
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	0011      	movs	r1, r2
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 fe8c 	bl	8006bf0 <u16toa>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	001a      	movs	r2, r3
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	189b      	adds	r3, r3, r2
 8005ee0:	61fb      	str	r3, [r7, #28]
//	sprintf(buf, "%d\r\n", file.size);
	strcat(buf, HTTP_LINE_DELIM);
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f7fa f919 	bl	800011c <strlen>
 8005eea:	0003      	movs	r3, r0
 8005eec:	001a      	movs	r2, r3
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	189a      	adds	r2, r3, r2
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <HTTPSendStr+0x264>)
 8005ef4:	0010      	movs	r0, r2
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	2303      	movs	r3, #3
 8005efa:	001a      	movs	r2, r3
 8005efc:	f003 f81c 	bl	8008f38 <memcpy>
	buf += 2;
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	3302      	adds	r3, #2
 8005f04:	61fb      	str	r3, [r7, #28]
	// Line 5: End of header
	strcat(buf, HTTP_LINE_DELIM);
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f7fa f907 	bl	800011c <strlen>
 8005f0e:	0003      	movs	r3, r0
 8005f10:	001a      	movs	r2, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	189a      	adds	r2, r3, r2
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HTTPSendStr+0x264>)
 8005f18:	0010      	movs	r0, r2
 8005f1a:	0019      	movs	r1, r3
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	001a      	movs	r2, r3
 8005f20:	f003 f80a 	bl	8008f38 <memcpy>
	buf += 2;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3302      	adds	r3, #2
 8005f28:	61fb      	str	r3, [r7, #28]
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	22a0      	movs	r2, #160	; 0xa0
 8005f2e:	589b      	ldr	r3, [r3, r2]
 8005f30:	0018      	movs	r0, r3
 8005f32:	f7fa f8f3 	bl	800011c <strlen>
 8005f36:	0003      	movs	r3, r0
 8005f38:	b299      	uxth	r1, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	229e      	movs	r2, #158	; 0x9e
 8005f3e:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = strlen(content);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	0018      	movs	r0, r3
 8005f44:	f7fa f8ea 	bl	800011c <strlen>
 8005f48:	0003      	movs	r3, r0
 8005f4a:	b299      	uxth	r1, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	22a4      	movs	r2, #164	; 0xa4
 8005f50:	5299      	strh	r1, [r3, r2]
	pS->response_content = (uint8_t*)content;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	21a8      	movs	r1, #168	; 0xa8
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	505a      	str	r2, [r3, r1]
	pS->response_stage = RESPONSE_PREPARED;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	229c      	movs	r2, #156	; 0x9c
 8005f5e:	2101      	movs	r1, #1
 8005f60:	5499      	strb	r1, [r3, r2]
}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b008      	add	sp, #32
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	46c0      	nop			; (mov r8, r8)
 8005f6c:	0800946c 	.word	0x0800946c
 8005f70:	08009304 	.word	0x08009304
 8005f74:	0800930c 	.word	0x0800930c
 8005f78:	0800931c 	.word	0x0800931c
 8005f7c:	0800932c 	.word	0x0800932c
 8005f80:	08009354 	.word	0x08009354
 8005f84:	08009364 	.word	0x08009364
 8005f88:	08009368 	.word	0x08009368
 8005f8c:	08009460 	.word	0x08009460

08005f90 <HTTPredirect>:

void HTTPredirect(HTTPRequestParseState *pS, const char* URI)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
	char* buf = pS->response_header;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	22a0      	movs	r2, #160	; 0xa0
 8005f9e:	589b      	ldr	r3, [r3, r2]
 8005fa0:	60fb      	str	r3, [r7, #12]
	*buf = 0; // clear buffer
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
	// HTTP/1.1 302 Found
	// Location: /
	strcat(buf, HTTP_STR_VERSION);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f7fa f8b6 	bl	800011c <strlen>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	001a      	movs	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	189a      	adds	r2, r3, r2
 8005fb8:	4b7c      	ldr	r3, [pc, #496]	; (80061ac <HTTPredirect+0x21c>)
 8005fba:	0010      	movs	r0, r2
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	2309      	movs	r3, #9
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	f002 ffb9 	bl	8008f38 <memcpy>
	buf += strlen(HTTP_STR_VERSION);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	60fb      	str	r3, [r7, #12]
	strcat(buf, " 302");
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	0018      	movs	r0, r3
 8005fd0:	f7fa f8a4 	bl	800011c <strlen>
 8005fd4:	0003      	movs	r3, r0
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	189a      	adds	r2, r3, r2
 8005fdc:	4b74      	ldr	r3, [pc, #464]	; (80061b0 <HTTPredirect+0x220>)
 8005fde:	0010      	movs	r0, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	2305      	movs	r3, #5
 8005fe4:	001a      	movs	r2, r3
 8005fe6:	f002 ffa7 	bl	8008f38 <memcpy>
	buf += 4;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3304      	adds	r3, #4
 8005fee:	60fb      	str	r3, [r7, #12]
	strcat(buf, " Found");
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f7fa f892 	bl	800011c <strlen>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	189a      	adds	r2, r3, r2
 8006000:	4b6c      	ldr	r3, [pc, #432]	; (80061b4 <HTTPredirect+0x224>)
 8006002:	0010      	movs	r0, r2
 8006004:	0019      	movs	r1, r3
 8006006:	2307      	movs	r3, #7
 8006008:	001a      	movs	r2, r3
 800600a:	f002 ff95 	bl	8008f38 <memcpy>
	buf += 6;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3306      	adds	r3, #6
 8006012:	60fb      	str	r3, [r7, #12]
	strcat(buf,HTTP_LINE_DELIM);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	0018      	movs	r0, r3
 8006018:	f7fa f880 	bl	800011c <strlen>
 800601c:	0003      	movs	r3, r0
 800601e:	001a      	movs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	189a      	adds	r2, r3, r2
 8006024:	4b64      	ldr	r3, [pc, #400]	; (80061b8 <HTTPredirect+0x228>)
 8006026:	0010      	movs	r0, r2
 8006028:	0019      	movs	r1, r3
 800602a:	2303      	movs	r3, #3
 800602c:	001a      	movs	r2, r3
 800602e:	f002 ff83 	bl	8008f38 <memcpy>
	buf +=2 ;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3302      	adds	r3, #2
 8006036:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Connection: ");
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	0018      	movs	r0, r3
 800603c:	f7fa f86e 	bl	800011c <strlen>
 8006040:	0003      	movs	r3, r0
 8006042:	001a      	movs	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	189a      	adds	r2, r3, r2
 8006048:	4b5c      	ldr	r3, [pc, #368]	; (80061bc <HTTPredirect+0x22c>)
 800604a:	0010      	movs	r0, r2
 800604c:	0019      	movs	r1, r3
 800604e:	230d      	movs	r3, #13
 8006050:	001a      	movs	r2, r3
 8006052:	f002 ff71 	bl	8008f38 <memcpy>
	buf += 12;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	330c      	adds	r3, #12
 800605a:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Closed");
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	0018      	movs	r0, r3
 8006060:	f7fa f85c 	bl	800011c <strlen>
 8006064:	0003      	movs	r3, r0
 8006066:	001a      	movs	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	189a      	adds	r2, r3, r2
 800606c:	4b54      	ldr	r3, [pc, #336]	; (80061c0 <HTTPredirect+0x230>)
 800606e:	0010      	movs	r0, r2
 8006070:	0019      	movs	r1, r3
 8006072:	2307      	movs	r3, #7
 8006074:	001a      	movs	r2, r3
 8006076:	f002 ff5f 	bl	8008f38 <memcpy>
	buf += 6;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3306      	adds	r3, #6
 800607e:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	0018      	movs	r0, r3
 8006084:	f7fa f84a 	bl	800011c <strlen>
 8006088:	0003      	movs	r3, r0
 800608a:	001a      	movs	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	189a      	adds	r2, r3, r2
 8006090:	4b49      	ldr	r3, [pc, #292]	; (80061b8 <HTTPredirect+0x228>)
 8006092:	0010      	movs	r0, r2
 8006094:	0019      	movs	r1, r3
 8006096:	2303      	movs	r3, #3
 8006098:	001a      	movs	r2, r3
 800609a:	f002 ff4d 	bl	8008f38 <memcpy>
	buf += 2;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3302      	adds	r3, #2
 80060a2:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Content-Length: ");
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7fa f838 	bl	800011c <strlen>
 80060ac:	0003      	movs	r3, r0
 80060ae:	001a      	movs	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	189a      	adds	r2, r3, r2
 80060b4:	4b43      	ldr	r3, [pc, #268]	; (80061c4 <HTTPredirect+0x234>)
 80060b6:	0010      	movs	r0, r2
 80060b8:	0019      	movs	r1, r3
 80060ba:	2311      	movs	r3, #17
 80060bc:	001a      	movs	r2, r3
 80060be:	f002 ff3b 	bl	8008f38 <memcpy>
	buf += 16;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3310      	adds	r3, #16
 80060c6:	60fb      	str	r3, [r7, #12]
	strcat(buf, "0");
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	0018      	movs	r0, r3
 80060cc:	f7fa f826 	bl	800011c <strlen>
 80060d0:	0003      	movs	r3, r0
 80060d2:	001a      	movs	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	189a      	adds	r2, r3, r2
 80060d8:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <HTTPredirect+0x238>)
 80060da:	0010      	movs	r0, r2
 80060dc:	0019      	movs	r1, r3
 80060de:	2302      	movs	r3, #2
 80060e0:	001a      	movs	r2, r3
 80060e2:	f002 ff29 	bl	8008f38 <memcpy>
	buf += 1;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	3301      	adds	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
	strcat(buf, HTTP_LINE_DELIM);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	0018      	movs	r0, r3
 80060f0:	f7fa f814 	bl	800011c <strlen>
 80060f4:	0003      	movs	r3, r0
 80060f6:	001a      	movs	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	189a      	adds	r2, r3, r2
 80060fc:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <HTTPredirect+0x228>)
 80060fe:	0010      	movs	r0, r2
 8006100:	0019      	movs	r1, r3
 8006102:	2303      	movs	r3, #3
 8006104:	001a      	movs	r2, r3
 8006106:	f002 ff17 	bl	8008f38 <memcpy>
	buf += 2;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3302      	adds	r3, #2
 800610e:	60fb      	str	r3, [r7, #12]
	strcat(buf, "Location: ");
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	0018      	movs	r0, r3
 8006114:	f7fa f802 	bl	800011c <strlen>
 8006118:	0003      	movs	r3, r0
 800611a:	001a      	movs	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	189a      	adds	r2, r3, r2
 8006120:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <HTTPredirect+0x23c>)
 8006122:	0010      	movs	r0, r2
 8006124:	0019      	movs	r1, r3
 8006126:	230b      	movs	r3, #11
 8006128:	001a      	movs	r2, r3
 800612a:	f002 ff05 	bl	8008f38 <memcpy>
	buf+= 10;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	330a      	adds	r3, #10
 8006132:	60fb      	str	r3, [r7, #12]
	strcat(buf, URI);
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	0011      	movs	r1, r2
 800613a:	0018      	movs	r0, r3
 800613c:	f002 ff0d 	bl	8008f5a <strcat>
	strcat(buf, HTTP_LINE_DELIM);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	0018      	movs	r0, r3
 8006144:	f7f9 ffea 	bl	800011c <strlen>
 8006148:	0003      	movs	r3, r0
 800614a:	001a      	movs	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	189a      	adds	r2, r3, r2
 8006150:	4b19      	ldr	r3, [pc, #100]	; (80061b8 <HTTPredirect+0x228>)
 8006152:	0010      	movs	r0, r2
 8006154:	0019      	movs	r1, r3
 8006156:	2303      	movs	r3, #3
 8006158:	001a      	movs	r2, r3
 800615a:	f002 feed 	bl	8008f38 <memcpy>
	strcat(buf, HTTP_LINE_DELIM);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	0018      	movs	r0, r3
 8006162:	f7f9 ffdb 	bl	800011c <strlen>
 8006166:	0003      	movs	r3, r0
 8006168:	001a      	movs	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	189a      	adds	r2, r3, r2
 800616e:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <HTTPredirect+0x228>)
 8006170:	0010      	movs	r0, r2
 8006172:	0019      	movs	r1, r3
 8006174:	2303      	movs	r3, #3
 8006176:	001a      	movs	r2, r3
 8006178:	f002 fede 	bl	8008f38 <memcpy>
	// Start Sending
	pS->len_response_header = strlen(pS->response_header);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	22a0      	movs	r2, #160	; 0xa0
 8006180:	589b      	ldr	r3, [r3, r2]
 8006182:	0018      	movs	r0, r3
 8006184:	f7f9 ffca 	bl	800011c <strlen>
 8006188:	0003      	movs	r3, r0
 800618a:	b299      	uxth	r1, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	229e      	movs	r2, #158	; 0x9e
 8006190:	5299      	strh	r1, [r3, r2]
	pS->len_response_content_remain = 0;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	22a4      	movs	r2, #164	; 0xa4
 8006196:	2100      	movs	r1, #0
 8006198:	5299      	strh	r1, [r3, r2]
	pS->response_stage = RESPONSE_PREPARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	229c      	movs	r2, #156	; 0x9c
 800619e:	2101      	movs	r1, #1
 80061a0:	5499      	strb	r1, [r3, r2]
}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b004      	add	sp, #16
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	0800946c 	.word	0x0800946c
 80061b0:	0800937c 	.word	0x0800937c
 80061b4:	08009384 	.word	0x08009384
 80061b8:	08009460 	.word	0x08009460
 80061bc:	0800930c 	.word	0x0800930c
 80061c0:	0800938c 	.word	0x0800938c
 80061c4:	08009368 	.word	0x08009368
 80061c8:	08009394 	.word	0x08009394
 80061cc:	08009398 	.word	0x08009398

080061d0 <HTTPonNotFound>:

void HTTPonNotFound(HTTPRequestParseState *pS)
{
 80061d0:	b5b0      	push	{r4, r5, r7, lr}
 80061d2:	b0a2      	sub	sp, #136	; 0x88
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
	char s_tmp[MAX_LEN_URI + 4];
	static char s_notfound[MAX_LEN_URI+16];
	// look for file
	if(FS_exists(&FS, pS->URI))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1d5a      	adds	r2, r3, #5
 80061dc:	4b42      	ldr	r3, [pc, #264]	; (80062e8 <HTTPonNotFound+0x118>)
 80061de:	0011      	movs	r1, r2
 80061e0:	0018      	movs	r0, r3
 80061e2:	f7ff f833 	bl	800524c <FS_exists>
 80061e6:	1e03      	subs	r3, r0, #0
 80061e8:	d01e      	beq.n	8006228 <HTTPonNotFound+0x58>
	{
		FSfile_typedef file = FS_open(&FS, pS->URI);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	1d5a      	adds	r2, r3, #5
 80061ee:	2418      	movs	r4, #24
 80061f0:	193b      	adds	r3, r7, r4
 80061f2:	493d      	ldr	r1, [pc, #244]	; (80062e8 <HTTPonNotFound+0x118>)
 80061f4:	0018      	movs	r0, r3
 80061f6:	f7fe ffd9 	bl	80051ac <FS_open>
		if(file.path)
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d04e      	beq.n	80062a0 <HTTPonNotFound+0xd0>
		{
			HTTPSendFile(pS, 200, FS_open(&FS, pS->URI));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	1d5a      	adds	r2, r3, #5
 8006206:	2468      	movs	r4, #104	; 0x68
 8006208:	193b      	adds	r3, r7, r4
 800620a:	4937      	ldr	r1, [pc, #220]	; (80062e8 <HTTPonNotFound+0x118>)
 800620c:	0018      	movs	r0, r3
 800620e:	f7fe ffcd 	bl	80051ac <FS_open>
 8006212:	193b      	adds	r3, r7, r4
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	466a      	mov	r2, sp
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	6011      	str	r1, [r2, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	21c8      	movs	r1, #200	; 0xc8
 8006222:	f7ff fbf5 	bl	8005a10 <HTTPSendFile>
 8006226:	e05c      	b.n	80062e2 <HTTPonNotFound+0x112>
			return;
		}
	}
	else
	{
		strcpy(s_tmp, pS->URI);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	1d5a      	adds	r2, r3, #5
 800622c:	2424      	movs	r4, #36	; 0x24
 800622e:	193b      	adds	r3, r7, r4
 8006230:	0011      	movs	r1, r2
 8006232:	0018      	movs	r0, r3
 8006234:	f002 feac 	bl	8008f90 <strcpy>
		strcat(s_tmp, ".gz");
 8006238:	193b      	adds	r3, r7, r4
 800623a:	0018      	movs	r0, r3
 800623c:	f7f9 ff6e 	bl	800011c <strlen>
 8006240:	0003      	movs	r3, r0
 8006242:	001a      	movs	r2, r3
 8006244:	193b      	adds	r3, r7, r4
 8006246:	189a      	adds	r2, r3, r2
 8006248:	4b28      	ldr	r3, [pc, #160]	; (80062ec <HTTPonNotFound+0x11c>)
 800624a:	0010      	movs	r0, r2
 800624c:	0019      	movs	r1, r3
 800624e:	2304      	movs	r3, #4
 8006250:	001a      	movs	r2, r3
 8006252:	f002 fe71 	bl	8008f38 <memcpy>
		if(FS_exists(&FS, s_tmp))
 8006256:	193a      	adds	r2, r7, r4
 8006258:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <HTTPonNotFound+0x118>)
 800625a:	0011      	movs	r1, r2
 800625c:	0018      	movs	r0, r3
 800625e:	f7fe fff5 	bl	800524c <FS_exists>
 8006262:	1e03      	subs	r3, r0, #0
 8006264:	d01c      	beq.n	80062a0 <HTTPonNotFound+0xd0>
		{
			FSfile_typedef file = FS_open(&FS, s_tmp);
 8006266:	250c      	movs	r5, #12
 8006268:	197b      	adds	r3, r7, r5
 800626a:	193a      	adds	r2, r7, r4
 800626c:	491e      	ldr	r1, [pc, #120]	; (80062e8 <HTTPonNotFound+0x118>)
 800626e:	0018      	movs	r0, r3
 8006270:	f7fe ff9c 	bl	80051ac <FS_open>
			if(file.path)
 8006274:	197b      	adds	r3, r7, r5
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d011      	beq.n	80062a0 <HTTPonNotFound+0xd0>
			{
				HTTPSendFile(pS, 200, FS_open(&FS, s_tmp));
 800627c:	2574      	movs	r5, #116	; 0x74
 800627e:	197b      	adds	r3, r7, r5
 8006280:	193a      	adds	r2, r7, r4
 8006282:	4919      	ldr	r1, [pc, #100]	; (80062e8 <HTTPonNotFound+0x118>)
 8006284:	0018      	movs	r0, r3
 8006286:	f7fe ff91 	bl	80051ac <FS_open>
 800628a:	197b      	adds	r3, r7, r5
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	466a      	mov	r2, sp
 8006290:	6899      	ldr	r1, [r3, #8]
 8006292:	6011      	str	r1, [r2, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	21c8      	movs	r1, #200	; 0xc8
 800629a:	f7ff fbb9 	bl	8005a10 <HTTPSendFile>
 800629e:	e020      	b.n	80062e2 <HTTPonNotFound+0x112>
				return;
			}
		}
	}
	strcpy(s_notfound, "Not Found: ");
 80062a0:	4b13      	ldr	r3, [pc, #76]	; (80062f0 <HTTPonNotFound+0x120>)
 80062a2:	4a14      	ldr	r2, [pc, #80]	; (80062f4 <HTTPonNotFound+0x124>)
 80062a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80062a6:	c313      	stmia	r3!, {r0, r1, r4}
	strncat(s_notfound, pS->URI, MAX_LEN_URI);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	1d59      	adds	r1, r3, #5
 80062ac:	4b10      	ldr	r3, [pc, #64]	; (80062f0 <HTTPonNotFound+0x120>)
 80062ae:	2240      	movs	r2, #64	; 0x40
 80062b0:	0018      	movs	r0, r3
 80062b2:	f002 fe75 	bl	8008fa0 <strncat>
	strcat(s_notfound, HTTP_LINE_DELIM);
 80062b6:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <HTTPonNotFound+0x120>)
 80062b8:	0018      	movs	r0, r3
 80062ba:	f7f9 ff2f 	bl	800011c <strlen>
 80062be:	0003      	movs	r3, r0
 80062c0:	001a      	movs	r2, r3
 80062c2:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HTTPonNotFound+0x120>)
 80062c4:	18d2      	adds	r2, r2, r3
 80062c6:	4b0c      	ldr	r3, [pc, #48]	; (80062f8 <HTTPonNotFound+0x128>)
 80062c8:	0010      	movs	r0, r2
 80062ca:	0019      	movs	r1, r3
 80062cc:	2303      	movs	r3, #3
 80062ce:	001a      	movs	r2, r3
 80062d0:	f002 fe32 	bl	8008f38 <memcpy>
	HTTPSendStr(pS, 404, s_notfound);
 80062d4:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <HTTPonNotFound+0x120>)
 80062d6:	23ca      	movs	r3, #202	; 0xca
 80062d8:	0059      	lsls	r1, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0018      	movs	r0, r3
 80062de:	f7ff fd23 	bl	8005d28 <HTTPSendStr>
}
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b020      	add	sp, #128	; 0x80
 80062e6:	bdb0      	pop	{r4, r5, r7, pc}
 80062e8:	20000e28 	.word	0x20000e28
 80062ec:	08009300 	.word	0x08009300
 80062f0:	20000cf8 	.word	0x20000cf8
 80062f4:	080093a4 	.word	0x080093a4
 80062f8:	08009460 	.word	0x08009460

080062fc <HTTPHandle>:

void HTTPHandle(CH395_TypeDef *pch395) // call on interrupt
{
 80062fc:	b5b0      	push	{r4, r5, r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]

	int8_t i = pch395->SOCK_responding; // NOTE: number:i begins from 1
 8006304:	2113      	movs	r1, #19
 8006306:	187b      	adds	r3, r7, r1
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	7e92      	ldrb	r2, [r2, #26]
 800630c:	701a      	strb	r2, [r3, #0]
	uint8_t j;
	if(i > 0)
 800630e:	000a      	movs	r2, r1
 8006310:	18bb      	adds	r3, r7, r2
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b25b      	sxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	dc00      	bgt.n	800631c <HTTPHandle+0x20>
 800631a:	e14b      	b.n	80065b4 <HTTPHandle+0x2b8>
	{
		HTTPRequestParseState *pS = &parseStates[i-1];
 800631c:	18bb      	adds	r3, r7, r2
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b25b      	sxtb	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	22b0      	movs	r2, #176	; 0xb0
 8006326:	435a      	muls	r2, r3
 8006328:	4ba4      	ldr	r3, [pc, #656]	; (80065bc <HTTPHandle+0x2c0>)
 800632a:	18d3      	adds	r3, r2, r3
 800632c:	60fb      	str	r3, [r7, #12]
		// CASE: Socket recv has request, no response under preparation, can prepare a new response
		if(pS->ready  && pS->response_stage == RESPONSE_NOT_PREPARED)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	22ac      	movs	r2, #172	; 0xac
 8006332:	5c9b      	ldrb	r3, [r3, r2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d036      	beq.n	80063a6 <HTTPHandle+0xaa>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	229c      	movs	r2, #156	; 0x9c
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d131      	bne.n	80063a6 <HTTPHandle+0xaa>
		{

			for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 8006342:	2317      	movs	r3, #23
 8006344:	18fb      	adds	r3, r7, r3
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e01e      	b.n	800638a <HTTPHandle+0x8e>
			{
				if(strncmp(pS->URI, HTTPResponders[j].uri, MAX_LEN_URI) == 0) // matches
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1d58      	adds	r0, r3, #5
 8006350:	2417      	movs	r4, #23
 8006352:	193b      	adds	r3, r7, r4
 8006354:	781a      	ldrb	r2, [r3, #0]
 8006356:	4b9a      	ldr	r3, [pc, #616]	; (80065c0 <HTTPHandle+0x2c4>)
 8006358:	00d2      	lsls	r2, r2, #3
 800635a:	58d3      	ldr	r3, [r2, r3]
 800635c:	2240      	movs	r2, #64	; 0x40
 800635e:	0019      	movs	r1, r3
 8006360:	f002 fe34 	bl	8008fcc <strncmp>
 8006364:	1e03      	subs	r3, r0, #0
 8006366:	d10a      	bne.n	800637e <HTTPHandle+0x82>
				{
					(HTTPResponders[j].func)(pS); // call HTTPResponder service function
 8006368:	193b      	adds	r3, r7, r4
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	4a94      	ldr	r2, [pc, #592]	; (80065c0 <HTTPHandle+0x2c4>)
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	18d3      	adds	r3, r2, r3
 8006372:	3304      	adds	r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	0010      	movs	r0, r2
 800637a:	4798      	blx	r3
					break;
 800637c:	e00a      	b.n	8006394 <HTTPHandle+0x98>
			for(j=0; j<NUM_HTTP_RESPONDERS; ++j)
 800637e:	2217      	movs	r2, #23
 8006380:	18bb      	adds	r3, r7, r2
 8006382:	18ba      	adds	r2, r7, r2
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	3201      	adds	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
 800638a:	2317      	movs	r3, #23
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b08      	cmp	r3, #8
 8006392:	d9db      	bls.n	800634c <HTTPHandle+0x50>
				}
			}
			if(j >= NUM_HTTP_RESPONDERS) // Resource not found
 8006394:	2317      	movs	r3, #23
 8006396:	18fb      	adds	r3, r7, r3
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b08      	cmp	r3, #8
 800639c:	d903      	bls.n	80063a6 <HTTPHandle+0xaa>
			{
				HTTPonNotFound(pS);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7ff ff15 	bl	80061d0 <HTTPonNotFound>

		}

		// CASE : CH395 chip is free for transmission,
		// judge if response has been prepared for transmission
		if((pch395->TX_available & (1 << i)) != 0 && pS->ready)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	7edb      	ldrb	r3, [r3, #27]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	001a      	movs	r2, r3
 80063ae:	2313      	movs	r3, #19
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	b25b      	sxtb	r3, r3
 80063b6:	411a      	asrs	r2, r3
 80063b8:	0013      	movs	r3, r2
 80063ba:	2201      	movs	r2, #1
 80063bc:	4013      	ands	r3, r2
 80063be:	d100      	bne.n	80063c2 <HTTPHandle+0xc6>
 80063c0:	e0e0      	b.n	8006584 <HTTPHandle+0x288>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22ac      	movs	r2, #172	; 0xac
 80063c6:	5c9b      	ldrb	r3, [r3, r2]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d100      	bne.n	80063ce <HTTPHandle+0xd2>
 80063cc:	e0da      	b.n	8006584 <HTTPHandle+0x288>
		{
			// CASE 1: parser has prepared the response content,
			// start the process of data transmission immediately
			if(pS->response_stage == RESPONSE_PREPARED)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	229c      	movs	r2, #156	; 0x9c
 80063d2:	5c9b      	ldrb	r3, [r3, r2]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d000      	beq.n	80063da <HTTPHandle+0xde>
 80063d8:	e078      	b.n	80064cc <HTTPHandle+0x1d0>
			{
				uint16_t max_len_content = MAX_SIZE_PACK - pS->len_response_header;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	229e      	movs	r2, #158	; 0x9e
 80063de:	5a9a      	ldrh	r2, [r3, r2]
 80063e0:	200a      	movs	r0, #10
 80063e2:	183b      	adds	r3, r7, r0
 80063e4:	4977      	ldr	r1, [pc, #476]	; (80065c4 <HTTPHandle+0x2c8>)
 80063e6:	1a8a      	subs	r2, r1, r2
 80063e8:	801a      	strh	r2, [r3, #0]
				uint16_t len_content_this_time = ((pS->len_response_content_remain < max_len_content)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	22a4      	movs	r2, #164	; 0xa4
 80063ee:	5a99      	ldrh	r1, [r3, r2]
 80063f0:	2308      	movs	r3, #8
 80063f2:	18fa      	adds	r2, r7, r3
 80063f4:	183b      	adds	r3, r7, r0
 80063f6:	1c0c      	adds	r4, r1, #0
 80063f8:	881b      	ldrh	r3, [r3, #0]
 80063fa:	b298      	uxth	r0, r3
 80063fc:	b2a1      	uxth	r1, r4
 80063fe:	4288      	cmp	r0, r1
 8006400:	d900      	bls.n	8006404 <HTTPHandle+0x108>
 8006402:	1c23      	adds	r3, r4, #0
 8006404:	8013      	strh	r3, [r2, #0]
						? (pS->len_response_content_remain)
								: (max_len_content));
				CH395StartSendingData(i, pS->len_response_header + len_content_this_time);
 8006406:	2513      	movs	r5, #19
 8006408:	197b      	adds	r3, r7, r5
 800640a:	7818      	ldrb	r0, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	229e      	movs	r2, #158	; 0x9e
 8006410:	5a9a      	ldrh	r2, [r3, r2]
 8006412:	2408      	movs	r4, #8
 8006414:	193b      	adds	r3, r7, r4
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	18d3      	adds	r3, r2, r3
 800641a:	b29b      	uxth	r3, r3
 800641c:	0019      	movs	r1, r3
 800641e:	f7fe fb4d 	bl	8004abc <CH395StartSendingData>
				CH395ContinueSendingData((uint8_t*)pS->response_header, pS->len_response_header);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	22a0      	movs	r2, #160	; 0xa0
 8006426:	589a      	ldr	r2, [r3, r2]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	219e      	movs	r1, #158	; 0x9e
 800642c:	5a5b      	ldrh	r3, [r3, r1]
 800642e:	0019      	movs	r1, r3
 8006430:	0010      	movs	r0, r2
 8006432:	f7fe fb69 	bl	8004b08 <CH395ContinueSendingData>
				CH395ContinueSendingData((const uint8_t*)pS->response_content, len_content_this_time);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	22a8      	movs	r2, #168	; 0xa8
 800643a:	589a      	ldr	r2, [r3, r2]
 800643c:	193b      	adds	r3, r7, r4
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	0019      	movs	r1, r3
 8006442:	0010      	movs	r0, r2
 8006444:	f7fe fb60 	bl	8004b08 <CH395ContinueSendingData>
				CH395Complete();
 8006448:	f7fe fb84 	bl	8004b54 <CH395Complete>
				ch395.TX_available &= ~(1<<i);
 800644c:	4b5e      	ldr	r3, [pc, #376]	; (80065c8 <HTTPHandle+0x2cc>)
 800644e:	7edb      	ldrb	r3, [r3, #27]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	b25b      	sxtb	r3, r3
 8006454:	0028      	movs	r0, r5
 8006456:	183a      	adds	r2, r7, r0
 8006458:	7812      	ldrb	r2, [r2, #0]
 800645a:	b252      	sxtb	r2, r2
 800645c:	2101      	movs	r1, #1
 800645e:	4091      	lsls	r1, r2
 8006460:	000a      	movs	r2, r1
 8006462:	b252      	sxtb	r2, r2
 8006464:	43d2      	mvns	r2, r2
 8006466:	b252      	sxtb	r2, r2
 8006468:	4013      	ands	r3, r2
 800646a:	b25b      	sxtb	r3, r3
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b56      	ldr	r3, [pc, #344]	; (80065c8 <HTTPHandle+0x2cc>)
 8006470:	76da      	strb	r2, [r3, #27]
				pS->len_response_content_remain -= len_content_this_time;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	22a4      	movs	r2, #164	; 0xa4
 8006476:	5a9a      	ldrh	r2, [r3, r2]
 8006478:	193b      	adds	r3, r7, r4
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	b299      	uxth	r1, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22a4      	movs	r2, #164	; 0xa4
 8006484:	5299      	strh	r1, [r3, r2]
				pS->response_content += len_content_this_time;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	22a8      	movs	r2, #168	; 0xa8
 800648a:	589a      	ldr	r2, [r3, r2]
 800648c:	193b      	adds	r3, r7, r4
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	18d2      	adds	r2, r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	21a8      	movs	r1, #168	; 0xa8
 8006496:	505a      	str	r2, [r3, r1]
				if(pS->len_response_content_remain == 0) // all content completely sent this time
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	22a4      	movs	r2, #164	; 0xa4
 800649c:	5a9b      	ldrh	r3, [r3, r2]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10f      	bne.n	80064c2 <HTTPHandle+0x1c6>
				{
					HTTPclose(i);
 80064a2:	183b      	adds	r3, r7, r0
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 f8cc 	bl	8006644 <HTTPclose>
					resetHTTPParseState(pS);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	0018      	movs	r0, r3
 80064b0:	f7ff f9ce 	bl	8005850 <resetHTTPParseState>
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 80064b4:	f000 f88c 	bl	80065d0 <getNextSock>
 80064b8:	0003      	movs	r3, r0
 80064ba:	001a      	movs	r2, r3
 80064bc:	4b42      	ldr	r3, [pc, #264]	; (80065c8 <HTTPHandle+0x2cc>)
 80064be:	769a      	strb	r2, [r3, #26]
 80064c0:	e060      	b.n	8006584 <HTTPHandle+0x288>
				}
				else // content remained to be sent next time
				{
					pS->response_stage = RESPONSE_CONTENT_REMAIN;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	229c      	movs	r2, #156	; 0x9c
 80064c6:	2102      	movs	r1, #2
 80064c8:	5499      	strb	r1, [r3, r2]
 80064ca:	e05b      	b.n	8006584 <HTTPHandle+0x288>
				}
			}
			// CASE2: previous response has remaining parts to be done, continue the sending process
			else if(pS->response_stage == RESPONSE_CONTENT_REMAIN)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	229c      	movs	r2, #156	; 0x9c
 80064d0:	5c9b      	ldrb	r3, [r3, r2]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d156      	bne.n	8006584 <HTTPHandle+0x288>
			{
				uint16_t len = pS->len_response_content_remain;
 80064d6:	2414      	movs	r4, #20
 80064d8:	193b      	adds	r3, r7, r4
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	21a4      	movs	r1, #164	; 0xa4
 80064de:	5a52      	ldrh	r2, [r2, r1]
 80064e0:	801a      	strh	r2, [r3, #0]
				CH395SendData(i, pS->response_content, ((len<MAX_SIZE_PACK)?(len):(len=MAX_SIZE_PACK)));
 80064e2:	2313      	movs	r3, #19
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	7818      	ldrb	r0, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	22a8      	movs	r2, #168	; 0xa8
 80064ec:	5899      	ldr	r1, [r3, r2]
 80064ee:	193b      	adds	r3, r7, r4
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	4a36      	ldr	r2, [pc, #216]	; (80065cc <HTTPHandle+0x2d0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d904      	bls.n	8006502 <HTTPHandle+0x206>
 80064f8:	193b      	adds	r3, r7, r4
 80064fa:	4a32      	ldr	r2, [pc, #200]	; (80065c4 <HTTPHandle+0x2c8>)
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	4b31      	ldr	r3, [pc, #196]	; (80065c4 <HTTPHandle+0x2c8>)
 8006500:	e002      	b.n	8006508 <HTTPHandle+0x20c>
 8006502:	2314      	movs	r3, #20
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	001a      	movs	r2, r3
 800650a:	f7fe fa65 	bl	80049d8 <CH395SendData>
				ch395.TX_available &= ~(1<<i);
 800650e:	4b2e      	ldr	r3, [pc, #184]	; (80065c8 <HTTPHandle+0x2cc>)
 8006510:	7edb      	ldrb	r3, [r3, #27]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	b25b      	sxtb	r3, r3
 8006516:	2013      	movs	r0, #19
 8006518:	183a      	adds	r2, r7, r0
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	b252      	sxtb	r2, r2
 800651e:	2101      	movs	r1, #1
 8006520:	4091      	lsls	r1, r2
 8006522:	000a      	movs	r2, r1
 8006524:	b252      	sxtb	r2, r2
 8006526:	43d2      	mvns	r2, r2
 8006528:	b252      	sxtb	r2, r2
 800652a:	4013      	ands	r3, r2
 800652c:	b25b      	sxtb	r3, r3
 800652e:	b2da      	uxtb	r2, r3
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <HTTPHandle+0x2cc>)
 8006532:	76da      	strb	r2, [r3, #27]
				// move the cursor to record how much content has been transmitted
				pS->len_response_content_remain -= len;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	22a4      	movs	r2, #164	; 0xa4
 8006538:	5a9a      	ldrh	r2, [r3, r2]
 800653a:	2414      	movs	r4, #20
 800653c:	193b      	adds	r3, r7, r4
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	b299      	uxth	r1, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	22a4      	movs	r2, #164	; 0xa4
 8006548:	5299      	strh	r1, [r3, r2]
				pS->response_content += len; // move the cursor
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22a8      	movs	r2, #168	; 0xa8
 800654e:	589a      	ldr	r2, [r3, r2]
 8006550:	193b      	adds	r3, r7, r4
 8006552:	881b      	ldrh	r3, [r3, #0]
 8006554:	18d2      	adds	r2, r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	21a8      	movs	r1, #168	; 0xa8
 800655a:	505a      	str	r2, [r3, r1]
				// judge if transmission has finished
				if(pS->len_response_content_remain == 0)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	22a4      	movs	r2, #164	; 0xa4
 8006560:	5a9b      	ldrh	r3, [r3, r2]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10e      	bne.n	8006584 <HTTPHandle+0x288>
				{
					HTTPclose(i);
 8006566:	183b      	adds	r3, r7, r0
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	0018      	movs	r0, r3
 800656c:	f000 f86a 	bl	8006644 <HTTPclose>
					resetHTTPParseState(pS);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	0018      	movs	r0, r3
 8006574:	f7ff f96c 	bl	8005850 <resetHTTPParseState>
					// enqueue next sock to respond
					ch395.SOCK_responding = getNextSock();
 8006578:	f000 f82a 	bl	80065d0 <getNextSock>
 800657c:	0003      	movs	r3, r0
 800657e:	001a      	movs	r2, r3
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HTTPHandle+0x2cc>)
 8006582:	769a      	strb	r2, [r3, #26]
				}
			}
		}

		// CASE:
		if(pS->sock_index == i && !pS->ready)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	22ad      	movs	r2, #173	; 0xad
 8006588:	5c9b      	ldrb	r3, [r3, r2]
 800658a:	001a      	movs	r2, r3
 800658c:	2313      	movs	r3, #19
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	b25b      	sxtb	r3, r3
 8006594:	429a      	cmp	r2, r3
 8006596:	d10d      	bne.n	80065b4 <HTTPHandle+0x2b8>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22ac      	movs	r2, #172	; 0xac
 800659c:	5c9b      	ldrb	r3, [r3, r2]
 800659e:	2201      	movs	r2, #1
 80065a0:	4053      	eors	r3, r2
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d005      	beq.n	80065b4 <HTTPHandle+0x2b8>
		{
			ch395.SOCK_responding = getNextSock();
 80065a8:	f000 f812 	bl	80065d0 <getNextSock>
 80065ac:	0003      	movs	r3, r0
 80065ae:	001a      	movs	r2, r3
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HTTPHandle+0x2cc>)
 80065b2:	769a      	strb	r2, [r3, #26]
//			CH395TCPDisconnect(i);
		}
	}
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b006      	add	sp, #24
 80065ba:	bdb0      	pop	{r4, r5, r7, pc}
 80065bc:	20000778 	.word	0x20000778
 80065c0:	20000638 	.word	0x20000638
 80065c4:	00000546 	.word	0x00000546
 80065c8:	20000010 	.word	0x20000010
 80065cc:	00000545 	.word	0x00000545

080065d0 <getNextSock>:
#endif


int8_t getNextSock()
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
	int8_t j;
	for(j=1; j < NUM_SOCKETS; ++j)
 80065d6:	1dfb      	adds	r3, r7, #7
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	e022      	b.n	8006624 <getNextSock+0x54>
	{
		if(parseStates[j-1].ready && (ch395.socket_connected & (1 << j)))
 80065de:	1dfb      	adds	r3, r7, #7
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	b25b      	sxtb	r3, r3
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4a15      	ldr	r2, [pc, #84]	; (800663c <getNextSock+0x6c>)
 80065e8:	21ac      	movs	r1, #172	; 0xac
 80065ea:	20b0      	movs	r0, #176	; 0xb0
 80065ec:	4343      	muls	r3, r0
 80065ee:	18d3      	adds	r3, r2, r3
 80065f0:	185b      	adds	r3, r3, r1
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00f      	beq.n	8006618 <getNextSock+0x48>
 80065f8:	4b11      	ldr	r3, [pc, #68]	; (8006640 <getNextSock+0x70>)
 80065fa:	7e1b      	ldrb	r3, [r3, #24]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	001a      	movs	r2, r3
 8006600:	1dfb      	adds	r3, r7, #7
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	411a      	asrs	r2, r3
 8006608:	0013      	movs	r3, r2
 800660a:	2201      	movs	r2, #1
 800660c:	4013      	ands	r3, r2
 800660e:	d003      	beq.n	8006618 <getNextSock+0x48>
		{
			return j;
 8006610:	1dfb      	adds	r3, r7, #7
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b25b      	sxtb	r3, r3
 8006616:	e00c      	b.n	8006632 <getNextSock+0x62>
	for(j=1; j < NUM_SOCKETS; ++j)
 8006618:	1dfb      	adds	r3, r7, #7
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	3301      	adds	r3, #1
 800661e:	b2da      	uxtb	r2, r3
 8006620:	1dfb      	adds	r3, r7, #7
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	1dfb      	adds	r3, r7, #7
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b25b      	sxtb	r3, r3
 800662a:	2b07      	cmp	r3, #7
 800662c:	ddd7      	ble.n	80065de <getNextSock+0xe>
		}
	}
	return -1;
 800662e:	2301      	movs	r3, #1
 8006630:	425b      	negs	r3, r3
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	20000778 	.word	0x20000778
 8006640:	20000010 	.word	0x20000010

08006644 <HTTPclose>:

void HTTPclose(uint8_t i) // Sock Index to disconnect
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	0002      	movs	r2, r0
 800664c:	1dfb      	adds	r3, r7, #7
 800664e:	701a      	strb	r2, [r3, #0]
//	CH395TCPDisconnect(i);
	ch395.RX_received &= ~(1 << i);
 8006650:	4b14      	ldr	r3, [pc, #80]	; (80066a4 <HTTPclose+0x60>)
 8006652:	7e5b      	ldrb	r3, [r3, #25]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	b25b      	sxtb	r3, r3
 8006658:	1dfa      	adds	r2, r7, #7
 800665a:	7812      	ldrb	r2, [r2, #0]
 800665c:	2101      	movs	r1, #1
 800665e:	4091      	lsls	r1, r2
 8006660:	000a      	movs	r2, r1
 8006662:	b252      	sxtb	r2, r2
 8006664:	43d2      	mvns	r2, r2
 8006666:	b252      	sxtb	r2, r2
 8006668:	4013      	ands	r3, r2
 800666a:	b25b      	sxtb	r3, r3
 800666c:	b2da      	uxtb	r2, r3
 800666e:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <HTTPclose+0x60>)
 8006670:	765a      	strb	r2, [r3, #25]
	ch395.socket_connected &= ~(1 << i);
 8006672:	4b0c      	ldr	r3, [pc, #48]	; (80066a4 <HTTPclose+0x60>)
 8006674:	7e1b      	ldrb	r3, [r3, #24]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	b25b      	sxtb	r3, r3
 800667a:	1dfa      	adds	r2, r7, #7
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	2101      	movs	r1, #1
 8006680:	4091      	lsls	r1, r2
 8006682:	000a      	movs	r2, r1
 8006684:	b252      	sxtb	r2, r2
 8006686:	43d2      	mvns	r2, r2
 8006688:	b252      	sxtb	r2, r2
 800668a:	4013      	ands	r3, r2
 800668c:	b25b      	sxtb	r3, r3
 800668e:	b2da      	uxtb	r2, r3
 8006690:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <HTTPclose+0x60>)
 8006692:	761a      	strb	r2, [r3, #24]
	ch395.SOCK_responding = -1;
 8006694:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <HTTPclose+0x60>)
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	769a      	strb	r2, [r3, #26]
}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b002      	add	sp, #8
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	20000010 	.word	0x20000010

080066a8 <strsepstr>:

char* strsepstr(char** stringp, const char* delim)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
	int len_delim = strlen(delim);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	0018      	movs	r0, r3
 80066b6:	f7f9 fd31 	bl	800011c <strlen>
 80066ba:	0003      	movs	r3, r0
 80066bc:	617b      	str	r3, [r7, #20]
	char* loc_head = *stringp;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]
	if(loc_head != NULL)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d019      	beq.n	80066fe <strsepstr+0x56>
	{
		char* loc_delim = strstr(loc_head, delim);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	0011      	movs	r1, r2
 80066d0:	0018      	movs	r0, r3
 80066d2:	f002 fccb 	bl	800906c <strstr>
 80066d6:	0003      	movs	r3, r0
 80066d8:	60fb      	str	r3, [r7, #12]
		if(loc_delim != NULL)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00b      	beq.n	80066f8 <strsepstr+0x50>
		{
			memset(loc_delim, 0, len_delim);
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2100      	movs	r1, #0
 80066e6:	0018      	movs	r0, r3
 80066e8:	f002 fc2f 	bl	8008f4a <memset>
			*stringp = loc_delim + len_delim;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	18d2      	adds	r2, r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e002      	b.n	80066fe <strsepstr+0x56>
		}
		else
		{
			*stringp = NULL;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
		}
	}
	return loc_head;
 80066fe:	693b      	ldr	r3, [r7, #16]
}
 8006700:	0018      	movs	r0, r3
 8006702:	46bd      	mov	sp, r7
 8006704:	b006      	add	sp, #24
 8006706:	bd80      	pop	{r7, pc}

08006708 <parse_http>:

BOOL parse_http(HTTPRequestParseState *pS, char* buffer)

{
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b08b      	sub	sp, #44	; 0x2c
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	char* line, *tok, *tok_arg, *line_tok_saveptr, *word_tok_saveptr, *arg_tok_saveptr;
	switch(pS->state)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d100      	bne.n	800671c <parse_http+0x14>
 800671a:	e162      	b.n	80069e2 <parse_http+0x2da>
 800671c:	dd00      	ble.n	8006720 <parse_http+0x18>
 800671e:	e164      	b.n	80069ea <parse_http+0x2e2>
 8006720:	2b03      	cmp	r3, #3
 8006722:	d100      	bne.n	8006726 <parse_http+0x1e>
 8006724:	e121      	b.n	800696a <parse_http+0x262>
 8006726:	dd00      	ble.n	800672a <parse_http+0x22>
 8006728:	e15f      	b.n	80069ea <parse_http+0x2e2>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <parse_http+0x2e>
 800672e:	2b01      	cmp	r3, #1
 8006730:	d100      	bne.n	8006734 <parse_http+0x2c>
 8006732:	e0ad      	b.n	8006890 <parse_http+0x188>
 8006734:	e159      	b.n	80069ea <parse_http+0x2e2>
	{
	case 0: // start: request line
		line_tok_saveptr = buffer;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	617b      	str	r3, [r7, #20]
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 800673a:	4ab8      	ldr	r2, [pc, #736]	; (8006a1c <parse_http+0x314>)
 800673c:	2314      	movs	r3, #20
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	0011      	movs	r1, r2
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff ffb0 	bl	80066a8 <strsepstr>
 8006748:	0003      	movs	r3, r0
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
		if(line)
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d100      	bne.n	8006754 <parse_http+0x4c>
 8006752:	e14c      	b.n	80069ee <parse_http+0x2e6>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 8006754:	46c0      	nop			; (mov r8, r8)
			// check if received info obeys HTTP protocols
			if(strnstr(line, "HTTP/", CH395_SIZE_BUFFER) == NULL)
 8006756:	23c0      	movs	r3, #192	; 0xc0
 8006758:	00da      	lsls	r2, r3, #3
 800675a:	49b1      	ldr	r1, [pc, #708]	; (8006a20 <parse_http+0x318>)
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	0018      	movs	r0, r3
 8006760:	f002 fc64 	bl	800902c <strnstr>
 8006764:	1e03      	subs	r3, r0, #0
 8006766:	d101      	bne.n	800676c <parse_http+0x64>
			{
				DEBUG_LOG("ERROR: NOT HTTP\n");
 8006768:	46c0      	nop			; (mov r8, r8)
				goto HTTP_PARSE_ERROR;
 800676a:	e14b      	b.n	8006a04 <parse_http+0x2fc>
			}
			// 1: method
			tok = strtok_r(line, HTTP_DELIM, &word_tok_saveptr);
 800676c:	2310      	movs	r3, #16
 800676e:	18fa      	adds	r2, r7, r3
 8006770:	49ac      	ldr	r1, [pc, #688]	; (8006a24 <parse_http+0x31c>)
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	0018      	movs	r0, r3
 8006776:	f002 fcbe 	bl	80090f6 <strtok_r>
 800677a:	0003      	movs	r3, r0
 800677c:	61fb      	str	r3, [r7, #28]
			if(tok)
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d100      	bne.n	8006786 <parse_http+0x7e>
 8006784:	e135      	b.n	80069f2 <parse_http+0x2ea>
			{
				DEBUG_LOG("Method: %s\r\n", tok);
 8006786:	46c0      	nop			; (mov r8, r8)
				if(strcmp(tok, HTTP_ITEM_STR_GET) == 0)
 8006788:	4aa7      	ldr	r2, [pc, #668]	; (8006a28 <parse_http+0x320>)
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	0011      	movs	r1, r2
 800678e:	0018      	movs	r0, r3
 8006790:	f7f9 fcba 	bl	8000108 <strcmp>
 8006794:	1e03      	subs	r3, r0, #0
 8006796:	d103      	bne.n	80067a0 <parse_http+0x98>
					pS->method = HTTP_GET;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	70da      	strb	r2, [r3, #3]
 800679e:	e00e      	b.n	80067be <parse_http+0xb6>
				else if(strcmp(tok, HTTP_ITEM_STR_POST) == 0)
 80067a0:	4aa2      	ldr	r2, [pc, #648]	; (8006a2c <parse_http+0x324>)
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	0011      	movs	r1, r2
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7f9 fcae 	bl	8000108 <strcmp>
 80067ac:	1e03      	subs	r3, r0, #0
 80067ae:	d103      	bne.n	80067b8 <parse_http+0xb0>
					pS->method = HTTP_POST;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	70da      	strb	r2, [r3, #3]
 80067b6:	e002      	b.n	80067be <parse_http+0xb6>
				else
					pS->method = HTTP_GET;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	70da      	strb	r2, [r3, #3]
			}
			else
				goto HTTP_PARSE_ERROR;
			// 2: URI
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 80067be:	2310      	movs	r3, #16
 80067c0:	18fa      	adds	r2, r7, r3
 80067c2:	4b98      	ldr	r3, [pc, #608]	; (8006a24 <parse_http+0x31c>)
 80067c4:	0019      	movs	r1, r3
 80067c6:	2000      	movs	r0, #0
 80067c8:	f002 fc95 	bl	80090f6 <strtok_r>
 80067cc:	0003      	movs	r3, r0
 80067ce:	61fb      	str	r3, [r7, #28]
			if(tok)
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d100      	bne.n	80067d8 <parse_http+0xd0>
 80067d6:	e10e      	b.n	80069f6 <parse_http+0x2ee>
			{
				strncpy(pS->URI ,tok, MAX_LEN_URI);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3305      	adds	r3, #5
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	0018      	movs	r0, r3
 80067e2:	f002 fc04 	bl	8008fee <strncpy>
				DEBUG_LOG("URI: %s\r\n", pS->URI);
 80067e6:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			char* s_args = strchr(pS->URI, '?');
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3305      	adds	r3, #5
 80067ec:	213f      	movs	r1, #63	; 0x3f
 80067ee:	0018      	movs	r0, r3
 80067f0:	f002 fbc0 	bl	8008f74 <strchr>
 80067f4:	0003      	movs	r3, r0
 80067f6:	61bb      	str	r3, [r7, #24]
			if(pS->method == HTTP_GET && s_args != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	78db      	ldrb	r3, [r3, #3]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d133      	bne.n	8006868 <parse_http+0x160>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d030      	beq.n	8006868 <parse_http+0x160>
			{
				*s_args = 0; // terminate the URI at ? symbol, sperate it into two parts
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
				DEBUG_LOG("Path: %s\r\n", pS->URI);
 800680c:	46c0      	nop			; (mov r8, r8)
				s_args++; // move to the char next to ?
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	3301      	adds	r3, #1
 8006812:	61bb      	str	r3, [r7, #24]
				if(*s_args)
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d025      	beq.n	8006868 <parse_http+0x160>
				{
					tok_arg = strtok_r(s_args, "&", &arg_tok_saveptr);
 800681c:	230c      	movs	r3, #12
 800681e:	18fa      	adds	r2, r7, r3
 8006820:	4983      	ldr	r1, [pc, #524]	; (8006a30 <parse_http+0x328>)
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	0018      	movs	r0, r3
 8006826:	f002 fc66 	bl	80090f6 <strtok_r>
 800682a:	0003      	movs	r3, r0
 800682c:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 800682e:	e018      	b.n	8006862 <parse_http+0x15a>
					{
						DEBUG_LOG("Arg: %s\r\n", tok_arg);
 8006830:	46c0      	nop			; (mov r8, r8)
						pS->argv[pS->argc++] = tok_arg;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2248      	movs	r2, #72	; 0x48
 8006836:	5c9b      	ldrb	r3, [r3, r2]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	b2d0      	uxtb	r0, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	2148      	movs	r1, #72	; 0x48
 8006840:	5450      	strb	r0, [r2, r1]
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	3312      	adds	r3, #18
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	18d3      	adds	r3, r2, r3
 800684a:	3304      	adds	r3, #4
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	601a      	str	r2, [r3, #0]
						tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 8006850:	230c      	movs	r3, #12
 8006852:	18fa      	adds	r2, r7, r3
 8006854:	4b76      	ldr	r3, [pc, #472]	; (8006a30 <parse_http+0x328>)
 8006856:	0019      	movs	r1, r3
 8006858:	2000      	movs	r0, #0
 800685a:	f002 fc4c 	bl	80090f6 <strtok_r>
 800685e:	0003      	movs	r3, r0
 8006860:	623b      	str	r3, [r7, #32]
					while(tok_arg)
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e3      	bne.n	8006830 <parse_http+0x128>
					}
				}
			}
			// 3: version
			tok = strtok_r(NULL, HTTP_DELIM, &word_tok_saveptr);
 8006868:	2310      	movs	r3, #16
 800686a:	18fa      	adds	r2, r7, r3
 800686c:	4b6d      	ldr	r3, [pc, #436]	; (8006a24 <parse_http+0x31c>)
 800686e:	0019      	movs	r1, r3
 8006870:	2000      	movs	r0, #0
 8006872:	f002 fc40 	bl	80090f6 <strtok_r>
 8006876:	0003      	movs	r3, r0
 8006878:	61fb      	str	r3, [r7, #28]
			if(tok)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d100      	bne.n	8006882 <parse_http+0x17a>
 8006880:	e0bb      	b.n	80069fa <parse_http+0x2f2>
			{
				DEBUG_LOG("VERSION: %s\r\n", tok);
 8006882:	46c0      	nop			; (mov r8, r8)
			}
			else
				goto HTTP_PARSE_ERROR;
			pS->state ++;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	701a      	strb	r2, [r3, #0]
		}
		else
			goto HTTP_PARSE_ERROR;
	case 1: // parse header
		line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8006890:	4a62      	ldr	r2, [pc, #392]	; (8006a1c <parse_http+0x314>)
 8006892:	2314      	movs	r3, #20
 8006894:	18fb      	adds	r3, r7, r3
 8006896:	0011      	movs	r1, r2
 8006898:	0018      	movs	r0, r3
 800689a:	f7ff ff05 	bl	80066a8 <strsepstr>
 800689e:	0003      	movs	r3, r0
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 80068a2:	e059      	b.n	8006958 <parse_http+0x250>
		{
			DEBUG_LOG("Line: %s\r\n", line);
 80068a4:	46c0      	nop			; (mov r8, r8)
			tok = strtok_r(line, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80068a6:	2410      	movs	r4, #16
 80068a8:	193a      	adds	r2, r7, r4
 80068aa:	4962      	ldr	r1, [pc, #392]	; (8006a34 <parse_http+0x32c>)
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	0018      	movs	r0, r3
 80068b0:	f002 fc21 	bl	80090f6 <strtok_r>
 80068b4:	0003      	movs	r3, r0
 80068b6:	61fb      	str	r3, [r7, #28]
			if(tok == NULL || *tok == 0)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d04f      	beq.n	800695e <parse_http+0x256>
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d04b      	beq.n	800695e <parse_http+0x256>
				break;
			if(tok)
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d03c      	beq.n	8006946 <parse_http+0x23e>
			{
				DEBUG_LOG("Header: %s\r\n", tok);
 80068cc:	46c0      	nop			; (mov r8, r8)
				// Header: Connection
				if(strcmp(tok, HTTP_ITEM_STR_CONNECTION) == 0)
 80068ce:	4a5a      	ldr	r2, [pc, #360]	; (8006a38 <parse_http+0x330>)
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	0011      	movs	r1, r2
 80068d4:	0018      	movs	r0, r3
 80068d6:	f7f9 fc17 	bl	8000108 <strcmp>
 80068da:	1e03      	subs	r3, r0, #0
 80068dc:	d118      	bne.n	8006910 <parse_http+0x208>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 80068de:	193a      	adds	r2, r7, r4
 80068e0:	4b54      	ldr	r3, [pc, #336]	; (8006a34 <parse_http+0x32c>)
 80068e2:	0019      	movs	r1, r3
 80068e4:	2000      	movs	r0, #0
 80068e6:	f002 fc06 	bl	80090f6 <strtok_r>
 80068ea:	0003      	movs	r3, r0
 80068ec:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d100      	bne.n	80068f6 <parse_http+0x1ee>
 80068f4:	e083      	b.n	80069fe <parse_http+0x2f6>
					DEBUG_LOG("Value: %s\r\n", tok);
 80068f6:	46c0      	nop			; (mov r8, r8)
					if(strstr(tok, "Keep") != NULL)
 80068f8:	4a50      	ldr	r2, [pc, #320]	; (8006a3c <parse_http+0x334>)
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	0011      	movs	r1, r2
 80068fe:	0018      	movs	r0, r3
 8006900:	f002 fbb4 	bl	800906c <strstr>
 8006904:	1e03      	subs	r3, r0, #0
 8006906:	d01e      	beq.n	8006946 <parse_http+0x23e>
						pS->connection = KEEP_ALIVE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	711a      	strb	r2, [r3, #4]
 800690e:	e01a      	b.n	8006946 <parse_http+0x23e>
				}
				// Header: Cookie
				else if(strcmp(tok, HTTP_ITEM_STR_COOKIES) == 0)
 8006910:	4a4b      	ldr	r2, [pc, #300]	; (8006a40 <parse_http+0x338>)
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	0011      	movs	r1, r2
 8006916:	0018      	movs	r0, r3
 8006918:	f7f9 fbf6 	bl	8000108 <strcmp>
 800691c:	1e03      	subs	r3, r0, #0
 800691e:	d112      	bne.n	8006946 <parse_http+0x23e>
				{
					tok = strtok_r(NULL, HTTP_COLUMN_DELIM, &word_tok_saveptr);
 8006920:	2310      	movs	r3, #16
 8006922:	18fa      	adds	r2, r7, r3
 8006924:	4b43      	ldr	r3, [pc, #268]	; (8006a34 <parse_http+0x32c>)
 8006926:	0019      	movs	r1, r3
 8006928:	2000      	movs	r0, #0
 800692a:	f002 fbe4 	bl	80090f6 <strtok_r>
 800692e:	0003      	movs	r3, r0
 8006930:	61fb      	str	r3, [r7, #28]
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d064      	beq.n	8006a02 <parse_http+0x2fa>
					strncpy(pS->cookies, tok, MAX_LEN_COOKIES);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	335c      	adds	r3, #92	; 0x5c
 800693c:	69f9      	ldr	r1, [r7, #28]
 800693e:	2240      	movs	r2, #64	; 0x40
 8006940:	0018      	movs	r0, r3
 8006942:	f002 fb54 	bl	8008fee <strncpy>
				}
			}
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8006946:	4a35      	ldr	r2, [pc, #212]	; (8006a1c <parse_http+0x314>)
 8006948:	2314      	movs	r3, #20
 800694a:	18fb      	adds	r3, r7, r3
 800694c:	0011      	movs	r1, r2
 800694e:	0018      	movs	r0, r3
 8006950:	f7ff feaa 	bl	80066a8 <strsepstr>
 8006954:	0003      	movs	r3, r0
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
		while(line)
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1a2      	bne.n	80068a4 <parse_http+0x19c>
		}
		pS->state++;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	3301      	adds	r3, #1
 8006964:	b2da      	uxtb	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	701a      	strb	r2, [r3, #0]
	case 3: // parse payload
		if(pS->method == HTTP_POST)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d131      	bne.n	80069d6 <parse_http+0x2ce>
		{
			line = strsepstr(&line_tok_saveptr, HTTP_LINE_DELIM);
 8006972:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <parse_http+0x314>)
 8006974:	2314      	movs	r3, #20
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f7ff fe94 	bl	80066a8 <strsepstr>
 8006980:	0003      	movs	r3, r0
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
			if(line)
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d025      	beq.n	80069d6 <parse_http+0x2ce>
			{
				tok_arg = strtok_r(line, "&", &arg_tok_saveptr);
 800698a:	230c      	movs	r3, #12
 800698c:	18fa      	adds	r2, r7, r3
 800698e:	4928      	ldr	r1, [pc, #160]	; (8006a30 <parse_http+0x328>)
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	0018      	movs	r0, r3
 8006994:	f002 fbaf 	bl	80090f6 <strtok_r>
 8006998:	0003      	movs	r3, r0
 800699a:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 800699c:	e018      	b.n	80069d0 <parse_http+0x2c8>
				{
					DEBUG_LOG("Arg: %s\r\n", tok_arg);
 800699e:	46c0      	nop			; (mov r8, r8)
					pS->argv[pS->argc++] = tok_arg;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2248      	movs	r2, #72	; 0x48
 80069a4:	5c9b      	ldrb	r3, [r3, r2]
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	b2d0      	uxtb	r0, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	2148      	movs	r1, #72	; 0x48
 80069ae:	5450      	strb	r0, [r2, r1]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	3312      	adds	r3, #18
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	18d3      	adds	r3, r2, r3
 80069b8:	3304      	adds	r3, #4
 80069ba:	6a3a      	ldr	r2, [r7, #32]
 80069bc:	601a      	str	r2, [r3, #0]
					tok_arg = strtok_r(NULL, "&", &arg_tok_saveptr);
 80069be:	230c      	movs	r3, #12
 80069c0:	18fa      	adds	r2, r7, r3
 80069c2:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <parse_http+0x328>)
 80069c4:	0019      	movs	r1, r3
 80069c6:	2000      	movs	r0, #0
 80069c8:	f002 fb95 	bl	80090f6 <strtok_r>
 80069cc:	0003      	movs	r3, r0
 80069ce:	623b      	str	r3, [r7, #32]
				while(tok_arg)
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e3      	bne.n	800699e <parse_http+0x296>
				}
			}
		}
		pS->state++;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	3301      	adds	r3, #1
 80069dc:	b2da      	uxtb	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	701a      	strb	r2, [r3, #0]
	case 4: // finished
		pS->ready = true;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	22ac      	movs	r2, #172	; 0xac
 80069e6:	2101      	movs	r1, #1
 80069e8:	5499      	strb	r1, [r3, r2]
	}
	return true;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e012      	b.n	8006a14 <parse_http+0x30c>
			goto HTTP_PARSE_ERROR;
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	e008      	b.n	8006a04 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	e006      	b.n	8006a04 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	e004      	b.n	8006a04 <parse_http+0x2fc>
				goto HTTP_PARSE_ERROR;
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	e002      	b.n	8006a04 <parse_http+0x2fc>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	e000      	b.n	8006a04 <parse_http+0x2fc>
					if(tok == NULL) goto HTTP_PARSE_ERROR;
 8006a02:	46c0      	nop			; (mov r8, r8)
	HTTP_PARSE_ERROR:
		pS->state = 0;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
		pS->ready = false;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	22ac      	movs	r2, #172	; 0xac
 8006a0e:	2100      	movs	r1, #0
 8006a10:	5499      	strb	r1, [r3, r2]
		return false;
 8006a12:	2300      	movs	r3, #0

}
 8006a14:	0018      	movs	r0, r3
 8006a16:	46bd      	mov	sp, r7
 8006a18:	b00b      	add	sp, #44	; 0x2c
 8006a1a:	bd90      	pop	{r4, r7, pc}
 8006a1c:	08009460 	.word	0x08009460
 8006a20:	080093b0 	.word	0x080093b0
 8006a24:	08009464 	.word	0x08009464
 8006a28:	0800945c 	.word	0x0800945c
 8006a2c:	08009454 	.word	0x08009454
 8006a30:	080093b8 	.word	0x080093b8
 8006a34:	08009468 	.word	0x08009468
 8006a38:	08009440 	.word	0x08009440
 8006a3c:	080093bc 	.word	0x080093bc
 8006a40:	0800944c 	.word	0x0800944c

08006a44 <getHTTPArg>:



const char* getHTTPArg(HTTPRequestParseState *pS, const char* name)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
	if(pS->argc == 0)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2248      	movs	r2, #72	; 0x48
 8006a52:	5c9b      	ldrb	r3, [r3, r2]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <getHTTPArg+0x18>
		return NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	e03b      	b.n	8006ad4 <getHTTPArg+0x90>
	int i;
	const char* cur_s; 
	const char* cur_name = name;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e02e      	b.n	8006ac4 <getHTTPArg+0x80>
	{
		// compare until '='
		cur_s = pS->argv[i];
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	3312      	adds	r3, #18
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	18d3      	adds	r3, r2, r3
 8006a70:	3304      	adds	r3, #4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8006a76:	e00b      	b.n	8006a90 <getHTTPArg+0x4c>
		{
			if(*cur_s != *cur_name)
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	781a      	ldrb	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d10e      	bne.n	8006aa2 <getHTTPArg+0x5e>
			{
				break;
			}
			cur_name++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
			cur_s++;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	613b      	str	r3, [r7, #16]
		while(*cur_s && *cur_name)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d005      	beq.n	8006aa4 <getHTTPArg+0x60>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1eb      	bne.n	8006a78 <getHTTPArg+0x34>
 8006aa0:	e000      	b.n	8006aa4 <getHTTPArg+0x60>
				break;
 8006aa2:	46c0      	nop			; (mov r8, r8)
		}
		if(*cur_name == 0 && *cur_s == '=') // matched
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d106      	bne.n	8006aba <getHTTPArg+0x76>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b3d      	cmp	r3, #61	; 0x3d
 8006ab2:	d102      	bne.n	8006aba <getHTTPArg+0x76>
		{
			return cur_s+1;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	e00c      	b.n	8006ad4 <getHTTPArg+0x90>
		}
		cur_name = name;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
	for(i=0; i<pS->argc; ++i)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	617b      	str	r3, [r7, #20]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2248      	movs	r2, #72	; 0x48
 8006ac8:	5c9b      	ldrb	r3, [r3, r2]
 8006aca:	001a      	movs	r2, r3
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	dbc9      	blt.n	8006a66 <getHTTPArg+0x22>
	}
	return NULL;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b006      	add	sp, #24
 8006ada:	bd80      	pop	{r7, pc}

08006adc <atou8>:


uint8_t atou8(const char* s)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t sum = 0;
 8006ae4:	230e      	movs	r3, #14
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8006aec:	230f      	movs	r3, #15
 8006aee:	18fb      	adds	r3, r7, r3
 8006af0:	2200      	movs	r2, #0
 8006af2:	701a      	strb	r2, [r3, #0]
 8006af4:	e025      	b.n	8006b42 <atou8+0x66>
	{
		if(*s >= '0' && *s <= '9')
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b2f      	cmp	r3, #47	; 0x2f
 8006afc:	d91f      	bls.n	8006b3e <atou8+0x62>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b39      	cmp	r3, #57	; 0x39
 8006b04:	d81b      	bhi.n	8006b3e <atou8+0x62>
		{
			sum *= 10;
 8006b06:	200e      	movs	r0, #14
 8006b08:	183a      	adds	r2, r7, r0
 8006b0a:	183b      	adds	r3, r7, r0
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	1c19      	adds	r1, r3, #0
 8006b10:	0089      	lsls	r1, r1, #2
 8006b12:	18cb      	adds	r3, r1, r3
 8006b14:	18db      	adds	r3, r3, r3
 8006b16:	7013      	strb	r3, [r2, #0]
			sum += *s - '0';
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	183b      	adds	r3, r7, r0
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	18d3      	adds	r3, r2, r3
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	183b      	adds	r3, r7, r0
 8006b26:	3a30      	subs	r2, #48	; 0x30
 8006b28:	701a      	strb	r2, [r3, #0]
			s++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	607b      	str	r3, [r7, #4]
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8006b30:	220f      	movs	r2, #15
 8006b32:	18bb      	adds	r3, r7, r2
 8006b34:	18ba      	adds	r2, r7, r2
 8006b36:	7812      	ldrb	r2, [r2, #0]
 8006b38:	3201      	adds	r2, #1
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	e001      	b.n	8006b42 <atou8+0x66>
		}
		else
			return 255; // error
 8006b3e:	23ff      	movs	r3, #255	; 0xff
 8006b40:	e00b      	b.n	8006b5a <atou8+0x7e>
	for(i=0; i<3 && *s; ++i) // at most 3 digits
 8006b42:	230f      	movs	r3, #15
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d803      	bhi.n	8006b54 <atou8+0x78>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1d0      	bne.n	8006af6 <atou8+0x1a>
	}
	return sum;
 8006b54:	230e      	movs	r3, #14
 8006b56:	18fb      	adds	r3, r7, r3
 8006b58:	781b      	ldrb	r3, [r3, #0]
}
 8006b5a:	0018      	movs	r0, r3
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	b004      	add	sp, #16
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <atou16>:
uint16_t atou16(const char* s)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t sum = 0;
 8006b6c:	230e      	movs	r3, #14
 8006b6e:	18fb      	adds	r3, r7, r3
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
	for(i=0; i<5 && *s; ++i) // at most 5 digits
 8006b74:	230f      	movs	r3, #15
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
 8006b7c:	e025      	b.n	8006bca <atou16+0x66>
	{
		if(*s >= '0' && *s <= '9')
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b2f      	cmp	r3, #47	; 0x2f
 8006b84:	d91f      	bls.n	8006bc6 <atou16+0x62>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b39      	cmp	r3, #57	; 0x39
 8006b8c:	d81b      	bhi.n	8006bc6 <atou16+0x62>
		{
			sum *= 10;
 8006b8e:	200e      	movs	r0, #14
 8006b90:	183a      	adds	r2, r7, r0
 8006b92:	183b      	adds	r3, r7, r0
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	1c19      	adds	r1, r3, #0
 8006b98:	0089      	lsls	r1, r1, #2
 8006b9a:	18cb      	adds	r3, r1, r3
 8006b9c:	18db      	adds	r3, r3, r3
 8006b9e:	7013      	strb	r3, [r2, #0]
			sum += *s - '0';
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	781a      	ldrb	r2, [r3, #0]
 8006ba4:	183b      	adds	r3, r7, r0
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	18d3      	adds	r3, r2, r3
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	183b      	adds	r3, r7, r0
 8006bae:	3a30      	subs	r2, #48	; 0x30
 8006bb0:	701a      	strb	r2, [r3, #0]
			s++;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	607b      	str	r3, [r7, #4]
	for(i=0; i<5 && *s; ++i) // at most 5 digits
 8006bb8:	220f      	movs	r2, #15
 8006bba:	18bb      	adds	r3, r7, r2
 8006bbc:	18ba      	adds	r2, r7, r2
 8006bbe:	7812      	ldrb	r2, [r2, #0]
 8006bc0:	3201      	adds	r2, #1
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	e001      	b.n	8006bca <atou16+0x66>
		}
		else
			return 65535; // error
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <atou16+0x88>)
 8006bc8:	e00c      	b.n	8006be4 <atou16+0x80>
	for(i=0; i<5 && *s; ++i) // at most 5 digits
 8006bca:	230f      	movs	r3, #15
 8006bcc:	18fb      	adds	r3, r7, r3
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d803      	bhi.n	8006bdc <atou16+0x78>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1d0      	bne.n	8006b7e <atou16+0x1a>
	}
	return sum;
 8006bdc:	230e      	movs	r3, #14
 8006bde:	18fb      	adds	r3, r7, r3
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
}
 8006be4:	0018      	movs	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b004      	add	sp, #16
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	0000ffff 	.word	0x0000ffff

08006bf0 <u16toa>:

uint8_t u16toa(uint16_t d, char* buf) // return: digits
{
 8006bf0:	b5b0      	push	{r4, r5, r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	1dbb      	adds	r3, r7, #6
 8006bfc:	801a      	strh	r2, [r3, #0]
	uint8_t i = 0, j;
 8006bfe:	230f      	movs	r3, #15
 8006c00:	18fb      	adds	r3, r7, r3
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
	while(d)
 8006c06:	e01d      	b.n	8006c44 <u16toa+0x54>
	{
		buf[i++] = (d % 10) + '0';
 8006c08:	1dbb      	adds	r3, r7, #6
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	210a      	movs	r1, #10
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f7f9 fb12 	bl	8000238 <__aeabi_uidivmod>
 8006c14:	000b      	movs	r3, r1
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	210f      	movs	r1, #15
 8006c1c:	187b      	adds	r3, r7, r1
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	1879      	adds	r1, r7, r1
 8006c22:	1c58      	adds	r0, r3, #1
 8006c24:	7008      	strb	r0, [r1, #0]
 8006c26:	0019      	movs	r1, r3
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	185b      	adds	r3, r3, r1
 8006c2c:	3230      	adds	r2, #48	; 0x30
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	701a      	strb	r2, [r3, #0]
		d /= 10;
 8006c32:	1dbc      	adds	r4, r7, #6
 8006c34:	1dbb      	adds	r3, r7, #6
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	210a      	movs	r1, #10
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7f9 fa76 	bl	800012c <__udivsi3>
 8006c40:	0003      	movs	r3, r0
 8006c42:	8023      	strh	r3, [r4, #0]
	while(d)
 8006c44:	1dbb      	adds	r3, r7, #6
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1dd      	bne.n	8006c08 <u16toa+0x18>
	}
	buf[i] = 0;
 8006c4c:	230f      	movs	r3, #15
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	18d3      	adds	r3, r2, r3
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 8006c5a:	230e      	movs	r3, #14
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e028      	b.n	8006cb6 <u16toa+0xc6>
	{
		char tmp;
		tmp = buf[j];
 8006c64:	200e      	movs	r0, #14
 8006c66:	183b      	adds	r3, r7, r0
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	18d2      	adds	r2, r2, r3
 8006c6e:	240d      	movs	r4, #13
 8006c70:	193b      	adds	r3, r7, r4
 8006c72:	7812      	ldrb	r2, [r2, #0]
 8006c74:	701a      	strb	r2, [r3, #0]
		buf[j] = buf[i-j-1];
 8006c76:	250f      	movs	r5, #15
 8006c78:	197b      	adds	r3, r7, r5
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	183b      	adds	r3, r7, r0
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	18d2      	adds	r2, r2, r3
 8006c88:	183b      	adds	r3, r7, r0
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	18cb      	adds	r3, r1, r3
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	701a      	strb	r2, [r3, #0]
		buf[i-j-1] = tmp; // swap
 8006c94:	197b      	adds	r3, r7, r5
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	0001      	movs	r1, r0
 8006c9a:	187b      	adds	r3, r7, r1
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	18d3      	adds	r3, r2, r3
 8006ca6:	193a      	adds	r2, r7, r4
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < i/2; ++j)
 8006cac:	187b      	adds	r3, r7, r1
 8006cae:	187a      	adds	r2, r7, r1
 8006cb0:	7812      	ldrb	r2, [r2, #0]
 8006cb2:	3201      	adds	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	210f      	movs	r1, #15
 8006cb8:	187b      	adds	r3, r7, r1
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	085b      	lsrs	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	220e      	movs	r2, #14
 8006cc2:	18ba      	adds	r2, r7, r2
 8006cc4:	7812      	ldrb	r2, [r2, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d3cc      	bcc.n	8006c64 <u16toa+0x74>
	}
	return i;
 8006cca:	187b      	adds	r3, r7, r1
 8006ccc:	781b      	ldrb	r3, [r3, #0]
}
 8006cce:	0018      	movs	r0, r3
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	b004      	add	sp, #16
 8006cd4:	bdb0      	pop	{r4, r5, r7, pc}

08006cd6 <strcpy_f>:

// Fast strcpy
// Return: pointer to the end of dest + src
char* strcpy_f(char* dest, const char* src)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
	while(*src)
 8006ce0:	e009      	b.n	8006cf6 <strcpy_f+0x20>
	{
		*dest = *src;
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	701a      	strb	r2, [r3, #0]
		src++;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	603b      	str	r3, [r7, #0]
		dest++;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	607b      	str	r3, [r7, #4]
	while(*src)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1f1      	bne.n	8006ce2 <strcpy_f+0xc>
	}
	*dest = 0;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
	return dest;
 8006d04:	687b      	ldr	r3, [r7, #4]
}
 8006d06:	0018      	movs	r0, r3
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b002      	add	sp, #8
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <strncpy_f>:

char* strncpy_f(char* dest, const char* src, uint16_t len)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	1dbb      	adds	r3, r7, #6
 8006d1a:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 8006d1c:	e00e      	b.n	8006d3c <strncpy_f+0x2e>
	{
		*dest = *src;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	781a      	ldrb	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	701a      	strb	r2, [r3, #0]
		src++;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60bb      	str	r3, [r7, #8]
		dest++;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
		len--;
 8006d32:	1dbb      	adds	r3, r7, #6
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	1dbb      	adds	r3, r7, #6
 8006d38:	3a01      	subs	r2, #1
 8006d3a:	801a      	strh	r2, [r3, #0]
	while(*src && len)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <strncpy_f+0x3e>
 8006d44:	1dbb      	adds	r3, r7, #6
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e8      	bne.n	8006d1e <strncpy_f+0x10>
	}
	*dest = 0;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
	return dest;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	0018      	movs	r0, r3
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b004      	add	sp, #16
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <IPv4_to_s>:

uint8_t IPv4_to_s(char* __restrict s ,const  uint8_t* __restrict IP)
{
 8006d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  	uint8_t n = 0;
 8006d66:	230a      	movs	r3, #10
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8006d6e:	230f      	movs	r3, #15
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2200      	movs	r2, #0
 8006d74:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; ++i)
 8006d76:	230e      	movs	r3, #14
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e0ad      	b.n	8006edc <IPv4_to_s+0x180>
  {
	uint8_t d = IP[i];
 8006d80:	230e      	movs	r3, #14
 8006d82:	18fb      	adds	r3, r7, r3
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	683a      	ldr	r2, [r7, #0]
 8006d88:	18d2      	adds	r2, r2, r3
 8006d8a:	210d      	movs	r1, #13
 8006d8c:	187b      	adds	r3, r7, r1
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
	uint8_t nd = 0;
 8006d92:	230c      	movs	r3, #12
 8006d94:	18fb      	adds	r3, r7, r3
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
	if(d > 0)
 8006d9a:	187b      	adds	r3, r7, r1
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d02b      	beq.n	8006dfa <IPv4_to_s+0x9e>
	{
		while(d)
 8006da2:	e024      	b.n	8006dee <IPv4_to_s+0x92>
		{
			s[idx++] = (d % 10) + '0';
 8006da4:	240d      	movs	r4, #13
 8006da6:	193b      	adds	r3, r7, r4
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	210a      	movs	r1, #10
 8006dac:	0018      	movs	r0, r3
 8006dae:	f7f9 fa43 	bl	8000238 <__aeabi_uidivmod>
 8006db2:	000b      	movs	r3, r1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	210f      	movs	r1, #15
 8006db8:	187b      	adds	r3, r7, r1
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	1879      	adds	r1, r7, r1
 8006dbe:	1c58      	adds	r0, r3, #1
 8006dc0:	7008      	strb	r0, [r1, #0]
 8006dc2:	0019      	movs	r1, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	185b      	adds	r3, r3, r1
 8006dc8:	3230      	adds	r2, #48	; 0x30
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
			d /= 10;
 8006dce:	0023      	movs	r3, r4
 8006dd0:	18fc      	adds	r4, r7, r3
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	210a      	movs	r1, #10
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f7f9 f9a7 	bl	800012c <__udivsi3>
 8006dde:	0003      	movs	r3, r0
 8006de0:	7023      	strb	r3, [r4, #0]
			++nd;
 8006de2:	220c      	movs	r2, #12
 8006de4:	18bb      	adds	r3, r7, r2
 8006de6:	18ba      	adds	r2, r7, r2
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	3201      	adds	r2, #1
 8006dec:	701a      	strb	r2, [r3, #0]
		while(d)
 8006dee:	230d      	movs	r3, #13
 8006df0:	18fb      	adds	r3, r7, r3
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1d5      	bne.n	8006da4 <IPv4_to_s+0x48>
 8006df8:	e00a      	b.n	8006e10 <IPv4_to_s+0xb4>
		}
	}
	else
	{
		s[idx++] = '0';
 8006dfa:	220f      	movs	r2, #15
 8006dfc:	18bb      	adds	r3, r7, r2
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	18ba      	adds	r2, r7, r2
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	7011      	strb	r1, [r2, #0]
 8006e06:	001a      	movs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	2230      	movs	r2, #48	; 0x30
 8006e0e:	701a      	strb	r2, [r3, #0]
	}
	// reverse
	for(uint8_t j = 0; j < nd / 2; ++j)
 8006e10:	230b      	movs	r3, #11
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	2200      	movs	r2, #0
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e038      	b.n	8006e8c <IPv4_to_s+0x130>
	{
		char c;
		c = s[idx - 1 - j];
 8006e1a:	240f      	movs	r4, #15
 8006e1c:	193b      	adds	r3, r7, r4
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	200b      	movs	r0, #11
 8006e24:	183b      	adds	r3, r7, r0
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	001a      	movs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	189a      	adds	r2, r3, r2
 8006e30:	2509      	movs	r5, #9
 8006e32:	197b      	adds	r3, r7, r5
 8006e34:	7812      	ldrb	r2, [r2, #0]
 8006e36:	701a      	strb	r2, [r3, #0]
		s[idx - 1 - j] = s[idx - nd + j];
 8006e38:	193b      	adds	r3, r7, r4
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	260c      	movs	r6, #12
 8006e3e:	19bb      	adds	r3, r7, r6
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	183b      	adds	r3, r7, r0
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	18d3      	adds	r3, r2, r3
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	189a      	adds	r2, r3, r2
 8006e50:	193b      	adds	r3, r7, r4
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	1e59      	subs	r1, r3, #1
 8006e56:	183b      	adds	r3, r7, r0
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	1acb      	subs	r3, r1, r3
 8006e5c:	0019      	movs	r1, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	185b      	adds	r3, r3, r1
 8006e62:	7812      	ldrb	r2, [r2, #0]
 8006e64:	701a      	strb	r2, [r3, #0]
		s[idx - nd + j] = c;
 8006e66:	193b      	adds	r3, r7, r4
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	19bb      	adds	r3, r7, r6
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	1ad2      	subs	r2, r2, r3
 8006e70:	183b      	adds	r3, r7, r0
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	18d3      	adds	r3, r2, r3
 8006e76:	001a      	movs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	189b      	adds	r3, r3, r2
 8006e7c:	197a      	adds	r2, r7, r5
 8006e7e:	7812      	ldrb	r2, [r2, #0]
 8006e80:	701a      	strb	r2, [r3, #0]
	for(uint8_t j = 0; j < nd / 2; ++j)
 8006e82:	183b      	adds	r3, r7, r0
 8006e84:	183a      	adds	r2, r7, r0
 8006e86:	7812      	ldrb	r2, [r2, #0]
 8006e88:	3201      	adds	r2, #1
 8006e8a:	701a      	strb	r2, [r3, #0]
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	085b      	lsrs	r3, r3, #1
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	220b      	movs	r2, #11
 8006e98:	18ba      	adds	r2, r7, r2
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d3bc      	bcc.n	8006e1a <IPv4_to_s+0xbe>
	}
	// add dot
	if(i < 3)
 8006ea0:	230e      	movs	r3, #14
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d80b      	bhi.n	8006ec2 <IPv4_to_s+0x166>
	{
		s[idx++] = '.';
 8006eaa:	220f      	movs	r2, #15
 8006eac:	18bb      	adds	r3, r7, r2
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	18ba      	adds	r2, r7, r2
 8006eb2:	1c59      	adds	r1, r3, #1
 8006eb4:	7011      	strb	r1, [r2, #0]
 8006eb6:	001a      	movs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	189b      	adds	r3, r3, r2
 8006ebc:	222e      	movs	r2, #46	; 0x2e
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e006      	b.n	8006ed0 <IPv4_to_s+0x174>
	}
	else
	{
		s[idx] = 0;
 8006ec2:	230f      	movs	r3, #15
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	18d3      	adds	r3, r2, r3
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < 4; ++i)
 8006ed0:	220e      	movs	r2, #14
 8006ed2:	18bb      	adds	r3, r7, r2
 8006ed4:	18ba      	adds	r2, r7, r2
 8006ed6:	7812      	ldrb	r2, [r2, #0]
 8006ed8:	3201      	adds	r2, #1
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	230e      	movs	r3, #14
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d800      	bhi.n	8006ee8 <IPv4_to_s+0x18c>
 8006ee6:	e74b      	b.n	8006d80 <IPv4_to_s+0x24>
	}
  }
	return idx;
 8006ee8:	230f      	movs	r3, #15
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	781b      	ldrb	r3, [r3, #0]
}
 8006eee:	0018      	movs	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b005      	add	sp, #20
 8006ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ef6 <start_receive_DMA>:
Serial485 *p485 = &_serial485;



static void start_receive_DMA(Serial485 *p485)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
    p485->rx_head = 0;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2270      	movs	r2, #112	; 0x70
 8006f02:	2100      	movs	r1, #0
 8006f04:	5299      	strh	r1, [r3, r2]
    p485->rx_old_pos = 0;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2272      	movs	r2, #114	; 0x72
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	5299      	strh	r1, [r3, r2]
    // start IDLE interrupt
//    __HAL_UART_ENABLE_IT(p485->cfg.pSerial, UART_IT_IDLE);
    // start DMA
    HAL_UARTEx_ReceiveToIdle_DMA(p485->cfg.pSerial, p485->rx_buffer, sizeof(p485->rx_buffer));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	332c      	adds	r3, #44	; 0x2c
 8006f16:	2220      	movs	r2, #32
 8006f18:	0019      	movs	r1, r3
 8006f1a:	f7fd f8de 	bl	80040da <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	46bd      	mov	sp, r7
 8006f22:	b002      	add	sp, #8
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <begin_serial485>:

void begin_serial485(Serial485 *p485, const Serial485_cfg_t* pCfg)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
	memcpy(&p485->cfg, pCfg, sizeof(Serial485_cfg_t));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	220c      	movs	r2, #12
 8006f36:	0018      	movs	r0, r3
 8006f38:	f001 fffe 	bl	8008f38 <memcpy>
    p485->state_RW = RE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	226e      	movs	r2, #110	; 0x6e
 8006f40:	2101      	movs	r1, #1
 8006f42:	5499      	strb	r1, [r3, r2]
    *(p485->command) = 0;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	731a      	strb	r2, [r3, #12]
    p485->len_unprocessed_command = 0;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	226c      	movs	r2, #108	; 0x6c
 8006f4e:	2100      	movs	r1, #0
 8006f50:	5299      	strh	r1, [r3, r2]
    HAL_GPIO_WritePin(pCfg->pin_RW.group, pCfg->pin_RW.pin, RE); // toggle receive mode
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6858      	ldr	r0, [r3, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	891b      	ldrh	r3, [r3, #8]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	f7fa f9fe 	bl	800135e <HAL_GPIO_WritePin>

    // TRICK: store Serial485 pointer in AdvFeatureInit(uint32_t) member
	// for later iterruption use
	p485->cfg.pSerial->AdvancedInit.AdvFeatureInit = (uint32_t)(p485);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24

    start_receive_DMA(p485);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f7ff ffc2 	bl	8006ef6 <start_receive_DMA>
    // when DMA interrupts, parse command and restart receiving


}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	46bd      	mov	sp, r7
 8006f76:	b002      	add	sp, #8
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f7a:	b590      	push	{r4, r7, lr}
 8006f7c:	b087      	sub	sp, #28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	000a      	movs	r2, r1
 8006f84:	1cbb      	adds	r3, r7, #2
 8006f86:	801a      	strh	r2, [r3, #0]
	Serial485* p485 = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	617b      	str	r3, [r7, #20]
	uint16_t *phead = &(p485->rx_head); // reserved for circular DMA mode
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	3370      	adds	r3, #112	; 0x70
 8006f92:	613b      	str	r3, [r7, #16]
	uint16_t *pold_pos = &(p485->rx_old_pos);
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3372      	adds	r3, #114	; 0x72
 8006f98:	60fb      	str	r3, [r7, #12]
   * enters here either HC/TC or IDLE
   * case 1: Size == old_pos, means idle received, process data from [header, Size), move head to Size
   * case 2: Size == RX_BUFFER_LEN, means buffer is full (TC), must process, and IDLE int will not be triggered instead
   */
  if(
		  (Size == *pold_pos) // case 1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	881b      	ldrh	r3, [r3, #0]
  if(
 8006f9e:	1cba      	adds	r2, r7, #2
 8006fa0:	8812      	ldrh	r2, [r2, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d003      	beq.n	8006fae <HAL_UARTEx_RxEventCallback+0x34>
		  || (Size == sizeof(p485->rx_buffer)) // case 2
 8006fa6:	1cbb      	adds	r3, r7, #2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d12a      	bne.n	8007004 <HAL_UARTEx_RxEventCallback+0x8a>
		  )
  {
	  if(p485->len_unprocessed_command == 0) // do not overwrite unprocessed command
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	226c      	movs	r2, #108	; 0x6c
 8006fb2:	5a9b      	ldrh	r3, [r3, r2]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d11f      	bne.n	8006ffa <HAL_UARTEx_RxEventCallback+0x80>
	  {

		  len_command =  Size - *phead;
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	881a      	ldrh	r2, [r3, #0]
 8006fbe:	240a      	movs	r4, #10
 8006fc0:	193b      	adds	r3, r7, r4
 8006fc2:	1cb9      	adds	r1, r7, #2
 8006fc4:	8809      	ldrh	r1, [r1, #0]
 8006fc6:	1a8a      	subs	r2, r1, r2
 8006fc8:	801a      	strh	r2, [r3, #0]
		  strncpy(p485->command, p485->rx_buffer + *phead, len_command);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	0018      	movs	r0, r3
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	332c      	adds	r3, #44	; 0x2c
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	8812      	ldrh	r2, [r2, #0]
 8006fd8:	1899      	adds	r1, r3, r2
 8006fda:	193b      	adds	r3, r7, r4
 8006fdc:	881b      	ldrh	r3, [r3, #0]
 8006fde:	001a      	movs	r2, r3
 8006fe0:	f002 f805 	bl	8008fee <strncpy>
		  p485->command[len_command] = 0;
 8006fe4:	193b      	adds	r3, r7, r4
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	18d3      	adds	r3, r2, r3
 8006fec:	2200      	movs	r2, #0
 8006fee:	731a      	strb	r2, [r3, #12]

		  // process command
		  p485->len_unprocessed_command = len_command;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	193a      	adds	r2, r7, r4
 8006ff4:	216c      	movs	r1, #108	; 0x6c
 8006ff6:	8812      	ldrh	r2, [r2, #0]
 8006ff8:	525a      	strh	r2, [r3, r1]
	  }

	  // restart DMA
	  start_receive_DMA(p485);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f7ff ff7a 	bl	8006ef6 <start_receive_DMA>
 8007002:	e004      	b.n	800700e <HAL_UARTEx_RxEventCallback+0x94>
  }
  else // HC event, do nothing
	  *pold_pos = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	1cba      	adds	r2, r7, #2
 8007008:	8812      	ldrh	r2, [r2, #0]
 800700a:	801a      	strh	r2, [r3, #0]

}
 800700c:	46c0      	nop			; (mov r8, r8)
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	46bd      	mov	sp, r7
 8007012:	b007      	add	sp, #28
 8007014:	bd90      	pop	{r4, r7, pc}

08007016 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
	// restart DMA receiving when error occures
	// restart DMA
	Serial485* p485 = (Serial485*)(huart->AdvancedInit.AdvFeatureInit);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	60fb      	str	r3, [r7, #12]
	start_receive_DMA(p485);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	0018      	movs	r0, r3
 8007028:	f7ff ff65 	bl	8006ef6 <start_receive_DMA>
}
 800702c:	46c0      	nop			; (mov r8, r8)
 800702e:	46bd      	mov	sp, r7
 8007030:	b004      	add	sp, #16
 8007032:	bd80      	pop	{r7, pc}

08007034 <fn_ping>:




int fn_ping(uint8_t argc, char** argv, char* ret)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	230f      	movs	r3, #15
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	1c02      	adds	r2, r0, #0
 8007044:	701a      	strb	r2, [r3, #0]
	ret[0] = '?';
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	223f      	movs	r2, #63	; 0x3f
 800704a:	701a      	strb	r2, [r3, #0]
	ret[1] = '\r';
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3301      	adds	r3, #1
 8007050:	220d      	movs	r2, #13
 8007052:	701a      	strb	r2, [r3, #0]
	ret[2] = 0;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3302      	adds	r3, #2
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
	return 0;
 800705c:	2300      	movs	r3, #0
}
 800705e:	0018      	movs	r0, r3
 8007060:	46bd      	mov	sp, r7
 8007062:	b004      	add	sp, #16
 8007064:	bd80      	pop	{r7, pc}
	...

08007068 <fn_get_ant_assignment>:


int fn_get_ant_assignment(uint8_t argc, char** argv, char* ret)
{
 8007068:	b5b0      	push	{r4, r5, r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
 8007072:	210f      	movs	r1, #15
 8007074:	187b      	adds	r3, r7, r1
 8007076:	1c02      	adds	r2, r0, #0
 8007078:	701a      	strb	r2, [r3, #0]
	if(argc < 2) goto error;
 800707a:	187b      	adds	r3, r7, r1
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d93f      	bls.n	8007102 <fn_get_ant_assignment+0x9a>
	uint32_t radionum;
	err_t err;
	err = my_atou(argv[1], 1, &radionum);
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3304      	adds	r3, #4
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	251f      	movs	r5, #31
 800708a:	197c      	adds	r4, r7, r5
 800708c:	2218      	movs	r2, #24
 800708e:	18ba      	adds	r2, r7, r2
 8007090:	2101      	movs	r1, #1
 8007092:	0018      	movs	r0, r3
 8007094:	f000 fab2 	bl	80075fc <my_atou>
 8007098:	0003      	movs	r3, r0
 800709a:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 800709c:	197b      	adds	r3, r7, r5
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	b25b      	sxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d12f      	bne.n	8007106 <fn_get_ant_assignment+0x9e>
	if(radionum >= 1 && radionum <= N_SELECTORS)
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d02e      	beq.n	800710a <fn_get_ant_assignment+0xa2>
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d82b      	bhi.n	800710a <fn_get_ant_assignment+0xa2>
	{
		uint8_t antnums[N_SELECTORS];
		get_Antenna_real_BCDs(antnums, N_SELECTORS);
 80070b2:	2414      	movs	r4, #20
 80070b4:	193b      	adds	r3, r7, r4
 80070b6:	2102      	movs	r1, #2
 80070b8:	0018      	movs	r0, r3
 80070ba:	f001 fb55 	bl	8008768 <get_Antenna_real_BCDs>
		strcpy(ret, "AUX");
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	4b15      	ldr	r3, [pc, #84]	; (8007118 <fn_get_ant_assignment+0xb0>)
 80070c2:	0010      	movs	r0, r2
 80070c4:	0019      	movs	r1, r3
 80070c6:	2304      	movs	r3, #4
 80070c8:	001a      	movs	r2, r3
 80070ca:	f001 ff35 	bl	8008f38 <memcpy>
		ret[3] = '0' + radionum;
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	3303      	adds	r3, #3
 80070d6:	3230      	adds	r2, #48	; 0x30
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	701a      	strb	r2, [r3, #0]
		ret[4] = '0' + antnums[radionum-1];
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	3b01      	subs	r3, #1
 80070e0:	193a      	adds	r2, r7, r4
 80070e2:	5cd2      	ldrb	r2, [r2, r3]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	3304      	adds	r3, #4
 80070e8:	3230      	adds	r2, #48	; 0x30
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
		ret[5] = '\r';
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3305      	adds	r3, #5
 80070f2:	220d      	movs	r2, #13
 80070f4:	701a      	strb	r2, [r3, #0]
		ret[6] = 0;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3306      	adds	r3, #6
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
		return 0;
 80070fe:	2300      	movs	r3, #0
 8007100:	e005      	b.n	800710e <fn_get_ant_assignment+0xa6>
	if(argc < 2) goto error;
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	e002      	b.n	800710c <fn_get_ant_assignment+0xa4>
	if(err != ERR_OK) goto error;
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	e000      	b.n	800710c <fn_get_ant_assignment+0xa4>
	}

error:
 800710a:	46c0      	nop			; (mov r8, r8)
	return 1;
 800710c:	2301      	movs	r3, #1
}
 800710e:	0018      	movs	r0, r3
 8007110:	46bd      	mov	sp, r7
 8007112:	b008      	add	sp, #32
 8007114:	bdb0      	pop	{r4, r5, r7, pc}
 8007116:	46c0      	nop			; (mov r8, r8)
 8007118:	080093c4 	.word	0x080093c4

0800711c <fn_set_ant_assignment>:



int fn_set_ant_assignment(uint8_t argc, char** argv, char* ret)
{
 800711c:	b5b0      	push	{r4, r5, r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af00      	add	r7, sp, #0
 8007122:	60b9      	str	r1, [r7, #8]
 8007124:	607a      	str	r2, [r7, #4]
 8007126:	210f      	movs	r1, #15
 8007128:	187b      	adds	r3, r7, r1
 800712a:	1c02      	adds	r2, r0, #0
 800712c:	701a      	strb	r2, [r3, #0]
	if(argc < 3) goto error;
 800712e:	187b      	adds	r3, r7, r1
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d800      	bhi.n	8007138 <fn_set_ant_assignment+0x1c>
 8007136:	e078      	b.n	800722a <fn_set_ant_assignment+0x10e>
	uint32_t radionum;
	uint32_t antnum = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &radionum);
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	3304      	adds	r3, #4
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	251e      	movs	r5, #30
 8007144:	197c      	adds	r4, r7, r5
 8007146:	2218      	movs	r2, #24
 8007148:	18ba      	adds	r2, r7, r2
 800714a:	2101      	movs	r1, #1
 800714c:	0018      	movs	r0, r3
 800714e:	f000 fa55 	bl	80075fc <my_atou>
 8007152:	0003      	movs	r3, r0
 8007154:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8007156:	002a      	movs	r2, r5
 8007158:	18bb      	adds	r3, r7, r2
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	b25b      	sxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d165      	bne.n	800722e <fn_set_ant_assignment+0x112>
	err = my_atou(argv[2], 2, &antnum);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	3308      	adds	r3, #8
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	18bc      	adds	r4, r7, r2
 800716a:	2214      	movs	r2, #20
 800716c:	18ba      	adds	r2, r7, r2
 800716e:	2102      	movs	r1, #2
 8007170:	0018      	movs	r0, r3
 8007172:	f000 fa43 	bl	80075fc <my_atou>
 8007176:	0003      	movs	r3, r0
 8007178:	7023      	strb	r3, [r4, #0]
	if(radionum >= 1 && radionum <= N_SELECTORS && antnum <= N_ANTENNAS)
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d058      	beq.n	8007232 <fn_set_ant_assignment+0x116>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d855      	bhi.n	8007232 <fn_set_ant_assignment+0x116>
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2b06      	cmp	r3, #6
 800718a:	d852      	bhi.n	8007232 <fn_set_ant_assignment+0x116>
	{
		/* send set request */
		uint8_t antnums[N_SELECTORS] = {0};
 800718c:	2310      	movs	r3, #16
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	2200      	movs	r2, #0
 8007192:	801a      	strh	r2, [r3, #0]
		for(uint8_t iRadio = 0; iRadio < N_SELECTORS; ++iRadio)
 8007194:	231f      	movs	r3, #31
 8007196:	18fb      	adds	r3, r7, r3
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
 800719c:	e014      	b.n	80071c8 <fn_set_ant_assignment+0xac>
		{
			antnums[iRadio] = Selector[iRadio].sel;
 800719e:	241f      	movs	r4, #31
 80071a0:	193b      	adds	r3, r7, r4
 80071a2:	781a      	ldrb	r2, [r3, #0]
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	7819      	ldrb	r1, [r3, #0]
 80071a8:	4825      	ldr	r0, [pc, #148]	; (8007240 <fn_set_ant_assignment+0x124>)
 80071aa:	0013      	movs	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	1a9b      	subs	r3, r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	18c3      	adds	r3, r0, r3
 80071b4:	3318      	adds	r3, #24
 80071b6:	781a      	ldrb	r2, [r3, #0]
 80071b8:	2310      	movs	r3, #16
 80071ba:	18fb      	adds	r3, r7, r3
 80071bc:	545a      	strb	r2, [r3, r1]
		for(uint8_t iRadio = 0; iRadio < N_SELECTORS; ++iRadio)
 80071be:	193b      	adds	r3, r7, r4
 80071c0:	193a      	adds	r2, r7, r4
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	3201      	adds	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	231f      	movs	r3, #31
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d9e5      	bls.n	800719e <fn_set_ant_assignment+0x82>
		}
		antnums[radionum - 1] = antnum;
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	b2d1      	uxtb	r1, r2
 80071da:	2010      	movs	r0, #16
 80071dc:	183a      	adds	r2, r7, r0
 80071de:	54d1      	strb	r1, [r2, r3]
		switch_Antenna(antnums, N_SELECTORS);
 80071e0:	183b      	adds	r3, r7, r0
 80071e2:	2102      	movs	r1, #2
 80071e4:	0018      	movs	r0, r3
 80071e6:	f001 f9ff 	bl	80085e8 <switch_Antenna>

		// print antnum to bufCMDRet
		strcpy(ret, "AUX");
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4b15      	ldr	r3, [pc, #84]	; (8007244 <fn_set_ant_assignment+0x128>)
 80071ee:	0010      	movs	r0, r2
 80071f0:	0019      	movs	r1, r3
 80071f2:	2304      	movs	r3, #4
 80071f4:	001a      	movs	r2, r3
 80071f6:	f001 fe9f 	bl	8008f38 <memcpy>
		ret[3] = '0' + radionum;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3303      	adds	r3, #3
 8007202:	3230      	adds	r2, #48	; 0x30
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
		ret[4] = '0' + antnum;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3304      	adds	r3, #4
 8007210:	3230      	adds	r2, #48	; 0x30
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	701a      	strb	r2, [r3, #0]
		ret[5] = '\r';
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3305      	adds	r3, #5
 800721a:	220d      	movs	r2, #13
 800721c:	701a      	strb	r2, [r3, #0]
		ret[6] = 0;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3306      	adds	r3, #6
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
		return 0;
 8007226:	2300      	movs	r3, #0
 8007228:	e005      	b.n	8007236 <fn_set_ant_assignment+0x11a>
	if(argc < 3) goto error;
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	e002      	b.n	8007234 <fn_set_ant_assignment+0x118>
	if(err != ERR_OK) goto error;
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	e000      	b.n	8007234 <fn_set_ant_assignment+0x118>
	}

error:
 8007232:	46c0      	nop			; (mov r8, r8)
	return 1;
 8007234:	2301      	movs	r3, #1
}
 8007236:	0018      	movs	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	b008      	add	sp, #32
 800723c:	bdb0      	pop	{r4, r5, r7, pc}
 800723e:	46c0      	nop			; (mov r8, r8)
 8007240:	20001114 	.word	0x20001114
 8007244:	080093c4 	.word	0x080093c4

08007248 <fn_set_ant_name>:


int fn_set_ant_name(uint8_t argc, char** argv, char* ret)
{
 8007248:	b5b0      	push	{r4, r5, r7, lr}
 800724a:	b088      	sub	sp, #32
 800724c:	af00      	add	r7, sp, #0
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	210f      	movs	r1, #15
 8007254:	187b      	adds	r3, r7, r1
 8007256:	1c02      	adds	r2, r0, #0
 8007258:	701a      	strb	r2, [r3, #0]
	if(argc < 3) goto error;
 800725a:	187b      	adds	r3, r7, r1
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b02      	cmp	r3, #2
 8007260:	d954      	bls.n	800730c <fn_set_ant_name+0xc4>
	uint32_t antnum = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &antnum);
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	3304      	adds	r3, #4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	251f      	movs	r5, #31
 800726e:	197c      	adds	r4, r7, r5
 8007270:	2214      	movs	r2, #20
 8007272:	18ba      	adds	r2, r7, r2
 8007274:	2101      	movs	r1, #1
 8007276:	0018      	movs	r0, r3
 8007278:	f000 f9c0 	bl	80075fc <my_atou>
 800727c:	0003      	movs	r3, r0
 800727e:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8007280:	197b      	adds	r3, r7, r5
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	b25b      	sxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d142      	bne.n	8007310 <fn_set_ant_name+0xc8>

	if(antnum > 0 && antnum <= N_ANTENNAS)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d041      	beq.n	8007314 <fn_set_ant_name+0xcc>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	2b06      	cmp	r3, #6
 8007294:	d83e      	bhi.n	8007314 <fn_set_ant_name+0xcc>
	{
		// capture target ant name
		char* sLabelSaved = cfg.sAntNames[antnum-1];
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	3b01      	subs	r3, #1
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	3308      	adds	r3, #8
 800729e:	001a      	movs	r2, r3
 80072a0:	4b1f      	ldr	r3, [pc, #124]	; (8007320 <fn_set_ant_name+0xd8>)
 80072a2:	18d3      	adds	r3, r2, r3
 80072a4:	3302      	adds	r3, #2
 80072a6:	61bb      	str	r3, [r7, #24]
		strncpy(sLabelSaved, argv[2], MAX_LEN_ANT_LABEL);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	3308      	adds	r3, #8
 80072ac:	6819      	ldr	r1, [r3, #0]
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2210      	movs	r2, #16
 80072b2:	0018      	movs	r0, r3
 80072b4:	f001 fe9b 	bl	8008fee <strncpy>
		sLabelSaved[MAX_LEN_ANT_LABEL - 1] = 0; // terminate the string
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	330f      	adds	r3, #15
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
		// print antnum to bufCMDRet
		strcpy(ret, "NAME");
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	4b18      	ldr	r3, [pc, #96]	; (8007324 <fn_set_ant_name+0xdc>)
 80072c4:	0010      	movs	r0, r2
 80072c6:	0019      	movs	r1, r3
 80072c8:	2305      	movs	r3, #5
 80072ca:	001a      	movs	r2, r3
 80072cc:	f001 fe34 	bl	8008f38 <memcpy>
		ret[4] = '0' + antnum;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	3230      	adds	r2, #48	; 0x30
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
		strncat(ret, sLabelSaved, LEN_COMMANDS_RET_BUF);
 80072de:	69b9      	ldr	r1, [r7, #24]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2218      	movs	r2, #24
 80072e4:	0018      	movs	r0, r3
 80072e6:	f001 fe5b 	bl	8008fa0 <strncat>
		strncat(ret, "\r", LEN_COMMANDS_RET_BUF);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	0018      	movs	r0, r3
 80072ee:	f7f8 ff15 	bl	800011c <strlen>
 80072f2:	0003      	movs	r3, r0
 80072f4:	001a      	movs	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	189a      	adds	r2, r3, r2
 80072fa:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <fn_set_ant_name+0xe0>)
 80072fc:	0010      	movs	r0, r2
 80072fe:	0019      	movs	r1, r3
 8007300:	2302      	movs	r3, #2
 8007302:	001a      	movs	r2, r3
 8007304:	f001 fe18 	bl	8008f38 <memcpy>
		return 0;
 8007308:	2300      	movs	r3, #0
 800730a:	e005      	b.n	8007318 <fn_set_ant_name+0xd0>
	if(argc < 3) goto error;
 800730c:	46c0      	nop			; (mov r8, r8)
 800730e:	e002      	b.n	8007316 <fn_set_ant_name+0xce>
	if(err != ERR_OK) goto error;
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	e000      	b.n	8007316 <fn_set_ant_name+0xce>
	}

error:
 8007314:	46c0      	nop			; (mov r8, r8)
	return 1;
 8007316:	2301      	movs	r3, #1
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b008      	add	sp, #32
 800731e:	bdb0      	pop	{r4, r5, r7, pc}
 8007320:	20000d90 	.word	0x20000d90
 8007324:	080093c8 	.word	0x080093c8
 8007328:	080093d0 	.word	0x080093d0

0800732c <fn_get_ant_name>:

int fn_get_ant_name(uint8_t argc, char** argv, char* ret)
{
 800732c:	b5b0      	push	{r4, r5, r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	60b9      	str	r1, [r7, #8]
 8007334:	607a      	str	r2, [r7, #4]
 8007336:	210f      	movs	r1, #15
 8007338:	187b      	adds	r3, r7, r1
 800733a:	1c02      	adds	r2, r0, #0
 800733c:	701a      	strb	r2, [r3, #0]
	if(argc < 2) goto error;
 800733e:	187b      	adds	r3, r7, r1
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d954      	bls.n	80073f0 <fn_get_ant_name+0xc4>
	uint32_t antnum = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
	err_t err;
	err = my_atou(argv[1], 1, &antnum);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	3304      	adds	r3, #4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	251f      	movs	r5, #31
 8007352:	197c      	adds	r4, r7, r5
 8007354:	2214      	movs	r2, #20
 8007356:	18ba      	adds	r2, r7, r2
 8007358:	2101      	movs	r1, #1
 800735a:	0018      	movs	r0, r3
 800735c:	f000 f94e 	bl	80075fc <my_atou>
 8007360:	0003      	movs	r3, r0
 8007362:	7023      	strb	r3, [r4, #0]
	if(err != ERR_OK) goto error;
 8007364:	197b      	adds	r3, r7, r5
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	b25b      	sxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d142      	bne.n	80073f4 <fn_get_ant_name+0xc8>

	if(antnum > 0 && antnum <= N_ANTENNAS)
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d041      	beq.n	80073f8 <fn_get_ant_name+0xcc>
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b06      	cmp	r3, #6
 8007378:	d83e      	bhi.n	80073f8 <fn_get_ant_name+0xcc>
	{
		// capture target ant name
		char* sLabelSaved = cfg.sAntNames[antnum-1];
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	3b01      	subs	r3, #1
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	3308      	adds	r3, #8
 8007382:	001a      	movs	r2, r3
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <fn_get_ant_name+0xd8>)
 8007386:	18d3      	adds	r3, r2, r3
 8007388:	3302      	adds	r3, #2
 800738a:	61bb      	str	r3, [r7, #24]
		strncpy(sLabelSaved, argv[2], MAX_LEN_ANT_LABEL);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	3308      	adds	r3, #8
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2210      	movs	r2, #16
 8007396:	0018      	movs	r0, r3
 8007398:	f001 fe29 	bl	8008fee <strncpy>
		sLabelSaved[MAX_LEN_ANT_LABEL - 1] = 0; // terminate the string
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	330f      	adds	r3, #15
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
		// print antnum to bufCMDRet
		strcpy(ret, "NAME");
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	4b18      	ldr	r3, [pc, #96]	; (8007408 <fn_get_ant_name+0xdc>)
 80073a8:	0010      	movs	r0, r2
 80073aa:	0019      	movs	r1, r3
 80073ac:	2305      	movs	r3, #5
 80073ae:	001a      	movs	r2, r3
 80073b0:	f001 fdc2 	bl	8008f38 <memcpy>
		ret[4] = '0' + antnum;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	3230      	adds	r2, #48	; 0x30
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	701a      	strb	r2, [r3, #0]
		strncat(ret, sLabelSaved, LEN_COMMANDS_RET_BUF);
 80073c2:	69b9      	ldr	r1, [r7, #24]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2218      	movs	r2, #24
 80073c8:	0018      	movs	r0, r3
 80073ca:	f001 fde9 	bl	8008fa0 <strncat>
		strncat(ret, "\r", LEN_COMMANDS_RET_BUF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7f8 fea3 	bl	800011c <strlen>
 80073d6:	0003      	movs	r3, r0
 80073d8:	001a      	movs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	189a      	adds	r2, r3, r2
 80073de:	4b0b      	ldr	r3, [pc, #44]	; (800740c <fn_get_ant_name+0xe0>)
 80073e0:	0010      	movs	r0, r2
 80073e2:	0019      	movs	r1, r3
 80073e4:	2302      	movs	r3, #2
 80073e6:	001a      	movs	r2, r3
 80073e8:	f001 fda6 	bl	8008f38 <memcpy>
		return 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e005      	b.n	80073fc <fn_get_ant_name+0xd0>
	if(argc < 2) goto error;
 80073f0:	46c0      	nop			; (mov r8, r8)
 80073f2:	e002      	b.n	80073fa <fn_get_ant_name+0xce>
	if(err != ERR_OK) goto error;
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	e000      	b.n	80073fa <fn_get_ant_name+0xce>
	}

error:
 80073f8:	46c0      	nop			; (mov r8, r8)
	return 1;
 80073fa:	2301      	movs	r3, #1
}
 80073fc:	0018      	movs	r0, r3
 80073fe:	46bd      	mov	sp, r7
 8007400:	b008      	add	sp, #32
 8007402:	bdb0      	pop	{r4, r5, r7, pc}
 8007404:	20000d90 	.word	0x20000d90
 8007408:	080093c8 	.word	0x080093c8
 800740c:	080093d0 	.word	0x080093d0

08007410 <parse_command_OTRSP>:
};



int parse_command_OTRSP(const char* s, uint16_t len, char* ret)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b089      	sub	sp, #36	; 0x24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	607a      	str	r2, [r7, #4]
 800741a:	200a      	movs	r0, #10
 800741c:	183b      	adds	r3, r7, r0
 800741e:	1c0a      	adds	r2, r1, #0
 8007420:	801a      	strh	r2, [r3, #0]

    uint32_t i  = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	61fb      	str	r3, [r7, #28]

    static char buf[16] = {0};
    char* pbuf = buf;
 8007426:	4b71      	ldr	r3, [pc, #452]	; (80075ec <parse_command_OTRSP+0x1dc>)
 8007428:	61bb      	str	r3, [r7, #24]

    size_t argc = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
    static char* argv[4];

    if(len == 0)
 800742e:	0004      	movs	r4, r0
 8007430:	183b      	adds	r3, r7, r0
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d110      	bne.n	800745a <parse_command_OTRSP+0x4a>
    	len = strlen(s);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	0018      	movs	r0, r3
 800743c:	f7f8 fe6e 	bl	800011c <strlen>
 8007440:	0002      	movs	r2, r0
 8007442:	193b      	adds	r3, r7, r4
 8007444:	801a      	strh	r2, [r3, #0]

    // skip first invalid chars
    while((len > 0)
 8007446:	e008      	b.n	800745a <parse_command_OTRSP+0x4a>
    				(*s >= 'A'  && *s <= 'Z')
					|| (*s == '?')
				)
		 )
    {
        ++s;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
        --len;
 800744e:	220a      	movs	r2, #10
 8007450:	18bb      	adds	r3, r7, r2
 8007452:	18ba      	adds	r2, r7, r2
 8007454:	8812      	ldrh	r2, [r2, #0]
 8007456:	3a01      	subs	r2, #1
 8007458:	801a      	strh	r2, [r3, #0]
    while((len > 0)
 800745a:	230a      	movs	r3, #10
 800745c:	18fb      	adds	r3, r7, r3
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00b      	beq.n	800747c <parse_command_OTRSP+0x6c>
    				(*s >= 'A'  && *s <= 'Z')
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	781b      	ldrb	r3, [r3, #0]
    		&& !(
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	d903      	bls.n	8007474 <parse_command_OTRSP+0x64>
    				(*s >= 'A'  && *s <= 'Z')
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b5a      	cmp	r3, #90	; 0x5a
 8007472:	d903      	bls.n	800747c <parse_command_OTRSP+0x6c>
					|| (*s == '?')
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	781b      	ldrb	r3, [r3, #0]
    		&& !(
 8007478:	2b3f      	cmp	r3, #63	; 0x3f
 800747a:	d1e5      	bne.n	8007448 <parse_command_OTRSP+0x38>
    }
    if(len <= 1)
 800747c:	230a      	movs	r3, #10
 800747e:	18fb      	adds	r3, r7, r3
 8007480:	881b      	ldrh	r3, [r3, #0]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d800      	bhi.n	8007488 <parse_command_OTRSP+0x78>
 8007486:	e0a5      	b.n	80075d4 <parse_command_OTRSP+0x1c4>


    /* build argv string */
    // 1.read command body
    // detect ? and alphabets
    argv[0] = buf;
 8007488:	4b59      	ldr	r3, [pc, #356]	; (80075f0 <parse_command_OTRSP+0x1e0>)
 800748a:	4a58      	ldr	r2, [pc, #352]	; (80075ec <parse_command_OTRSP+0x1dc>)
 800748c:	601a      	str	r2, [r3, #0]
    while((len > 0)
 800748e:	e00e      	b.n	80074ae <parse_command_OTRSP+0x9e>
    				(*s >= 'A'  && *s <= 'Z')
					|| (*s == '?')
				)
		  )
    {
    	--len;
 8007490:	220a      	movs	r2, #10
 8007492:	18bb      	adds	r3, r7, r2
 8007494:	18ba      	adds	r2, r7, r2
 8007496:	8812      	ldrh	r2, [r2, #0]
 8007498:	3a01      	subs	r2, #1
 800749a:	801a      	strh	r2, [r3, #0]
    	*(pbuf++) = *s;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	61ba      	str	r2, [r7, #24]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	701a      	strb	r2, [r3, #0]
    	++s;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]
    while((len > 0)
 80074ae:	230a      	movs	r3, #10
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <parse_command_OTRSP+0xc0>
    				(*s >= 'A'  && *s <= 'Z')
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	781b      	ldrb	r3, [r3, #0]
    		&& (
 80074bc:	2b40      	cmp	r3, #64	; 0x40
 80074be:	d903      	bls.n	80074c8 <parse_command_OTRSP+0xb8>
    				(*s >= 'A'  && *s <= 'Z')
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	2b5a      	cmp	r3, #90	; 0x5a
 80074c6:	d9e3      	bls.n	8007490 <parse_command_OTRSP+0x80>
					|| (*s == '?')
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b3f      	cmp	r3, #63	; 0x3f
 80074ce:	d0df      	beq.n	8007490 <parse_command_OTRSP+0x80>
    }
    if(pbuf == buf)
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4b46      	ldr	r3, [pc, #280]	; (80075ec <parse_command_OTRSP+0x1dc>)
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d100      	bne.n	80074da <parse_command_OTRSP+0xca>
 80074d8:	e07e      	b.n	80075d8 <parse_command_OTRSP+0x1c8>
    	goto bad_command;
    *(pbuf++)= 0; // terminate the command
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	61ba      	str	r2, [r7, #24]
 80074e0:	2200      	movs	r2, #0
 80074e2:	701a      	strb	r2, [r3, #0]
    ++argc;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	3301      	adds	r3, #1
 80074e8:	617b      	str	r3, [r7, #20]
    // detect number arguments, each digit takes as 1 argument (if exists)
    while(len > 0 && argc < 4)
 80074ea:	e040      	b.n	800756e <parse_command_OTRSP+0x15e>
    {
    	// skip spaces between command and oprands
		while((len > 0) && (*s == ' ' || *s == ',' || *s == '\t'))
		{
			--len;
 80074ec:	220a      	movs	r2, #10
 80074ee:	18bb      	adds	r3, r7, r2
 80074f0:	18ba      	adds	r2, r7, r2
 80074f2:	8812      	ldrh	r2, [r2, #0]
 80074f4:	3a01      	subs	r2, #1
 80074f6:	801a      	strh	r2, [r3, #0]
			++s;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]
		while((len > 0) && (*s == ' ' || *s == ',' || *s == '\t'))
 80074fe:	230a      	movs	r3, #10
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <parse_command_OTRSP+0x110>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b20      	cmp	r3, #32
 800750e:	d0ed      	beq.n	80074ec <parse_command_OTRSP+0xdc>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b2c      	cmp	r3, #44	; 0x2c
 8007516:	d0e9      	beq.n	80074ec <parse_command_OTRSP+0xdc>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b09      	cmp	r3, #9
 800751e:	d0e5      	beq.n	80074ec <parse_command_OTRSP+0xdc>
		}
		if(len > 0 && *s >= '0' && *s <= '9')
 8007520:	200a      	movs	r0, #10
 8007522:	183b      	adds	r3, r7, r0
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d02a      	beq.n	8007580 <parse_command_OTRSP+0x170>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	2b2f      	cmp	r3, #47	; 0x2f
 8007530:	d926      	bls.n	8007580 <parse_command_OTRSP+0x170>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b39      	cmp	r3, #57	; 0x39
 8007538:	d822      	bhi.n	8007580 <parse_command_OTRSP+0x170>
		{
			*pbuf = *s;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	781a      	ldrb	r2, [r3, #0]
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	701a      	strb	r2, [r3, #0]
			argv[argc] = pbuf;
 8007542:	4b2b      	ldr	r3, [pc, #172]	; (80075f0 <parse_command_OTRSP+0x1e0>)
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	69b9      	ldr	r1, [r7, #24]
 800754a:	50d1      	str	r1, [r2, r3]

			++argc;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	3301      	adds	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
			++s;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
			--len;
 8007558:	183b      	adds	r3, r7, r0
 800755a:	183a      	adds	r2, r7, r0
 800755c:	8812      	ldrh	r2, [r2, #0]
 800755e:	3a01      	subs	r2, #1
 8007560:	801a      	strh	r2, [r3, #0]
			*(++pbuf) = 0; // move forward AND terminate the 1st number argument
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	3301      	adds	r3, #1
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
    while(len > 0 && argc < 4)
 800756e:	230a      	movs	r3, #10
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <parse_command_OTRSP+0x174>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d9bf      	bls.n	80074fe <parse_command_OTRSP+0xee>
			goto end_parse;
		}
    }


end_parse:
 800757e:	e001      	b.n	8007584 <parse_command_OTRSP+0x174>
			goto end_parse;
 8007580:	46c0      	nop			; (mov r8, r8)
 8007582:	e000      	b.n	8007586 <parse_command_OTRSP+0x176>
end_parse:
 8007584:	46c0      	nop			; (mov r8, r8)
    i = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	61fb      	str	r3, [r7, #28]
    // match a command
    while((i < N_commands_OTRSP) && (strcmp(argv[0], commands_OTRSP[i]) != 0)) i++;
 800758a:	e002      	b.n	8007592 <parse_command_OTRSP+0x182>
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	2b04      	cmp	r3, #4
 8007596:	d80a      	bhi.n	80075ae <parse_command_OTRSP+0x19e>
 8007598:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <parse_command_OTRSP+0x1e0>)
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <parse_command_OTRSP+0x1e4>)
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	0092      	lsls	r2, r2, #2
 80075a2:	58d3      	ldr	r3, [r2, r3]
 80075a4:	0019      	movs	r1, r3
 80075a6:	f7f8 fdaf 	bl	8000108 <strcmp>
 80075aa:	1e03      	subs	r3, r0, #0
 80075ac:	d1ee      	bne.n	800758c <parse_command_OTRSP+0x17c>
    // command found
    if(i < N_commands_OTRSP)
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d813      	bhi.n	80075dc <parse_command_OTRSP+0x1cc>
    {
        cmd_executer_func_t fn = command_executers_OTRSP[i];
 80075b4:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <parse_command_OTRSP+0x1e8>)
 80075b6:	69fa      	ldr	r2, [r7, #28]
 80075b8:	0092      	lsls	r2, r2, #2
 80075ba:	58d3      	ldr	r3, [r2, r3]
 80075bc:	613b      	str	r3, [r7, #16]
        if(fn) fn(argc, argv, ret); // execute command
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <parse_command_OTRSP+0x1c0>
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	b2d8      	uxtb	r0, r3
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	4909      	ldr	r1, [pc, #36]	; (80075f0 <parse_command_OTRSP+0x1e0>)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	4798      	blx	r3
    else
    {
        goto bad_command;
    }
    // return the index of parsed command
    return i;
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	e006      	b.n	80075e2 <parse_command_OTRSP+0x1d2>
        goto bad_command;
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	e002      	b.n	80075de <parse_command_OTRSP+0x1ce>
    	goto bad_command;
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	e000      	b.n	80075de <parse_command_OTRSP+0x1ce>
        goto bad_command;
 80075dc:	46c0      	nop			; (mov r8, r8)
bad_command:
    return -1;
 80075de:	2301      	movs	r3, #1
 80075e0:	425b      	negs	r3, r3
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b009      	add	sp, #36	; 0x24
 80075e8:	bd90      	pop	{r4, r7, pc}
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	20000d48 	.word	0x20000d48
 80075f0:	20000d58 	.word	0x20000d58
 80075f4:	20000684 	.word	0x20000684
 80075f8:	080094d8 	.word	0x080094d8

080075fc <my_atou>:
	buf[i] = 0;
	return i;
}

err_t my_atou(const char* buf, int8_t nMaxLen, uint32_t* retval)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	230b      	movs	r3, #11
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	1c0a      	adds	r2, r1, #0
 800760c:	701a      	strb	r2, [r3, #0]
	const char* p = buf;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	61fb      	str	r3, [r7, #28]
	uint32_t v = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	61bb      	str	r3, [r7, #24]
	while(*p && (nMaxLen > 0))
 8007616:	e020      	b.n	800765a <my_atou+0x5e>
	{
        uint8_t d = *p - '0';
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	781a      	ldrb	r2, [r3, #0]
 800761c:	2117      	movs	r1, #23
 800761e:	187b      	adds	r3, r7, r1
 8007620:	3a30      	subs	r2, #48	; 0x30
 8007622:	701a      	strb	r2, [r3, #0]
        if(d > 9) goto failed;
 8007624:	187b      	adds	r3, r7, r1
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b09      	cmp	r3, #9
 800762a:	d825      	bhi.n	8007678 <my_atou+0x7c>
		v = v * 10 + (*p - '0');
 800762c:	69ba      	ldr	r2, [r7, #24]
 800762e:	0013      	movs	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	189b      	adds	r3, r3, r2
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	001a      	movs	r2, r3
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	18d3      	adds	r3, r2, r3
 800763e:	3b30      	subs	r3, #48	; 0x30
 8007640:	61bb      	str	r3, [r7, #24]
		p++;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3301      	adds	r3, #1
 8007646:	61fb      	str	r3, [r7, #28]
		nMaxLen--;
 8007648:	210b      	movs	r1, #11
 800764a:	187b      	adds	r3, r7, r1
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	b25b      	sxtb	r3, r3
 8007650:	b2db      	uxtb	r3, r3
 8007652:	3b01      	subs	r3, #1
 8007654:	b2da      	uxtb	r2, r3
 8007656:	187b      	adds	r3, r7, r1
 8007658:	701a      	strb	r2, [r3, #0]
	while(*p && (nMaxLen > 0))
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d005      	beq.n	800766e <my_atou+0x72>
 8007662:	230b      	movs	r3, #11
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	b25b      	sxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	dcd4      	bgt.n	8007618 <my_atou+0x1c>
	}
    *retval = v;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	e002      	b.n	800767e <my_atou+0x82>
        if(d > 9) goto failed;
 8007678:	46c0      	nop			; (mov r8, r8)
failed:
    return ERR_FAILED;
 800767a:	2301      	movs	r3, #1
 800767c:	425b      	negs	r3, r3
}
 800767e:	0018      	movs	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	b008      	add	sp, #32
 8007684:	bd80      	pop	{r7, pc}

08007686 <execute_command_string>:




int execute_command_string(CommandParser_t* pParser, const char* s, size_t len)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	607a      	str	r2, [r7, #4]
    int r = -1;
 8007692:	2301      	movs	r3, #1
 8007694:	425b      	negs	r3, r3
 8007696:	617b      	str	r3, [r7, #20]
    switch(pParser->protocol)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11b      	bne.n	80076d8 <execute_command_string+0x52>
    {
    case COMMAND_PROTOCOL_OTRSP:
    	pParser->bufRet[0] = 0;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	709a      	strb	r2, [r3, #2]
    	r = parse_command_OTRSP(s, len, pParser->bufRet);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	b299      	uxth	r1, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1c9a      	adds	r2, r3, #2
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	0018      	movs	r0, r3
 80076b2:	f7ff fead 	bl	8007410 <parse_command_OTRSP>
 80076b6:	0003      	movs	r3, r0
 80076b8:	617b      	str	r3, [r7, #20]
    	if(pParser->bufRet[0]) // parsed is valid
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	789b      	ldrb	r3, [r3, #2]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00c      	beq.n	80076dc <execute_command_string+0x56>
    		pParser->hasResponse = strnlen(pParser->bufRet, sizeof(pParser->bufRet));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	3302      	adds	r3, #2
 80076c6:	2118      	movs	r1, #24
 80076c8:	0018      	movs	r0, r3
 80076ca:	f001 fca4 	bl	8009016 <strnlen>
 80076ce:	0003      	movs	r3, r0
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	705a      	strb	r2, [r3, #1]
    	break;
 80076d6:	e001      	b.n	80076dc <execute_command_string+0x56>
    default:
    	break;
 80076d8:	46c0      	nop			; (mov r8, r8)
 80076da:	e000      	b.n	80076de <execute_command_string+0x58>
    	break;
 80076dc:	46c0      	nop			; (mov r8, r8)
    }
    return r;
 80076de:	697b      	ldr	r3, [r7, #20]
}
 80076e0:	0018      	movs	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b006      	add	sp, #24
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80076e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076ea:	b087      	sub	sp, #28
 80076ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i;
	Selector[0].PIN_BCDs[0] = BCD1_0;
 80076ee:	4bc3      	ldr	r3, [pc, #780]	; (80079fc <main+0x314>)
 80076f0:	4ac3      	ldr	r2, [pc, #780]	; (8007a00 <main+0x318>)
 80076f2:	ca03      	ldmia	r2!, {r0, r1}
 80076f4:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCDs[1] = BCD1_1;
 80076f6:	4bc1      	ldr	r3, [pc, #772]	; (80079fc <main+0x314>)
 80076f8:	4ac2      	ldr	r2, [pc, #776]	; (8007a04 <main+0x31c>)
 80076fa:	3308      	adds	r3, #8
 80076fc:	ca03      	ldmia	r2!, {r0, r1}
 80076fe:	c303      	stmia	r3!, {r0, r1}
	Selector[0].PIN_BCDs[2] = BCD1_2;
 8007700:	4bbe      	ldr	r3, [pc, #760]	; (80079fc <main+0x314>)
 8007702:	4ac1      	ldr	r2, [pc, #772]	; (8007a08 <main+0x320>)
 8007704:	3310      	adds	r3, #16
 8007706:	ca03      	ldmia	r2!, {r0, r1}
 8007708:	c303      	stmia	r3!, {r0, r1}
	Selector[0].sel = 0;
 800770a:	4bbc      	ldr	r3, [pc, #752]	; (80079fc <main+0x314>)
 800770c:	2200      	movs	r2, #0
 800770e:	761a      	strb	r2, [r3, #24]
	Selector[1].PIN_BCDs[0] = BCD2_0;
 8007710:	4bba      	ldr	r3, [pc, #744]	; (80079fc <main+0x314>)
 8007712:	4abe      	ldr	r2, [pc, #760]	; (8007a0c <main+0x324>)
 8007714:	331c      	adds	r3, #28
 8007716:	ca03      	ldmia	r2!, {r0, r1}
 8007718:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCDs[1] = BCD2_1;
 800771a:	4bb8      	ldr	r3, [pc, #736]	; (80079fc <main+0x314>)
 800771c:	4abc      	ldr	r2, [pc, #752]	; (8007a10 <main+0x328>)
 800771e:	3324      	adds	r3, #36	; 0x24
 8007720:	ca03      	ldmia	r2!, {r0, r1}
 8007722:	c303      	stmia	r3!, {r0, r1}
	Selector[1].PIN_BCDs[2] = BCD2_2;
 8007724:	4bb5      	ldr	r3, [pc, #724]	; (80079fc <main+0x314>)
 8007726:	4abb      	ldr	r2, [pc, #748]	; (8007a14 <main+0x32c>)
 8007728:	332c      	adds	r3, #44	; 0x2c
 800772a:	ca03      	ldmia	r2!, {r0, r1}
 800772c:	c303      	stmia	r3!, {r0, r1}
	Selector[1].sel = 0;
 800772e:	4bb3      	ldr	r3, [pc, #716]	; (80079fc <main+0x314>)
 8007730:	2234      	movs	r2, #52	; 0x34
 8007732:	2100      	movs	r1, #0
 8007734:	5499      	strb	r1, [r3, r2]

	SelectorM[0].PIN_BCDs[0] = BCDM1_0;
 8007736:	4bb8      	ldr	r3, [pc, #736]	; (8007a18 <main+0x330>)
 8007738:	4ab8      	ldr	r2, [pc, #736]	; (8007a1c <main+0x334>)
 800773a:	ca03      	ldmia	r2!, {r0, r1}
 800773c:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].PIN_BCDs[1] = BCDM1_1;
 800773e:	4bb6      	ldr	r3, [pc, #728]	; (8007a18 <main+0x330>)
 8007740:	4ab7      	ldr	r2, [pc, #732]	; (8007a20 <main+0x338>)
 8007742:	3308      	adds	r3, #8
 8007744:	ca03      	ldmia	r2!, {r0, r1}
 8007746:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].PIN_BCDs[2] = BCDM1_2;
 8007748:	4bb3      	ldr	r3, [pc, #716]	; (8007a18 <main+0x330>)
 800774a:	4ab6      	ldr	r2, [pc, #728]	; (8007a24 <main+0x33c>)
 800774c:	3310      	adds	r3, #16
 800774e:	ca03      	ldmia	r2!, {r0, r1}
 8007750:	c303      	stmia	r3!, {r0, r1}
	SelectorM[0].sel = 0;
 8007752:	4bb1      	ldr	r3, [pc, #708]	; (8007a18 <main+0x330>)
 8007754:	2200      	movs	r2, #0
 8007756:	761a      	strb	r2, [r3, #24]
	SelectorM[1].PIN_BCDs[0] = BCDM2_0;
 8007758:	4baf      	ldr	r3, [pc, #700]	; (8007a18 <main+0x330>)
 800775a:	4ab3      	ldr	r2, [pc, #716]	; (8007a28 <main+0x340>)
 800775c:	331c      	adds	r3, #28
 800775e:	ca03      	ldmia	r2!, {r0, r1}
 8007760:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].PIN_BCDs[1] = BCDM2_1;
 8007762:	4bad      	ldr	r3, [pc, #692]	; (8007a18 <main+0x330>)
 8007764:	4ab1      	ldr	r2, [pc, #708]	; (8007a2c <main+0x344>)
 8007766:	3324      	adds	r3, #36	; 0x24
 8007768:	ca03      	ldmia	r2!, {r0, r1}
 800776a:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].PIN_BCDs[2] = BCDM2_2;
 800776c:	4baa      	ldr	r3, [pc, #680]	; (8007a18 <main+0x330>)
 800776e:	4ab0      	ldr	r2, [pc, #704]	; (8007a30 <main+0x348>)
 8007770:	332c      	adds	r3, #44	; 0x2c
 8007772:	ca03      	ldmia	r2!, {r0, r1}
 8007774:	c303      	stmia	r3!, {r0, r1}
	SelectorM[1].sel = 0;
 8007776:	4ba8      	ldr	r3, [pc, #672]	; (8007a18 <main+0x330>)
 8007778:	2234      	movs	r2, #52	; 0x34
 800777a:	2100      	movs	r1, #0
 800777c:	5499      	strb	r1, [r3, r2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800777e:	f7f8 fee3 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007782:	f000 f96f 	bl	8007a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007786:	f000 fa6f 	bl	8007c68 <MX_GPIO_Init>
  MX_SPI1_Init();
 800778a:	f000 f9bf 	bl	8007b0c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800778e:	f000 fa1d 	bl	8007bcc <MX_USART2_UART_Init>
  MX_DMA_Init();
 8007792:	f000 fa4b 	bl	8007c2c <MX_DMA_Init>
  MX_IWDG_Init();
 8007796:	f000 f9b3 	bl	8007b00 <MX_IWDG_Init>
  MX_TIM6_Init();
 800779a:	f000 f9f5 	bl	8007b88 <MX_TIM6_Init>
	 EEPROM_ReadBytes(&EEPROM, (uint8_t*)&SavedData, sizeof(SavedData_typedef));
	 }
	 */

	/* init: config */
	load_config(&cfg);
 800779e:	4ba5      	ldr	r3, [pc, #660]	; (8007a34 <main+0x34c>)
 80077a0:	0018      	movs	r0, r3
 80077a2:	f7f8 fd4f 	bl	8000244 <load_config>
	if (!config_check_valid(&cfg))
 80077a6:	4ba3      	ldr	r3, [pc, #652]	; (8007a34 <main+0x34c>)
 80077a8:	0018      	movs	r0, r3
 80077aa:	f7f8 fd71 	bl	8000290 <config_check_valid>
 80077ae:	0003      	movs	r3, r0
 80077b0:	001a      	movs	r2, r3
 80077b2:	2301      	movs	r3, #1
 80077b4:	4053      	eors	r3, r2
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d003      	beq.n	80077c4 <main+0xdc>
	{
		init_config(&cfg);
 80077bc:	4b9d      	ldr	r3, [pc, #628]	; (8007a34 <main+0x34c>)
 80077be:	0018      	movs	r0, r3
 80077c0:	f7fd fc8c 	bl	80050dc <init_config>
	}


	/* init: antenna selections */
	uint8_t antnums[N_SELECTORS];
	for (i = 0; i < N_SELECTORS; ++i)
 80077c4:	2317      	movs	r3, #23
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e00f      	b.n	80077ee <main+0x106>
	{
		antnums[i] = cfg.nRadioToAntNums[i];
 80077ce:	2017      	movs	r0, #23
 80077d0:	183b      	adds	r3, r7, r0
 80077d2:	781a      	ldrb	r2, [r3, #0]
 80077d4:	183b      	adds	r3, r7, r0
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4996      	ldr	r1, [pc, #600]	; (8007a34 <main+0x34c>)
 80077da:	188a      	adds	r2, r1, r2
 80077dc:	7a11      	ldrb	r1, [r2, #8]
 80077de:	220c      	movs	r2, #12
 80077e0:	18ba      	adds	r2, r7, r2
 80077e2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < N_SELECTORS; ++i)
 80077e4:	183b      	adds	r3, r7, r0
 80077e6:	183a      	adds	r2, r7, r0
 80077e8:	7812      	ldrb	r2, [r2, #0]
 80077ea:	3201      	adds	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	2417      	movs	r4, #23
 80077f0:	193b      	adds	r3, r7, r4
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d9ea      	bls.n	80077ce <main+0xe6>
	}
	switch_Antenna(antnums, N_SELECTORS);
 80077f8:	230c      	movs	r3, #12
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	2102      	movs	r1, #2
 80077fe:	0018      	movs	r0, r3
 8007800:	f000 fef2 	bl	80085e8 <switch_Antenna>



	// init 485
	Serial485_cfg_t cfg485 =
 8007804:	003b      	movs	r3, r7
 8007806:	4a8c      	ldr	r2, [pc, #560]	; (8007a38 <main+0x350>)
 8007808:	ca23      	ldmia	r2!, {r0, r1, r5}
 800780a:	c323      	stmia	r3!, {r0, r1, r5}
	{ .pSerial = &huart2, .pin_RW =
	{ RW485_GPIO_Port, RW485_Pin } };
	begin_serial485(p485, &cfg485);
 800780c:	4b8b      	ldr	r3, [pc, #556]	; (8007a3c <main+0x354>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	003a      	movs	r2, r7
 8007812:	0011      	movs	r1, r2
 8007814:	0018      	movs	r0, r3
 8007816:	f7ff fb86 	bl	8006f26 <begin_serial485>



	/* init: File System for webpages*/
	FS_begin(&FS, (uint32_t*) FS_BASE_ADDR);
 800781a:	4a89      	ldr	r2, [pc, #548]	; (8007a40 <main+0x358>)
 800781c:	4b89      	ldr	r3, [pc, #548]	; (8007a44 <main+0x35c>)
 800781e:	0011      	movs	r1, r2
 8007820:	0018      	movs	r0, r3
 8007822:	f7fd fca5 	bl	8005170 <FS_begin>
#ifndef DEBUG
	HAL_IWDG_Refresh(&hiwdg); // feed dog
#endif

	/* init: Ethernet chip */
	HAL_Delay(200); // wait for CH395 being ready from power on
 8007826:	20c8      	movs	r0, #200	; 0xc8
 8007828:	f7f8 fef2 	bl	8000610 <HAL_Delay>
	for (i = 5; i < 0xff; ++i)
 800782c:	193b      	adds	r3, r7, r4
 800782e:	2205      	movs	r2, #5
 8007830:	701a      	strb	r2, [r3, #0]
 8007832:	e016      	b.n	8007862 <main+0x17a>
	{
		if (CH395CMDCheckExist(i) != (uint8_t) ~i)
 8007834:	2417      	movs	r4, #23
 8007836:	193b      	adds	r3, r7, r4
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	0018      	movs	r0, r3
 800783c:	f7fc ff28 	bl	8004690 <CH395CMDCheckExist>
 8007840:	0003      	movs	r3, r0
 8007842:	001a      	movs	r2, r3
 8007844:	193b      	adds	r3, r7, r4
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	43db      	mvns	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	429a      	cmp	r2, r3
 800784e:	d00e      	beq.n	800786e <main+0x186>
		{
			DEBUG_LOG("CH395 self check error!\n");
 8007850:	46c0      	nop			; (mov r8, r8)
			HAL_Delay(50);
 8007852:	2032      	movs	r0, #50	; 0x32
 8007854:	f7f8 fedc 	bl	8000610 <HAL_Delay>
	for (i = 5; i < 0xff; ++i)
 8007858:	193b      	adds	r3, r7, r4
 800785a:	193a      	adds	r2, r7, r4
 800785c:	7812      	ldrb	r2, [r2, #0]
 800785e:	3201      	adds	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	2317      	movs	r3, #23
 8007864:	18fb      	adds	r3, r7, r3
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2bff      	cmp	r3, #255	; 0xff
 800786a:	d1e3      	bne.n	8007834 <main+0x14c>
		}
		else
			break;
	}

	RESET_CH395: reset_CH395();
 800786c:	e000      	b.n	8007870 <main+0x188>
			break;
 800786e:	46c0      	nop			; (mov r8, r8)
	RESET_CH395: reset_CH395();
 8007870:	f000 fab4 	bl	8007ddc <reset_CH395>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	static uint32_t lastWakeupTime;
	lastWakeupTime = HAL_GetTick();
 8007874:	f7f8 fec2 	bl	80005fc <HAL_GetTick>
 8007878:	0002      	movs	r2, r0
 800787a:	4b73      	ldr	r3, [pc, #460]	; (8007a48 <main+0x360>)
 800787c:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg); // feed dog
#endif
		/* TASK0: handle CH395 interrupt flags */
		{
			// CASE1: PHY disconnected, need to reconnect, use up the reconn flag to avoid reentrance
			if (flag_PHY_reconn && !flag_CH395_ready)
 800787e:	4b73      	ldr	r3, [pc, #460]	; (8007a4c <main+0x364>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b2db      	uxtb	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <main+0x1b8>
 8007888:	4b71      	ldr	r3, [pc, #452]	; (8007a50 <main+0x368>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	b2db      	uxtb	r3, r3
 800788e:	2201      	movs	r2, #1
 8007890:	4053      	eors	r3, r2
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <main+0x1b8>
			{
				flag_PHY_reconn = false;
 8007898:	4b6c      	ldr	r3, [pc, #432]	; (8007a4c <main+0x364>)
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
				goto RESET_CH395;
 800789e:	e7e7      	b.n	8007870 <main+0x188>
			}
			if (flag_CH395_ready && ch395.RX_received)
 80078a0:	4b6b      	ldr	r3, [pc, #428]	; (8007a50 <main+0x368>)
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <main+0x1da>
 80078aa:	4b6a      	ldr	r3, [pc, #424]	; (8007a54 <main+0x36c>)
 80078ac:	7e5b      	ldrb	r3, [r3, #25]
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d006      	beq.n	80078c2 <main+0x1da>
			{
				HTTPHandle(&ch395);
 80078b4:	4b67      	ldr	r3, [pc, #412]	; (8007a54 <main+0x36c>)
 80078b6:	0018      	movs	r0, r3
 80078b8:	f7fe fd20 	bl	80062fc <HTTPHandle>
			}
			// monitoring the interrupt Pin
			while (HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin)
 80078bc:	e001      	b.n	80078c2 <main+0x1da>
					== GPIO_PIN_RESET)
			{
				interrupt_CH395();
 80078be:	f000 fb21 	bl	8007f04 <interrupt_CH395>
			while (HAL_GPIO_ReadPin(CH395_INT_GPIO_Port, CH395_INT_Pin)
 80078c2:	2390      	movs	r3, #144	; 0x90
 80078c4:	05db      	lsls	r3, r3, #23
 80078c6:	2102      	movs	r1, #2
 80078c8:	0018      	movs	r0, r3
 80078ca:	f7f9 fd2b 	bl	8001324 <HAL_GPIO_ReadPin>
 80078ce:	1e03      	subs	r3, r0, #0
 80078d0:	d0f5      	beq.n	80078be <main+0x1d6>
			}
		}


		uint32_t nowTick = HAL_GetTick();
 80078d2:	f7f8 fe93 	bl	80005fc <HAL_GetTick>
 80078d6:	0003      	movs	r3, r0
 80078d8:	613b      	str	r3, [r7, #16]
		// TASK1: handle EEPROM save
		{
			// save each 5 seconds
			if (nowTick - lastWakeupTime >= 3000)
 80078da:	4b5b      	ldr	r3, [pc, #364]	; (8007a48 <main+0x360>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a5d      	ldr	r2, [pc, #372]	; (8007a58 <main+0x370>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d90d      	bls.n	8007904 <main+0x21c>
			{
				if (isModified)
 80078e8:	4b5c      	ldr	r3, [pc, #368]	; (8007a5c <main+0x374>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <main+0x21c>
				{
					save_config(&cfg);
 80078f0:	4b50      	ldr	r3, [pc, #320]	; (8007a34 <main+0x34c>)
 80078f2:	0018      	movs	r0, r3
 80078f4:	f7f8 fcb6 	bl	8000264 <save_config>
					isModified = false;
 80078f8:	4b58      	ldr	r3, [pc, #352]	; (8007a5c <main+0x374>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	701a      	strb	r2, [r3, #0]
					lastWakeupTime = nowTick;
 80078fe:	4b52      	ldr	r3, [pc, #328]	; (8007a48 <main+0x360>)
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	601a      	str	r2, [r3, #0]
		}

		/* TASK2: check if CPLD sends IP request */
		{
			// when SelectorM1&2 all pins are activated(LOW), means requesting IP display
			bool activated = true;
 8007904:	2316      	movs	r3, #22
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	2201      	movs	r2, #1
 800790a:	701a      	strb	r2, [r3, #0]
			for (uint8_t iSel = 0; iSel < N_SELECTORS; ++iSel)
 800790c:	2315      	movs	r3, #21
 800790e:	18fb      	adds	r3, r7, r3
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	e04a      	b.n	80079ac <main+0x2c4>
			{

				for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8007916:	2314      	movs	r3, #20
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	e032      	b.n	8007986 <main+0x29e>
				{
					uint8_t d = HAL_GPIO_ReadPin(
 8007920:	2415      	movs	r4, #21
 8007922:	193b      	adds	r3, r7, r4
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	2614      	movs	r6, #20
 8007928:	19bb      	adds	r3, r7, r6
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	493a      	ldr	r1, [pc, #232]	; (8007a18 <main+0x330>)
 800792e:	00d8      	lsls	r0, r3, #3
 8007930:	0013      	movs	r3, r2
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	1a9b      	subs	r3, r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	18c3      	adds	r3, r0, r3
 800793a:	585d      	ldr	r5, [r3, r1]
 800793c:	193b      	adds	r3, r7, r4
 800793e:	781a      	ldrb	r2, [r3, #0]
 8007940:	19bb      	adds	r3, r7, r6
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	4934      	ldr	r1, [pc, #208]	; (8007a18 <main+0x330>)
 8007946:	00d8      	lsls	r0, r3, #3
 8007948:	0013      	movs	r3, r2
 800794a:	00db      	lsls	r3, r3, #3
 800794c:	1a9b      	subs	r3, r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	18c3      	adds	r3, r0, r3
 8007952:	18cb      	adds	r3, r1, r3
 8007954:	3304      	adds	r3, #4
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	260f      	movs	r6, #15
 800795a:	19bc      	adds	r4, r7, r6
 800795c:	0019      	movs	r1, r3
 800795e:	0028      	movs	r0, r5
 8007960:	f7f9 fce0 	bl	8001324 <HAL_GPIO_ReadPin>
 8007964:	0003      	movs	r3, r0
 8007966:	7023      	strb	r3, [r4, #0]
							SelectorM[iSel].PIN_BCDs[iBCD].group,
							SelectorM[iSel].PIN_BCDs[iBCD].pin);
					if (d != GPIO_PIN_RESET)
 8007968:	19bb      	adds	r3, r7, r6
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d004      	beq.n	800797a <main+0x292>
					{
						activated = false;
 8007970:	2316      	movs	r3, #22
 8007972:	18fb      	adds	r3, r7, r3
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
						break;
 8007978:	e00a      	b.n	8007990 <main+0x2a8>
				for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 800797a:	2214      	movs	r2, #20
 800797c:	18bb      	adds	r3, r7, r2
 800797e:	18ba      	adds	r2, r7, r2
 8007980:	7812      	ldrb	r2, [r2, #0]
 8007982:	3201      	adds	r2, #1
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	2314      	movs	r3, #20
 8007988:	18fb      	adds	r3, r7, r3
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b02      	cmp	r3, #2
 800798e:	d9c7      	bls.n	8007920 <main+0x238>
					}
				}
				if (!activated)
 8007990:	2316      	movs	r3, #22
 8007992:	18fb      	adds	r3, r7, r3
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2201      	movs	r2, #1
 8007998:	4053      	eors	r3, r2
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10b      	bne.n	80079b8 <main+0x2d0>
			for (uint8_t iSel = 0; iSel < N_SELECTORS; ++iSel)
 80079a0:	2215      	movs	r2, #21
 80079a2:	18bb      	adds	r3, r7, r2
 80079a4:	18ba      	adds	r2, r7, r2
 80079a6:	7812      	ldrb	r2, [r2, #0]
 80079a8:	3201      	adds	r2, #1
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	2315      	movs	r3, #21
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d9af      	bls.n	8007916 <main+0x22e>
 80079b6:	e000      	b.n	80079ba <main+0x2d2>
					break;
 80079b8:	46c0      	nop			; (mov r8, r8)
			}
			if (idxDisplayIP < 0 && activated)
 80079ba:	4b29      	ldr	r3, [pc, #164]	; (8007a60 <main+0x378>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	b25b      	sxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	da08      	bge.n	80079d6 <main+0x2ee>
 80079c4:	2316      	movs	r3, #22
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <main+0x2ee>
				display_IP(true);
 80079ce:	2001      	movs	r0, #1
 80079d0:	f000 ff3c 	bl	800884c <display_IP>
 80079d4:	e011      	b.n	80079fa <main+0x312>
			else if (idxDisplayIP >= 0 && !activated)
 80079d6:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <main+0x378>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b25b      	sxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da00      	bge.n	80079e2 <main+0x2fa>
 80079e0:	e74d      	b.n	800787e <main+0x196>
 80079e2:	2316      	movs	r3, #22
 80079e4:	18fb      	adds	r3, r7, r3
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2201      	movs	r2, #1
 80079ea:	4053      	eors	r3, r2
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d100      	bne.n	80079f4 <main+0x30c>
 80079f2:	e744      	b.n	800787e <main+0x196>
				display_IP(false);
 80079f4:	2000      	movs	r0, #0
 80079f6:	f000 ff29 	bl	800884c <display_IP>
	{
 80079fa:	e740      	b.n	800787e <main+0x196>
 80079fc:	20001114 	.word	0x20001114
 8007a00:	080094ec 	.word	0x080094ec
 8007a04:	080094f4 	.word	0x080094f4
 8007a08:	080094fc 	.word	0x080094fc
 8007a0c:	08009504 	.word	0x08009504
 8007a10:	0800950c 	.word	0x0800950c
 8007a14:	08009514 	.word	0x08009514
 8007a18:	2000123c 	.word	0x2000123c
 8007a1c:	0800951c 	.word	0x0800951c
 8007a20:	08009524 	.word	0x08009524
 8007a24:	0800952c 	.word	0x0800952c
 8007a28:	08009534 	.word	0x08009534
 8007a2c:	0800953c 	.word	0x0800953c
 8007a30:	08009544 	.word	0x08009544
 8007a34:	20000d90 	.word	0x20000d90
 8007a38:	080093e8 	.word	0x080093e8
 8007a3c:	20000680 	.word	0x20000680
 8007a40:	0800c000 	.word	0x0800c000
 8007a44:	20000e28 	.word	0x20000e28
 8007a48:	20000d8c 	.word	0x20000d8c
 8007a4c:	20000d86 	.word	0x20000d86
 8007a50:	20000d88 	.word	0x20000d88
 8007a54:	20000010 	.word	0x20000010
 8007a58:	00000bb7 	.word	0x00000bb7
 8007a5c:	200006c4 	.word	0x200006c4
 8007a60:	2000069c 	.word	0x2000069c

08007a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a64:	b590      	push	{r4, r7, lr}
 8007a66:	b091      	sub	sp, #68	; 0x44
 8007a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a6a:	2410      	movs	r4, #16
 8007a6c:	193b      	adds	r3, r7, r4
 8007a6e:	0018      	movs	r0, r3
 8007a70:	2330      	movs	r3, #48	; 0x30
 8007a72:	001a      	movs	r2, r3
 8007a74:	2100      	movs	r1, #0
 8007a76:	f001 fa68 	bl	8008f4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a7a:	003b      	movs	r3, r7
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	2310      	movs	r3, #16
 8007a80:	001a      	movs	r2, r3
 8007a82:	2100      	movs	r1, #0
 8007a84:	f001 fa61 	bl	8008f4a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8007a88:	0021      	movs	r1, r4
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a90:	187b      	adds	r3, r7, r1
 8007a92:	2201      	movs	r2, #1
 8007a94:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007a96:	187b      	adds	r3, r7, r1
 8007a98:	2210      	movs	r2, #16
 8007a9a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007a9c:	187b      	adds	r3, r7, r1
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007aa2:	187b      	adds	r3, r7, r1
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007aa8:	187b      	adds	r3, r7, r1
 8007aaa:	2200      	movs	r2, #0
 8007aac:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8007aae:	187b      	adds	r3, r7, r1
 8007ab0:	22c0      	movs	r2, #192	; 0xc0
 8007ab2:	0352      	lsls	r2, r2, #13
 8007ab4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8007ab6:	187b      	adds	r3, r7, r1
 8007ab8:	2200      	movs	r2, #0
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007abc:	187b      	adds	r3, r7, r1
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7f9 fc6a 	bl	8001398 <HAL_RCC_OscConfig>
 8007ac4:	1e03      	subs	r3, r0, #0
 8007ac6:	d001      	beq.n	8007acc <SystemClock_Config+0x68>
  {
    Error_Handler();
 8007ac8:	f001 f81a 	bl	8008b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007acc:	003b      	movs	r3, r7
 8007ace:	2207      	movs	r2, #7
 8007ad0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ad2:	003b      	movs	r3, r7
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ad8:	003b      	movs	r3, r7
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007ade:	003b      	movs	r3, r7
 8007ae0:	22a0      	movs	r2, #160	; 0xa0
 8007ae2:	00d2      	lsls	r2, r2, #3
 8007ae4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8007ae6:	003b      	movs	r3, r7
 8007ae8:	2101      	movs	r1, #1
 8007aea:	0018      	movs	r0, r3
 8007aec:	f7f9 ff6e 	bl	80019cc <HAL_RCC_ClockConfig>
 8007af0:	1e03      	subs	r3, r0, #0
 8007af2:	d001      	beq.n	8007af8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007af4:	f001 f804 	bl	8008b00 <Error_Handler>
  }
}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b011      	add	sp, #68	; 0x44
 8007afe:	bd90      	pop	{r4, r7, pc}

08007b00 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
  }
  /* USER CODE BEGIN IWDG_Init 2 */
#endif
  /* USER CODE END IWDG_Init 2 */

}
 8007b04:	46c0      	nop			; (mov r8, r8)
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007b10:	4b1b      	ldr	r3, [pc, #108]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b12:	4a1c      	ldr	r2, [pc, #112]	; (8007b84 <MX_SPI1_Init+0x78>)
 8007b14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007b16:	4b1a      	ldr	r3, [pc, #104]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b18:	2282      	movs	r2, #130	; 0x82
 8007b1a:	0052      	lsls	r2, r2, #1
 8007b1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007b1e:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b24:	4b16      	ldr	r3, [pc, #88]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b26:	22e0      	movs	r2, #224	; 0xe0
 8007b28:	00d2      	lsls	r2, r2, #3
 8007b2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007b2c:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b2e:	2202      	movs	r2, #2
 8007b30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b34:	2201      	movs	r2, #1
 8007b36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007b38:	4b11      	ldr	r3, [pc, #68]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b3a:	2280      	movs	r2, #128	; 0x80
 8007b3c:	0092      	lsls	r2, r2, #2
 8007b3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b46:	4b0e      	ldr	r3, [pc, #56]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b4c:	4b0c      	ldr	r3, [pc, #48]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b52:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b5a:	2207      	movs	r2, #7
 8007b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007b5e:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <MX_SPI1_Init+0x74>)
 8007b6c:	0018      	movs	r0, r3
 8007b6e:	f7fa f871 	bl	8001c54 <HAL_SPI_Init>
 8007b72:	1e03      	subs	r3, r0, #0
 8007b74:	d001      	beq.n	8007b7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007b76:	f000 ffc3 	bl	8008b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007b7a:	46c0      	nop			; (mov r8, r8)
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	200011d8 	.word	0x200011d8
 8007b84:	40013000 	.word	0x40013000

08007b88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007b8c:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <MX_TIM6_Init+0x3c>)
 8007b8e:	4a0e      	ldr	r2, [pc, #56]	; (8007bc8 <MX_TIM6_Init+0x40>)
 8007b90:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000;
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <MX_TIM6_Init+0x3c>)
 8007b94:	22fa      	movs	r2, #250	; 0xfa
 8007b96:	0192      	lsls	r2, r2, #6
 8007b98:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	; (8007bc4 <MX_TIM6_Init+0x3c>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 8007ba0:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <MX_TIM6_Init+0x3c>)
 8007ba2:	22fa      	movs	r2, #250	; 0xfa
 8007ba4:	0052      	lsls	r2, r2, #1
 8007ba6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ba8:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <MX_TIM6_Init+0x3c>)
 8007baa:	2280      	movs	r2, #128	; 0x80
 8007bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <MX_TIM6_Init+0x3c>)
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f7fa ff6f 	bl	8002a94 <HAL_TIM_Base_Init>
 8007bb6:	1e03      	subs	r3, r0, #0
 8007bb8:	d001      	beq.n	8007bbe <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 8007bba:	f000 ffa1 	bl	8008b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20001190 	.word	0x20001190
 8007bc8:	40001000 	.word	0x40001000

08007bcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007bd0:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007bd2:	4a15      	ldr	r2, [pc, #84]	; (8007c28 <MX_USART2_UART_Init+0x5c>)
 8007bd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8007bd6:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007bd8:	2296      	movs	r2, #150	; 0x96
 8007bda:	0192      	lsls	r2, r2, #6
 8007bdc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007bde:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007be4:	4b0f      	ldr	r3, [pc, #60]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007bea:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007bf0:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007bf2:	220c      	movs	r2, #12
 8007bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007bfc:	4b09      	ldr	r3, [pc, #36]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c02:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007c08:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <MX_USART2_UART_Init+0x58>)
 8007c10:	0018      	movs	r0, r3
 8007c12:	f7fb f9c5 	bl	8002fa0 <HAL_UART_Init>
 8007c16:	1e03      	subs	r3, r0, #0
 8007c18:	d001      	beq.n	8007c1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8007c1a:	f000 ff71 	bl	8008b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20001274 	.word	0x20001274
 8007c28:	40004400 	.word	0x40004400

08007c2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <MX_DMA_Init+0x38>)
 8007c34:	695a      	ldr	r2, [r3, #20]
 8007c36:	4b0b      	ldr	r3, [pc, #44]	; (8007c64 <MX_DMA_Init+0x38>)
 8007c38:	2101      	movs	r1, #1
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	615a      	str	r2, [r3, #20]
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <MX_DMA_Init+0x38>)
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	2201      	movs	r2, #1
 8007c44:	4013      	ands	r3, r2
 8007c46:	607b      	str	r3, [r7, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	200b      	movs	r0, #11
 8007c50:	f7f8 fdae 	bl	80007b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8007c54:	200b      	movs	r0, #11
 8007c56:	f7f8 fdc0 	bl	80007da <HAL_NVIC_EnableIRQ>

}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b002      	add	sp, #8
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	40021000 	.word	0x40021000

08007c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c68:	b590      	push	{r4, r7, lr}
 8007c6a:	b089      	sub	sp, #36	; 0x24
 8007c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c6e:	240c      	movs	r4, #12
 8007c70:	193b      	adds	r3, r7, r4
 8007c72:	0018      	movs	r0, r3
 8007c74:	2314      	movs	r3, #20
 8007c76:	001a      	movs	r2, r3
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f001 f966 	bl	8008f4a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c7e:	4b52      	ldr	r3, [pc, #328]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007c80:	695a      	ldr	r2, [r3, #20]
 8007c82:	4b51      	ldr	r3, [pc, #324]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007c84:	2180      	movs	r1, #128	; 0x80
 8007c86:	03c9      	lsls	r1, r1, #15
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	615a      	str	r2, [r3, #20]
 8007c8c:	4b4e      	ldr	r3, [pc, #312]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007c8e:	695a      	ldr	r2, [r3, #20]
 8007c90:	2380      	movs	r3, #128	; 0x80
 8007c92:	03db      	lsls	r3, r3, #15
 8007c94:	4013      	ands	r3, r2
 8007c96:	60bb      	str	r3, [r7, #8]
 8007c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c9a:	4b4b      	ldr	r3, [pc, #300]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007c9c:	695a      	ldr	r2, [r3, #20]
 8007c9e:	4b4a      	ldr	r3, [pc, #296]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007ca0:	2180      	movs	r1, #128	; 0x80
 8007ca2:	0289      	lsls	r1, r1, #10
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	615a      	str	r2, [r3, #20]
 8007ca8:	4b47      	ldr	r3, [pc, #284]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007caa:	695a      	ldr	r2, [r3, #20]
 8007cac:	2380      	movs	r3, #128	; 0x80
 8007cae:	029b      	lsls	r3, r3, #10
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cb6:	4b44      	ldr	r3, [pc, #272]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007cb8:	695a      	ldr	r2, [r3, #20]
 8007cba:	4b43      	ldr	r3, [pc, #268]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007cbc:	2180      	movs	r1, #128	; 0x80
 8007cbe:	02c9      	lsls	r1, r1, #11
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	615a      	str	r2, [r3, #20]
 8007cc4:	4b40      	ldr	r3, [pc, #256]	; (8007dc8 <MX_GPIO_Init+0x160>)
 8007cc6:	695a      	ldr	r2, [r3, #20]
 8007cc8:	2380      	movs	r3, #128	; 0x80
 8007cca:	02db      	lsls	r3, r3, #11
 8007ccc:	4013      	ands	r3, r2
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin
 8007cd2:	493e      	ldr	r1, [pc, #248]	; (8007dcc <MX_GPIO_Init+0x164>)
 8007cd4:	2390      	movs	r3, #144	; 0x90
 8007cd6:	05db      	lsls	r3, r3, #23
 8007cd8:	2201      	movs	r2, #1
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f7f9 fb3f 	bl	800135e <HAL_GPIO_WritePin>
                          |BCD1_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, XDISPLAY_Pin|RW485_Pin|BCDM2_2_Pin|BCDM2_1_Pin
 8007ce0:	493b      	ldr	r1, [pc, #236]	; (8007dd0 <MX_GPIO_Init+0x168>)
 8007ce2:	4b3c      	ldr	r3, [pc, #240]	; (8007dd4 <MX_GPIO_Init+0x16c>)
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	0018      	movs	r0, r3
 8007ce8:	f7f9 fb39 	bl	800135e <HAL_GPIO_WritePin>
                          |BCDM2_0_Pin|BCD1_1_Pin|BCD1_0_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007cec:	193b      	adds	r3, r7, r4
 8007cee:	2203      	movs	r2, #3
 8007cf0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cf2:	193b      	adds	r3, r7, r4
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf8:	193b      	adds	r3, r7, r4
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007cfe:	193b      	adds	r3, r7, r4
 8007d00:	4a35      	ldr	r2, [pc, #212]	; (8007dd8 <MX_GPIO_Init+0x170>)
 8007d02:	0019      	movs	r1, r3
 8007d04:	0010      	movs	r0, r2
 8007d06:	f7f9 f99d 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH395_INT_Pin */
  GPIO_InitStruct.Pin = CH395_INT_Pin;
 8007d0a:	193b      	adds	r3, r7, r4
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007d10:	193b      	adds	r3, r7, r4
 8007d12:	2284      	movs	r2, #132	; 0x84
 8007d14:	0392      	lsls	r2, r2, #14
 8007d16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d18:	193b      	adds	r3, r7, r4
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH395_INT_GPIO_Port, &GPIO_InitStruct);
 8007d1e:	193a      	adds	r2, r7, r4
 8007d20:	2390      	movs	r3, #144	; 0x90
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	0011      	movs	r1, r2
 8007d26:	0018      	movs	r0, r3
 8007d28:	f7f9 f98c 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin BCD2_2_Pin BCD2_1_Pin BCD2_0_Pin
                           BCD1_2_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|BCD2_2_Pin|BCD2_1_Pin|BCD2_0_Pin
 8007d2c:	193b      	adds	r3, r7, r4
 8007d2e:	4a27      	ldr	r2, [pc, #156]	; (8007dcc <MX_GPIO_Init+0x164>)
 8007d30:	601a      	str	r2, [r3, #0]
                          |BCD1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007d32:	193b      	adds	r3, r7, r4
 8007d34:	2211      	movs	r2, #17
 8007d36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d38:	193b      	adds	r3, r7, r4
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d3e:	193b      	adds	r3, r7, r4
 8007d40:	2200      	movs	r2, #0
 8007d42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d44:	193a      	adds	r2, r7, r4
 8007d46:	2390      	movs	r3, #144	; 0x90
 8007d48:	05db      	lsls	r3, r3, #23
 8007d4a:	0011      	movs	r1, r2
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f7f9 f979 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : XDISPLAY_Pin RW485_Pin BCDM2_2_Pin BCDM2_1_Pin
                           BCDM2_0_Pin BCD1_1_Pin BCD1_0_Pin */
  GPIO_InitStruct.Pin = XDISPLAY_Pin|RW485_Pin|BCDM2_2_Pin|BCDM2_1_Pin
 8007d52:	193b      	adds	r3, r7, r4
 8007d54:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <MX_GPIO_Init+0x168>)
 8007d56:	601a      	str	r2, [r3, #0]
                          |BCDM2_0_Pin|BCD1_1_Pin|BCD1_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007d58:	193b      	adds	r3, r7, r4
 8007d5a:	2211      	movs	r2, #17
 8007d5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d5e:	193b      	adds	r3, r7, r4
 8007d60:	2201      	movs	r2, #1
 8007d62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d64:	193b      	adds	r3, r7, r4
 8007d66:	2200      	movs	r2, #0
 8007d68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d6a:	193b      	adds	r3, r7, r4
 8007d6c:	4a19      	ldr	r2, [pc, #100]	; (8007dd4 <MX_GPIO_Init+0x16c>)
 8007d6e:	0019      	movs	r1, r3
 8007d70:	0010      	movs	r0, r2
 8007d72:	f7f9 f967 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BCDM1_2_Pin */
  GPIO_InitStruct.Pin = BCDM1_2_Pin;
 8007d76:	0021      	movs	r1, r4
 8007d78:	187b      	adds	r3, r7, r1
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	0212      	lsls	r2, r2, #8
 8007d7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d80:	000c      	movs	r4, r1
 8007d82:	193b      	adds	r3, r7, r4
 8007d84:	2200      	movs	r2, #0
 8007d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d88:	193b      	adds	r3, r7, r4
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BCDM1_2_GPIO_Port, &GPIO_InitStruct);
 8007d8e:	193b      	adds	r3, r7, r4
 8007d90:	4a10      	ldr	r2, [pc, #64]	; (8007dd4 <MX_GPIO_Init+0x16c>)
 8007d92:	0019      	movs	r1, r3
 8007d94:	0010      	movs	r0, r2
 8007d96:	f7f9 f955 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : BCDM1_1_Pin BCDM1_0_Pin */
  GPIO_InitStruct.Pin = BCDM1_1_Pin|BCDM1_0_Pin;
 8007d9a:	0021      	movs	r1, r4
 8007d9c:	187b      	adds	r3, r7, r1
 8007d9e:	22c0      	movs	r2, #192	; 0xc0
 8007da0:	0092      	lsls	r2, r2, #2
 8007da2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	2200      	movs	r2, #0
 8007da8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007daa:	187b      	adds	r3, r7, r1
 8007dac:	2201      	movs	r2, #1
 8007dae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007db0:	187a      	adds	r2, r7, r1
 8007db2:	2390      	movs	r3, #144	; 0x90
 8007db4:	05db      	lsls	r3, r3, #23
 8007db6:	0011      	movs	r1, r2
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7f9 f943 	bl	8001044 <HAL_GPIO_Init>

}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	b009      	add	sp, #36	; 0x24
 8007dc4:	bd90      	pop	{r4, r7, pc}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	00009c10 	.word	0x00009c10
 8007dd0:	00007c18 	.word	0x00007c18
 8007dd4:	48000400 	.word	0x48000400
 8007dd8:	48001400 	.word	0x48001400

08007ddc <reset_CH395>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
//{
//	onReceived_serial485(p485);
//}
void reset_CH395()
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
	uint8_t i ;
	flag_CH395_ready = false;
 8007de2:	4b3f      	ldr	r3, [pc, #252]	; (8007ee0 <reset_CH395+0x104>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
	ch395.RX_received = 0;
 8007de8:	4b3e      	ldr	r3, [pc, #248]	; (8007ee4 <reset_CH395+0x108>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	765a      	strb	r2, [r3, #25]
	ch395.SOCK_responding = -1;
 8007dee:	4b3d      	ldr	r3, [pc, #244]	; (8007ee4 <reset_CH395+0x108>)
 8007df0:	22ff      	movs	r2, #255	; 0xff
 8007df2:	769a      	strb	r2, [r3, #26]
	ch395.TX_available = 0xff;
 8007df4:	4b3b      	ldr	r3, [pc, #236]	; (8007ee4 <reset_CH395+0x108>)
 8007df6:	22ff      	movs	r2, #255	; 0xff
 8007df8:	76da      	strb	r2, [r3, #27]
	ch395.socket_connected = 0;
 8007dfa:	4b3a      	ldr	r3, [pc, #232]	; (8007ee4 <reset_CH395+0x108>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	761a      	strb	r2, [r3, #24]

	// setting HTTP sockets, 0, 1,2,3
	for ( i = 0; i < 4; i++)
 8007e00:	1dfb      	adds	r3, r7, #7
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e012      	b.n	8007e2e <reset_CH395+0x52>
	{
		ch395.cfg.protocols[i] = CH395_PROTOCOL_HTTP;
 8007e08:	1dfb      	adds	r3, r7, #7
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4a35      	ldr	r2, [pc, #212]	; (8007ee4 <reset_CH395+0x108>)
 8007e0e:	18d3      	adds	r3, r2, r3
 8007e10:	2203      	movs	r2, #3
 8007e12:	741a      	strb	r2, [r3, #16]
		ch395.cfg.ports[i] = cfg.portHTTP;
 8007e14:	1dfb      	adds	r3, r7, #7
 8007e16:	781a      	ldrb	r2, [r3, #0]
 8007e18:	4b33      	ldr	r3, [pc, #204]	; (8007ee8 <reset_CH395+0x10c>)
 8007e1a:	216a      	movs	r1, #106	; 0x6a
 8007e1c:	5a59      	ldrh	r1, [r3, r1]
 8007e1e:	4b31      	ldr	r3, [pc, #196]	; (8007ee4 <reset_CH395+0x108>)
 8007e20:	0052      	lsls	r2, r2, #1
 8007e22:	52d1      	strh	r1, [r2, r3]
	for ( i = 0; i < 4; i++)
 8007e24:	1dfb      	adds	r3, r7, #7
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	1dfb      	adds	r3, r7, #7
 8007e2a:	3201      	adds	r2, #1
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	1dfb      	adds	r3, r7, #7
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d9e8      	bls.n	8007e08 <reset_CH395+0x2c>
	}
	// setting primitive TCP sockets, 4,5,6
	for ( i = 4; i < 7; i++)
 8007e36:	1dfb      	adds	r3, r7, #7
 8007e38:	2204      	movs	r2, #4
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	e012      	b.n	8007e64 <reset_CH395+0x88>
	{
		ch395.cfg.protocols[i] = CH395_PROTOCOL_TCP;
 8007e3e:	1dfb      	adds	r3, r7, #7
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	4a28      	ldr	r2, [pc, #160]	; (8007ee4 <reset_CH395+0x108>)
 8007e44:	18d3      	adds	r3, r2, r3
 8007e46:	2202      	movs	r2, #2
 8007e48:	741a      	strb	r2, [r3, #16]
		ch395.cfg.ports[i] = cfg.portTCP;
 8007e4a:	1dfb      	adds	r3, r7, #7
 8007e4c:	781a      	ldrb	r2, [r3, #0]
 8007e4e:	4b26      	ldr	r3, [pc, #152]	; (8007ee8 <reset_CH395+0x10c>)
 8007e50:	216c      	movs	r1, #108	; 0x6c
 8007e52:	5a59      	ldrh	r1, [r3, r1]
 8007e54:	4b23      	ldr	r3, [pc, #140]	; (8007ee4 <reset_CH395+0x108>)
 8007e56:	0052      	lsls	r2, r2, #1
 8007e58:	52d1      	strh	r1, [r2, r3]
	for ( i = 4; i < 7; i++)
 8007e5a:	1dfb      	adds	r3, r7, #7
 8007e5c:	781a      	ldrb	r2, [r3, #0]
 8007e5e:	1dfb      	adds	r3, r7, #7
 8007e60:	3201      	adds	r2, #1
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	1dfb      	adds	r3, r7, #7
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b06      	cmp	r3, #6
 8007e6a:	d9e8      	bls.n	8007e3e <reset_CH395+0x62>
	}
	// setting primitive UDP socket 7
	i = 7;
 8007e6c:	1dfb      	adds	r3, r7, #7
 8007e6e:	2207      	movs	r2, #7
 8007e70:	701a      	strb	r2, [r3, #0]
	ch395.cfg.protocols[i] = CH395_PROTOCOL_UDP;
 8007e72:	1dfb      	adds	r3, r7, #7
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	4a1b      	ldr	r2, [pc, #108]	; (8007ee4 <reset_CH395+0x108>)
 8007e78:	18d3      	adds	r3, r2, r3
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	741a      	strb	r2, [r3, #16]
	ch395.cfg.ports[i] = cfg.portUDP;
 8007e7e:	1dfb      	adds	r3, r7, #7
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <reset_CH395+0x10c>)
 8007e84:	216e      	movs	r1, #110	; 0x6e
 8007e86:	5a59      	ldrh	r1, [r3, r1]
 8007e88:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <reset_CH395+0x108>)
 8007e8a:	0052      	lsls	r2, r2, #1
 8007e8c:	52d1      	strh	r1, [r2, r3]
	CH395CMDReset();
 8007e8e:	f7fc fbed 	bl	800466c <CH395CMDReset>
	Delay_ms(100); // wait for CH395 being ready from power on
 8007e92:	4b16      	ldr	r3, [pc, #88]	; (8007eec <reset_CH395+0x110>)
 8007e94:	0018      	movs	r0, r3
 8007e96:	f7fd f955 	bl	8005144 <Delay_us>
	// get CH395 chip MAC address
	CH395CMDGetMACAddr(MAC);
 8007e9a:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <reset_CH395+0x114>)
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	f7fc fc89 	bl	80047b4 <CH395CMDGetMACAddr>
	// initialize CH395 GPIO settings to INPUT/PULL DOWN
//	CH395WriteGPIOAddr(GPIO_DIR_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PU_REG, 0);
//	CH395WriteGPIOAddr(GPIO_PD_REG, 0xff);
	CH395SetBuffer();
 8007ea2:	f7fc faba 	bl	800441a <CH395SetBuffer>
	// initialize TCP server
	flag_CH395_ready = CH395TCPServerStart(*(uint32_t*) IP, cfg.portHTTP, cfg.portTCP);
 8007ea6:	4b13      	ldr	r3, [pc, #76]	; (8007ef4 <reset_CH395+0x118>)
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <reset_CH395+0x10c>)
 8007eac:	226a      	movs	r2, #106	; 0x6a
 8007eae:	5a99      	ldrh	r1, [r3, r2]
 8007eb0:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <reset_CH395+0x10c>)
 8007eb2:	226c      	movs	r2, #108	; 0x6c
 8007eb4:	5a9b      	ldrh	r3, [r3, r2]
 8007eb6:	001a      	movs	r2, r3
 8007eb8:	f7fc fae2 	bl	8004480 <CH395TCPServerStart>
 8007ebc:	0003      	movs	r3, r0
 8007ebe:	001a      	movs	r2, r3
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <reset_CH395+0x104>)
 8007ec2:	701a      	strb	r2, [r3, #0]
	//CH395SetBuffer();
	flag_PHY_reconn = false;
 8007ec4:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <reset_CH395+0x11c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
	flag_IP_conflict = false;
 8007eca:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <reset_CH395+0x120>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
	flag_CH395_DHCP_ready = false;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <reset_CH395+0x124>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	b002      	add	sp, #8
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	20000d88 	.word	0x20000d88
 8007ee4:	20000010 	.word	0x20000010
 8007ee8:	20000d90 	.word	0x20000d90
 8007eec:	000186a0 	.word	0x000186a0
 8007ef0:	20000d80 	.word	0x20000d80
 8007ef4:	20000d68 	.word	0x20000d68
 8007ef8:	20000d86 	.word	0x20000d86
 8007efc:	20000d87 	.word	0x20000d87
 8007f00:	20000d89 	.word	0x20000d89

08007f04 <interrupt_CH395>:

void interrupt_CH395()
{
 8007f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f06:	b09b      	sub	sp, #108	; 0x6c
 8007f08:	af00      	add	r7, sp, #0
	// process interrupt requests from CH395
	uint8_t sock_int_status, i;
	uint16_t glob_int_status;
	//BEGIN_INT_CH395:
	// read global int status
	glob_int_status = CH395CMDGetGlobIntStatus_ALL();
 8007f0a:	2564      	movs	r5, #100	; 0x64
 8007f0c:	197c      	adds	r4, r7, r5
 8007f0e:	f7fd f86f 	bl	8004ff0 <CH395CMDGetGlobIntStatus_ALL>
 8007f12:	0003      	movs	r3, r0
 8007f14:	8023      	strh	r3, [r4, #0]

	// CASE: TCP unreach error
	if (glob_int_status & GINT_STAT_UNREACH)
 8007f16:	197b      	adds	r3, r7, r5
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	d035      	beq.n	8007f8c <interrupt_CH395+0x88>
	{
		uint8_t unreach[8];
		CH395CMDGetUnreachIPPT(unreach);
 8007f20:	2444      	movs	r4, #68	; 0x44
 8007f22:	193b      	adds	r3, r7, r4
 8007f24:	0018      	movs	r0, r3
 8007f26:	f7fc fc71 	bl	800480c <CH395CMDGetUnreachIPPT>
		// invalidate all Parsers
		// TODO: 用端口号区分
		// unreach byte 3, byte 2 combine to be port number
		uint16_t port = ((uint16_t)unreach[3] << 8) | unreach[2];
 8007f2a:	0021      	movs	r1, r4
 8007f2c:	187b      	adds	r3, r7, r1
 8007f2e:	78db      	ldrb	r3, [r3, #3]
 8007f30:	021b      	lsls	r3, r3, #8
 8007f32:	b21a      	sxth	r2, r3
 8007f34:	187b      	adds	r3, r7, r1
 8007f36:	789b      	ldrb	r3, [r3, #2]
 8007f38:	b21b      	sxth	r3, r3
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	b21a      	sxth	r2, r3
 8007f3e:	235e      	movs	r3, #94	; 0x5e
 8007f40:	18fb      	adds	r3, r7, r3
 8007f42:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 1; i < NUM_SOCKETS; ++i)
 8007f44:	2363      	movs	r3, #99	; 0x63
 8007f46:	18fb      	adds	r3, r7, r3
 8007f48:	2201      	movs	r2, #1
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e019      	b.n	8007f82 <interrupt_CH395+0x7e>
		{
			HTTPRequestParseState *pS = parseStates + i;
 8007f4e:	2363      	movs	r3, #99	; 0x63
 8007f50:	18fb      	adds	r3, r7, r3
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	22b0      	movs	r2, #176	; 0xb0
 8007f56:	435a      	muls	r2, r3
 8007f58:	4bb6      	ldr	r3, [pc, #728]	; (8008234 <interrupt_CH395+0x330>)
 8007f5a:	18d3      	adds	r3, r2, r3
 8007f5c:	65bb      	str	r3, [r7, #88]	; 0x58
			if(pS->port == port) resetHTTPParseState(pS);
 8007f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f60:	2246      	movs	r2, #70	; 0x46
 8007f62:	5a9b      	ldrh	r3, [r3, r2]
 8007f64:	225e      	movs	r2, #94	; 0x5e
 8007f66:	18ba      	adds	r2, r7, r2
 8007f68:	8812      	ldrh	r2, [r2, #0]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d103      	bne.n	8007f76 <interrupt_CH395+0x72>
 8007f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f70:	0018      	movs	r0, r3
 8007f72:	f7fd fc6d 	bl	8005850 <resetHTTPParseState>
		for(uint8_t i = 1; i < NUM_SOCKETS; ++i)
 8007f76:	2263      	movs	r2, #99	; 0x63
 8007f78:	18bb      	adds	r3, r7, r2
 8007f7a:	18ba      	adds	r2, r7, r2
 8007f7c:	7812      	ldrb	r2, [r2, #0]
 8007f7e:	3201      	adds	r2, #1
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	2363      	movs	r3, #99	; 0x63
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b07      	cmp	r3, #7
 8007f8a:	d9e0      	bls.n	8007f4e <interrupt_CH395+0x4a>
		}
//		reset_CH395();
	}

	// CASE: DHCP
	if (glob_int_status & GINT_STAT_DHCP)
 8007f8c:	2364      	movs	r3, #100	; 0x64
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	2208      	movs	r2, #8
 8007f94:	4013      	ands	r3, r2
 8007f96:	d02a      	beq.n	8007fee <interrupt_CH395+0xea>
	{
		if(CH395GetDHCPStatus() == 0)
 8007f98:	f7fc ff74 	bl	8004e84 <CH395GetDHCPStatus>
 8007f9c:	1e03      	subs	r3, r0, #0
 8007f9e:	d123      	bne.n	8007fe8 <interrupt_CH395+0xe4>
		{
			flag_CH395_DHCP_ready = true;
 8007fa0:	4ba5      	ldr	r3, [pc, #660]	; (8008238 <interrupt_CH395+0x334>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	701a      	strb	r2, [r3, #0]
			// get IP info from CH395
			uint8_t IPv4_Gateway_info[20];
			if(flag_CH395_DHCP_ready)
 8007fa6:	4ba4      	ldr	r3, [pc, #656]	; (8008238 <interrupt_CH395+0x334>)
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d01e      	beq.n	8007fee <interrupt_CH395+0xea>
			{
				CH395GetIPInf(IPv4_Gateway_info); // BIG endian
 8007fb0:	2430      	movs	r4, #48	; 0x30
 8007fb2:	193b      	adds	r3, r7, r4
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	f7fc ff81 	bl	8004ebc <CH395GetIPInf>
				memcpy(IP, IPv4_Gateway_info, 4); // in CH395, the byte order of IPs and MACs are reversed (IP and MAC are Big-endian, others are little-endian)
 8007fba:	4ba0      	ldr	r3, [pc, #640]	; (800823c <interrupt_CH395+0x338>)
 8007fbc:	193a      	adds	r2, r7, r4
 8007fbe:	6812      	ldr	r2, [r2, #0]
 8007fc0:	601a      	str	r2, [r3, #0]
				memcpy(IP_gateway, IPv4_Gateway_info + 4, 4); //
 8007fc2:	193b      	adds	r3, r7, r4
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	4a9e      	ldr	r2, [pc, #632]	; (8008240 <interrupt_CH395+0x33c>)
 8007fc8:	0010      	movs	r0, r2
 8007fca:	0019      	movs	r1, r3
 8007fcc:	2304      	movs	r3, #4
 8007fce:	001a      	movs	r2, r3
 8007fd0:	f000 ffb2 	bl	8008f38 <memcpy>
				memcpy(IP_mask, IPv4_Gateway_info + 8, 4); //
 8007fd4:	193b      	adds	r3, r7, r4
 8007fd6:	3308      	adds	r3, #8
 8007fd8:	4a9a      	ldr	r2, [pc, #616]	; (8008244 <interrupt_CH395+0x340>)
 8007fda:	0010      	movs	r0, r2
 8007fdc:	0019      	movs	r1, r3
 8007fde:	2304      	movs	r3, #4
 8007fe0:	001a      	movs	r2, r3
 8007fe2:	f000 ffa9 	bl	8008f38 <memcpy>
 8007fe6:	e002      	b.n	8007fee <interrupt_CH395+0xea>
			}
		}
		else
		{
			flag_CH395_DHCP_ready = false;
 8007fe8:	4b93      	ldr	r3, [pc, #588]	; (8008238 <interrupt_CH395+0x334>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
		}
	}
	// CASE: Phy change
	if (glob_int_status & GINT_STAT_PHY_CHANGE)
 8007fee:	2364      	movs	r3, #100	; 0x64
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	2204      	movs	r2, #4
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	d017      	beq.n	800802a <interrupt_CH395+0x126>
	{
		uint8_t phy_status = (CH395CMDGetPHYStatus());
 8007ffa:	2557      	movs	r5, #87	; 0x57
 8007ffc:	197c      	adds	r4, r7, r5
 8007ffe:	f7fc fb6b 	bl	80046d8 <CH395CMDGetPHYStatus>
 8008002:	0003      	movs	r3, r0
 8008004:	7023      	strb	r3, [r4, #0]
		switch (phy_status)
 8008006:	197b      	adds	r3, r7, r5
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d106      	bne.n	800801c <interrupt_CH395+0x118>
		{
		case PHY_DISCONN:
			flag_CH395_ready = false;
 800800e:	4b8e      	ldr	r3, [pc, #568]	; (8008248 <interrupt_CH395+0x344>)
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
			flag_PHY_reconn = true;
 8008014:	4b8d      	ldr	r3, [pc, #564]	; (800824c <interrupt_CH395+0x348>)
 8008016:	2201      	movs	r2, #1
 8008018:	701a      	strb	r2, [r3, #0]

			break;
 800801a:	e007      	b.n	800802c <interrupt_CH395+0x128>
		default:
			flag_CH395_ready = true;
 800801c:	4b8a      	ldr	r3, [pc, #552]	; (8008248 <interrupt_CH395+0x344>)
 800801e:	2201      	movs	r2, #1
 8008020:	701a      	strb	r2, [r3, #0]
			flag_PHY_reconn = false;
 8008022:	4b8a      	ldr	r3, [pc, #552]	; (800824c <interrupt_CH395+0x348>)
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
			break;
 8008028:	e000      	b.n	800802c <interrupt_CH395+0x128>
		}
	}
 800802a:	46c0      	nop			; (mov r8, r8)

	// get socket interrupt status
	glob_int_status >>= 4;
 800802c:	2164      	movs	r1, #100	; 0x64
 800802e:	187b      	adds	r3, r7, r1
 8008030:	187a      	adds	r2, r7, r1
 8008032:	8812      	ldrh	r2, [r2, #0]
 8008034:	0912      	lsrs	r2, r2, #4
 8008036:	801a      	strh	r2, [r3, #0]
	// exit if no socket event occured
	if (!glob_int_status)
 8008038:	187b      	adds	r3, r7, r1
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d100      	bne.n	8008042 <interrupt_CH395+0x13e>
 8008040:	e263      	b.n	800850a <interrupt_CH395+0x606>
		goto END_INT_CH395;
	// handle SOCKET events
	for (i = 1; (i < NUM_SOCKETS) && (glob_int_status > 0); ++i)
 8008042:	2367      	movs	r3, #103	; 0x67
 8008044:	18fb      	adds	r3, r7, r3
 8008046:	2201      	movs	r2, #1
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	e252      	b.n	80084f2 <interrupt_CH395+0x5ee>
	{
		glob_int_status >>= 1;
 800804c:	2164      	movs	r1, #100	; 0x64
 800804e:	187b      	adds	r3, r7, r1
 8008050:	187a      	adds	r2, r7, r1
 8008052:	8812      	ldrh	r2, [r2, #0]
 8008054:	0852      	lsrs	r2, r2, #1
 8008056:	801a      	strh	r2, [r3, #0]
		if (glob_int_status & 1) // the LSB of glob_int_status indicates SOCK#i interrupt status
 8008058:	187b      	adds	r3, r7, r1
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	2201      	movs	r2, #1
 800805e:	4013      	ands	r3, r2
 8008060:	d100      	bne.n	8008064 <interrupt_CH395+0x160>
 8008062:	e240      	b.n	80084e6 <interrupt_CH395+0x5e2>
		{
			sock_int_status = CH395GetSocketInt(i);
 8008064:	2556      	movs	r5, #86	; 0x56
 8008066:	197c      	adds	r4, r7, r5
 8008068:	2667      	movs	r6, #103	; 0x67
 800806a:	19bb      	adds	r3, r7, r6
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	0018      	movs	r0, r3
 8008070:	f7fc fea2 	bl	8004db8 <CH395GetSocketInt>
 8008074:	0003      	movs	r3, r0
 8008076:	7023      	strb	r3, [r4, #0]
			// CASE 1: Send buffer free
			if (sock_int_status & SINT_STAT_SENBUF_FREE)
 8008078:	197b      	adds	r3, r7, r5
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2201      	movs	r2, #1
 800807e:	4013      	ands	r3, r2
 8008080:	d00e      	beq.n	80080a0 <interrupt_CH395+0x19c>
			{
				ch395.TX_available |= (1 << i);
 8008082:	4b73      	ldr	r3, [pc, #460]	; (8008250 <interrupt_CH395+0x34c>)
 8008084:	7edb      	ldrb	r3, [r3, #27]
 8008086:	b2db      	uxtb	r3, r3
 8008088:	b25a      	sxtb	r2, r3
 800808a:	19bb      	adds	r3, r7, r6
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2101      	movs	r1, #1
 8008090:	4099      	lsls	r1, r3
 8008092:	000b      	movs	r3, r1
 8008094:	b25b      	sxtb	r3, r3
 8008096:	4313      	orrs	r3, r2
 8008098:	b25b      	sxtb	r3, r3
 800809a:	b2da      	uxtb	r2, r3
 800809c:	4b6c      	ldr	r3, [pc, #432]	; (8008250 <interrupt_CH395+0x34c>)
 800809e:	76da      	strb	r2, [r3, #27]
			}
			// CASE 2: data received on SOCK i
			if (sock_int_status & SINT_STAT_RECV)
 80080a0:	2356      	movs	r3, #86	; 0x56
 80080a2:	18fb      	adds	r3, r7, r3
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2204      	movs	r2, #4
 80080a8:	4013      	ands	r3, r2
 80080aa:	d100      	bne.n	80080ae <interrupt_CH395+0x1aa>
 80080ac:	e1b3      	b.n	8008416 <interrupt_CH395+0x512>
			{
				/*
				 * This section of code reads at most CH395_SIZE_BUFFER-1 bytes from PHY buffer
				 * and discards the rest of the received data
				 */
				HTTPRequestParseState *pS = parseStates + i - 1;
 80080ae:	2167      	movs	r1, #103	; 0x67
 80080b0:	187b      	adds	r3, r7, r1
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	22b0      	movs	r2, #176	; 0xb0
 80080b6:	4353      	muls	r3, r2
 80080b8:	3bb0      	subs	r3, #176	; 0xb0
 80080ba:	001a      	movs	r2, r3
 80080bc:	4b5d      	ldr	r3, [pc, #372]	; (8008234 <interrupt_CH395+0x330>)
 80080be:	18d3      	adds	r3, r2, r3
 80080c0:	653b      	str	r3, [r7, #80]	; 0x50
				uint16_t len = CH395GetRecvLength(i);
 80080c2:	2560      	movs	r5, #96	; 0x60
 80080c4:	197c      	adds	r4, r7, r5
 80080c6:	187b      	adds	r3, r7, r1
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	0018      	movs	r0, r3
 80080cc:	f7fc fd52 	bl	8004b74 <CH395GetRecvLength>
 80080d0:	0003      	movs	r3, r0
 80080d2:	8023      	strh	r3, [r4, #0]
				// WARNING: avoid multiple access to the CH395 buffer, not thread safe
				CH395GetRecvData(
 80080d4:	197b      	adds	r3, r7, r5
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	4a5e      	ldr	r2, [pc, #376]	; (8008254 <interrupt_CH395+0x350>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d904      	bls.n	80080e8 <interrupt_CH395+0x1e4>
						i,
						(len < CH395_SIZE_BUFFER - 1) ? (len) : (len = CH395_SIZE_BUFFER - 1),
 80080de:	197b      	adds	r3, r7, r5
 80080e0:	4a5d      	ldr	r2, [pc, #372]	; (8008258 <interrupt_CH395+0x354>)
 80080e2:	801a      	strh	r2, [r3, #0]
				CH395GetRecvData(
 80080e4:	4b5c      	ldr	r3, [pc, #368]	; (8008258 <interrupt_CH395+0x354>)
 80080e6:	e002      	b.n	80080ee <interrupt_CH395+0x1ea>
 80080e8:	2360      	movs	r3, #96	; 0x60
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	495b      	ldr	r1, [pc, #364]	; (800825c <interrupt_CH395+0x358>)
 80080f0:	2467      	movs	r4, #103	; 0x67
 80080f2:	193a      	adds	r2, r7, r4
 80080f4:	7810      	ldrb	r0, [r2, #0]
 80080f6:	000a      	movs	r2, r1
 80080f8:	0019      	movs	r1, r3
 80080fa:	f7fc fd87 	bl	8004c0c <CH395GetRecvData>
						(uint8_t*) ch395.buffer
							);
				ch395.buffer[len] = 0; // terminate the recved text stream
 80080fe:	2360      	movs	r3, #96	; 0x60
 8008100:	18fb      	adds	r3, r7, r3
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	4a52      	ldr	r2, [pc, #328]	; (8008250 <interrupt_CH395+0x34c>)
 8008106:	18d3      	adds	r3, r2, r3
 8008108:	2200      	movs	r2, #0
 800810a:	771a      	strb	r2, [r3, #28]
				/* Distinguish between different protocols
				 * Either HTTP,
				 * or TCP (for UART over IP gateway )
				 */
				switch (ch395.cfg.protocols[i])
 800810c:	193b      	adds	r3, r7, r4
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	4a4f      	ldr	r2, [pc, #316]	; (8008250 <interrupt_CH395+0x34c>)
 8008112:	18d3      	adds	r3, r2, r3
 8008114:	7c1b      	ldrb	r3, [r3, #16]
 8008116:	2b03      	cmp	r3, #3
 8008118:	d007      	beq.n	800812a <interrupt_CH395+0x226>
 800811a:	dd00      	ble.n	800811e <interrupt_CH395+0x21a>
 800811c:	e170      	b.n	8008400 <interrupt_CH395+0x4fc>
 800811e:	2b01      	cmp	r3, #1
 8008120:	d100      	bne.n	8008124 <interrupt_CH395+0x220>
 8008122:	e0a1      	b.n	8008268 <interrupt_CH395+0x364>
 8008124:	2b02      	cmp	r3, #2
 8008126:	d02f      	beq.n	8008188 <interrupt_CH395+0x284>
						}
					}

				default:
					// protocol not assigned to the socket
					break;
 8008128:	e16a      	b.n	8008400 <interrupt_CH395+0x4fc>
					resetHTTPParseState(pS);
 800812a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800812c:	0018      	movs	r0, r3
 800812e:	f7fd fb8f 	bl	8005850 <resetHTTPParseState>
					pS->sock_index = i;
 8008132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008134:	2467      	movs	r4, #103	; 0x67
 8008136:	193a      	adds	r2, r7, r4
 8008138:	21ad      	movs	r1, #173	; 0xad
 800813a:	7812      	ldrb	r2, [r2, #0]
 800813c:	545a      	strb	r2, [r3, r1]
					if (parse_http(pS, ch395.buffer))
 800813e:	4a47      	ldr	r2, [pc, #284]	; (800825c <interrupt_CH395+0x358>)
 8008140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008142:	0011      	movs	r1, r2
 8008144:	0018      	movs	r0, r3
 8008146:	f7fe fadf 	bl	8006708 <parse_http>
 800814a:	1e03      	subs	r3, r0, #0
 800814c:	d100      	bne.n	8008150 <interrupt_CH395+0x24c>
 800814e:	e159      	b.n	8008404 <interrupt_CH395+0x500>
						ch395.RX_received |= (1 << i); // mark received flag
 8008150:	4b3f      	ldr	r3, [pc, #252]	; (8008250 <interrupt_CH395+0x34c>)
 8008152:	7e5b      	ldrb	r3, [r3, #25]
 8008154:	b2db      	uxtb	r3, r3
 8008156:	b25a      	sxtb	r2, r3
 8008158:	0020      	movs	r0, r4
 800815a:	183b      	adds	r3, r7, r0
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	2101      	movs	r1, #1
 8008160:	4099      	lsls	r1, r3
 8008162:	000b      	movs	r3, r1
 8008164:	b25b      	sxtb	r3, r3
 8008166:	4313      	orrs	r3, r2
 8008168:	b25b      	sxtb	r3, r3
 800816a:	b2da      	uxtb	r2, r3
 800816c:	4b38      	ldr	r3, [pc, #224]	; (8008250 <interrupt_CH395+0x34c>)
 800816e:	765a      	strb	r2, [r3, #25]
						if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8008170:	4b37      	ldr	r3, [pc, #220]	; (8008250 <interrupt_CH395+0x34c>)
 8008172:	7e9b      	ldrb	r3, [r3, #26]
 8008174:	b25b      	sxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	db00      	blt.n	800817c <interrupt_CH395+0x278>
 800817a:	e143      	b.n	8008404 <interrupt_CH395+0x500>
							ch395.SOCK_responding = i;
 800817c:	183b      	adds	r3, r7, r0
 800817e:	2200      	movs	r2, #0
 8008180:	569a      	ldrsb	r2, [r3, r2]
 8008182:	4b33      	ldr	r3, [pc, #204]	; (8008250 <interrupt_CH395+0x34c>)
 8008184:	769a      	strb	r2, [r3, #26]
					break;
 8008186:	e13d      	b.n	8008404 <interrupt_CH395+0x500>
					resetHTTPParseState(pS);
 8008188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800818a:	0018      	movs	r0, r3
 800818c:	f7fd fb60 	bl	8005850 <resetHTTPParseState>
					pS->sock_index = i;
 8008190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008192:	2467      	movs	r4, #103	; 0x67
 8008194:	193a      	adds	r2, r7, r4
 8008196:	21ad      	movs	r1, #173	; 0xad
 8008198:	7812      	ldrb	r2, [r2, #0]
 800819a:	545a      	strb	r2, [r3, r1]
					if (execute_command_string(&CommandParser, ch395.buffer,len) >= 0)
 800819c:	2360      	movs	r3, #96	; 0x60
 800819e:	18fb      	adds	r3, r7, r3
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	492e      	ldr	r1, [pc, #184]	; (800825c <interrupt_CH395+0x358>)
 80081a4:	4b2e      	ldr	r3, [pc, #184]	; (8008260 <interrupt_CH395+0x35c>)
 80081a6:	0018      	movs	r0, r3
 80081a8:	f7ff fa6d 	bl	8007686 <execute_command_string>
 80081ac:	1e03      	subs	r3, r0, #0
 80081ae:	da00      	bge.n	80081b2 <interrupt_CH395+0x2ae>
 80081b0:	e12a      	b.n	8008408 <interrupt_CH395+0x504>
						if (CommandParser.hasResponse > 0)
 80081b2:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <interrupt_CH395+0x35c>)
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d100      	bne.n	80081be <interrupt_CH395+0x2ba>
 80081bc:	e124      	b.n	8008408 <interrupt_CH395+0x504>
							pS->ready = true;
 80081be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c0:	22ac      	movs	r2, #172	; 0xac
 80081c2:	2101      	movs	r1, #1
 80081c4:	5499      	strb	r1, [r3, r2]
							strncpy(pS->response_header, CommandParser.bufRet,
 80081c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081c8:	22a0      	movs	r2, #160	; 0xa0
 80081ca:	5898      	ldr	r0, [r3, r2]
									CommandParser.hasResponse);
 80081cc:	4b24      	ldr	r3, [pc, #144]	; (8008260 <interrupt_CH395+0x35c>)
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	b2db      	uxtb	r3, r3
							strncpy(pS->response_header, CommandParser.bufRet,
 80081d2:	001a      	movs	r2, r3
 80081d4:	4b23      	ldr	r3, [pc, #140]	; (8008264 <interrupt_CH395+0x360>)
 80081d6:	0019      	movs	r1, r3
 80081d8:	f000 ff09 	bl	8008fee <strncpy>
							pS->len_response_header = CommandParser.hasResponse;
 80081dc:	4b20      	ldr	r3, [pc, #128]	; (8008260 <interrupt_CH395+0x35c>)
 80081de:	785b      	ldrb	r3, [r3, #1]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	b299      	uxth	r1, r3
 80081e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e6:	229e      	movs	r2, #158	; 0x9e
 80081e8:	5299      	strh	r1, [r3, r2]
							pS->len_response_content_remain = 0;
 80081ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ec:	22a4      	movs	r2, #164	; 0xa4
 80081ee:	2100      	movs	r1, #0
 80081f0:	5299      	strh	r1, [r3, r2]
							pS->response_stage = RESPONSE_PREPARED;
 80081f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f4:	229c      	movs	r2, #156	; 0x9c
 80081f6:	2101      	movs	r1, #1
 80081f8:	5499      	strb	r1, [r3, r2]
							ch395.RX_received |= (1 << i);
 80081fa:	4b15      	ldr	r3, [pc, #84]	; (8008250 <interrupt_CH395+0x34c>)
 80081fc:	7e5b      	ldrb	r3, [r3, #25]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	b25a      	sxtb	r2, r3
 8008202:	193b      	adds	r3, r7, r4
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2101      	movs	r1, #1
 8008208:	4099      	lsls	r1, r3
 800820a:	000b      	movs	r3, r1
 800820c:	b25b      	sxtb	r3, r3
 800820e:	4313      	orrs	r3, r2
 8008210:	b25b      	sxtb	r3, r3
 8008212:	b2da      	uxtb	r2, r3
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <interrupt_CH395+0x34c>)
 8008216:	765a      	strb	r2, [r3, #25]
							if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 8008218:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <interrupt_CH395+0x34c>)
 800821a:	7e9b      	ldrb	r3, [r3, #26]
 800821c:	b25b      	sxtb	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	da04      	bge.n	800822c <interrupt_CH395+0x328>
								ch395.SOCK_responding = i;
 8008222:	193b      	adds	r3, r7, r4
 8008224:	2200      	movs	r2, #0
 8008226:	569a      	ldrsb	r2, [r3, r2]
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <interrupt_CH395+0x34c>)
 800822a:	769a      	strb	r2, [r3, #26]
							CommandParser.hasResponse = 0;
 800822c:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <interrupt_CH395+0x35c>)
 800822e:	2200      	movs	r2, #0
 8008230:	705a      	strb	r2, [r3, #1]
					break;
 8008232:	e0e9      	b.n	8008408 <interrupt_CH395+0x504>
 8008234:	20000778 	.word	0x20000778
 8008238:	20000d89 	.word	0x20000d89
 800823c:	20000d68 	.word	0x20000d68
 8008240:	20000d7c 	.word	0x20000d7c
 8008244:	20000698 	.word	0x20000698
 8008248:	20000d88 	.word	0x20000d88
 800824c:	20000d86 	.word	0x20000d86
 8008250:	20000010 	.word	0x20000010
 8008254:	000005fe 	.word	0x000005fe
 8008258:	000005ff 	.word	0x000005ff
 800825c:	2000002c 	.word	0x2000002c
 8008260:	200010a4 	.word	0x200010a4
 8008264:	200010a6 	.word	0x200010a6
					resetHTTPParseState(pS);
 8008268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800826a:	0018      	movs	r0, r3
 800826c:	f7fd faf0 	bl	8005850 <resetHTTPParseState>
					pS->sock_index = i;
 8008270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008272:	2467      	movs	r4, #103	; 0x67
 8008274:	193a      	adds	r2, r7, r4
 8008276:	21ad      	movs	r1, #173	; 0xad
 8008278:	7812      	ldrb	r2, [r2, #0]
 800827a:	545a      	strb	r2, [r3, r1]
					if(len > 8)
 800827c:	2360      	movs	r3, #96	; 0x60
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	2b08      	cmp	r3, #8
 8008284:	d800      	bhi.n	8008288 <interrupt_CH395+0x384>
 8008286:	e0bb      	b.n	8008400 <interrupt_CH395+0x4fc>
						uint16_t len_UDP_data = 0;
 8008288:	254e      	movs	r5, #78	; 0x4e
 800828a:	197b      	adds	r3, r7, r5
 800828c:	2200      	movs	r2, #0
 800828e:	801a      	strh	r2, [r3, #0]
						len_UDP_data = (uint16_t)(ch395.buffer[1] << 8) | (uint16_t)ch395.buffer[0]; // little-endian
 8008290:	4ba1      	ldr	r3, [pc, #644]	; (8008518 <interrupt_CH395+0x614>)
 8008292:	7f5b      	ldrb	r3, [r3, #29]
 8008294:	b29b      	uxth	r3, r3
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	b299      	uxth	r1, r3
 800829a:	4b9f      	ldr	r3, [pc, #636]	; (8008518 <interrupt_CH395+0x614>)
 800829c:	7f1b      	ldrb	r3, [r3, #28]
 800829e:	b29a      	uxth	r2, r3
 80082a0:	197b      	adds	r3, r7, r5
 80082a2:	430a      	orrs	r2, r1
 80082a4:	801a      	strh	r2, [r3, #0]
						port_dest_UDP = (uint16_t)(ch395.buffer[3] << 8) | (uint16_t)ch395.buffer[2];
 80082a6:	4b9c      	ldr	r3, [pc, #624]	; (8008518 <interrupt_CH395+0x614>)
 80082a8:	7fdb      	ldrb	r3, [r3, #31]
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	b299      	uxth	r1, r3
 80082b0:	4b99      	ldr	r3, [pc, #612]	; (8008518 <interrupt_CH395+0x614>)
 80082b2:	7f9b      	ldrb	r3, [r3, #30]
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	234c      	movs	r3, #76	; 0x4c
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	430a      	orrs	r2, r1
 80082bc:	801a      	strh	r2, [r3, #0]
						memcpy(IP_dst_UDP, ch395.buffer+4, 4);
 80082be:	4b97      	ldr	r3, [pc, #604]	; (800851c <interrupt_CH395+0x618>)
 80082c0:	222c      	movs	r2, #44	; 0x2c
 80082c2:	18ba      	adds	r2, r7, r2
 80082c4:	0010      	movs	r0, r2
 80082c6:	0019      	movs	r1, r3
 80082c8:	2304      	movs	r3, #4
 80082ca:	001a      	movs	r2, r3
 80082cc:	f000 fe34 	bl	8008f38 <memcpy>
						if((len_UDP_data - 8 >= LEN_USR_DETECTION_MSG) &&
 80082d0:	197b      	adds	r3, r7, r5
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	3b08      	subs	r3, #8
 80082d6:	2b27      	cmp	r3, #39	; 0x27
 80082d8:	d800      	bhi.n	80082dc <interrupt_CH395+0x3d8>
 80082da:	e091      	b.n	8008400 <interrupt_CH395+0x4fc>
								strncmp(ch395.buffer + 8, USR_DETECTION_MSG, LEN_USR_DETECTION_MSG) == 0)
 80082dc:	4b90      	ldr	r3, [pc, #576]	; (8008520 <interrupt_CH395+0x61c>)
 80082de:	4991      	ldr	r1, [pc, #580]	; (8008524 <interrupt_CH395+0x620>)
 80082e0:	2228      	movs	r2, #40	; 0x28
 80082e2:	0018      	movs	r0, r3
 80082e4:	f000 fe72 	bl	8008fcc <strncmp>
 80082e8:	1e03      	subs	r3, r0, #0
						if((len_UDP_data - 8 >= LEN_USR_DETECTION_MSG) &&
 80082ea:	d000      	beq.n	80082ee <interrupt_CH395+0x3ea>
 80082ec:	e088      	b.n	8008400 <interrupt_CH395+0x4fc>
							pS->ready = true;
 80082ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082f0:	22ac      	movs	r2, #172	; 0xac
 80082f2:	2101      	movs	r1, #1
 80082f4:	5499      	strb	r1, [r3, r2]
							USR_response_t USR = {
 80082f6:	1d3b      	adds	r3, r7, #4
 80082f8:	4a8b      	ldr	r2, [pc, #556]	; (8008528 <interrupt_CH395+0x624>)
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	1d3b      	adds	r3, r7, #4
 80082fe:	4a8b      	ldr	r2, [pc, #556]	; (800852c <interrupt_CH395+0x628>)
 8008300:	605a      	str	r2, [r3, #4]
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	4a8a      	ldr	r2, [pc, #552]	; (8008530 <interrupt_CH395+0x62c>)
 8008306:	609a      	str	r2, [r3, #8]
									.port_target = cfg.portTCP,
 8008308:	4b8a      	ldr	r3, [pc, #552]	; (8008534 <interrupt_CH395+0x630>)
 800830a:	226c      	movs	r2, #108	; 0x6c
 800830c:	5a9a      	ldrh	r2, [r3, r2]
							USR_response_t USR = {
 800830e:	1d3b      	adds	r3, r7, #4
 8008310:	819a      	strh	r2, [r3, #12]
 8008312:	1d3b      	adds	r3, r7, #4
 8008314:	4a88      	ldr	r2, [pc, #544]	; (8008538 <interrupt_CH395+0x634>)
 8008316:	611a      	str	r2, [r3, #16]
									.port_self = cfg.portTCP,
 8008318:	4b86      	ldr	r3, [pc, #536]	; (8008534 <interrupt_CH395+0x630>)
 800831a:	226c      	movs	r2, #108	; 0x6c
 800831c:	5a9a      	ldrh	r2, [r3, r2]
							USR_response_t USR = {
 800831e:	1d3b      	adds	r3, r7, #4
 8008320:	829a      	strh	r2, [r3, #20]
 8008322:	1d3b      	adds	r3, r7, #4
 8008324:	4a82      	ldr	r2, [pc, #520]	; (8008530 <interrupt_CH395+0x62c>)
 8008326:	619a      	str	r2, [r3, #24]
 8008328:	1d3b      	adds	r3, r7, #4
 800832a:	2203      	movs	r2, #3
 800832c:	771a      	strb	r2, [r3, #28]
 800832e:	1d3b      	adds	r3, r7, #4
 8008330:	22e1      	movs	r2, #225	; 0xe1
 8008332:	0252      	lsls	r2, r2, #9
 8008334:	621a      	str	r2, [r3, #32]
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	2224      	movs	r2, #36	; 0x24
 800833a:	2103      	movs	r1, #3
 800833c:	5499      	strb	r1, [r3, r2]
							len_UDP_data = (uint16_t)prepare_USR_response_msg(&USR, pS->response_header);
 800833e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008340:	22a0      	movs	r2, #160	; 0xa0
 8008342:	589a      	ldr	r2, [r3, r2]
 8008344:	1d3b      	adds	r3, r7, #4
 8008346:	0011      	movs	r1, r2
 8008348:	0018      	movs	r0, r3
 800834a:	f7fb ff2e 	bl	80041aa <prepare_USR_response_msg>
 800834e:	0002      	movs	r2, r0
 8008350:	197b      	adds	r3, r7, r5
 8008352:	801a      	strh	r2, [r3, #0]
							pS->len_response_header = len_UDP_data;
 8008354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008356:	197a      	adds	r2, r7, r5
 8008358:	219e      	movs	r1, #158	; 0x9e
 800835a:	8812      	ldrh	r2, [r2, #0]
 800835c:	525a      	strh	r2, [r3, r1]
							pS->len_response_content_remain = 0;
 800835e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008360:	22a4      	movs	r2, #164	; 0xa4
 8008362:	2100      	movs	r1, #0
 8008364:	5299      	strh	r1, [r3, r2]
							pS->response_stage = RESPONSE_PREPARED;
 8008366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008368:	229c      	movs	r2, #156	; 0x9c
 800836a:	2101      	movs	r1, #1
 800836c:	5499      	strb	r1, [r3, r2]
							ch395.socket_connected |= (1<<i); // UDP has no connection state, so mark it as always connected
 800836e:	4b6a      	ldr	r3, [pc, #424]	; (8008518 <interrupt_CH395+0x614>)
 8008370:	7e1b      	ldrb	r3, [r3, #24]
 8008372:	b2db      	uxtb	r3, r3
 8008374:	b25a      	sxtb	r2, r3
 8008376:	193b      	adds	r3, r7, r4
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	2101      	movs	r1, #1
 800837c:	4099      	lsls	r1, r3
 800837e:	000b      	movs	r3, r1
 8008380:	b25b      	sxtb	r3, r3
 8008382:	4313      	orrs	r3, r2
 8008384:	b25b      	sxtb	r3, r3
 8008386:	b2da      	uxtb	r2, r3
 8008388:	4b63      	ldr	r3, [pc, #396]	; (8008518 <interrupt_CH395+0x614>)
 800838a:	761a      	strb	r2, [r3, #24]
							ch395.TX_available |= (1 << i);
 800838c:	4b62      	ldr	r3, [pc, #392]	; (8008518 <interrupt_CH395+0x614>)
 800838e:	7edb      	ldrb	r3, [r3, #27]
 8008390:	b2db      	uxtb	r3, r3
 8008392:	b25a      	sxtb	r2, r3
 8008394:	193b      	adds	r3, r7, r4
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2101      	movs	r1, #1
 800839a:	4099      	lsls	r1, r3
 800839c:	000b      	movs	r3, r1
 800839e:	b25b      	sxtb	r3, r3
 80083a0:	4313      	orrs	r3, r2
 80083a2:	b25b      	sxtb	r3, r3
 80083a4:	b2da      	uxtb	r2, r3
 80083a6:	4b5c      	ldr	r3, [pc, #368]	; (8008518 <interrupt_CH395+0x614>)
 80083a8:	76da      	strb	r2, [r3, #27]
							ch395.RX_received |= (1 << i);
 80083aa:	4b5b      	ldr	r3, [pc, #364]	; (8008518 <interrupt_CH395+0x614>)
 80083ac:	7e5b      	ldrb	r3, [r3, #25]
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	b25a      	sxtb	r2, r3
 80083b2:	193b      	adds	r3, r7, r4
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2101      	movs	r1, #1
 80083b8:	4099      	lsls	r1, r3
 80083ba:	000b      	movs	r3, r1
 80083bc:	b25b      	sxtb	r3, r3
 80083be:	4313      	orrs	r3, r2
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	4b54      	ldr	r3, [pc, #336]	; (8008518 <interrupt_CH395+0x614>)
 80083c6:	765a      	strb	r2, [r3, #25]
							if (ch395.SOCK_responding < 0) // put this socket into responding slot if the slot is empty
 80083c8:	4b53      	ldr	r3, [pc, #332]	; (8008518 <interrupt_CH395+0x614>)
 80083ca:	7e9b      	ldrb	r3, [r3, #26]
 80083cc:	b25b      	sxtb	r3, r3
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da04      	bge.n	80083dc <interrupt_CH395+0x4d8>
								ch395.SOCK_responding = i;
 80083d2:	193b      	adds	r3, r7, r4
 80083d4:	2200      	movs	r2, #0
 80083d6:	569a      	ldrsb	r2, [r3, r2]
 80083d8:	4b4f      	ldr	r3, [pc, #316]	; (8008518 <interrupt_CH395+0x614>)
 80083da:	769a      	strb	r2, [r3, #26]
							CH395SetSocketDesIP(i, IP_dst_UDP);
 80083dc:	232c      	movs	r3, #44	; 0x2c
 80083de:	18fa      	adds	r2, r7, r3
 80083e0:	2467      	movs	r4, #103	; 0x67
 80083e2:	193b      	adds	r3, r7, r4
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	0011      	movs	r1, r2
 80083e8:	0018      	movs	r0, r3
 80083ea:	f7fc fa3b 	bl	8004864 <CH395SetSocketDesIP>
							CH395SetSocketDesPort(i, port_dest_UDP);
 80083ee:	234c      	movs	r3, #76	; 0x4c
 80083f0:	18fb      	adds	r3, r7, r3
 80083f2:	881a      	ldrh	r2, [r3, #0]
 80083f4:	193b      	adds	r3, r7, r4
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	0011      	movs	r1, r2
 80083fa:	0018      	movs	r0, r3
 80083fc:	f7fc fa90 	bl	8004920 <CH395SetSocketDesPort>
					break;
 8008400:	46c0      	nop			; (mov r8, r8)
 8008402:	e002      	b.n	800840a <interrupt_CH395+0x506>
					break;
 8008404:	46c0      	nop			; (mov r8, r8)
 8008406:	e000      	b.n	800840a <interrupt_CH395+0x506>
					break;
 8008408:	46c0      	nop			; (mov r8, r8)
				}
				CH395ClearRecvBuf(i);
 800840a:	2367      	movs	r3, #103	; 0x67
 800840c:	18fb      	adds	r3, r7, r3
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	0018      	movs	r0, r3
 8008412:	f7fc fbdf 	bl	8004bd4 <CH395ClearRecvBuf>
			}
			// CASE 3: SOCK i connected
			if (sock_int_status & SINT_STAT_CONNECT)
 8008416:	2356      	movs	r3, #86	; 0x56
 8008418:	18fb      	adds	r3, r7, r3
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	2208      	movs	r2, #8
 800841e:	4013      	ands	r3, r2
 8008420:	d01e      	beq.n	8008460 <interrupt_CH395+0x55c>
			{
				ch395.socket_connected |= (1 << i);
 8008422:	4b3d      	ldr	r3, [pc, #244]	; (8008518 <interrupt_CH395+0x614>)
 8008424:	7e1b      	ldrb	r3, [r3, #24]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	b25a      	sxtb	r2, r3
 800842a:	2067      	movs	r0, #103	; 0x67
 800842c:	183b      	adds	r3, r7, r0
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2101      	movs	r1, #1
 8008432:	4099      	lsls	r1, r3
 8008434:	000b      	movs	r3, r1
 8008436:	b25b      	sxtb	r3, r3
 8008438:	4313      	orrs	r3, r2
 800843a:	b25b      	sxtb	r3, r3
 800843c:	b2da      	uxtb	r2, r3
 800843e:	4b36      	ldr	r3, [pc, #216]	; (8008518 <interrupt_CH395+0x614>)
 8008440:	761a      	strb	r2, [r3, #24]
				ch395.TX_available |= (1 << i);
 8008442:	4b35      	ldr	r3, [pc, #212]	; (8008518 <interrupt_CH395+0x614>)
 8008444:	7edb      	ldrb	r3, [r3, #27]
 8008446:	b2db      	uxtb	r3, r3
 8008448:	b25a      	sxtb	r2, r3
 800844a:	183b      	adds	r3, r7, r0
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2101      	movs	r1, #1
 8008450:	4099      	lsls	r1, r3
 8008452:	000b      	movs	r3, r1
 8008454:	b25b      	sxtb	r3, r3
 8008456:	4313      	orrs	r3, r2
 8008458:	b25b      	sxtb	r3, r3
 800845a:	b2da      	uxtb	r2, r3
 800845c:	4b2e      	ldr	r3, [pc, #184]	; (8008518 <interrupt_CH395+0x614>)
 800845e:	76da      	strb	r2, [r3, #27]
			}
			// CASE 4: SOCK i disconnected
			if (sock_int_status & SINT_STAT_DISCONNECT) // SOCK i disconnected
 8008460:	2356      	movs	r3, #86	; 0x56
 8008462:	18fb      	adds	r3, r7, r3
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	2210      	movs	r2, #16
 8008468:	4013      	ands	r3, r2
 800846a:	d03c      	beq.n	80084e6 <interrupt_CH395+0x5e2>
			{
				ch395.socket_connected &= ~(1 << i);
 800846c:	4b2a      	ldr	r3, [pc, #168]	; (8008518 <interrupt_CH395+0x614>)
 800846e:	7e1b      	ldrb	r3, [r3, #24]
 8008470:	b2db      	uxtb	r3, r3
 8008472:	b25b      	sxtb	r3, r3
 8008474:	2067      	movs	r0, #103	; 0x67
 8008476:	183a      	adds	r2, r7, r0
 8008478:	7812      	ldrb	r2, [r2, #0]
 800847a:	2101      	movs	r1, #1
 800847c:	4091      	lsls	r1, r2
 800847e:	000a      	movs	r2, r1
 8008480:	b252      	sxtb	r2, r2
 8008482:	43d2      	mvns	r2, r2
 8008484:	b252      	sxtb	r2, r2
 8008486:	4013      	ands	r3, r2
 8008488:	b25b      	sxtb	r3, r3
 800848a:	b2da      	uxtb	r2, r3
 800848c:	4b22      	ldr	r3, [pc, #136]	; (8008518 <interrupt_CH395+0x614>)
 800848e:	761a      	strb	r2, [r3, #24]
				ch395.RX_received &= ~(1 << i);
 8008490:	4b21      	ldr	r3, [pc, #132]	; (8008518 <interrupt_CH395+0x614>)
 8008492:	7e5b      	ldrb	r3, [r3, #25]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	b25b      	sxtb	r3, r3
 8008498:	183a      	adds	r2, r7, r0
 800849a:	7812      	ldrb	r2, [r2, #0]
 800849c:	2101      	movs	r1, #1
 800849e:	4091      	lsls	r1, r2
 80084a0:	000a      	movs	r2, r1
 80084a2:	b252      	sxtb	r2, r2
 80084a4:	43d2      	mvns	r2, r2
 80084a6:	b252      	sxtb	r2, r2
 80084a8:	4013      	ands	r3, r2
 80084aa:	b25b      	sxtb	r3, r3
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	4b1a      	ldr	r3, [pc, #104]	; (8008518 <interrupt_CH395+0x614>)
 80084b0:	765a      	strb	r2, [r3, #25]
				ch395.TX_available |= (1 << i);
 80084b2:	4b19      	ldr	r3, [pc, #100]	; (8008518 <interrupt_CH395+0x614>)
 80084b4:	7edb      	ldrb	r3, [r3, #27]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	b25a      	sxtb	r2, r3
 80084ba:	183b      	adds	r3, r7, r0
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	2101      	movs	r1, #1
 80084c0:	4099      	lsls	r1, r3
 80084c2:	000b      	movs	r3, r1
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b25b      	sxtb	r3, r3
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	4b12      	ldr	r3, [pc, #72]	; (8008518 <interrupt_CH395+0x614>)
 80084ce:	76da      	strb	r2, [r3, #27]
				if (ch395.SOCK_responding == i)
 80084d0:	4b11      	ldr	r3, [pc, #68]	; (8008518 <interrupt_CH395+0x614>)
 80084d2:	7e9b      	ldrb	r3, [r3, #26]
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	001a      	movs	r2, r3
 80084d8:	183b      	adds	r3, r7, r0
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d102      	bne.n	80084e6 <interrupt_CH395+0x5e2>
					ch395.SOCK_responding = -1; // release the responding socket flag
 80084e0:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <interrupt_CH395+0x614>)
 80084e2:	22ff      	movs	r2, #255	; 0xff
 80084e4:	769a      	strb	r2, [r3, #26]
	for (i = 1; (i < NUM_SOCKETS) && (glob_int_status > 0); ++i)
 80084e6:	2267      	movs	r2, #103	; 0x67
 80084e8:	18bb      	adds	r3, r7, r2
 80084ea:	18ba      	adds	r2, r7, r2
 80084ec:	7812      	ldrb	r2, [r2, #0]
 80084ee:	3201      	adds	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
 80084f2:	2367      	movs	r3, #103	; 0x67
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b07      	cmp	r3, #7
 80084fa:	d808      	bhi.n	800850e <interrupt_CH395+0x60a>
 80084fc:	2364      	movs	r3, #100	; 0x64
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d000      	beq.n	8008508 <interrupt_CH395+0x604>
 8008506:	e5a1      	b.n	800804c <interrupt_CH395+0x148>
			}
		}
	}
END_INT_CH395:
 8008508:	e001      	b.n	800850e <interrupt_CH395+0x60a>
		goto END_INT_CH395;
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	e000      	b.n	8008510 <interrupt_CH395+0x60c>
END_INT_CH395:
 800850e:	46c0      	nop			; (mov r8, r8)
	return;
 8008510:	46c0      	nop			; (mov r8, r8)
}
 8008512:	46bd      	mov	sp, r7
 8008514:	b01b      	add	sp, #108	; 0x6c
 8008516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008518:	20000010 	.word	0x20000010
 800851c:	20000030 	.word	0x20000030
 8008520:	20000034 	.word	0x20000034
 8008524:	08009414 	.word	0x08009414
 8008528:	20000d80 	.word	0x20000d80
 800852c:	20000698 	.word	0x20000698
 8008530:	20000d7c 	.word	0x20000d7c
 8008534:	20000d90 	.word	0x20000d90
 8008538:	20000d68 	.word	0x20000d68

0800853c <check_conflict>:


static bool check_conflict(uint8_t *antnums, uint8_t n)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b086      	sub	sp, #24
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	000a      	movs	r2, r1
 8008546:	1cfb      	adds	r3, r7, #3
 8008548:	701a      	strb	r2, [r3, #0]
	bool conflict = false;
 800854a:	2317      	movs	r3, #23
 800854c:	18fb      	adds	r3, r7, r3
 800854e:	2200      	movs	r2, #0
 8008550:	701a      	strb	r2, [r3, #0]
	uint32_t detector = 0;
 8008552:	2300      	movs	r3, #0
 8008554:	613b      	str	r3, [r7, #16]
	for(uint8_t i= 0; i < n; ++i)
 8008556:	230f      	movs	r3, #15
 8008558:	18fb      	adds	r3, r7, r3
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e032      	b.n	80085c6 <check_conflict+0x8a>
	{
		uint8_t sel = antnums[i];
 8008560:	200f      	movs	r0, #15
 8008562:	183b      	adds	r3, r7, r0
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	18d2      	adds	r2, r2, r3
 800856a:	210e      	movs	r1, #14
 800856c:	187b      	adds	r3, r7, r1
 800856e:	7812      	ldrb	r2, [r2, #0]
 8008570:	701a      	strb	r2, [r3, #0]
		// replace 0xff by current selected antnum,
		if(sel == 0xff)
 8008572:	187b      	adds	r3, r7, r1
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d10b      	bne.n	8008592 <check_conflict+0x56>
			sel = Selector[i].sel;
 800857a:	183b      	adds	r3, r7, r0
 800857c:	781a      	ldrb	r2, [r3, #0]
 800857e:	1879      	adds	r1, r7, r1
 8008580:	4818      	ldr	r0, [pc, #96]	; (80085e4 <check_conflict+0xa8>)
 8008582:	0013      	movs	r3, r2
 8008584:	00db      	lsls	r3, r3, #3
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	18c3      	adds	r3, r0, r3
 800858c:	3318      	adds	r3, #24
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	700b      	strb	r3, [r1, #0]

		uint32_t mask = 1U << sel; // cannot exceed 31
 8008592:	230e      	movs	r3, #14
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2201      	movs	r2, #1
 800859a:	409a      	lsls	r2, r3
 800859c:	0013      	movs	r3, r2
 800859e:	60bb      	str	r3, [r7, #8]
		// already set to 1, means conflict
		if((detector & mask) != 0U)
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	4013      	ands	r3, r2
 80085a6:	d004      	beq.n	80085b2 <check_conflict+0x76>
		{
			conflict =true;
 80085a8:	2317      	movs	r3, #23
 80085aa:	18fb      	adds	r3, r7, r3
 80085ac:	2201      	movs	r2, #1
 80085ae:	701a      	strb	r2, [r3, #0]
			break;
 80085b0:	e010      	b.n	80085d4 <check_conflict+0x98>
		}
		detector |= mask;
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
	for(uint8_t i= 0; i < n; ++i)
 80085ba:	220f      	movs	r2, #15
 80085bc:	18bb      	adds	r3, r7, r2
 80085be:	18ba      	adds	r2, r7, r2
 80085c0:	7812      	ldrb	r2, [r2, #0]
 80085c2:	3201      	adds	r2, #1
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	230f      	movs	r3, #15
 80085c8:	18fa      	adds	r2, r7, r3
 80085ca:	1cfb      	adds	r3, r7, #3
 80085cc:	7812      	ldrb	r2, [r2, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d3c5      	bcc.n	8008560 <check_conflict+0x24>
	}
	return conflict;
 80085d4:	2317      	movs	r3, #23
 80085d6:	18fb      	adds	r3, r7, r3
 80085d8:	781b      	ldrb	r3, [r3, #0]
}
 80085da:	0018      	movs	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	b006      	add	sp, #24
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	20001114 	.word	0x20001114

080085e8 <switch_Antenna>:

// @params:
// @antnums: array of selecte ant numbers.
// For display IP: When set to NULL, write output pins only and leave all state variables unchanged.
int8_t switch_Antenna(uint8_t *antnums, uint8_t n)
{
 80085e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	000a      	movs	r2, r1
 80085f2:	1cfb      	adds	r3, r7, #3
 80085f4:	701a      	strb	r2, [r3, #0]
	int8_t r = 0;
 80085f6:	2417      	movs	r4, #23
 80085f8:	193b      	adds	r3, r7, r4
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
	// when antnums is NULL, just keep the state of each selector and update output pins
	uint8_t i;

	// check conflict
	if(check_conflict(antnums, n))
 80085fe:	1cfb      	adds	r3, r7, #3
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	0011      	movs	r1, r2
 8008606:	0018      	movs	r0, r3
 8008608:	f7ff ff98 	bl	800853c <check_conflict>
 800860c:	1e03      	subs	r3, r0, #0
 800860e:	d003      	beq.n	8008618 <switch_Antenna+0x30>
	{
		r = -1; // conflict
 8008610:	193b      	adds	r3, r7, r4
 8008612:	22ff      	movs	r2, #255	; 0xff
 8008614:	701a      	strb	r2, [r3, #0]
		goto EXIT_SWITCH_ANTENNA;
 8008616:	e099      	b.n	800874c <switch_Antenna+0x164>
	}

	uint8_t vNew;
	for (i = 0; i < MIN(n, N_SELECTORS); ++i)
 8008618:	2316      	movs	r3, #22
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
 8008620:	e086      	b.n	8008730 <switch_Antenna+0x148>
	{
		// parse input
		if(antnums)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d009      	beq.n	800863c <switch_Antenna+0x54>
		{

			vNew = antnums[i];
 8008628:	2316      	movs	r3, #22
 800862a:	18fb      	adds	r3, r7, r3
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	18d2      	adds	r2, r2, r3
 8008632:	2315      	movs	r3, #21
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	7812      	ldrb	r2, [r2, #0]
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	e00d      	b.n	8008658 <switch_Antenna+0x70>
		}
		else // resume previous results before displaying IP
		{
			vNew = Selector[i].sel;
 800863c:	2316      	movs	r3, #22
 800863e:	18fb      	adds	r3, r7, r3
 8008640:	781a      	ldrb	r2, [r3, #0]
 8008642:	2315      	movs	r3, #21
 8008644:	18f9      	adds	r1, r7, r3
 8008646:	4845      	ldr	r0, [pc, #276]	; (800875c <switch_Antenna+0x174>)
 8008648:	0013      	movs	r3, r2
 800864a:	00db      	lsls	r3, r3, #3
 800864c:	1a9b      	subs	r3, r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	18c3      	adds	r3, r0, r3
 8008652:	3318      	adds	r3, #24
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	700b      	strb	r3, [r1, #0]
		}

		// write pins
		Selector[i].sel = vNew;
 8008658:	2016      	movs	r0, #22
 800865a:	183b      	adds	r3, r7, r0
 800865c:	781a      	ldrb	r2, [r3, #0]
 800865e:	493f      	ldr	r1, [pc, #252]	; (800875c <switch_Antenna+0x174>)
 8008660:	0013      	movs	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	18cb      	adds	r3, r1, r3
 800866a:	3318      	adds	r3, #24
 800866c:	2215      	movs	r2, #21
 800866e:	18ba      	adds	r2, r7, r2
 8008670:	7812      	ldrb	r2, [r2, #0]
 8008672:	701a      	strb	r2, [r3, #0]
		uint8_t val = ~Selector[i].sel;
 8008674:	183b      	adds	r3, r7, r0
 8008676:	781a      	ldrb	r2, [r3, #0]
 8008678:	4938      	ldr	r1, [pc, #224]	; (800875c <switch_Antenna+0x174>)
 800867a:	0013      	movs	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	18cb      	adds	r3, r1, r3
 8008684:	3318      	adds	r3, #24
 8008686:	781a      	ldrb	r2, [r3, #0]
 8008688:	2313      	movs	r3, #19
 800868a:	18fb      	adds	r3, r7, r3
 800868c:	43d2      	mvns	r2, r2
 800868e:	701a      	strb	r2, [r3, #0]
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8008690:	2314      	movs	r3, #20
 8008692:	18fb      	adds	r3, r7, r3
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]
 8008698:	e029      	b.n	80086ee <switch_Antenna+0x106>
		{

			PIN_typedef pin = Selector[i].PIN_BCDs[iBCD];
 800869a:	2316      	movs	r3, #22
 800869c:	18fb      	adds	r3, r7, r3
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	2514      	movs	r5, #20
 80086a2:	197b      	adds	r3, r7, r5
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	2608      	movs	r6, #8
 80086a8:	19bc      	adds	r4, r7, r6
 80086aa:	492c      	ldr	r1, [pc, #176]	; (800875c <switch_Antenna+0x174>)
 80086ac:	00d8      	lsls	r0, r3, #3
 80086ae:	0013      	movs	r3, r2
 80086b0:	00db      	lsls	r3, r3, #3
 80086b2:	1a9b      	subs	r3, r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	18c3      	adds	r3, r0, r3
 80086b8:	0022      	movs	r2, r4
 80086ba:	18cb      	adds	r3, r1, r3
 80086bc:	cb03      	ldmia	r3!, {r0, r1}
 80086be:	c203      	stmia	r2!, {r0, r1}
			HAL_GPIO_WritePin(pin.group, pin.pin, (val >> iBCD) & 0x01);
 80086c0:	19bb      	adds	r3, r7, r6
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	19bb      	adds	r3, r7, r6
 80086c6:	8899      	ldrh	r1, [r3, #4]
 80086c8:	2313      	movs	r3, #19
 80086ca:	18fb      	adds	r3, r7, r3
 80086cc:	781a      	ldrb	r2, [r3, #0]
 80086ce:	197b      	adds	r3, r7, r5
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	411a      	asrs	r2, r3
 80086d4:	0013      	movs	r3, r2
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	2201      	movs	r2, #1
 80086da:	4013      	ands	r3, r2
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	001a      	movs	r2, r3
 80086e0:	f7f8 fe3d 	bl	800135e <HAL_GPIO_WritePin>
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 80086e4:	197b      	adds	r3, r7, r5
 80086e6:	197a      	adds	r2, r7, r5
 80086e8:	7812      	ldrb	r2, [r2, #0]
 80086ea:	3201      	adds	r2, #1
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	2314      	movs	r3, #20
 80086f0:	18fb      	adds	r3, r7, r3
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d9d0      	bls.n	800869a <switch_Antenna+0xb2>
		}

		// store configurations
		if(antnums)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d012      	beq.n	8008724 <switch_Antenna+0x13c>
		{
			cfg.nRadioToAntNums[i] = Selector[i].sel;
 80086fe:	2116      	movs	r1, #22
 8008700:	187b      	adds	r3, r7, r1
 8008702:	781a      	ldrb	r2, [r3, #0]
 8008704:	187b      	adds	r3, r7, r1
 8008706:	7819      	ldrb	r1, [r3, #0]
 8008708:	4814      	ldr	r0, [pc, #80]	; (800875c <switch_Antenna+0x174>)
 800870a:	0013      	movs	r3, r2
 800870c:	00db      	lsls	r3, r3, #3
 800870e:	1a9b      	subs	r3, r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	18c3      	adds	r3, r0, r3
 8008714:	3318      	adds	r3, #24
 8008716:	781a      	ldrb	r2, [r3, #0]
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <switch_Antenna+0x178>)
 800871a:	185b      	adds	r3, r3, r1
 800871c:	721a      	strb	r2, [r3, #8]
			isModified = true;
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <switch_Antenna+0x17c>)
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MIN(n, N_SELECTORS); ++i)
 8008724:	2216      	movs	r2, #22
 8008726:	18bb      	adds	r3, r7, r2
 8008728:	18ba      	adds	r2, r7, r2
 800872a:	7812      	ldrb	r2, [r2, #0]
 800872c:	3201      	adds	r2, #1
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	1cfb      	adds	r3, r7, #3
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	b2da      	uxtb	r2, r3
 8008736:	2a02      	cmp	r2, #2
 8008738:	d900      	bls.n	800873c <switch_Antenna+0x154>
 800873a:	2302      	movs	r3, #2
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2216      	movs	r2, #22
 8008740:	18ba      	adds	r2, r7, r2
 8008742:	7812      	ldrb	r2, [r2, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d200      	bcs.n	800874a <switch_Antenna+0x162>
 8008748:	e76b      	b.n	8008622 <switch_Antenna+0x3a>
		}

	}
EXIT_SWITCH_ANTENNA:
 800874a:	46c0      	nop			; (mov r8, r8)
	return r;
 800874c:	2317      	movs	r3, #23
 800874e:	18fb      	adds	r3, r7, r3
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	b25b      	sxtb	r3, r3
}
 8008754:	0018      	movs	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	b007      	add	sp, #28
 800875a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800875c:	20001114 	.word	0x20001114
 8008760:	20000d90 	.word	0x20000d90
 8008764:	200006c4 	.word	0x200006c4

08008768 <get_Antenna_real_BCDs>:


void get_Antenna_real_BCDs(uint8_t *antnums, uint8_t n) //3-0:SEL1[2:0] 7-4:SEL2[2:0] GPIOs are Low Effective
{
 8008768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	000a      	movs	r2, r1
 8008772:	1cfb      	adds	r3, r7, #3
 8008774:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MIN(n, N_SELECTORS); ++i)
 8008776:	230f      	movs	r3, #15
 8008778:	18fb      	adds	r3, r7, r3
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	e052      	b.n	8008826 <get_Antenna_real_BCDs+0xbe>
	{
		uint8_t res = 0;
 8008780:	230e      	movs	r3, #14
 8008782:	18fb      	adds	r3, r7, r3
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
		res |= ((d >> BCDM1_2) & 1) << 2;// bit 2: BCDM1_2
		res |= ((d >> BCDM2_0) & 1) << 4;// bit 0: BCDM2_0
		res |= ((d >> BCDM2_1) & 1) << 5;// bit 1: BCDM1_1
		res |= ((d >> BCDM2_2) & 1) << 6;// bit 2: BCDM1_1
#else
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 8008788:	230d      	movs	r3, #13
 800878a:	18fb      	adds	r3, r7, r3
 800878c:	2200      	movs	r2, #0
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e036      	b.n	8008800 <get_Antenna_real_BCDs+0x98>
		{
			res |= (((!HAL_GPIO_ReadPin(SelectorM[i].PIN_BCDs[iBCD].group,
 8008792:	260f      	movs	r6, #15
 8008794:	19bb      	adds	r3, r7, r6
 8008796:	781a      	ldrb	r2, [r3, #0]
 8008798:	250d      	movs	r5, #13
 800879a:	197b      	adds	r3, r7, r5
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	492a      	ldr	r1, [pc, #168]	; (8008848 <get_Antenna_real_BCDs+0xe0>)
 80087a0:	00d8      	lsls	r0, r3, #3
 80087a2:	0013      	movs	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	18c3      	adds	r3, r0, r3
 80087ac:	585c      	ldr	r4, [r3, r1]
 80087ae:	19bb      	adds	r3, r7, r6
 80087b0:	781a      	ldrb	r2, [r3, #0]
 80087b2:	197b      	adds	r3, r7, r5
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	4924      	ldr	r1, [pc, #144]	; (8008848 <get_Antenna_real_BCDs+0xe0>)
 80087b8:	00d8      	lsls	r0, r3, #3
 80087ba:	0013      	movs	r3, r2
 80087bc:	00db      	lsls	r3, r3, #3
 80087be:	1a9b      	subs	r3, r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	18c3      	adds	r3, r0, r3
 80087c4:	18cb      	adds	r3, r1, r3
 80087c6:	3304      	adds	r3, #4
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	0019      	movs	r1, r3
 80087cc:	0020      	movs	r0, r4
 80087ce:	f7f8 fda9 	bl	8001324 <HAL_GPIO_ReadPin>
 80087d2:	0003      	movs	r3, r0
					SelectorM[i].PIN_BCDs[iBCD].pin)) & 0x01) << iBCD); // BCDM1[0]
 80087d4:	425a      	negs	r2, r3
 80087d6:	4153      	adcs	r3, r2
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	001a      	movs	r2, r3
 80087dc:	197b      	adds	r3, r7, r5
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	409a      	lsls	r2, r3
 80087e2:	0013      	movs	r3, r2
			res |= (((!HAL_GPIO_ReadPin(SelectorM[i].PIN_BCDs[iBCD].group,
 80087e4:	b25a      	sxtb	r2, r3
 80087e6:	210e      	movs	r1, #14
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	b25b      	sxtb	r3, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	b25a      	sxtb	r2, r3
 80087f2:	187b      	adds	r3, r7, r1
 80087f4:	701a      	strb	r2, [r3, #0]
		for (uint8_t iBCD = 0; iBCD < N_BCD_PINS; ++iBCD)
 80087f6:	197b      	adds	r3, r7, r5
 80087f8:	197a      	adds	r2, r7, r5
 80087fa:	7812      	ldrb	r2, [r2, #0]
 80087fc:	3201      	adds	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	230d      	movs	r3, #13
 8008802:	18fb      	adds	r3, r7, r3
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d9c3      	bls.n	8008792 <get_Antenna_real_BCDs+0x2a>
		}
#endif
		antnums[i] = res;
 800880a:	210f      	movs	r1, #15
 800880c:	187b      	adds	r3, r7, r1
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	18d3      	adds	r3, r2, r3
 8008814:	220e      	movs	r2, #14
 8008816:	18ba      	adds	r2, r7, r2
 8008818:	7812      	ldrb	r2, [r2, #0]
 800881a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < MIN(n, N_SELECTORS); ++i)
 800881c:	187b      	adds	r3, r7, r1
 800881e:	187a      	adds	r2, r7, r1
 8008820:	7812      	ldrb	r2, [r2, #0]
 8008822:	3201      	adds	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	1cfb      	adds	r3, r7, #3
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	2a02      	cmp	r2, #2
 800882e:	d900      	bls.n	8008832 <get_Antenna_real_BCDs+0xca>
 8008830:	2302      	movs	r3, #2
 8008832:	b2db      	uxtb	r3, r3
 8008834:	220f      	movs	r2, #15
 8008836:	18ba      	adds	r2, r7, r2
 8008838:	7812      	ldrb	r2, [r2, #0]
 800883a:	429a      	cmp	r2, r3
 800883c:	d3a0      	bcc.n	8008780 <get_Antenna_real_BCDs+0x18>
	}

}
 800883e:	46c0      	nop			; (mov r8, r8)
 8008840:	46c0      	nop			; (mov r8, r8)
 8008842:	46bd      	mov	sp, r7
 8008844:	b005      	add	sp, #20
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008848:	2000123c 	.word	0x2000123c

0800884c <display_IP>:

/* Display IP functions BEGIN */

// USE BCD1_0, BCD1_1, BCD1_2, BCD2_0 for transferring "0~9" and "-" digits
void display_IP(bool start)
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	0002      	movs	r2, r0
 8008854:	1dfb      	adds	r3, r7, #7
 8008856:	701a      	strb	r2, [r3, #0]
	if (start) // start == true, start the timer
 8008858:	1dfb      	adds	r3, r7, #7
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d04b      	beq.n	80088f8 <display_IP+0xac>
	{
		idxDisplayIP = 0;
 8008860:	4b2d      	ldr	r3, [pc, #180]	; (8008918 <display_IP+0xcc>)
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]

		//  HAL_GPIO_WritePin(XDISPLAY_GPIO_Port, XDISPLAY_Pin, 0);
		// turn off display
		uint8_t d = ~(0x0e);
 8008866:	240f      	movs	r4, #15
 8008868:	193b      	adds	r3, r7, r4
 800886a:	22f1      	movs	r2, #241	; 0xf1
 800886c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <display_IP+0xd0>)
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	4b2a      	ldr	r3, [pc, #168]	; (800891c <display_IP+0xd0>)
 8008874:	8899      	ldrh	r1, [r3, #4]
				Selector[0].PIN_BCDs[0].pin, d & 0x01);
 8008876:	193b      	adds	r3, r7, r4
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2201      	movs	r2, #1
 800887c:	4013      	ands	r3, r2
 800887e:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8008880:	001a      	movs	r2, r3
 8008882:	f7f8 fd6c 	bl	800135e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8008886:	4b25      	ldr	r3, [pc, #148]	; (800891c <display_IP+0xd0>)
 8008888:	6898      	ldr	r0, [r3, #8]
 800888a:	4b24      	ldr	r3, [pc, #144]	; (800891c <display_IP+0xd0>)
 800888c:	8999      	ldrh	r1, [r3, #12]
 800888e:	193b      	adds	r3, r7, r4
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	085b      	lsrs	r3, r3, #1
 8008894:	b2db      	uxtb	r3, r3
				Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 8008896:	2201      	movs	r2, #1
 8008898:	4013      	ands	r3, r2
 800889a:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 800889c:	001a      	movs	r2, r3
 800889e:	f7f8 fd5e 	bl	800135e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 80088a2:	4b1e      	ldr	r3, [pc, #120]	; (800891c <display_IP+0xd0>)
 80088a4:	6918      	ldr	r0, [r3, #16]
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <display_IP+0xd0>)
 80088a8:	8a99      	ldrh	r1, [r3, #20]
 80088aa:	193b      	adds	r3, r7, r4
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	089b      	lsrs	r3, r3, #2
 80088b0:	b2db      	uxtb	r3, r3
				Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 80088b2:	2201      	movs	r2, #1
 80088b4:	4013      	ands	r3, r2
 80088b6:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 80088b8:	001a      	movs	r2, r3
 80088ba:	f7f8 fd50 	bl	800135e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 80088be:	4b17      	ldr	r3, [pc, #92]	; (800891c <display_IP+0xd0>)
 80088c0:	69d8      	ldr	r0, [r3, #28]
 80088c2:	4b16      	ldr	r3, [pc, #88]	; (800891c <display_IP+0xd0>)
 80088c4:	8c19      	ldrh	r1, [r3, #32]
 80088c6:	193b      	adds	r3, r7, r4
 80088c8:	781b      	ldrb	r3, [r3, #0]
 80088ca:	08db      	lsrs	r3, r3, #3
 80088cc:	b2db      	uxtb	r3, r3
				Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 80088ce:	2201      	movs	r2, #1
 80088d0:	4013      	ands	r3, r2
 80088d2:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 80088d4:	001a      	movs	r2, r3
 80088d6:	f7f8 fd42 	bl	800135e <HAL_GPIO_WritePin>

		// transform IP to string, and get the length of the string
		lenDisplayIP = IPv4_to_s(sIP_dec ,IP);
 80088da:	4a11      	ldr	r2, [pc, #68]	; (8008920 <display_IP+0xd4>)
 80088dc:	4b11      	ldr	r3, [pc, #68]	; (8008924 <display_IP+0xd8>)
 80088de:	0011      	movs	r1, r2
 80088e0:	0018      	movs	r0, r3
 80088e2:	f7fe fa3b 	bl	8006d5c <IPv4_to_s>
 80088e6:	0003      	movs	r3, r0
 80088e8:	001a      	movs	r2, r3
 80088ea:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <display_IP+0xdc>)
 80088ec:	701a      	strb	r2, [r3, #0]
		// start the timer
		HAL_TIM_Base_Start_IT(&htim6);
 80088ee:	4b0f      	ldr	r3, [pc, #60]	; (800892c <display_IP+0xe0>)
 80088f0:	0018      	movs	r0, r3
 80088f2:	f7fa f91f 	bl	8002b34 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Stop_IT(&htim6);
		idxDisplayIP = -1;
		// resume outputs
		switch_Antenna(NULL, N_SELECTORS);
	}
}
 80088f6:	e00a      	b.n	800890e <display_IP+0xc2>
		HAL_TIM_Base_Stop_IT(&htim6);
 80088f8:	4b0c      	ldr	r3, [pc, #48]	; (800892c <display_IP+0xe0>)
 80088fa:	0018      	movs	r0, r3
 80088fc:	f7fa f966 	bl	8002bcc <HAL_TIM_Base_Stop_IT>
		idxDisplayIP = -1;
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <display_IP+0xcc>)
 8008902:	22ff      	movs	r2, #255	; 0xff
 8008904:	701a      	strb	r2, [r3, #0]
		switch_Antenna(NULL, N_SELECTORS);
 8008906:	2102      	movs	r1, #2
 8008908:	2000      	movs	r0, #0
 800890a:	f7ff fe6d 	bl	80085e8 <switch_Antenna>
}
 800890e:	46c0      	nop			; (mov r8, r8)
 8008910:	46bd      	mov	sp, r7
 8008912:	b005      	add	sp, #20
 8008914:	bd90      	pop	{r4, r7, pc}
 8008916:	46c0      	nop			; (mov r8, r8)
 8008918:	2000069c 	.word	0x2000069c
 800891c:	20001114 	.word	0x20001114
 8008920:	20000d68 	.word	0x20000d68
 8008924:	20000d6c 	.word	0x20000d6c
 8008928:	20000d8a 	.word	0x20000d8a
 800892c:	20001190 	.word	0x20001190

08008930 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008930:	b590      	push	{r4, r7, lr}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	/* display IP address */
	if (htim == &htim6)
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4b6c      	ldr	r3, [pc, #432]	; (8008aec <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800893c:	429a      	cmp	r2, r3
 800893e:	d000      	beq.n	8008942 <HAL_TIM_PeriodElapsedCallback+0x12>
 8008940:	e0d1      	b.n	8008ae6 <HAL_TIM_PeriodElapsedCallback+0x1b6>
	{
		uint8_t d;

		// termination conditon
		if(idxDisplayIP < 0)
 8008942:	4b6b      	ldr	r3, [pc, #428]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	b25b      	sxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	da04      	bge.n	8008956 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			HAL_TIM_Base_Stop_IT(htim);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	0018      	movs	r0, r3
 8008950:	f7fa f93c 	bl	8002bcc <HAL_TIM_Base_Stop_IT>
			return;
 8008954:	e0c7      	b.n	8008ae6 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}

		// display
		if (idxDisplayIP < lenDisplayIP)
 8008956:	4b66      	ldr	r3, [pc, #408]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b25b      	sxtb	r3, r3
 800895c:	001a      	movs	r2, r3
 800895e:	4b65      	ldr	r3, [pc, #404]	; (8008af4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	da6c      	bge.n	8008a40 <HAL_TIM_PeriodElapsedCallback+0x110>
		{
			char s = sIP_dec[idxDisplayIP];
 8008966:	4b62      	ldr	r3, [pc, #392]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	b25b      	sxtb	r3, r3
 800896c:	0019      	movs	r1, r3
 800896e:	200e      	movs	r0, #14
 8008970:	183b      	adds	r3, r7, r0
 8008972:	4a61      	ldr	r2, [pc, #388]	; (8008af8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8008974:	5c52      	ldrb	r2, [r2, r1]
 8008976:	701a      	strb	r2, [r3, #0]
			if (s >= '0' && s <= '9')
 8008978:	0002      	movs	r2, r0
 800897a:	18bb      	adds	r3, r7, r2
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b2f      	cmp	r3, #47	; 0x2f
 8008980:	d90f      	bls.n	80089a2 <HAL_TIM_PeriodElapsedCallback+0x72>
 8008982:	18bb      	adds	r3, r7, r2
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b39      	cmp	r3, #57	; 0x39
 8008988:	d80b      	bhi.n	80089a2 <HAL_TIM_PeriodElapsedCallback+0x72>
			{
				d = (s - '0');
 800898a:	210f      	movs	r1, #15
 800898c:	187b      	adds	r3, r7, r1
 800898e:	18ba      	adds	r2, r7, r2
 8008990:	7812      	ldrb	r2, [r2, #0]
 8008992:	3a30      	subs	r2, #48	; 0x30
 8008994:	701a      	strb	r2, [r3, #0]
				d = ~d;
 8008996:	187b      	adds	r3, r7, r1
 8008998:	187a      	adds	r2, r7, r1
 800899a:	7812      	ldrb	r2, [r2, #0]
 800899c:	43d2      	mvns	r2, r2
 800899e:	701a      	strb	r2, [r3, #0]
 80089a0:	e00d      	b.n	80089be <HAL_TIM_PeriodElapsedCallback+0x8e>

			}
			else if(s == '.') // display "-" instead of '.', activate all 4 pins
 80089a2:	230e      	movs	r3, #14
 80089a4:	18fb      	adds	r3, r7, r3
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	2b2e      	cmp	r3, #46	; 0x2e
 80089aa:	d104      	bne.n	80089b6 <HAL_TIM_PeriodElapsedCallback+0x86>
			{
				d = ~(0x0f);
 80089ac:	230f      	movs	r3, #15
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	22f0      	movs	r2, #240	; 0xf0
 80089b2:	701a      	strb	r2, [r3, #0]
 80089b4:	e003      	b.n	80089be <HAL_TIM_PeriodElapsedCallback+0x8e>
			}
			else
			{
				d = ~(0x0e); // no display
 80089b6:	230f      	movs	r3, #15
 80089b8:	18fb      	adds	r3, r7, r3
 80089ba:	22f1      	movs	r2, #241	; 0xf1
 80089bc:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 80089be:	4b4f      	ldr	r3, [pc, #316]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	4b4e      	ldr	r3, [pc, #312]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80089c4:	8899      	ldrh	r1, [r3, #4]
					Selector[0].PIN_BCDs[0].pin, d & 0x01);
 80089c6:	240f      	movs	r4, #15
 80089c8:	193b      	adds	r3, r7, r4
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2201      	movs	r2, #1
 80089ce:	4013      	ands	r3, r2
 80089d0:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 80089d2:	001a      	movs	r2, r3
 80089d4:	f7f8 fcc3 	bl	800135e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 80089d8:	4b48      	ldr	r3, [pc, #288]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80089da:	6898      	ldr	r0, [r3, #8]
 80089dc:	4b47      	ldr	r3, [pc, #284]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80089de:	8999      	ldrh	r1, [r3, #12]
 80089e0:	193b      	adds	r3, r7, r4
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	085b      	lsrs	r3, r3, #1
 80089e6:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 80089e8:	2201      	movs	r2, #1
 80089ea:	4013      	ands	r3, r2
 80089ec:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 80089ee:	001a      	movs	r2, r3
 80089f0:	f7f8 fcb5 	bl	800135e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 80089f4:	4b41      	ldr	r3, [pc, #260]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80089f6:	6918      	ldr	r0, [r3, #16]
 80089f8:	4b40      	ldr	r3, [pc, #256]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80089fa:	8a99      	ldrh	r1, [r3, #20]
 80089fc:	193b      	adds	r3, r7, r4
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	089b      	lsrs	r3, r3, #2
 8008a02:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 8008a04:	2201      	movs	r2, #1
 8008a06:	4013      	ands	r3, r2
 8008a08:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8008a0a:	001a      	movs	r2, r3
 8008a0c:	f7f8 fca7 	bl	800135e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8008a10:	4b3a      	ldr	r3, [pc, #232]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a12:	69d8      	ldr	r0, [r3, #28]
 8008a14:	4b39      	ldr	r3, [pc, #228]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a16:	8c19      	ldrh	r1, [r3, #32]
 8008a18:	193b      	adds	r3, r7, r4
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	08db      	lsrs	r3, r3, #3
 8008a1e:	b2db      	uxtb	r3, r3
					Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 8008a20:	2201      	movs	r2, #1
 8008a22:	4013      	ands	r3, r2
 8008a24:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8008a26:	001a      	movs	r2, r3
 8008a28:	f7f8 fc99 	bl	800135e <HAL_GPIO_WritePin>
			++idxDisplayIP;
 8008a2c:	4b30      	ldr	r3, [pc, #192]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	b25b      	sxtb	r3, r3
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	3301      	adds	r3, #1
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	b25a      	sxtb	r2, r3
 8008a3a:	4b2d      	ldr	r3, [pc, #180]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008a3c:	701a      	strb	r2, [r3, #0]
 8008a3e:	e052      	b.n	8008ae6 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}
		// at the end of transmission, pause for a while
		else if(idxDisplayIP < lenDisplayIP + 3)
 8008a40:	4b2c      	ldr	r3, [pc, #176]	; (8008af4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	3302      	adds	r3, #2
 8008a46:	4a2a      	ldr	r2, [pc, #168]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008a48:	7812      	ldrb	r2, [r2, #0]
 8008a4a:	b252      	sxtb	r2, r2
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	db43      	blt.n	8008ad8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		{
			d = ~(0x0e); // no display
 8008a50:	240f      	movs	r4, #15
 8008a52:	193b      	adds	r3, r7, r4
 8008a54:	22f1      	movs	r2, #241	; 0xf1
 8008a56:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8008a58:	4b28      	ldr	r3, [pc, #160]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a5a:	6818      	ldr	r0, [r3, #0]
 8008a5c:	4b27      	ldr	r3, [pc, #156]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a5e:	8899      	ldrh	r1, [r3, #4]
					Selector[0].PIN_BCDs[0].pin, d & 0x01);
 8008a60:	193b      	adds	r3, r7, r4
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2201      	movs	r2, #1
 8008a66:	4013      	ands	r3, r2
 8008a68:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[0].group,
 8008a6a:	001a      	movs	r2, r3
 8008a6c:	f7f8 fc77 	bl	800135e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8008a70:	4b22      	ldr	r3, [pc, #136]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a72:	6898      	ldr	r0, [r3, #8]
 8008a74:	4b21      	ldr	r3, [pc, #132]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a76:	8999      	ldrh	r1, [r3, #12]
 8008a78:	193b      	adds	r3, r7, r4
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[1].pin, (d >> 1) & 0x01);
 8008a80:	2201      	movs	r2, #1
 8008a82:	4013      	ands	r3, r2
 8008a84:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[1].group,
 8008a86:	001a      	movs	r2, r3
 8008a88:	f7f8 fc69 	bl	800135e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8008a8c:	4b1b      	ldr	r3, [pc, #108]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a8e:	6918      	ldr	r0, [r3, #16]
 8008a90:	4b1a      	ldr	r3, [pc, #104]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008a92:	8a99      	ldrh	r1, [r3, #20]
 8008a94:	193b      	adds	r3, r7, r4
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	089b      	lsrs	r3, r3, #2
 8008a9a:	b2db      	uxtb	r3, r3
					Selector[0].PIN_BCDs[2].pin, (d >> 2) & 0x01);
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[0].PIN_BCDs[2].group,
 8008aa2:	001a      	movs	r2, r3
 8008aa4:	f7f8 fc5b 	bl	800135e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8008aa8:	4b14      	ldr	r3, [pc, #80]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008aaa:	69d8      	ldr	r0, [r3, #28]
 8008aac:	4b13      	ldr	r3, [pc, #76]	; (8008afc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8008aae:	8c19      	ldrh	r1, [r3, #32]
 8008ab0:	193b      	adds	r3, r7, r4
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	b2db      	uxtb	r3, r3
					Selector[1].PIN_BCDs[0].pin, (d >> 3) & 0x01);
 8008ab8:	2201      	movs	r2, #1
 8008aba:	4013      	ands	r3, r2
 8008abc:	b2db      	uxtb	r3, r3
			HAL_GPIO_WritePin(Selector[1].PIN_BCDs[0].group,
 8008abe:	001a      	movs	r2, r3
 8008ac0:	f7f8 fc4d 	bl	800135e <HAL_GPIO_WritePin>
			++idxDisplayIP;
 8008ac4:	4b0a      	ldr	r3, [pc, #40]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	b25b      	sxtb	r3, r3
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	3301      	adds	r3, #1
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	b25a      	sxtb	r2, r3
 8008ad2:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	e006      	b.n	8008ae6 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}
		else
		{
			idxDisplayIP = -1;
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8008ada:	22ff      	movs	r2, #255	; 0xff
 8008adc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f7fa f873 	bl	8002bcc <HAL_TIM_Base_Stop_IT>
		}
	}
}
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	b005      	add	sp, #20
 8008aea:	bd90      	pop	{r4, r7, pc}
 8008aec:	20001190 	.word	0x20001190
 8008af0:	2000069c 	.word	0x2000069c
 8008af4:	20000d8a 	.word	0x20000d8a
 8008af8:	20000d6c 	.word	0x20000d6c
 8008afc:	20001114 	.word	0x20001114

08008b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008b04:	46c0      	nop			; (mov r8, r8)
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
	...

08008b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b12:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <HAL_MspInit+0x44>)
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <HAL_MspInit+0x44>)
 8008b18:	2101      	movs	r1, #1
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	619a      	str	r2, [r3, #24]
 8008b1e:	4b0c      	ldr	r3, [pc, #48]	; (8008b50 <HAL_MspInit+0x44>)
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2201      	movs	r2, #1
 8008b24:	4013      	ands	r3, r2
 8008b26:	607b      	str	r3, [r7, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b2a:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <HAL_MspInit+0x44>)
 8008b2c:	69da      	ldr	r2, [r3, #28]
 8008b2e:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <HAL_MspInit+0x44>)
 8008b30:	2180      	movs	r1, #128	; 0x80
 8008b32:	0549      	lsls	r1, r1, #21
 8008b34:	430a      	orrs	r2, r1
 8008b36:	61da      	str	r2, [r3, #28]
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <HAL_MspInit+0x44>)
 8008b3a:	69da      	ldr	r2, [r3, #28]
 8008b3c:	2380      	movs	r3, #128	; 0x80
 8008b3e:	055b      	lsls	r3, r3, #21
 8008b40:	4013      	ands	r3, r2
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b46:	46c0      	nop			; (mov r8, r8)
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	b002      	add	sp, #8
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	40021000 	.word	0x40021000

08008b54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008b54:	b590      	push	{r4, r7, lr}
 8008b56:	b08b      	sub	sp, #44	; 0x2c
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b5c:	2414      	movs	r4, #20
 8008b5e:	193b      	adds	r3, r7, r4
 8008b60:	0018      	movs	r0, r3
 8008b62:	2314      	movs	r3, #20
 8008b64:	001a      	movs	r2, r3
 8008b66:	2100      	movs	r1, #0
 8008b68:	f000 f9ef 	bl	8008f4a <memset>
  if(hspi->Instance==SPI1)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a1c      	ldr	r2, [pc, #112]	; (8008be4 <HAL_SPI_MspInit+0x90>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d132      	bne.n	8008bdc <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008b76:	4b1c      	ldr	r3, [pc, #112]	; (8008be8 <HAL_SPI_MspInit+0x94>)
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	4b1b      	ldr	r3, [pc, #108]	; (8008be8 <HAL_SPI_MspInit+0x94>)
 8008b7c:	2180      	movs	r1, #128	; 0x80
 8008b7e:	0149      	lsls	r1, r1, #5
 8008b80:	430a      	orrs	r2, r1
 8008b82:	619a      	str	r2, [r3, #24]
 8008b84:	4b18      	ldr	r3, [pc, #96]	; (8008be8 <HAL_SPI_MspInit+0x94>)
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	015b      	lsls	r3, r3, #5
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b92:	4b15      	ldr	r3, [pc, #84]	; (8008be8 <HAL_SPI_MspInit+0x94>)
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <HAL_SPI_MspInit+0x94>)
 8008b98:	2180      	movs	r1, #128	; 0x80
 8008b9a:	0289      	lsls	r1, r1, #10
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	615a      	str	r2, [r3, #20]
 8008ba0:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <HAL_SPI_MspInit+0x94>)
 8008ba2:	695a      	ldr	r2, [r3, #20]
 8008ba4:	2380      	movs	r3, #128	; 0x80
 8008ba6:	029b      	lsls	r3, r3, #10
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008bae:	0021      	movs	r1, r4
 8008bb0:	187b      	adds	r3, r7, r1
 8008bb2:	22e0      	movs	r2, #224	; 0xe0
 8008bb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bb6:	187b      	adds	r3, r7, r1
 8008bb8:	2202      	movs	r2, #2
 8008bba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008bc2:	187b      	adds	r3, r7, r1
 8008bc4:	2203      	movs	r2, #3
 8008bc6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008bc8:	187b      	adds	r3, r7, r1
 8008bca:	2200      	movs	r2, #0
 8008bcc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bce:	187a      	adds	r2, r7, r1
 8008bd0:	2390      	movs	r3, #144	; 0x90
 8008bd2:	05db      	lsls	r3, r3, #23
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	0018      	movs	r0, r3
 8008bd8:	f7f8 fa34 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008bdc:	46c0      	nop			; (mov r8, r8)
 8008bde:	46bd      	mov	sp, r7
 8008be0:	b00b      	add	sp, #44	; 0x2c
 8008be2:	bd90      	pop	{r4, r7, pc}
 8008be4:	40013000 	.word	0x40013000
 8008be8:	40021000 	.word	0x40021000

08008bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a0d      	ldr	r2, [pc, #52]	; (8008c30 <HAL_TIM_Base_MspInit+0x44>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d113      	bne.n	8008c26 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <HAL_TIM_Base_MspInit+0x48>)
 8008c00:	69da      	ldr	r2, [r3, #28]
 8008c02:	4b0c      	ldr	r3, [pc, #48]	; (8008c34 <HAL_TIM_Base_MspInit+0x48>)
 8008c04:	2110      	movs	r1, #16
 8008c06:	430a      	orrs	r2, r1
 8008c08:	61da      	str	r2, [r3, #28]
 8008c0a:	4b0a      	ldr	r3, [pc, #40]	; (8008c34 <HAL_TIM_Base_MspInit+0x48>)
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	2210      	movs	r2, #16
 8008c10:	4013      	ands	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8008c16:	2200      	movs	r2, #0
 8008c18:	2100      	movs	r1, #0
 8008c1a:	2011      	movs	r0, #17
 8008c1c:	f7f7 fdc8 	bl	80007b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8008c20:	2011      	movs	r0, #17
 8008c22:	f7f7 fdda 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8008c26:	46c0      	nop			; (mov r8, r8)
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	b004      	add	sp, #16
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	40001000 	.word	0x40001000
 8008c34:	40021000 	.word	0x40021000

08008c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b08b      	sub	sp, #44	; 0x2c
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c40:	2414      	movs	r4, #20
 8008c42:	193b      	adds	r3, r7, r4
 8008c44:	0018      	movs	r0, r3
 8008c46:	2314      	movs	r3, #20
 8008c48:	001a      	movs	r2, r3
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	f000 f97d 	bl	8008f4a <memset>
  if(huart->Instance==USART2)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a47      	ldr	r2, [pc, #284]	; (8008d74 <HAL_UART_MspInit+0x13c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d000      	beq.n	8008c5c <HAL_UART_MspInit+0x24>
 8008c5a:	e087      	b.n	8008d6c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c5c:	4b46      	ldr	r3, [pc, #280]	; (8008d78 <HAL_UART_MspInit+0x140>)
 8008c5e:	69da      	ldr	r2, [r3, #28]
 8008c60:	4b45      	ldr	r3, [pc, #276]	; (8008d78 <HAL_UART_MspInit+0x140>)
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	0289      	lsls	r1, r1, #10
 8008c66:	430a      	orrs	r2, r1
 8008c68:	61da      	str	r2, [r3, #28]
 8008c6a:	4b43      	ldr	r3, [pc, #268]	; (8008d78 <HAL_UART_MspInit+0x140>)
 8008c6c:	69da      	ldr	r2, [r3, #28]
 8008c6e:	2380      	movs	r3, #128	; 0x80
 8008c70:	029b      	lsls	r3, r3, #10
 8008c72:	4013      	ands	r3, r2
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c78:	4b3f      	ldr	r3, [pc, #252]	; (8008d78 <HAL_UART_MspInit+0x140>)
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	4b3e      	ldr	r3, [pc, #248]	; (8008d78 <HAL_UART_MspInit+0x140>)
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	0289      	lsls	r1, r1, #10
 8008c82:	430a      	orrs	r2, r1
 8008c84:	615a      	str	r2, [r3, #20]
 8008c86:	4b3c      	ldr	r3, [pc, #240]	; (8008d78 <HAL_UART_MspInit+0x140>)
 8008c88:	695a      	ldr	r2, [r3, #20]
 8008c8a:	2380      	movs	r3, #128	; 0x80
 8008c8c:	029b      	lsls	r3, r3, #10
 8008c8e:	4013      	ands	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008c94:	0021      	movs	r1, r4
 8008c96:	187b      	adds	r3, r7, r1
 8008c98:	220c      	movs	r2, #12
 8008c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c9c:	187b      	adds	r3, r7, r1
 8008c9e:	2202      	movs	r2, #2
 8008ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ca8:	187b      	adds	r3, r7, r1
 8008caa:	2203      	movs	r2, #3
 8008cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8008cae:	187b      	adds	r3, r7, r1
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb4:	187a      	adds	r2, r7, r1
 8008cb6:	2390      	movs	r3, #144	; 0x90
 8008cb8:	05db      	lsls	r3, r3, #23
 8008cba:	0011      	movs	r1, r2
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	f7f8 f9c1 	bl	8001044 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8008cc2:	4b2e      	ldr	r3, [pc, #184]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cc4:	4a2e      	ldr	r2, [pc, #184]	; (8008d80 <HAL_UART_MspInit+0x148>)
 8008cc6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cc8:	4b2c      	ldr	r3, [pc, #176]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cce:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008cd4:	4b29      	ldr	r3, [pc, #164]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cd6:	2280      	movs	r2, #128	; 0x80
 8008cd8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008cda:	4b28      	ldr	r3, [pc, #160]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ce0:	4b26      	ldr	r3, [pc, #152]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8008ce6:	4b25      	ldr	r3, [pc, #148]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8008cec:	4b23      	ldr	r3, [pc, #140]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cee:	2280      	movs	r2, #128	; 0x80
 8008cf0:	0152      	lsls	r2, r2, #5
 8008cf2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008cf4:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f7f7 fd8c 	bl	8000814 <HAL_DMA_Init>
 8008cfc:	1e03      	subs	r3, r0, #0
 8008cfe:	d001      	beq.n	8008d04 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8008d00:	f7ff fefe 	bl	8008b00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a1d      	ldr	r2, [pc, #116]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008d08:	675a      	str	r2, [r3, #116]	; 0x74
 8008d0a:	4b1c      	ldr	r3, [pc, #112]	; (8008d7c <HAL_UART_MspInit+0x144>)
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8008d10:	4b1c      	ldr	r3, [pc, #112]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d12:	4a1d      	ldr	r2, [pc, #116]	; (8008d88 <HAL_UART_MspInit+0x150>)
 8008d14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008d16:	4b1b      	ldr	r3, [pc, #108]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d18:	2210      	movs	r2, #16
 8008d1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d1c:	4b19      	ldr	r3, [pc, #100]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d1e:	2200      	movs	r2, #0
 8008d20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008d22:	4b18      	ldr	r3, [pc, #96]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d24:	2280      	movs	r2, #128	; 0x80
 8008d26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008d28:	4b16      	ldr	r3, [pc, #88]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8008d34:	4b13      	ldr	r3, [pc, #76]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008d3a:	4b12      	ldr	r3, [pc, #72]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8008d40:	4b10      	ldr	r3, [pc, #64]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d42:	0018      	movs	r0, r3
 8008d44:	f7f7 fd66 	bl	8000814 <HAL_DMA_Init>
 8008d48:	1e03      	subs	r3, r0, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 8008d4c:	f7ff fed8 	bl	8008b00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a0c      	ldr	r2, [pc, #48]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d54:	671a      	str	r2, [r3, #112]	; 0x70
 8008d56:	4b0b      	ldr	r3, [pc, #44]	; (8008d84 <HAL_UART_MspInit+0x14c>)
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2100      	movs	r1, #0
 8008d60:	201c      	movs	r0, #28
 8008d62:	f7f7 fd25 	bl	80007b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008d66:	201c      	movs	r0, #28
 8008d68:	f7f7 fd37 	bl	80007da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008d6c:	46c0      	nop			; (mov r8, r8)
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	b00b      	add	sp, #44	; 0x2c
 8008d72:	bd90      	pop	{r4, r7, pc}
 8008d74:	40004400 	.word	0x40004400
 8008d78:	40021000 	.word	0x40021000
 8008d7c:	200010c0 	.word	0x200010c0
 8008d80:	40020058 	.word	0x40020058
 8008d84:	2000114c 	.word	0x2000114c
 8008d88:	40020044 	.word	0x40020044

08008d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008d90:	46c0      	nop			; (mov r8, r8)
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d9a:	e7fe      	b.n	8008d9a <HardFault_Handler+0x4>

08008d9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008da0:	46c0      	nop			; (mov r8, r8)
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008db4:	f7f7 fc10 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */


  /* USER CODE END SysTick_IRQn 1 */
}
 8008db8:	46c0      	nop			; (mov r8, r8)
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <DMA1_Channel4_5_IRQHandler+0x1c>)
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f7f7 fe4f 	bl	8000a6a <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <DMA1_Channel4_5_IRQHandler+0x20>)
 8008dce:	0018      	movs	r0, r3
 8008dd0:	f7f7 fe4b 	bl	8000a6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8008dd4:	46c0      	nop			; (mov r8, r8)
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	2000114c 	.word	0x2000114c
 8008de0:	200010c0 	.word	0x200010c0

08008de4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008de8:	4b03      	ldr	r3, [pc, #12]	; (8008df8 <TIM6_IRQHandler+0x14>)
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7f9 ff1c 	bl	8002c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8008df0:	46c0      	nop			; (mov r8, r8)
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	20001190 	.word	0x20001190

08008dfc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008e00:	4b03      	ldr	r3, [pc, #12]	; (8008e10 <USART2_IRQHandler+0x14>)
 8008e02:	0018      	movs	r0, r3
 8008e04:	f7fa f920 	bl	8003048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008e08:	46c0      	nop			; (mov r8, r8)
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	20001274 	.word	0x20001274

08008e14 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8008e18:	4b1a      	ldr	r3, [pc, #104]	; (8008e84 <SystemInit+0x70>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	4b19      	ldr	r3, [pc, #100]	; (8008e84 <SystemInit+0x70>)
 8008e1e:	2101      	movs	r1, #1
 8008e20:	430a      	orrs	r2, r1
 8008e22:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8008e24:	4b17      	ldr	r3, [pc, #92]	; (8008e84 <SystemInit+0x70>)
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <SystemInit+0x70>)
 8008e2a:	4917      	ldr	r1, [pc, #92]	; (8008e88 <SystemInit+0x74>)
 8008e2c:	400a      	ands	r2, r1
 8008e2e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8008e30:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <SystemInit+0x70>)
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4b13      	ldr	r3, [pc, #76]	; (8008e84 <SystemInit+0x70>)
 8008e36:	4915      	ldr	r1, [pc, #84]	; (8008e8c <SystemInit+0x78>)
 8008e38:	400a      	ands	r2, r1
 8008e3a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8008e3c:	4b11      	ldr	r3, [pc, #68]	; (8008e84 <SystemInit+0x70>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	4b10      	ldr	r3, [pc, #64]	; (8008e84 <SystemInit+0x70>)
 8008e42:	4913      	ldr	r1, [pc, #76]	; (8008e90 <SystemInit+0x7c>)
 8008e44:	400a      	ands	r2, r1
 8008e46:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8008e48:	4b0e      	ldr	r3, [pc, #56]	; (8008e84 <SystemInit+0x70>)
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	4b0d      	ldr	r3, [pc, #52]	; (8008e84 <SystemInit+0x70>)
 8008e4e:	4911      	ldr	r1, [pc, #68]	; (8008e94 <SystemInit+0x80>)
 8008e50:	400a      	ands	r2, r1
 8008e52:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8008e54:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <SystemInit+0x70>)
 8008e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e58:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <SystemInit+0x70>)
 8008e5a:	210f      	movs	r1, #15
 8008e5c:	438a      	bics	r2, r1
 8008e5e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <SystemInit+0x70>)
 8008e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e64:	4b07      	ldr	r3, [pc, #28]	; (8008e84 <SystemInit+0x70>)
 8008e66:	490c      	ldr	r1, [pc, #48]	; (8008e98 <SystemInit+0x84>)
 8008e68:	400a      	ands	r2, r1
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8008e6c:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <SystemInit+0x70>)
 8008e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e70:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <SystemInit+0x70>)
 8008e72:	2101      	movs	r1, #1
 8008e74:	438a      	bics	r2, r1
 8008e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <SystemInit+0x70>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	609a      	str	r2, [r3, #8]

}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40021000 	.word	0x40021000
 8008e88:	08ffb80c 	.word	0x08ffb80c
 8008e8c:	fef6ffff 	.word	0xfef6ffff
 8008e90:	fffbffff 	.word	0xfffbffff
 8008e94:	ffc0ffff 	.word	0xffc0ffff
 8008e98:	fffffeec 	.word	0xfffffeec

08008e9c <Reset_Handler>:
 8008e9c:	480d      	ldr	r0, [pc, #52]	; (8008ed4 <LoopForever+0x2>)
 8008e9e:	4685      	mov	sp, r0
 8008ea0:	480d      	ldr	r0, [pc, #52]	; (8008ed8 <LoopForever+0x6>)
 8008ea2:	490e      	ldr	r1, [pc, #56]	; (8008edc <LoopForever+0xa>)
 8008ea4:	4a0e      	ldr	r2, [pc, #56]	; (8008ee0 <LoopForever+0xe>)
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e002      	b.n	8008eb0 <LoopCopyDataInit>

08008eaa <CopyDataInit>:
 8008eaa:	58d4      	ldr	r4, [r2, r3]
 8008eac:	50c4      	str	r4, [r0, r3]
 8008eae:	3304      	adds	r3, #4

08008eb0 <LoopCopyDataInit>:
 8008eb0:	18c4      	adds	r4, r0, r3
 8008eb2:	428c      	cmp	r4, r1
 8008eb4:	d3f9      	bcc.n	8008eaa <CopyDataInit>
 8008eb6:	4a0b      	ldr	r2, [pc, #44]	; (8008ee4 <LoopForever+0x12>)
 8008eb8:	4c0b      	ldr	r4, [pc, #44]	; (8008ee8 <LoopForever+0x16>)
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e001      	b.n	8008ec2 <LoopFillZerobss>

08008ebe <FillZerobss>:
 8008ebe:	6013      	str	r3, [r2, #0]
 8008ec0:	3204      	adds	r2, #4

08008ec2 <LoopFillZerobss>:
 8008ec2:	42a2      	cmp	r2, r4
 8008ec4:	d3fb      	bcc.n	8008ebe <FillZerobss>
 8008ec6:	f7ff ffa5 	bl	8008e14 <SystemInit>
 8008eca:	f000 f811 	bl	8008ef0 <__libc_init_array>
 8008ece:	f7fe fc0b 	bl	80076e8 <main>

08008ed2 <LoopForever>:
 8008ed2:	e7fe      	b.n	8008ed2 <LoopForever>
 8008ed4:	20001fff 	.word	0x20001fff
 8008ed8:	20000000 	.word	0x20000000
 8008edc:	200006a4 	.word	0x200006a4
 8008ee0:	0800956c 	.word	0x0800956c
 8008ee4:	200006a8 	.word	0x200006a8
 8008ee8:	200012fc 	.word	0x200012fc

08008eec <ADC1_IRQHandler>:
 8008eec:	e7fe      	b.n	8008eec <ADC1_IRQHandler>
	...

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	4d0c      	ldr	r5, [pc, #48]	; (8008f28 <__libc_init_array+0x38>)
 8008ef6:	4c0d      	ldr	r4, [pc, #52]	; (8008f2c <__libc_init_array+0x3c>)
 8008ef8:	1b64      	subs	r4, r4, r5
 8008efa:	10a4      	asrs	r4, r4, #2
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	2600      	movs	r6, #0
 8008f02:	f000 f921 	bl	8009148 <_init>
 8008f06:	4d0a      	ldr	r5, [pc, #40]	; (8008f30 <__libc_init_array+0x40>)
 8008f08:	4c0a      	ldr	r4, [pc, #40]	; (8008f34 <__libc_init_array+0x44>)
 8008f0a:	1b64      	subs	r4, r4, r5
 8008f0c:	10a4      	asrs	r4, r4, #2
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	00b3      	lsls	r3, r6, #2
 8008f16:	58eb      	ldr	r3, [r5, r3]
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	00b3      	lsls	r3, r6, #2
 8008f20:	58eb      	ldr	r3, [r5, r3]
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	08009564 	.word	0x08009564
 8008f2c:	08009564 	.word	0x08009564
 8008f30:	08009564 	.word	0x08009564
 8008f34:	08009568 	.word	0x08009568

08008f38 <memcpy>:
 8008f38:	2300      	movs	r3, #0
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d100      	bne.n	8008f42 <memcpy+0xa>
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	5ccc      	ldrb	r4, [r1, r3]
 8008f44:	54c4      	strb	r4, [r0, r3]
 8008f46:	3301      	adds	r3, #1
 8008f48:	e7f8      	b.n	8008f3c <memcpy+0x4>

08008f4a <memset>:
 8008f4a:	0003      	movs	r3, r0
 8008f4c:	1882      	adds	r2, r0, r2
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d100      	bne.n	8008f54 <memset+0xa>
 8008f52:	4770      	bx	lr
 8008f54:	7019      	strb	r1, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	e7f9      	b.n	8008f4e <memset+0x4>

08008f5a <strcat>:
 8008f5a:	0002      	movs	r2, r0
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	7813      	ldrb	r3, [r2, #0]
 8008f60:	0014      	movs	r4, r2
 8008f62:	3201      	adds	r2, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1fa      	bne.n	8008f5e <strcat+0x4>
 8008f68:	5cca      	ldrb	r2, [r1, r3]
 8008f6a:	54e2      	strb	r2, [r4, r3]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	d1fa      	bne.n	8008f68 <strcat+0xe>
 8008f72:	bd10      	pop	{r4, pc}

08008f74 <strchr>:
 8008f74:	b2c9      	uxtb	r1, r1
 8008f76:	7803      	ldrb	r3, [r0, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <strchr+0x12>
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	d100      	bne.n	8008f82 <strchr+0xe>
 8008f80:	4770      	bx	lr
 8008f82:	3001      	adds	r0, #1
 8008f84:	e7f7      	b.n	8008f76 <strchr+0x2>
 8008f86:	424b      	negs	r3, r1
 8008f88:	4159      	adcs	r1, r3
 8008f8a:	4249      	negs	r1, r1
 8008f8c:	4008      	ands	r0, r1
 8008f8e:	e7f7      	b.n	8008f80 <strchr+0xc>

08008f90 <strcpy>:
 8008f90:	0003      	movs	r3, r0
 8008f92:	780a      	ldrb	r2, [r1, #0]
 8008f94:	3101      	adds	r1, #1
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	2a00      	cmp	r2, #0
 8008f9c:	d1f9      	bne.n	8008f92 <strcpy+0x2>
 8008f9e:	4770      	bx	lr

08008fa0 <strncat>:
 8008fa0:	0003      	movs	r3, r0
 8008fa2:	b530      	push	{r4, r5, lr}
 8008fa4:	781c      	ldrb	r4, [r3, #0]
 8008fa6:	2c00      	cmp	r4, #0
 8008fa8:	d108      	bne.n	8008fbc <strncat+0x1c>
 8008faa:	1889      	adds	r1, r1, r2
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	d004      	beq.n	8008fba <strncat+0x1a>
 8008fb0:	4255      	negs	r5, r2
 8008fb2:	5d4d      	ldrb	r5, [r1, r5]
 8008fb4:	701d      	strb	r5, [r3, #0]
 8008fb6:	2d00      	cmp	r5, #0
 8008fb8:	d102      	bne.n	8008fc0 <strncat+0x20>
 8008fba:	bd30      	pop	{r4, r5, pc}
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	e7f1      	b.n	8008fa4 <strncat+0x4>
 8008fc0:	2a01      	cmp	r2, #1
 8008fc2:	d100      	bne.n	8008fc6 <strncat+0x26>
 8008fc4:	705c      	strb	r4, [r3, #1]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	3a01      	subs	r2, #1
 8008fca:	e7ef      	b.n	8008fac <strncat+0xc>

08008fcc <strncmp>:
 8008fcc:	b530      	push	{r4, r5, lr}
 8008fce:	0005      	movs	r5, r0
 8008fd0:	1e10      	subs	r0, r2, #0
 8008fd2:	d00b      	beq.n	8008fec <strncmp+0x20>
 8008fd4:	2400      	movs	r4, #0
 8008fd6:	3a01      	subs	r2, #1
 8008fd8:	5d2b      	ldrb	r3, [r5, r4]
 8008fda:	5d08      	ldrb	r0, [r1, r4]
 8008fdc:	4283      	cmp	r3, r0
 8008fde:	d104      	bne.n	8008fea <strncmp+0x1e>
 8008fe0:	4294      	cmp	r4, r2
 8008fe2:	d002      	beq.n	8008fea <strncmp+0x1e>
 8008fe4:	3401      	adds	r4, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f6      	bne.n	8008fd8 <strncmp+0xc>
 8008fea:	1a18      	subs	r0, r3, r0
 8008fec:	bd30      	pop	{r4, r5, pc}

08008fee <strncpy>:
 8008fee:	0003      	movs	r3, r0
 8008ff0:	b530      	push	{r4, r5, lr}
 8008ff2:	001d      	movs	r5, r3
 8008ff4:	2a00      	cmp	r2, #0
 8008ff6:	d006      	beq.n	8009006 <strncpy+0x18>
 8008ff8:	780c      	ldrb	r4, [r1, #0]
 8008ffa:	3a01      	subs	r2, #1
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	702c      	strb	r4, [r5, #0]
 8009000:	3101      	adds	r1, #1
 8009002:	2c00      	cmp	r4, #0
 8009004:	d1f5      	bne.n	8008ff2 <strncpy+0x4>
 8009006:	2100      	movs	r1, #0
 8009008:	189a      	adds	r2, r3, r2
 800900a:	4293      	cmp	r3, r2
 800900c:	d100      	bne.n	8009010 <strncpy+0x22>
 800900e:	bd30      	pop	{r4, r5, pc}
 8009010:	7019      	strb	r1, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	e7f9      	b.n	800900a <strncpy+0x1c>

08009016 <strnlen>:
 8009016:	0003      	movs	r3, r0
 8009018:	1841      	adds	r1, r0, r1
 800901a:	428b      	cmp	r3, r1
 800901c:	d101      	bne.n	8009022 <strnlen+0xc>
 800901e:	1a18      	subs	r0, r3, r0
 8009020:	4770      	bx	lr
 8009022:	781a      	ldrb	r2, [r3, #0]
 8009024:	2a00      	cmp	r2, #0
 8009026:	d0fa      	beq.n	800901e <strnlen+0x8>
 8009028:	3301      	adds	r3, #1
 800902a:	e7f6      	b.n	800901a <strnlen+0x4>

0800902c <strnstr>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	000e      	movs	r6, r1
 8009030:	0005      	movs	r5, r0
 8009032:	0011      	movs	r1, r2
 8009034:	0030      	movs	r0, r6
 8009036:	0014      	movs	r4, r2
 8009038:	f7ff ffed 	bl	8009016 <strnlen>
 800903c:	0003      	movs	r3, r0
 800903e:	4284      	cmp	r4, r0
 8009040:	d805      	bhi.n	800904e <strnstr+0x22>
 8009042:	5c32      	ldrb	r2, [r6, r0]
 8009044:	2a00      	cmp	r2, #0
 8009046:	d002      	beq.n	800904e <strnstr+0x22>
 8009048:	2400      	movs	r4, #0
 800904a:	0020      	movs	r0, r4
 800904c:	bd70      	pop	{r4, r5, r6, pc}
 800904e:	0021      	movs	r1, r4
 8009050:	0032      	movs	r2, r6
 8009052:	0028      	movs	r0, r5
 8009054:	f000 f85f 	bl	8009116 <memmem>
 8009058:	1e04      	subs	r4, r0, #0
 800905a:	d0f5      	beq.n	8009048 <strnstr+0x1c>
 800905c:	1b42      	subs	r2, r0, r5
 800905e:	2100      	movs	r1, #0
 8009060:	0028      	movs	r0, r5
 8009062:	f000 f84d 	bl	8009100 <memchr>
 8009066:	2800      	cmp	r0, #0
 8009068:	d1ee      	bne.n	8009048 <strnstr+0x1c>
 800906a:	e7ee      	b.n	800904a <strnstr+0x1e>

0800906c <strstr>:
 800906c:	780a      	ldrb	r2, [r1, #0]
 800906e:	b530      	push	{r4, r5, lr}
 8009070:	2a00      	cmp	r2, #0
 8009072:	d10c      	bne.n	800908e <strstr+0x22>
 8009074:	bd30      	pop	{r4, r5, pc}
 8009076:	429a      	cmp	r2, r3
 8009078:	d108      	bne.n	800908c <strstr+0x20>
 800907a:	2301      	movs	r3, #1
 800907c:	5ccc      	ldrb	r4, [r1, r3]
 800907e:	2c00      	cmp	r4, #0
 8009080:	d0f8      	beq.n	8009074 <strstr+0x8>
 8009082:	5cc5      	ldrb	r5, [r0, r3]
 8009084:	42a5      	cmp	r5, r4
 8009086:	d101      	bne.n	800908c <strstr+0x20>
 8009088:	3301      	adds	r3, #1
 800908a:	e7f7      	b.n	800907c <strstr+0x10>
 800908c:	3001      	adds	r0, #1
 800908e:	7803      	ldrb	r3, [r0, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1f0      	bne.n	8009076 <strstr+0xa>
 8009094:	0018      	movs	r0, r3
 8009096:	e7ed      	b.n	8009074 <strstr+0x8>

08009098 <__strtok_r>:
 8009098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800909a:	2800      	cmp	r0, #0
 800909c:	d102      	bne.n	80090a4 <__strtok_r+0xc>
 800909e:	6810      	ldr	r0, [r2, #0]
 80090a0:	2800      	cmp	r0, #0
 80090a2:	d013      	beq.n	80090cc <__strtok_r+0x34>
 80090a4:	0004      	movs	r4, r0
 80090a6:	0020      	movs	r0, r4
 80090a8:	000e      	movs	r6, r1
 80090aa:	7805      	ldrb	r5, [r0, #0]
 80090ac:	3401      	adds	r4, #1
 80090ae:	7837      	ldrb	r7, [r6, #0]
 80090b0:	2f00      	cmp	r7, #0
 80090b2:	d104      	bne.n	80090be <__strtok_r+0x26>
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	d10f      	bne.n	80090d8 <__strtok_r+0x40>
 80090b8:	0028      	movs	r0, r5
 80090ba:	6015      	str	r5, [r2, #0]
 80090bc:	e006      	b.n	80090cc <__strtok_r+0x34>
 80090be:	3601      	adds	r6, #1
 80090c0:	42bd      	cmp	r5, r7
 80090c2:	d1f4      	bne.n	80090ae <__strtok_r+0x16>
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d1ee      	bne.n	80090a6 <__strtok_r+0xe>
 80090c8:	6014      	str	r4, [r2, #0]
 80090ca:	7003      	strb	r3, [r0, #0]
 80090cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ce:	002f      	movs	r7, r5
 80090d0:	e00f      	b.n	80090f2 <__strtok_r+0x5a>
 80090d2:	3301      	adds	r3, #1
 80090d4:	2e00      	cmp	r6, #0
 80090d6:	d104      	bne.n	80090e2 <__strtok_r+0x4a>
 80090d8:	0023      	movs	r3, r4
 80090da:	3401      	adds	r4, #1
 80090dc:	781d      	ldrb	r5, [r3, #0]
 80090de:	0027      	movs	r7, r4
 80090e0:	000b      	movs	r3, r1
 80090e2:	781e      	ldrb	r6, [r3, #0]
 80090e4:	42b5      	cmp	r5, r6
 80090e6:	d1f4      	bne.n	80090d2 <__strtok_r+0x3a>
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	d0f0      	beq.n	80090ce <__strtok_r+0x36>
 80090ec:	2300      	movs	r3, #0
 80090ee:	3c01      	subs	r4, #1
 80090f0:	7023      	strb	r3, [r4, #0]
 80090f2:	6017      	str	r7, [r2, #0]
 80090f4:	e7ea      	b.n	80090cc <__strtok_r+0x34>

080090f6 <strtok_r>:
 80090f6:	b510      	push	{r4, lr}
 80090f8:	2301      	movs	r3, #1
 80090fa:	f7ff ffcd 	bl	8009098 <__strtok_r>
 80090fe:	bd10      	pop	{r4, pc}

08009100 <memchr>:
 8009100:	b2c9      	uxtb	r1, r1
 8009102:	1882      	adds	r2, r0, r2
 8009104:	4290      	cmp	r0, r2
 8009106:	d101      	bne.n	800910c <memchr+0xc>
 8009108:	2000      	movs	r0, #0
 800910a:	4770      	bx	lr
 800910c:	7803      	ldrb	r3, [r0, #0]
 800910e:	428b      	cmp	r3, r1
 8009110:	d0fb      	beq.n	800910a <memchr+0xa>
 8009112:	3001      	adds	r0, #1
 8009114:	e7f6      	b.n	8009104 <memchr+0x4>

08009116 <memmem>:
 8009116:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00c      	beq.n	8009136 <memmem+0x20>
 800911c:	1ac9      	subs	r1, r1, r3
 800911e:	7815      	ldrb	r5, [r2, #0]
 8009120:	1841      	adds	r1, r0, r1
 8009122:	4288      	cmp	r0, r1
 8009124:	d901      	bls.n	800912a <memmem+0x14>
 8009126:	2000      	movs	r0, #0
 8009128:	e005      	b.n	8009136 <memmem+0x20>
 800912a:	7804      	ldrb	r4, [r0, #0]
 800912c:	42ac      	cmp	r4, r5
 800912e:	d109      	bne.n	8009144 <memmem+0x2e>
 8009130:	1e5c      	subs	r4, r3, #1
 8009132:	2c00      	cmp	r4, #0
 8009134:	d100      	bne.n	8009138 <memmem+0x22>
 8009136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009138:	5d07      	ldrb	r7, [r0, r4]
 800913a:	5d16      	ldrb	r6, [r2, r4]
 800913c:	42b7      	cmp	r7, r6
 800913e:	d101      	bne.n	8009144 <memmem+0x2e>
 8009140:	3c01      	subs	r4, #1
 8009142:	e7f6      	b.n	8009132 <memmem+0x1c>
 8009144:	3001      	adds	r0, #1
 8009146:	e7ec      	b.n	8009122 <memmem+0xc>

08009148 <_init>:
 8009148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914a:	46c0      	nop			; (mov r8, r8)
 800914c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914e:	bc08      	pop	{r3}
 8009150:	469e      	mov	lr, r3
 8009152:	4770      	bx	lr

08009154 <_fini>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800915a:	bc08      	pop	{r3}
 800915c:	469e      	mov	lr, r3
 800915e:	4770      	bx	lr
